
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800bb80  0800bb80  0001bb80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be50  0800be50  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800be50  0800be50  0001be50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be58  0800be58  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be58  0800be58  0001be58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be5c  0800be5c  0001be5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800be60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000099c  2000008c  0800beec  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a28  0800beec  00020a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148dc  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000260a  00000000  00000000  00034998  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001438  00000000  00000000  00036fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001330  00000000  00000000  000383e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f8cd  00000000  00000000  00039710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e945  00000000  00000000  00058fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb6e0  00000000  00000000  00067922  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133002  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e78  00000000  00000000  00133080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb64 	.word	0x0800bb64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800bb64 	.word	0x0800bb64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 b972 	b.w	8000f58 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9e08      	ldr	r6, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	4688      	mov	r8, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14b      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4615      	mov	r5, r2
 8000c9e:	d967      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0720 	rsb	r7, r2, #32
 8000caa:	fa01 f302 	lsl.w	r3, r1, r2
 8000cae:	fa20 f707 	lsr.w	r7, r0, r7
 8000cb2:	4095      	lsls	r5, r2
 8000cb4:	ea47 0803 	orr.w	r8, r7, r3
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc4:	fa1f fc85 	uxth.w	ip, r5
 8000cc8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ccc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cd0:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18eb      	adds	r3, r5, r3
 8000cda:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cde:	f080 811b 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8118 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000ce8:	3f02      	subs	r7, #2
 8000cea:	442b      	add	r3, r5
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d00:	45a4      	cmp	ip, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x290>
 8000d0e:	45a4      	cmp	ip, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x290>
 8000d14:	3802      	subs	r0, #2
 8000d16:	442c      	add	r4, r5
 8000d18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d1c:	eba4 040c 	sub.w	r4, r4, ip
 8000d20:	2700      	movs	r7, #0
 8000d22:	b11e      	cbz	r6, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xbe>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	f000 80eb 	beq.w	8000f12 <__udivmoddi4+0x286>
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d42:	4638      	mov	r0, r7
 8000d44:	4639      	mov	r1, r7
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f783 	clz	r7, r3
 8000d4e:	2f00      	cmp	r7, #0
 8000d50:	d147      	bne.n	8000de2 <__udivmoddi4+0x156>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd0>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80fa 	bhi.w	8000f50 <__udivmoddi4+0x2c4>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	4698      	mov	r8, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000d6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xe8>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 808f 	bne.w	8000e9c <__udivmoddi4+0x210>
 8000d7e:	1b49      	subs	r1, r1, r5
 8000d80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d84:	fa1f f885 	uxth.w	r8, r5
 8000d88:	2701      	movs	r7, #1
 8000d8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8e:	0c23      	lsrs	r3, r4, #16
 8000d90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb08 f10c 	mul.w	r1, r8, ip
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x124>
 8000da0:	18eb      	adds	r3, r5, r3
 8000da2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x122>
 8000da8:	4299      	cmp	r1, r3
 8000daa:	f200 80cd 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000dae:	4684      	mov	ip, r0
 8000db0:	1a59      	subs	r1, r3, r1
 8000db2:	b2a3      	uxth	r3, r4
 8000db4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dc0:	fb08 f800 	mul.w	r8, r8, r0
 8000dc4:	45a0      	cmp	r8, r4
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0x14c>
 8000dc8:	192c      	adds	r4, r5, r4
 8000dca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x14a>
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	f200 80b6 	bhi.w	8000f42 <__udivmoddi4+0x2b6>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000de0:	e79f      	b.n	8000d22 <__udivmoddi4+0x96>
 8000de2:	f1c7 0c20 	rsb	ip, r7, #32
 8000de6:	40bb      	lsls	r3, r7
 8000de8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000df0:	fa01 f407 	lsl.w	r4, r1, r7
 8000df4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e00:	4325      	orrs	r5, r4
 8000e02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e06:	0c2c      	lsrs	r4, r5, #16
 8000e08:	fb08 3319 	mls	r3, r8, r9, r3
 8000e0c:	fa1f fa8e 	uxth.w	sl, lr
 8000e10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e14:	fb09 f40a 	mul.w	r4, r9, sl
 8000e18:	429c      	cmp	r4, r3
 8000e1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x1b0>
 8000e24:	eb1e 0303 	adds.w	r3, lr, r3
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	f080 8087 	bcs.w	8000f3e <__udivmoddi4+0x2b2>
 8000e30:	429c      	cmp	r4, r3
 8000e32:	f240 8084 	bls.w	8000f3e <__udivmoddi4+0x2b2>
 8000e36:	f1a9 0902 	sub.w	r9, r9, #2
 8000e3a:	4473      	add	r3, lr
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	b2ad      	uxth	r5, r5
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e50:	45a2      	cmp	sl, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1da>
 8000e54:	eb1e 0404 	adds.w	r4, lr, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e5c:	d26b      	bcs.n	8000f36 <__udivmoddi4+0x2aa>
 8000e5e:	45a2      	cmp	sl, r4
 8000e60:	d969      	bls.n	8000f36 <__udivmoddi4+0x2aa>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4474      	add	r4, lr
 8000e66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	eba4 040a 	sub.w	r4, r4, sl
 8000e72:	454c      	cmp	r4, r9
 8000e74:	46c2      	mov	sl, r8
 8000e76:	464b      	mov	r3, r9
 8000e78:	d354      	bcc.n	8000f24 <__udivmoddi4+0x298>
 8000e7a:	d051      	beq.n	8000f20 <__udivmoddi4+0x294>
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d069      	beq.n	8000f54 <__udivmoddi4+0x2c8>
 8000e80:	ebb1 050a 	subs.w	r5, r1, sl
 8000e84:	eb64 0403 	sbc.w	r4, r4, r3
 8000e88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e8c:	40fd      	lsrs	r5, r7
 8000e8e:	40fc      	lsrs	r4, r7
 8000e90:	ea4c 0505 	orr.w	r5, ip, r5
 8000e94:	e9c6 5400 	strd	r5, r4, [r6]
 8000e98:	2700      	movs	r7, #0
 8000e9a:	e747      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea4:	4095      	lsls	r5, r2
 8000ea6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8000eae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eb2:	4338      	orrs	r0, r7
 8000eb4:	0c01      	lsrs	r1, r0, #16
 8000eb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eba:	fa1f f885 	uxth.w	r8, r5
 8000ebe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ec2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec6:	fb07 f308 	mul.w	r3, r7, r8
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x256>
 8000ed2:	1869      	adds	r1, r5, r1
 8000ed4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ed8:	d22f      	bcs.n	8000f3a <__udivmoddi4+0x2ae>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d92d      	bls.n	8000f3a <__udivmoddi4+0x2ae>
 8000ede:	3f02      	subs	r7, #2
 8000ee0:	4429      	add	r1, r5
 8000ee2:	1acb      	subs	r3, r1, r3
 8000ee4:	b281      	uxth	r1, r0
 8000ee6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb00 f308 	mul.w	r3, r0, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x27e>
 8000efa:	1869      	adds	r1, r5, r1
 8000efc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f00:	d217      	bcs.n	8000f32 <__udivmoddi4+0x2a6>
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d915      	bls.n	8000f32 <__udivmoddi4+0x2a6>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4429      	add	r1, r5
 8000f0a:	1ac9      	subs	r1, r1, r3
 8000f0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f10:	e73b      	b.n	8000d8a <__udivmoddi4+0xfe>
 8000f12:	4637      	mov	r7, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e709      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f18:	4607      	mov	r7, r0
 8000f1a:	e6e7      	b.n	8000cec <__udivmoddi4+0x60>
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f20:	4541      	cmp	r1, r8
 8000f22:	d2ab      	bcs.n	8000e7c <__udivmoddi4+0x1f0>
 8000f24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f28:	eb69 020e 	sbc.w	r2, r9, lr
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	4613      	mov	r3, r2
 8000f30:	e7a4      	b.n	8000e7c <__udivmoddi4+0x1f0>
 8000f32:	4660      	mov	r0, ip
 8000f34:	e7e9      	b.n	8000f0a <__udivmoddi4+0x27e>
 8000f36:	4618      	mov	r0, r3
 8000f38:	e795      	b.n	8000e66 <__udivmoddi4+0x1da>
 8000f3a:	4667      	mov	r7, ip
 8000f3c:	e7d1      	b.n	8000ee2 <__udivmoddi4+0x256>
 8000f3e:	4681      	mov	r9, r0
 8000f40:	e77c      	b.n	8000e3c <__udivmoddi4+0x1b0>
 8000f42:	3802      	subs	r0, #2
 8000f44:	442c      	add	r4, r5
 8000f46:	e747      	b.n	8000dd8 <__udivmoddi4+0x14c>
 8000f48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f4c:	442b      	add	r3, r5
 8000f4e:	e72f      	b.n	8000db0 <__udivmoddi4+0x124>
 8000f50:	4638      	mov	r0, r7
 8000f52:	e708      	b.n	8000d66 <__udivmoddi4+0xda>
 8000f54:	4637      	mov	r7, r6
 8000f56:	e6e9      	b.n	8000d2c <__udivmoddi4+0xa0>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <HAL_Init+0x40>)
 8000f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_Init+0x40>)
 8000f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_Init+0x40>)
 8000f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f001 fa07 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f008 fb0c 	bl	80095ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023c00 	.word	0x40023c00

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fa1f 	bl	8002402 <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fdc:	f001 f9e7 	bl	80023ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000024 	.word	0x20000024
 8000ff8:	20000004 	.word	0x20000004
 8000ffc:	20000000 	.word	0x20000000

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000004 	.word	0x20000004
 8001024:	200000dc 	.word	0x200000dc

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	200000dc 	.word	0x200000dc

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_Delay+0x40>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffde 	bl	8001028 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000004 	.word	0x20000004

08001084 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e033      	b.n	8001102 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d109      	bne.n	80010b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f008 faaa 	bl	80095fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d118      	bne.n	80010f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010ca:	f023 0302 	bic.w	r3, r3, #2
 80010ce:	f043 0202 	orr.w	r2, r3, #2
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fb80 	bl	80017dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f023 0303 	bic.w	r3, r3, #3
 80010ea:	f043 0201 	orr.w	r2, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40
 80010f2:	e001      	b.n	80010f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b02      	cmp	r3, #2
 8001126:	bf0c      	ite	eq
 8001128:	2301      	moveq	r3, #1
 800112a:	2300      	movne	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0320 	and.w	r3, r3, #32
 800113a:	2b20      	cmp	r3, #32
 800113c:	bf0c      	ite	eq
 800113e:	2301      	moveq	r3, #1
 8001140:	2300      	movne	r3, #0
 8001142:	b2db      	uxtb	r3, r3
 8001144:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d049      	beq.n	80011e0 <HAL_ADC_IRQHandler+0xd6>
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d046      	beq.n	80011e0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	2b00      	cmp	r3, #0
 800115c:	d105      	bne.n	800116a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d12b      	bne.n	80011d0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800117c:	2b00      	cmp	r3, #0
 800117e:	d127      	bne.n	80011d0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001186:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001198:	2b00      	cmp	r3, #0
 800119a:	d119      	bne.n	80011d0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0220 	bic.w	r2, r2, #32
 80011aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f043 0201 	orr.w	r2, r3, #1
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f008 f9d3 	bl	800957c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f06f 0212 	mvn.w	r2, #18
 80011de:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf0c      	ite	eq
 80011ee:	2301      	moveq	r3, #1
 80011f0:	2300      	movne	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001200:	2b80      	cmp	r3, #128	; 0x80
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
 800120a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d057      	beq.n	80012c2 <HAL_ADC_IRQHandler+0x1b8>
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d054      	beq.n	80012c2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	2b00      	cmp	r3, #0
 8001222:	d105      	bne.n	8001230 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d139      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001244:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001256:	2b00      	cmp	r3, #0
 8001258:	d12b      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001264:	2b00      	cmp	r3, #0
 8001266:	d124      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001272:	2b00      	cmp	r3, #0
 8001274:	d11d      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800127a:	2b00      	cmp	r3, #0
 800127c:	d119      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800128c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d105      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 fd06 	bl	8001cc4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f06f 020c 	mvn.w	r2, #12
 80012c0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e2:	2b40      	cmp	r3, #64	; 0x40
 80012e4:	bf0c      	ite	eq
 80012e6:	2301      	moveq	r3, #1
 80012e8:	2300      	movne	r3, #0
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d017      	beq.n	8001324 <HAL_ADC_IRQHandler+0x21a>
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d014      	beq.n	8001324 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	d10d      	bne.n	8001324 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f92b 	bl	8001570 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f06f 0201 	mvn.w	r2, #1
 8001322:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0320 	and.w	r3, r3, #32
 800132e:	2b20      	cmp	r3, #32
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001348:	bf0c      	ite	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	2300      	movne	r3, #0
 800134e:	b2db      	uxtb	r3, r3
 8001350:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d015      	beq.n	8001384 <HAL_ADC_IRQHandler+0x27a>
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d012      	beq.n	8001384 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f043 0202 	orr.w	r2, r3, #2
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f06f 0220 	mvn.w	r2, #32
 8001372:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f905 	bl	8001584 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f06f 0220 	mvn.w	r2, #32
 8001382:	601a      	str	r2, [r3, #0]
  }
}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <HAL_ADC_Start_DMA+0x1e>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e0cc      	b.n	8001544 <HAL_ADC_Start_DMA+0x1b8>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d018      	beq.n	80013f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0201 	orr.w	r2, r2, #1
 80013ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013d0:	4b5e      	ldr	r3, [pc, #376]	; (800154c <HAL_ADC_Start_DMA+0x1c0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a5e      	ldr	r2, [pc, #376]	; (8001550 <HAL_ADC_Start_DMA+0x1c4>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	0c9a      	lsrs	r2, r3, #18
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80013e4:	e002      	b.n	80013ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f9      	bne.n	80013e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	f040 80a0 	bne.w	8001542 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800140a:	f023 0301 	bic.w	r3, r3, #1
 800140e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001420:	2b00      	cmp	r3, #0
 8001422:	d007      	beq.n	8001434 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800142c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800143c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001440:	d106      	bne.n	8001450 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f023 0206 	bic.w	r2, r3, #6
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	645a      	str	r2, [r3, #68]	; 0x44
 800144e:	e002      	b.n	8001456 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_ADC_Start_DMA+0x1c8>)
 8001460:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001466:	4a3c      	ldr	r2, [pc, #240]	; (8001558 <HAL_ADC_Start_DMA+0x1cc>)
 8001468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146e:	4a3b      	ldr	r2, [pc, #236]	; (800155c <HAL_ADC_Start_DMA+0x1d0>)
 8001470:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001476:	4a3a      	ldr	r2, [pc, #232]	; (8001560 <HAL_ADC_Start_DMA+0x1d4>)
 8001478:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001482:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001492:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	334c      	adds	r3, #76	; 0x4c
 80014ae:	4619      	mov	r1, r3
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f001 f860 	bl	8002578 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d12a      	bne.n	800151a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a26      	ldr	r2, [pc, #152]	; (8001564 <HAL_ADC_Start_DMA+0x1d8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d015      	beq.n	80014fa <HAL_ADC_Start_DMA+0x16e>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a25      	ldr	r2, [pc, #148]	; (8001568 <HAL_ADC_Start_DMA+0x1dc>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d105      	bne.n	80014e4 <HAL_ADC_Start_DMA+0x158>
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_ADC_Start_DMA+0x1c8>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 031f 	and.w	r3, r3, #31
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00a      	beq.n	80014fa <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a20      	ldr	r2, [pc, #128]	; (800156c <HAL_ADC_Start_DMA+0x1e0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d129      	bne.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_ADC_Start_DMA+0x1c8>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 031f 	and.w	r3, r3, #31
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	d823      	bhi.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d11c      	bne.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	e013      	b.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a11      	ldr	r2, [pc, #68]	; (8001564 <HAL_ADC_Start_DMA+0x1d8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d10e      	bne.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d107      	bne.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001540:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000024 	.word	0x20000024
 8001550:	431bde83 	.word	0x431bde83
 8001554:	40012300 	.word	0x40012300
 8001558:	080019d5 	.word	0x080019d5
 800155c:	08001a8f 	.word	0x08001a8f
 8001560:	08001aab 	.word	0x08001aab
 8001564:	40012000 	.word	0x40012000
 8001568:	40012100 	.word	0x40012100
 800156c:	40012200 	.word	0x40012200

08001570 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x1c>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e105      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x228>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b09      	cmp	r3, #9
 80015c2:	d925      	bls.n	8001610 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68d9      	ldr	r1, [r3, #12]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	3b1e      	subs	r3, #30
 80015da:	2207      	movs	r2, #7
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43da      	mvns	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	400a      	ands	r2, r1
 80015e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68d9      	ldr	r1, [r3, #12]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	4603      	mov	r3, r0
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4403      	add	r3, r0
 8001602:	3b1e      	subs	r3, #30
 8001604:	409a      	lsls	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	e022      	b.n	8001656 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6919      	ldr	r1, [r3, #16]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	2207      	movs	r2, #7
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	400a      	ands	r2, r1
 8001632:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6919      	ldr	r1, [r3, #16]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	b29b      	uxth	r3, r3
 8001644:	4618      	mov	r0, r3
 8001646:	4603      	mov	r3, r0
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4403      	add	r3, r0
 800164c:	409a      	lsls	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b06      	cmp	r3, #6
 800165c:	d824      	bhi.n	80016a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	3b05      	subs	r3, #5
 8001670:	221f      	movs	r2, #31
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	400a      	ands	r2, r1
 800167e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	b29b      	uxth	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	3b05      	subs	r3, #5
 800169a:	fa00 f203 	lsl.w	r2, r0, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	635a      	str	r2, [r3, #52]	; 0x34
 80016a6:	e04c      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b0c      	cmp	r3, #12
 80016ae:	d824      	bhi.n	80016fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	3b23      	subs	r3, #35	; 0x23
 80016c2:	221f      	movs	r2, #31
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43da      	mvns	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	400a      	ands	r2, r1
 80016d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	3b23      	subs	r3, #35	; 0x23
 80016ec:	fa00 f203 	lsl.w	r2, r0, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	631a      	str	r2, [r3, #48]	; 0x30
 80016f8:	e023      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b41      	subs	r3, #65	; 0x41
 800170c:	221f      	movs	r2, #31
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	400a      	ands	r2, r1
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	3b41      	subs	r3, #65	; 0x41
 8001736:	fa00 f203 	lsl.w	r2, r0, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_ADC_ConfigChannel+0x234>)
 8001744:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a21      	ldr	r2, [pc, #132]	; (80017d0 <HAL_ADC_ConfigChannel+0x238>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d109      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x1cc>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b12      	cmp	r3, #18
 8001756:	d105      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <HAL_ADC_ConfigChannel+0x238>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d123      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x21e>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b10      	cmp	r3, #16
 8001774:	d003      	beq.n	800177e <HAL_ADC_ConfigChannel+0x1e6>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b11      	cmp	r3, #17
 800177c:	d11b      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b10      	cmp	r3, #16
 8001790:	d111      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <HAL_ADC_ConfigChannel+0x240>)
 8001798:	fba2 2303 	umull	r2, r3, r2, r3
 800179c:	0c9a      	lsrs	r2, r3, #18
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017a8:	e002      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f9      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	40012000 	.word	0x40012000
 80017d4:	20000024 	.word	0x20000024
 80017d8:	431bde83 	.word	0x431bde83

080017dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e4:	4b79      	ldr	r3, [pc, #484]	; (80019cc <ADC_Init+0x1f0>)
 80017e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	431a      	orrs	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001810:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6859      	ldr	r1, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	021a      	lsls	r2, r3, #8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001834:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001856:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6899      	ldr	r1, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <ADC_Init+0x1f4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d022      	beq.n	80018ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001882:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6899      	ldr	r1, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6899      	ldr	r1, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	e00f      	b.n	80018da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0202 	bic.w	r2, r2, #2
 80018e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6899      	ldr	r1, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7e1b      	ldrb	r3, [r3, #24]
 80018f4:	005a      	lsls	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d01b      	beq.n	8001940 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001916:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001926:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6859      	ldr	r1, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	3b01      	subs	r3, #1
 8001934:	035a      	lsls	r2, r3, #13
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	e007      	b.n	8001950 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800194e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	3b01      	subs	r3, #1
 800196c:	051a      	lsls	r2, r3, #20
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6899      	ldr	r1, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001992:	025a      	lsls	r2, r3, #9
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6899      	ldr	r1, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	029a      	lsls	r2, r3, #10
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	609a      	str	r2, [r3, #8]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	40012300 	.word	0x40012300
 80019d0:	0f000001 	.word	0x0f000001

080019d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d13c      	bne.n	8001a68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d12b      	bne.n	8001a60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d127      	bne.n	8001a60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d119      	bne.n	8001a60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0220 	bic.w	r2, r2, #32
 8001a3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f007 fd8b 	bl	800957c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a66:	e00e      	b.n	8001a86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fd85 	bl	8001584 <HAL_ADC_ErrorCallback>
}
 8001a7a:	e004      	b.n	8001a86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	4798      	blx	r3
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f007 fd5d 	bl	800955c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2240      	movs	r2, #64	; 0x40
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f043 0204 	orr.w	r2, r3, #4
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f7ff fd5a 	bl	8001584 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_ADCEx_InjectedStart+0x22>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e09d      	b.n	8001c36 <HAL_ADCEx_InjectedStart+0x15e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d018      	beq.n	8001b42 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b20:	4b48      	ldr	r3, [pc, #288]	; (8001c44 <HAL_ADCEx_InjectedStart+0x16c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a48      	ldr	r2, [pc, #288]	; (8001c48 <HAL_ADCEx_InjectedStart+0x170>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0c9a      	lsrs	r2, r3, #18
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b34:	e002      	b.n	8001b3c <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f9      	bne.n	8001b36 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d171      	bne.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f06f 0204 	mvn.w	r2, #4
 8001b86:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <HAL_ADCEx_InjectedStart+0x174>)
 8001b8a:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d124      	bne.n	8001be2 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bf0c      	ite	eq
 8001ba6:	2301      	moveq	r3, #1
 8001ba8:	2300      	movne	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d034      	beq.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d031      	beq.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	e028      	b.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf0c      	ite	eq
 8001c06:	2301      	moveq	r3, #1
 8001c08:	2300      	movne	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <HAL_ADCEx_InjectedStart+0x178>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d10d      	bne.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00a      	beq.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d007      	beq.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c32:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000024 	.word	0x20000024
 8001c48:	431bde83 	.word	0x431bde83
 8001c4c:	40012300 	.word	0x40012300
 8001c50:	40012000 	.word	0x40012000

08001c54 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f06f 0204 	mvn.w	r2, #4
 8001c6a:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d81f      	bhi.n	8001cb4 <HAL_ADCEx_InjectedGetValue+0x60>
 8001c74:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <HAL_ADCEx_InjectedGetValue+0x28>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001cab 	.word	0x08001cab
 8001c80:	08001ca1 	.word	0x08001ca1
 8001c84:	08001c97 	.word	0x08001c97
 8001c88:	08001c8d 	.word	0x08001c8d
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c92:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001c94:	e00f      	b.n	8001cb6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9c:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001c9e:	e00a      	b.n	8001cb6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001ca8:	e005      	b.n	8001cb6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb0:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001cb2:	e000      	b.n	8001cb6 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8001cb4:	bf00      	nop
  }
  return tmp;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e17a      	b.n	8001fe6 <HAL_ADCEx_InjectedConfigChannel+0x30e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b09      	cmp	r3, #9
 8001cfe:	d925      	bls.n	8001d4c <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68d9      	ldr	r1, [r3, #12]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	3b1e      	subs	r3, #30
 8001d16:	2207      	movs	r2, #7
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43da      	mvns	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	400a      	ands	r2, r1
 8001d24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68d9      	ldr	r1, [r3, #12]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	4603      	mov	r3, r0
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4403      	add	r3, r0
 8001d3e:	3b1e      	subs	r3, #30
 8001d40:	409a      	lsls	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	e022      	b.n	8001d92 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6919      	ldr	r1, [r3, #16]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	2207      	movs	r2, #7
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6919      	ldr	r1, [r3, #16]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	4603      	mov	r3, r0
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4403      	add	r3, r0
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	051a      	lsls	r2, r3, #20
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	3303      	adds	r3, #3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	221f      	movs	r2, #31
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43da      	mvns	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	400a      	ands	r2, r1
 8001de8:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	3303      	adds	r3, #3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	fa00 f203 	lsl.w	r2, r0, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	4a73      	ldr	r2, [pc, #460]	; (8001ff4 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d022      	beq.n	8001e70 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001e38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6899      	ldr	r1, [r3, #8]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	699a      	ldr	r2, [r3, #24]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6899      	ldr	r1, [r3, #8]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	69da      	ldr	r2, [r3, #28]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	e00f      	b.n	8001e90 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001e7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e8e:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	7d5b      	ldrb	r3, [r3, #21]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	e007      	b.n	8001eba <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eb8:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	7d1b      	ldrb	r3, [r3, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d008      	beq.n	8001ed4 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	e007      	b.n	8001ee4 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ee2:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d017      	beq.n	8001f1c <HAL_ADCEx_InjectedConfigChannel+0x244>
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d029      	beq.n	8001f44 <HAL_ADCEx_InjectedConfigChannel+0x26c>
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d13b      	bne.n	8001f6c <HAL_ADCEx_InjectedConfigChannel+0x294>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f02:	f023 030f 	bic.w	r3, r3, #15
 8001f06:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6959      	ldr	r1, [r3, #20]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	615a      	str	r2, [r3, #20]
      break;
 8001f1a:	e03b      	b.n	8001f94 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f2a:	f023 030f 	bic.w	r3, r3, #15
 8001f2e:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6999      	ldr	r1, [r3, #24]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	619a      	str	r2, [r3, #24]
      break;
 8001f42:	e027      	b.n	8001f94 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f52:	f023 030f 	bic.w	r3, r3, #15
 8001f56:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69d9      	ldr	r1, [r3, #28]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	61da      	str	r2, [r3, #28]
      break;
 8001f6a:	e013      	b.n	8001f94 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f7a:	f023 030f 	bic.w	r3, r3, #15
 8001f7e:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6a19      	ldr	r1, [r3, #32]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	621a      	str	r2, [r3, #32]
      break;
 8001f92:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8001f96:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d109      	bne.n	8001fb6 <HAL_ADCEx_InjectedConfigChannel+0x2de>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b12      	cmp	r3, #18
 8001fa8:	d105      	bne.n	8001fb6 <HAL_ADCEx_InjectedConfigChannel+0x2de>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d10d      	bne.n	8001fdc <HAL_ADCEx_InjectedConfigChannel+0x304>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b10      	cmp	r3, #16
 8001fc6:	d003      	beq.n	8001fd0 <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b11      	cmp	r3, #17
 8001fce:	d105      	bne.n	8001fdc <HAL_ADCEx_InjectedConfigChannel+0x304>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	000f0001 	.word	0x000f0001
 8001ff8:	40012300 	.word	0x40012300
 8001ffc:	40012000 	.word	0x40012000

08002000 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0ed      	b.n	80021ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f007 fcd6 	bl	80099d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0202 	bic.w	r2, r2, #2
 8002032:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002034:	f7fe fff8 	bl	8001028 <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800203a:	e012      	b.n	8002062 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800203c:	f7fe fff4 	bl	8001028 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b0a      	cmp	r3, #10
 8002048:	d90b      	bls.n	8002062 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2205      	movs	r2, #5
 800205a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e0c5      	b.n	80021ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1e5      	bne.n	800203c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002080:	f7fe ffd2 	bl	8001028 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002086:	e012      	b.n	80020ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002088:	f7fe ffce 	bl	8001028 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b0a      	cmp	r3, #10
 8002094:	d90b      	bls.n	80020ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2205      	movs	r2, #5
 80020a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e09f      	b.n	80021ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0e5      	beq.n	8002088 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	7e1b      	ldrb	r3, [r3, #24]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d108      	bne.n	80020d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e007      	b.n	80020e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7e5b      	ldrb	r3, [r3, #25]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d108      	bne.n	8002100 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e007      	b.n	8002110 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800210e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7e9b      	ldrb	r3, [r3, #26]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d108      	bne.n	800212a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0220 	orr.w	r2, r2, #32
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e007      	b.n	800213a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0220 	bic.w	r2, r2, #32
 8002138:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7edb      	ldrb	r3, [r3, #27]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d108      	bne.n	8002154 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0210 	bic.w	r2, r2, #16
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e007      	b.n	8002164 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0210 	orr.w	r2, r2, #16
 8002162:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7f1b      	ldrb	r3, [r3, #28]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d108      	bne.n	800217e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0208 	orr.w	r2, r2, #8
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e007      	b.n	800218e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0208 	bic.w	r2, r2, #8
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7f5b      	ldrb	r3, [r3, #29]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d108      	bne.n	80021a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0204 	orr.w	r2, r2, #4
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	e007      	b.n	80021b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0204 	bic.w	r2, r2, #4
 80021b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	ea42 0103 	orr.w	r1, r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	1e5a      	subs	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0b      	blt.n	8002286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4907      	ldr	r1, [pc, #28]	; (8002294 <__NVIC_EnableIRQ+0x38>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002378:	f7ff ff8e 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff29 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff3e 	bl	8002240 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff8e 	bl	80022ec <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5d 	bl	8002298 <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff31 	bl	800225c <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffa2 	bl	8002354 <SysTick_Config>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7fe fdfe 	bl	8001028 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e099      	b.n	800256c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002458:	e00f      	b.n	800247a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800245a:	f7fe fde5 	bl	8001028 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b05      	cmp	r3, #5
 8002466:	d908      	bls.n	800247a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2203      	movs	r2, #3
 8002472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e078      	b.n	800256c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e8      	bne.n	800245a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4b38      	ldr	r3, [pc, #224]	; (8002574 <HAL_DMA_Init+0x158>)
 8002494:	4013      	ands	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d107      	bne.n	80024e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	4313      	orrs	r3, r2
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f023 0307 	bic.w	r3, r3, #7
 80024fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	4313      	orrs	r3, r2
 8002504:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	2b04      	cmp	r3, #4
 800250c:	d117      	bne.n	800253e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00e      	beq.n	800253e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fae5 	bl	8002af0 <DMA_CheckFifoParam>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2240      	movs	r2, #64	; 0x40
 8002530:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800253a:	2301      	movs	r3, #1
 800253c:	e016      	b.n	800256c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fa9c 	bl	8002a84 <DMA_CalcBaseAndBitshift>
 800254c:	4603      	mov	r3, r0
 800254e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	223f      	movs	r2, #63	; 0x3f
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	f010803f 	.word	0xf010803f

08002578 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_DMA_Start_IT+0x26>
 800259a:	2302      	movs	r3, #2
 800259c:	e040      	b.n	8002620 <HAL_DMA_Start_IT+0xa8>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d12f      	bne.n	8002612 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2202      	movs	r2, #2
 80025b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fa2e 	bl	8002a28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	223f      	movs	r2, #63	; 0x3f
 80025d2:	409a      	lsls	r2, r3
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0216 	orr.w	r2, r2, #22
 80025e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0208 	orr.w	r2, r2, #8
 80025fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e005      	b.n	800261e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800261a:	2302      	movs	r3, #2
 800261c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800261e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d004      	beq.n	8002646 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e00c      	b.n	8002660 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2205      	movs	r2, #5
 800264a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002678:	4b92      	ldr	r3, [pc, #584]	; (80028c4 <HAL_DMA_IRQHandler+0x258>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a92      	ldr	r2, [pc, #584]	; (80028c8 <HAL_DMA_IRQHandler+0x25c>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0a9b      	lsrs	r3, r3, #10
 8002684:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	2208      	movs	r2, #8
 8002698:	409a      	lsls	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d01a      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0204 	bic.w	r2, r2, #4
 80026be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	2208      	movs	r2, #8
 80026c6:	409a      	lsls	r2, r3
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	2201      	movs	r2, #1
 80026de:	409a      	lsls	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d012      	beq.n	800270e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	2201      	movs	r2, #1
 80026fc:	409a      	lsls	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f043 0202 	orr.w	r2, r3, #2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002712:	2204      	movs	r2, #4
 8002714:	409a      	lsls	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d012      	beq.n	8002744 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00b      	beq.n	8002744 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	2204      	movs	r2, #4
 8002732:	409a      	lsls	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273c:	f043 0204 	orr.w	r2, r3, #4
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	2210      	movs	r2, #16
 800274a:	409a      	lsls	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d043      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d03c      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	2210      	movs	r2, #16
 8002768:	409a      	lsls	r2, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d018      	beq.n	80027ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d108      	bne.n	800279c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d024      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
 800279a:	e01f      	b.n	80027dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01b      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
 80027ac:	e016      	b.n	80027dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d107      	bne.n	80027cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0208 	bic.w	r2, r2, #8
 80027ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	2220      	movs	r2, #32
 80027e2:	409a      	lsls	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 808e 	beq.w	800290a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8086 	beq.w	800290a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	2220      	movs	r2, #32
 8002804:	409a      	lsls	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b05      	cmp	r3, #5
 8002814:	d136      	bne.n	8002884 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0216 	bic.w	r2, r2, #22
 8002824:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002834:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d103      	bne.n	8002846 <HAL_DMA_IRQHandler+0x1da>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0208 	bic.w	r2, r2, #8
 8002854:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	223f      	movs	r2, #63	; 0x3f
 800285c:	409a      	lsls	r2, r3
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002876:	2b00      	cmp	r3, #0
 8002878:	d07d      	beq.n	8002976 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
        }
        return;
 8002882:	e078      	b.n	8002976 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01c      	beq.n	80028cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d108      	bne.n	80028b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d030      	beq.n	800290a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
 80028b0:	e02b      	b.n	800290a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d027      	beq.n	800290a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
 80028c2:	e022      	b.n	800290a <HAL_DMA_IRQHandler+0x29e>
 80028c4:	20000024 	.word	0x20000024
 80028c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10f      	bne.n	80028fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0210 	bic.w	r2, r2, #16
 80028e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290e:	2b00      	cmp	r3, #0
 8002910:	d032      	beq.n	8002978 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d022      	beq.n	8002964 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2205      	movs	r2, #5
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0201 	bic.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	3301      	adds	r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	429a      	cmp	r2, r3
 8002940:	d307      	bcc.n	8002952 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f2      	bne.n	8002936 <HAL_DMA_IRQHandler+0x2ca>
 8002950:	e000      	b.n	8002954 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002952:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
 8002974:	e000      	b.n	8002978 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002976:	bf00      	nop
    }
  }
}
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop

08002980 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	460b      	mov	r3, r1
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_DMA_RegisterCallback+0x20>
 800299c:	2302      	movs	r3, #2
 800299e:	e03c      	b.n	8002a1a <HAL_DMA_RegisterCallback+0x9a>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d129      	bne.n	8002a08 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 80029b4:	7afb      	ldrb	r3, [r7, #11]
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d829      	bhi.n	8002a0e <HAL_DMA_RegisterCallback+0x8e>
 80029ba:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <HAL_DMA_RegisterCallback+0x40>)
 80029bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c0:	080029d9 	.word	0x080029d9
 80029c4:	080029e1 	.word	0x080029e1
 80029c8:	080029e9 	.word	0x080029e9
 80029cc:	080029f1 	.word	0x080029f1
 80029d0:	080029f9 	.word	0x080029f9
 80029d4:	08002a01 	.word	0x08002a01
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80029de:	e017      	b.n	8002a10 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80029e6:	e013      	b.n	8002a10 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80029ee:	e00f      	b.n	8002a10 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80029f6:	e00b      	b.n	8002a10 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80029fe:	e007      	b.n	8002a10 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002a06:	e003      	b.n	8002a10 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	75fb      	strb	r3, [r7, #23]
 8002a0c:	e000      	b.n	8002a10 <HAL_DMA_RegisterCallback+0x90>
      break;
 8002a0e:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop

08002a28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b40      	cmp	r3, #64	; 0x40
 8002a54:	d108      	bne.n	8002a68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a66:	e007      	b.n	8002a78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	60da      	str	r2, [r3, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	3b10      	subs	r3, #16
 8002a94:	4a14      	ldr	r2, [pc, #80]	; (8002ae8 <DMA_CalcBaseAndBitshift+0x64>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a9e:	4a13      	ldr	r2, [pc, #76]	; (8002aec <DMA_CalcBaseAndBitshift+0x68>)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d909      	bls.n	8002ac6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aba:	f023 0303 	bic.w	r3, r3, #3
 8002abe:	1d1a      	adds	r2, r3, #4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ac4:	e007      	b.n	8002ad6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	aaaaaaab 	.word	0xaaaaaaab
 8002aec:	0800bc24 	.word	0x0800bc24

08002af0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d11f      	bne.n	8002b4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d855      	bhi.n	8002bbc <DMA_CheckFifoParam+0xcc>
 8002b10:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <DMA_CheckFifoParam+0x28>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002b29 	.word	0x08002b29
 8002b1c:	08002b3b 	.word	0x08002b3b
 8002b20:	08002b29 	.word	0x08002b29
 8002b24:	08002bbd 	.word	0x08002bbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d045      	beq.n	8002bc0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b38:	e042      	b.n	8002bc0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b42:	d13f      	bne.n	8002bc4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b48:	e03c      	b.n	8002bc4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b52:	d121      	bne.n	8002b98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d836      	bhi.n	8002bc8 <DMA_CheckFifoParam+0xd8>
 8002b5a:	a201      	add	r2, pc, #4	; (adr r2, 8002b60 <DMA_CheckFifoParam+0x70>)
 8002b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b60:	08002b71 	.word	0x08002b71
 8002b64:	08002b77 	.word	0x08002b77
 8002b68:	08002b71 	.word	0x08002b71
 8002b6c:	08002b89 	.word	0x08002b89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      break;
 8002b74:	e02f      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d024      	beq.n	8002bcc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b86:	e021      	b.n	8002bcc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b90:	d11e      	bne.n	8002bd0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b96:	e01b      	b.n	8002bd0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d902      	bls.n	8002ba4 <DMA_CheckFifoParam+0xb4>
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d003      	beq.n	8002baa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ba2:	e018      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba8:	e015      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00e      	beq.n	8002bd4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8002bba:	e00b      	b.n	8002bd4 <DMA_CheckFifoParam+0xe4>
      break;
 8002bbc:	bf00      	nop
 8002bbe:	e00a      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002bc0:	bf00      	nop
 8002bc2:	e008      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002bc4:	bf00      	nop
 8002bc6:	e006      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002bc8:	bf00      	nop
 8002bca:	e004      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002bcc:	bf00      	nop
 8002bce:	e002      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      break;   
 8002bd0:	bf00      	nop
 8002bd2:	e000      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002bd4:	bf00      	nop
    }
  } 
  
  return status; 
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	e16b      	b.n	8002ed8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c00:	2201      	movs	r2, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4013      	ands	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	f040 815a 	bne.w	8002ed2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d00b      	beq.n	8002c3e <HAL_GPIO_Init+0x5a>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d007      	beq.n	8002c3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c32:	2b11      	cmp	r3, #17
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b12      	cmp	r3, #18
 8002c3c:	d130      	bne.n	8002ca0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	2203      	movs	r2, #3
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c74:	2201      	movs	r2, #1
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 0201 	and.w	r2, r3, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0xfc>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b12      	cmp	r3, #18
 8002cde:	d123      	bne.n	8002d28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	08da      	lsrs	r2, r3, #3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3208      	adds	r2, #8
 8002ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	220f      	movs	r2, #15
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	08da      	lsrs	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3208      	adds	r2, #8
 8002d22:	69b9      	ldr	r1, [r7, #24]
 8002d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2203      	movs	r2, #3
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0203 	and.w	r2, r3, #3
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80b4 	beq.w	8002ed2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	4b5f      	ldr	r3, [pc, #380]	; (8002eec <HAL_GPIO_Init+0x308>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	4a5e      	ldr	r2, [pc, #376]	; (8002eec <HAL_GPIO_Init+0x308>)
 8002d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d78:	6453      	str	r3, [r2, #68]	; 0x44
 8002d7a:	4b5c      	ldr	r3, [pc, #368]	; (8002eec <HAL_GPIO_Init+0x308>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d86:	4a5a      	ldr	r2, [pc, #360]	; (8002ef0 <HAL_GPIO_Init+0x30c>)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	089b      	lsrs	r3, r3, #2
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	220f      	movs	r2, #15
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a51      	ldr	r2, [pc, #324]	; (8002ef4 <HAL_GPIO_Init+0x310>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d02b      	beq.n	8002e0a <HAL_GPIO_Init+0x226>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a50      	ldr	r2, [pc, #320]	; (8002ef8 <HAL_GPIO_Init+0x314>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d025      	beq.n	8002e06 <HAL_GPIO_Init+0x222>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a4f      	ldr	r2, [pc, #316]	; (8002efc <HAL_GPIO_Init+0x318>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01f      	beq.n	8002e02 <HAL_GPIO_Init+0x21e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a4e      	ldr	r2, [pc, #312]	; (8002f00 <HAL_GPIO_Init+0x31c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d019      	beq.n	8002dfe <HAL_GPIO_Init+0x21a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4d      	ldr	r2, [pc, #308]	; (8002f04 <HAL_GPIO_Init+0x320>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_GPIO_Init+0x216>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a4c      	ldr	r2, [pc, #304]	; (8002f08 <HAL_GPIO_Init+0x324>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00d      	beq.n	8002df6 <HAL_GPIO_Init+0x212>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a4b      	ldr	r2, [pc, #300]	; (8002f0c <HAL_GPIO_Init+0x328>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <HAL_GPIO_Init+0x20e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a4a      	ldr	r2, [pc, #296]	; (8002f10 <HAL_GPIO_Init+0x32c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_GPIO_Init+0x20a>
 8002dea:	2307      	movs	r3, #7
 8002dec:	e00e      	b.n	8002e0c <HAL_GPIO_Init+0x228>
 8002dee:	2308      	movs	r3, #8
 8002df0:	e00c      	b.n	8002e0c <HAL_GPIO_Init+0x228>
 8002df2:	2306      	movs	r3, #6
 8002df4:	e00a      	b.n	8002e0c <HAL_GPIO_Init+0x228>
 8002df6:	2305      	movs	r3, #5
 8002df8:	e008      	b.n	8002e0c <HAL_GPIO_Init+0x228>
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	e006      	b.n	8002e0c <HAL_GPIO_Init+0x228>
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e004      	b.n	8002e0c <HAL_GPIO_Init+0x228>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e002      	b.n	8002e0c <HAL_GPIO_Init+0x228>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <HAL_GPIO_Init+0x228>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	f002 0203 	and.w	r2, r2, #3
 8002e12:	0092      	lsls	r2, r2, #2
 8002e14:	4093      	lsls	r3, r2
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e1c:	4934      	ldr	r1, [pc, #208]	; (8002ef0 <HAL_GPIO_Init+0x30c>)
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	089b      	lsrs	r3, r3, #2
 8002e22:	3302      	adds	r3, #2
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e2a:	4b3a      	ldr	r3, [pc, #232]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e4e:	4a31      	ldr	r2, [pc, #196]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e54:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e78:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e7e:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ea2:	4a1c      	ldr	r2, [pc, #112]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ecc:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2b0f      	cmp	r3, #15
 8002edc:	f67f ae90 	bls.w	8002c00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	3724      	adds	r7, #36	; 0x24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40013800 	.word	0x40013800
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	40020400 	.word	0x40020400
 8002efc:	40020800 	.word	0x40020800
 8002f00:	40020c00 	.word	0x40020c00
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40021400 	.word	0x40021400
 8002f0c:	40021800 	.word	0x40021800
 8002f10:	40021c00 	.word	0x40021c00
 8002f14:	40013c00 	.word	0x40013c00

08002f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
 8002f24:	4613      	mov	r3, r2
 8002f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f28:	787b      	ldrb	r3, [r7, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f2e:	887a      	ldrh	r2, [r7, #2]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f34:	e003      	b.n	8002f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f36:	887b      	ldrh	r3, [r7, #2]
 8002f38:	041a      	lsls	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	619a      	str	r2, [r3, #24]
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	460b      	mov	r3, r1
 8002f54:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	887b      	ldrh	r3, [r7, #2]
 8002f5c:	401a      	ands	r2, r3
 8002f5e:	887b      	ldrh	r3, [r7, #2]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d104      	bne.n	8002f6e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f64:	887b      	ldrh	r3, [r7, #2]
 8002f66:	041a      	lsls	r2, r3, #16
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002f6c:	e002      	b.n	8002f74 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	619a      	str	r2, [r3, #24]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d006      	beq.n	8002fa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f96:	4a05      	ldr	r2, [pc, #20]	; (8002fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f9c:	88fb      	ldrh	r3, [r7, #6]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f006 f81c 	bl	8008fdc <HAL_GPIO_EXTI_Callback>
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40013c00 	.word	0x40013c00

08002fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e11f      	b.n	8003202 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f006 fd42 	bl	8009a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2224      	movs	r2, #36	; 0x24
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003002:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003012:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003014:	f001 fb8e 	bl	8004734 <HAL_RCC_GetPCLK1Freq>
 8003018:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4a7b      	ldr	r2, [pc, #492]	; (800320c <HAL_I2C_Init+0x25c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d807      	bhi.n	8003034 <HAL_I2C_Init+0x84>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a7a      	ldr	r2, [pc, #488]	; (8003210 <HAL_I2C_Init+0x260>)
 8003028:	4293      	cmp	r3, r2
 800302a:	bf94      	ite	ls
 800302c:	2301      	movls	r3, #1
 800302e:	2300      	movhi	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e006      	b.n	8003042 <HAL_I2C_Init+0x92>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a77      	ldr	r2, [pc, #476]	; (8003214 <HAL_I2C_Init+0x264>)
 8003038:	4293      	cmp	r3, r2
 800303a:	bf94      	ite	ls
 800303c:	2301      	movls	r3, #1
 800303e:	2300      	movhi	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0db      	b.n	8003202 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a72      	ldr	r2, [pc, #456]	; (8003218 <HAL_I2C_Init+0x268>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0c9b      	lsrs	r3, r3, #18
 8003054:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a64      	ldr	r2, [pc, #400]	; (800320c <HAL_I2C_Init+0x25c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d802      	bhi.n	8003084 <HAL_I2C_Init+0xd4>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	3301      	adds	r3, #1
 8003082:	e009      	b.n	8003098 <HAL_I2C_Init+0xe8>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	4a63      	ldr	r2, [pc, #396]	; (800321c <HAL_I2C_Init+0x26c>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	3301      	adds	r3, #1
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	430b      	orrs	r3, r1
 800309e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4956      	ldr	r1, [pc, #344]	; (800320c <HAL_I2C_Init+0x25c>)
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d80d      	bhi.n	80030d4 <HAL_I2C_Init+0x124>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1e59      	subs	r1, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c6:	3301      	adds	r3, #1
 80030c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	bf38      	it	cc
 80030d0:	2304      	movcc	r3, #4
 80030d2:	e04f      	b.n	8003174 <HAL_I2C_Init+0x1c4>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d111      	bne.n	8003100 <HAL_I2C_Init+0x150>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	440b      	add	r3, r1
 80030ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e012      	b.n	8003126 <HAL_I2C_Init+0x176>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1e58      	subs	r0, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	0099      	lsls	r1, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Init+0x17e>
 800312a:	2301      	movs	r3, #1
 800312c:	e022      	b.n	8003174 <HAL_I2C_Init+0x1c4>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10e      	bne.n	8003154 <HAL_I2C_Init+0x1a4>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1e58      	subs	r0, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	440b      	add	r3, r1
 8003144:	fbb0 f3f3 	udiv	r3, r0, r3
 8003148:	3301      	adds	r3, #1
 800314a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003152:	e00f      	b.n	8003174 <HAL_I2C_Init+0x1c4>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1e58      	subs	r0, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	0099      	lsls	r1, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	6809      	ldr	r1, [r1, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6911      	ldr	r1, [r2, #16]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	4311      	orrs	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	000186a0 	.word	0x000186a0
 8003210:	001e847f 	.word	0x001e847f
 8003214:	003d08ff 	.word	0x003d08ff
 8003218:	431bde83 	.word	0x431bde83
 800321c:	10624dd3 	.word	0x10624dd3

08003220 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	461a      	mov	r2, r3
 800322c:	460b      	mov	r3, r1
 800322e:	817b      	strh	r3, [r7, #10]
 8003230:	4613      	mov	r3, r2
 8003232:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003234:	f7fd fef8 	bl	8001028 <HAL_GetTick>
 8003238:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	f040 80e0 	bne.w	8003408 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2319      	movs	r3, #25
 800324e:	2201      	movs	r2, #1
 8003250:	4970      	ldr	r1, [pc, #448]	; (8003414 <HAL_I2C_Master_Transmit+0x1f4>)
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fc56 	bl	8003b04 <I2C_WaitOnFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800325e:	2302      	movs	r3, #2
 8003260:	e0d3      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_I2C_Master_Transmit+0x50>
 800326c:	2302      	movs	r3, #2
 800326e:	e0cc      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d007      	beq.n	8003296 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0201 	orr.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2221      	movs	r2, #33	; 0x21
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2210      	movs	r2, #16
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	893a      	ldrh	r2, [r7, #8]
 80032c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4a50      	ldr	r2, [pc, #320]	; (8003418 <HAL_I2C_Master_Transmit+0x1f8>)
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032d8:	8979      	ldrh	r1, [r7, #10]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fac2 	bl	8003868 <I2C_MasterRequestWrite>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e08d      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003304:	e066      	b.n	80033d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	6a39      	ldr	r1, [r7, #32]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fcd0 	bl	8003cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00d      	beq.n	8003332 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b04      	cmp	r3, #4
 800331c:	d107      	bne.n	800332e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e06b      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	781a      	ldrb	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b04      	cmp	r3, #4
 800336e:	d11b      	bne.n	80033a8 <HAL_I2C_Master_Transmit+0x188>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	2b00      	cmp	r3, #0
 8003376:	d017      	beq.n	80033a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	6a39      	ldr	r1, [r7, #32]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fcc0 	bl	8003d32 <I2C_WaitOnBTFFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d107      	bne.n	80033d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e01a      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d194      	bne.n	8003306 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	e000      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003408:	2302      	movs	r3, #2
  }
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	00100002 	.word	0x00100002
 8003418:	ffff0000 	.word	0xffff0000

0800341c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08c      	sub	sp, #48	; 0x30
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	461a      	mov	r2, r3
 8003428:	460b      	mov	r3, r1
 800342a:	817b      	strh	r3, [r7, #10]
 800342c:	4613      	mov	r3, r2
 800342e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003430:	f7fd fdfa 	bl	8001028 <HAL_GetTick>
 8003434:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b20      	cmp	r3, #32
 8003440:	f040 820b 	bne.w	800385a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2319      	movs	r3, #25
 800344a:	2201      	movs	r2, #1
 800344c:	497c      	ldr	r1, [pc, #496]	; (8003640 <HAL_I2C_Master_Receive+0x224>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fb58 	bl	8003b04 <I2C_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
 800345c:	e1fe      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_I2C_Master_Receive+0x50>
 8003468:	2302      	movs	r3, #2
 800346a:	e1f7      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d007      	beq.n	8003492 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2222      	movs	r2, #34	; 0x22
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2210      	movs	r2, #16
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	893a      	ldrh	r2, [r7, #8]
 80034c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a5c      	ldr	r2, [pc, #368]	; (8003644 <HAL_I2C_Master_Receive+0x228>)
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034d4:	8979      	ldrh	r1, [r7, #10]
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fa46 	bl	800396c <I2C_MasterRequestRead>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e1b8      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d113      	bne.n	800351a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f2:	2300      	movs	r3, #0
 80034f4:	623b      	str	r3, [r7, #32]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	623b      	str	r3, [r7, #32]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	623b      	str	r3, [r7, #32]
 8003506:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e18c      	b.n	8003834 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351e:	2b01      	cmp	r3, #1
 8003520:	d11b      	bne.n	800355a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003530:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	e16c      	b.n	8003834 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355e:	2b02      	cmp	r3, #2
 8003560:	d11b      	bne.n	800359a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003570:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003580:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	e14c      	b.n	8003834 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035c0:	e138      	b.n	8003834 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	f200 80f1 	bhi.w	80037ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d123      	bne.n	800361c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fbeb 	bl	8003db4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e139      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	855a      	strh	r2, [r3, #42]	; 0x2a
 800361a:	e10b      	b.n	8003834 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	2b02      	cmp	r3, #2
 8003622:	d14e      	bne.n	80036c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	2200      	movs	r2, #0
 800362c:	4906      	ldr	r1, [pc, #24]	; (8003648 <HAL_I2C_Master_Receive+0x22c>)
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fa68 	bl	8003b04 <I2C_WaitOnFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e10e      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
 800363e:	bf00      	nop
 8003640:	00100002 	.word	0x00100002
 8003644:	ffff0000 	.word	0xffff0000
 8003648:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036c0:	e0b8      	b.n	8003834 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	2200      	movs	r2, #0
 80036ca:	4966      	ldr	r1, [pc, #408]	; (8003864 <HAL_I2C_Master_Receive+0x448>)
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fa19 	bl	8003b04 <I2C_WaitOnFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0bf      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	2200      	movs	r2, #0
 8003726:	494f      	ldr	r1, [pc, #316]	; (8003864 <HAL_I2C_Master_Receive+0x448>)
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f9eb 	bl	8003b04 <I2C_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e091      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037ac:	e042      	b.n	8003834 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 fafe 	bl	8003db4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e04c      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d118      	bne.n	8003834 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003838:	2b00      	cmp	r3, #0
 800383a:	f47f aec2 	bne.w	80035c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	e000      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800385a:	2302      	movs	r3, #2
  }
}
 800385c:	4618      	mov	r0, r3
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	00010004 	.word	0x00010004

08003868 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	460b      	mov	r3, r1
 8003876:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d006      	beq.n	8003892 <I2C_MasterRequestWrite+0x2a>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d003      	beq.n	8003892 <I2C_MasterRequestWrite+0x2a>
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003890:	d108      	bne.n	80038a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	e00b      	b.n	80038bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	2b12      	cmp	r3, #18
 80038aa:	d107      	bne.n	80038bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f91b 	bl	8003b04 <I2C_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00c      	beq.n	80038ee <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e035      	b.n	800395a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038f6:	d108      	bne.n	800390a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038f8:	897b      	ldrh	r3, [r7, #10]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003906:	611a      	str	r2, [r3, #16]
 8003908:	e01b      	b.n	8003942 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800390a:	897b      	ldrh	r3, [r7, #10]
 800390c:	11db      	asrs	r3, r3, #7
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 0306 	and.w	r3, r3, #6
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f063 030f 	orn	r3, r3, #15
 800391a:	b2da      	uxtb	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	490f      	ldr	r1, [pc, #60]	; (8003964 <I2C_MasterRequestWrite+0xfc>)
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f942 	bl	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e010      	b.n	800395a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003938:	897b      	ldrh	r3, [r7, #10]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4908      	ldr	r1, [pc, #32]	; (8003968 <I2C_MasterRequestWrite+0x100>)
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f932 	bl	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	00010008 	.word	0x00010008
 8003968:	00010002 	.word	0x00010002

0800396c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	460b      	mov	r3, r1
 800397a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003990:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d006      	beq.n	80039a6 <I2C_MasterRequestRead+0x3a>
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d003      	beq.n	80039a6 <I2C_MasterRequestRead+0x3a>
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039a4:	d108      	bne.n	80039b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	e00b      	b.n	80039d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	2b11      	cmp	r3, #17
 80039be:	d107      	bne.n	80039d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f891 	bl	8003b04 <I2C_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00c      	beq.n	8003a02 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e078      	b.n	8003af4 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a0a:	d108      	bne.n	8003a1e <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a0c:	897b      	ldrh	r3, [r7, #10]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	611a      	str	r2, [r3, #16]
 8003a1c:	e05e      	b.n	8003adc <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a1e:	897b      	ldrh	r3, [r7, #10]
 8003a20:	11db      	asrs	r3, r3, #7
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f003 0306 	and.w	r3, r3, #6
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f063 030f 	orn	r3, r3, #15
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	4930      	ldr	r1, [pc, #192]	; (8003afc <I2C_MasterRequestRead+0x190>)
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f8b8 	bl	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e053      	b.n	8003af4 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a4c:	897b      	ldrh	r3, [r7, #10]
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	4929      	ldr	r1, [pc, #164]	; (8003b00 <I2C_MasterRequestRead+0x194>)
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f8a8 	bl	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e043      	b.n	8003af4 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a90:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f830 	bl	8003b04 <I2C_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00c      	beq.n	8003ac4 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003abe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e017      	b.n	8003af4 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ac4:	897b      	ldrh	r3, [r7, #10]
 8003ac6:	11db      	asrs	r3, r3, #7
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f003 0306 	and.w	r3, r3, #6
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f063 030e 	orn	r3, r3, #14
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4907      	ldr	r1, [pc, #28]	; (8003b00 <I2C_MasterRequestRead+0x194>)
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f865 	bl	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	00010008 	.word	0x00010008
 8003b00:	00010002 	.word	0x00010002

08003b04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	4613      	mov	r3, r2
 8003b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b14:	e025      	b.n	8003b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1c:	d021      	beq.n	8003b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1e:	f7fd fa83 	bl	8001028 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d302      	bcc.n	8003b34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d116      	bne.n	8003b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f043 0220 	orr.w	r2, r3, #32
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e023      	b.n	8003baa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d10d      	bne.n	8003b88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	43da      	mvns	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4013      	ands	r3, r2
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bf0c      	ite	eq
 8003b7e:	2301      	moveq	r3, #1
 8003b80:	2300      	movne	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	e00c      	b.n	8003ba2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d0b6      	beq.n	8003b16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bc0:	e051      	b.n	8003c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd0:	d123      	bne.n	8003c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f043 0204 	orr.w	r2, r3, #4
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e046      	b.n	8003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c20:	d021      	beq.n	8003c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c22:	f7fd fa01 	bl	8001028 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d302      	bcc.n	8003c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d116      	bne.n	8003c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f043 0220 	orr.w	r2, r3, #32
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e020      	b.n	8003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d10c      	bne.n	8003c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	43da      	mvns	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	bf14      	ite	ne
 8003c82:	2301      	movne	r3, #1
 8003c84:	2300      	moveq	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	e00b      	b.n	8003ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	43da      	mvns	r2, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4013      	ands	r3, r2
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf14      	ite	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	2300      	moveq	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d18d      	bne.n	8003bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cbc:	e02d      	b.n	8003d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f8ce 	bl	8003e60 <I2C_IsAcknowledgeFailed>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e02d      	b.n	8003d2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cd4:	d021      	beq.n	8003d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd6:	f7fd f9a7 	bl	8001028 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d302      	bcc.n	8003cec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d116      	bne.n	8003d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f043 0220 	orr.w	r2, r3, #32
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e007      	b.n	8003d2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d24:	2b80      	cmp	r3, #128	; 0x80
 8003d26:	d1ca      	bne.n	8003cbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d3e:	e02d      	b.n	8003d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f88d 	bl	8003e60 <I2C_IsAcknowledgeFailed>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e02d      	b.n	8003dac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d56:	d021      	beq.n	8003d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d58:	f7fd f966 	bl	8001028 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d302      	bcc.n	8003d6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d116      	bne.n	8003d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	f043 0220 	orr.w	r2, r3, #32
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e007      	b.n	8003dac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d1ca      	bne.n	8003d40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dc0:	e042      	b.n	8003e48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b10      	cmp	r3, #16
 8003dce:	d119      	bne.n	8003e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0210 	mvn.w	r2, #16
 8003dd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e029      	b.n	8003e58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e04:	f7fd f910 	bl	8001028 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d302      	bcc.n	8003e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d116      	bne.n	8003e48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	f043 0220 	orr.w	r2, r3, #32
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e007      	b.n	8003e58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e52:	2b40      	cmp	r3, #64	; 0x40
 8003e54:	d1b5      	bne.n	8003dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e76:	d11b      	bne.n	8003eb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	f043 0204 	orr.w	r2, r3, #4
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e25b      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d075      	beq.n	8003fca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ede:	4ba3      	ldr	r3, [pc, #652]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d00c      	beq.n	8003f04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eea:	4ba0      	ldr	r3, [pc, #640]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d112      	bne.n	8003f1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ef6:	4b9d      	ldr	r3, [pc, #628]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f02:	d10b      	bne.n	8003f1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f04:	4b99      	ldr	r3, [pc, #612]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d05b      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x108>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d157      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e236      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f24:	d106      	bne.n	8003f34 <HAL_RCC_OscConfig+0x74>
 8003f26:	4b91      	ldr	r3, [pc, #580]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a90      	ldr	r2, [pc, #576]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	e01d      	b.n	8003f70 <HAL_RCC_OscConfig+0xb0>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f3c:	d10c      	bne.n	8003f58 <HAL_RCC_OscConfig+0x98>
 8003f3e:	4b8b      	ldr	r3, [pc, #556]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a8a      	ldr	r2, [pc, #552]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	4b88      	ldr	r3, [pc, #544]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a87      	ldr	r2, [pc, #540]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e00b      	b.n	8003f70 <HAL_RCC_OscConfig+0xb0>
 8003f58:	4b84      	ldr	r3, [pc, #528]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a83      	ldr	r2, [pc, #524]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	4b81      	ldr	r3, [pc, #516]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a80      	ldr	r2, [pc, #512]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d013      	beq.n	8003fa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7fd f856 	bl	8001028 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f80:	f7fd f852 	bl	8001028 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	; 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e1fb      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f92:	4b76      	ldr	r3, [pc, #472]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0xc0>
 8003f9e:	e014      	b.n	8003fca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa0:	f7fd f842 	bl	8001028 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa8:	f7fd f83e 	bl	8001028 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b64      	cmp	r3, #100	; 0x64
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e1e7      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fba:	4b6c      	ldr	r3, [pc, #432]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0xe8>
 8003fc6:	e000      	b.n	8003fca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d063      	beq.n	800409e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fd6:	4b65      	ldr	r3, [pc, #404]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 030c 	and.w	r3, r3, #12
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00b      	beq.n	8003ffa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fe2:	4b62      	ldr	r3, [pc, #392]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d11c      	bne.n	8004028 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fee:	4b5f      	ldr	r3, [pc, #380]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d116      	bne.n	8004028 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffa:	4b5c      	ldr	r3, [pc, #368]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d005      	beq.n	8004012 <HAL_RCC_OscConfig+0x152>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d001      	beq.n	8004012 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e1bb      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004012:	4b56      	ldr	r3, [pc, #344]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4952      	ldr	r1, [pc, #328]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8004022:	4313      	orrs	r3, r2
 8004024:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004026:	e03a      	b.n	800409e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d020      	beq.n	8004072 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004030:	4b4f      	ldr	r3, [pc, #316]	; (8004170 <HAL_RCC_OscConfig+0x2b0>)
 8004032:	2201      	movs	r2, #1
 8004034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004036:	f7fc fff7 	bl	8001028 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800403e:	f7fc fff3 	bl	8001028 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e19c      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004050:	4b46      	ldr	r3, [pc, #280]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405c:	4b43      	ldr	r3, [pc, #268]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4940      	ldr	r1, [pc, #256]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 800406c:	4313      	orrs	r3, r2
 800406e:	600b      	str	r3, [r1, #0]
 8004070:	e015      	b.n	800409e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004072:	4b3f      	ldr	r3, [pc, #252]	; (8004170 <HAL_RCC_OscConfig+0x2b0>)
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fc ffd6 	bl	8001028 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004080:	f7fc ffd2 	bl	8001028 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e17b      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004092:	4b36      	ldr	r3, [pc, #216]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d030      	beq.n	800410c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d016      	beq.n	80040e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040b2:	4b30      	ldr	r3, [pc, #192]	; (8004174 <HAL_RCC_OscConfig+0x2b4>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b8:	f7fc ffb6 	bl	8001028 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c0:	f7fc ffb2 	bl	8001028 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e15b      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d2:	4b26      	ldr	r3, [pc, #152]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x200>
 80040de:	e015      	b.n	800410c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e0:	4b24      	ldr	r3, [pc, #144]	; (8004174 <HAL_RCC_OscConfig+0x2b4>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e6:	f7fc ff9f 	bl	8001028 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ee:	f7fc ff9b 	bl	8001028 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e144      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8004102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f0      	bne.n	80040ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 80a0 	beq.w	800425a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800411a:	2300      	movs	r3, #0
 800411c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800411e:	4b13      	ldr	r3, [pc, #76]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10f      	bne.n	800414a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	4b0f      	ldr	r3, [pc, #60]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	4a0e      	ldr	r2, [pc, #56]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 8004134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004138:	6413      	str	r3, [r2, #64]	; 0x40
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <HAL_RCC_OscConfig+0x2ac>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004142:	60bb      	str	r3, [r7, #8]
 8004144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004146:	2301      	movs	r3, #1
 8004148:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCC_OscConfig+0x2b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d121      	bne.n	800419a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004156:	4b08      	ldr	r3, [pc, #32]	; (8004178 <HAL_RCC_OscConfig+0x2b8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a07      	ldr	r2, [pc, #28]	; (8004178 <HAL_RCC_OscConfig+0x2b8>)
 800415c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004162:	f7fc ff61 	bl	8001028 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004168:	e011      	b.n	800418e <HAL_RCC_OscConfig+0x2ce>
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800
 8004170:	42470000 	.word	0x42470000
 8004174:	42470e80 	.word	0x42470e80
 8004178:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417c:	f7fc ff54 	bl	8001028 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e0fd      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418e:	4b81      	ldr	r3, [pc, #516]	; (8004394 <HAL_RCC_OscConfig+0x4d4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d106      	bne.n	80041b0 <HAL_RCC_OscConfig+0x2f0>
 80041a2:	4b7d      	ldr	r3, [pc, #500]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	4a7c      	ldr	r2, [pc, #496]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	6713      	str	r3, [r2, #112]	; 0x70
 80041ae:	e01c      	b.n	80041ea <HAL_RCC_OscConfig+0x32a>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b05      	cmp	r3, #5
 80041b6:	d10c      	bne.n	80041d2 <HAL_RCC_OscConfig+0x312>
 80041b8:	4b77      	ldr	r3, [pc, #476]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041bc:	4a76      	ldr	r2, [pc, #472]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 80041be:	f043 0304 	orr.w	r3, r3, #4
 80041c2:	6713      	str	r3, [r2, #112]	; 0x70
 80041c4:	4b74      	ldr	r3, [pc, #464]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 80041c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c8:	4a73      	ldr	r2, [pc, #460]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	6713      	str	r3, [r2, #112]	; 0x70
 80041d0:	e00b      	b.n	80041ea <HAL_RCC_OscConfig+0x32a>
 80041d2:	4b71      	ldr	r3, [pc, #452]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	4a70      	ldr	r2, [pc, #448]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	6713      	str	r3, [r2, #112]	; 0x70
 80041de:	4b6e      	ldr	r3, [pc, #440]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	4a6d      	ldr	r2, [pc, #436]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 80041e4:	f023 0304 	bic.w	r3, r3, #4
 80041e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d015      	beq.n	800421e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f2:	f7fc ff19 	bl	8001028 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f8:	e00a      	b.n	8004210 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041fa:	f7fc ff15 	bl	8001028 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	f241 3288 	movw	r2, #5000	; 0x1388
 8004208:	4293      	cmp	r3, r2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e0bc      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004210:	4b61      	ldr	r3, [pc, #388]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0ee      	beq.n	80041fa <HAL_RCC_OscConfig+0x33a>
 800421c:	e014      	b.n	8004248 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421e:	f7fc ff03 	bl	8001028 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004224:	e00a      	b.n	800423c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004226:	f7fc feff 	bl	8001028 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f241 3288 	movw	r2, #5000	; 0x1388
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e0a6      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423c:	4b56      	ldr	r3, [pc, #344]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1ee      	bne.n	8004226 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d105      	bne.n	800425a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424e:	4b52      	ldr	r3, [pc, #328]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	4a51      	ldr	r2, [pc, #324]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 8004254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004258:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 8092 	beq.w	8004388 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004264:	4b4c      	ldr	r3, [pc, #304]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d05c      	beq.n	800432a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b02      	cmp	r3, #2
 8004276:	d141      	bne.n	80042fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004278:	4b48      	ldr	r3, [pc, #288]	; (800439c <HAL_RCC_OscConfig+0x4dc>)
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427e:	f7fc fed3 	bl	8001028 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004286:	f7fc fecf 	bl	8001028 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e078      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004298:	4b3f      	ldr	r3, [pc, #252]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f0      	bne.n	8004286 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	019b      	lsls	r3, r3, #6
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	3b01      	subs	r3, #1
 80042be:	041b      	lsls	r3, r3, #16
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	061b      	lsls	r3, r3, #24
 80042c8:	4933      	ldr	r1, [pc, #204]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042ce:	4b33      	ldr	r3, [pc, #204]	; (800439c <HAL_RCC_OscConfig+0x4dc>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d4:	f7fc fea8 	bl	8001028 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fc fea4 	bl	8001028 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e04d      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ee:	4b2a      	ldr	r3, [pc, #168]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x41c>
 80042fa:	e045      	b.n	8004388 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fc:	4b27      	ldr	r3, [pc, #156]	; (800439c <HAL_RCC_OscConfig+0x4dc>)
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004302:	f7fc fe91 	bl	8001028 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800430a:	f7fc fe8d 	bl	8001028 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e036      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431c:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f0      	bne.n	800430a <HAL_RCC_OscConfig+0x44a>
 8004328:	e02e      	b.n	8004388 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e029      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004336:	4b18      	ldr	r3, [pc, #96]	; (8004398 <HAL_RCC_OscConfig+0x4d8>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	429a      	cmp	r2, r3
 8004348:	d11c      	bne.n	8004384 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d115      	bne.n	8004384 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800435e:	4013      	ands	r3, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004364:	4293      	cmp	r3, r2
 8004366:	d10d      	bne.n	8004384 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d106      	bne.n	8004384 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004380:	429a      	cmp	r2, r3
 8004382:	d001      	beq.n	8004388 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40007000 	.word	0x40007000
 8004398:	40023800 	.word	0x40023800
 800439c:	42470060 	.word	0x42470060

080043a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0cc      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043b4:	4b68      	ldr	r3, [pc, #416]	; (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 030f 	and.w	r3, r3, #15
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d90c      	bls.n	80043dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c2:	4b65      	ldr	r3, [pc, #404]	; (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ca:	4b63      	ldr	r3, [pc, #396]	; (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d001      	beq.n	80043dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0b8      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d020      	beq.n	800442a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043f4:	4b59      	ldr	r3, [pc, #356]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	4a58      	ldr	r2, [pc, #352]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800440c:	4b53      	ldr	r3, [pc, #332]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	4a52      	ldr	r2, [pc, #328]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004418:	4b50      	ldr	r3, [pc, #320]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	494d      	ldr	r1, [pc, #308]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	4313      	orrs	r3, r2
 8004428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d044      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d107      	bne.n	800444e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443e:	4b47      	ldr	r3, [pc, #284]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d119      	bne.n	800447e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e07f      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d003      	beq.n	800445e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800445a:	2b03      	cmp	r3, #3
 800445c:	d107      	bne.n	800446e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445e:	4b3f      	ldr	r3, [pc, #252]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e06f      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446e:	4b3b      	ldr	r3, [pc, #236]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e067      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800447e:	4b37      	ldr	r3, [pc, #220]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f023 0203 	bic.w	r2, r3, #3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4934      	ldr	r1, [pc, #208]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	4313      	orrs	r3, r2
 800448e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004490:	f7fc fdca 	bl	8001028 <HAL_GetTick>
 8004494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004496:	e00a      	b.n	80044ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004498:	f7fc fdc6 	bl	8001028 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e04f      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ae:	4b2b      	ldr	r3, [pc, #172]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 020c 	and.w	r2, r3, #12
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	429a      	cmp	r2, r3
 80044be:	d1eb      	bne.n	8004498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044c0:	4b25      	ldr	r3, [pc, #148]	; (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d20c      	bcs.n	80044e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ce:	4b22      	ldr	r3, [pc, #136]	; (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b20      	ldr	r3, [pc, #128]	; (8004558 <HAL_RCC_ClockConfig+0x1b8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e032      	b.n	800454e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044f4:	4b19      	ldr	r3, [pc, #100]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4916      	ldr	r1, [pc, #88]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	4313      	orrs	r3, r2
 8004504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004512:	4b12      	ldr	r3, [pc, #72]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	490e      	ldr	r1, [pc, #56]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004526:	f000 f821 	bl	800456c <HAL_RCC_GetSysClockFreq>
 800452a:	4601      	mov	r1, r0
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <HAL_RCC_ClockConfig+0x1c0>)
 8004538:	5cd3      	ldrb	r3, [r2, r3]
 800453a:	fa21 f303 	lsr.w	r3, r1, r3
 800453e:	4a09      	ldr	r2, [pc, #36]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 8004540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004542:	4b09      	ldr	r3, [pc, #36]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fc fd2a 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40023c00 	.word	0x40023c00
 800455c:	40023800 	.word	0x40023800
 8004560:	0800bc2c 	.word	0x0800bc2c
 8004564:	20000024 	.word	0x20000024
 8004568:	20000000 	.word	0x20000000

0800456c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800456c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	607b      	str	r3, [r7, #4]
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	2300      	movs	r3, #0
 800457c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004582:	4b63      	ldr	r3, [pc, #396]	; (8004710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b04      	cmp	r3, #4
 800458c:	d007      	beq.n	800459e <HAL_RCC_GetSysClockFreq+0x32>
 800458e:	2b08      	cmp	r3, #8
 8004590:	d008      	beq.n	80045a4 <HAL_RCC_GetSysClockFreq+0x38>
 8004592:	2b00      	cmp	r3, #0
 8004594:	f040 80b4 	bne.w	8004700 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004598:	4b5e      	ldr	r3, [pc, #376]	; (8004714 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800459a:	60bb      	str	r3, [r7, #8]
       break;
 800459c:	e0b3      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800459e:	4b5e      	ldr	r3, [pc, #376]	; (8004718 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80045a0:	60bb      	str	r3, [r7, #8]
      break;
 80045a2:	e0b0      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045a4:	4b5a      	ldr	r3, [pc, #360]	; (8004710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045ae:	4b58      	ldr	r3, [pc, #352]	; (8004710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d04a      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ba:	4b55      	ldr	r3, [pc, #340]	; (8004710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	099b      	lsrs	r3, r3, #6
 80045c0:	f04f 0400 	mov.w	r4, #0
 80045c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	ea03 0501 	and.w	r5, r3, r1
 80045d0:	ea04 0602 	and.w	r6, r4, r2
 80045d4:	4629      	mov	r1, r5
 80045d6:	4632      	mov	r2, r6
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	f04f 0400 	mov.w	r4, #0
 80045e0:	0154      	lsls	r4, r2, #5
 80045e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045e6:	014b      	lsls	r3, r1, #5
 80045e8:	4619      	mov	r1, r3
 80045ea:	4622      	mov	r2, r4
 80045ec:	1b49      	subs	r1, r1, r5
 80045ee:	eb62 0206 	sbc.w	r2, r2, r6
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	f04f 0400 	mov.w	r4, #0
 80045fa:	0194      	lsls	r4, r2, #6
 80045fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004600:	018b      	lsls	r3, r1, #6
 8004602:	1a5b      	subs	r3, r3, r1
 8004604:	eb64 0402 	sbc.w	r4, r4, r2
 8004608:	f04f 0100 	mov.w	r1, #0
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	00e2      	lsls	r2, r4, #3
 8004612:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004616:	00d9      	lsls	r1, r3, #3
 8004618:	460b      	mov	r3, r1
 800461a:	4614      	mov	r4, r2
 800461c:	195b      	adds	r3, r3, r5
 800461e:	eb44 0406 	adc.w	r4, r4, r6
 8004622:	f04f 0100 	mov.w	r1, #0
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	0262      	lsls	r2, r4, #9
 800462c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004630:	0259      	lsls	r1, r3, #9
 8004632:	460b      	mov	r3, r1
 8004634:	4614      	mov	r4, r2
 8004636:	4618      	mov	r0, r3
 8004638:	4621      	mov	r1, r4
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f04f 0400 	mov.w	r4, #0
 8004640:	461a      	mov	r2, r3
 8004642:	4623      	mov	r3, r4
 8004644:	f7fc fb0a 	bl	8000c5c <__aeabi_uldivmod>
 8004648:	4603      	mov	r3, r0
 800464a:	460c      	mov	r4, r1
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	e049      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004650:	4b2f      	ldr	r3, [pc, #188]	; (8004710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	099b      	lsrs	r3, r3, #6
 8004656:	f04f 0400 	mov.w	r4, #0
 800465a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	ea03 0501 	and.w	r5, r3, r1
 8004666:	ea04 0602 	and.w	r6, r4, r2
 800466a:	4629      	mov	r1, r5
 800466c:	4632      	mov	r2, r6
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	f04f 0400 	mov.w	r4, #0
 8004676:	0154      	lsls	r4, r2, #5
 8004678:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800467c:	014b      	lsls	r3, r1, #5
 800467e:	4619      	mov	r1, r3
 8004680:	4622      	mov	r2, r4
 8004682:	1b49      	subs	r1, r1, r5
 8004684:	eb62 0206 	sbc.w	r2, r2, r6
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	f04f 0400 	mov.w	r4, #0
 8004690:	0194      	lsls	r4, r2, #6
 8004692:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004696:	018b      	lsls	r3, r1, #6
 8004698:	1a5b      	subs	r3, r3, r1
 800469a:	eb64 0402 	sbc.w	r4, r4, r2
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	00e2      	lsls	r2, r4, #3
 80046a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046ac:	00d9      	lsls	r1, r3, #3
 80046ae:	460b      	mov	r3, r1
 80046b0:	4614      	mov	r4, r2
 80046b2:	195b      	adds	r3, r3, r5
 80046b4:	eb44 0406 	adc.w	r4, r4, r6
 80046b8:	f04f 0100 	mov.w	r1, #0
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	02a2      	lsls	r2, r4, #10
 80046c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80046c6:	0299      	lsls	r1, r3, #10
 80046c8:	460b      	mov	r3, r1
 80046ca:	4614      	mov	r4, r2
 80046cc:	4618      	mov	r0, r3
 80046ce:	4621      	mov	r1, r4
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f04f 0400 	mov.w	r4, #0
 80046d6:	461a      	mov	r2, r3
 80046d8:	4623      	mov	r3, r4
 80046da:	f7fc fabf 	bl	8000c5c <__aeabi_uldivmod>
 80046de:	4603      	mov	r3, r0
 80046e0:	460c      	mov	r4, r1
 80046e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046e4:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	0c1b      	lsrs	r3, r3, #16
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	3301      	adds	r3, #1
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	60bb      	str	r3, [r7, #8]
      break;
 80046fe:	e002      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004700:	4b04      	ldr	r3, [pc, #16]	; (8004714 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004702:	60bb      	str	r3, [r7, #8]
      break;
 8004704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004706:	68bb      	ldr	r3, [r7, #8]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004710:	40023800 	.word	0x40023800
 8004714:	00f42400 	.word	0x00f42400
 8004718:	007a1200 	.word	0x007a1200

0800471c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <HAL_RCC_GetHCLKFreq+0x14>)
 8004722:	681b      	ldr	r3, [r3, #0]
}
 8004724:	4618      	mov	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	20000024 	.word	0x20000024

08004734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004738:	f7ff fff0 	bl	800471c <HAL_RCC_GetHCLKFreq>
 800473c:	4601      	mov	r1, r0
 800473e:	4b05      	ldr	r3, [pc, #20]	; (8004754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	0a9b      	lsrs	r3, r3, #10
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	4a03      	ldr	r2, [pc, #12]	; (8004758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800474a:	5cd3      	ldrb	r3, [r2, r3]
 800474c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004750:	4618      	mov	r0, r3
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40023800 	.word	0x40023800
 8004758:	0800bc3c 	.word	0x0800bc3c

0800475c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004760:	f7ff ffdc 	bl	800471c <HAL_RCC_GetHCLKFreq>
 8004764:	4601      	mov	r1, r0
 8004766:	4b05      	ldr	r3, [pc, #20]	; (800477c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	0b5b      	lsrs	r3, r3, #13
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	4a03      	ldr	r2, [pc, #12]	; (8004780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004772:	5cd3      	ldrb	r3, [r2, r3]
 8004774:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004778:	4618      	mov	r0, r3
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40023800 	.word	0x40023800
 8004780:	0800bc3c 	.word	0x0800bc3c

08004784 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e056      	b.n	8004844 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d106      	bne.n	80047b6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f005 f9d1 	bl	8009b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	ea42 0103 	orr.w	r1, r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	0c1b      	lsrs	r3, r3, #16
 8004814:	f003 0104 	and.w	r1, r3, #4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69da      	ldr	r2, [r3, #28]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004832:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4613      	mov	r3, r2
 800485a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800485c:	2300      	movs	r3, #0
 800485e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_SPI_Transmit+0x22>
 800486a:	2302      	movs	r3, #2
 800486c:	e11e      	b.n	8004aac <HAL_SPI_Transmit+0x260>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004876:	f7fc fbd7 	bl	8001028 <HAL_GetTick>
 800487a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b01      	cmp	r3, #1
 800488a:	d002      	beq.n	8004892 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800488c:	2302      	movs	r3, #2
 800488e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004890:	e103      	b.n	8004a9a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <HAL_SPI_Transmit+0x52>
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d102      	bne.n	80048a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048a2:	e0fa      	b.n	8004a9a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2203      	movs	r2, #3
 80048a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	88fa      	ldrh	r2, [r7, #6]
 80048bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	88fa      	ldrh	r2, [r7, #6]
 80048c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ea:	d107      	bne.n	80048fc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004906:	2b40      	cmp	r3, #64	; 0x40
 8004908:	d007      	beq.n	800491a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004918:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004922:	d14b      	bne.n	80049bc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_SPI_Transmit+0xe6>
 800492c:	8afb      	ldrh	r3, [r7, #22]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d13e      	bne.n	80049b0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	881a      	ldrh	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	1c9a      	adds	r2, r3, #2
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004956:	e02b      	b.n	80049b0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b02      	cmp	r3, #2
 8004964:	d112      	bne.n	800498c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	881a      	ldrh	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	1c9a      	adds	r2, r3, #2
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004980:	b29b      	uxth	r3, r3
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	86da      	strh	r2, [r3, #54]	; 0x36
 800498a:	e011      	b.n	80049b0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800498c:	f7fc fb4c 	bl	8001028 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d803      	bhi.n	80049a4 <HAL_SPI_Transmit+0x158>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049a2:	d102      	bne.n	80049aa <HAL_SPI_Transmit+0x15e>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d102      	bne.n	80049b0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049ae:	e074      	b.n	8004a9a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1ce      	bne.n	8004958 <HAL_SPI_Transmit+0x10c>
 80049ba:	e04c      	b.n	8004a56 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <HAL_SPI_Transmit+0x17e>
 80049c4:	8afb      	ldrh	r3, [r7, #22]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d140      	bne.n	8004a4c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	330c      	adds	r3, #12
 80049d4:	7812      	ldrb	r2, [r2, #0]
 80049d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049f0:	e02c      	b.n	8004a4c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d113      	bne.n	8004a28 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	7812      	ldrb	r2, [r2, #0]
 8004a0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a26:	e011      	b.n	8004a4c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a28:	f7fc fafe 	bl	8001028 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d803      	bhi.n	8004a40 <HAL_SPI_Transmit+0x1f4>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a3e:	d102      	bne.n	8004a46 <HAL_SPI_Transmit+0x1fa>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a4a:	e026      	b.n	8004a9a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1cd      	bne.n	80049f2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	6839      	ldr	r1, [r7, #0]
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 fcc4 	bl	80053e8 <SPI_EndRxTxTransaction>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e000      	b.n	8004a9a <HAL_SPI_Transmit+0x24e>
  }

error:
 8004a98:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004aaa:	7ffb      	ldrb	r3, [r7, #31]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3720      	adds	r7, #32
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ad0:	d112      	bne.n	8004af8 <HAL_SPI_Receive+0x44>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10e      	bne.n	8004af8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2204      	movs	r2, #4
 8004ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ae2:	88fa      	ldrh	r2, [r7, #6]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f8e9 	bl	8004cc6 <HAL_SPI_TransmitReceive>
 8004af4:	4603      	mov	r3, r0
 8004af6:	e0e2      	b.n	8004cbe <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_SPI_Receive+0x52>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e0db      	b.n	8004cbe <HAL_SPI_Receive+0x20a>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b0e:	f7fc fa8b 	bl	8001028 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d002      	beq.n	8004b26 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b20:	2302      	movs	r3, #2
 8004b22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b24:	e0c2      	b.n	8004cac <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <HAL_SPI_Receive+0x7e>
 8004b2c:	88fb      	ldrh	r3, [r7, #6]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b36:	e0b9      	b.n	8004cac <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2204      	movs	r2, #4
 8004b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	88fa      	ldrh	r2, [r7, #6]
 8004b50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	88fa      	ldrh	r2, [r7, #6]
 8004b56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7e:	d107      	bne.n	8004b90 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b8e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	d007      	beq.n	8004bae <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d162      	bne.n	8004c7c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004bb6:	e02e      	b.n	8004c16 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d115      	bne.n	8004bf2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f103 020c 	add.w	r2, r3, #12
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	7812      	ldrb	r2, [r2, #0]
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bf0:	e011      	b.n	8004c16 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bf2:	f7fc fa19 	bl	8001028 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d803      	bhi.n	8004c0a <HAL_SPI_Receive+0x156>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c08:	d102      	bne.n	8004c10 <HAL_SPI_Receive+0x15c>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d102      	bne.n	8004c16 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c14:	e04a      	b.n	8004cac <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1cb      	bne.n	8004bb8 <HAL_SPI_Receive+0x104>
 8004c20:	e031      	b.n	8004c86 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d113      	bne.n	8004c58 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	b292      	uxth	r2, r2
 8004c3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	1c9a      	adds	r2, r3, #2
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c56:	e011      	b.n	8004c7c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c58:	f7fc f9e6 	bl	8001028 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d803      	bhi.n	8004c70 <HAL_SPI_Receive+0x1bc>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c6e:	d102      	bne.n	8004c76 <HAL_SPI_Receive+0x1c2>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d102      	bne.n	8004c7c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c7a:	e017      	b.n	8004cac <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1cd      	bne.n	8004c22 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	6839      	ldr	r1, [r7, #0]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 fb46 	bl	800531c <SPI_EndRxTransaction>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	75fb      	strb	r3, [r7, #23]
 8004ca8:	e000      	b.n	8004cac <HAL_SPI_Receive+0x1f8>
  }

error :
 8004caa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b08c      	sub	sp, #48	; 0x30
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_SPI_TransmitReceive+0x26>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e18a      	b.n	8005002 <HAL_SPI_TransmitReceive+0x33c>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cf4:	f7fc f998 	bl	8001028 <HAL_GetTick>
 8004cf8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d0a:	887b      	ldrh	r3, [r7, #2]
 8004d0c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d00f      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0x70>
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d1c:	d107      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d103      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x68>
 8004d26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d003      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d2e:	2302      	movs	r3, #2
 8004d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d34:	e15b      	b.n	8004fee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_SPI_TransmitReceive+0x82>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_SPI_TransmitReceive+0x82>
 8004d42:	887b      	ldrh	r3, [r7, #2]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d4e:	e14e      	b.n	8004fee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d003      	beq.n	8004d64 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2205      	movs	r2, #5
 8004d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	887a      	ldrh	r2, [r7, #2]
 8004d74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	887a      	ldrh	r2, [r7, #2]
 8004d7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	887a      	ldrh	r2, [r7, #2]
 8004d86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	887a      	ldrh	r2, [r7, #2]
 8004d8c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da4:	2b40      	cmp	r3, #64	; 0x40
 8004da6:	d007      	beq.n	8004db8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc0:	d178      	bne.n	8004eb4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_SPI_TransmitReceive+0x10a>
 8004dca:	8b7b      	ldrh	r3, [r7, #26]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d166      	bne.n	8004e9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	881a      	ldrh	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de0:	1c9a      	adds	r2, r3, #2
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004df4:	e053      	b.n	8004e9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d11b      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x176>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d016      	beq.n	8004e3c <HAL_SPI_TransmitReceive+0x176>
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d113      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	881a      	ldrh	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	1c9a      	adds	r2, r3, #2
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d119      	bne.n	8004e7e <HAL_SPI_TransmitReceive+0x1b8>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d014      	beq.n	8004e7e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	b292      	uxth	r2, r2
 8004e60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	1c9a      	adds	r2, r3, #2
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e7e:	f7fc f8d3 	bl	8001028 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d807      	bhi.n	8004e9e <HAL_SPI_TransmitReceive+0x1d8>
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e94:	d003      	beq.n	8004e9e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e9c:	e0a7      	b.n	8004fee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1a6      	bne.n	8004df6 <HAL_SPI_TransmitReceive+0x130>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1a1      	bne.n	8004df6 <HAL_SPI_TransmitReceive+0x130>
 8004eb2:	e07c      	b.n	8004fae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <HAL_SPI_TransmitReceive+0x1fc>
 8004ebc:	8b7b      	ldrh	r3, [r7, #26]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d16b      	bne.n	8004f9a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	330c      	adds	r3, #12
 8004ecc:	7812      	ldrb	r2, [r2, #0]
 8004ece:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee8:	e057      	b.n	8004f9a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d11c      	bne.n	8004f32 <HAL_SPI_TransmitReceive+0x26c>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d017      	beq.n	8004f32 <HAL_SPI_TransmitReceive+0x26c>
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d114      	bne.n	8004f32 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	330c      	adds	r3, #12
 8004f12:	7812      	ldrb	r2, [r2, #0]
 8004f14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d119      	bne.n	8004f74 <HAL_SPI_TransmitReceive+0x2ae>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d014      	beq.n	8004f74 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f70:	2301      	movs	r3, #1
 8004f72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f74:	f7fc f858 	bl	8001028 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d803      	bhi.n	8004f8c <HAL_SPI_TransmitReceive+0x2c6>
 8004f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f8a:	d102      	bne.n	8004f92 <HAL_SPI_TransmitReceive+0x2cc>
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d103      	bne.n	8004f9a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f98:	e029      	b.n	8004fee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1a2      	bne.n	8004eea <HAL_SPI_TransmitReceive+0x224>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d19d      	bne.n	8004eea <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 fa18 	bl	80053e8 <SPI_EndRxTxTransaction>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d006      	beq.n	8004fcc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004fca:	e010      	b.n	8004fee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10b      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	e000      	b.n	8004fee <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004fec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ffe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005002:	4618      	mov	r0, r3
 8005004:	3730      	adds	r7, #48	; 0x30
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	099b      	lsrs	r3, r3, #6
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10f      	bne.n	8005050 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	099b      	lsrs	r3, r3, #6
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d004      	beq.n	8005050 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	4798      	blx	r3
    return;
 800504e:	e0d8      	b.n	8005202 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <HAL_SPI_IRQHandler+0x66>
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	09db      	lsrs	r3, r3, #7
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d004      	beq.n	8005072 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	4798      	blx	r3
    return;
 8005070:	e0c7      	b.n	8005202 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10c      	bne.n	8005098 <HAL_SPI_IRQHandler+0x8c>
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	099b      	lsrs	r3, r3, #6
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	0a1b      	lsrs	r3, r3, #8
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 80b5 	beq.w	8005202 <HAL_SPI_IRQHandler+0x1f6>
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	095b      	lsrs	r3, r3, #5
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 80ae 	beq.w	8005202 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	099b      	lsrs	r3, r3, #6
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d023      	beq.n	80050fa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d011      	beq.n	80050e2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	f043 0204 	orr.w	r2, r3, #4
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050ca:	2300      	movs	r3, #0
 80050cc:	617b      	str	r3, [r7, #20]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	e00b      	b.n	80050fa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050e2:	2300      	movs	r3, #0
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	693b      	ldr	r3, [r7, #16]
        return;
 80050f8:	e083      	b.n	8005202 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d014      	beq.n	8005130 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510a:	f043 0201 	orr.w	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	0a1b      	lsrs	r3, r3, #8
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00c      	beq.n	8005156 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005140:	f043 0208 	orr.w	r2, r3, #8
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005148:	2300      	movs	r3, #0
 800514a:	60bb      	str	r3, [r7, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515a:	2b00      	cmp	r3, #0
 800515c:	d050      	beq.n	8005200 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800516c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d104      	bne.n	800518a <HAL_SPI_IRQHandler+0x17e>
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d034      	beq.n	80051f4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0203 	bic.w	r2, r2, #3
 8005198:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d011      	beq.n	80051c6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a6:	4a18      	ldr	r2, [pc, #96]	; (8005208 <HAL_SPI_IRQHandler+0x1fc>)
 80051a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fd fa3a 	bl	8002628 <HAL_DMA_Abort_IT>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d016      	beq.n	80051fc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d2:	4a0d      	ldr	r2, [pc, #52]	; (8005208 <HAL_SPI_IRQHandler+0x1fc>)
 80051d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fd fa24 	bl	8002628 <HAL_DMA_Abort_IT>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80051f2:	e003      	b.n	80051fc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f809 	bl	800520c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80051fa:	e000      	b.n	80051fe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80051fc:	bf00      	nop
    return;
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
  }
}
 8005202:	3720      	adds	r7, #32
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	08005221 	.word	0x08005221

0800520c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f7ff ffe6 	bl	800520c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005258:	e04c      	b.n	80052f4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005260:	d048      	beq.n	80052f4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005262:	f7fb fee1 	bl	8001028 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d902      	bls.n	8005278 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d13d      	bne.n	80052f4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005286:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005290:	d111      	bne.n	80052b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529a:	d004      	beq.n	80052a6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a4:	d107      	bne.n	80052b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052be:	d10f      	bne.n	80052e0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e00f      	b.n	8005314 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	4013      	ands	r3, r2
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	429a      	cmp	r2, r3
 8005302:	bf0c      	ite	eq
 8005304:	2301      	moveq	r3, #1
 8005306:	2300      	movne	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	461a      	mov	r2, r3
 800530c:	79fb      	ldrb	r3, [r7, #7]
 800530e:	429a      	cmp	r2, r3
 8005310:	d1a3      	bne.n	800525a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005330:	d111      	bne.n	8005356 <SPI_EndRxTransaction+0x3a>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800533a:	d004      	beq.n	8005346 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005344:	d107      	bne.n	8005356 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005354:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800535e:	d12a      	bne.n	80053b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005368:	d012      	beq.n	8005390 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2200      	movs	r2, #0
 8005372:	2180      	movs	r1, #128	; 0x80
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f7ff ff67 	bl	8005248 <SPI_WaitFlagStateUntilTimeout>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d02d      	beq.n	80053dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005384:	f043 0220 	orr.w	r2, r3, #32
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e026      	b.n	80053de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2200      	movs	r2, #0
 8005398:	2101      	movs	r1, #1
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f7ff ff54 	bl	8005248 <SPI_WaitFlagStateUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d01a      	beq.n	80053dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053aa:	f043 0220 	orr.w	r2, r3, #32
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e013      	b.n	80053de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2200      	movs	r2, #0
 80053be:	2101      	movs	r1, #1
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff ff41 	bl	8005248 <SPI_WaitFlagStateUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d007      	beq.n	80053dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d0:	f043 0220 	orr.w	r2, r3, #32
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e000      	b.n	80053de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053f4:	4b1b      	ldr	r3, [pc, #108]	; (8005464 <SPI_EndRxTxTransaction+0x7c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1b      	ldr	r2, [pc, #108]	; (8005468 <SPI_EndRxTxTransaction+0x80>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	0d5b      	lsrs	r3, r3, #21
 8005400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005404:	fb02 f303 	mul.w	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005412:	d112      	bne.n	800543a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2200      	movs	r2, #0
 800541c:	2180      	movs	r1, #128	; 0x80
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f7ff ff12 	bl	8005248 <SPI_WaitFlagStateUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d016      	beq.n	8005458 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542e:	f043 0220 	orr.w	r2, r3, #32
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e00f      	b.n	800545a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	3b01      	subs	r3, #1
 8005444:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005450:	2b80      	cmp	r3, #128	; 0x80
 8005452:	d0f2      	beq.n	800543a <SPI_EndRxTxTransaction+0x52>
 8005454:	e000      	b.n	8005458 <SPI_EndRxTxTransaction+0x70>
        break;
 8005456:	bf00      	nop
  }

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000024 	.word	0x20000024
 8005468:	165e9f81 	.word	0x165e9f81

0800546c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e01d      	b.n	80054ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f004 fbb0 	bl	8009bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4619      	mov	r1, r3
 80054aa:	4610      	mov	r0, r2
 80054ac:	f000 fdb8 	bl	8006020 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e01d      	b.n	8005510 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d106      	bne.n	80054ee <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f815 	bl	8005518 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2202      	movs	r2, #2
 80054f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3304      	adds	r3, #4
 80054fe:	4619      	mov	r1, r3
 8005500:	4610      	mov	r0, r2
 8005502:	f000 fd8d 	bl	8006020 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2201      	movs	r2, #1
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f001 f982 	bl	8006848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a15      	ldr	r2, [pc, #84]	; (80055a0 <HAL_TIM_OC_Start+0x74>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d004      	beq.n	8005558 <HAL_TIM_OC_Start+0x2c>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a14      	ldr	r2, [pc, #80]	; (80055a4 <HAL_TIM_OC_Start+0x78>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d101      	bne.n	800555c <HAL_TIM_OC_Start+0x30>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <HAL_TIM_OC_Start+0x32>
 800555c:	2300      	movs	r3, #0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d007      	beq.n	8005572 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005570:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b06      	cmp	r3, #6
 8005582:	d007      	beq.n	8005594 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	40010000 	.word	0x40010000
 80055a4:	40010400 	.word	0x40010400

080055a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e01d      	b.n	80055f6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f815 	bl	80055fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3304      	adds	r3, #4
 80055e4:	4619      	mov	r1, r3
 80055e6:	4610      	mov	r0, r2
 80055e8:	f000 fd1a 	bl	8006020 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2201      	movs	r2, #1
 8005624:	6839      	ldr	r1, [r7, #0]
 8005626:	4618      	mov	r0, r3
 8005628:	f001 f90e 	bl	8006848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a15      	ldr	r2, [pc, #84]	; (8005688 <HAL_TIM_PWM_Start+0x74>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <HAL_TIM_PWM_Start+0x2c>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a14      	ldr	r2, [pc, #80]	; (800568c <HAL_TIM_PWM_Start+0x78>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d101      	bne.n	8005644 <HAL_TIM_PWM_Start+0x30>
 8005640:	2301      	movs	r3, #1
 8005642:	e000      	b.n	8005646 <HAL_TIM_PWM_Start+0x32>
 8005644:	2300      	movs	r3, #0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d007      	beq.n	800565a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005658:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b06      	cmp	r3, #6
 800566a:	d007      	beq.n	800567c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40010000 	.word	0x40010000
 800568c:	40010400 	.word	0x40010400

08005690 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e01d      	b.n	80056de <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f815 	bl	80056e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3304      	adds	r3, #4
 80056cc:	4619      	mov	r1, r3
 80056ce:	4610      	mov	r0, r2
 80056d0:	f000 fca6 	bl	8006020 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b086      	sub	sp, #24
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e083      	b.n	8005816 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f004 fb3e 	bl	8009da4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6812      	ldr	r2, [r2, #0]
 800573a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800573e:	f023 0307 	bic.w	r3, r3, #7
 8005742:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3304      	adds	r3, #4
 800574c:	4619      	mov	r1, r3
 800574e:	4610      	mov	r0, r2
 8005750:	f000 fc66 	bl	8006020 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800577c:	f023 0303 	bic.w	r3, r3, #3
 8005780:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	4313      	orrs	r3, r2
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800579a:	f023 030c 	bic.w	r3, r3, #12
 800579e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	021b      	lsls	r3, r3, #8
 80057b6:	4313      	orrs	r3, r2
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	011a      	lsls	r2, r3, #4
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	031b      	lsls	r3, r3, #12
 80057ca:	4313      	orrs	r3, r2
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80057d8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80057e0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	4313      	orrs	r3, r2
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <HAL_TIM_Encoder_Start_IT+0x16>
 800582e:	2b04      	cmp	r3, #4
 8005830:	d010      	beq.n	8005854 <HAL_TIM_Encoder_Start_IT+0x36>
 8005832:	e01f      	b.n	8005874 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2201      	movs	r2, #1
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f001 f803 	bl	8006848 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f042 0202 	orr.w	r2, r2, #2
 8005850:	60da      	str	r2, [r3, #12]
      break;
 8005852:	e02e      	b.n	80058b2 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2201      	movs	r2, #1
 800585a:	2104      	movs	r1, #4
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fff3 	bl	8006848 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0204 	orr.w	r2, r2, #4
 8005870:	60da      	str	r2, [r3, #12]
      break;
 8005872:	e01e      	b.n	80058b2 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2201      	movs	r2, #1
 800587a:	2100      	movs	r1, #0
 800587c:	4618      	mov	r0, r3
 800587e:	f000 ffe3 	bl	8006848 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2201      	movs	r2, #1
 8005888:	2104      	movs	r1, #4
 800588a:	4618      	mov	r0, r3
 800588c:	f000 ffdc 	bl	8006848 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0202 	orr.w	r2, r2, #2
 800589e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0204 	orr.w	r2, r2, #4
 80058ae:	60da      	str	r2, [r3, #12]
      break;
 80058b0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0201 	orr.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d122      	bne.n	8005928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d11b      	bne.n	8005928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f06f 0202 	mvn.w	r2, #2
 80058f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f003 fb7e 	bl	8009010 <HAL_TIM_IC_CaptureCallback>
 8005914:	e005      	b.n	8005922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fb63 	bl	8005fe2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fb6a 	bl	8005ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b04      	cmp	r3, #4
 8005934:	d122      	bne.n	800597c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b04      	cmp	r3, #4
 8005942:	d11b      	bne.n	800597c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f06f 0204 	mvn.w	r2, #4
 800594c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2202      	movs	r2, #2
 8005952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f003 fb54 	bl	8009010 <HAL_TIM_IC_CaptureCallback>
 8005968:	e005      	b.n	8005976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fb39 	bl	8005fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fb40 	bl	8005ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b08      	cmp	r3, #8
 8005988:	d122      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b08      	cmp	r3, #8
 8005996:	d11b      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0208 	mvn.w	r2, #8
 80059a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2204      	movs	r2, #4
 80059a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f003 fb2a 	bl	8009010 <HAL_TIM_IC_CaptureCallback>
 80059bc:	e005      	b.n	80059ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fb0f 	bl	8005fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fb16 	bl	8005ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	2b10      	cmp	r3, #16
 80059dc:	d122      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0310 	and.w	r3, r3, #16
 80059e8:	2b10      	cmp	r3, #16
 80059ea:	d11b      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0210 	mvn.w	r2, #16
 80059f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2208      	movs	r2, #8
 80059fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f003 fb00 	bl	8009010 <HAL_TIM_IC_CaptureCallback>
 8005a10:	e005      	b.n	8005a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fae5 	bl	8005fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 faec 	bl	8005ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d10e      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d107      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0201 	mvn.w	r2, #1
 8005a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fabf 	bl	8005fce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5a:	2b80      	cmp	r3, #128	; 0x80
 8005a5c:	d10e      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a68:	2b80      	cmp	r3, #128	; 0x80
 8005a6a:	d107      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f001 f80e 	bl	8006a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d10e      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a94:	2b40      	cmp	r3, #64	; 0x40
 8005a96:	d107      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fab1 	bl	800600a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b20      	cmp	r3, #32
 8005ab4:	d10e      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f003 0320 	and.w	r3, r3, #32
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d107      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f06f 0220 	mvn.w	r2, #32
 8005acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 ffd8 	bl	8006a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ad4:	bf00      	nop
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005af2:	2302      	movs	r3, #2
 8005af4:	e04e      	b.n	8005b94 <HAL_TIM_OC_ConfigChannel+0xb8>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2202      	movs	r2, #2
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b0c      	cmp	r3, #12
 8005b0a:	d839      	bhi.n	8005b80 <HAL_TIM_OC_ConfigChannel+0xa4>
 8005b0c:	a201      	add	r2, pc, #4	; (adr r2, 8005b14 <HAL_TIM_OC_ConfigChannel+0x38>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005b49 	.word	0x08005b49
 8005b18:	08005b81 	.word	0x08005b81
 8005b1c:	08005b81 	.word	0x08005b81
 8005b20:	08005b81 	.word	0x08005b81
 8005b24:	08005b57 	.word	0x08005b57
 8005b28:	08005b81 	.word	0x08005b81
 8005b2c:	08005b81 	.word	0x08005b81
 8005b30:	08005b81 	.word	0x08005b81
 8005b34:	08005b65 	.word	0x08005b65
 8005b38:	08005b81 	.word	0x08005b81
 8005b3c:	08005b81 	.word	0x08005b81
 8005b40:	08005b81 	.word	0x08005b81
 8005b44:	08005b73 	.word	0x08005b73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fb06 	bl	8006160 <TIM_OC1_SetConfig>
      break;
 8005b54:	e015      	b.n	8005b82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68b9      	ldr	r1, [r7, #8]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 fb6f 	bl	8006240 <TIM_OC2_SetConfig>
      break;
 8005b62:	e00e      	b.n	8005b82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fbde 	bl	800632c <TIM_OC3_SetConfig>
      break;
 8005b70:	e007      	b.n	8005b82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fc4b 	bl	8006414 <TIM_OC4_SetConfig>
      break;
 8005b7e:	e000      	b.n	8005b82 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8005b80:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e08a      	b.n	8005ccc <HAL_TIM_IC_ConfigChannel+0x130>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d11b      	bne.n	8005c04 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	6819      	ldr	r1, [r3, #0]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f000 fc70 	bl	80064c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699a      	ldr	r2, [r3, #24]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 020c 	bic.w	r2, r2, #12
 8005bee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6999      	ldr	r1, [r3, #24]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	619a      	str	r2, [r3, #24]
 8005c02:	e05a      	b.n	8005cba <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d11c      	bne.n	8005c44 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6818      	ldr	r0, [r3, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	6819      	ldr	r1, [r3, #0]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f000 fcf4 	bl	8006606 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6999      	ldr	r1, [r3, #24]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	021a      	lsls	r2, r3, #8
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	619a      	str	r2, [r3, #24]
 8005c42:	e03a      	b.n	8005cba <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	d11b      	bne.n	8005c82 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6818      	ldr	r0, [r3, #0]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	6819      	ldr	r1, [r3, #0]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f000 fd41 	bl	80066e0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69da      	ldr	r2, [r3, #28]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 020c 	bic.w	r2, r2, #12
 8005c6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69d9      	ldr	r1, [r3, #28]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	61da      	str	r2, [r3, #28]
 8005c80:	e01b      	b.n	8005cba <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	6819      	ldr	r1, [r3, #0]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f000 fd61 	bl	8006758 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ca4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69d9      	ldr	r1, [r3, #28]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	021a      	lsls	r2, r3, #8
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e0b4      	b.n	8005e58 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b0c      	cmp	r3, #12
 8005d02:	f200 809f 	bhi.w	8005e44 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005d06:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0c:	08005d41 	.word	0x08005d41
 8005d10:	08005e45 	.word	0x08005e45
 8005d14:	08005e45 	.word	0x08005e45
 8005d18:	08005e45 	.word	0x08005e45
 8005d1c:	08005d81 	.word	0x08005d81
 8005d20:	08005e45 	.word	0x08005e45
 8005d24:	08005e45 	.word	0x08005e45
 8005d28:	08005e45 	.word	0x08005e45
 8005d2c:	08005dc3 	.word	0x08005dc3
 8005d30:	08005e45 	.word	0x08005e45
 8005d34:	08005e45 	.word	0x08005e45
 8005d38:	08005e45 	.word	0x08005e45
 8005d3c:	08005e03 	.word	0x08005e03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68b9      	ldr	r1, [r7, #8]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 fa0a 	bl	8006160 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699a      	ldr	r2, [r3, #24]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0208 	orr.w	r2, r2, #8
 8005d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699a      	ldr	r2, [r3, #24]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0204 	bic.w	r2, r2, #4
 8005d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6999      	ldr	r1, [r3, #24]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	619a      	str	r2, [r3, #24]
      break;
 8005d7e:	e062      	b.n	8005e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fa5a 	bl	8006240 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6999      	ldr	r1, [r3, #24]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	021a      	lsls	r2, r3, #8
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	619a      	str	r2, [r3, #24]
      break;
 8005dc0:	e041      	b.n	8005e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 faaf 	bl	800632c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69da      	ldr	r2, [r3, #28]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f042 0208 	orr.w	r2, r2, #8
 8005ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0204 	bic.w	r2, r2, #4
 8005dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69d9      	ldr	r1, [r3, #28]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	61da      	str	r2, [r3, #28]
      break;
 8005e00:	e021      	b.n	8005e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fb03 	bl	8006414 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69d9      	ldr	r1, [r3, #28]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	021a      	lsls	r2, r3, #8
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	61da      	str	r2, [r3, #28]
      break;
 8005e42:	e000      	b.n	8005e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005e44:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_TIM_ConfigClockSource+0x18>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e0a6      	b.n	8005fc6 <HAL_TIM_ConfigClockSource+0x166>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d067      	beq.n	8005f80 <HAL_TIM_ConfigClockSource+0x120>
 8005eb0:	2b40      	cmp	r3, #64	; 0x40
 8005eb2:	d80b      	bhi.n	8005ecc <HAL_TIM_ConfigClockSource+0x6c>
 8005eb4:	2b10      	cmp	r3, #16
 8005eb6:	d073      	beq.n	8005fa0 <HAL_TIM_ConfigClockSource+0x140>
 8005eb8:	2b10      	cmp	r3, #16
 8005eba:	d802      	bhi.n	8005ec2 <HAL_TIM_ConfigClockSource+0x62>
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d06f      	beq.n	8005fa0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005ec0:	e078      	b.n	8005fb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d06c      	beq.n	8005fa0 <HAL_TIM_ConfigClockSource+0x140>
 8005ec6:	2b30      	cmp	r3, #48	; 0x30
 8005ec8:	d06a      	beq.n	8005fa0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005eca:	e073      	b.n	8005fb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ecc:	2b70      	cmp	r3, #112	; 0x70
 8005ece:	d00d      	beq.n	8005eec <HAL_TIM_ConfigClockSource+0x8c>
 8005ed0:	2b70      	cmp	r3, #112	; 0x70
 8005ed2:	d804      	bhi.n	8005ede <HAL_TIM_ConfigClockSource+0x7e>
 8005ed4:	2b50      	cmp	r3, #80	; 0x50
 8005ed6:	d033      	beq.n	8005f40 <HAL_TIM_ConfigClockSource+0xe0>
 8005ed8:	2b60      	cmp	r3, #96	; 0x60
 8005eda:	d041      	beq.n	8005f60 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005edc:	e06a      	b.n	8005fb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee2:	d066      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0x152>
 8005ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee8:	d017      	beq.n	8005f1a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005eea:	e063      	b.n	8005fb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	6899      	ldr	r1, [r3, #8]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f000 fc84 	bl	8006808 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f0e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	609a      	str	r2, [r3, #8]
      break;
 8005f18:	e04c      	b.n	8005fb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	6899      	ldr	r1, [r3, #8]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f000 fc6d 	bl	8006808 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f3c:	609a      	str	r2, [r3, #8]
      break;
 8005f3e:	e039      	b.n	8005fb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	6859      	ldr	r1, [r3, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f000 fb2b 	bl	80065a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2150      	movs	r1, #80	; 0x50
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fc3a 	bl	80067d2 <TIM_ITRx_SetConfig>
      break;
 8005f5e:	e029      	b.n	8005fb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	6859      	ldr	r1, [r3, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f000 fb87 	bl	8006680 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2160      	movs	r1, #96	; 0x60
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fc2a 	bl	80067d2 <TIM_ITRx_SetConfig>
      break;
 8005f7e:	e019      	b.n	8005fb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6818      	ldr	r0, [r3, #0]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	6859      	ldr	r1, [r3, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f000 fb0b 	bl	80065a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2140      	movs	r1, #64	; 0x40
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 fc1a 	bl	80067d2 <TIM_ITRx_SetConfig>
      break;
 8005f9e:	e009      	b.n	8005fb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4610      	mov	r0, r2
 8005fac:	f000 fc11 	bl	80067d2 <TIM_ITRx_SetConfig>
      break;
 8005fb0:	e000      	b.n	8005fb4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005fb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b083      	sub	sp, #12
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
	...

08006020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a40      	ldr	r2, [pc, #256]	; (8006134 <TIM_Base_SetConfig+0x114>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d013      	beq.n	8006060 <TIM_Base_SetConfig+0x40>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603e:	d00f      	beq.n	8006060 <TIM_Base_SetConfig+0x40>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a3d      	ldr	r2, [pc, #244]	; (8006138 <TIM_Base_SetConfig+0x118>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00b      	beq.n	8006060 <TIM_Base_SetConfig+0x40>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a3c      	ldr	r2, [pc, #240]	; (800613c <TIM_Base_SetConfig+0x11c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d007      	beq.n	8006060 <TIM_Base_SetConfig+0x40>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a3b      	ldr	r2, [pc, #236]	; (8006140 <TIM_Base_SetConfig+0x120>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d003      	beq.n	8006060 <TIM_Base_SetConfig+0x40>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a3a      	ldr	r2, [pc, #232]	; (8006144 <TIM_Base_SetConfig+0x124>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d108      	bne.n	8006072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a2f      	ldr	r2, [pc, #188]	; (8006134 <TIM_Base_SetConfig+0x114>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d02b      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006080:	d027      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a2c      	ldr	r2, [pc, #176]	; (8006138 <TIM_Base_SetConfig+0x118>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d023      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a2b      	ldr	r2, [pc, #172]	; (800613c <TIM_Base_SetConfig+0x11c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d01f      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a2a      	ldr	r2, [pc, #168]	; (8006140 <TIM_Base_SetConfig+0x120>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d01b      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a29      	ldr	r2, [pc, #164]	; (8006144 <TIM_Base_SetConfig+0x124>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d017      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a28      	ldr	r2, [pc, #160]	; (8006148 <TIM_Base_SetConfig+0x128>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d013      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a27      	ldr	r2, [pc, #156]	; (800614c <TIM_Base_SetConfig+0x12c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00f      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a26      	ldr	r2, [pc, #152]	; (8006150 <TIM_Base_SetConfig+0x130>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00b      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a25      	ldr	r2, [pc, #148]	; (8006154 <TIM_Base_SetConfig+0x134>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d007      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a24      	ldr	r2, [pc, #144]	; (8006158 <TIM_Base_SetConfig+0x138>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d003      	beq.n	80060d2 <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a23      	ldr	r2, [pc, #140]	; (800615c <TIM_Base_SetConfig+0x13c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d108      	bne.n	80060e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a0a      	ldr	r2, [pc, #40]	; (8006134 <TIM_Base_SetConfig+0x114>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d003      	beq.n	8006118 <TIM_Base_SetConfig+0xf8>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a0c      	ldr	r2, [pc, #48]	; (8006144 <TIM_Base_SetConfig+0x124>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d103      	bne.n	8006120 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	691a      	ldr	r2, [r3, #16]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	615a      	str	r2, [r3, #20]
}
 8006126:	bf00      	nop
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	40010000 	.word	0x40010000
 8006138:	40000400 	.word	0x40000400
 800613c:	40000800 	.word	0x40000800
 8006140:	40000c00 	.word	0x40000c00
 8006144:	40010400 	.word	0x40010400
 8006148:	40014000 	.word	0x40014000
 800614c:	40014400 	.word	0x40014400
 8006150:	40014800 	.word	0x40014800
 8006154:	40001800 	.word	0x40001800
 8006158:	40001c00 	.word	0x40001c00
 800615c:	40002000 	.word	0x40002000

08006160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f023 0201 	bic.w	r2, r3, #1
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f023 0302 	bic.w	r3, r3, #2
 80061a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a20      	ldr	r2, [pc, #128]	; (8006238 <TIM_OC1_SetConfig+0xd8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d003      	beq.n	80061c4 <TIM_OC1_SetConfig+0x64>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a1f      	ldr	r2, [pc, #124]	; (800623c <TIM_OC1_SetConfig+0xdc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d10c      	bne.n	80061de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f023 0308 	bic.w	r3, r3, #8
 80061ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f023 0304 	bic.w	r3, r3, #4
 80061dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a15      	ldr	r2, [pc, #84]	; (8006238 <TIM_OC1_SetConfig+0xd8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d003      	beq.n	80061ee <TIM_OC1_SetConfig+0x8e>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a14      	ldr	r2, [pc, #80]	; (800623c <TIM_OC1_SetConfig+0xdc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d111      	bne.n	8006212 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4313      	orrs	r3, r2
 8006210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	621a      	str	r2, [r3, #32]
}
 800622c:	bf00      	nop
 800622e:	371c      	adds	r7, #28
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	40010000 	.word	0x40010000
 800623c:	40010400 	.word	0x40010400

08006240 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	f023 0210 	bic.w	r2, r3, #16
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	021b      	lsls	r3, r3, #8
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	4313      	orrs	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f023 0320 	bic.w	r3, r3, #32
 800628a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a22      	ldr	r2, [pc, #136]	; (8006324 <TIM_OC2_SetConfig+0xe4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_OC2_SetConfig+0x68>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a21      	ldr	r2, [pc, #132]	; (8006328 <TIM_OC2_SetConfig+0xe8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d10d      	bne.n	80062c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	011b      	lsls	r3, r3, #4
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a17      	ldr	r2, [pc, #92]	; (8006324 <TIM_OC2_SetConfig+0xe4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d003      	beq.n	80062d4 <TIM_OC2_SetConfig+0x94>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a16      	ldr	r2, [pc, #88]	; (8006328 <TIM_OC2_SetConfig+0xe8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d113      	bne.n	80062fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	621a      	str	r2, [r3, #32]
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40010000 	.word	0x40010000
 8006328:	40010400 	.word	0x40010400

0800632c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0303 	bic.w	r3, r3, #3
 8006362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	4313      	orrs	r3, r2
 8006380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a21      	ldr	r2, [pc, #132]	; (800640c <TIM_OC3_SetConfig+0xe0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d003      	beq.n	8006392 <TIM_OC3_SetConfig+0x66>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a20      	ldr	r2, [pc, #128]	; (8006410 <TIM_OC3_SetConfig+0xe4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d10d      	bne.n	80063ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a16      	ldr	r2, [pc, #88]	; (800640c <TIM_OC3_SetConfig+0xe0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d003      	beq.n	80063be <TIM_OC3_SetConfig+0x92>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a15      	ldr	r2, [pc, #84]	; (8006410 <TIM_OC3_SetConfig+0xe4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d113      	bne.n	80063e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	011b      	lsls	r3, r3, #4
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	621a      	str	r2, [r3, #32]
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	40010000 	.word	0x40010000
 8006410:	40010400 	.word	0x40010400

08006414 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800644a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	021b      	lsls	r3, r3, #8
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800645e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	031b      	lsls	r3, r3, #12
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a12      	ldr	r2, [pc, #72]	; (80064b8 <TIM_OC4_SetConfig+0xa4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d003      	beq.n	800647c <TIM_OC4_SetConfig+0x68>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a11      	ldr	r2, [pc, #68]	; (80064bc <TIM_OC4_SetConfig+0xa8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d109      	bne.n	8006490 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006482:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	019b      	lsls	r3, r3, #6
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	4313      	orrs	r3, r2
 800648e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	621a      	str	r2, [r3, #32]
}
 80064aa:	bf00      	nop
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40010400 	.word	0x40010400

080064c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f023 0201 	bic.w	r2, r3, #1
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4a28      	ldr	r2, [pc, #160]	; (800658c <TIM_TI1_SetConfig+0xcc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d01b      	beq.n	8006526 <TIM_TI1_SetConfig+0x66>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f4:	d017      	beq.n	8006526 <TIM_TI1_SetConfig+0x66>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4a25      	ldr	r2, [pc, #148]	; (8006590 <TIM_TI1_SetConfig+0xd0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <TIM_TI1_SetConfig+0x66>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4a24      	ldr	r2, [pc, #144]	; (8006594 <TIM_TI1_SetConfig+0xd4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00f      	beq.n	8006526 <TIM_TI1_SetConfig+0x66>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a23      	ldr	r2, [pc, #140]	; (8006598 <TIM_TI1_SetConfig+0xd8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00b      	beq.n	8006526 <TIM_TI1_SetConfig+0x66>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4a22      	ldr	r2, [pc, #136]	; (800659c <TIM_TI1_SetConfig+0xdc>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d007      	beq.n	8006526 <TIM_TI1_SetConfig+0x66>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4a21      	ldr	r2, [pc, #132]	; (80065a0 <TIM_TI1_SetConfig+0xe0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d003      	beq.n	8006526 <TIM_TI1_SetConfig+0x66>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4a20      	ldr	r2, [pc, #128]	; (80065a4 <TIM_TI1_SetConfig+0xe4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d101      	bne.n	800652a <TIM_TI1_SetConfig+0x6a>
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <TIM_TI1_SetConfig+0x6c>
 800652a:	2300      	movs	r3, #0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d008      	beq.n	8006542 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 0303 	bic.w	r3, r3, #3
 8006536:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	e003      	b.n	800654a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f043 0301 	orr.w	r3, r3, #1
 8006548:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006550:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	b2db      	uxtb	r3, r3
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	4313      	orrs	r3, r2
 800655c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f023 030a 	bic.w	r3, r3, #10
 8006564:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f003 030a 	and.w	r3, r3, #10
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	4313      	orrs	r3, r2
 8006570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	621a      	str	r2, [r3, #32]
}
 800657e:	bf00      	nop
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40010000 	.word	0x40010000
 8006590:	40000400 	.word	0x40000400
 8006594:	40000800 	.word	0x40000800
 8006598:	40000c00 	.word	0x40000c00
 800659c:	40010400 	.word	0x40010400
 80065a0:	40014000 	.word	0x40014000
 80065a4:	40001800 	.word	0x40001800

080065a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	f023 0201 	bic.w	r2, r3, #1
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f023 030a 	bic.w	r3, r3, #10
 80065e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	621a      	str	r2, [r3, #32]
}
 80065fa:	bf00      	nop
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006606:	b480      	push	{r7}
 8006608:	b087      	sub	sp, #28
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	607a      	str	r2, [r7, #4]
 8006612:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	f023 0210 	bic.w	r2, r3, #16
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006632:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	021b      	lsls	r3, r3, #8
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006644:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	031b      	lsls	r3, r3, #12
 800664a:	b29b      	uxth	r3, r3
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	4313      	orrs	r3, r2
 8006650:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006658:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	4313      	orrs	r3, r2
 8006666:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	621a      	str	r2, [r3, #32]
}
 8006674:	bf00      	nop
 8006676:	371c      	adds	r7, #28
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	f023 0210 	bic.w	r2, r3, #16
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	031b      	lsls	r3, r3, #12
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	621a      	str	r2, [r3, #32]
}
 80066d4:	bf00      	nop
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f023 0303 	bic.w	r3, r3, #3
 800670c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800671c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	011b      	lsls	r3, r3, #4
 8006722:	b2db      	uxtb	r3, r3
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	4313      	orrs	r3, r2
 8006728:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006730:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	621a      	str	r2, [r3, #32]
}
 800674c:	bf00      	nop
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006784:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	021b      	lsls	r3, r3, #8
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006796:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	031b      	lsls	r3, r3, #12
 800679c:	b29b      	uxth	r3, r3
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80067aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	031b      	lsls	r3, r3, #12
 80067b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	621a      	str	r2, [r3, #32]
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b085      	sub	sp, #20
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f043 0307 	orr.w	r3, r3, #7
 80067f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	609a      	str	r2, [r3, #8]
}
 80067fc:	bf00      	nop
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	021a      	lsls	r2, r3, #8
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	431a      	orrs	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	4313      	orrs	r3, r2
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	609a      	str	r2, [r3, #8]
}
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f003 031f 	and.w	r3, r3, #31
 800685a:	2201      	movs	r2, #1
 800685c:	fa02 f303 	lsl.w	r3, r2, r3
 8006860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a1a      	ldr	r2, [r3, #32]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	43db      	mvns	r3, r3
 800686a:	401a      	ands	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a1a      	ldr	r2, [r3, #32]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f003 031f 	and.w	r3, r3, #31
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	fa01 f303 	lsl.w	r3, r1, r3
 8006880:	431a      	orrs	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	621a      	str	r2, [r3, #32]
}
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2204      	movs	r2, #4
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 f901 	bl	8006aac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b06      	cmp	r3, #6
 80068ca:	d007      	beq.n	80068dc <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0201 	orr.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e05a      	b.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a21      	ldr	r2, [pc, #132]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d022      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800694c:	d01d      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1d      	ldr	r2, [pc, #116]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d018      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a1b      	ldr	r2, [pc, #108]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d013      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1a      	ldr	r2, [pc, #104]	; (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00e      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a18      	ldr	r2, [pc, #96]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d009      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a17      	ldr	r2, [pc, #92]	; (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d004      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a15      	ldr	r2, [pc, #84]	; (80069dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d10c      	bne.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4313      	orrs	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800
 80069d0:	40000c00 	.word	0x40000c00
 80069d4:	40010400 	.word	0x40010400
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40001800 	.word	0x40001800

080069e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e03d      	b.n	8006a78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f003 031f 	and.w	r3, r3, #31
 8006abe:	2204      	movs	r2, #4
 8006ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6a1a      	ldr	r2, [r3, #32]
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	43db      	mvns	r3, r3
 8006ace:	401a      	ands	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a1a      	ldr	r2, [r3, #32]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	621a      	str	r2, [r3, #32]
}
 8006aea:	bf00      	nop
 8006aec:	371c      	adds	r7, #28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b082      	sub	sp, #8
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e03f      	b.n	8006b88 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d106      	bne.n	8006b22 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f003 fa09 	bl	8009f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2224      	movs	r2, #36	; 0x24
 8006b26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68da      	ldr	r2, [r3, #12]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b38:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fabe 	bl	80070bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	691a      	ldr	r2, [r3, #16]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b4e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	695a      	ldr	r2, [r3, #20]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b5e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b6e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2220      	movs	r2, #32
 8006b82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	d140      	bne.n	8006c2c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <HAL_UART_Receive_IT+0x26>
 8006bb0:	88fb      	ldrh	r3, [r7, #6]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e039      	b.n	8006c2e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d101      	bne.n	8006bc8 <HAL_UART_Receive_IT+0x38>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e032      	b.n	8006c2e <HAL_UART_Receive_IT+0x9e>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	88fa      	ldrh	r2, [r7, #6]
 8006bda:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	88fa      	ldrh	r2, [r7, #6]
 8006be0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2222      	movs	r2, #34	; 0x22
 8006bec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c06:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	695a      	ldr	r2, [r3, #20]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0201 	orr.w	r2, r2, #1
 8006c16:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0220 	orr.w	r2, r2, #32
 8006c26:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	e000      	b.n	8006c2e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006c2c:	2302      	movs	r3, #2
  }
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
	...

08006c3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	f003 030f 	and.w	r3, r3, #15
 8006c6a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10d      	bne.n	8006c8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	f003 0320 	and.w	r3, r3, #32
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d008      	beq.n	8006c8e <HAL_UART_IRQHandler+0x52>
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	f003 0320 	and.w	r3, r3, #32
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f996 	bl	8006fb8 <UART_Receive_IT>
      return;
 8006c8c:	e0d1      	b.n	8006e32 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 80b0 	beq.w	8006df6 <HAL_UART_IRQHandler+0x1ba>
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d105      	bne.n	8006cac <HAL_UART_IRQHandler+0x70>
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 80a5 	beq.w	8006df6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00a      	beq.n	8006ccc <HAL_UART_IRQHandler+0x90>
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc4:	f043 0201 	orr.w	r2, r3, #1
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	f003 0304 	and.w	r3, r3, #4
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <HAL_UART_IRQHandler+0xb0>
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce4:	f043 0202 	orr.w	r2, r3, #2
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <HAL_UART_IRQHandler+0xd0>
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d005      	beq.n	8006d0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d04:	f043 0204 	orr.w	r2, r3, #4
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f003 0308 	and.w	r3, r3, #8
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00f      	beq.n	8006d36 <HAL_UART_IRQHandler+0xfa>
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	f003 0320 	and.w	r3, r3, #32
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <HAL_UART_IRQHandler+0xee>
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d005      	beq.n	8006d36 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2e:	f043 0208 	orr.w	r2, r3, #8
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d078      	beq.n	8006e30 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <HAL_UART_IRQHandler+0x11c>
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f930 	bl	8006fb8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d62:	2b40      	cmp	r3, #64	; 0x40
 8006d64:	bf0c      	ite	eq
 8006d66:	2301      	moveq	r3, #1
 8006d68:	2300      	movne	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <HAL_UART_IRQHandler+0x144>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d031      	beq.n	8006de4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f879 	bl	8006e78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d90:	2b40      	cmp	r3, #64	; 0x40
 8006d92:	d123      	bne.n	8006ddc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	695a      	ldr	r2, [r3, #20]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006da2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d013      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db0:	4a21      	ldr	r2, [pc, #132]	; (8006e38 <HAL_UART_IRQHandler+0x1fc>)
 8006db2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fb fc35 	bl	8002628 <HAL_DMA_Abort_IT>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d016      	beq.n	8006df2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006dce:	4610      	mov	r0, r2
 8006dd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd2:	e00e      	b.n	8006df2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f845 	bl	8006e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dda:	e00a      	b.n	8006df2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f841 	bl	8006e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de2:	e006      	b.n	8006df2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f83d 	bl	8006e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006df0:	e01e      	b.n	8006e30 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df2:	bf00      	nop
    return;
 8006df4:	e01c      	b.n	8006e30 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d008      	beq.n	8006e12 <HAL_UART_IRQHandler+0x1d6>
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f866 	bl	8006edc <UART_Transmit_IT>
    return;
 8006e10:	e00f      	b.n	8006e32 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00a      	beq.n	8006e32 <HAL_UART_IRQHandler+0x1f6>
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f8ae 	bl	8006f88 <UART_EndTransmit_IT>
    return;
 8006e2c:	bf00      	nop
 8006e2e:	e000      	b.n	8006e32 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006e30:	bf00      	nop
  }
}
 8006e32:	3720      	adds	r7, #32
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	08006eb5 	.word	0x08006eb5

08006e3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	695a      	ldr	r2, [r3, #20]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f7ff ffc8 	bl	8006e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ed4:	bf00      	nop
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b21      	cmp	r3, #33	; 0x21
 8006eee:	d144      	bne.n	8006f7a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef8:	d11a      	bne.n	8006f30 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f0e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d105      	bne.n	8006f24 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	1c9a      	adds	r2, r3, #2
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	621a      	str	r2, [r3, #32]
 8006f22:	e00e      	b.n	8006f42 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	621a      	str	r2, [r3, #32]
 8006f2e:	e008      	b.n	8006f42 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	1c59      	adds	r1, r3, #1
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	6211      	str	r1, [r2, #32]
 8006f3a:	781a      	ldrb	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10f      	bne.n	8006f76 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68da      	ldr	r2, [r3, #12]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68da      	ldr	r2, [r3, #12]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	e000      	b.n	8006f7c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006f7a:	2302      	movs	r3, #2
  }
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff ff47 	bl	8006e3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b22      	cmp	r3, #34	; 0x22
 8006fca:	d171      	bne.n	80070b0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd4:	d123      	bne.n	800701e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fda:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10e      	bne.n	8007002 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	1c9a      	adds	r2, r3, #2
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	629a      	str	r2, [r3, #40]	; 0x28
 8007000:	e029      	b.n	8007056 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	b29b      	uxth	r3, r3
 800700a:	b2db      	uxtb	r3, r3
 800700c:	b29a      	uxth	r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	629a      	str	r2, [r3, #40]	; 0x28
 800701c:	e01b      	b.n	8007056 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10a      	bne.n	800703c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6858      	ldr	r0, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007030:	1c59      	adds	r1, r3, #1
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6291      	str	r1, [r2, #40]	; 0x28
 8007036:	b2c2      	uxtb	r2, r0
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	e00c      	b.n	8007056 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	b2da      	uxtb	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007048:	1c58      	adds	r0, r3, #1
 800704a:	6879      	ldr	r1, [r7, #4]
 800704c:	6288      	str	r0, [r1, #40]	; 0x28
 800704e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007052:	b2d2      	uxtb	r2, r2
 8007054:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800705a:	b29b      	uxth	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	b29b      	uxth	r3, r3
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	4619      	mov	r1, r3
 8007064:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007066:	2b00      	cmp	r3, #0
 8007068:	d120      	bne.n	80070ac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0220 	bic.w	r2, r2, #32
 8007078:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007088:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	695a      	ldr	r2, [r3, #20]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0201 	bic.w	r2, r2, #1
 8007098:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7ff fed4 	bl	8006e50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	e002      	b.n	80070b2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	e000      	b.n	80070b2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80070b0:	2302      	movs	r3, #2
  }
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c0:	b085      	sub	sp, #20
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	431a      	orrs	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	431a      	orrs	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80070fe:	f023 030c 	bic.w	r3, r3, #12
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6812      	ldr	r2, [r2, #0]
 8007106:	68f9      	ldr	r1, [r7, #12]
 8007108:	430b      	orrs	r3, r1
 800710a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699a      	ldr	r2, [r3, #24]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800712a:	f040 818b 	bne.w	8007444 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4ac1      	ldr	r2, [pc, #772]	; (8007438 <UART_SetConfig+0x37c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d005      	beq.n	8007144 <UART_SetConfig+0x88>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4abf      	ldr	r2, [pc, #764]	; (800743c <UART_SetConfig+0x380>)
 800713e:	4293      	cmp	r3, r2
 8007140:	f040 80bd 	bne.w	80072be <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007144:	f7fd fb0a 	bl	800475c <HAL_RCC_GetPCLK2Freq>
 8007148:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	461d      	mov	r5, r3
 800714e:	f04f 0600 	mov.w	r6, #0
 8007152:	46a8      	mov	r8, r5
 8007154:	46b1      	mov	r9, r6
 8007156:	eb18 0308 	adds.w	r3, r8, r8
 800715a:	eb49 0409 	adc.w	r4, r9, r9
 800715e:	4698      	mov	r8, r3
 8007160:	46a1      	mov	r9, r4
 8007162:	eb18 0805 	adds.w	r8, r8, r5
 8007166:	eb49 0906 	adc.w	r9, r9, r6
 800716a:	f04f 0100 	mov.w	r1, #0
 800716e:	f04f 0200 	mov.w	r2, #0
 8007172:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007176:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800717a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800717e:	4688      	mov	r8, r1
 8007180:	4691      	mov	r9, r2
 8007182:	eb18 0005 	adds.w	r0, r8, r5
 8007186:	eb49 0106 	adc.w	r1, r9, r6
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	461d      	mov	r5, r3
 8007190:	f04f 0600 	mov.w	r6, #0
 8007194:	196b      	adds	r3, r5, r5
 8007196:	eb46 0406 	adc.w	r4, r6, r6
 800719a:	461a      	mov	r2, r3
 800719c:	4623      	mov	r3, r4
 800719e:	f7f9 fd5d 	bl	8000c5c <__aeabi_uldivmod>
 80071a2:	4603      	mov	r3, r0
 80071a4:	460c      	mov	r4, r1
 80071a6:	461a      	mov	r2, r3
 80071a8:	4ba5      	ldr	r3, [pc, #660]	; (8007440 <UART_SetConfig+0x384>)
 80071aa:	fba3 2302 	umull	r2, r3, r3, r2
 80071ae:	095b      	lsrs	r3, r3, #5
 80071b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	461d      	mov	r5, r3
 80071b8:	f04f 0600 	mov.w	r6, #0
 80071bc:	46a9      	mov	r9, r5
 80071be:	46b2      	mov	sl, r6
 80071c0:	eb19 0309 	adds.w	r3, r9, r9
 80071c4:	eb4a 040a 	adc.w	r4, sl, sl
 80071c8:	4699      	mov	r9, r3
 80071ca:	46a2      	mov	sl, r4
 80071cc:	eb19 0905 	adds.w	r9, r9, r5
 80071d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80071d4:	f04f 0100 	mov.w	r1, #0
 80071d8:	f04f 0200 	mov.w	r2, #0
 80071dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071e8:	4689      	mov	r9, r1
 80071ea:	4692      	mov	sl, r2
 80071ec:	eb19 0005 	adds.w	r0, r9, r5
 80071f0:	eb4a 0106 	adc.w	r1, sl, r6
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	461d      	mov	r5, r3
 80071fa:	f04f 0600 	mov.w	r6, #0
 80071fe:	196b      	adds	r3, r5, r5
 8007200:	eb46 0406 	adc.w	r4, r6, r6
 8007204:	461a      	mov	r2, r3
 8007206:	4623      	mov	r3, r4
 8007208:	f7f9 fd28 	bl	8000c5c <__aeabi_uldivmod>
 800720c:	4603      	mov	r3, r0
 800720e:	460c      	mov	r4, r1
 8007210:	461a      	mov	r2, r3
 8007212:	4b8b      	ldr	r3, [pc, #556]	; (8007440 <UART_SetConfig+0x384>)
 8007214:	fba3 1302 	umull	r1, r3, r3, r2
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	2164      	movs	r1, #100	; 0x64
 800721c:	fb01 f303 	mul.w	r3, r1, r3
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	3332      	adds	r3, #50	; 0x32
 8007226:	4a86      	ldr	r2, [pc, #536]	; (8007440 <UART_SetConfig+0x384>)
 8007228:	fba2 2303 	umull	r2, r3, r2, r3
 800722c:	095b      	lsrs	r3, r3, #5
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007234:	4498      	add	r8, r3
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	461d      	mov	r5, r3
 800723a:	f04f 0600 	mov.w	r6, #0
 800723e:	46a9      	mov	r9, r5
 8007240:	46b2      	mov	sl, r6
 8007242:	eb19 0309 	adds.w	r3, r9, r9
 8007246:	eb4a 040a 	adc.w	r4, sl, sl
 800724a:	4699      	mov	r9, r3
 800724c:	46a2      	mov	sl, r4
 800724e:	eb19 0905 	adds.w	r9, r9, r5
 8007252:	eb4a 0a06 	adc.w	sl, sl, r6
 8007256:	f04f 0100 	mov.w	r1, #0
 800725a:	f04f 0200 	mov.w	r2, #0
 800725e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007262:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007266:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800726a:	4689      	mov	r9, r1
 800726c:	4692      	mov	sl, r2
 800726e:	eb19 0005 	adds.w	r0, r9, r5
 8007272:	eb4a 0106 	adc.w	r1, sl, r6
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	461d      	mov	r5, r3
 800727c:	f04f 0600 	mov.w	r6, #0
 8007280:	196b      	adds	r3, r5, r5
 8007282:	eb46 0406 	adc.w	r4, r6, r6
 8007286:	461a      	mov	r2, r3
 8007288:	4623      	mov	r3, r4
 800728a:	f7f9 fce7 	bl	8000c5c <__aeabi_uldivmod>
 800728e:	4603      	mov	r3, r0
 8007290:	460c      	mov	r4, r1
 8007292:	461a      	mov	r2, r3
 8007294:	4b6a      	ldr	r3, [pc, #424]	; (8007440 <UART_SetConfig+0x384>)
 8007296:	fba3 1302 	umull	r1, r3, r3, r2
 800729a:	095b      	lsrs	r3, r3, #5
 800729c:	2164      	movs	r1, #100	; 0x64
 800729e:	fb01 f303 	mul.w	r3, r1, r3
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	3332      	adds	r3, #50	; 0x32
 80072a8:	4a65      	ldr	r2, [pc, #404]	; (8007440 <UART_SetConfig+0x384>)
 80072aa:	fba2 2303 	umull	r2, r3, r2, r3
 80072ae:	095b      	lsrs	r3, r3, #5
 80072b0:	f003 0207 	and.w	r2, r3, #7
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4442      	add	r2, r8
 80072ba:	609a      	str	r2, [r3, #8]
 80072bc:	e26f      	b.n	800779e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072be:	f7fd fa39 	bl	8004734 <HAL_RCC_GetPCLK1Freq>
 80072c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	461d      	mov	r5, r3
 80072c8:	f04f 0600 	mov.w	r6, #0
 80072cc:	46a8      	mov	r8, r5
 80072ce:	46b1      	mov	r9, r6
 80072d0:	eb18 0308 	adds.w	r3, r8, r8
 80072d4:	eb49 0409 	adc.w	r4, r9, r9
 80072d8:	4698      	mov	r8, r3
 80072da:	46a1      	mov	r9, r4
 80072dc:	eb18 0805 	adds.w	r8, r8, r5
 80072e0:	eb49 0906 	adc.w	r9, r9, r6
 80072e4:	f04f 0100 	mov.w	r1, #0
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80072f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80072f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80072f8:	4688      	mov	r8, r1
 80072fa:	4691      	mov	r9, r2
 80072fc:	eb18 0005 	adds.w	r0, r8, r5
 8007300:	eb49 0106 	adc.w	r1, r9, r6
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	461d      	mov	r5, r3
 800730a:	f04f 0600 	mov.w	r6, #0
 800730e:	196b      	adds	r3, r5, r5
 8007310:	eb46 0406 	adc.w	r4, r6, r6
 8007314:	461a      	mov	r2, r3
 8007316:	4623      	mov	r3, r4
 8007318:	f7f9 fca0 	bl	8000c5c <__aeabi_uldivmod>
 800731c:	4603      	mov	r3, r0
 800731e:	460c      	mov	r4, r1
 8007320:	461a      	mov	r2, r3
 8007322:	4b47      	ldr	r3, [pc, #284]	; (8007440 <UART_SetConfig+0x384>)
 8007324:	fba3 2302 	umull	r2, r3, r3, r2
 8007328:	095b      	lsrs	r3, r3, #5
 800732a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	461d      	mov	r5, r3
 8007332:	f04f 0600 	mov.w	r6, #0
 8007336:	46a9      	mov	r9, r5
 8007338:	46b2      	mov	sl, r6
 800733a:	eb19 0309 	adds.w	r3, r9, r9
 800733e:	eb4a 040a 	adc.w	r4, sl, sl
 8007342:	4699      	mov	r9, r3
 8007344:	46a2      	mov	sl, r4
 8007346:	eb19 0905 	adds.w	r9, r9, r5
 800734a:	eb4a 0a06 	adc.w	sl, sl, r6
 800734e:	f04f 0100 	mov.w	r1, #0
 8007352:	f04f 0200 	mov.w	r2, #0
 8007356:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800735a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800735e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007362:	4689      	mov	r9, r1
 8007364:	4692      	mov	sl, r2
 8007366:	eb19 0005 	adds.w	r0, r9, r5
 800736a:	eb4a 0106 	adc.w	r1, sl, r6
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	461d      	mov	r5, r3
 8007374:	f04f 0600 	mov.w	r6, #0
 8007378:	196b      	adds	r3, r5, r5
 800737a:	eb46 0406 	adc.w	r4, r6, r6
 800737e:	461a      	mov	r2, r3
 8007380:	4623      	mov	r3, r4
 8007382:	f7f9 fc6b 	bl	8000c5c <__aeabi_uldivmod>
 8007386:	4603      	mov	r3, r0
 8007388:	460c      	mov	r4, r1
 800738a:	461a      	mov	r2, r3
 800738c:	4b2c      	ldr	r3, [pc, #176]	; (8007440 <UART_SetConfig+0x384>)
 800738e:	fba3 1302 	umull	r1, r3, r3, r2
 8007392:	095b      	lsrs	r3, r3, #5
 8007394:	2164      	movs	r1, #100	; 0x64
 8007396:	fb01 f303 	mul.w	r3, r1, r3
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	00db      	lsls	r3, r3, #3
 800739e:	3332      	adds	r3, #50	; 0x32
 80073a0:	4a27      	ldr	r2, [pc, #156]	; (8007440 <UART_SetConfig+0x384>)
 80073a2:	fba2 2303 	umull	r2, r3, r2, r3
 80073a6:	095b      	lsrs	r3, r3, #5
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073ae:	4498      	add	r8, r3
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	461d      	mov	r5, r3
 80073b4:	f04f 0600 	mov.w	r6, #0
 80073b8:	46a9      	mov	r9, r5
 80073ba:	46b2      	mov	sl, r6
 80073bc:	eb19 0309 	adds.w	r3, r9, r9
 80073c0:	eb4a 040a 	adc.w	r4, sl, sl
 80073c4:	4699      	mov	r9, r3
 80073c6:	46a2      	mov	sl, r4
 80073c8:	eb19 0905 	adds.w	r9, r9, r5
 80073cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80073d0:	f04f 0100 	mov.w	r1, #0
 80073d4:	f04f 0200 	mov.w	r2, #0
 80073d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073e4:	4689      	mov	r9, r1
 80073e6:	4692      	mov	sl, r2
 80073e8:	eb19 0005 	adds.w	r0, r9, r5
 80073ec:	eb4a 0106 	adc.w	r1, sl, r6
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	461d      	mov	r5, r3
 80073f6:	f04f 0600 	mov.w	r6, #0
 80073fa:	196b      	adds	r3, r5, r5
 80073fc:	eb46 0406 	adc.w	r4, r6, r6
 8007400:	461a      	mov	r2, r3
 8007402:	4623      	mov	r3, r4
 8007404:	f7f9 fc2a 	bl	8000c5c <__aeabi_uldivmod>
 8007408:	4603      	mov	r3, r0
 800740a:	460c      	mov	r4, r1
 800740c:	461a      	mov	r2, r3
 800740e:	4b0c      	ldr	r3, [pc, #48]	; (8007440 <UART_SetConfig+0x384>)
 8007410:	fba3 1302 	umull	r1, r3, r3, r2
 8007414:	095b      	lsrs	r3, r3, #5
 8007416:	2164      	movs	r1, #100	; 0x64
 8007418:	fb01 f303 	mul.w	r3, r1, r3
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	3332      	adds	r3, #50	; 0x32
 8007422:	4a07      	ldr	r2, [pc, #28]	; (8007440 <UART_SetConfig+0x384>)
 8007424:	fba2 2303 	umull	r2, r3, r2, r3
 8007428:	095b      	lsrs	r3, r3, #5
 800742a:	f003 0207 	and.w	r2, r3, #7
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4442      	add	r2, r8
 8007434:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007436:	e1b2      	b.n	800779e <UART_SetConfig+0x6e2>
 8007438:	40011000 	.word	0x40011000
 800743c:	40011400 	.word	0x40011400
 8007440:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4ad7      	ldr	r2, [pc, #860]	; (80077a8 <UART_SetConfig+0x6ec>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d005      	beq.n	800745a <UART_SetConfig+0x39e>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4ad6      	ldr	r2, [pc, #856]	; (80077ac <UART_SetConfig+0x6f0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	f040 80d1 	bne.w	80075fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800745a:	f7fd f97f 	bl	800475c <HAL_RCC_GetPCLK2Freq>
 800745e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	469a      	mov	sl, r3
 8007464:	f04f 0b00 	mov.w	fp, #0
 8007468:	46d0      	mov	r8, sl
 800746a:	46d9      	mov	r9, fp
 800746c:	eb18 0308 	adds.w	r3, r8, r8
 8007470:	eb49 0409 	adc.w	r4, r9, r9
 8007474:	4698      	mov	r8, r3
 8007476:	46a1      	mov	r9, r4
 8007478:	eb18 080a 	adds.w	r8, r8, sl
 800747c:	eb49 090b 	adc.w	r9, r9, fp
 8007480:	f04f 0100 	mov.w	r1, #0
 8007484:	f04f 0200 	mov.w	r2, #0
 8007488:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800748c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007490:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007494:	4688      	mov	r8, r1
 8007496:	4691      	mov	r9, r2
 8007498:	eb1a 0508 	adds.w	r5, sl, r8
 800749c:	eb4b 0609 	adc.w	r6, fp, r9
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	4619      	mov	r1, r3
 80074a6:	f04f 0200 	mov.w	r2, #0
 80074aa:	f04f 0300 	mov.w	r3, #0
 80074ae:	f04f 0400 	mov.w	r4, #0
 80074b2:	0094      	lsls	r4, r2, #2
 80074b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074b8:	008b      	lsls	r3, r1, #2
 80074ba:	461a      	mov	r2, r3
 80074bc:	4623      	mov	r3, r4
 80074be:	4628      	mov	r0, r5
 80074c0:	4631      	mov	r1, r6
 80074c2:	f7f9 fbcb 	bl	8000c5c <__aeabi_uldivmod>
 80074c6:	4603      	mov	r3, r0
 80074c8:	460c      	mov	r4, r1
 80074ca:	461a      	mov	r2, r3
 80074cc:	4bb8      	ldr	r3, [pc, #736]	; (80077b0 <UART_SetConfig+0x6f4>)
 80074ce:	fba3 2302 	umull	r2, r3, r3, r2
 80074d2:	095b      	lsrs	r3, r3, #5
 80074d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	469b      	mov	fp, r3
 80074dc:	f04f 0c00 	mov.w	ip, #0
 80074e0:	46d9      	mov	r9, fp
 80074e2:	46e2      	mov	sl, ip
 80074e4:	eb19 0309 	adds.w	r3, r9, r9
 80074e8:	eb4a 040a 	adc.w	r4, sl, sl
 80074ec:	4699      	mov	r9, r3
 80074ee:	46a2      	mov	sl, r4
 80074f0:	eb19 090b 	adds.w	r9, r9, fp
 80074f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80074f8:	f04f 0100 	mov.w	r1, #0
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007504:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007508:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800750c:	4689      	mov	r9, r1
 800750e:	4692      	mov	sl, r2
 8007510:	eb1b 0509 	adds.w	r5, fp, r9
 8007514:	eb4c 060a 	adc.w	r6, ip, sl
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	4619      	mov	r1, r3
 800751e:	f04f 0200 	mov.w	r2, #0
 8007522:	f04f 0300 	mov.w	r3, #0
 8007526:	f04f 0400 	mov.w	r4, #0
 800752a:	0094      	lsls	r4, r2, #2
 800752c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007530:	008b      	lsls	r3, r1, #2
 8007532:	461a      	mov	r2, r3
 8007534:	4623      	mov	r3, r4
 8007536:	4628      	mov	r0, r5
 8007538:	4631      	mov	r1, r6
 800753a:	f7f9 fb8f 	bl	8000c5c <__aeabi_uldivmod>
 800753e:	4603      	mov	r3, r0
 8007540:	460c      	mov	r4, r1
 8007542:	461a      	mov	r2, r3
 8007544:	4b9a      	ldr	r3, [pc, #616]	; (80077b0 <UART_SetConfig+0x6f4>)
 8007546:	fba3 1302 	umull	r1, r3, r3, r2
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	2164      	movs	r1, #100	; 0x64
 800754e:	fb01 f303 	mul.w	r3, r1, r3
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	011b      	lsls	r3, r3, #4
 8007556:	3332      	adds	r3, #50	; 0x32
 8007558:	4a95      	ldr	r2, [pc, #596]	; (80077b0 <UART_SetConfig+0x6f4>)
 800755a:	fba2 2303 	umull	r2, r3, r2, r3
 800755e:	095b      	lsrs	r3, r3, #5
 8007560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007564:	4498      	add	r8, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	469b      	mov	fp, r3
 800756a:	f04f 0c00 	mov.w	ip, #0
 800756e:	46d9      	mov	r9, fp
 8007570:	46e2      	mov	sl, ip
 8007572:	eb19 0309 	adds.w	r3, r9, r9
 8007576:	eb4a 040a 	adc.w	r4, sl, sl
 800757a:	4699      	mov	r9, r3
 800757c:	46a2      	mov	sl, r4
 800757e:	eb19 090b 	adds.w	r9, r9, fp
 8007582:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007586:	f04f 0100 	mov.w	r1, #0
 800758a:	f04f 0200 	mov.w	r2, #0
 800758e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007592:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007596:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800759a:	4689      	mov	r9, r1
 800759c:	4692      	mov	sl, r2
 800759e:	eb1b 0509 	adds.w	r5, fp, r9
 80075a2:	eb4c 060a 	adc.w	r6, ip, sl
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	4619      	mov	r1, r3
 80075ac:	f04f 0200 	mov.w	r2, #0
 80075b0:	f04f 0300 	mov.w	r3, #0
 80075b4:	f04f 0400 	mov.w	r4, #0
 80075b8:	0094      	lsls	r4, r2, #2
 80075ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075be:	008b      	lsls	r3, r1, #2
 80075c0:	461a      	mov	r2, r3
 80075c2:	4623      	mov	r3, r4
 80075c4:	4628      	mov	r0, r5
 80075c6:	4631      	mov	r1, r6
 80075c8:	f7f9 fb48 	bl	8000c5c <__aeabi_uldivmod>
 80075cc:	4603      	mov	r3, r0
 80075ce:	460c      	mov	r4, r1
 80075d0:	461a      	mov	r2, r3
 80075d2:	4b77      	ldr	r3, [pc, #476]	; (80077b0 <UART_SetConfig+0x6f4>)
 80075d4:	fba3 1302 	umull	r1, r3, r3, r2
 80075d8:	095b      	lsrs	r3, r3, #5
 80075da:	2164      	movs	r1, #100	; 0x64
 80075dc:	fb01 f303 	mul.w	r3, r1, r3
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	3332      	adds	r3, #50	; 0x32
 80075e6:	4a72      	ldr	r2, [pc, #456]	; (80077b0 <UART_SetConfig+0x6f4>)
 80075e8:	fba2 2303 	umull	r2, r3, r2, r3
 80075ec:	095b      	lsrs	r3, r3, #5
 80075ee:	f003 020f 	and.w	r2, r3, #15
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4442      	add	r2, r8
 80075f8:	609a      	str	r2, [r3, #8]
 80075fa:	e0d0      	b.n	800779e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80075fc:	f7fd f89a 	bl	8004734 <HAL_RCC_GetPCLK1Freq>
 8007600:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	469a      	mov	sl, r3
 8007606:	f04f 0b00 	mov.w	fp, #0
 800760a:	46d0      	mov	r8, sl
 800760c:	46d9      	mov	r9, fp
 800760e:	eb18 0308 	adds.w	r3, r8, r8
 8007612:	eb49 0409 	adc.w	r4, r9, r9
 8007616:	4698      	mov	r8, r3
 8007618:	46a1      	mov	r9, r4
 800761a:	eb18 080a 	adds.w	r8, r8, sl
 800761e:	eb49 090b 	adc.w	r9, r9, fp
 8007622:	f04f 0100 	mov.w	r1, #0
 8007626:	f04f 0200 	mov.w	r2, #0
 800762a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800762e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007632:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007636:	4688      	mov	r8, r1
 8007638:	4691      	mov	r9, r2
 800763a:	eb1a 0508 	adds.w	r5, sl, r8
 800763e:	eb4b 0609 	adc.w	r6, fp, r9
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	4619      	mov	r1, r3
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	f04f 0300 	mov.w	r3, #0
 8007650:	f04f 0400 	mov.w	r4, #0
 8007654:	0094      	lsls	r4, r2, #2
 8007656:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800765a:	008b      	lsls	r3, r1, #2
 800765c:	461a      	mov	r2, r3
 800765e:	4623      	mov	r3, r4
 8007660:	4628      	mov	r0, r5
 8007662:	4631      	mov	r1, r6
 8007664:	f7f9 fafa 	bl	8000c5c <__aeabi_uldivmod>
 8007668:	4603      	mov	r3, r0
 800766a:	460c      	mov	r4, r1
 800766c:	461a      	mov	r2, r3
 800766e:	4b50      	ldr	r3, [pc, #320]	; (80077b0 <UART_SetConfig+0x6f4>)
 8007670:	fba3 2302 	umull	r2, r3, r3, r2
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	469b      	mov	fp, r3
 800767e:	f04f 0c00 	mov.w	ip, #0
 8007682:	46d9      	mov	r9, fp
 8007684:	46e2      	mov	sl, ip
 8007686:	eb19 0309 	adds.w	r3, r9, r9
 800768a:	eb4a 040a 	adc.w	r4, sl, sl
 800768e:	4699      	mov	r9, r3
 8007690:	46a2      	mov	sl, r4
 8007692:	eb19 090b 	adds.w	r9, r9, fp
 8007696:	eb4a 0a0c 	adc.w	sl, sl, ip
 800769a:	f04f 0100 	mov.w	r1, #0
 800769e:	f04f 0200 	mov.w	r2, #0
 80076a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076ae:	4689      	mov	r9, r1
 80076b0:	4692      	mov	sl, r2
 80076b2:	eb1b 0509 	adds.w	r5, fp, r9
 80076b6:	eb4c 060a 	adc.w	r6, ip, sl
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	4619      	mov	r1, r3
 80076c0:	f04f 0200 	mov.w	r2, #0
 80076c4:	f04f 0300 	mov.w	r3, #0
 80076c8:	f04f 0400 	mov.w	r4, #0
 80076cc:	0094      	lsls	r4, r2, #2
 80076ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076d2:	008b      	lsls	r3, r1, #2
 80076d4:	461a      	mov	r2, r3
 80076d6:	4623      	mov	r3, r4
 80076d8:	4628      	mov	r0, r5
 80076da:	4631      	mov	r1, r6
 80076dc:	f7f9 fabe 	bl	8000c5c <__aeabi_uldivmod>
 80076e0:	4603      	mov	r3, r0
 80076e2:	460c      	mov	r4, r1
 80076e4:	461a      	mov	r2, r3
 80076e6:	4b32      	ldr	r3, [pc, #200]	; (80077b0 <UART_SetConfig+0x6f4>)
 80076e8:	fba3 1302 	umull	r1, r3, r3, r2
 80076ec:	095b      	lsrs	r3, r3, #5
 80076ee:	2164      	movs	r1, #100	; 0x64
 80076f0:	fb01 f303 	mul.w	r3, r1, r3
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	011b      	lsls	r3, r3, #4
 80076f8:	3332      	adds	r3, #50	; 0x32
 80076fa:	4a2d      	ldr	r2, [pc, #180]	; (80077b0 <UART_SetConfig+0x6f4>)
 80076fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007700:	095b      	lsrs	r3, r3, #5
 8007702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007706:	4498      	add	r8, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	469b      	mov	fp, r3
 800770c:	f04f 0c00 	mov.w	ip, #0
 8007710:	46d9      	mov	r9, fp
 8007712:	46e2      	mov	sl, ip
 8007714:	eb19 0309 	adds.w	r3, r9, r9
 8007718:	eb4a 040a 	adc.w	r4, sl, sl
 800771c:	4699      	mov	r9, r3
 800771e:	46a2      	mov	sl, r4
 8007720:	eb19 090b 	adds.w	r9, r9, fp
 8007724:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007728:	f04f 0100 	mov.w	r1, #0
 800772c:	f04f 0200 	mov.w	r2, #0
 8007730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007734:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007738:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800773c:	4689      	mov	r9, r1
 800773e:	4692      	mov	sl, r2
 8007740:	eb1b 0509 	adds.w	r5, fp, r9
 8007744:	eb4c 060a 	adc.w	r6, ip, sl
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	4619      	mov	r1, r3
 800774e:	f04f 0200 	mov.w	r2, #0
 8007752:	f04f 0300 	mov.w	r3, #0
 8007756:	f04f 0400 	mov.w	r4, #0
 800775a:	0094      	lsls	r4, r2, #2
 800775c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007760:	008b      	lsls	r3, r1, #2
 8007762:	461a      	mov	r2, r3
 8007764:	4623      	mov	r3, r4
 8007766:	4628      	mov	r0, r5
 8007768:	4631      	mov	r1, r6
 800776a:	f7f9 fa77 	bl	8000c5c <__aeabi_uldivmod>
 800776e:	4603      	mov	r3, r0
 8007770:	460c      	mov	r4, r1
 8007772:	461a      	mov	r2, r3
 8007774:	4b0e      	ldr	r3, [pc, #56]	; (80077b0 <UART_SetConfig+0x6f4>)
 8007776:	fba3 1302 	umull	r1, r3, r3, r2
 800777a:	095b      	lsrs	r3, r3, #5
 800777c:	2164      	movs	r1, #100	; 0x64
 800777e:	fb01 f303 	mul.w	r3, r1, r3
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	011b      	lsls	r3, r3, #4
 8007786:	3332      	adds	r3, #50	; 0x32
 8007788:	4a09      	ldr	r2, [pc, #36]	; (80077b0 <UART_SetConfig+0x6f4>)
 800778a:	fba2 2303 	umull	r2, r3, r2, r3
 800778e:	095b      	lsrs	r3, r3, #5
 8007790:	f003 020f 	and.w	r2, r3, #15
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4442      	add	r2, r8
 800779a:	609a      	str	r2, [r3, #8]
}
 800779c:	e7ff      	b.n	800779e <UART_SetConfig+0x6e2>
 800779e:	bf00      	nop
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a8:	40011000 	.word	0x40011000
 80077ac:	40011400 	.word	0x40011400
 80077b0:	51eb851f 	.word	0x51eb851f
 80077b4:	00000000 	.word	0x00000000

080077b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80077b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ba:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 80077be:	af1a      	add	r7, sp, #104	; 0x68
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80077c0:	f7f9 fbcc 	bl	8000f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80077c4:	f000 fc28 	bl	8008018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80077c8:	f001 fb14 	bl	8008df4 <MX_GPIO_Init>
  MX_DMA_Init();
 80077cc:	f001 facc 	bl	8008d68 <MX_DMA_Init>
  MX_TIM9_Init();
 80077d0:	f001 f988 	bl	8008ae4 <MX_TIM9_Init>
  MX_SPI2_Init();
 80077d4:	f000 ffb2 	bl	800873c <MX_SPI2_Init>
  MX_ADC1_Init();
 80077d8:	f000 fc86 	bl	80080e8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80077dc:	f000 fd62 	bl	80082a4 <MX_ADC2_Init>
  MX_CAN1_Init();
 80077e0:	f000 ff1c 	bl	800861c <MX_CAN1_Init>
  MX_I2C1_Init();
 80077e4:	f000 ff4e 	bl	8008684 <MX_I2C1_Init>
  MX_I2C2_Init();
 80077e8:	f000 ff7a 	bl	80086e0 <MX_I2C2_Init>
  MX_TIM1_Init();
 80077ec:	f000 ffde 	bl	80087ac <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80077f0:	f001 fa90 	bl	8008d14 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 80077f4:	f001 f91e 	bl	8008a34 <MX_TIM8_Init>
  MX_TIM13_Init();
 80077f8:	f001 fa46 	bl	8008c88 <MX_TIM13_Init>
  MX_TIM12_Init();
 80077fc:	f001 f9e4 	bl	8008bc8 <MX_TIM12_Init>
  MX_TIM2_Init();
 8007800:	f001 f8a6 	bl	8008950 <MX_TIM2_Init>
  MX_ADC3_Init();
 8007804:	f000 fe2c 	bl	8008460 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  calc_lookup(lookup);
 8007808:	485d      	ldr	r0, [pc, #372]	; (8007980 <main+0x1c8>)
 800780a:	f001 fe2d 	bl	8009468 <calc_lookup>

	uint8_t buf[300];
	//uint8_t plot[300];

	char ch='q';
 800780e:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8007812:	2271      	movs	r2, #113	; 0x71
 8007814:	701a      	strb	r2, [r3, #0]
	int16_t accel16;
	uint8_t accel8l;
	uint8_t accel8h;

  // --- SET STATUS LEDS
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8007816:	2100      	movs	r1, #0
 8007818:	485a      	ldr	r0, [pc, #360]	; (8007984 <main+0x1cc>)
 800781a:	f7fd fefb 	bl	8005614 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2);
 800781e:	2104      	movs	r1, #4
 8007820:	4858      	ldr	r0, [pc, #352]	; (8007984 <main+0x1cc>)
 8007822:	f7fd fe83 	bl	800552c <HAL_TIM_OC_Start>

  HAL_TIM_OC_Start(&htim12, TIM_CHANNEL_1);
 8007826:	2100      	movs	r1, #0
 8007828:	4857      	ldr	r0, [pc, #348]	; (8007988 <main+0x1d0>)
 800782a:	f7fd fe7f 	bl	800552c <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 800782e:	2100      	movs	r1, #0
 8007830:	4856      	ldr	r0, [pc, #344]	; (800798c <main+0x1d4>)
 8007832:	f7fd fe7b 	bl	800552c <HAL_TIM_OC_Start>

  // --- ENABLE DRV
  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 8007836:	2201      	movs	r2, #1
 8007838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800783c:	4854      	ldr	r0, [pc, #336]	; (8007990 <main+0x1d8>)
 800783e:	f7fb fb6b 	bl	8002f18 <HAL_GPIO_WritePin>


  SCB->CPACR |= 0xf00000;
 8007842:	4b54      	ldr	r3, [pc, #336]	; (8007994 <main+0x1dc>)
 8007844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007848:	4a52      	ldr	r2, [pc, #328]	; (8007994 <main+0x1dc>)
 800784a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800784e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  int i=0;
 8007852:	2300      	movs	r3, #0
 8007854:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	uint32_t i_fast = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	uint32_t i_slow = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	uint32_t fast2slow = 100;
 8007864:	2364      	movs	r3, #100	; 0x64
 8007866:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

	int blink_duration = 100;
 800786a:	2364      	movs	r3, #100	; 0x64
 800786c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  //  HAL_Delay(2);


	// --- MOTOR DRIVER ----------------------------------------------------
	//EN_GATE
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8007870:	2100      	movs	r1, #0
 8007872:	4849      	ldr	r0, [pc, #292]	; (8007998 <main+0x1e0>)
 8007874:	f7fd fece 	bl	8005614 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8007878:	2100      	movs	r1, #0
 800787a:	4847      	ldr	r0, [pc, #284]	; (8007998 <main+0x1e0>)
 800787c:	f7ff f809 	bl	8006892 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8007880:	2104      	movs	r1, #4
 8007882:	4845      	ldr	r0, [pc, #276]	; (8007998 <main+0x1e0>)
 8007884:	f7fd fec6 	bl	8005614 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8007888:	2104      	movs	r1, #4
 800788a:	4843      	ldr	r0, [pc, #268]	; (8007998 <main+0x1e0>)
 800788c:	f7ff f801 	bl	8006892 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8007890:	2108      	movs	r1, #8
 8007892:	4841      	ldr	r0, [pc, #260]	; (8007998 <main+0x1e0>)
 8007894:	f7fd febe 	bl	8005614 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8007898:	2108      	movs	r1, #8
 800789a:	483f      	ldr	r0, [pc, #252]	; (8007998 <main+0x1e0>)
 800789c:	f7fe fff9 	bl	8006892 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 80078a0:	210c      	movs	r1, #12
 80078a2:	483d      	ldr	r0, [pc, #244]	; (8007998 <main+0x1e0>)
 80078a4:	f7fd fe42 	bl	800552c <HAL_TIM_OC_Start>

	playSound( 3, 100, 20);
 80078a8:	2214      	movs	r2, #20
 80078aa:	2164      	movs	r1, #100	; 0x64
 80078ac:	2003      	movs	r0, #3
 80078ae:	f001 fb67 	bl	8008f80 <playSound>

	HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
 80078b2:	2201      	movs	r2, #1
 80078b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80078b8:	4835      	ldr	r0, [pc, #212]	; (8007990 <main+0x1d8>)
 80078ba:	f7fb fb2d 	bl	8002f18 <HAL_GPIO_WritePin>
	// --- I2C2 IMU ------------------------------------------------
	//see: https://www.youtube.com/watch?v=isOekyygpR8
	//b1101000
	char accel_char[20];

	buf[0] = 0x6B; //power register
 80078be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80078c2:	226b      	movs	r2, #107	; 0x6b
 80078c4:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x00; //switch on
 80078c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80078ca:	2200      	movs	r2, #0
 80078cc:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 2, HAL_MAX_DELAY);
 80078ce:	23d0      	movs	r3, #208	; 0xd0
 80078d0:	b299      	uxth	r1, r3
 80078d2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80078d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	2302      	movs	r3, #2
 80078de:	482f      	ldr	r0, [pc, #188]	; (800799c <main+0x1e4>)
 80078e0:	f7fb fc9e 	bl	8003220 <HAL_I2C_Master_Transmit>
 80078e4:	4603      	mov	r3, r0
 80078e6:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
	if (ret != HAL_OK){
 80078ea:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d008      	beq.n	8007904 <main+0x14c>
		strcpy((char*)buf, "Error IMU T\r\n");
 80078f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80078f6:	4a2a      	ldr	r2, [pc, #168]	; (80079a0 <main+0x1e8>)
 80078f8:	461c      	mov	r4, r3
 80078fa:	4613      	mov	r3, r2
 80078fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078fe:	c407      	stmia	r4!, {r0, r1, r2}
 8007900:	8023      	strh	r3, [r4, #0]
 8007902:	e003      	b.n	800790c <main+0x154>
	} else {
		buf[0] = 0x00;
 8007904:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007908:	2200      	movs	r2, #0
 800790a:	701a      	strb	r2, [r3, #0]
	}

	buf[0] = 0x3B;
 800790c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007910:	223b      	movs	r2, #59	; 0x3b
 8007912:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8007914:	23d0      	movs	r3, #208	; 0xd0
 8007916:	b299      	uxth	r1, r3
 8007918:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800791c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	2301      	movs	r3, #1
 8007924:	481d      	ldr	r0, [pc, #116]	; (800799c <main+0x1e4>)
 8007926:	f7fb fc7b 	bl	8003220 <HAL_I2C_Master_Transmit>
 800792a:	4603      	mov	r3, r0
 800792c:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
	if (ret != HAL_OK){
 8007930:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8007934:	2b00      	cmp	r3, #0
 8007936:	d008      	beq.n	800794a <main+0x192>
		strcpy((char*)buf, "Error IMU T\r\n");
 8007938:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800793c:	4a18      	ldr	r2, [pc, #96]	; (80079a0 <main+0x1e8>)
 800793e:	461c      	mov	r4, r3
 8007940:	4613      	mov	r3, r2
 8007942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007944:	c407      	stmia	r4!, {r0, r1, r2}
 8007946:	8023      	strh	r3, [r4, #0]
 8007948:	e03b      	b.n	80079c2 <main+0x20a>
	} else {
		ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 800794a:	23d0      	movs	r3, #208	; 0xd0
 800794c:	b299      	uxth	r1, r3
 800794e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	2301      	movs	r3, #1
 800795a:	4810      	ldr	r0, [pc, #64]	; (800799c <main+0x1e4>)
 800795c:	f7fb fd5e 	bl	800341c <HAL_I2C_Master_Receive>
 8007960:	4603      	mov	r3, r0
 8007962:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
		if (ret != HAL_OK){
 8007966:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d01c      	beq.n	80079a8 <main+0x1f0>
			strcpy((char*)buf, "Error IMU R\r\n");
 800796e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007972:	4a0c      	ldr	r2, [pc, #48]	; (80079a4 <main+0x1ec>)
 8007974:	461c      	mov	r4, r3
 8007976:	4613      	mov	r3, r2
 8007978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800797a:	c407      	stmia	r4!, {r0, r1, r2}
 800797c:	8023      	strh	r3, [r4, #0]
 800797e:	e020      	b.n	80079c2 <main+0x20a>
 8007980:	20000138 	.word	0x20000138
 8007984:	200008a0 	.word	0x200008a0
 8007988:	200009e4 	.word	0x200009e4
 800798c:	2000091c 	.word	0x2000091c
 8007990:	40021000 	.word	0x40021000
 8007994:	e000ed00 	.word	0xe000ed00
 8007998:	20000824 	.word	0x20000824
 800799c:	2000059c 	.word	0x2000059c
 80079a0:	0800bb80 	.word	0x0800bb80
 80079a4:	0800bb90 	.word	0x0800bb90
		} else {
			accel8l = (int8_t)buf[0];
 80079a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
			sprintf((char*)accel_char, "%u m\r\n", (int)accel8l);
 80079b2:	f897 21b2 	ldrb.w	r2, [r7, #434]	; 0x1b2
 80079b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80079ba:	49cb      	ldr	r1, [pc, #812]	; (8007ce8 <main+0x530>)
 80079bc:	4618      	mov	r0, r3
 80079be:	f002 fcbb 	bl	800a338 <siprintf>
  //					}
  //
  //				}

	// --- TIMERS ----------------------------------------------------
	TIM9->CCR1 = blink_duration;
 80079c2:	4aca      	ldr	r2, [pc, #808]	; (8007cec <main+0x534>)
 80079c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80079c8:	6353      	str	r3, [r2, #52]	; 0x34
	TIM9->CCR2 = blink_duration;
 80079ca:	4ac8      	ldr	r2, [pc, #800]	; (8007cec <main+0x534>)
 80079cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80079d0:	6393      	str	r3, [r2, #56]	; 0x38

	// --- GPIO ----------------------------------------------------

	GPIOE->BSRR = GPIO_PIN_4; //switches LD2
 80079d2:	4bc7      	ldr	r3, [pc, #796]	; (8007cf0 <main+0x538>)
 80079d4:	2210      	movs	r2, #16
 80079d6:	619a      	str	r2, [r3, #24]




	playSound( 2, 100, 40);
 80079d8:	2228      	movs	r2, #40	; 0x28
 80079da:	2164      	movs	r1, #100	; 0x64
 80079dc:	2002      	movs	r0, #2
 80079de:	f001 facf 	bl	8008f80 <playSound>
	playSound( 1, 100, 80);
 80079e2:	2250      	movs	r2, #80	; 0x50
 80079e4:	2164      	movs	r1, #100	; 0x64
 80079e6:	2001      	movs	r0, #1
 80079e8:	f001 faca 	bl	8008f80 <playSound>
	HAL_Delay(100); // So the system stops vibrating
 80079ec:	2064      	movs	r0, #100	; 0x64
 80079ee:	f7f9 fb27 	bl	8001040 <HAL_Delay>




	// --- ROTATION SENSOR INIT ----------------------------------------------------
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL );
 80079f2:	213c      	movs	r1, #60	; 0x3c
 80079f4:	48bf      	ldr	r0, [pc, #764]	; (8007cf4 <main+0x53c>)
 80079f6:	f7fd ff12 	bl	800581e <HAL_TIM_Encoder_Start_IT>

	// --- ROTATION SENSOR SETTINGS ----------------------------------------------------

	//ROT0_nCS_GPIO_Port->BSRR = (uint32_t)ROT0_nCS_Pin << 16U;

	uint16_t address = 0x0000;
 80079fa:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80079fe:	2200      	movs	r2, #0
 8007a00:	801a      	strh	r2, [r3, #0]
	uint16_t value = 0x0000;
 8007a02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a06:	2200      	movs	r2, #0
 8007a08:	801a      	strh	r2, [r3, #0]

	// --- set ABI and enable PWM
	//TODO: Error handling
	address = AS_ADDR_SETTINGS1 | AS_WRITE ;
 8007a0a:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8007a0e:	2218      	movs	r2, #24
 8007a10:	801a      	strh	r2, [r3, #0]
	value = 0x0080 | AS_ODD;
 8007a12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a16:	f248 0280 	movw	r2, #32896	; 0x8080
 8007a1a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a22:	48b5      	ldr	r0, [pc, #724]	; (8007cf8 <main+0x540>)
 8007a24:	f7fb fa78 	bl	8002f18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);
 8007a28:	f107 0132 	add.w	r1, r7, #50	; 0x32
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	2201      	movs	r2, #1
 8007a30:	48b2      	ldr	r0, [pc, #712]	; (8007cfc <main+0x544>)
 8007a32:	f7fc ff0b 	bl	800484c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8007a36:	2201      	movs	r2, #1
 8007a38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a3c:	48ae      	ldr	r0, [pc, #696]	; (8007cf8 <main+0x540>)
 8007a3e:	f7fb fa6b 	bl	8002f18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8007a42:	2200      	movs	r2, #0
 8007a44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a48:	48ab      	ldr	r0, [pc, #684]	; (8007cf8 <main+0x540>)
 8007a4a:	f7fb fa65 	bl	8002f18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&value, 1, 1);
 8007a4e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007a52:	2301      	movs	r3, #1
 8007a54:	2201      	movs	r2, #1
 8007a56:	48a9      	ldr	r0, [pc, #676]	; (8007cfc <main+0x544>)
 8007a58:	f7fc fef8 	bl	800484c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a62:	48a5      	ldr	r0, [pc, #660]	; (8007cf8 <main+0x540>)
 8007a64:	f7fb fa58 	bl	8002f18 <HAL_GPIO_WritePin>

	// --- set steps 2000steps 500 pulses
	address = AS_ADDR_SETTINGS2 | AS_WRITE ;
 8007a68:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8007a6c:	f248 0219 	movw	r2, #32793	; 0x8019
 8007a70:	801a      	strh	r2, [r3, #0]
	value = 0x0020 | AS_ODD;
 8007a72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a76:	f248 0220 	movw	r2, #32800	; 0x8020
 8007a7a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a82:	489d      	ldr	r0, [pc, #628]	; (8007cf8 <main+0x540>)
 8007a84:	f7fb fa48 	bl	8002f18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);
 8007a88:	f107 0132 	add.w	r1, r7, #50	; 0x32
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	2201      	movs	r2, #1
 8007a90:	489a      	ldr	r0, [pc, #616]	; (8007cfc <main+0x544>)
 8007a92:	f7fc fedb 	bl	800484c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8007a96:	2201      	movs	r2, #1
 8007a98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a9c:	4896      	ldr	r0, [pc, #600]	; (8007cf8 <main+0x540>)
 8007a9e:	f7fb fa3b 	bl	8002f18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007aa8:	4893      	ldr	r0, [pc, #588]	; (8007cf8 <main+0x540>)
 8007aaa:	f7fb fa35 	bl	8002f18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&value, 1, 1);
 8007aae:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	4891      	ldr	r0, [pc, #580]	; (8007cfc <main+0x544>)
 8007ab8:	f7fc fec8 	bl	800484c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8007abc:	2201      	movs	r2, #1
 8007abe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ac2:	488d      	ldr	r0, [pc, #564]	; (8007cf8 <main+0x540>)
 8007ac4:	f7fb fa28 	bl	8002f18 <HAL_GPIO_WritePin>

	// --- read angle
	address = 0x3FFE | AS_READ ;
 8007ac8:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8007acc:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007ad0:	801a      	strh	r2, [r3, #0]
	uint16_t angle = 0x0000;
 8007ad2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8007ada:	2200      	movs	r2, #0
 8007adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ae0:	4885      	ldr	r0, [pc, #532]	; (8007cf8 <main+0x540>)
 8007ae2:	f7fb fa19 	bl	8002f18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);//this is the value
 8007ae6:	f107 0132 	add.w	r1, r7, #50	; 0x32
 8007aea:	2301      	movs	r3, #1
 8007aec:	2201      	movs	r2, #1
 8007aee:	4883      	ldr	r0, [pc, #524]	; (8007cfc <main+0x544>)
 8007af0:	f7fc feac 	bl	800484c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8007af4:	2201      	movs	r2, #1
 8007af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007afa:	487f      	ldr	r0, [pc, #508]	; (8007cf8 <main+0x540>)
 8007afc:	f7fb fa0c 	bl	8002f18 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8007b00:	2200      	movs	r2, #0
 8007b02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b06:	487c      	ldr	r0, [pc, #496]	; (8007cf8 <main+0x540>)
 8007b08:	f7fb fa06 	bl	8002f18 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, (uint16_t *)&angle, 1, 1);
 8007b0c:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8007b10:	2301      	movs	r3, #1
 8007b12:	2201      	movs	r2, #1
 8007b14:	4879      	ldr	r0, [pc, #484]	; (8007cfc <main+0x544>)
 8007b16:	f7fc ffcd 	bl	8004ab4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b20:	4875      	ldr	r0, [pc, #468]	; (8007cf8 <main+0x540>)
 8007b22:	f7fb f9f9 	bl	8002f18 <HAL_GPIO_WritePin>


	// --- ROTATION SENSOR 0 POINT SETTING ----------------------------------------------------
	angle &= AS_DATA_MASK;
 8007b26:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8007b36:	801a      	strh	r2, [r3, #0]
	EncVal = (uint16_t) ((float)angle /16384.0 * 2000.0);
 8007b38:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b46:	ee17 0a90 	vmov	r0, s15
 8007b4a:	f7f8 fcfd 	bl	8000548 <__aeabi_f2d>
 8007b4e:	f04f 0200 	mov.w	r2, #0
 8007b52:	4b6b      	ldr	r3, [pc, #428]	; (8007d00 <main+0x548>)
 8007b54:	f7f8 fe7a 	bl	800084c <__aeabi_ddiv>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	4621      	mov	r1, r4
 8007b60:	f04f 0200 	mov.w	r2, #0
 8007b64:	4b67      	ldr	r3, [pc, #412]	; (8007d04 <main+0x54c>)
 8007b66:	f7f8 fd47 	bl	80005f8 <__aeabi_dmul>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	4618      	mov	r0, r3
 8007b70:	4621      	mov	r1, r4
 8007b72:	f7f9 f803 	bl	8000b7c <__aeabi_d2uiz>
 8007b76:	4603      	mov	r3, r0
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	b21a      	sxth	r2, r3
 8007b7c:	4b62      	ldr	r3, [pc, #392]	; (8007d08 <main+0x550>)
 8007b7e:	801a      	strh	r2, [r3, #0]
	last_EncVal = EncVal;
 8007b80:	4b61      	ldr	r3, [pc, #388]	; (8007d08 <main+0x550>)
 8007b82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007b86:	4b61      	ldr	r3, [pc, #388]	; (8007d0c <main+0x554>)
 8007b88:	801a      	strh	r2, [r3, #0]
	TIM8->CNT = EncVal;
 8007b8a:	4b5f      	ldr	r3, [pc, #380]	; (8007d08 <main+0x550>)
 8007b8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007b90:	4b5f      	ldr	r3, [pc, #380]	; (8007d10 <main+0x558>)
 8007b92:	625a      	str	r2, [r3, #36]	; 0x24
//	EncVal = TIM8->CNT;//takes 200ns
//	TIM1->CCR1 = 0;
//	phase = (float) EncVal * 0.02199 ;

	// --- UART DMA
	HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMAUSARTTransferComplete);
 8007b94:	4a5f      	ldr	r2, [pc, #380]	; (8007d14 <main+0x55c>)
 8007b96:	2100      	movs	r1, #0
 8007b98:	485f      	ldr	r0, [pc, #380]	; (8007d18 <main+0x560>)
 8007b9a:	f7fa fef1 	bl	8002980 <HAL_DMA_RegisterCallback>

	// --- ADC DMA
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, 30); // this is the only one working // the length must be multiple of channels otherwise I observed mess in order - even like 2 of one and lots of mess
 8007b9e:	221e      	movs	r2, #30
 8007ba0:	495e      	ldr	r1, [pc, #376]	; (8007d1c <main+0x564>)
 8007ba2:	485f      	ldr	r0, [pc, #380]	; (8007d20 <main+0x568>)
 8007ba4:	f7f9 fbf2 	bl	800138c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, 30); // TODO enabling this only leads to no change all values stay zero
 8007ba8:	221e      	movs	r2, #30
 8007baa:	495e      	ldr	r1, [pc, #376]	; (8007d24 <main+0x56c>)
 8007bac:	485e      	ldr	r0, [pc, #376]	; (8007d28 <main+0x570>)
 8007bae:	f7f9 fbed 	bl	800138c <HAL_ADC_Start_DMA>
 	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, 30); // TODO enabling this breaks transmission entirely
 8007bb2:	221e      	movs	r2, #30
 8007bb4:	495d      	ldr	r1, [pc, #372]	; (8007d2c <main+0x574>)
 8007bb6:	485e      	ldr	r0, [pc, #376]	; (8007d30 <main+0x578>)
 8007bb8:	f7f9 fbe8 	bl	800138c <HAL_ADC_Start_DMA>


	HAL_ADCEx_InjectedStart (&hadc1);
 8007bbc:	4858      	ldr	r0, [pc, #352]	; (8007d20 <main+0x568>)
 8007bbe:	f7f9 ff8b 	bl	8001ad8 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc2);
 8007bc2:	4859      	ldr	r0, [pc, #356]	; (8007d28 <main+0x570>)
 8007bc4:	f7f9 ff88 	bl	8001ad8 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc3); // again this seems to break  the full loop
 8007bc8:	4859      	ldr	r0, [pc, #356]	; (8007d30 <main+0x578>)
 8007bca:	f7f9 ff85 	bl	8001ad8 <HAL_ADCEx_InjectedStart>
		// -------------------------------------------------------------
  	//HAL_Delay(1);
  	//debug2_out_GPIO_Port->BSRR = debug2_out_Pin; //takes 60ns == 5 clock cycles
  	//debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin << 16U;

  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8007bce:	4b4a      	ldr	r3, [pc, #296]	; (8007cf8 <main+0x540>)
 8007bd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007bd4:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8007bd6:	4b48      	ldr	r3, [pc, #288]	; (8007cf8 <main+0x540>)
 8007bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bdc:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8007bde:	4b46      	ldr	r3, [pc, #280]	; (8007cf8 <main+0x540>)
 8007be0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007be4:	619a      	str	r2, [r3, #24]
		debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8007be6:	4b44      	ldr	r3, [pc, #272]	; (8007cf8 <main+0x540>)
 8007be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bec:	619a      	str	r2, [r3, #24]

	  // -------------------------------------------------------------
	  // --- SLOW PROCESS ----------------------------------------------------
	  // -------------------------------------------------------------

	  if (i_fast%fast2slow == 0){
 8007bee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007bf2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007bf6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007bfa:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8007bfe:	fb01 f202 	mul.w	r2, r1, r2
 8007c02:	1a9b      	subs	r3, r3, r2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f040 81d3 	bne.w	8007fb0 <main+0x7f8>

	  	// --- GPIO ----------------------------------------------------
	  	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8007c0a:	2110      	movs	r1, #16
 8007c0c:	4838      	ldr	r0, [pc, #224]	; (8007cf0 <main+0x538>)
 8007c0e:	f7fb f99c 	bl	8002f4a <HAL_GPIO_TogglePin>

			// --- UART ----------------------------------------------------


			HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 8007c12:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8007c16:	2201      	movs	r2, #1
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4846      	ldr	r0, [pc, #280]	; (8007d34 <main+0x57c>)
 8007c1c:	f7fe ffb8 	bl	8006b90 <HAL_UART_Receive_IT>


			switch(ch){
 8007c20:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	3b61      	subs	r3, #97	; 0x61
 8007c28:	2b16      	cmp	r3, #22
 8007c2a:	f200 80e2 	bhi.w	8007df2 <main+0x63a>
 8007c2e:	a201      	add	r2, pc, #4	; (adr r2, 8007c34 <main+0x47c>)
 8007c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c34:	08007cb9 	.word	0x08007cb9
 8007c38:	08007df3 	.word	0x08007df3
 8007c3c:	08007df3 	.word	0x08007df3
 8007c40:	08007d41 	.word	0x08007d41
 8007c44:	08007df3 	.word	0x08007df3
 8007c48:	08007d81 	.word	0x08007d81
 8007c4c:	08007d71 	.word	0x08007d71
 8007c50:	08007d79 	.word	0x08007d79
 8007c54:	08007df3 	.word	0x08007df3
 8007c58:	08007dcb 	.word	0x08007dcb
 8007c5c:	08007df3 	.word	0x08007df3
 8007c60:	08007df3 	.word	0x08007df3
 8007c64:	08007df3 	.word	0x08007df3
 8007c68:	08007df3 	.word	0x08007df3
 8007c6c:	08007df3 	.word	0x08007df3
 8007c70:	08007d97 	.word	0x08007d97
 8007c74:	08007df3 	.word	0x08007df3
 8007c78:	08007d8b 	.word	0x08007d8b
 8007c7c:	08007ca3 	.word	0x08007ca3
 8007c80:	08007d69 	.word	0x08007d69
 8007c84:	08007da3 	.word	0x08007da3
 8007c88:	08007df3 	.word	0x08007df3
 8007c8c:	08007c91 	.word	0x08007c91
				case 'w':
					amp *= 2;
 8007c90:	4b29      	ldr	r3, [pc, #164]	; (8007d38 <main+0x580>)
 8007c92:	edd3 7a00 	vldr	s15, [r3]
 8007c96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007c9a:	4b27      	ldr	r3, [pc, #156]	; (8007d38 <main+0x580>)
 8007c9c:	edc3 7a00 	vstr	s15, [r3]
					break;
 8007ca0:	e0ab      	b.n	8007dfa <main+0x642>
				case 's':
					amp /= 2;
 8007ca2:	4b25      	ldr	r3, [pc, #148]	; (8007d38 <main+0x580>)
 8007ca4:	ed93 7a00 	vldr	s14, [r3]
 8007ca8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007cac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007cb0:	4b21      	ldr	r3, [pc, #132]	; (8007d38 <main+0x580>)
 8007cb2:	edc3 7a00 	vstr	s15, [r3]
					break;
 8007cb6:	e0a0      	b.n	8007dfa <main+0x642>
				case 'a':
					phase_shift += 0.05;
 8007cb8:	4b20      	ldr	r3, [pc, #128]	; (8007d3c <main+0x584>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7f8 fc43 	bl	8000548 <__aeabi_f2d>
 8007cc2:	a307      	add	r3, pc, #28	; (adr r3, 8007ce0 <main+0x528>)
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f7f8 fae0 	bl	800028c <__adddf3>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	460c      	mov	r4, r1
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	f7f8 ff72 	bl	8000bbc <__aeabi_d2f>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	4b18      	ldr	r3, [pc, #96]	; (8007d3c <main+0x584>)
 8007cdc:	601a      	str	r2, [r3, #0]
					break;
 8007cde:	e08c      	b.n	8007dfa <main+0x642>
 8007ce0:	9999999a 	.word	0x9999999a
 8007ce4:	3fa99999 	.word	0x3fa99999
 8007ce8:	0800bba0 	.word	0x0800bba0
 8007cec:	40014000 	.word	0x40014000
 8007cf0:	40021000 	.word	0x40021000
 8007cf4:	20000480 	.word	0x20000480
 8007cf8:	40020c00 	.word	0x40020c00
 8007cfc:	200000e0 	.word	0x200000e0
 8007d00:	40d00000 	.word	0x40d00000
 8007d04:	409f4000 	.word	0x409f4000
 8007d08:	200007c0 	.word	0x200007c0
 8007d0c:	200005f0 	.word	0x200005f0
 8007d10:	40010400 	.word	0x40010400
 8007d14:	08009535 	.word	0x08009535
 8007d18:	20000654 	.word	0x20000654
 8007d1c:	200006b4 	.word	0x200006b4
 8007d20:	200006f0 	.word	0x200006f0
 8007d24:	200008e0 	.word	0x200008e0
 8007d28:	20000500 	.word	0x20000500
 8007d2c:	20000864 	.word	0x20000864
 8007d30:	20000738 	.word	0x20000738
 8007d34:	200004c0 	.word	0x200004c0
 8007d38:	20000010 	.word	0x20000010
 8007d3c:	2000001c 	.word	0x2000001c
				case 'd':
					phase_shift -= 0.05;
 8007d40:	4ba5      	ldr	r3, [pc, #660]	; (8007fd8 <main+0x820>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7f8 fbff 	bl	8000548 <__aeabi_f2d>
 8007d4a:	a39f      	add	r3, pc, #636	; (adr r3, 8007fc8 <main+0x810>)
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	f7f8 fa9a 	bl	8000288 <__aeabi_dsub>
 8007d54:	4603      	mov	r3, r0
 8007d56:	460c      	mov	r4, r1
 8007d58:	4618      	mov	r0, r3
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	f7f8 ff2e 	bl	8000bbc <__aeabi_d2f>
 8007d60:	4602      	mov	r2, r0
 8007d62:	4b9d      	ldr	r3, [pc, #628]	; (8007fd8 <main+0x820>)
 8007d64:	601a      	str	r2, [r3, #0]
					break;
 8007d66:	e048      	b.n	8007dfa <main+0x642>
				case 't':
					run_motor = 1;
 8007d68:	4b9c      	ldr	r3, [pc, #624]	; (8007fdc <main+0x824>)
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	601a      	str	r2, [r3, #0]
					break;
 8007d6e:	e044      	b.n	8007dfa <main+0x642>
				case 'g':
					run_motor = 0;
 8007d70:	4b9a      	ldr	r3, [pc, #616]	; (8007fdc <main+0x824>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	601a      	str	r2, [r3, #0]
					break;
 8007d76:	e040      	b.n	8007dfa <main+0x642>
				case 'h':
					direction = 1;
 8007d78:	4b99      	ldr	r3, [pc, #612]	; (8007fe0 <main+0x828>)
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	601a      	str	r2, [r3, #0]
					break;
 8007d7e:	e03c      	b.n	8007dfa <main+0x642>
				case 'f':
					direction = -1;
 8007d80:	4b97      	ldr	r3, [pc, #604]	; (8007fe0 <main+0x828>)
 8007d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d86:	601a      	str	r2, [r3, #0]
					break;
 8007d88:	e037      	b.n	8007dfa <main+0x642>
				case 'r':
					direction *= -1;
 8007d8a:	4b95      	ldr	r3, [pc, #596]	; (8007fe0 <main+0x828>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	425b      	negs	r3, r3
 8007d90:	4a93      	ldr	r2, [pc, #588]	; (8007fe0 <main+0x828>)
 8007d92:	6013      	str	r3, [r2, #0]
					break;
 8007d94:	e031      	b.n	8007dfa <main+0x642>
				case 'p':
					playSound( 1, 20, 100);
 8007d96:	2264      	movs	r2, #100	; 0x64
 8007d98:	2114      	movs	r1, #20
 8007d9a:	2001      	movs	r0, #1
 8007d9c:	f001 f8f0 	bl	8008f80 <playSound>
					break;
 8007da0:	e02b      	b.n	8007dfa <main+0x642>
				case 'u':
					stiffness += 0.001;
 8007da2:	4b90      	ldr	r3, [pc, #576]	; (8007fe4 <main+0x82c>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7f8 fbce 	bl	8000548 <__aeabi_f2d>
 8007dac:	a388      	add	r3, pc, #544	; (adr r3, 8007fd0 <main+0x818>)
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	f7f8 fa6b 	bl	800028c <__adddf3>
 8007db6:	4603      	mov	r3, r0
 8007db8:	460c      	mov	r4, r1
 8007dba:	4618      	mov	r0, r3
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	f7f8 fefd 	bl	8000bbc <__aeabi_d2f>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	4b87      	ldr	r3, [pc, #540]	; (8007fe4 <main+0x82c>)
 8007dc6:	601a      	str	r2, [r3, #0]
					break;
 8007dc8:	e017      	b.n	8007dfa <main+0x642>
				case 'j':
					stiffness -= 0.001;
 8007dca:	4b86      	ldr	r3, [pc, #536]	; (8007fe4 <main+0x82c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7f8 fbba 	bl	8000548 <__aeabi_f2d>
 8007dd4:	a37e      	add	r3, pc, #504	; (adr r3, 8007fd0 <main+0x818>)
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	f7f8 fa55 	bl	8000288 <__aeabi_dsub>
 8007dde:	4603      	mov	r3, r0
 8007de0:	460c      	mov	r4, r1
 8007de2:	4618      	mov	r0, r3
 8007de4:	4621      	mov	r1, r4
 8007de6:	f7f8 fee9 	bl	8000bbc <__aeabi_d2f>
 8007dea:	4602      	mov	r2, r0
 8007dec:	4b7d      	ldr	r3, [pc, #500]	; (8007fe4 <main+0x82c>)
 8007dee:	601a      	str	r2, [r3, #0]
					break;
 8007df0:	e003      	b.n	8007dfa <main+0x642>
				default:
					ch='q';
 8007df2:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8007df6:	2271      	movs	r2, #113	; 0x71
 8007df8:	701a      	strb	r2, [r3, #0]
			}

			//HAL_ADCEx_InjectedStart (&hadc1);
			//HAL_ADCEx_InjectedPollForConversion (&hadc1, 1);

			uint32_t val_I = HAL_ADCEx_InjectedGetValue (&hadc1, 1);
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	487a      	ldr	r0, [pc, #488]	; (8007fe8 <main+0x830>)
 8007dfe:	f7f9 ff29 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8007e02:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
			uint32_t val_ASENSE = HAL_ADCEx_InjectedGetValue (&hadc1, 2);
 8007e06:	2102      	movs	r1, #2
 8007e08:	4877      	ldr	r0, [pc, #476]	; (8007fe8 <main+0x830>)
 8007e0a:	f7f9 ff23 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8007e0e:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
			uint32_t val_STRAIN0 = HAL_ADCEx_InjectedGetValue (&hadc1, 3);
 8007e12:	2103      	movs	r1, #3
 8007e14:	4874      	ldr	r0, [pc, #464]	; (8007fe8 <main+0x830>)
 8007e16:	f7f9 ff1d 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8007e1a:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
			uint32_t val_M0_TEMP = HAL_ADCEx_InjectedGetValue (&hadc1, 4);
 8007e1e:	2104      	movs	r1, #4
 8007e20:	4871      	ldr	r0, [pc, #452]	; (8007fe8 <main+0x830>)
 8007e22:	f7f9 ff17 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8007e26:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0

			uint32_t val_SO1 = HAL_ADCEx_InjectedGetValue (&hadc2, 1);
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	486f      	ldr	r0, [pc, #444]	; (8007fec <main+0x834>)
 8007e2e:	f7f9 ff11 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8007e32:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
			uint32_t val_BSENSE = HAL_ADCEx_InjectedGetValue (&hadc2, 2);
 8007e36:	2102      	movs	r1, #2
 8007e38:	486c      	ldr	r0, [pc, #432]	; (8007fec <main+0x834>)
 8007e3a:	f7f9 ff0b 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8007e3e:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
			uint32_t val_STRAIN1 = HAL_ADCEx_InjectedGetValue (&hadc2, 3);
 8007e42:	2103      	movs	r1, #3
 8007e44:	4869      	ldr	r0, [pc, #420]	; (8007fec <main+0x834>)
 8007e46:	f7f9 ff05 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8007e4a:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
			uint32_t val_TEMP = HAL_ADCEx_InjectedGetValue (&hadc2, 4);
 8007e4e:	2104      	movs	r1, #4
 8007e50:	4866      	ldr	r0, [pc, #408]	; (8007fec <main+0x834>)
 8007e52:	f7f9 feff 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8007e56:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190

			uint32_t val_SO2 = HAL_ADCEx_InjectedGetValue (&hadc3, 1);
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	4864      	ldr	r0, [pc, #400]	; (8007ff0 <main+0x838>)
 8007e5e:	f7f9 fef9 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8007e62:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
			uint32_t val_CSENSE = HAL_ADCEx_InjectedGetValue (&hadc3, 2);
 8007e66:	2102      	movs	r1, #2
 8007e68:	4861      	ldr	r0, [pc, #388]	; (8007ff0 <main+0x838>)
 8007e6a:	f7f9 fef3 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8007e6e:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188

			//                   0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007e72:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	469c      	mov	ip, r3
					ch, //(int)(amp*100), (int)(phase_shift*100),
					//(int)(stiffness*1000),
					(int)(1000*av_velocity),
 8007e7a:	4b5e      	ldr	r3, [pc, #376]	; (8007ff4 <main+0x83c>)
 8007e7c:	edd3 7a00 	vldr	s15, [r3]
 8007e80:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8007ff8 <main+0x840>
 8007e84:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e8c:	4b5b      	ldr	r3, [pc, #364]	; (8007ffc <main+0x844>)
 8007e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e92:	461d      	mov	r5, r3
					EncVal,
					val_I, val_ASENSE, val_STRAIN0, val_M0_TEMP,
					val_SO1, val_BSENSE, val_STRAIN1, val_TEMP,
					val_SO2, val_CSENSE,
					adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4],
 8007e94:	4b5a      	ldr	r3, [pc, #360]	; (8008000 <main+0x848>)
 8007e96:	881b      	ldrh	r3, [r3, #0]
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007e98:	461e      	mov	r6, r3
					adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4],
 8007e9a:	4b59      	ldr	r3, [pc, #356]	; (8008000 <main+0x848>)
 8007e9c:	885b      	ldrh	r3, [r3, #2]
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007e9e:	627b      	str	r3, [r7, #36]	; 0x24
					adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4],
 8007ea0:	4b57      	ldr	r3, [pc, #348]	; (8008000 <main+0x848>)
 8007ea2:	889b      	ldrh	r3, [r3, #4]
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007ea4:	623b      	str	r3, [r7, #32]
					adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4],
 8007ea6:	4b56      	ldr	r3, [pc, #344]	; (8008000 <main+0x848>)
 8007ea8:	88db      	ldrh	r3, [r3, #6]
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007eaa:	61fb      	str	r3, [r7, #28]
					adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4],
 8007eac:	4b54      	ldr	r3, [pc, #336]	; (8008000 <main+0x848>)
 8007eae:	891b      	ldrh	r3, [r3, #8]
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007eb0:	61bb      	str	r3, [r7, #24]
					//adc1_buf[5], adc1_buf[6], adc1_buf[7], adc1_buf[8], adc1_buf[9],
					//adc1_buf[10], adc1_buf[11], adc1_buf[12], adc1_buf[13], adc1_buf[14]);
					adc2_buf[0], adc2_buf[1], adc2_buf[2], adc2_buf[3], adc2_buf[4],
 8007eb2:	4b54      	ldr	r3, [pc, #336]	; (8008004 <main+0x84c>)
 8007eb4:	881b      	ldrh	r3, [r3, #0]
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007eb6:	617b      	str	r3, [r7, #20]
					adc2_buf[0], adc2_buf[1], adc2_buf[2], adc2_buf[3], adc2_buf[4],
 8007eb8:	4b52      	ldr	r3, [pc, #328]	; (8008004 <main+0x84c>)
 8007eba:	885b      	ldrh	r3, [r3, #2]
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007ebc:	613b      	str	r3, [r7, #16]
					adc2_buf[0], adc2_buf[1], adc2_buf[2], adc2_buf[3], adc2_buf[4],
 8007ebe:	4b51      	ldr	r3, [pc, #324]	; (8008004 <main+0x84c>)
 8007ec0:	889b      	ldrh	r3, [r3, #4]
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007ec2:	60fb      	str	r3, [r7, #12]
					adc2_buf[0], adc2_buf[1], adc2_buf[2], adc2_buf[3], adc2_buf[4],
 8007ec4:	4b4f      	ldr	r3, [pc, #316]	; (8008004 <main+0x84c>)
 8007ec6:	88db      	ldrh	r3, [r3, #6]
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007ec8:	60bb      	str	r3, [r7, #8]
					adc2_buf[0], adc2_buf[1], adc2_buf[2], adc2_buf[3], adc2_buf[4],
 8007eca:	4b4e      	ldr	r3, [pc, #312]	; (8008004 <main+0x84c>)
 8007ecc:	891b      	ldrh	r3, [r3, #8]
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007ece:	607b      	str	r3, [r7, #4]
					adc3_buf[0], adc3_buf[1], adc3_buf[2], adc3_buf[3], adc3_buf[4]);
 8007ed0:	4b4d      	ldr	r3, [pc, #308]	; (8008008 <main+0x850>)
 8007ed2:	881b      	ldrh	r3, [r3, #0]
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007ed4:	603b      	str	r3, [r7, #0]
					adc3_buf[0], adc3_buf[1], adc3_buf[2], adc3_buf[3], adc3_buf[4]);
 8007ed6:	4b4c      	ldr	r3, [pc, #304]	; (8008008 <main+0x850>)
 8007ed8:	885b      	ldrh	r3, [r3, #2]
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007eda:	461c      	mov	r4, r3
					adc3_buf[0], adc3_buf[1], adc3_buf[2], adc3_buf[3], adc3_buf[4]);
 8007edc:	4b4a      	ldr	r3, [pc, #296]	; (8008008 <main+0x850>)
 8007ede:	889b      	ldrh	r3, [r3, #4]
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007ee0:	4619      	mov	r1, r3
					adc3_buf[0], adc3_buf[1], adc3_buf[2], adc3_buf[3], adc3_buf[4]);
 8007ee2:	4b49      	ldr	r3, [pc, #292]	; (8008008 <main+0x850>)
 8007ee4:	88db      	ldrh	r3, [r3, #6]
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007ee6:	461a      	mov	r2, r3
					adc3_buf[0], adc3_buf[1], adc3_buf[2], adc3_buf[3], adc3_buf[4]);
 8007ee8:	4b47      	ldr	r3, [pc, #284]	; (8008008 <main+0x850>)
 8007eea:	891b      	ldrh	r3, [r3, #8]
			sprintf((char*)buf, "%c# %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8007eec:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8007ef0:	9319      	str	r3, [sp, #100]	; 0x64
 8007ef2:	9218      	str	r2, [sp, #96]	; 0x60
 8007ef4:	9117      	str	r1, [sp, #92]	; 0x5c
 8007ef6:	9416      	str	r4, [sp, #88]	; 0x58
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	9215      	str	r2, [sp, #84]	; 0x54
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	9214      	str	r2, [sp, #80]	; 0x50
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	9213      	str	r2, [sp, #76]	; 0x4c
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	9212      	str	r2, [sp, #72]	; 0x48
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	9211      	str	r2, [sp, #68]	; 0x44
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	9210      	str	r2, [sp, #64]	; 0x40
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	920f      	str	r2, [sp, #60]	; 0x3c
 8007f14:	69fa      	ldr	r2, [r7, #28]
 8007f16:	920e      	str	r2, [sp, #56]	; 0x38
 8007f18:	6a3a      	ldr	r2, [r7, #32]
 8007f1a:	920d      	str	r2, [sp, #52]	; 0x34
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1e:	930c      	str	r3, [sp, #48]	; 0x30
 8007f20:	960b      	str	r6, [sp, #44]	; 0x2c
 8007f22:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007f26:	930a      	str	r3, [sp, #40]	; 0x28
 8007f28:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8007f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f2e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007f32:	9308      	str	r3, [sp, #32]
 8007f34:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8007f38:	9307      	str	r3, [sp, #28]
 8007f3a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007f3e:	9306      	str	r3, [sp, #24]
 8007f40:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007f44:	9305      	str	r3, [sp, #20]
 8007f46:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007f4a:	9304      	str	r3, [sp, #16]
 8007f4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007f50:	9303      	str	r3, [sp, #12]
 8007f52:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007f56:	9302      	str	r3, [sp, #8]
 8007f58:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8007f5c:	9301      	str	r3, [sp, #4]
 8007f5e:	9500      	str	r5, [sp, #0]
 8007f60:	ee17 3a90 	vmov	r3, s15
 8007f64:	4662      	mov	r2, ip
 8007f66:	4929      	ldr	r1, [pc, #164]	; (800800c <main+0x854>)
 8007f68:	f002 f9e6 	bl	800a338 <siprintf>
//			buf[50] = '|';
//			buf[100 + max(-50, min(50, (int)av_velocity))] = 'v';


			//HAL_UART_Transmit_IT(&huart3, buf, strlen((char*)buf)); //WORKS but replaced by DMA below
			huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 8007f6c:	4b28      	ldr	r3, [pc, #160]	; (8008010 <main+0x858>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	695a      	ldr	r2, [r3, #20]
 8007f72:	4b27      	ldr	r3, [pc, #156]	; (8008010 <main+0x858>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f7a:	615a      	str	r2, [r3, #20]
			HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 8007f7c:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8007f80:	4b23      	ldr	r3, [pc, #140]	; (8008010 <main+0x858>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3304      	adds	r3, #4
 8007f86:	461d      	mov	r5, r3
 8007f88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7f8 f91f 	bl	80001d0 <strlen>
 8007f92:	4603      	mov	r3, r0
 8007f94:	462a      	mov	r2, r5
 8007f96:	4621      	mov	r1, r4
 8007f98:	481e      	ldr	r0, [pc, #120]	; (8008014 <main+0x85c>)
 8007f9a:	f7fa faed 	bl	8002578 <HAL_DMA_Start_IT>

			ch='q';
 8007f9e:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8007fa2:	2271      	movs	r2, #113	; 0x71
 8007fa4:	701a      	strb	r2, [r3, #0]

			i_slow++;
 8007fa6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007faa:	3301      	adds	r3, #1
 8007fac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	  }

	  i_fast++;
 8007fb0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	  HAL_Delay(1);
 8007fba:	2001      	movs	r0, #1
 8007fbc:	f7f9 f840 	bl	8001040 <HAL_Delay>
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8007fc0:	e605      	b.n	8007bce <main+0x416>
 8007fc2:	bf00      	nop
 8007fc4:	f3af 8000 	nop.w
 8007fc8:	9999999a 	.word	0x9999999a
 8007fcc:	3fa99999 	.word	0x3fa99999
 8007fd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8007fd4:	3f50624d 	.word	0x3f50624d
 8007fd8:	2000001c 	.word	0x2000001c
 8007fdc:	20000014 	.word	0x20000014
 8007fe0:	20000018 	.word	0x20000018
 8007fe4:	200000a8 	.word	0x200000a8
 8007fe8:	200006f0 	.word	0x200006f0
 8007fec:	20000500 	.word	0x20000500
 8007ff0:	20000738 	.word	0x20000738
 8007ff4:	200000b8 	.word	0x200000b8
 8007ff8:	447a0000 	.word	0x447a0000
 8007ffc:	200007c0 	.word	0x200007c0
 8008000:	200006b4 	.word	0x200006b4
 8008004:	200008e0 	.word	0x200008e0
 8008008:	20000864 	.word	0x20000864
 800800c:	0800bba8 	.word	0x0800bba8
 8008010:	200004c0 	.word	0x200004c0
 8008014:	20000654 	.word	0x20000654

08008018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b094      	sub	sp, #80	; 0x50
 800801c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800801e:	f107 0320 	add.w	r3, r7, #32
 8008022:	2230      	movs	r2, #48	; 0x30
 8008024:	2100      	movs	r1, #0
 8008026:	4618      	mov	r0, r3
 8008028:	f002 f97e 	bl	800a328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800802c:	f107 030c 	add.w	r3, r7, #12
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	605a      	str	r2, [r3, #4]
 8008036:	609a      	str	r2, [r3, #8]
 8008038:	60da      	str	r2, [r3, #12]
 800803a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800803c:	2300      	movs	r3, #0
 800803e:	60bb      	str	r3, [r7, #8]
 8008040:	4b27      	ldr	r3, [pc, #156]	; (80080e0 <SystemClock_Config+0xc8>)
 8008042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008044:	4a26      	ldr	r2, [pc, #152]	; (80080e0 <SystemClock_Config+0xc8>)
 8008046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800804a:	6413      	str	r3, [r2, #64]	; 0x40
 800804c:	4b24      	ldr	r3, [pc, #144]	; (80080e0 <SystemClock_Config+0xc8>)
 800804e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008054:	60bb      	str	r3, [r7, #8]
 8008056:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008058:	2300      	movs	r3, #0
 800805a:	607b      	str	r3, [r7, #4]
 800805c:	4b21      	ldr	r3, [pc, #132]	; (80080e4 <SystemClock_Config+0xcc>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a20      	ldr	r2, [pc, #128]	; (80080e4 <SystemClock_Config+0xcc>)
 8008062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008066:	6013      	str	r3, [r2, #0]
 8008068:	4b1e      	ldr	r3, [pc, #120]	; (80080e4 <SystemClock_Config+0xcc>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008070:	607b      	str	r3, [r7, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008074:	2301      	movs	r3, #1
 8008076:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800807c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800807e:	2302      	movs	r3, #2
 8008080:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008082:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008088:	2304      	movs	r3, #4
 800808a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800808c:	2354      	movs	r3, #84	; 0x54
 800808e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008090:	2302      	movs	r3, #2
 8008092:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8008094:	2303      	movs	r3, #3
 8008096:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008098:	f107 0320 	add.w	r3, r7, #32
 800809c:	4618      	mov	r0, r3
 800809e:	f7fb ff0f 	bl	8003ec0 <HAL_RCC_OscConfig>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80080a8:	f001 fa78 	bl	800959c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80080ac:	230f      	movs	r3, #15
 80080ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80080b0:	2302      	movs	r3, #2
 80080b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80080b4:	2300      	movs	r3, #0
 80080b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80080b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80080be:	2300      	movs	r3, #0
 80080c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80080c2:	f107 030c 	add.w	r3, r7, #12
 80080c6:	2102      	movs	r1, #2
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fc f969 	bl	80043a0 <HAL_RCC_ClockConfig>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80080d4:	f001 fa62 	bl	800959c <Error_Handler>
  }
}
 80080d8:	bf00      	nop
 80080da:	3750      	adds	r7, #80	; 0x50
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	40023800 	.word	0x40023800
 80080e4:	40007000 	.word	0x40007000

080080e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08c      	sub	sp, #48	; 0x30
 80080ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80080ee:	f107 0320 	add.w	r3, r7, #32
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	605a      	str	r2, [r3, #4]
 80080f8:	609a      	str	r2, [r3, #8]
 80080fa:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80080fc:	463b      	mov	r3, r7
 80080fe:	2220      	movs	r2, #32
 8008100:	2100      	movs	r1, #0
 8008102:	4618      	mov	r0, r3
 8008104:	f002 f910 	bl	800a328 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8008108:	4b63      	ldr	r3, [pc, #396]	; (8008298 <MX_ADC1_Init+0x1b0>)
 800810a:	4a64      	ldr	r2, [pc, #400]	; (800829c <MX_ADC1_Init+0x1b4>)
 800810c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800810e:	4b62      	ldr	r3, [pc, #392]	; (8008298 <MX_ADC1_Init+0x1b0>)
 8008110:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008114:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008116:	4b60      	ldr	r3, [pc, #384]	; (8008298 <MX_ADC1_Init+0x1b0>)
 8008118:	2200      	movs	r2, #0
 800811a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800811c:	4b5e      	ldr	r3, [pc, #376]	; (8008298 <MX_ADC1_Init+0x1b0>)
 800811e:	2201      	movs	r2, #1
 8008120:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008122:	4b5d      	ldr	r3, [pc, #372]	; (8008298 <MX_ADC1_Init+0x1b0>)
 8008124:	2201      	movs	r2, #1
 8008126:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008128:	4b5b      	ldr	r3, [pc, #364]	; (8008298 <MX_ADC1_Init+0x1b0>)
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008130:	4b59      	ldr	r3, [pc, #356]	; (8008298 <MX_ADC1_Init+0x1b0>)
 8008132:	2200      	movs	r2, #0
 8008134:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008136:	4b58      	ldr	r3, [pc, #352]	; (8008298 <MX_ADC1_Init+0x1b0>)
 8008138:	4a59      	ldr	r2, [pc, #356]	; (80082a0 <MX_ADC1_Init+0x1b8>)
 800813a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800813c:	4b56      	ldr	r3, [pc, #344]	; (8008298 <MX_ADC1_Init+0x1b0>)
 800813e:	2200      	movs	r2, #0
 8008140:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8008142:	4b55      	ldr	r3, [pc, #340]	; (8008298 <MX_ADC1_Init+0x1b0>)
 8008144:	2205      	movs	r2, #5
 8008146:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008148:	4b53      	ldr	r3, [pc, #332]	; (8008298 <MX_ADC1_Init+0x1b0>)
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008150:	4b51      	ldr	r3, [pc, #324]	; (8008298 <MX_ADC1_Init+0x1b0>)
 8008152:	2201      	movs	r2, #1
 8008154:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008156:	4850      	ldr	r0, [pc, #320]	; (8008298 <MX_ADC1_Init+0x1b0>)
 8008158:	f7f8 ff94 	bl	8001084 <HAL_ADC_Init>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8008162:	f001 fa1b 	bl	800959c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008166:	2301      	movs	r3, #1
 8008168:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800816a:	2301      	movs	r3, #1
 800816c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800816e:	2301      	movs	r3, #1
 8008170:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008172:	f107 0320 	add.w	r3, r7, #32
 8008176:	4619      	mov	r1, r3
 8008178:	4847      	ldr	r0, [pc, #284]	; (8008298 <MX_ADC1_Init+0x1b0>)
 800817a:	f7f9 fa0d 	bl	8001598 <HAL_ADC_ConfigChannel>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8008184:	f001 fa0a 	bl	800959c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008188:	230b      	movs	r3, #11
 800818a:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 800818c:	2302      	movs	r3, #2
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008190:	f107 0320 	add.w	r3, r7, #32
 8008194:	4619      	mov	r1, r3
 8008196:	4840      	ldr	r0, [pc, #256]	; (8008298 <MX_ADC1_Init+0x1b0>)
 8008198:	f7f9 f9fe 	bl	8001598 <HAL_ADC_ConfigChannel>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80081a2:	f001 f9fb 	bl	800959c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80081a6:	230e      	movs	r3, #14
 80081a8:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 80081aa:	2303      	movs	r3, #3
 80081ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081ae:	f107 0320 	add.w	r3, r7, #32
 80081b2:	4619      	mov	r1, r3
 80081b4:	4838      	ldr	r0, [pc, #224]	; (8008298 <MX_ADC1_Init+0x1b0>)
 80081b6:	f7f9 f9ef 	bl	8001598 <HAL_ADC_ConfigChannel>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80081c0:	f001 f9ec 	bl	800959c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80081c4:	2305      	movs	r3, #5
 80081c6:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 80081c8:	2304      	movs	r3, #4
 80081ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081cc:	f107 0320 	add.w	r3, r7, #32
 80081d0:	4619      	mov	r1, r3
 80081d2:	4831      	ldr	r0, [pc, #196]	; (8008298 <MX_ADC1_Init+0x1b0>)
 80081d4:	f7f9 f9e0 	bl	8001598 <HAL_ADC_ConfigChannel>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80081de:	f001 f9dd 	bl	800959c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80081e2:	2310      	movs	r3, #16
 80081e4:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 80081e6:	2305      	movs	r3, #5
 80081e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081ea:	f107 0320 	add.w	r3, r7, #32
 80081ee:	4619      	mov	r1, r3
 80081f0:	4829      	ldr	r0, [pc, #164]	; (8008298 <MX_ADC1_Init+0x1b0>)
 80081f2:	f7f9 f9d1 	bl	8001598 <HAL_ADC_ConfigChannel>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80081fc:	f001 f9ce 	bl	800959c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8008200:	2301      	movs	r3, #1
 8008202:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8008204:	2301      	movs	r3, #1
 8008206:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8008208:	2304      	movs	r3, #4
 800820a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800820c:	2300      	movs	r3, #0
 800820e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 8008210:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8008214:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8008216:	2300      	movs	r3, #0
 8008218:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800821a:	2300      	movs	r3, #0
 800821c:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800821e:	2300      	movs	r3, #0
 8008220:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8008222:	2300      	movs	r3, #0
 8008224:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8008226:	463b      	mov	r3, r7
 8008228:	4619      	mov	r1, r3
 800822a:	481b      	ldr	r0, [pc, #108]	; (8008298 <MX_ADC1_Init+0x1b0>)
 800822c:	f7f9 fd54 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8008236:	f001 f9b1 	bl	800959c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 800823a:	230b      	movs	r3, #11
 800823c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800823e:	2302      	movs	r3, #2
 8008240:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8008242:	463b      	mov	r3, r7
 8008244:	4619      	mov	r1, r3
 8008246:	4814      	ldr	r0, [pc, #80]	; (8008298 <MX_ADC1_Init+0x1b0>)
 8008248:	f7f9 fd46 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8008252:	f001 f9a3 	bl	800959c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8008256:	230e      	movs	r3, #14
 8008258:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800825a:	2303      	movs	r3, #3
 800825c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800825e:	463b      	mov	r3, r7
 8008260:	4619      	mov	r1, r3
 8008262:	480d      	ldr	r0, [pc, #52]	; (8008298 <MX_ADC1_Init+0x1b0>)
 8008264:	f7f9 fd38 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 800826e:	f001 f995 	bl	800959c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8008272:	2305      	movs	r3, #5
 8008274:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 8008276:	2304      	movs	r3, #4
 8008278:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800827a:	463b      	mov	r3, r7
 800827c:	4619      	mov	r1, r3
 800827e:	4806      	ldr	r0, [pc, #24]	; (8008298 <MX_ADC1_Init+0x1b0>)
 8008280:	f7f9 fd2a 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 800828a:	f001 f987 	bl	800959c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800828e:	bf00      	nop
 8008290:	3730      	adds	r7, #48	; 0x30
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	200006f0 	.word	0x200006f0
 800829c:	40012000 	.word	0x40012000
 80082a0:	0f000001 	.word	0x0f000001

080082a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08c      	sub	sp, #48	; 0x30
 80082a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80082aa:	f107 0320 	add.w	r3, r7, #32
 80082ae:	2200      	movs	r2, #0
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	605a      	str	r2, [r3, #4]
 80082b4:	609a      	str	r2, [r3, #8]
 80082b6:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80082b8:	463b      	mov	r3, r7
 80082ba:	2220      	movs	r2, #32
 80082bc:	2100      	movs	r1, #0
 80082be:	4618      	mov	r0, r3
 80082c0:	f002 f832 	bl	800a328 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 80082c4:	4b63      	ldr	r3, [pc, #396]	; (8008454 <MX_ADC2_Init+0x1b0>)
 80082c6:	4a64      	ldr	r2, [pc, #400]	; (8008458 <MX_ADC2_Init+0x1b4>)
 80082c8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80082ca:	4b62      	ldr	r3, [pc, #392]	; (8008454 <MX_ADC2_Init+0x1b0>)
 80082cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80082d0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80082d2:	4b60      	ldr	r3, [pc, #384]	; (8008454 <MX_ADC2_Init+0x1b0>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80082d8:	4b5e      	ldr	r3, [pc, #376]	; (8008454 <MX_ADC2_Init+0x1b0>)
 80082da:	2201      	movs	r2, #1
 80082dc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80082de:	4b5d      	ldr	r3, [pc, #372]	; (8008454 <MX_ADC2_Init+0x1b0>)
 80082e0:	2201      	movs	r2, #1
 80082e2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80082e4:	4b5b      	ldr	r3, [pc, #364]	; (8008454 <MX_ADC2_Init+0x1b0>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80082ec:	4b59      	ldr	r3, [pc, #356]	; (8008454 <MX_ADC2_Init+0x1b0>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80082f2:	4b58      	ldr	r3, [pc, #352]	; (8008454 <MX_ADC2_Init+0x1b0>)
 80082f4:	4a59      	ldr	r2, [pc, #356]	; (800845c <MX_ADC2_Init+0x1b8>)
 80082f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80082f8:	4b56      	ldr	r3, [pc, #344]	; (8008454 <MX_ADC2_Init+0x1b0>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 80082fe:	4b55      	ldr	r3, [pc, #340]	; (8008454 <MX_ADC2_Init+0x1b0>)
 8008300:	2205      	movs	r2, #5
 8008302:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8008304:	4b53      	ldr	r3, [pc, #332]	; (8008454 <MX_ADC2_Init+0x1b0>)
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800830c:	4b51      	ldr	r3, [pc, #324]	; (8008454 <MX_ADC2_Init+0x1b0>)
 800830e:	2201      	movs	r2, #1
 8008310:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8008312:	4850      	ldr	r0, [pc, #320]	; (8008454 <MX_ADC2_Init+0x1b0>)
 8008314:	f7f8 feb6 	bl	8001084 <HAL_ADC_Init>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800831e:	f001 f93d 	bl	800959c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8008322:	2302      	movs	r3, #2
 8008324:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8008326:	2301      	movs	r3, #1
 8008328:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800832a:	2301      	movs	r3, #1
 800832c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800832e:	f107 0320 	add.w	r3, r7, #32
 8008332:	4619      	mov	r1, r3
 8008334:	4847      	ldr	r0, [pc, #284]	; (8008454 <MX_ADC2_Init+0x1b0>)
 8008336:	f7f9 f92f 	bl	8001598 <HAL_ADC_ConfigChannel>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <MX_ADC2_Init+0xa0>
  {
    Error_Handler();
 8008340:	f001 f92c 	bl	800959c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8008344:	230c      	movs	r3, #12
 8008346:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8008348:	2302      	movs	r3, #2
 800834a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800834c:	f107 0320 	add.w	r3, r7, #32
 8008350:	4619      	mov	r1, r3
 8008352:	4840      	ldr	r0, [pc, #256]	; (8008454 <MX_ADC2_Init+0x1b0>)
 8008354:	f7f9 f920 	bl	8001598 <HAL_ADC_ConfigChannel>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 800835e:	f001 f91d 	bl	800959c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8008362:	230f      	movs	r3, #15
 8008364:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 8008366:	2303      	movs	r3, #3
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800836a:	f107 0320 	add.w	r3, r7, #32
 800836e:	4619      	mov	r1, r3
 8008370:	4838      	ldr	r0, [pc, #224]	; (8008454 <MX_ADC2_Init+0x1b0>)
 8008372:	f7f9 f911 	bl	8001598 <HAL_ADC_ConfigChannel>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <MX_ADC2_Init+0xdc>
  {
    Error_Handler();
 800837c:	f001 f90e 	bl	800959c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008380:	2304      	movs	r3, #4
 8008382:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 8008384:	2304      	movs	r3, #4
 8008386:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008388:	f107 0320 	add.w	r3, r7, #32
 800838c:	4619      	mov	r1, r3
 800838e:	4831      	ldr	r0, [pc, #196]	; (8008454 <MX_ADC2_Init+0x1b0>)
 8008390:	f7f9 f902 	bl	8001598 <HAL_ADC_ConfigChannel>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <MX_ADC2_Init+0xfa>
  {
    Error_Handler();
 800839a:	f001 f8ff 	bl	800959c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800839e:	2308      	movs	r3, #8
 80083a0:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 80083a2:	2305      	movs	r3, #5
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80083a6:	f107 0320 	add.w	r3, r7, #32
 80083aa:	4619      	mov	r1, r3
 80083ac:	4829      	ldr	r0, [pc, #164]	; (8008454 <MX_ADC2_Init+0x1b0>)
 80083ae:	f7f9 f8f3 	bl	8001598 <HAL_ADC_ConfigChannel>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <MX_ADC2_Init+0x118>
  {
    Error_Handler();
 80083b8:	f001 f8f0 	bl	800959c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80083bc:	2302      	movs	r3, #2
 80083be:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80083c0:	2301      	movs	r3, #1
 80083c2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 80083c4:	2304      	movs	r3, #4
 80083c6:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80083c8:	2300      	movs	r3, #0
 80083ca:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 80083cc:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80083d0:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80083d2:	2300      	movs	r3, #0
 80083d4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80083d6:	2300      	movs	r3, #0
 80083d8:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80083da:	2300      	movs	r3, #0
 80083dc:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80083e2:	463b      	mov	r3, r7
 80083e4:	4619      	mov	r1, r3
 80083e6:	481b      	ldr	r0, [pc, #108]	; (8008454 <MX_ADC2_Init+0x1b0>)
 80083e8:	f7f9 fc76 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <MX_ADC2_Init+0x152>
  {
    Error_Handler();
 80083f2:	f001 f8d3 	bl	800959c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 80083f6:	230c      	movs	r3, #12
 80083f8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80083fa:	2302      	movs	r3, #2
 80083fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80083fe:	463b      	mov	r3, r7
 8008400:	4619      	mov	r1, r3
 8008402:	4814      	ldr	r0, [pc, #80]	; (8008454 <MX_ADC2_Init+0x1b0>)
 8008404:	f7f9 fc68 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <MX_ADC2_Init+0x16e>
  {
    Error_Handler();
 800840e:	f001 f8c5 	bl	800959c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 8008412:	230f      	movs	r3, #15
 8008414:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8008416:	2303      	movs	r3, #3
 8008418:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800841a:	463b      	mov	r3, r7
 800841c:	4619      	mov	r1, r3
 800841e:	480d      	ldr	r0, [pc, #52]	; (8008454 <MX_ADC2_Init+0x1b0>)
 8008420:	f7f9 fc5a 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <MX_ADC2_Init+0x18a>
  {
    Error_Handler();
 800842a:	f001 f8b7 	bl	800959c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800842e:	2304      	movs	r3, #4
 8008430:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 8008432:	2304      	movs	r3, #4
 8008434:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8008436:	463b      	mov	r3, r7
 8008438:	4619      	mov	r1, r3
 800843a:	4806      	ldr	r0, [pc, #24]	; (8008454 <MX_ADC2_Init+0x1b0>)
 800843c:	f7f9 fc4c 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <MX_ADC2_Init+0x1a6>
  {
    Error_Handler();
 8008446:	f001 f8a9 	bl	800959c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800844a:	bf00      	nop
 800844c:	3730      	adds	r7, #48	; 0x30
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	20000500 	.word	0x20000500
 8008458:	40012100 	.word	0x40012100
 800845c:	0f000001 	.word	0x0f000001

08008460 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b08c      	sub	sp, #48	; 0x30
 8008464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008466:	f107 0320 	add.w	r3, r7, #32
 800846a:	2200      	movs	r2, #0
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	605a      	str	r2, [r3, #4]
 8008470:	609a      	str	r2, [r3, #8]
 8008472:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8008474:	463b      	mov	r3, r7
 8008476:	2220      	movs	r2, #32
 8008478:	2100      	movs	r1, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f001 ff54 	bl	800a328 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8008480:	4b63      	ldr	r3, [pc, #396]	; (8008610 <MX_ADC3_Init+0x1b0>)
 8008482:	4a64      	ldr	r2, [pc, #400]	; (8008614 <MX_ADC3_Init+0x1b4>)
 8008484:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008486:	4b62      	ldr	r3, [pc, #392]	; (8008610 <MX_ADC3_Init+0x1b0>)
 8008488:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800848c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800848e:	4b60      	ldr	r3, [pc, #384]	; (8008610 <MX_ADC3_Init+0x1b0>)
 8008490:	2200      	movs	r2, #0
 8008492:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8008494:	4b5e      	ldr	r3, [pc, #376]	; (8008610 <MX_ADC3_Init+0x1b0>)
 8008496:	2201      	movs	r2, #1
 8008498:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800849a:	4b5d      	ldr	r3, [pc, #372]	; (8008610 <MX_ADC3_Init+0x1b0>)
 800849c:	2201      	movs	r2, #1
 800849e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80084a0:	4b5b      	ldr	r3, [pc, #364]	; (8008610 <MX_ADC3_Init+0x1b0>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80084a8:	4b59      	ldr	r3, [pc, #356]	; (8008610 <MX_ADC3_Init+0x1b0>)
 80084aa:	2200      	movs	r2, #0
 80084ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80084ae:	4b58      	ldr	r3, [pc, #352]	; (8008610 <MX_ADC3_Init+0x1b0>)
 80084b0:	4a59      	ldr	r2, [pc, #356]	; (8008618 <MX_ADC3_Init+0x1b8>)
 80084b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80084b4:	4b56      	ldr	r3, [pc, #344]	; (8008610 <MX_ADC3_Init+0x1b0>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 5;
 80084ba:	4b55      	ldr	r3, [pc, #340]	; (8008610 <MX_ADC3_Init+0x1b0>)
 80084bc:	2205      	movs	r2, #5
 80084be:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80084c0:	4b53      	ldr	r3, [pc, #332]	; (8008610 <MX_ADC3_Init+0x1b0>)
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80084c8:	4b51      	ldr	r3, [pc, #324]	; (8008610 <MX_ADC3_Init+0x1b0>)
 80084ca:	2201      	movs	r2, #1
 80084cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80084ce:	4850      	ldr	r0, [pc, #320]	; (8008610 <MX_ADC3_Init+0x1b0>)
 80084d0:	f7f8 fdd8 	bl	8001084 <HAL_ADC_Init>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 80084da:	f001 f85f 	bl	800959c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80084de:	2303      	movs	r3, #3
 80084e0:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80084e2:	2301      	movs	r3, #1
 80084e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80084e6:	2301      	movs	r3, #1
 80084e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80084ea:	f107 0320 	add.w	r3, r7, #32
 80084ee:	4619      	mov	r1, r3
 80084f0:	4847      	ldr	r0, [pc, #284]	; (8008610 <MX_ADC3_Init+0x1b0>)
 80084f2:	f7f9 f851 	bl	8001598 <HAL_ADC_ConfigChannel>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 80084fc:	f001 f84e 	bl	800959c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8008500:	230d      	movs	r3, #13
 8008502:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8008504:	2302      	movs	r3, #2
 8008506:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008508:	f107 0320 	add.w	r3, r7, #32
 800850c:	4619      	mov	r1, r3
 800850e:	4840      	ldr	r0, [pc, #256]	; (8008610 <MX_ADC3_Init+0x1b0>)
 8008510:	f7f9 f842 	bl	8001598 <HAL_ADC_ConfigChannel>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <MX_ADC3_Init+0xbe>
  {
    Error_Handler();
 800851a:	f001 f83f 	bl	800959c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800851e:	2303      	movs	r3, #3
 8008520:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 8008522:	2303      	movs	r3, #3
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008526:	f107 0320 	add.w	r3, r7, #32
 800852a:	4619      	mov	r1, r3
 800852c:	4838      	ldr	r0, [pc, #224]	; (8008610 <MX_ADC3_Init+0x1b0>)
 800852e:	f7f9 f833 	bl	8001598 <HAL_ADC_ConfigChannel>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8008538:	f001 f830 	bl	800959c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800853c:	230d      	movs	r3, #13
 800853e:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 8008540:	2304      	movs	r3, #4
 8008542:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008544:	f107 0320 	add.w	r3, r7, #32
 8008548:	4619      	mov	r1, r3
 800854a:	4831      	ldr	r0, [pc, #196]	; (8008610 <MX_ADC3_Init+0x1b0>)
 800854c:	f7f9 f824 	bl	8001598 <HAL_ADC_ConfigChannel>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <MX_ADC3_Init+0xfa>
  {
    Error_Handler();
 8008556:	f001 f821 	bl	800959c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800855a:	2303      	movs	r3, #3
 800855c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 800855e:	2305      	movs	r3, #5
 8008560:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008562:	f107 0320 	add.w	r3, r7, #32
 8008566:	4619      	mov	r1, r3
 8008568:	4829      	ldr	r0, [pc, #164]	; (8008610 <MX_ADC3_Init+0x1b0>)
 800856a:	f7f9 f815 	bl	8001598 <HAL_ADC_ConfigChannel>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <MX_ADC3_Init+0x118>
  {
    Error_Handler();
 8008574:	f001 f812 	bl	800959c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8008578:	2303      	movs	r3, #3
 800857a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800857c:	2301      	movs	r3, #1
 800857e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8008580:	2304      	movs	r3, #4
 8008582:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8008584:	2300      	movs	r3, #0
 8008586:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 8008588:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800858c:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800858e:	2300      	movs	r3, #0
 8008590:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8008592:	2300      	movs	r3, #0
 8008594:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8008596:	2300      	movs	r3, #0
 8008598:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800859a:	2300      	movs	r3, #0
 800859c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800859e:	463b      	mov	r3, r7
 80085a0:	4619      	mov	r1, r3
 80085a2:	481b      	ldr	r0, [pc, #108]	; (8008610 <MX_ADC3_Init+0x1b0>)
 80085a4:	f7f9 fb98 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <MX_ADC3_Init+0x152>
  {
    Error_Handler();
 80085ae:	f000 fff5 	bl	800959c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 80085b2:	230d      	movs	r3, #13
 80085b4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80085b6:	2302      	movs	r3, #2
 80085b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 80085ba:	463b      	mov	r3, r7
 80085bc:	4619      	mov	r1, r3
 80085be:	4814      	ldr	r0, [pc, #80]	; (8008610 <MX_ADC3_Init+0x1b0>)
 80085c0:	f7f9 fb8a 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <MX_ADC3_Init+0x16e>
  {
    Error_Handler();
 80085ca:	f000 ffe7 	bl	800959c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80085ce:	2303      	movs	r3, #3
 80085d0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 80085d2:	2303      	movs	r3, #3
 80085d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 80085d6:	463b      	mov	r3, r7
 80085d8:	4619      	mov	r1, r3
 80085da:	480d      	ldr	r0, [pc, #52]	; (8008610 <MX_ADC3_Init+0x1b0>)
 80085dc:	f7f9 fb7c 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <MX_ADC3_Init+0x18a>
  {
    Error_Handler();
 80085e6:	f000 ffd9 	bl	800959c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 80085ea:	230d      	movs	r3, #13
 80085ec:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 80085ee:	2304      	movs	r3, #4
 80085f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 80085f2:	463b      	mov	r3, r7
 80085f4:	4619      	mov	r1, r3
 80085f6:	4806      	ldr	r0, [pc, #24]	; (8008610 <MX_ADC3_Init+0x1b0>)
 80085f8:	f7f9 fb6e 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <MX_ADC3_Init+0x1a6>
  {
    Error_Handler();
 8008602:	f000 ffcb 	bl	800959c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8008606:	bf00      	nop
 8008608:	3730      	adds	r7, #48	; 0x30
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	20000738 	.word	0x20000738
 8008614:	40012200 	.word	0x40012200
 8008618:	0f000001 	.word	0x0f000001

0800861c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8008620:	4b16      	ldr	r3, [pc, #88]	; (800867c <MX_CAN1_Init+0x60>)
 8008622:	4a17      	ldr	r2, [pc, #92]	; (8008680 <MX_CAN1_Init+0x64>)
 8008624:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8008626:	4b15      	ldr	r3, [pc, #84]	; (800867c <MX_CAN1_Init+0x60>)
 8008628:	2210      	movs	r2, #16
 800862a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800862c:	4b13      	ldr	r3, [pc, #76]	; (800867c <MX_CAN1_Init+0x60>)
 800862e:	2200      	movs	r2, #0
 8008630:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008632:	4b12      	ldr	r3, [pc, #72]	; (800867c <MX_CAN1_Init+0x60>)
 8008634:	2200      	movs	r2, #0
 8008636:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008638:	4b10      	ldr	r3, [pc, #64]	; (800867c <MX_CAN1_Init+0x60>)
 800863a:	2200      	movs	r2, #0
 800863c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800863e:	4b0f      	ldr	r3, [pc, #60]	; (800867c <MX_CAN1_Init+0x60>)
 8008640:	2200      	movs	r2, #0
 8008642:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8008644:	4b0d      	ldr	r3, [pc, #52]	; (800867c <MX_CAN1_Init+0x60>)
 8008646:	2200      	movs	r2, #0
 8008648:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800864a:	4b0c      	ldr	r3, [pc, #48]	; (800867c <MX_CAN1_Init+0x60>)
 800864c:	2200      	movs	r2, #0
 800864e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8008650:	4b0a      	ldr	r3, [pc, #40]	; (800867c <MX_CAN1_Init+0x60>)
 8008652:	2200      	movs	r2, #0
 8008654:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8008656:	4b09      	ldr	r3, [pc, #36]	; (800867c <MX_CAN1_Init+0x60>)
 8008658:	2200      	movs	r2, #0
 800865a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800865c:	4b07      	ldr	r3, [pc, #28]	; (800867c <MX_CAN1_Init+0x60>)
 800865e:	2200      	movs	r2, #0
 8008660:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8008662:	4b06      	ldr	r3, [pc, #24]	; (800867c <MX_CAN1_Init+0x60>)
 8008664:	2200      	movs	r2, #0
 8008666:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8008668:	4804      	ldr	r0, [pc, #16]	; (800867c <MX_CAN1_Init+0x60>)
 800866a:	f7f9 fcc9 	bl	8002000 <HAL_CAN_Init>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8008674:	f000 ff92 	bl	800959c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8008678:	bf00      	nop
 800867a:	bd80      	pop	{r7, pc}
 800867c:	200009bc 	.word	0x200009bc
 8008680:	40006400 	.word	0x40006400

08008684 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008688:	4b12      	ldr	r3, [pc, #72]	; (80086d4 <MX_I2C1_Init+0x50>)
 800868a:	4a13      	ldr	r2, [pc, #76]	; (80086d8 <MX_I2C1_Init+0x54>)
 800868c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800868e:	4b11      	ldr	r3, [pc, #68]	; (80086d4 <MX_I2C1_Init+0x50>)
 8008690:	4a12      	ldr	r2, [pc, #72]	; (80086dc <MX_I2C1_Init+0x58>)
 8008692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008694:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <MX_I2C1_Init+0x50>)
 8008696:	2200      	movs	r2, #0
 8008698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800869a:	4b0e      	ldr	r3, [pc, #56]	; (80086d4 <MX_I2C1_Init+0x50>)
 800869c:	2200      	movs	r2, #0
 800869e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80086a0:	4b0c      	ldr	r3, [pc, #48]	; (80086d4 <MX_I2C1_Init+0x50>)
 80086a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80086a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80086a8:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <MX_I2C1_Init+0x50>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80086ae:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <MX_I2C1_Init+0x50>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80086b4:	4b07      	ldr	r3, [pc, #28]	; (80086d4 <MX_I2C1_Init+0x50>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80086ba:	4b06      	ldr	r3, [pc, #24]	; (80086d4 <MX_I2C1_Init+0x50>)
 80086bc:	2200      	movs	r2, #0
 80086be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80086c0:	4804      	ldr	r0, [pc, #16]	; (80086d4 <MX_I2C1_Init+0x50>)
 80086c2:	f7fa fc75 	bl	8002fb0 <HAL_I2C_Init>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80086cc:	f000 ff66 	bl	800959c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80086d0:	bf00      	nop
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	20000548 	.word	0x20000548
 80086d8:	40005400 	.word	0x40005400
 80086dc:	000186a0 	.word	0x000186a0

080086e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80086e4:	4b12      	ldr	r3, [pc, #72]	; (8008730 <MX_I2C2_Init+0x50>)
 80086e6:	4a13      	ldr	r2, [pc, #76]	; (8008734 <MX_I2C2_Init+0x54>)
 80086e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80086ea:	4b11      	ldr	r3, [pc, #68]	; (8008730 <MX_I2C2_Init+0x50>)
 80086ec:	4a12      	ldr	r2, [pc, #72]	; (8008738 <MX_I2C2_Init+0x58>)
 80086ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80086f0:	4b0f      	ldr	r3, [pc, #60]	; (8008730 <MX_I2C2_Init+0x50>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80086f6:	4b0e      	ldr	r3, [pc, #56]	; (8008730 <MX_I2C2_Init+0x50>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80086fc:	4b0c      	ldr	r3, [pc, #48]	; (8008730 <MX_I2C2_Init+0x50>)
 80086fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008702:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008704:	4b0a      	ldr	r3, [pc, #40]	; (8008730 <MX_I2C2_Init+0x50>)
 8008706:	2200      	movs	r2, #0
 8008708:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800870a:	4b09      	ldr	r3, [pc, #36]	; (8008730 <MX_I2C2_Init+0x50>)
 800870c:	2200      	movs	r2, #0
 800870e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008710:	4b07      	ldr	r3, [pc, #28]	; (8008730 <MX_I2C2_Init+0x50>)
 8008712:	2200      	movs	r2, #0
 8008714:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008716:	4b06      	ldr	r3, [pc, #24]	; (8008730 <MX_I2C2_Init+0x50>)
 8008718:	2200      	movs	r2, #0
 800871a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800871c:	4804      	ldr	r0, [pc, #16]	; (8008730 <MX_I2C2_Init+0x50>)
 800871e:	f7fa fc47 	bl	8002fb0 <HAL_I2C_Init>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8008728:	f000 ff38 	bl	800959c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800872c:	bf00      	nop
 800872e:	bd80      	pop	{r7, pc}
 8008730:	2000059c 	.word	0x2000059c
 8008734:	40005800 	.word	0x40005800
 8008738:	000186a0 	.word	0x000186a0

0800873c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8008740:	4b18      	ldr	r3, [pc, #96]	; (80087a4 <MX_SPI2_Init+0x68>)
 8008742:	4a19      	ldr	r2, [pc, #100]	; (80087a8 <MX_SPI2_Init+0x6c>)
 8008744:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008746:	4b17      	ldr	r3, [pc, #92]	; (80087a4 <MX_SPI2_Init+0x68>)
 8008748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800874c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800874e:	4b15      	ldr	r3, [pc, #84]	; (80087a4 <MX_SPI2_Init+0x68>)
 8008750:	2200      	movs	r2, #0
 8008752:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8008754:	4b13      	ldr	r3, [pc, #76]	; (80087a4 <MX_SPI2_Init+0x68>)
 8008756:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800875a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800875c:	4b11      	ldr	r3, [pc, #68]	; (80087a4 <MX_SPI2_Init+0x68>)
 800875e:	2200      	movs	r2, #0
 8008760:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008762:	4b10      	ldr	r3, [pc, #64]	; (80087a4 <MX_SPI2_Init+0x68>)
 8008764:	2201      	movs	r2, #1
 8008766:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8008768:	4b0e      	ldr	r3, [pc, #56]	; (80087a4 <MX_SPI2_Init+0x68>)
 800876a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800876e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008770:	4b0c      	ldr	r3, [pc, #48]	; (80087a4 <MX_SPI2_Init+0x68>)
 8008772:	2218      	movs	r2, #24
 8008774:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008776:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <MX_SPI2_Init+0x68>)
 8008778:	2200      	movs	r2, #0
 800877a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800877c:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <MX_SPI2_Init+0x68>)
 800877e:	2200      	movs	r2, #0
 8008780:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008782:	4b08      	ldr	r3, [pc, #32]	; (80087a4 <MX_SPI2_Init+0x68>)
 8008784:	2200      	movs	r2, #0
 8008786:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8008788:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <MX_SPI2_Init+0x68>)
 800878a:	220a      	movs	r2, #10
 800878c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800878e:	4805      	ldr	r0, [pc, #20]	; (80087a4 <MX_SPI2_Init+0x68>)
 8008790:	f7fb fff8 	bl	8004784 <HAL_SPI_Init>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800879a:	f000 feff 	bl	800959c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800879e:	bf00      	nop
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	200000e0 	.word	0x200000e0
 80087a8:	40003800 	.word	0x40003800

080087ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b096      	sub	sp, #88	; 0x58
 80087b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80087b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	605a      	str	r2, [r3, #4]
 80087bc:	609a      	str	r2, [r3, #8]
 80087be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80087c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80087c4:	2200      	movs	r2, #0
 80087c6:	601a      	str	r2, [r3, #0]
 80087c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80087ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087ce:	2200      	movs	r2, #0
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	605a      	str	r2, [r3, #4]
 80087d4:	609a      	str	r2, [r3, #8]
 80087d6:	60da      	str	r2, [r3, #12]
 80087d8:	611a      	str	r2, [r3, #16]
 80087da:	615a      	str	r2, [r3, #20]
 80087dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80087de:	1d3b      	adds	r3, r7, #4
 80087e0:	2220      	movs	r2, #32
 80087e2:	2100      	movs	r1, #0
 80087e4:	4618      	mov	r0, r3
 80087e6:	f001 fd9f 	bl	800a328 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80087ea:	4b57      	ldr	r3, [pc, #348]	; (8008948 <MX_TIM1_Init+0x19c>)
 80087ec:	4a57      	ldr	r2, [pc, #348]	; (800894c <MX_TIM1_Init+0x1a0>)
 80087ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80087f0:	4b55      	ldr	r3, [pc, #340]	; (8008948 <MX_TIM1_Init+0x19c>)
 80087f2:	2201      	movs	r2, #1
 80087f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087f6:	4b54      	ldr	r3, [pc, #336]	; (8008948 <MX_TIM1_Init+0x19c>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2048;
 80087fc:	4b52      	ldr	r3, [pc, #328]	; (8008948 <MX_TIM1_Init+0x19c>)
 80087fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008802:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008804:	4b50      	ldr	r3, [pc, #320]	; (8008948 <MX_TIM1_Init+0x19c>)
 8008806:	2200      	movs	r2, #0
 8008808:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800880a:	4b4f      	ldr	r3, [pc, #316]	; (8008948 <MX_TIM1_Init+0x19c>)
 800880c:	2200      	movs	r2, #0
 800880e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008810:	4b4d      	ldr	r3, [pc, #308]	; (8008948 <MX_TIM1_Init+0x19c>)
 8008812:	2200      	movs	r2, #0
 8008814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008816:	484c      	ldr	r0, [pc, #304]	; (8008948 <MX_TIM1_Init+0x19c>)
 8008818:	f7fc fe28 	bl	800546c <HAL_TIM_Base_Init>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8008822:	f000 febb 	bl	800959c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800882a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800882c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008830:	4619      	mov	r1, r3
 8008832:	4845      	ldr	r0, [pc, #276]	; (8008948 <MX_TIM1_Init+0x19c>)
 8008834:	f7fd fb14 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d001      	beq.n	8008842 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800883e:	f000 fead 	bl	800959c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008842:	4841      	ldr	r0, [pc, #260]	; (8008948 <MX_TIM1_Init+0x19c>)
 8008844:	f7fc feb0 	bl	80055a8 <HAL_TIM_PWM_Init>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800884e:	f000 fea5 	bl	800959c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8008852:	483d      	ldr	r0, [pc, #244]	; (8008948 <MX_TIM1_Init+0x19c>)
 8008854:	f7fc fe35 	bl	80054c2 <HAL_TIM_OC_Init>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800885e:	f000 fe9d 	bl	800959c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008862:	2300      	movs	r3, #0
 8008864:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008866:	2300      	movs	r3, #0
 8008868:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800886a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800886e:	4619      	mov	r1, r3
 8008870:	4835      	ldr	r0, [pc, #212]	; (8008948 <MX_TIM1_Init+0x19c>)
 8008872:	f7fe f839 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800887c:	f000 fe8e 	bl	800959c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008880:	2360      	movs	r3, #96	; 0x60
 8008882:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008888:	2300      	movs	r3, #0
 800888a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800888c:	2300      	movs	r3, #0
 800888e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008890:	2300      	movs	r3, #0
 8008892:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008894:	2300      	movs	r3, #0
 8008896:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008898:	2300      	movs	r3, #0
 800889a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800889c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088a0:	2200      	movs	r2, #0
 80088a2:	4619      	mov	r1, r3
 80088a4:	4828      	ldr	r0, [pc, #160]	; (8008948 <MX_TIM1_Init+0x19c>)
 80088a6:	f7fd fa15 	bl	8005cd4 <HAL_TIM_PWM_ConfigChannel>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80088b0:	f000 fe74 	bl	800959c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80088b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088b8:	2204      	movs	r2, #4
 80088ba:	4619      	mov	r1, r3
 80088bc:	4822      	ldr	r0, [pc, #136]	; (8008948 <MX_TIM1_Init+0x19c>)
 80088be:	f7fd fa09 	bl	8005cd4 <HAL_TIM_PWM_ConfigChannel>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80088c8:	f000 fe68 	bl	800959c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80088cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088d0:	2208      	movs	r2, #8
 80088d2:	4619      	mov	r1, r3
 80088d4:	481c      	ldr	r0, [pc, #112]	; (8008948 <MX_TIM1_Init+0x19c>)
 80088d6:	f7fd f9fd 	bl	8005cd4 <HAL_TIM_PWM_ConfigChannel>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80088e0:	f000 fe5c 	bl	800959c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80088e4:	2330      	movs	r3, #48	; 0x30
 80088e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1900;
 80088e8:	f240 736c 	movw	r3, #1900	; 0x76c
 80088ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80088ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088f2:	220c      	movs	r2, #12
 80088f4:	4619      	mov	r1, r3
 80088f6:	4814      	ldr	r0, [pc, #80]	; (8008948 <MX_TIM1_Init+0x19c>)
 80088f8:	f7fd f8f0 	bl	8005adc <HAL_TIM_OC_ConfigChannel>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8008902:	f000 fe4b 	bl	800959c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008906:	2300      	movs	r3, #0
 8008908:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800890a:	2300      	movs	r3, #0
 800890c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800890e:	2300      	movs	r3, #0
 8008910:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008916:	2300      	movs	r3, #0
 8008918:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800891a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800891e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008920:	2300      	movs	r3, #0
 8008922:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008924:	1d3b      	adds	r3, r7, #4
 8008926:	4619      	mov	r1, r3
 8008928:	4807      	ldr	r0, [pc, #28]	; (8008948 <MX_TIM1_Init+0x19c>)
 800892a:	f7fe f859 	bl	80069e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8008934:	f000 fe32 	bl	800959c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008938:	4803      	ldr	r0, [pc, #12]	; (8008948 <MX_TIM1_Init+0x19c>)
 800893a:	f001 fa9b 	bl	8009e74 <HAL_TIM_MspPostInit>

}
 800893e:	bf00      	nop
 8008940:	3758      	adds	r7, #88	; 0x58
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	20000824 	.word	0x20000824
 800894c:	40010000 	.word	0x40010000

08008950 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b08e      	sub	sp, #56	; 0x38
 8008954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800895a:	2200      	movs	r2, #0
 800895c:	601a      	str	r2, [r3, #0]
 800895e:	605a      	str	r2, [r3, #4]
 8008960:	609a      	str	r2, [r3, #8]
 8008962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008964:	f107 0320 	add.w	r3, r7, #32
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800896e:	1d3b      	adds	r3, r7, #4
 8008970:	2200      	movs	r2, #0
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	605a      	str	r2, [r3, #4]
 8008976:	609a      	str	r2, [r3, #8]
 8008978:	60da      	str	r2, [r3, #12]
 800897a:	611a      	str	r2, [r3, #16]
 800897c:	615a      	str	r2, [r3, #20]
 800897e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008980:	4b2b      	ldr	r3, [pc, #172]	; (8008a30 <MX_TIM2_Init+0xe0>)
 8008982:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008986:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8008988:	4b29      	ldr	r3, [pc, #164]	; (8008a30 <MX_TIM2_Init+0xe0>)
 800898a:	2204      	movs	r2, #4
 800898c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800898e:	4b28      	ldr	r3, [pc, #160]	; (8008a30 <MX_TIM2_Init+0xe0>)
 8008990:	2200      	movs	r2, #0
 8008992:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8008994:	4b26      	ldr	r3, [pc, #152]	; (8008a30 <MX_TIM2_Init+0xe0>)
 8008996:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800899a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800899c:	4b24      	ldr	r3, [pc, #144]	; (8008a30 <MX_TIM2_Init+0xe0>)
 800899e:	2200      	movs	r2, #0
 80089a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80089a2:	4b23      	ldr	r3, [pc, #140]	; (8008a30 <MX_TIM2_Init+0xe0>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80089a8:	4821      	ldr	r0, [pc, #132]	; (8008a30 <MX_TIM2_Init+0xe0>)
 80089aa:	f7fc fd5f 	bl	800546c <HAL_TIM_Base_Init>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80089b4:	f000 fdf2 	bl	800959c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80089b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80089be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089c2:	4619      	mov	r1, r3
 80089c4:	481a      	ldr	r0, [pc, #104]	; (8008a30 <MX_TIM2_Init+0xe0>)
 80089c6:	f7fd fa4b 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80089d0:	f000 fde4 	bl	800959c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80089d4:	4816      	ldr	r0, [pc, #88]	; (8008a30 <MX_TIM2_Init+0xe0>)
 80089d6:	f7fc fd74 	bl	80054c2 <HAL_TIM_OC_Init>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80089e0:	f000 fddc 	bl	800959c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80089e4:	2300      	movs	r3, #0
 80089e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80089e8:	2300      	movs	r3, #0
 80089ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80089ec:	f107 0320 	add.w	r3, r7, #32
 80089f0:	4619      	mov	r1, r3
 80089f2:	480f      	ldr	r0, [pc, #60]	; (8008a30 <MX_TIM2_Init+0xe0>)
 80089f4:	f7fd ff78 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80089fe:	f000 fdcd 	bl	800959c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8008a02:	2300      	movs	r3, #0
 8008a04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008a12:	1d3b      	adds	r3, r7, #4
 8008a14:	2200      	movs	r2, #0
 8008a16:	4619      	mov	r1, r3
 8008a18:	4805      	ldr	r0, [pc, #20]	; (8008a30 <MX_TIM2_Init+0xe0>)
 8008a1a:	f7fd f85f 	bl	8005adc <HAL_TIM_OC_ConfigChannel>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8008a24:	f000 fdba 	bl	800959c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008a28:	bf00      	nop
 8008a2a:	3738      	adds	r7, #56	; 0x38
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	2000091c 	.word	0x2000091c

08008a34 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08c      	sub	sp, #48	; 0x30
 8008a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8008a3a:	f107 030c 	add.w	r3, r7, #12
 8008a3e:	2224      	movs	r2, #36	; 0x24
 8008a40:	2100      	movs	r1, #0
 8008a42:	4618      	mov	r0, r3
 8008a44:	f001 fc70 	bl	800a328 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a48:	1d3b      	adds	r3, r7, #4
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	601a      	str	r2, [r3, #0]
 8008a4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008a50:	4b22      	ldr	r3, [pc, #136]	; (8008adc <MX_TIM8_Init+0xa8>)
 8008a52:	4a23      	ldr	r2, [pc, #140]	; (8008ae0 <MX_TIM8_Init+0xac>)
 8008a54:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8008a56:	4b21      	ldr	r3, [pc, #132]	; (8008adc <MX_TIM8_Init+0xa8>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a5c:	4b1f      	ldr	r3, [pc, #124]	; (8008adc <MX_TIM8_Init+0xa8>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8008a62:	4b1e      	ldr	r3, [pc, #120]	; (8008adc <MX_TIM8_Init+0xa8>)
 8008a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a68:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a6a:	4b1c      	ldr	r3, [pc, #112]	; (8008adc <MX_TIM8_Init+0xa8>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008a70:	4b1a      	ldr	r3, [pc, #104]	; (8008adc <MX_TIM8_Init+0xa8>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a76:	4b19      	ldr	r3, [pc, #100]	; (8008adc <MX_TIM8_Init+0xa8>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008a80:	2300      	movs	r3, #0
 8008a82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008a84:	2301      	movs	r3, #1
 8008a86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008a90:	2300      	movs	r3, #0
 8008a92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008a94:	2301      	movs	r3, #1
 8008a96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8008aa0:	f107 030c 	add.w	r3, r7, #12
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	480d      	ldr	r0, [pc, #52]	; (8008adc <MX_TIM8_Init+0xa8>)
 8008aa8:	f7fc fe27 	bl	80056fa <HAL_TIM_Encoder_Init>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8008ab2:	f000 fd73 	bl	800959c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008ab6:	2320      	movs	r3, #32
 8008ab8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008aba:	2300      	movs	r3, #0
 8008abc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008abe:	1d3b      	adds	r3, r7, #4
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4806      	ldr	r0, [pc, #24]	; (8008adc <MX_TIM8_Init+0xa8>)
 8008ac4:	f7fd ff10 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8008ace:	f000 fd65 	bl	800959c <Error_Handler>
  //HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); // this didn't seem to be necessary


  /* USER CODE END TIM8_Init 2 */

}
 8008ad2:	bf00      	nop
 8008ad4:	3730      	adds	r7, #48	; 0x30
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	20000480 	.word	0x20000480
 8008ae0:	40010400 	.word	0x40010400

08008ae4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b08c      	sub	sp, #48	; 0x30
 8008ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008aea:	f107 0320 	add.w	r3, r7, #32
 8008aee:	2200      	movs	r2, #0
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	605a      	str	r2, [r3, #4]
 8008af4:	609a      	str	r2, [r3, #8]
 8008af6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008af8:	1d3b      	adds	r3, r7, #4
 8008afa:	2200      	movs	r2, #0
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	605a      	str	r2, [r3, #4]
 8008b00:	609a      	str	r2, [r3, #8]
 8008b02:	60da      	str	r2, [r3, #12]
 8008b04:	611a      	str	r2, [r3, #16]
 8008b06:	615a      	str	r2, [r3, #20]
 8008b08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8008b0a:	4b2d      	ldr	r3, [pc, #180]	; (8008bc0 <MX_TIM9_Init+0xdc>)
 8008b0c:	4a2d      	ldr	r2, [pc, #180]	; (8008bc4 <MX_TIM9_Init+0xe0>)
 8008b0e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2;
 8008b10:	4b2b      	ldr	r3, [pc, #172]	; (8008bc0 <MX_TIM9_Init+0xdc>)
 8008b12:	2202      	movs	r2, #2
 8008b14:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b16:	4b2a      	ldr	r3, [pc, #168]	; (8008bc0 <MX_TIM9_Init+0xdc>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096;
 8008b1c:	4b28      	ldr	r3, [pc, #160]	; (8008bc0 <MX_TIM9_Init+0xdc>)
 8008b1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b22:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b24:	4b26      	ldr	r3, [pc, #152]	; (8008bc0 <MX_TIM9_Init+0xdc>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b2a:	4b25      	ldr	r3, [pc, #148]	; (8008bc0 <MX_TIM9_Init+0xdc>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8008b30:	4823      	ldr	r0, [pc, #140]	; (8008bc0 <MX_TIM9_Init+0xdc>)
 8008b32:	f7fc fc9b 	bl	800546c <HAL_TIM_Base_Init>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8008b3c:	f000 fd2e 	bl	800959c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b44:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8008b46:	f107 0320 	add.w	r3, r7, #32
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	481c      	ldr	r0, [pc, #112]	; (8008bc0 <MX_TIM9_Init+0xdc>)
 8008b4e:	f7fd f987 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8008b58:	f000 fd20 	bl	800959c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8008b5c:	4818      	ldr	r0, [pc, #96]	; (8008bc0 <MX_TIM9_Init+0xdc>)
 8008b5e:	f7fc fd23 	bl	80055a8 <HAL_TIM_PWM_Init>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8008b68:	f000 fd18 	bl	800959c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008b6c:	2360      	movs	r3, #96	; 0x60
 8008b6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8008b70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008b76:	2300      	movs	r3, #0
 8008b78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008b7e:	1d3b      	adds	r3, r7, #4
 8008b80:	2200      	movs	r2, #0
 8008b82:	4619      	mov	r1, r3
 8008b84:	480e      	ldr	r0, [pc, #56]	; (8008bc0 <MX_TIM9_Init+0xdc>)
 8008b86:	f7fd f8a5 	bl	8005cd4 <HAL_TIM_PWM_ConfigChannel>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8008b90:	f000 fd04 	bl	800959c <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8008b94:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008b98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008b9a:	1d3b      	adds	r3, r7, #4
 8008b9c:	2204      	movs	r2, #4
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	4807      	ldr	r0, [pc, #28]	; (8008bc0 <MX_TIM9_Init+0xdc>)
 8008ba2:	f7fd f897 	bl	8005cd4 <HAL_TIM_PWM_ConfigChannel>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <MX_TIM9_Init+0xcc>
  {
    Error_Handler();
 8008bac:	f000 fcf6 	bl	800959c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8008bb0:	4803      	ldr	r0, [pc, #12]	; (8008bc0 <MX_TIM9_Init+0xdc>)
 8008bb2:	f001 f95f 	bl	8009e74 <HAL_TIM_MspPostInit>

}
 8008bb6:	bf00      	nop
 8008bb8:	3730      	adds	r7, #48	; 0x30
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	200008a0 	.word	0x200008a0
 8008bc4:	40014000 	.word	0x40014000

08008bc8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b08c      	sub	sp, #48	; 0x30
 8008bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008bce:	f107 0320 	add.w	r3, r7, #32
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]
 8008bd6:	605a      	str	r2, [r3, #4]
 8008bd8:	609a      	str	r2, [r3, #8]
 8008bda:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008bdc:	1d3b      	adds	r3, r7, #4
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	605a      	str	r2, [r3, #4]
 8008be4:	609a      	str	r2, [r3, #8]
 8008be6:	60da      	str	r2, [r3, #12]
 8008be8:	611a      	str	r2, [r3, #16]
 8008bea:	615a      	str	r2, [r3, #20]
 8008bec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8008bee:	4b24      	ldr	r3, [pc, #144]	; (8008c80 <MX_TIM12_Init+0xb8>)
 8008bf0:	4a24      	ldr	r2, [pc, #144]	; (8008c84 <MX_TIM12_Init+0xbc>)
 8008bf2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 4;
 8008bf4:	4b22      	ldr	r3, [pc, #136]	; (8008c80 <MX_TIM12_Init+0xb8>)
 8008bf6:	2204      	movs	r2, #4
 8008bf8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008bfa:	4b21      	ldr	r3, [pc, #132]	; (8008c80 <MX_TIM12_Init+0xb8>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8008c00:	4b1f      	ldr	r3, [pc, #124]	; (8008c80 <MX_TIM12_Init+0xb8>)
 8008c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c06:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c08:	4b1d      	ldr	r3, [pc, #116]	; (8008c80 <MX_TIM12_Init+0xb8>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c0e:	4b1c      	ldr	r3, [pc, #112]	; (8008c80 <MX_TIM12_Init+0xb8>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8008c14:	481a      	ldr	r0, [pc, #104]	; (8008c80 <MX_TIM12_Init+0xb8>)
 8008c16:	f7fc fc29 	bl	800546c <HAL_TIM_Base_Init>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8008c20:	f000 fcbc 	bl	800959c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c28:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8008c2a:	f107 0320 	add.w	r3, r7, #32
 8008c2e:	4619      	mov	r1, r3
 8008c30:	4813      	ldr	r0, [pc, #76]	; (8008c80 <MX_TIM12_Init+0xb8>)
 8008c32:	f7fd f915 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8008c3c:	f000 fcae 	bl	800959c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 8008c40:	480f      	ldr	r0, [pc, #60]	; (8008c80 <MX_TIM12_Init+0xb8>)
 8008c42:	f7fc fc3e 	bl	80054c2 <HAL_TIM_OC_Init>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d001      	beq.n	8008c50 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8008c4c:	f000 fca6 	bl	800959c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8008c50:	2300      	movs	r3, #0
 8008c52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008c60:	1d3b      	adds	r3, r7, #4
 8008c62:	2200      	movs	r2, #0
 8008c64:	4619      	mov	r1, r3
 8008c66:	4806      	ldr	r0, [pc, #24]	; (8008c80 <MX_TIM12_Init+0xb8>)
 8008c68:	f7fc ff38 	bl	8005adc <HAL_TIM_OC_ConfigChannel>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8008c72:	f000 fc93 	bl	800959c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8008c76:	bf00      	nop
 8008c78:	3730      	adds	r7, #48	; 0x30
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	200009e4 	.word	0x200009e4
 8008c84:	40001800 	.word	0x40001800

08008c88 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8008c8e:	463b      	mov	r3, r7
 8008c90:	2200      	movs	r2, #0
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	605a      	str	r2, [r3, #4]
 8008c96:	609a      	str	r2, [r3, #8]
 8008c98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8008c9a:	4b1c      	ldr	r3, [pc, #112]	; (8008d0c <MX_TIM13_Init+0x84>)
 8008c9c:	4a1c      	ldr	r2, [pc, #112]	; (8008d10 <MX_TIM13_Init+0x88>)
 8008c9e:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8008ca0:	4b1a      	ldr	r3, [pc, #104]	; (8008d0c <MX_TIM13_Init+0x84>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ca6:	4b19      	ldr	r3, [pc, #100]	; (8008d0c <MX_TIM13_Init+0x84>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8008cac:	4b17      	ldr	r3, [pc, #92]	; (8008d0c <MX_TIM13_Init+0x84>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008cb2:	4b16      	ldr	r3, [pc, #88]	; (8008d0c <MX_TIM13_Init+0x84>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cb8:	4b14      	ldr	r3, [pc, #80]	; (8008d0c <MX_TIM13_Init+0x84>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8008cbe:	4813      	ldr	r0, [pc, #76]	; (8008d0c <MX_TIM13_Init+0x84>)
 8008cc0:	f7fc fbd4 	bl	800546c <HAL_TIM_Base_Init>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <MX_TIM13_Init+0x46>
  {
    Error_Handler();
 8008cca:	f000 fc67 	bl	800959c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8008cce:	480f      	ldr	r0, [pc, #60]	; (8008d0c <MX_TIM13_Init+0x84>)
 8008cd0:	f7fc fcde 	bl	8005690 <HAL_TIM_IC_Init>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <MX_TIM13_Init+0x56>
  {
    Error_Handler();
 8008cda:	f000 fc5f 	bl	800959c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008cee:	463b      	mov	r3, r7
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	4805      	ldr	r0, [pc, #20]	; (8008d0c <MX_TIM13_Init+0x84>)
 8008cf6:	f7fc ff51 	bl	8005b9c <HAL_TIM_IC_ConfigChannel>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <MX_TIM13_Init+0x7c>
  {
    Error_Handler();
 8008d00:	f000 fc4c 	bl	800959c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8008d04:	bf00      	nop
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20000780 	.word	0x20000780
 8008d10:	40001c00 	.word	0x40001c00

08008d14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008d18:	4b11      	ldr	r3, [pc, #68]	; (8008d60 <MX_USART3_UART_Init+0x4c>)
 8008d1a:	4a12      	ldr	r2, [pc, #72]	; (8008d64 <MX_USART3_UART_Init+0x50>)
 8008d1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008d1e:	4b10      	ldr	r3, [pc, #64]	; (8008d60 <MX_USART3_UART_Init+0x4c>)
 8008d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008d24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008d26:	4b0e      	ldr	r3, [pc, #56]	; (8008d60 <MX_USART3_UART_Init+0x4c>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008d2c:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <MX_USART3_UART_Init+0x4c>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008d32:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <MX_USART3_UART_Init+0x4c>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008d38:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <MX_USART3_UART_Init+0x4c>)
 8008d3a:	220c      	movs	r2, #12
 8008d3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d3e:	4b08      	ldr	r3, [pc, #32]	; (8008d60 <MX_USART3_UART_Init+0x4c>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d44:	4b06      	ldr	r3, [pc, #24]	; (8008d60 <MX_USART3_UART_Init+0x4c>)
 8008d46:	2200      	movs	r2, #0
 8008d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008d4a:	4805      	ldr	r0, [pc, #20]	; (8008d60 <MX_USART3_UART_Init+0x4c>)
 8008d4c:	f7fd fed3 	bl	8006af6 <HAL_UART_Init>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d001      	beq.n	8008d5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008d56:	f000 fc21 	bl	800959c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008d5a:	bf00      	nop
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	200004c0 	.word	0x200004c0
 8008d64:	40004800 	.word	0x40004800

08008d68 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008d6e:	2300      	movs	r3, #0
 8008d70:	607b      	str	r3, [r7, #4]
 8008d72:	4b1f      	ldr	r3, [pc, #124]	; (8008df0 <MX_DMA_Init+0x88>)
 8008d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d76:	4a1e      	ldr	r2, [pc, #120]	; (8008df0 <MX_DMA_Init+0x88>)
 8008d78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d7e:	4b1c      	ldr	r3, [pc, #112]	; (8008df0 <MX_DMA_Init+0x88>)
 8008d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d86:	607b      	str	r3, [r7, #4]
 8008d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	603b      	str	r3, [r7, #0]
 8008d8e:	4b18      	ldr	r3, [pc, #96]	; (8008df0 <MX_DMA_Init+0x88>)
 8008d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d92:	4a17      	ldr	r2, [pc, #92]	; (8008df0 <MX_DMA_Init+0x88>)
 8008d94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d98:	6313      	str	r3, [r2, #48]	; 0x30
 8008d9a:	4b15      	ldr	r3, [pc, #84]	; (8008df0 <MX_DMA_Init+0x88>)
 8008d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008da2:	603b      	str	r3, [r7, #0]
 8008da4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8008da6:	2200      	movs	r2, #0
 8008da8:	2100      	movs	r1, #0
 8008daa:	200e      	movs	r0, #14
 8008dac:	f7f9 faff 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8008db0:	200e      	movs	r0, #14
 8008db2:	f7f9 fb18 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8008db6:	2200      	movs	r2, #0
 8008db8:	2100      	movs	r1, #0
 8008dba:	2038      	movs	r0, #56	; 0x38
 8008dbc:	f7f9 faf7 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8008dc0:	2038      	movs	r0, #56	; 0x38
 8008dc2:	f7f9 fb10 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	2100      	movs	r1, #0
 8008dca:	2039      	movs	r0, #57	; 0x39
 8008dcc:	f7f9 faef 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8008dd0:	2039      	movs	r0, #57	; 0x39
 8008dd2:	f7f9 fb08 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2100      	movs	r1, #0
 8008dda:	203a      	movs	r0, #58	; 0x3a
 8008ddc:	f7f9 fae7 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8008de0:	203a      	movs	r0, #58	; 0x3a
 8008de2:	f7f9 fb00 	bl	80023e6 <HAL_NVIC_EnableIRQ>

}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	40023800 	.word	0x40023800

08008df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08c      	sub	sp, #48	; 0x30
 8008df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dfa:	f107 031c 	add.w	r3, r7, #28
 8008dfe:	2200      	movs	r2, #0
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	605a      	str	r2, [r3, #4]
 8008e04:	609a      	str	r2, [r3, #8]
 8008e06:	60da      	str	r2, [r3, #12]
 8008e08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	61bb      	str	r3, [r7, #24]
 8008e0e:	4b57      	ldr	r3, [pc, #348]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e12:	4a56      	ldr	r2, [pc, #344]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008e14:	f043 0310 	orr.w	r3, r3, #16
 8008e18:	6313      	str	r3, [r2, #48]	; 0x30
 8008e1a:	4b54      	ldr	r3, [pc, #336]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1e:	f003 0310 	and.w	r3, r3, #16
 8008e22:	61bb      	str	r3, [r7, #24]
 8008e24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008e26:	2300      	movs	r3, #0
 8008e28:	617b      	str	r3, [r7, #20]
 8008e2a:	4b50      	ldr	r3, [pc, #320]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2e:	4a4f      	ldr	r2, [pc, #316]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e34:	6313      	str	r3, [r2, #48]	; 0x30
 8008e36:	4b4d      	ldr	r3, [pc, #308]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e42:	2300      	movs	r3, #0
 8008e44:	613b      	str	r3, [r7, #16]
 8008e46:	4b49      	ldr	r3, [pc, #292]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4a:	4a48      	ldr	r2, [pc, #288]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008e4c:	f043 0304 	orr.w	r3, r3, #4
 8008e50:	6313      	str	r3, [r2, #48]	; 0x30
 8008e52:	4b46      	ldr	r3, [pc, #280]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	613b      	str	r3, [r7, #16]
 8008e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	4b42      	ldr	r3, [pc, #264]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e66:	4a41      	ldr	r2, [pc, #260]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008e68:	f043 0301 	orr.w	r3, r3, #1
 8008e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8008e6e:	4b3f      	ldr	r3, [pc, #252]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60bb      	str	r3, [r7, #8]
 8008e7e:	4b3b      	ldr	r3, [pc, #236]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e82:	4a3a      	ldr	r2, [pc, #232]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008e84:	f043 0302 	orr.w	r3, r3, #2
 8008e88:	6313      	str	r3, [r2, #48]	; 0x30
 8008e8a:	4b38      	ldr	r3, [pc, #224]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	60bb      	str	r3, [r7, #8]
 8008e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e96:	2300      	movs	r3, #0
 8008e98:	607b      	str	r3, [r7, #4]
 8008e9a:	4b34      	ldr	r3, [pc, #208]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9e:	4a33      	ldr	r2, [pc, #204]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008ea0:	f043 0308 	orr.w	r3, r3, #8
 8008ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ea6:	4b31      	ldr	r3, [pc, #196]	; (8008f6c <MX_GPIO_Init+0x178>)
 8008ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eaa:	f003 0308 	and.w	r3, r3, #8
 8008eae:	607b      	str	r3, [r7, #4]
 8008eb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin, GPIO_PIN_RESET);
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f24c 0118 	movw	r1, #49176	; 0xc018
 8008eb8:	482d      	ldr	r0, [pc, #180]	; (8008f70 <MX_GPIO_Init+0x17c>)
 8008eba:	f7fa f82d 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f64b 0180 	movw	r1, #47232	; 0xb880
 8008ec4:	482b      	ldr	r0, [pc, #172]	; (8008f74 <MX_GPIO_Init+0x180>)
 8008ec6:	f7fa f827 	bl	8002f18 <HAL_GPIO_WritePin>
                          |nSCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin EN_GATE_Pin M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin;
 8008eca:	f24c 0318 	movw	r3, #49176	; 0xc018
 8008ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008edc:	f107 031c 	add.w	r3, r7, #28
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4823      	ldr	r0, [pc, #140]	; (8008f70 <MX_GPIO_Init+0x17c>)
 8008ee4:	f7f9 fe7e 	bl	8002be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 debug1_out_Pin debug2_out_Pin ROT0_nCS_Pin 
                           nSCS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 8008ee8:	f64b 0380 	movw	r3, #47232	; 0xb880
 8008eec:	61fb      	str	r3, [r7, #28]
                          |nSCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008efa:	f107 031c 	add.w	r3, r7, #28
 8008efe:	4619      	mov	r1, r3
 8008f00:	481c      	ldr	r0, [pc, #112]	; (8008f74 <MX_GPIO_Init+0x180>)
 8008f02:	f7f9 fe6f 	bl	8002be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : debug1_in_Pin */
  GPIO_InitStruct.Pin = debug1_in_Pin;
 8008f06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f10:	2300      	movs	r3, #0
 8008f12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(debug1_in_GPIO_Port, &GPIO_InitStruct);
 8008f14:	f107 031c 	add.w	r3, r7, #28
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4816      	ldr	r0, [pc, #88]	; (8008f74 <MX_GPIO_Init+0x180>)
 8008f1c:	f7f9 fe62 	bl	8002be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT0_I_W_Pin */
  GPIO_InitStruct.Pin = ROT0_I_W_Pin;
 8008f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008f26:	4b14      	ldr	r3, [pc, #80]	; (8008f78 <MX_GPIO_Init+0x184>)
 8008f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ROT0_I_W_GPIO_Port, &GPIO_InitStruct);
 8008f2e:	f107 031c 	add.w	r3, r7, #28
 8008f32:	4619      	mov	r1, r3
 8008f34:	4811      	ldr	r0, [pc, #68]	; (8008f7c <MX_GPIO_Init+0x188>)
 8008f36:	f7f9 fe55 	bl	8002be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 8008f3a:	2370      	movs	r3, #112	; 0x70
 8008f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f42:	2301      	movs	r3, #1
 8008f44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f46:	f107 031c 	add.w	r3, r7, #28
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4809      	ldr	r0, [pc, #36]	; (8008f74 <MX_GPIO_Init+0x180>)
 8008f4e:	f7f9 fe49 	bl	8002be4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8008f52:	2200      	movs	r2, #0
 8008f54:	2100      	movs	r1, #0
 8008f56:	2017      	movs	r0, #23
 8008f58:	f7f9 fa29 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008f5c:	2017      	movs	r0, #23
 8008f5e:	f7f9 fa42 	bl	80023e6 <HAL_NVIC_EnableIRQ>

}
 8008f62:	bf00      	nop
 8008f64:	3730      	adds	r7, #48	; 0x30
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	40023800 	.word	0x40023800
 8008f70:	40021000 	.word	0x40021000
 8008f74:	40020c00 	.word	0x40020c00
 8008f78:	10110000 	.word	0x10110000
 8008f7c:	40020800 	.word	0x40020800

08008f80 <playSound>:
void myDelay(void){
	HAL_Delay(1);

}

void playSound(uint16_t periode, uint16_t volume, uint16_t cycles){
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	4603      	mov	r3, r0
 8008f88:	80fb      	strh	r3, [r7, #6]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	80bb      	strh	r3, [r7, #4]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	807b      	strh	r3, [r7, #2]
	// TODO disable interrupt for the duration of sound
	//HAL_NVIC_DisableIRQ(TIM8_UP_TIM13_IRQn);
	//HAL_Delay(1000);

	for (uint16_t i=0; i<cycles; i++){
 8008f92:	2300      	movs	r3, #0
 8008f94:	81fb      	strh	r3, [r7, #14]
 8008f96:	e016      	b.n	8008fc6 <playSound+0x46>
		TIM1->CCR1 = 0; //takes<150ns
 8008f98:	4b0f      	ldr	r3, [pc, #60]	; (8008fd8 <playSound+0x58>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = volume; //takes<150ns
 8008f9e:	4a0e      	ldr	r2, [pc, #56]	; (8008fd8 <playSound+0x58>)
 8008fa0:	88bb      	ldrh	r3, [r7, #4]
 8008fa2:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_Delay(periode);
 8008fa4:	88fb      	ldrh	r3, [r7, #6]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7f8 f84a 	bl	8001040 <HAL_Delay>
		TIM1->CCR1 = volume; //takes<150ns
 8008fac:	4a0a      	ldr	r2, [pc, #40]	; (8008fd8 <playSound+0x58>)
 8008fae:	88bb      	ldrh	r3, [r7, #4]
 8008fb0:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = 0; //takes<150ns
 8008fb2:	4b09      	ldr	r3, [pc, #36]	; (8008fd8 <playSound+0x58>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(periode);
 8008fb8:	88fb      	ldrh	r3, [r7, #6]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7f8 f840 	bl	8001040 <HAL_Delay>
	for (uint16_t i=0; i<cycles; i++){
 8008fc0:	89fb      	ldrh	r3, [r7, #14]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	81fb      	strh	r3, [r7, #14]
 8008fc6:	89fa      	ldrh	r2, [r7, #14]
 8008fc8:	887b      	ldrh	r3, [r7, #2]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d3e4      	bcc.n	8008f98 <playSound+0x18>
	}

	//HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
}
 8008fce:	bf00      	nop
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	40010000 	.word	0x40010000

08008fdc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT0_I_W_Pin){
 8008fe6:	88fb      	ldrh	r3, [r7, #6]
 8008fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fec:	d107      	bne.n	8008ffe <HAL_GPIO_EXTI_Callback+0x22>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8008fee:	2108      	movs	r1, #8
 8008ff0:	4805      	ldr	r0, [pc, #20]	; (8009008 <HAL_GPIO_EXTI_Callback+0x2c>)
 8008ff2:	f7f9 ffaa 	bl	8002f4a <HAL_GPIO_TogglePin>
		TIM8->CNT = 0;     //TODO: there is acually some stepping happening under the I pulse so we have to distinguish between step from right and step from left
 8008ff6:	4b05      	ldr	r3, [pc, #20]	; (800900c <HAL_GPIO_EXTI_Callback+0x30>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	else{
		__NOP();
	}
}
 8008ffc:	e000      	b.n	8009000 <HAL_GPIO_EXTI_Callback+0x24>
		__NOP();
 8008ffe:	bf00      	nop
}
 8009000:	bf00      	nop
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	40021000 	.word	0x40021000
 800900c:	40010400 	.word	0x40010400

08009010 <HAL_TIM_IC_CaptureCallback>:



//this is it
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8009010:	b5b0      	push	{r4, r5, r7, lr}
 8009012:	b088      	sub	sp, #32
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
	// see https://community.st.com/s/question/0D50X00009XkWUpSAN/encoder-mode-and-rotary-encoder

	//debug2_out_GPIO_Port->BSRR = debug2_out_Pin; //takes 60ns == 5 clock cycles
	//debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin << 16U;
	//HAL_GPIO_TogglePin(debug2_out_GPIO_Port, debug2_out_Pin);
	if(htim->Instance == TIM8){
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4ab0      	ldr	r2, [pc, #704]	; (80092e0 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 800901e:	4293      	cmp	r3, r2
 8009020:	f040 820d 	bne.w	800943e <HAL_TIM_IC_CaptureCallback+0x42e>

		if (skip_update){ //TODO somehow the Callback is triggered at this strange 25% duty cycle so we just look at every second update to get a constant frequency
 8009024:	4baf      	ldr	r3, [pc, #700]	; (80092e4 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d003      	beq.n	8009034 <HAL_TIM_IC_CaptureCallback+0x24>
			skip_update = 0;
 800902c:	4bad      	ldr	r3, [pc, #692]	; (80092e4 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 800902e:	2200      	movs	r2, #0
 8009030:	601a      	str	r2, [r3, #0]
	}


	//counterISR++;

}
 8009032:	e204      	b.n	800943e <HAL_TIM_IC_CaptureCallback+0x42e>
			skip_update = 1;
 8009034:	4bab      	ldr	r3, [pc, #684]	; (80092e4 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8009036:	2201      	movs	r2, #1
 8009038:	601a      	str	r2, [r3, #0]
			if (abs(av_velocity) > 5 &&  skip_update_high_v == 1){
 800903a:	4bab      	ldr	r3, [pc, #684]	; (80092e8 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800903c:	edd3 7a00 	vldr	s15, [r3]
 8009040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009044:	ee17 3a90 	vmov	r3, s15
 8009048:	2b00      	cmp	r3, #0
 800904a:	bfb8      	it	lt
 800904c:	425b      	neglt	r3, r3
 800904e:	2b05      	cmp	r3, #5
 8009050:	dd07      	ble.n	8009062 <HAL_TIM_IC_CaptureCallback+0x52>
 8009052:	4ba6      	ldr	r3, [pc, #664]	; (80092ec <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d103      	bne.n	8009062 <HAL_TIM_IC_CaptureCallback+0x52>
				skip_update_high_v = 0;
 800905a:	4ba4      	ldr	r3, [pc, #656]	; (80092ec <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800905c:	2200      	movs	r2, #0
 800905e:	601a      	str	r2, [r3, #0]
}
 8009060:	e1ed      	b.n	800943e <HAL_TIM_IC_CaptureCallback+0x42e>
				debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8009062:	4ba3      	ldr	r3, [pc, #652]	; (80092f0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8009064:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009068:	619a      	str	r2, [r3, #24]
				skip_update_high_v = 1;
 800906a:	4ba0      	ldr	r3, [pc, #640]	; (80092ec <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800906c:	2201      	movs	r2, #1
 800906e:	601a      	str	r2, [r3, #0]
				EncVal = TIM8->CNT;//takes 200ns
 8009070:	4b9b      	ldr	r3, [pc, #620]	; (80092e0 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8009072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009074:	b21a      	sxth	r2, r3
 8009076:	4b9f      	ldr	r3, [pc, #636]	; (80092f4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8009078:	801a      	strh	r2, [r3, #0]
				tim12_counter = TIM2->CNT;
 800907a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	4a9d      	ldr	r2, [pc, #628]	; (80092f8 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8009082:	6013      	str	r3, [r2, #0]
				if (tim12_counter > 2000){ // TODO fix the issue that this gets almost never called when velocity is super low.
 8009084:	4b9c      	ldr	r3, [pc, #624]	; (80092f8 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800908c:	d963      	bls.n	8009156 <HAL_TIM_IC_CaptureCallback+0x146>
					TIM2->CNT = 0;
 800908e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009092:	2200      	movs	r2, #0
 8009094:	625a      	str	r2, [r3, #36]	; 0x24
					int EncDiff = EncVal-last_EncVal;
 8009096:	4b97      	ldr	r3, [pc, #604]	; (80092f4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8009098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800909c:	461a      	mov	r2, r3
 800909e:	4b97      	ldr	r3, [pc, #604]	; (80092fc <HAL_TIM_IC_CaptureCallback+0x2ec>)
 80090a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	61fb      	str	r3, [r7, #28]
					if (EncDiff > 1000){ // if jump is more than a half rotation it's most likely the 0 crossing
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090ae:	dd04      	ble.n	80090ba <HAL_TIM_IC_CaptureCallback+0xaa>
						EncDiff -= 2000;
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80090b6:	61fb      	str	r3, [r7, #28]
 80090b8:	e007      	b.n	80090ca <HAL_TIM_IC_CaptureCallback+0xba>
					else if (EncDiff < -1000){
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80090c0:	da03      	bge.n	80090ca <HAL_TIM_IC_CaptureCallback+0xba>
						EncDiff += 2000;
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80090c8:	61fb      	str	r3, [r7, #28]
					velocity = (float)(EncDiff) / (float)tim12_counter; //[steps/counts]
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	ee07 3a90 	vmov	s15, r3
 80090d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80090d4:	4b88      	ldr	r3, [pc, #544]	; (80092f8 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	ee07 3a90 	vmov	s15, r3
 80090dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80090e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090e4:	4b86      	ldr	r3, [pc, #536]	; (8009300 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80090e6:	edc3 7a00 	vstr	s15, [r3]
					velocity *= 10500; // /2000 steps/round * 21000000 counts/sec --> [round/sec]  //TODO velocity seems too high by factor of 2 or 3 maybe same clock frequency issue that we actually run at 42 MHz. !!! TODO check clock frequency  // TODO divided by 10 as well
 80090ea:	4b85      	ldr	r3, [pc, #532]	; (8009300 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80090ec:	edd3 7a00 	vldr	s15, [r3]
 80090f0:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8009304 <HAL_TIM_IC_CaptureCallback+0x2f4>
 80090f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090f8:	4b81      	ldr	r3, [pc, #516]	; (8009300 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80090fa:	edc3 7a00 	vstr	s15, [r3]
					av_velocity = 0.95 * av_velocity + 0.05 * velocity;
 80090fe:	4b7a      	ldr	r3, [pc, #488]	; (80092e8 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4618      	mov	r0, r3
 8009104:	f7f7 fa20 	bl	8000548 <__aeabi_f2d>
 8009108:	a36f      	add	r3, pc, #444	; (adr r3, 80092c8 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	f7f7 fa73 	bl	80005f8 <__aeabi_dmul>
 8009112:	4603      	mov	r3, r0
 8009114:	460c      	mov	r4, r1
 8009116:	4625      	mov	r5, r4
 8009118:	461c      	mov	r4, r3
 800911a:	4b79      	ldr	r3, [pc, #484]	; (8009300 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4618      	mov	r0, r3
 8009120:	f7f7 fa12 	bl	8000548 <__aeabi_f2d>
 8009124:	a36a      	add	r3, pc, #424	; (adr r3, 80092d0 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8009126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912a:	f7f7 fa65 	bl	80005f8 <__aeabi_dmul>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4620      	mov	r0, r4
 8009134:	4629      	mov	r1, r5
 8009136:	f7f7 f8a9 	bl	800028c <__adddf3>
 800913a:	4603      	mov	r3, r0
 800913c:	460c      	mov	r4, r1
 800913e:	4618      	mov	r0, r3
 8009140:	4621      	mov	r1, r4
 8009142:	f7f7 fd3b 	bl	8000bbc <__aeabi_d2f>
 8009146:	4602      	mov	r2, r0
 8009148:	4b67      	ldr	r3, [pc, #412]	; (80092e8 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800914a:	601a      	str	r2, [r3, #0]
					last_EncVal = EncVal;
 800914c:	4b69      	ldr	r3, [pc, #420]	; (80092f4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800914e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009152:	4b6a      	ldr	r3, [pc, #424]	; (80092fc <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8009154:	801a      	strh	r2, [r3, #0]
				phase = (float) EncVal * 0.02199 ; //(float) EncVal / 2000.0 * 2*PI * 7 ; //takes 1500ns
 8009156:	4b67      	ldr	r3, [pc, #412]	; (80092f4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8009158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800915c:	ee07 3a90 	vmov	s15, r3
 8009160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009164:	ee17 0a90 	vmov	r0, s15
 8009168:	f7f7 f9ee 	bl	8000548 <__aeabi_f2d>
 800916c:	a35a      	add	r3, pc, #360	; (adr r3, 80092d8 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	f7f7 fa41 	bl	80005f8 <__aeabi_dmul>
 8009176:	4603      	mov	r3, r0
 8009178:	460c      	mov	r4, r1
 800917a:	4618      	mov	r0, r3
 800917c:	4621      	mov	r1, r4
 800917e:	f7f7 fd1d 	bl	8000bbc <__aeabi_d2f>
 8009182:	4602      	mov	r2, r0
 8009184:	4b60      	ldr	r3, [pc, #384]	; (8009308 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8009186:	601a      	str	r2, [r3, #0]
				phase -= phase0;
 8009188:	4b5f      	ldr	r3, [pc, #380]	; (8009308 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800918a:	ed93 7a00 	vldr	s14, [r3]
 800918e:	4b5f      	ldr	r3, [pc, #380]	; (800930c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8009190:	edd3 7a00 	vldr	s15, [r3]
 8009194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009198:	4b5b      	ldr	r3, [pc, #364]	; (8009308 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800919a:	edc3 7a00 	vstr	s15, [r3]
				float u0 = 0.5773; //0.5 * 2.0 / 1.73205;// maximal possible U on one coil thanks to wankel //takes<200ns
 800919e:	4b5c      	ldr	r3, [pc, #368]	; (8009310 <HAL_TIM_IC_CaptureCallback+0x300>)
 80091a0:	60fb      	str	r3, [r7, #12]
				float modified_amp = amp + stiffness * av_velocity * direction; // TODO the abs allows same stiffness to make it softer for both directions - without a signchange is needed BUT turnaround is super aggressive now :( SAME issue with direction - super forceful reverse but sign identical --- looks like v needs to direct also the phase !!!!
 80091a2:	4b5c      	ldr	r3, [pc, #368]	; (8009314 <HAL_TIM_IC_CaptureCallback+0x304>)
 80091a4:	ed93 7a00 	vldr	s14, [r3]
 80091a8:	4b4f      	ldr	r3, [pc, #316]	; (80092e8 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80091aa:	edd3 7a00 	vldr	s15, [r3]
 80091ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80091b2:	4b59      	ldr	r3, [pc, #356]	; (8009318 <HAL_TIM_IC_CaptureCallback+0x308>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80091c2:	4b56      	ldr	r3, [pc, #344]	; (800931c <HAL_TIM_IC_CaptureCallback+0x30c>)
 80091c4:	edd3 7a00 	vldr	s15, [r3]
 80091c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091cc:	edc7 7a02 	vstr	s15, [r7, #8]
				u0 *= modified_amp;  //takes<200ns
 80091d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80091d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80091d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091dc:	edc7 7a03 	vstr	s15, [r7, #12]
				u0 *= run_motor;  //takes<200ns
 80091e0:	4b4f      	ldr	r3, [pc, #316]	; (8009320 <HAL_TIM_IC_CaptureCallback+0x310>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	ee07 3a90 	vmov	s15, r3
 80091e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80091f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091f4:	edc7 7a03 	vstr	s15, [r7, #12]
				if (direction == 1){
 80091f8:	4b47      	ldr	r3, [pc, #284]	; (8009318 <HAL_TIM_IC_CaptureCallback+0x308>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d10b      	bne.n	8009218 <HAL_TIM_IC_CaptureCallback+0x208>
					phase -= phase_shift;  //takes<200ns
 8009200:	4b41      	ldr	r3, [pc, #260]	; (8009308 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8009202:	ed93 7a00 	vldr	s14, [r3]
 8009206:	4b47      	ldr	r3, [pc, #284]	; (8009324 <HAL_TIM_IC_CaptureCallback+0x314>)
 8009208:	edd3 7a00 	vldr	s15, [r3]
 800920c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009210:	4b3d      	ldr	r3, [pc, #244]	; (8009308 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8009212:	edc3 7a00 	vstr	s15, [r3]
 8009216:	e00a      	b.n	800922e <HAL_TIM_IC_CaptureCallback+0x21e>
					phase += phase_shift;
 8009218:	4b3b      	ldr	r3, [pc, #236]	; (8009308 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800921a:	ed93 7a00 	vldr	s14, [r3]
 800921e:	4b41      	ldr	r3, [pc, #260]	; (8009324 <HAL_TIM_IC_CaptureCallback+0x314>)
 8009220:	edd3 7a00 	vldr	s15, [r3]
 8009224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009228:	4b37      	ldr	r3, [pc, #220]	; (8009308 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800922a:	edc3 7a00 	vstr	s15, [r3]
				phase *= 100;
 800922e:	4b36      	ldr	r3, [pc, #216]	; (8009308 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8009230:	edd3 7a00 	vldr	s15, [r3]
 8009234:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8009328 <HAL_TIM_IC_CaptureCallback+0x318>
 8009238:	ee67 7a87 	vmul.f32	s15, s15, s14
 800923c:	4b32      	ldr	r3, [pc, #200]	; (8009308 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800923e:	edc3 7a00 	vstr	s15, [r3]
				int_phase = (int) phase;
 8009242:	4b31      	ldr	r3, [pc, #196]	; (8009308 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8009244:	edd3 7a00 	vldr	s15, [r3]
 8009248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800924c:	ee17 2a90 	vmov	r2, s15
 8009250:	4b36      	ldr	r3, [pc, #216]	; (800932c <HAL_TIM_IC_CaptureCallback+0x31c>)
 8009252:	601a      	str	r2, [r3, #0]
				int_phase = int_phase % 628;
 8009254:	4b35      	ldr	r3, [pc, #212]	; (800932c <HAL_TIM_IC_CaptureCallback+0x31c>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	4b35      	ldr	r3, [pc, #212]	; (8009330 <HAL_TIM_IC_CaptureCallback+0x320>)
 800925a:	fb83 1302 	smull	r1, r3, r3, r2
 800925e:	11d9      	asrs	r1, r3, #7
 8009260:	17d3      	asrs	r3, r2, #31
 8009262:	1acb      	subs	r3, r1, r3
 8009264:	f44f 711d 	mov.w	r1, #628	; 0x274
 8009268:	fb01 f303 	mul.w	r3, r1, r3
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	4a2f      	ldr	r2, [pc, #188]	; (800932c <HAL_TIM_IC_CaptureCallback+0x31c>)
 8009270:	6013      	str	r3, [r2, #0]
				if (int_phase < 0) {
 8009272:	4b2e      	ldr	r3, [pc, #184]	; (800932c <HAL_TIM_IC_CaptureCallback+0x31c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	da05      	bge.n	8009286 <HAL_TIM_IC_CaptureCallback+0x276>
					int_phase += 628;
 800927a:	4b2c      	ldr	r3, [pc, #176]	; (800932c <HAL_TIM_IC_CaptureCallback+0x31c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8009282:	4a2a      	ldr	r2, [pc, #168]	; (800932c <HAL_TIM_IC_CaptureCallback+0x31c>)
 8009284:	6013      	str	r3, [r2, #0]
				float uA = 0;
 8009286:	f04f 0300 	mov.w	r3, #0
 800928a:	61bb      	str	r3, [r7, #24]
				float uB = 0;
 800928c:	f04f 0300 	mov.w	r3, #0
 8009290:	617b      	str	r3, [r7, #20]
				float uC = 0;
 8009292:	f04f 0300 	mov.w	r3, #0
 8009296:	613b      	str	r3, [r7, #16]
				if  (int_phase < 210)	{ //0...209
 8009298:	4b24      	ldr	r3, [pc, #144]	; (800932c <HAL_TIM_IC_CaptureCallback+0x31c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2bd1      	cmp	r3, #209	; 0xd1
 800929e:	dc4b      	bgt.n	8009338 <HAL_TIM_IC_CaptureCallback+0x328>
					uA = lookup[int_phase]; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 80092a0:	4b22      	ldr	r3, [pc, #136]	; (800932c <HAL_TIM_IC_CaptureCallback+0x31c>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a23      	ldr	r2, [pc, #140]	; (8009334 <HAL_TIM_IC_CaptureCallback+0x324>)
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	61bb      	str	r3, [r7, #24]
					uB = lookup[210 - 1 - int_phase]; // takes 3mus
 80092ae:	4b1f      	ldr	r3, [pc, #124]	; (800932c <HAL_TIM_IC_CaptureCallback+0x31c>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f1c3 03d1 	rsb	r3, r3, #209	; 0xd1
 80092b6:	4a1f      	ldr	r2, [pc, #124]	; (8009334 <HAL_TIM_IC_CaptureCallback+0x324>)
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4413      	add	r3, r2
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	617b      	str	r3, [r7, #20]
					uC = 0;
 80092c0:	f04f 0300 	mov.w	r3, #0
 80092c4:	613b      	str	r3, [r7, #16]
 80092c6:	e068      	b.n	800939a <HAL_TIM_IC_CaptureCallback+0x38a>
 80092c8:	66666666 	.word	0x66666666
 80092cc:	3fee6666 	.word	0x3fee6666
 80092d0:	9999999a 	.word	0x9999999a
 80092d4:	3fa99999 	.word	0x3fa99999
 80092d8:	eb5b2d4d 	.word	0xeb5b2d4d
 80092dc:	3f96848b 	.word	0x3f96848b
 80092e0:	40010400 	.word	0x40010400
 80092e4:	200000c8 	.word	0x200000c8
 80092e8:	200000b8 	.word	0x200000b8
 80092ec:	200000cc 	.word	0x200000cc
 80092f0:	40020c00 	.word	0x40020c00
 80092f4:	200007c0 	.word	0x200007c0
 80092f8:	20000020 	.word	0x20000020
 80092fc:	200005f0 	.word	0x200005f0
 8009300:	200000b4 	.word	0x200000b4
 8009304:	46241000 	.word	0x46241000
 8009308:	200000ac 	.word	0x200000ac
 800930c:	20000008 	.word	0x20000008
 8009310:	3f13c9ef 	.word	0x3f13c9ef
 8009314:	200000a8 	.word	0x200000a8
 8009318:	20000018 	.word	0x20000018
 800931c:	20000010 	.word	0x20000010
 8009320:	20000014 	.word	0x20000014
 8009324:	2000001c 	.word	0x2000001c
 8009328:	42c80000 	.word	0x42c80000
 800932c:	200000b0 	.word	0x200000b0
 8009330:	342da7f3 	.word	0x342da7f3
 8009334:	20000138 	.word	0x20000138
			 else if  (int_phase < 420){	 //210...419
 8009338:	4b43      	ldr	r3, [pc, #268]	; (8009448 <HAL_TIM_IC_CaptureCallback+0x438>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8009340:	da15      	bge.n	800936e <HAL_TIM_IC_CaptureCallback+0x35e>
					uA = 0; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 8009342:	f04f 0300 	mov.w	r3, #0
 8009346:	61bb      	str	r3, [r7, #24]
					uB = lookup[int_phase - 210]; // takes 3mus
 8009348:	4b3f      	ldr	r3, [pc, #252]	; (8009448 <HAL_TIM_IC_CaptureCallback+0x438>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3bd2      	subs	r3, #210	; 0xd2
 800934e:	4a3f      	ldr	r2, [pc, #252]	; (800944c <HAL_TIM_IC_CaptureCallback+0x43c>)
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4413      	add	r3, r2
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	617b      	str	r3, [r7, #20]
					uC = lookup[420 - 1 - int_phase];
 8009358:	4b3b      	ldr	r3, [pc, #236]	; (8009448 <HAL_TIM_IC_CaptureCallback+0x438>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f5c3 73d1 	rsb	r3, r3, #418	; 0x1a2
 8009360:	3301      	adds	r3, #1
 8009362:	4a3a      	ldr	r2, [pc, #232]	; (800944c <HAL_TIM_IC_CaptureCallback+0x43c>)
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4413      	add	r3, r2
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	613b      	str	r3, [r7, #16]
 800936c:	e015      	b.n	800939a <HAL_TIM_IC_CaptureCallback+0x38a>
					uA = lookup[630 - 1 - int_phase]; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 800936e:	4b36      	ldr	r3, [pc, #216]	; (8009448 <HAL_TIM_IC_CaptureCallback+0x438>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f5c3 731d 	rsb	r3, r3, #628	; 0x274
 8009376:	3301      	adds	r3, #1
 8009378:	4a34      	ldr	r2, [pc, #208]	; (800944c <HAL_TIM_IC_CaptureCallback+0x43c>)
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	61bb      	str	r3, [r7, #24]
					uB = 0; // takes 3mus
 8009382:	f04f 0300 	mov.w	r3, #0
 8009386:	617b      	str	r3, [r7, #20]
					uC = lookup[int_phase - 420];
 8009388:	4b2f      	ldr	r3, [pc, #188]	; (8009448 <HAL_TIM_IC_CaptureCallback+0x438>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8009390:	4a2e      	ldr	r2, [pc, #184]	; (800944c <HAL_TIM_IC_CaptureCallback+0x43c>)
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	613b      	str	r3, [r7, #16]
				pwmA = (uint16_t) (pwm * u0 * uA); //takes<2s00ns
 800939a:	4b2d      	ldr	r3, [pc, #180]	; (8009450 <HAL_TIM_IC_CaptureCallback+0x440>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	ee07 3a90 	vmov	s15, r3
 80093a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80093aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80093b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ba:	ee17 3a90 	vmov	r3, s15
 80093be:	b29b      	uxth	r3, r3
 80093c0:	461a      	mov	r2, r3
 80093c2:	4b24      	ldr	r3, [pc, #144]	; (8009454 <HAL_TIM_IC_CaptureCallback+0x444>)
 80093c4:	601a      	str	r2, [r3, #0]
				pwmB = (uint16_t) (pwm * u0 * uB); //takes<200ns
 80093c6:	4b22      	ldr	r3, [pc, #136]	; (8009450 <HAL_TIM_IC_CaptureCallback+0x440>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	ee07 3a90 	vmov	s15, r3
 80093ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80093d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093da:	edd7 7a05 	vldr	s15, [r7, #20]
 80093de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093e6:	ee17 3a90 	vmov	r3, s15
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	461a      	mov	r2, r3
 80093ee:	4b1a      	ldr	r3, [pc, #104]	; (8009458 <HAL_TIM_IC_CaptureCallback+0x448>)
 80093f0:	601a      	str	r2, [r3, #0]
				pwmC = (uint16_t) (pwm * u0 * uC); //takes<200ns
 80093f2:	4b17      	ldr	r3, [pc, #92]	; (8009450 <HAL_TIM_IC_CaptureCallback+0x440>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8009402:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009406:	edd7 7a04 	vldr	s15, [r7, #16]
 800940a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800940e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009412:	ee17 3a90 	vmov	r3, s15
 8009416:	b29b      	uxth	r3, r3
 8009418:	461a      	mov	r2, r3
 800941a:	4b10      	ldr	r3, [pc, #64]	; (800945c <HAL_TIM_IC_CaptureCallback+0x44c>)
 800941c:	601a      	str	r2, [r3, #0]
				debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 800941e:	4b10      	ldr	r3, [pc, #64]	; (8009460 <HAL_TIM_IC_CaptureCallback+0x450>)
 8009420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009424:	619a      	str	r2, [r3, #24]
				TIM1->CCR1 = pwmA; //takes<150ns
 8009426:	4b0b      	ldr	r3, [pc, #44]	; (8009454 <HAL_TIM_IC_CaptureCallback+0x444>)
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	4b0e      	ldr	r3, [pc, #56]	; (8009464 <HAL_TIM_IC_CaptureCallback+0x454>)
 800942c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = pwmB; //takes<150ns
 800942e:	4b0a      	ldr	r3, [pc, #40]	; (8009458 <HAL_TIM_IC_CaptureCallback+0x448>)
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	4b0c      	ldr	r3, [pc, #48]	; (8009464 <HAL_TIM_IC_CaptureCallback+0x454>)
 8009434:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = pwmC; //takes<150ns
 8009436:	4b09      	ldr	r3, [pc, #36]	; (800945c <HAL_TIM_IC_CaptureCallback+0x44c>)
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	4b0a      	ldr	r3, [pc, #40]	; (8009464 <HAL_TIM_IC_CaptureCallback+0x454>)
 800943c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800943e:	bf00      	nop
 8009440:	3720      	adds	r7, #32
 8009442:	46bd      	mov	sp, r7
 8009444:	bdb0      	pop	{r4, r5, r7, pc}
 8009446:	bf00      	nop
 8009448:	200000b0 	.word	0x200000b0
 800944c:	20000138 	.word	0x20000138
 8009450:	2000000c 	.word	0x2000000c
 8009454:	200000bc 	.word	0x200000bc
 8009458:	200000c0 	.word	0x200000c0
 800945c:	200000c4 	.word	0x200000c4
 8009460:	40020c00 	.word	0x40020c00
 8009464:	40010000 	.word	0x40010000

08009468 <calc_lookup>:

void calc_lookup(float *lookup){
 8009468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
	// TODO plug in a higher order harmonic and see if system gets more energy efficient or more silent
	for (int i=0; i<210; i++){
 8009470:	2300      	movs	r3, #0
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	e051      	b.n	800951a <calc_lookup+0xb2>
	    lookup[i] = cos((float)i/100.0) + cos((float)i/100.0-1.047);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	ee07 3a90 	vmov	s15, r3
 800947c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009480:	ee17 0a90 	vmov	r0, s15
 8009484:	f7f7 f860 	bl	8000548 <__aeabi_f2d>
 8009488:	f04f 0200 	mov.w	r2, #0
 800948c:	4b28      	ldr	r3, [pc, #160]	; (8009530 <calc_lookup+0xc8>)
 800948e:	f7f7 f9dd 	bl	800084c <__aeabi_ddiv>
 8009492:	4603      	mov	r3, r0
 8009494:	460c      	mov	r4, r1
 8009496:	ec44 3b17 	vmov	d7, r3, r4
 800949a:	eeb0 0a47 	vmov.f32	s0, s14
 800949e:	eef0 0a67 	vmov.f32	s1, s15
 80094a2:	f001 fb51 	bl	800ab48 <cos>
 80094a6:	ec56 5b10 	vmov	r5, r6, d0
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	ee07 3a90 	vmov	s15, r3
 80094b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094b4:	ee17 0a90 	vmov	r0, s15
 80094b8:	f7f7 f846 	bl	8000548 <__aeabi_f2d>
 80094bc:	f04f 0200 	mov.w	r2, #0
 80094c0:	4b1b      	ldr	r3, [pc, #108]	; (8009530 <calc_lookup+0xc8>)
 80094c2:	f7f7 f9c3 	bl	800084c <__aeabi_ddiv>
 80094c6:	4603      	mov	r3, r0
 80094c8:	460c      	mov	r4, r1
 80094ca:	4618      	mov	r0, r3
 80094cc:	4621      	mov	r1, r4
 80094ce:	a316      	add	r3, pc, #88	; (adr r3, 8009528 <calc_lookup+0xc0>)
 80094d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d4:	f7f6 fed8 	bl	8000288 <__aeabi_dsub>
 80094d8:	4603      	mov	r3, r0
 80094da:	460c      	mov	r4, r1
 80094dc:	ec44 3b17 	vmov	d7, r3, r4
 80094e0:	eeb0 0a47 	vmov.f32	s0, s14
 80094e4:	eef0 0a67 	vmov.f32	s1, s15
 80094e8:	f001 fb2e 	bl	800ab48 <cos>
 80094ec:	ec54 3b10 	vmov	r3, r4, d0
 80094f0:	461a      	mov	r2, r3
 80094f2:	4623      	mov	r3, r4
 80094f4:	4628      	mov	r0, r5
 80094f6:	4631      	mov	r1, r6
 80094f8:	f7f6 fec8 	bl	800028c <__adddf3>
 80094fc:	4603      	mov	r3, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	4618      	mov	r0, r3
 8009502:	4621      	mov	r1, r4
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	18d4      	adds	r4, r2, r3
 800950c:	f7f7 fb56 	bl	8000bbc <__aeabi_d2f>
 8009510:	4603      	mov	r3, r0
 8009512:	6023      	str	r3, [r4, #0]
	for (int i=0; i<210; i++){
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	3301      	adds	r3, #1
 8009518:	60fb      	str	r3, [r7, #12]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2bd1      	cmp	r3, #209	; 0xd1
 800951e:	ddaa      	ble.n	8009476 <calc_lookup+0xe>
	}
}
 8009520:	bf00      	nop
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009528:	126e978d 	.word	0x126e978d
 800952c:	3ff0c083 	.word	0x3ff0c083
 8009530:	40590000 	.word	0x40590000

08009534 <DMAUSARTTransferComplete>:

void DMAUSARTTransferComplete(DMA_HandleTypeDef *hdma){
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
	huart3.Instance->CR3 &= ~USART_CR3_DMAT;
 800953c:	4b06      	ldr	r3, [pc, #24]	; (8009558 <DMAUSARTTransferComplete+0x24>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	695a      	ldr	r2, [r3, #20]
 8009542:	4b05      	ldr	r3, [pc, #20]	; (8009558 <DMAUSARTTransferComplete+0x24>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800954a:	615a      	str	r2, [r3, #20]
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	200004c0 	.word	0x200004c0

0800955c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
	debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin;
 8009564:	4b04      	ldr	r3, [pc, #16]	; (8009578 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8009566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800956a:	619a      	str	r2, [r3, #24]
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	40020c00 	.word	0x40020c00

0800957c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
	debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin << 16U;
 8009584:	4b04      	ldr	r3, [pc, #16]	; (8009598 <HAL_ADC_ConvCpltCallback+0x1c>)
 8009586:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800958a:	619a      	str	r2, [r3, #24]
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	40020c00 	.word	0x40020c00

0800959c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800959c:	b480      	push	{r7}
 800959e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80095a0:	bf00      	nop
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
	...

080095ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095b2:	2300      	movs	r3, #0
 80095b4:	607b      	str	r3, [r7, #4]
 80095b6:	4b10      	ldr	r3, [pc, #64]	; (80095f8 <HAL_MspInit+0x4c>)
 80095b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ba:	4a0f      	ldr	r2, [pc, #60]	; (80095f8 <HAL_MspInit+0x4c>)
 80095bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095c0:	6453      	str	r3, [r2, #68]	; 0x44
 80095c2:	4b0d      	ldr	r3, [pc, #52]	; (80095f8 <HAL_MspInit+0x4c>)
 80095c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095ca:	607b      	str	r3, [r7, #4]
 80095cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80095ce:	2300      	movs	r3, #0
 80095d0:	603b      	str	r3, [r7, #0]
 80095d2:	4b09      	ldr	r3, [pc, #36]	; (80095f8 <HAL_MspInit+0x4c>)
 80095d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d6:	4a08      	ldr	r2, [pc, #32]	; (80095f8 <HAL_MspInit+0x4c>)
 80095d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095dc:	6413      	str	r3, [r2, #64]	; 0x40
 80095de:	4b06      	ldr	r3, [pc, #24]	; (80095f8 <HAL_MspInit+0x4c>)
 80095e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095e6:	603b      	str	r3, [r7, #0]
 80095e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80095ea:	bf00      	nop
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	40023800 	.word	0x40023800

080095fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b092      	sub	sp, #72	; 0x48
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009604:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009608:	2200      	movs	r2, #0
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	605a      	str	r2, [r3, #4]
 800960e:	609a      	str	r2, [r3, #8]
 8009610:	60da      	str	r2, [r3, #12]
 8009612:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a9b      	ldr	r2, [pc, #620]	; (8009888 <HAL_ADC_MspInit+0x28c>)
 800961a:	4293      	cmp	r3, r2
 800961c:	f040 8096 	bne.w	800974c <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009620:	2300      	movs	r3, #0
 8009622:	633b      	str	r3, [r7, #48]	; 0x30
 8009624:	4b99      	ldr	r3, [pc, #612]	; (800988c <HAL_ADC_MspInit+0x290>)
 8009626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009628:	4a98      	ldr	r2, [pc, #608]	; (800988c <HAL_ADC_MspInit+0x290>)
 800962a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800962e:	6453      	str	r3, [r2, #68]	; 0x44
 8009630:	4b96      	ldr	r3, [pc, #600]	; (800988c <HAL_ADC_MspInit+0x290>)
 8009632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009638:	633b      	str	r3, [r7, #48]	; 0x30
 800963a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800963c:	2300      	movs	r3, #0
 800963e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009640:	4b92      	ldr	r3, [pc, #584]	; (800988c <HAL_ADC_MspInit+0x290>)
 8009642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009644:	4a91      	ldr	r2, [pc, #580]	; (800988c <HAL_ADC_MspInit+0x290>)
 8009646:	f043 0304 	orr.w	r3, r3, #4
 800964a:	6313      	str	r3, [r2, #48]	; 0x30
 800964c:	4b8f      	ldr	r3, [pc, #572]	; (800988c <HAL_ADC_MspInit+0x290>)
 800964e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009650:	f003 0304 	and.w	r3, r3, #4
 8009654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009658:	2300      	movs	r3, #0
 800965a:	62bb      	str	r3, [r7, #40]	; 0x28
 800965c:	4b8b      	ldr	r3, [pc, #556]	; (800988c <HAL_ADC_MspInit+0x290>)
 800965e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009660:	4a8a      	ldr	r2, [pc, #552]	; (800988c <HAL_ADC_MspInit+0x290>)
 8009662:	f043 0301 	orr.w	r3, r3, #1
 8009666:	6313      	str	r3, [r2, #48]	; 0x30
 8009668:	4b88      	ldr	r3, [pc, #544]	; (800988c <HAL_ADC_MspInit+0x290>)
 800966a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	62bb      	str	r3, [r7, #40]	; 0x28
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009674:	2300      	movs	r3, #0
 8009676:	627b      	str	r3, [r7, #36]	; 0x24
 8009678:	4b84      	ldr	r3, [pc, #528]	; (800988c <HAL_ADC_MspInit+0x290>)
 800967a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967c:	4a83      	ldr	r2, [pc, #524]	; (800988c <HAL_ADC_MspInit+0x290>)
 800967e:	f043 0302 	orr.w	r3, r3, #2
 8009682:	6313      	str	r3, [r2, #48]	; 0x30
 8009684:	4b81      	ldr	r3, [pc, #516]	; (800988c <HAL_ADC_MspInit+0x290>)
 8009686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009688:	f003 0302 	and.w	r3, r3, #2
 800968c:	627b      	str	r3, [r7, #36]	; 0x24
 800968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8009690:	233e      	movs	r3, #62	; 0x3e
 8009692:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009694:	2303      	movs	r3, #3
 8009696:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009698:	2300      	movs	r3, #0
 800969a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800969c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80096a0:	4619      	mov	r1, r3
 80096a2:	487b      	ldr	r0, [pc, #492]	; (8009890 <HAL_ADC_MspInit+0x294>)
 80096a4:	f7f9 fa9e 	bl	8002be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80096a8:	233e      	movs	r3, #62	; 0x3e
 80096aa:	637b      	str	r3, [r7, #52]	; 0x34
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80096ac:	2303      	movs	r3, #3
 80096ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096b0:	2300      	movs	r3, #0
 80096b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80096b8:	4619      	mov	r1, r3
 80096ba:	4876      	ldr	r0, [pc, #472]	; (8009894 <HAL_ADC_MspInit+0x298>)
 80096bc:	f7f9 fa92 	bl	8002be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80096c0:	2301      	movs	r3, #1
 80096c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80096c4:	2303      	movs	r3, #3
 80096c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096c8:	2300      	movs	r3, #0
 80096ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80096d0:	4619      	mov	r1, r3
 80096d2:	4871      	ldr	r0, [pc, #452]	; (8009898 <HAL_ADC_MspInit+0x29c>)
 80096d4:	f7f9 fa86 	bl	8002be4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80096d8:	4b70      	ldr	r3, [pc, #448]	; (800989c <HAL_ADC_MspInit+0x2a0>)
 80096da:	4a71      	ldr	r2, [pc, #452]	; (80098a0 <HAL_ADC_MspInit+0x2a4>)
 80096dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80096de:	4b6f      	ldr	r3, [pc, #444]	; (800989c <HAL_ADC_MspInit+0x2a0>)
 80096e0:	2200      	movs	r2, #0
 80096e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80096e4:	4b6d      	ldr	r3, [pc, #436]	; (800989c <HAL_ADC_MspInit+0x2a0>)
 80096e6:	2200      	movs	r2, #0
 80096e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80096ea:	4b6c      	ldr	r3, [pc, #432]	; (800989c <HAL_ADC_MspInit+0x2a0>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80096f0:	4b6a      	ldr	r3, [pc, #424]	; (800989c <HAL_ADC_MspInit+0x2a0>)
 80096f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80096f6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80096f8:	4b68      	ldr	r3, [pc, #416]	; (800989c <HAL_ADC_MspInit+0x2a0>)
 80096fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096fe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009700:	4b66      	ldr	r3, [pc, #408]	; (800989c <HAL_ADC_MspInit+0x2a0>)
 8009702:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009706:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8009708:	4b64      	ldr	r3, [pc, #400]	; (800989c <HAL_ADC_MspInit+0x2a0>)
 800970a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800970e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8009710:	4b62      	ldr	r3, [pc, #392]	; (800989c <HAL_ADC_MspInit+0x2a0>)
 8009712:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009716:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009718:	4b60      	ldr	r3, [pc, #384]	; (800989c <HAL_ADC_MspInit+0x2a0>)
 800971a:	2200      	movs	r2, #0
 800971c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800971e:	485f      	ldr	r0, [pc, #380]	; (800989c <HAL_ADC_MspInit+0x2a0>)
 8009720:	f7f8 fe7c 	bl	800241c <HAL_DMA_Init>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800972a:	f7ff ff37 	bl	800959c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a5a      	ldr	r2, [pc, #360]	; (800989c <HAL_ADC_MspInit+0x2a0>)
 8009732:	639a      	str	r2, [r3, #56]	; 0x38
 8009734:	4a59      	ldr	r2, [pc, #356]	; (800989c <HAL_ADC_MspInit+0x2a0>)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800973a:	2200      	movs	r2, #0
 800973c:	2100      	movs	r1, #0
 800973e:	2012      	movs	r0, #18
 8009740:	f7f8 fe35 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8009744:	2012      	movs	r0, #18
 8009746:	f7f8 fe4e 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800974a:	e131      	b.n	80099b0 <HAL_ADC_MspInit+0x3b4>
  else if(hadc->Instance==ADC2)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a54      	ldr	r2, [pc, #336]	; (80098a4 <HAL_ADC_MspInit+0x2a8>)
 8009752:	4293      	cmp	r3, r2
 8009754:	f040 80ac 	bne.w	80098b0 <HAL_ADC_MspInit+0x2b4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8009758:	2300      	movs	r3, #0
 800975a:	623b      	str	r3, [r7, #32]
 800975c:	4b4b      	ldr	r3, [pc, #300]	; (800988c <HAL_ADC_MspInit+0x290>)
 800975e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009760:	4a4a      	ldr	r2, [pc, #296]	; (800988c <HAL_ADC_MspInit+0x290>)
 8009762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009766:	6453      	str	r3, [r2, #68]	; 0x44
 8009768:	4b48      	ldr	r3, [pc, #288]	; (800988c <HAL_ADC_MspInit+0x290>)
 800976a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800976c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009770:	623b      	str	r3, [r7, #32]
 8009772:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009774:	2300      	movs	r3, #0
 8009776:	61fb      	str	r3, [r7, #28]
 8009778:	4b44      	ldr	r3, [pc, #272]	; (800988c <HAL_ADC_MspInit+0x290>)
 800977a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977c:	4a43      	ldr	r2, [pc, #268]	; (800988c <HAL_ADC_MspInit+0x290>)
 800977e:	f043 0304 	orr.w	r3, r3, #4
 8009782:	6313      	str	r3, [r2, #48]	; 0x30
 8009784:	4b41      	ldr	r3, [pc, #260]	; (800988c <HAL_ADC_MspInit+0x290>)
 8009786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009788:	f003 0304 	and.w	r3, r3, #4
 800978c:	61fb      	str	r3, [r7, #28]
 800978e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009790:	2300      	movs	r3, #0
 8009792:	61bb      	str	r3, [r7, #24]
 8009794:	4b3d      	ldr	r3, [pc, #244]	; (800988c <HAL_ADC_MspInit+0x290>)
 8009796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009798:	4a3c      	ldr	r2, [pc, #240]	; (800988c <HAL_ADC_MspInit+0x290>)
 800979a:	f043 0301 	orr.w	r3, r3, #1
 800979e:	6313      	str	r3, [r2, #48]	; 0x30
 80097a0:	4b3a      	ldr	r3, [pc, #232]	; (800988c <HAL_ADC_MspInit+0x290>)
 80097a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	61bb      	str	r3, [r7, #24]
 80097aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80097ac:	2300      	movs	r3, #0
 80097ae:	617b      	str	r3, [r7, #20]
 80097b0:	4b36      	ldr	r3, [pc, #216]	; (800988c <HAL_ADC_MspInit+0x290>)
 80097b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b4:	4a35      	ldr	r2, [pc, #212]	; (800988c <HAL_ADC_MspInit+0x290>)
 80097b6:	f043 0302 	orr.w	r3, r3, #2
 80097ba:	6313      	str	r3, [r2, #48]	; 0x30
 80097bc:	4b33      	ldr	r3, [pc, #204]	; (800988c <HAL_ADC_MspInit+0x290>)
 80097be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c0:	f003 0302 	and.w	r3, r3, #2
 80097c4:	617b      	str	r3, [r7, #20]
 80097c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80097c8:	233e      	movs	r3, #62	; 0x3e
 80097ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80097cc:	2303      	movs	r3, #3
 80097ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d0:	2300      	movs	r3, #0
 80097d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80097d8:	4619      	mov	r1, r3
 80097da:	482d      	ldr	r0, [pc, #180]	; (8009890 <HAL_ADC_MspInit+0x294>)
 80097dc:	f7f9 fa02 	bl	8002be4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 80097e0:	2316      	movs	r3, #22
 80097e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80097e4:	2303      	movs	r3, #3
 80097e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097e8:	2300      	movs	r3, #0
 80097ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80097f0:	4619      	mov	r1, r3
 80097f2:	4828      	ldr	r0, [pc, #160]	; (8009894 <HAL_ADC_MspInit+0x298>)
 80097f4:	f7f9 f9f6 	bl	8002be4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80097f8:	2301      	movs	r3, #1
 80097fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80097fc:	2303      	movs	r3, #3
 80097fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009800:	2300      	movs	r3, #0
 8009802:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009804:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009808:	4619      	mov	r1, r3
 800980a:	4823      	ldr	r0, [pc, #140]	; (8009898 <HAL_ADC_MspInit+0x29c>)
 800980c:	f7f9 f9ea 	bl	8002be4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8009810:	4b25      	ldr	r3, [pc, #148]	; (80098a8 <HAL_ADC_MspInit+0x2ac>)
 8009812:	4a26      	ldr	r2, [pc, #152]	; (80098ac <HAL_ADC_MspInit+0x2b0>)
 8009814:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8009816:	4b24      	ldr	r3, [pc, #144]	; (80098a8 <HAL_ADC_MspInit+0x2ac>)
 8009818:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800981c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800981e:	4b22      	ldr	r3, [pc, #136]	; (80098a8 <HAL_ADC_MspInit+0x2ac>)
 8009820:	2200      	movs	r2, #0
 8009822:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8009824:	4b20      	ldr	r3, [pc, #128]	; (80098a8 <HAL_ADC_MspInit+0x2ac>)
 8009826:	2200      	movs	r2, #0
 8009828:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800982a:	4b1f      	ldr	r3, [pc, #124]	; (80098a8 <HAL_ADC_MspInit+0x2ac>)
 800982c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009830:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009832:	4b1d      	ldr	r3, [pc, #116]	; (80098a8 <HAL_ADC_MspInit+0x2ac>)
 8009834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009838:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800983a:	4b1b      	ldr	r3, [pc, #108]	; (80098a8 <HAL_ADC_MspInit+0x2ac>)
 800983c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009840:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8009842:	4b19      	ldr	r3, [pc, #100]	; (80098a8 <HAL_ADC_MspInit+0x2ac>)
 8009844:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009848:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800984a:	4b17      	ldr	r3, [pc, #92]	; (80098a8 <HAL_ADC_MspInit+0x2ac>)
 800984c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009850:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009852:	4b15      	ldr	r3, [pc, #84]	; (80098a8 <HAL_ADC_MspInit+0x2ac>)
 8009854:	2200      	movs	r2, #0
 8009856:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8009858:	4813      	ldr	r0, [pc, #76]	; (80098a8 <HAL_ADC_MspInit+0x2ac>)
 800985a:	f7f8 fddf 	bl	800241c <HAL_DMA_Init>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <HAL_ADC_MspInit+0x26c>
      Error_Handler();
 8009864:	f7ff fe9a 	bl	800959c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a0f      	ldr	r2, [pc, #60]	; (80098a8 <HAL_ADC_MspInit+0x2ac>)
 800986c:	639a      	str	r2, [r3, #56]	; 0x38
 800986e:	4a0e      	ldr	r2, [pc, #56]	; (80098a8 <HAL_ADC_MspInit+0x2ac>)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8009874:	2200      	movs	r2, #0
 8009876:	2100      	movs	r1, #0
 8009878:	2012      	movs	r0, #18
 800987a:	f7f8 fd98 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800987e:	2012      	movs	r0, #18
 8009880:	f7f8 fdb1 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 8009884:	e094      	b.n	80099b0 <HAL_ADC_MspInit+0x3b4>
 8009886:	bf00      	nop
 8009888:	40012000 	.word	0x40012000
 800988c:	40023800 	.word	0x40023800
 8009890:	40020800 	.word	0x40020800
 8009894:	40020000 	.word	0x40020000
 8009898:	40020400 	.word	0x40020400
 800989c:	200007c4 	.word	0x200007c4
 80098a0:	40026410 	.word	0x40026410
 80098a4:	40012100 	.word	0x40012100
 80098a8:	2000095c 	.word	0x2000095c
 80098ac:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a40      	ldr	r2, [pc, #256]	; (80099b8 <HAL_ADC_MspInit+0x3bc>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d17a      	bne.n	80099b0 <HAL_ADC_MspInit+0x3b4>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80098ba:	2300      	movs	r3, #0
 80098bc:	613b      	str	r3, [r7, #16]
 80098be:	4b3f      	ldr	r3, [pc, #252]	; (80099bc <HAL_ADC_MspInit+0x3c0>)
 80098c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098c2:	4a3e      	ldr	r2, [pc, #248]	; (80099bc <HAL_ADC_MspInit+0x3c0>)
 80098c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098c8:	6453      	str	r3, [r2, #68]	; 0x44
 80098ca:	4b3c      	ldr	r3, [pc, #240]	; (80099bc <HAL_ADC_MspInit+0x3c0>)
 80098cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098d2:	613b      	str	r3, [r7, #16]
 80098d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80098d6:	2300      	movs	r3, #0
 80098d8:	60fb      	str	r3, [r7, #12]
 80098da:	4b38      	ldr	r3, [pc, #224]	; (80099bc <HAL_ADC_MspInit+0x3c0>)
 80098dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098de:	4a37      	ldr	r2, [pc, #220]	; (80099bc <HAL_ADC_MspInit+0x3c0>)
 80098e0:	f043 0304 	orr.w	r3, r3, #4
 80098e4:	6313      	str	r3, [r2, #48]	; 0x30
 80098e6:	4b35      	ldr	r3, [pc, #212]	; (80099bc <HAL_ADC_MspInit+0x3c0>)
 80098e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ea:	f003 0304 	and.w	r3, r3, #4
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098f2:	2300      	movs	r3, #0
 80098f4:	60bb      	str	r3, [r7, #8]
 80098f6:	4b31      	ldr	r3, [pc, #196]	; (80099bc <HAL_ADC_MspInit+0x3c0>)
 80098f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fa:	4a30      	ldr	r2, [pc, #192]	; (80099bc <HAL_ADC_MspInit+0x3c0>)
 80098fc:	f043 0301 	orr.w	r3, r3, #1
 8009900:	6313      	str	r3, [r2, #48]	; 0x30
 8009902:	4b2e      	ldr	r3, [pc, #184]	; (80099bc <HAL_ADC_MspInit+0x3c0>)
 8009904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	60bb      	str	r3, [r7, #8]
 800990c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800990e:	2308      	movs	r3, #8
 8009910:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009912:	2303      	movs	r3, #3
 8009914:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009916:	2300      	movs	r3, #0
 8009918:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800991a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800991e:	4619      	mov	r1, r3
 8009920:	4827      	ldr	r0, [pc, #156]	; (80099c0 <HAL_ADC_MspInit+0x3c4>)
 8009922:	f7f9 f95f 	bl	8002be4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009926:	2308      	movs	r3, #8
 8009928:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800992a:	2303      	movs	r3, #3
 800992c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800992e:	2300      	movs	r3, #0
 8009930:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009932:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009936:	4619      	mov	r1, r3
 8009938:	4822      	ldr	r0, [pc, #136]	; (80099c4 <HAL_ADC_MspInit+0x3c8>)
 800993a:	f7f9 f953 	bl	8002be4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800993e:	4b22      	ldr	r3, [pc, #136]	; (80099c8 <HAL_ADC_MspInit+0x3cc>)
 8009940:	4a22      	ldr	r2, [pc, #136]	; (80099cc <HAL_ADC_MspInit+0x3d0>)
 8009942:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8009944:	4b20      	ldr	r3, [pc, #128]	; (80099c8 <HAL_ADC_MspInit+0x3cc>)
 8009946:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800994a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800994c:	4b1e      	ldr	r3, [pc, #120]	; (80099c8 <HAL_ADC_MspInit+0x3cc>)
 800994e:	2200      	movs	r2, #0
 8009950:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8009952:	4b1d      	ldr	r3, [pc, #116]	; (80099c8 <HAL_ADC_MspInit+0x3cc>)
 8009954:	2200      	movs	r2, #0
 8009956:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8009958:	4b1b      	ldr	r3, [pc, #108]	; (80099c8 <HAL_ADC_MspInit+0x3cc>)
 800995a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800995e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009960:	4b19      	ldr	r3, [pc, #100]	; (80099c8 <HAL_ADC_MspInit+0x3cc>)
 8009962:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009966:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009968:	4b17      	ldr	r3, [pc, #92]	; (80099c8 <HAL_ADC_MspInit+0x3cc>)
 800996a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800996e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8009970:	4b15      	ldr	r3, [pc, #84]	; (80099c8 <HAL_ADC_MspInit+0x3cc>)
 8009972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009976:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8009978:	4b13      	ldr	r3, [pc, #76]	; (80099c8 <HAL_ADC_MspInit+0x3cc>)
 800997a:	2200      	movs	r2, #0
 800997c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800997e:	4b12      	ldr	r3, [pc, #72]	; (80099c8 <HAL_ADC_MspInit+0x3cc>)
 8009980:	2200      	movs	r2, #0
 8009982:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8009984:	4810      	ldr	r0, [pc, #64]	; (80099c8 <HAL_ADC_MspInit+0x3cc>)
 8009986:	f7f8 fd49 	bl	800241c <HAL_DMA_Init>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <HAL_ADC_MspInit+0x398>
      Error_Handler();
 8009990:	f7ff fe04 	bl	800959c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a0c      	ldr	r2, [pc, #48]	; (80099c8 <HAL_ADC_MspInit+0x3cc>)
 8009998:	639a      	str	r2, [r3, #56]	; 0x38
 800999a:	4a0b      	ldr	r2, [pc, #44]	; (80099c8 <HAL_ADC_MspInit+0x3cc>)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80099a0:	2200      	movs	r2, #0
 80099a2:	2100      	movs	r1, #0
 80099a4:	2012      	movs	r0, #18
 80099a6:	f7f8 fd02 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80099aa:	2012      	movs	r0, #18
 80099ac:	f7f8 fd1b 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 80099b0:	bf00      	nop
 80099b2:	3748      	adds	r7, #72	; 0x48
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	40012200 	.word	0x40012200
 80099bc:	40023800 	.word	0x40023800
 80099c0:	40020800 	.word	0x40020800
 80099c4:	40020000 	.word	0x40020000
 80099c8:	200005f4 	.word	0x200005f4
 80099cc:	40026428 	.word	0x40026428

080099d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b08a      	sub	sp, #40	; 0x28
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099d8:	f107 0314 	add.w	r3, r7, #20
 80099dc:	2200      	movs	r2, #0
 80099de:	601a      	str	r2, [r3, #0]
 80099e0:	605a      	str	r2, [r3, #4]
 80099e2:	609a      	str	r2, [r3, #8]
 80099e4:	60da      	str	r2, [r3, #12]
 80099e6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a19      	ldr	r2, [pc, #100]	; (8009a54 <HAL_CAN_MspInit+0x84>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d12b      	bne.n	8009a4a <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80099f2:	2300      	movs	r3, #0
 80099f4:	613b      	str	r3, [r7, #16]
 80099f6:	4b18      	ldr	r3, [pc, #96]	; (8009a58 <HAL_CAN_MspInit+0x88>)
 80099f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fa:	4a17      	ldr	r2, [pc, #92]	; (8009a58 <HAL_CAN_MspInit+0x88>)
 80099fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009a00:	6413      	str	r3, [r2, #64]	; 0x40
 8009a02:	4b15      	ldr	r3, [pc, #84]	; (8009a58 <HAL_CAN_MspInit+0x88>)
 8009a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a0a:	613b      	str	r3, [r7, #16]
 8009a0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60fb      	str	r3, [r7, #12]
 8009a12:	4b11      	ldr	r3, [pc, #68]	; (8009a58 <HAL_CAN_MspInit+0x88>)
 8009a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a16:	4a10      	ldr	r2, [pc, #64]	; (8009a58 <HAL_CAN_MspInit+0x88>)
 8009a18:	f043 0308 	orr.w	r3, r3, #8
 8009a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8009a1e:	4b0e      	ldr	r3, [pc, #56]	; (8009a58 <HAL_CAN_MspInit+0x88>)
 8009a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a22:	f003 0308 	and.w	r3, r3, #8
 8009a26:	60fb      	str	r3, [r7, #12]
 8009a28:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a2e:	2302      	movs	r3, #2
 8009a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a32:	2300      	movs	r3, #0
 8009a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a36:	2303      	movs	r3, #3
 8009a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8009a3a:	2309      	movs	r3, #9
 8009a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009a3e:	f107 0314 	add.w	r3, r7, #20
 8009a42:	4619      	mov	r1, r3
 8009a44:	4805      	ldr	r0, [pc, #20]	; (8009a5c <HAL_CAN_MspInit+0x8c>)
 8009a46:	f7f9 f8cd 	bl	8002be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8009a4a:	bf00      	nop
 8009a4c:	3728      	adds	r7, #40	; 0x28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	40006400 	.word	0x40006400
 8009a58:	40023800 	.word	0x40023800
 8009a5c:	40020c00 	.word	0x40020c00

08009a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b08c      	sub	sp, #48	; 0x30
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a68:	f107 031c 	add.w	r3, r7, #28
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	605a      	str	r2, [r3, #4]
 8009a72:	609a      	str	r2, [r3, #8]
 8009a74:	60da      	str	r2, [r3, #12]
 8009a76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a32      	ldr	r2, [pc, #200]	; (8009b48 <HAL_I2C_MspInit+0xe8>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d12c      	bne.n	8009adc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a82:	2300      	movs	r3, #0
 8009a84:	61bb      	str	r3, [r7, #24]
 8009a86:	4b31      	ldr	r3, [pc, #196]	; (8009b4c <HAL_I2C_MspInit+0xec>)
 8009a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8a:	4a30      	ldr	r2, [pc, #192]	; (8009b4c <HAL_I2C_MspInit+0xec>)
 8009a8c:	f043 0302 	orr.w	r3, r3, #2
 8009a90:	6313      	str	r3, [r2, #48]	; 0x30
 8009a92:	4b2e      	ldr	r3, [pc, #184]	; (8009b4c <HAL_I2C_MspInit+0xec>)
 8009a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a96:	f003 0302 	and.w	r3, r3, #2
 8009a9a:	61bb      	str	r3, [r7, #24]
 8009a9c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009a9e:	23c0      	movs	r3, #192	; 0xc0
 8009aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009aa2:	2312      	movs	r3, #18
 8009aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009aae:	2304      	movs	r3, #4
 8009ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ab2:	f107 031c 	add.w	r3, r7, #28
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	4825      	ldr	r0, [pc, #148]	; (8009b50 <HAL_I2C_MspInit+0xf0>)
 8009aba:	f7f9 f893 	bl	8002be4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009abe:	2300      	movs	r3, #0
 8009ac0:	617b      	str	r3, [r7, #20]
 8009ac2:	4b22      	ldr	r3, [pc, #136]	; (8009b4c <HAL_I2C_MspInit+0xec>)
 8009ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac6:	4a21      	ldr	r2, [pc, #132]	; (8009b4c <HAL_I2C_MspInit+0xec>)
 8009ac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009acc:	6413      	str	r3, [r2, #64]	; 0x40
 8009ace:	4b1f      	ldr	r3, [pc, #124]	; (8009b4c <HAL_I2C_MspInit+0xec>)
 8009ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ad6:	617b      	str	r3, [r7, #20]
 8009ad8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8009ada:	e031      	b.n	8009b40 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a1c      	ldr	r2, [pc, #112]	; (8009b54 <HAL_I2C_MspInit+0xf4>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d12c      	bne.n	8009b40 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	613b      	str	r3, [r7, #16]
 8009aea:	4b18      	ldr	r3, [pc, #96]	; (8009b4c <HAL_I2C_MspInit+0xec>)
 8009aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aee:	4a17      	ldr	r2, [pc, #92]	; (8009b4c <HAL_I2C_MspInit+0xec>)
 8009af0:	f043 0302 	orr.w	r3, r3, #2
 8009af4:	6313      	str	r3, [r2, #48]	; 0x30
 8009af6:	4b15      	ldr	r3, [pc, #84]	; (8009b4c <HAL_I2C_MspInit+0xec>)
 8009af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009afa:	f003 0302 	and.w	r3, r3, #2
 8009afe:	613b      	str	r3, [r7, #16]
 8009b00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009b02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009b08:	2312      	movs	r3, #18
 8009b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b10:	2303      	movs	r3, #3
 8009b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009b14:	2304      	movs	r3, #4
 8009b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b18:	f107 031c 	add.w	r3, r7, #28
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	480c      	ldr	r0, [pc, #48]	; (8009b50 <HAL_I2C_MspInit+0xf0>)
 8009b20:	f7f9 f860 	bl	8002be4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009b24:	2300      	movs	r3, #0
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	4b08      	ldr	r3, [pc, #32]	; (8009b4c <HAL_I2C_MspInit+0xec>)
 8009b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2c:	4a07      	ldr	r2, [pc, #28]	; (8009b4c <HAL_I2C_MspInit+0xec>)
 8009b2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b32:	6413      	str	r3, [r2, #64]	; 0x40
 8009b34:	4b05      	ldr	r3, [pc, #20]	; (8009b4c <HAL_I2C_MspInit+0xec>)
 8009b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b3c:	60fb      	str	r3, [r7, #12]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
}
 8009b40:	bf00      	nop
 8009b42:	3730      	adds	r7, #48	; 0x30
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	40005400 	.word	0x40005400
 8009b4c:	40023800 	.word	0x40023800
 8009b50:	40020400 	.word	0x40020400
 8009b54:	40005800 	.word	0x40005800

08009b58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08a      	sub	sp, #40	; 0x28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b60:	f107 0314 	add.w	r3, r7, #20
 8009b64:	2200      	movs	r2, #0
 8009b66:	601a      	str	r2, [r3, #0]
 8009b68:	605a      	str	r2, [r3, #4]
 8009b6a:	609a      	str	r2, [r3, #8]
 8009b6c:	60da      	str	r2, [r3, #12]
 8009b6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a1d      	ldr	r2, [pc, #116]	; (8009bec <HAL_SPI_MspInit+0x94>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d134      	bne.n	8009be4 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	613b      	str	r3, [r7, #16]
 8009b7e:	4b1c      	ldr	r3, [pc, #112]	; (8009bf0 <HAL_SPI_MspInit+0x98>)
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	4a1b      	ldr	r2, [pc, #108]	; (8009bf0 <HAL_SPI_MspInit+0x98>)
 8009b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b88:	6413      	str	r3, [r2, #64]	; 0x40
 8009b8a:	4b19      	ldr	r3, [pc, #100]	; (8009bf0 <HAL_SPI_MspInit+0x98>)
 8009b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b92:	613b      	str	r3, [r7, #16]
 8009b94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b96:	2300      	movs	r3, #0
 8009b98:	60fb      	str	r3, [r7, #12]
 8009b9a:	4b15      	ldr	r3, [pc, #84]	; (8009bf0 <HAL_SPI_MspInit+0x98>)
 8009b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9e:	4a14      	ldr	r2, [pc, #80]	; (8009bf0 <HAL_SPI_MspInit+0x98>)
 8009ba0:	f043 0302 	orr.w	r3, r3, #2
 8009ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ba6:	4b12      	ldr	r3, [pc, #72]	; (8009bf0 <HAL_SPI_MspInit+0x98>)
 8009ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8009bb2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bb8:	2302      	movs	r3, #2
 8009bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009bc4:	2305      	movs	r3, #5
 8009bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009bc8:	f107 0314 	add.w	r3, r7, #20
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4809      	ldr	r0, [pc, #36]	; (8009bf4 <HAL_SPI_MspInit+0x9c>)
 8009bd0:	f7f9 f808 	bl	8002be4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	2024      	movs	r0, #36	; 0x24
 8009bda:	f7f8 fbe8 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8009bde:	2024      	movs	r0, #36	; 0x24
 8009be0:	f7f8 fc01 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8009be4:	bf00      	nop
 8009be6:	3728      	adds	r7, #40	; 0x28
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	40003800 	.word	0x40003800
 8009bf0:	40023800 	.word	0x40023800
 8009bf4:	40020400 	.word	0x40020400

08009bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08e      	sub	sp, #56	; 0x38
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c04:	2200      	movs	r2, #0
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	605a      	str	r2, [r3, #4]
 8009c0a:	609a      	str	r2, [r3, #8]
 8009c0c:	60da      	str	r2, [r3, #12]
 8009c0e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a5d      	ldr	r2, [pc, #372]	; (8009d8c <HAL_TIM_Base_MspInit+0x194>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d12e      	bne.n	8009c78 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	623b      	str	r3, [r7, #32]
 8009c1e:	4b5c      	ldr	r3, [pc, #368]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c22:	4a5b      	ldr	r2, [pc, #364]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009c24:	f043 0301 	orr.w	r3, r3, #1
 8009c28:	6453      	str	r3, [r2, #68]	; 0x44
 8009c2a:	4b59      	ldr	r3, [pc, #356]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	623b      	str	r3, [r7, #32]
 8009c34:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8009c36:	2200      	movs	r2, #0
 8009c38:	2100      	movs	r1, #0
 8009c3a:	2018      	movs	r0, #24
 8009c3c:	f7f8 fbb7 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8009c40:	2018      	movs	r0, #24
 8009c42:	f7f8 fbd0 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8009c46:	2200      	movs	r2, #0
 8009c48:	2100      	movs	r1, #0
 8009c4a:	2019      	movs	r0, #25
 8009c4c:	f7f8 fbaf 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009c50:	2019      	movs	r0, #25
 8009c52:	f7f8 fbc8 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8009c56:	2200      	movs	r2, #0
 8009c58:	2100      	movs	r1, #0
 8009c5a:	201a      	movs	r0, #26
 8009c5c:	f7f8 fba7 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8009c60:	201a      	movs	r0, #26
 8009c62:	f7f8 fbc0 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8009c66:	2200      	movs	r2, #0
 8009c68:	2100      	movs	r1, #0
 8009c6a:	201b      	movs	r0, #27
 8009c6c:	f7f8 fb9f 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8009c70:	201b      	movs	r0, #27
 8009c72:	f7f8 fbb8 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8009c76:	e084      	b.n	8009d82 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM2)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c80:	d10e      	bne.n	8009ca0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009c82:	2300      	movs	r3, #0
 8009c84:	61fb      	str	r3, [r7, #28]
 8009c86:	4b42      	ldr	r3, [pc, #264]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8a:	4a41      	ldr	r2, [pc, #260]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009c8c:	f043 0301 	orr.w	r3, r3, #1
 8009c90:	6413      	str	r3, [r2, #64]	; 0x40
 8009c92:	4b3f      	ldr	r3, [pc, #252]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c96:	f003 0301 	and.w	r3, r3, #1
 8009c9a:	61fb      	str	r3, [r7, #28]
 8009c9c:	69fb      	ldr	r3, [r7, #28]
}
 8009c9e:	e070      	b.n	8009d82 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM9)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a3b      	ldr	r2, [pc, #236]	; (8009d94 <HAL_TIM_Base_MspInit+0x19c>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d116      	bne.n	8009cd8 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8009caa:	2300      	movs	r3, #0
 8009cac:	61bb      	str	r3, [r7, #24]
 8009cae:	4b38      	ldr	r3, [pc, #224]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb2:	4a37      	ldr	r2, [pc, #220]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8009cba:	4b35      	ldr	r3, [pc, #212]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cc2:	61bb      	str	r3, [r7, #24]
 8009cc4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	2100      	movs	r1, #0
 8009cca:	2018      	movs	r0, #24
 8009ccc:	f7f8 fb6f 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8009cd0:	2018      	movs	r0, #24
 8009cd2:	f7f8 fb88 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 8009cd6:	e054      	b.n	8009d82 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM12)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a2e      	ldr	r2, [pc, #184]	; (8009d98 <HAL_TIM_Base_MspInit+0x1a0>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d116      	bne.n	8009d10 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	617b      	str	r3, [r7, #20]
 8009ce6:	4b2a      	ldr	r3, [pc, #168]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cea:	4a29      	ldr	r2, [pc, #164]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8009cf2:	4b27      	ldr	r3, [pc, #156]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cfa:	617b      	str	r3, [r7, #20]
 8009cfc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8009cfe:	2200      	movs	r2, #0
 8009d00:	2100      	movs	r1, #0
 8009d02:	202b      	movs	r0, #43	; 0x2b
 8009d04:	f7f8 fb53 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8009d08:	202b      	movs	r0, #43	; 0x2b
 8009d0a:	f7f8 fb6c 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 8009d0e:	e038      	b.n	8009d82 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM13)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a21      	ldr	r2, [pc, #132]	; (8009d9c <HAL_TIM_Base_MspInit+0x1a4>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d133      	bne.n	8009d82 <HAL_TIM_Base_MspInit+0x18a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	613b      	str	r3, [r7, #16]
 8009d1e:	4b1c      	ldr	r3, [pc, #112]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d22:	4a1b      	ldr	r2, [pc, #108]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d28:	6413      	str	r3, [r2, #64]	; 0x40
 8009d2a:	4b19      	ldr	r3, [pc, #100]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d32:	613b      	str	r3, [r7, #16]
 8009d34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d36:	2300      	movs	r3, #0
 8009d38:	60fb      	str	r3, [r7, #12]
 8009d3a:	4b15      	ldr	r3, [pc, #84]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3e:	4a14      	ldr	r2, [pc, #80]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009d40:	f043 0301 	orr.w	r3, r3, #1
 8009d44:	6313      	str	r3, [r2, #48]	; 0x30
 8009d46:	4b12      	ldr	r3, [pc, #72]	; (8009d90 <HAL_TIM_Base_MspInit+0x198>)
 8009d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009d52:	2340      	movs	r3, #64	; 0x40
 8009d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d56:	2302      	movs	r3, #2
 8009d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8009d62:	2309      	movs	r3, #9
 8009d64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	480c      	ldr	r0, [pc, #48]	; (8009da0 <HAL_TIM_Base_MspInit+0x1a8>)
 8009d6e:	f7f8 ff39 	bl	8002be4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8009d72:	2200      	movs	r2, #0
 8009d74:	2100      	movs	r1, #0
 8009d76:	202c      	movs	r0, #44	; 0x2c
 8009d78:	f7f8 fb19 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8009d7c:	202c      	movs	r0, #44	; 0x2c
 8009d7e:	f7f8 fb32 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 8009d82:	bf00      	nop
 8009d84:	3738      	adds	r7, #56	; 0x38
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	40010000 	.word	0x40010000
 8009d90:	40023800 	.word	0x40023800
 8009d94:	40014000 	.word	0x40014000
 8009d98:	40001800 	.word	0x40001800
 8009d9c:	40001c00 	.word	0x40001c00
 8009da0:	40020000 	.word	0x40020000

08009da4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b08a      	sub	sp, #40	; 0x28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009dac:	f107 0314 	add.w	r3, r7, #20
 8009db0:	2200      	movs	r2, #0
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	605a      	str	r2, [r3, #4]
 8009db6:	609a      	str	r2, [r3, #8]
 8009db8:	60da      	str	r2, [r3, #12]
 8009dba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a29      	ldr	r2, [pc, #164]	; (8009e68 <HAL_TIM_Encoder_MspInit+0xc4>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d14b      	bne.n	8009e5e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	613b      	str	r3, [r7, #16]
 8009dca:	4b28      	ldr	r3, [pc, #160]	; (8009e6c <HAL_TIM_Encoder_MspInit+0xc8>)
 8009dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dce:	4a27      	ldr	r2, [pc, #156]	; (8009e6c <HAL_TIM_Encoder_MspInit+0xc8>)
 8009dd0:	f043 0302 	orr.w	r3, r3, #2
 8009dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8009dd6:	4b25      	ldr	r3, [pc, #148]	; (8009e6c <HAL_TIM_Encoder_MspInit+0xc8>)
 8009dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dda:	f003 0302 	and.w	r3, r3, #2
 8009dde:	613b      	str	r3, [r7, #16]
 8009de0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009de2:	2300      	movs	r3, #0
 8009de4:	60fb      	str	r3, [r7, #12]
 8009de6:	4b21      	ldr	r3, [pc, #132]	; (8009e6c <HAL_TIM_Encoder_MspInit+0xc8>)
 8009de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dea:	4a20      	ldr	r2, [pc, #128]	; (8009e6c <HAL_TIM_Encoder_MspInit+0xc8>)
 8009dec:	f043 0304 	orr.w	r3, r3, #4
 8009df0:	6313      	str	r3, [r2, #48]	; 0x30
 8009df2:	4b1e      	ldr	r3, [pc, #120]	; (8009e6c <HAL_TIM_Encoder_MspInit+0xc8>)
 8009df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df6:	f003 0304 	and.w	r3, r3, #4
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009dfe:	23c0      	movs	r3, #192	; 0xc0
 8009e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e02:	2302      	movs	r3, #2
 8009e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009e12:	f107 0314 	add.w	r3, r7, #20
 8009e16:	4619      	mov	r1, r3
 8009e18:	4815      	ldr	r0, [pc, #84]	; (8009e70 <HAL_TIM_Encoder_MspInit+0xcc>)
 8009e1a:	f7f8 fee3 	bl	8002be4 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8009e1e:	2200      	movs	r2, #0
 8009e20:	2100      	movs	r1, #0
 8009e22:	202b      	movs	r0, #43	; 0x2b
 8009e24:	f7f8 fac3 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8009e28:	202b      	movs	r0, #43	; 0x2b
 8009e2a:	f7f8 fadc 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8009e2e:	2200      	movs	r2, #0
 8009e30:	2100      	movs	r1, #0
 8009e32:	202c      	movs	r0, #44	; 0x2c
 8009e34:	f7f8 fabb 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8009e38:	202c      	movs	r0, #44	; 0x2c
 8009e3a:	f7f8 fad4 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2100      	movs	r1, #0
 8009e42:	202d      	movs	r0, #45	; 0x2d
 8009e44:	f7f8 fab3 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8009e48:	202d      	movs	r0, #45	; 0x2d
 8009e4a:	f7f8 facc 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8009e4e:	2200      	movs	r2, #0
 8009e50:	2100      	movs	r1, #0
 8009e52:	202e      	movs	r0, #46	; 0x2e
 8009e54:	f7f8 faab 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8009e58:	202e      	movs	r0, #46	; 0x2e
 8009e5a:	f7f8 fac4 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8009e5e:	bf00      	nop
 8009e60:	3728      	adds	r7, #40	; 0x28
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	40010400 	.word	0x40010400
 8009e6c:	40023800 	.word	0x40023800
 8009e70:	40020800 	.word	0x40020800

08009e74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08a      	sub	sp, #40	; 0x28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e7c:	f107 0314 	add.w	r3, r7, #20
 8009e80:	2200      	movs	r2, #0
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	605a      	str	r2, [r3, #4]
 8009e86:	609a      	str	r2, [r3, #8]
 8009e88:	60da      	str	r2, [r3, #12]
 8009e8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a24      	ldr	r2, [pc, #144]	; (8009f24 <HAL_TIM_MspPostInit+0xb0>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d11f      	bne.n	8009ed6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009e96:	2300      	movs	r3, #0
 8009e98:	613b      	str	r3, [r7, #16]
 8009e9a:	4b23      	ldr	r3, [pc, #140]	; (8009f28 <HAL_TIM_MspPostInit+0xb4>)
 8009e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9e:	4a22      	ldr	r2, [pc, #136]	; (8009f28 <HAL_TIM_MspPostInit+0xb4>)
 8009ea0:	f043 0310 	orr.w	r3, r3, #16
 8009ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ea6:	4b20      	ldr	r3, [pc, #128]	; (8009f28 <HAL_TIM_MspPostInit+0xb4>)
 8009ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eaa:	f003 0310 	and.w	r3, r3, #16
 8009eae:	613b      	str	r3, [r7, #16]
 8009eb0:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8009eb2:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8009eb6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eb8:	2302      	movs	r3, #2
 8009eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009ec8:	f107 0314 	add.w	r3, r7, #20
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4817      	ldr	r0, [pc, #92]	; (8009f2c <HAL_TIM_MspPostInit+0xb8>)
 8009ed0:	f7f8 fe88 	bl	8002be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8009ed4:	e022      	b.n	8009f1c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a15      	ldr	r2, [pc, #84]	; (8009f30 <HAL_TIM_MspPostInit+0xbc>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d11d      	bne.n	8009f1c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60fb      	str	r3, [r7, #12]
 8009ee4:	4b10      	ldr	r3, [pc, #64]	; (8009f28 <HAL_TIM_MspPostInit+0xb4>)
 8009ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee8:	4a0f      	ldr	r2, [pc, #60]	; (8009f28 <HAL_TIM_MspPostInit+0xb4>)
 8009eea:	f043 0310 	orr.w	r3, r3, #16
 8009eee:	6313      	str	r3, [r2, #48]	; 0x30
 8009ef0:	4b0d      	ldr	r3, [pc, #52]	; (8009f28 <HAL_TIM_MspPostInit+0xb4>)
 8009ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef4:	f003 0310 	and.w	r3, r3, #16
 8009ef8:	60fb      	str	r3, [r7, #12]
 8009efa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009efc:	2360      	movs	r3, #96	; 0x60
 8009efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f00:	2302      	movs	r3, #2
 8009f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f04:	2300      	movs	r3, #0
 8009f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009f10:	f107 0314 	add.w	r3, r7, #20
 8009f14:	4619      	mov	r1, r3
 8009f16:	4805      	ldr	r0, [pc, #20]	; (8009f2c <HAL_TIM_MspPostInit+0xb8>)
 8009f18:	f7f8 fe64 	bl	8002be4 <HAL_GPIO_Init>
}
 8009f1c:	bf00      	nop
 8009f1e:	3728      	adds	r7, #40	; 0x28
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	40010000 	.word	0x40010000
 8009f28:	40023800 	.word	0x40023800
 8009f2c:	40021000 	.word	0x40021000
 8009f30:	40014000 	.word	0x40014000

08009f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b08a      	sub	sp, #40	; 0x28
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f3c:	f107 0314 	add.w	r3, r7, #20
 8009f40:	2200      	movs	r2, #0
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	605a      	str	r2, [r3, #4]
 8009f46:	609a      	str	r2, [r3, #8]
 8009f48:	60da      	str	r2, [r3, #12]
 8009f4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a34      	ldr	r2, [pc, #208]	; (800a024 <HAL_UART_MspInit+0xf0>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d162      	bne.n	800a01c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8009f56:	2300      	movs	r3, #0
 8009f58:	613b      	str	r3, [r7, #16]
 8009f5a:	4b33      	ldr	r3, [pc, #204]	; (800a028 <HAL_UART_MspInit+0xf4>)
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5e:	4a32      	ldr	r2, [pc, #200]	; (800a028 <HAL_UART_MspInit+0xf4>)
 8009f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f64:	6413      	str	r3, [r2, #64]	; 0x40
 8009f66:	4b30      	ldr	r3, [pc, #192]	; (800a028 <HAL_UART_MspInit+0xf4>)
 8009f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f6e:	613b      	str	r3, [r7, #16]
 8009f70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009f72:	2300      	movs	r3, #0
 8009f74:	60fb      	str	r3, [r7, #12]
 8009f76:	4b2c      	ldr	r3, [pc, #176]	; (800a028 <HAL_UART_MspInit+0xf4>)
 8009f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f7a:	4a2b      	ldr	r2, [pc, #172]	; (800a028 <HAL_UART_MspInit+0xf4>)
 8009f7c:	f043 0308 	orr.w	r3, r3, #8
 8009f80:	6313      	str	r3, [r2, #48]	; 0x30
 8009f82:	4b29      	ldr	r3, [pc, #164]	; (800a028 <HAL_UART_MspInit+0xf4>)
 8009f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f86:	f003 0308 	and.w	r3, r3, #8
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009f8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f94:	2302      	movs	r3, #2
 8009f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009fa0:	2307      	movs	r3, #7
 8009fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009fa4:	f107 0314 	add.w	r3, r7, #20
 8009fa8:	4619      	mov	r1, r3
 8009faa:	4820      	ldr	r0, [pc, #128]	; (800a02c <HAL_UART_MspInit+0xf8>)
 8009fac:	f7f8 fe1a 	bl	8002be4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8009fb0:	4b1f      	ldr	r3, [pc, #124]	; (800a030 <HAL_UART_MspInit+0xfc>)
 8009fb2:	4a20      	ldr	r2, [pc, #128]	; (800a034 <HAL_UART_MspInit+0x100>)
 8009fb4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8009fb6:	4b1e      	ldr	r3, [pc, #120]	; (800a030 <HAL_UART_MspInit+0xfc>)
 8009fb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009fbc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009fbe:	4b1c      	ldr	r3, [pc, #112]	; (800a030 <HAL_UART_MspInit+0xfc>)
 8009fc0:	2240      	movs	r2, #64	; 0x40
 8009fc2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009fc4:	4b1a      	ldr	r3, [pc, #104]	; (800a030 <HAL_UART_MspInit+0xfc>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009fca:	4b19      	ldr	r3, [pc, #100]	; (800a030 <HAL_UART_MspInit+0xfc>)
 8009fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009fd0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009fd2:	4b17      	ldr	r3, [pc, #92]	; (800a030 <HAL_UART_MspInit+0xfc>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009fd8:	4b15      	ldr	r3, [pc, #84]	; (800a030 <HAL_UART_MspInit+0xfc>)
 8009fda:	2200      	movs	r2, #0
 8009fdc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8009fde:	4b14      	ldr	r3, [pc, #80]	; (800a030 <HAL_UART_MspInit+0xfc>)
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009fe4:	4b12      	ldr	r3, [pc, #72]	; (800a030 <HAL_UART_MspInit+0xfc>)
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009fea:	4b11      	ldr	r3, [pc, #68]	; (800a030 <HAL_UART_MspInit+0xfc>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8009ff0:	480f      	ldr	r0, [pc, #60]	; (800a030 <HAL_UART_MspInit+0xfc>)
 8009ff2:	f7f8 fa13 	bl	800241c <HAL_DMA_Init>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8009ffc:	f7ff face 	bl	800959c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a0b      	ldr	r2, [pc, #44]	; (800a030 <HAL_UART_MspInit+0xfc>)
 800a004:	631a      	str	r2, [r3, #48]	; 0x30
 800a006:	4a0a      	ldr	r2, [pc, #40]	; (800a030 <HAL_UART_MspInit+0xfc>)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800a00c:	2200      	movs	r2, #0
 800a00e:	2100      	movs	r1, #0
 800a010:	2027      	movs	r0, #39	; 0x27
 800a012:	f7f8 f9cc 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a016:	2027      	movs	r0, #39	; 0x27
 800a018:	f7f8 f9e5 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800a01c:	bf00      	nop
 800a01e:	3728      	adds	r7, #40	; 0x28
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	40004800 	.word	0x40004800
 800a028:	40023800 	.word	0x40023800
 800a02c:	40020c00 	.word	0x40020c00
 800a030:	20000654 	.word	0x20000654
 800a034:	40026058 	.word	0x40026058

0800a038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a038:	b480      	push	{r7}
 800a03a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a03c:	bf00      	nop
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a046:	b480      	push	{r7}
 800a048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a04a:	e7fe      	b.n	800a04a <HardFault_Handler+0x4>

0800a04c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a04c:	b480      	push	{r7}
 800a04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a050:	e7fe      	b.n	800a050 <MemManage_Handler+0x4>

0800a052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a052:	b480      	push	{r7}
 800a054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a056:	e7fe      	b.n	800a056 <BusFault_Handler+0x4>

0800a058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a058:	b480      	push	{r7}
 800a05a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a05c:	e7fe      	b.n	800a05c <UsageFault_Handler+0x4>

0800a05e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a05e:	b480      	push	{r7}
 800a060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a062:	bf00      	nop
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a06c:	b480      	push	{r7}
 800a06e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a070:	bf00      	nop
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a07a:	b480      	push	{r7}
 800a07c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a07e:	bf00      	nop
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a08c:	f7f6 ffb8 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a090:	bf00      	nop
 800a092:	bd80      	pop	{r7, pc}

0800a094 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800a098:	4802      	ldr	r0, [pc, #8]	; (800a0a4 <DMA1_Stream3_IRQHandler+0x10>)
 800a09a:	f7f8 fae7 	bl	800266c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800a09e:	bf00      	nop
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	20000654 	.word	0x20000654

0800a0a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800a0ac:	4805      	ldr	r0, [pc, #20]	; (800a0c4 <ADC_IRQHandler+0x1c>)
 800a0ae:	f7f7 f82c 	bl	800110a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800a0b2:	4805      	ldr	r0, [pc, #20]	; (800a0c8 <ADC_IRQHandler+0x20>)
 800a0b4:	f7f7 f829 	bl	800110a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800a0b8:	4804      	ldr	r0, [pc, #16]	; (800a0cc <ADC_IRQHandler+0x24>)
 800a0ba:	f7f7 f826 	bl	800110a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800a0be:	bf00      	nop
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	200006f0 	.word	0x200006f0
 800a0c8:	20000500 	.word	0x20000500
 800a0cc:	20000738 	.word	0x20000738

0800a0d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800a0d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a0d8:	f7f8 ff52 	bl	8002f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a0dc:	bf00      	nop
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a0e4:	4803      	ldr	r0, [pc, #12]	; (800a0f4 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800a0e6:	f7fb fbf1 	bl	80058cc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800a0ea:	4803      	ldr	r0, [pc, #12]	; (800a0f8 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800a0ec:	f7fb fbee 	bl	80058cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800a0f0:	bf00      	nop
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	20000824 	.word	0x20000824
 800a0f8:	200008a0 	.word	0x200008a0

0800a0fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a100:	4802      	ldr	r0, [pc, #8]	; (800a10c <TIM1_UP_TIM10_IRQHandler+0x10>)
 800a102:	f7fb fbe3 	bl	80058cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a106:	bf00      	nop
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	20000824 	.word	0x20000824

0800a110 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a114:	4802      	ldr	r0, [pc, #8]	; (800a120 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800a116:	f7fb fbd9 	bl	80058cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800a11a:	bf00      	nop
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	20000824 	.word	0x20000824

0800a124 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a128:	4802      	ldr	r0, [pc, #8]	; (800a134 <TIM1_CC_IRQHandler+0x10>)
 800a12a:	f7fb fbcf 	bl	80058cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800a12e:	bf00      	nop
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20000824 	.word	0x20000824

0800a138 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800a13c:	4802      	ldr	r0, [pc, #8]	; (800a148 <SPI2_IRQHandler+0x10>)
 800a13e:	f7fa ff65 	bl	800500c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800a142:	bf00      	nop
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	200000e0 	.word	0x200000e0

0800a14c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800a150:	4802      	ldr	r0, [pc, #8]	; (800a15c <USART3_IRQHandler+0x10>)
 800a152:	f7fc fd73 	bl	8006c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800a156:	bf00      	nop
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	200004c0 	.word	0x200004c0

0800a160 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800a164:	4803      	ldr	r0, [pc, #12]	; (800a174 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800a166:	f7fb fbb1 	bl	80058cc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800a16a:	4803      	ldr	r0, [pc, #12]	; (800a178 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800a16c:	f7fb fbae 	bl	80058cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800a170:	bf00      	nop
 800a172:	bd80      	pop	{r7, pc}
 800a174:	20000480 	.word	0x20000480
 800a178:	200009e4 	.word	0x200009e4

0800a17c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800a180:	4803      	ldr	r0, [pc, #12]	; (800a190 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800a182:	f7fb fba3 	bl	80058cc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800a186:	4803      	ldr	r0, [pc, #12]	; (800a194 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800a188:	f7fb fba0 	bl	80058cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800a18c:	bf00      	nop
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	20000480 	.word	0x20000480
 800a194:	20000780 	.word	0x20000780

0800a198 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800a19c:	4802      	ldr	r0, [pc, #8]	; (800a1a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800a19e:	f7fb fb95 	bl	80058cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800a1a2:	bf00      	nop
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20000480 	.word	0x20000480

0800a1ac <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800a1b0:	4802      	ldr	r0, [pc, #8]	; (800a1bc <TIM8_CC_IRQHandler+0x10>)
 800a1b2:	f7fb fb8b 	bl	80058cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800a1b6:	bf00      	nop
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20000480 	.word	0x20000480

0800a1c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a1c4:	4802      	ldr	r0, [pc, #8]	; (800a1d0 <DMA2_Stream0_IRQHandler+0x10>)
 800a1c6:	f7f8 fa51 	bl	800266c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800a1ca:	bf00      	nop
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	200007c4 	.word	0x200007c4

0800a1d4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800a1d8:	4802      	ldr	r0, [pc, #8]	; (800a1e4 <DMA2_Stream1_IRQHandler+0x10>)
 800a1da:	f7f8 fa47 	bl	800266c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800a1de:	bf00      	nop
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	200005f4 	.word	0x200005f4

0800a1e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800a1ec:	4802      	ldr	r0, [pc, #8]	; (800a1f8 <DMA2_Stream2_IRQHandler+0x10>)
 800a1ee:	f7f8 fa3d 	bl	800266c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800a1f2:	bf00      	nop
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	2000095c 	.word	0x2000095c

0800a1fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a204:	4b11      	ldr	r3, [pc, #68]	; (800a24c <_sbrk+0x50>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d102      	bne.n	800a212 <_sbrk+0x16>
		heap_end = &end;
 800a20c:	4b0f      	ldr	r3, [pc, #60]	; (800a24c <_sbrk+0x50>)
 800a20e:	4a10      	ldr	r2, [pc, #64]	; (800a250 <_sbrk+0x54>)
 800a210:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a212:	4b0e      	ldr	r3, [pc, #56]	; (800a24c <_sbrk+0x50>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a218:	4b0c      	ldr	r3, [pc, #48]	; (800a24c <_sbrk+0x50>)
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4413      	add	r3, r2
 800a220:	466a      	mov	r2, sp
 800a222:	4293      	cmp	r3, r2
 800a224:	d907      	bls.n	800a236 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a226:	f000 f855 	bl	800a2d4 <__errno>
 800a22a:	4602      	mov	r2, r0
 800a22c:	230c      	movs	r3, #12
 800a22e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a234:	e006      	b.n	800a244 <_sbrk+0x48>
	}

	heap_end += incr;
 800a236:	4b05      	ldr	r3, [pc, #20]	; (800a24c <_sbrk+0x50>)
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4413      	add	r3, r2
 800a23e:	4a03      	ldr	r2, [pc, #12]	; (800a24c <_sbrk+0x50>)
 800a240:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a242:	68fb      	ldr	r3, [r7, #12]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	200000d0 	.word	0x200000d0
 800a250:	20000a28 	.word	0x20000a28

0800a254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a254:	b480      	push	{r7}
 800a256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a258:	4b08      	ldr	r3, [pc, #32]	; (800a27c <SystemInit+0x28>)
 800a25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a25e:	4a07      	ldr	r2, [pc, #28]	; (800a27c <SystemInit+0x28>)
 800a260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a268:	4b04      	ldr	r3, [pc, #16]	; (800a27c <SystemInit+0x28>)
 800a26a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a26e:	609a      	str	r2, [r3, #8]
#endif
}
 800a270:	bf00      	nop
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	e000ed00 	.word	0xe000ed00

0800a280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a280:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a2b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a284:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a286:	e003      	b.n	800a290 <LoopCopyDataInit>

0800a288 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a288:	4b0c      	ldr	r3, [pc, #48]	; (800a2bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a28a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a28c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a28e:	3104      	adds	r1, #4

0800a290 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a290:	480b      	ldr	r0, [pc, #44]	; (800a2c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a292:	4b0c      	ldr	r3, [pc, #48]	; (800a2c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a294:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a296:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a298:	d3f6      	bcc.n	800a288 <CopyDataInit>
  ldr  r2, =_sbss
 800a29a:	4a0b      	ldr	r2, [pc, #44]	; (800a2c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a29c:	e002      	b.n	800a2a4 <LoopFillZerobss>

0800a29e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a29e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a2a0:	f842 3b04 	str.w	r3, [r2], #4

0800a2a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a2a4:	4b09      	ldr	r3, [pc, #36]	; (800a2cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a2a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a2a8:	d3f9      	bcc.n	800a29e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a2aa:	f7ff ffd3 	bl	800a254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a2ae:	f000 f817 	bl	800a2e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a2b2:	f7fd fa81 	bl	80077b8 <main>
  bx  lr    
 800a2b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a2b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a2bc:	0800be60 	.word	0x0800be60
  ldr  r0, =_sdata
 800a2c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a2c4:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 800a2c8:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 800a2cc:	20000a28 	.word	0x20000a28

0800a2d0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a2d0:	e7fe      	b.n	800a2d0 <CAN1_RX0_IRQHandler>
	...

0800a2d4 <__errno>:
 800a2d4:	4b01      	ldr	r3, [pc, #4]	; (800a2dc <__errno+0x8>)
 800a2d6:	6818      	ldr	r0, [r3, #0]
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	20000028 	.word	0x20000028

0800a2e0 <__libc_init_array>:
 800a2e0:	b570      	push	{r4, r5, r6, lr}
 800a2e2:	4e0d      	ldr	r6, [pc, #52]	; (800a318 <__libc_init_array+0x38>)
 800a2e4:	4c0d      	ldr	r4, [pc, #52]	; (800a31c <__libc_init_array+0x3c>)
 800a2e6:	1ba4      	subs	r4, r4, r6
 800a2e8:	10a4      	asrs	r4, r4, #2
 800a2ea:	2500      	movs	r5, #0
 800a2ec:	42a5      	cmp	r5, r4
 800a2ee:	d109      	bne.n	800a304 <__libc_init_array+0x24>
 800a2f0:	4e0b      	ldr	r6, [pc, #44]	; (800a320 <__libc_init_array+0x40>)
 800a2f2:	4c0c      	ldr	r4, [pc, #48]	; (800a324 <__libc_init_array+0x44>)
 800a2f4:	f001 fc36 	bl	800bb64 <_init>
 800a2f8:	1ba4      	subs	r4, r4, r6
 800a2fa:	10a4      	asrs	r4, r4, #2
 800a2fc:	2500      	movs	r5, #0
 800a2fe:	42a5      	cmp	r5, r4
 800a300:	d105      	bne.n	800a30e <__libc_init_array+0x2e>
 800a302:	bd70      	pop	{r4, r5, r6, pc}
 800a304:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a308:	4798      	blx	r3
 800a30a:	3501      	adds	r5, #1
 800a30c:	e7ee      	b.n	800a2ec <__libc_init_array+0xc>
 800a30e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a312:	4798      	blx	r3
 800a314:	3501      	adds	r5, #1
 800a316:	e7f2      	b.n	800a2fe <__libc_init_array+0x1e>
 800a318:	0800be58 	.word	0x0800be58
 800a31c:	0800be58 	.word	0x0800be58
 800a320:	0800be58 	.word	0x0800be58
 800a324:	0800be5c 	.word	0x0800be5c

0800a328 <memset>:
 800a328:	4402      	add	r2, r0
 800a32a:	4603      	mov	r3, r0
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d100      	bne.n	800a332 <memset+0xa>
 800a330:	4770      	bx	lr
 800a332:	f803 1b01 	strb.w	r1, [r3], #1
 800a336:	e7f9      	b.n	800a32c <memset+0x4>

0800a338 <siprintf>:
 800a338:	b40e      	push	{r1, r2, r3}
 800a33a:	b500      	push	{lr}
 800a33c:	b09c      	sub	sp, #112	; 0x70
 800a33e:	ab1d      	add	r3, sp, #116	; 0x74
 800a340:	9002      	str	r0, [sp, #8]
 800a342:	9006      	str	r0, [sp, #24]
 800a344:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a348:	4809      	ldr	r0, [pc, #36]	; (800a370 <siprintf+0x38>)
 800a34a:	9107      	str	r1, [sp, #28]
 800a34c:	9104      	str	r1, [sp, #16]
 800a34e:	4909      	ldr	r1, [pc, #36]	; (800a374 <siprintf+0x3c>)
 800a350:	f853 2b04 	ldr.w	r2, [r3], #4
 800a354:	9105      	str	r1, [sp, #20]
 800a356:	6800      	ldr	r0, [r0, #0]
 800a358:	9301      	str	r3, [sp, #4]
 800a35a:	a902      	add	r1, sp, #8
 800a35c:	f000 f866 	bl	800a42c <_svfiprintf_r>
 800a360:	9b02      	ldr	r3, [sp, #8]
 800a362:	2200      	movs	r2, #0
 800a364:	701a      	strb	r2, [r3, #0]
 800a366:	b01c      	add	sp, #112	; 0x70
 800a368:	f85d eb04 	ldr.w	lr, [sp], #4
 800a36c:	b003      	add	sp, #12
 800a36e:	4770      	bx	lr
 800a370:	20000028 	.word	0x20000028
 800a374:	ffff0208 	.word	0xffff0208

0800a378 <__ssputs_r>:
 800a378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a37c:	688e      	ldr	r6, [r1, #8]
 800a37e:	429e      	cmp	r6, r3
 800a380:	4682      	mov	sl, r0
 800a382:	460c      	mov	r4, r1
 800a384:	4690      	mov	r8, r2
 800a386:	4699      	mov	r9, r3
 800a388:	d837      	bhi.n	800a3fa <__ssputs_r+0x82>
 800a38a:	898a      	ldrh	r2, [r1, #12]
 800a38c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a390:	d031      	beq.n	800a3f6 <__ssputs_r+0x7e>
 800a392:	6825      	ldr	r5, [r4, #0]
 800a394:	6909      	ldr	r1, [r1, #16]
 800a396:	1a6f      	subs	r7, r5, r1
 800a398:	6965      	ldr	r5, [r4, #20]
 800a39a:	2302      	movs	r3, #2
 800a39c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3a0:	fb95 f5f3 	sdiv	r5, r5, r3
 800a3a4:	f109 0301 	add.w	r3, r9, #1
 800a3a8:	443b      	add	r3, r7
 800a3aa:	429d      	cmp	r5, r3
 800a3ac:	bf38      	it	cc
 800a3ae:	461d      	movcc	r5, r3
 800a3b0:	0553      	lsls	r3, r2, #21
 800a3b2:	d530      	bpl.n	800a416 <__ssputs_r+0x9e>
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	f000 fb2b 	bl	800aa10 <_malloc_r>
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	b950      	cbnz	r0, 800a3d4 <__ssputs_r+0x5c>
 800a3be:	230c      	movs	r3, #12
 800a3c0:	f8ca 3000 	str.w	r3, [sl]
 800a3c4:	89a3      	ldrh	r3, [r4, #12]
 800a3c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ca:	81a3      	strh	r3, [r4, #12]
 800a3cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3d4:	463a      	mov	r2, r7
 800a3d6:	6921      	ldr	r1, [r4, #16]
 800a3d8:	f000 faa8 	bl	800a92c <memcpy>
 800a3dc:	89a3      	ldrh	r3, [r4, #12]
 800a3de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e6:	81a3      	strh	r3, [r4, #12]
 800a3e8:	6126      	str	r6, [r4, #16]
 800a3ea:	6165      	str	r5, [r4, #20]
 800a3ec:	443e      	add	r6, r7
 800a3ee:	1bed      	subs	r5, r5, r7
 800a3f0:	6026      	str	r6, [r4, #0]
 800a3f2:	60a5      	str	r5, [r4, #8]
 800a3f4:	464e      	mov	r6, r9
 800a3f6:	454e      	cmp	r6, r9
 800a3f8:	d900      	bls.n	800a3fc <__ssputs_r+0x84>
 800a3fa:	464e      	mov	r6, r9
 800a3fc:	4632      	mov	r2, r6
 800a3fe:	4641      	mov	r1, r8
 800a400:	6820      	ldr	r0, [r4, #0]
 800a402:	f000 fa9e 	bl	800a942 <memmove>
 800a406:	68a3      	ldr	r3, [r4, #8]
 800a408:	1b9b      	subs	r3, r3, r6
 800a40a:	60a3      	str	r3, [r4, #8]
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	441e      	add	r6, r3
 800a410:	6026      	str	r6, [r4, #0]
 800a412:	2000      	movs	r0, #0
 800a414:	e7dc      	b.n	800a3d0 <__ssputs_r+0x58>
 800a416:	462a      	mov	r2, r5
 800a418:	f000 fb54 	bl	800aac4 <_realloc_r>
 800a41c:	4606      	mov	r6, r0
 800a41e:	2800      	cmp	r0, #0
 800a420:	d1e2      	bne.n	800a3e8 <__ssputs_r+0x70>
 800a422:	6921      	ldr	r1, [r4, #16]
 800a424:	4650      	mov	r0, sl
 800a426:	f000 faa5 	bl	800a974 <_free_r>
 800a42a:	e7c8      	b.n	800a3be <__ssputs_r+0x46>

0800a42c <_svfiprintf_r>:
 800a42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a430:	461d      	mov	r5, r3
 800a432:	898b      	ldrh	r3, [r1, #12]
 800a434:	061f      	lsls	r7, r3, #24
 800a436:	b09d      	sub	sp, #116	; 0x74
 800a438:	4680      	mov	r8, r0
 800a43a:	460c      	mov	r4, r1
 800a43c:	4616      	mov	r6, r2
 800a43e:	d50f      	bpl.n	800a460 <_svfiprintf_r+0x34>
 800a440:	690b      	ldr	r3, [r1, #16]
 800a442:	b96b      	cbnz	r3, 800a460 <_svfiprintf_r+0x34>
 800a444:	2140      	movs	r1, #64	; 0x40
 800a446:	f000 fae3 	bl	800aa10 <_malloc_r>
 800a44a:	6020      	str	r0, [r4, #0]
 800a44c:	6120      	str	r0, [r4, #16]
 800a44e:	b928      	cbnz	r0, 800a45c <_svfiprintf_r+0x30>
 800a450:	230c      	movs	r3, #12
 800a452:	f8c8 3000 	str.w	r3, [r8]
 800a456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a45a:	e0c8      	b.n	800a5ee <_svfiprintf_r+0x1c2>
 800a45c:	2340      	movs	r3, #64	; 0x40
 800a45e:	6163      	str	r3, [r4, #20]
 800a460:	2300      	movs	r3, #0
 800a462:	9309      	str	r3, [sp, #36]	; 0x24
 800a464:	2320      	movs	r3, #32
 800a466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a46a:	2330      	movs	r3, #48	; 0x30
 800a46c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a470:	9503      	str	r5, [sp, #12]
 800a472:	f04f 0b01 	mov.w	fp, #1
 800a476:	4637      	mov	r7, r6
 800a478:	463d      	mov	r5, r7
 800a47a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a47e:	b10b      	cbz	r3, 800a484 <_svfiprintf_r+0x58>
 800a480:	2b25      	cmp	r3, #37	; 0x25
 800a482:	d13e      	bne.n	800a502 <_svfiprintf_r+0xd6>
 800a484:	ebb7 0a06 	subs.w	sl, r7, r6
 800a488:	d00b      	beq.n	800a4a2 <_svfiprintf_r+0x76>
 800a48a:	4653      	mov	r3, sl
 800a48c:	4632      	mov	r2, r6
 800a48e:	4621      	mov	r1, r4
 800a490:	4640      	mov	r0, r8
 800a492:	f7ff ff71 	bl	800a378 <__ssputs_r>
 800a496:	3001      	adds	r0, #1
 800a498:	f000 80a4 	beq.w	800a5e4 <_svfiprintf_r+0x1b8>
 800a49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49e:	4453      	add	r3, sl
 800a4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4a2:	783b      	ldrb	r3, [r7, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 809d 	beq.w	800a5e4 <_svfiprintf_r+0x1b8>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4b4:	9304      	str	r3, [sp, #16]
 800a4b6:	9307      	str	r3, [sp, #28]
 800a4b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a4be:	462f      	mov	r7, r5
 800a4c0:	2205      	movs	r2, #5
 800a4c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a4c6:	4850      	ldr	r0, [pc, #320]	; (800a608 <_svfiprintf_r+0x1dc>)
 800a4c8:	f7f5 fe8a 	bl	80001e0 <memchr>
 800a4cc:	9b04      	ldr	r3, [sp, #16]
 800a4ce:	b9d0      	cbnz	r0, 800a506 <_svfiprintf_r+0xda>
 800a4d0:	06d9      	lsls	r1, r3, #27
 800a4d2:	bf44      	itt	mi
 800a4d4:	2220      	movmi	r2, #32
 800a4d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a4da:	071a      	lsls	r2, r3, #28
 800a4dc:	bf44      	itt	mi
 800a4de:	222b      	movmi	r2, #43	; 0x2b
 800a4e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a4e4:	782a      	ldrb	r2, [r5, #0]
 800a4e6:	2a2a      	cmp	r2, #42	; 0x2a
 800a4e8:	d015      	beq.n	800a516 <_svfiprintf_r+0xea>
 800a4ea:	9a07      	ldr	r2, [sp, #28]
 800a4ec:	462f      	mov	r7, r5
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	250a      	movs	r5, #10
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4f8:	3b30      	subs	r3, #48	; 0x30
 800a4fa:	2b09      	cmp	r3, #9
 800a4fc:	d94d      	bls.n	800a59a <_svfiprintf_r+0x16e>
 800a4fe:	b1b8      	cbz	r0, 800a530 <_svfiprintf_r+0x104>
 800a500:	e00f      	b.n	800a522 <_svfiprintf_r+0xf6>
 800a502:	462f      	mov	r7, r5
 800a504:	e7b8      	b.n	800a478 <_svfiprintf_r+0x4c>
 800a506:	4a40      	ldr	r2, [pc, #256]	; (800a608 <_svfiprintf_r+0x1dc>)
 800a508:	1a80      	subs	r0, r0, r2
 800a50a:	fa0b f000 	lsl.w	r0, fp, r0
 800a50e:	4318      	orrs	r0, r3
 800a510:	9004      	str	r0, [sp, #16]
 800a512:	463d      	mov	r5, r7
 800a514:	e7d3      	b.n	800a4be <_svfiprintf_r+0x92>
 800a516:	9a03      	ldr	r2, [sp, #12]
 800a518:	1d11      	adds	r1, r2, #4
 800a51a:	6812      	ldr	r2, [r2, #0]
 800a51c:	9103      	str	r1, [sp, #12]
 800a51e:	2a00      	cmp	r2, #0
 800a520:	db01      	blt.n	800a526 <_svfiprintf_r+0xfa>
 800a522:	9207      	str	r2, [sp, #28]
 800a524:	e004      	b.n	800a530 <_svfiprintf_r+0x104>
 800a526:	4252      	negs	r2, r2
 800a528:	f043 0302 	orr.w	r3, r3, #2
 800a52c:	9207      	str	r2, [sp, #28]
 800a52e:	9304      	str	r3, [sp, #16]
 800a530:	783b      	ldrb	r3, [r7, #0]
 800a532:	2b2e      	cmp	r3, #46	; 0x2e
 800a534:	d10c      	bne.n	800a550 <_svfiprintf_r+0x124>
 800a536:	787b      	ldrb	r3, [r7, #1]
 800a538:	2b2a      	cmp	r3, #42	; 0x2a
 800a53a:	d133      	bne.n	800a5a4 <_svfiprintf_r+0x178>
 800a53c:	9b03      	ldr	r3, [sp, #12]
 800a53e:	1d1a      	adds	r2, r3, #4
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	9203      	str	r2, [sp, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	bfb8      	it	lt
 800a548:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a54c:	3702      	adds	r7, #2
 800a54e:	9305      	str	r3, [sp, #20]
 800a550:	4d2e      	ldr	r5, [pc, #184]	; (800a60c <_svfiprintf_r+0x1e0>)
 800a552:	7839      	ldrb	r1, [r7, #0]
 800a554:	2203      	movs	r2, #3
 800a556:	4628      	mov	r0, r5
 800a558:	f7f5 fe42 	bl	80001e0 <memchr>
 800a55c:	b138      	cbz	r0, 800a56e <_svfiprintf_r+0x142>
 800a55e:	2340      	movs	r3, #64	; 0x40
 800a560:	1b40      	subs	r0, r0, r5
 800a562:	fa03 f000 	lsl.w	r0, r3, r0
 800a566:	9b04      	ldr	r3, [sp, #16]
 800a568:	4303      	orrs	r3, r0
 800a56a:	3701      	adds	r7, #1
 800a56c:	9304      	str	r3, [sp, #16]
 800a56e:	7839      	ldrb	r1, [r7, #0]
 800a570:	4827      	ldr	r0, [pc, #156]	; (800a610 <_svfiprintf_r+0x1e4>)
 800a572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a576:	2206      	movs	r2, #6
 800a578:	1c7e      	adds	r6, r7, #1
 800a57a:	f7f5 fe31 	bl	80001e0 <memchr>
 800a57e:	2800      	cmp	r0, #0
 800a580:	d038      	beq.n	800a5f4 <_svfiprintf_r+0x1c8>
 800a582:	4b24      	ldr	r3, [pc, #144]	; (800a614 <_svfiprintf_r+0x1e8>)
 800a584:	bb13      	cbnz	r3, 800a5cc <_svfiprintf_r+0x1a0>
 800a586:	9b03      	ldr	r3, [sp, #12]
 800a588:	3307      	adds	r3, #7
 800a58a:	f023 0307 	bic.w	r3, r3, #7
 800a58e:	3308      	adds	r3, #8
 800a590:	9303      	str	r3, [sp, #12]
 800a592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a594:	444b      	add	r3, r9
 800a596:	9309      	str	r3, [sp, #36]	; 0x24
 800a598:	e76d      	b.n	800a476 <_svfiprintf_r+0x4a>
 800a59a:	fb05 3202 	mla	r2, r5, r2, r3
 800a59e:	2001      	movs	r0, #1
 800a5a0:	460f      	mov	r7, r1
 800a5a2:	e7a6      	b.n	800a4f2 <_svfiprintf_r+0xc6>
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	3701      	adds	r7, #1
 800a5a8:	9305      	str	r3, [sp, #20]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	250a      	movs	r5, #10
 800a5ae:	4638      	mov	r0, r7
 800a5b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5b4:	3a30      	subs	r2, #48	; 0x30
 800a5b6:	2a09      	cmp	r2, #9
 800a5b8:	d903      	bls.n	800a5c2 <_svfiprintf_r+0x196>
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d0c8      	beq.n	800a550 <_svfiprintf_r+0x124>
 800a5be:	9105      	str	r1, [sp, #20]
 800a5c0:	e7c6      	b.n	800a550 <_svfiprintf_r+0x124>
 800a5c2:	fb05 2101 	mla	r1, r5, r1, r2
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	4607      	mov	r7, r0
 800a5ca:	e7f0      	b.n	800a5ae <_svfiprintf_r+0x182>
 800a5cc:	ab03      	add	r3, sp, #12
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	4622      	mov	r2, r4
 800a5d2:	4b11      	ldr	r3, [pc, #68]	; (800a618 <_svfiprintf_r+0x1ec>)
 800a5d4:	a904      	add	r1, sp, #16
 800a5d6:	4640      	mov	r0, r8
 800a5d8:	f3af 8000 	nop.w
 800a5dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a5e0:	4681      	mov	r9, r0
 800a5e2:	d1d6      	bne.n	800a592 <_svfiprintf_r+0x166>
 800a5e4:	89a3      	ldrh	r3, [r4, #12]
 800a5e6:	065b      	lsls	r3, r3, #25
 800a5e8:	f53f af35 	bmi.w	800a456 <_svfiprintf_r+0x2a>
 800a5ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5ee:	b01d      	add	sp, #116	; 0x74
 800a5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f4:	ab03      	add	r3, sp, #12
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	4b07      	ldr	r3, [pc, #28]	; (800a618 <_svfiprintf_r+0x1ec>)
 800a5fc:	a904      	add	r1, sp, #16
 800a5fe:	4640      	mov	r0, r8
 800a600:	f000 f882 	bl	800a708 <_printf_i>
 800a604:	e7ea      	b.n	800a5dc <_svfiprintf_r+0x1b0>
 800a606:	bf00      	nop
 800a608:	0800bc44 	.word	0x0800bc44
 800a60c:	0800bc4a 	.word	0x0800bc4a
 800a610:	0800bc4e 	.word	0x0800bc4e
 800a614:	00000000 	.word	0x00000000
 800a618:	0800a379 	.word	0x0800a379

0800a61c <_printf_common>:
 800a61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a620:	4691      	mov	r9, r2
 800a622:	461f      	mov	r7, r3
 800a624:	688a      	ldr	r2, [r1, #8]
 800a626:	690b      	ldr	r3, [r1, #16]
 800a628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a62c:	4293      	cmp	r3, r2
 800a62e:	bfb8      	it	lt
 800a630:	4613      	movlt	r3, r2
 800a632:	f8c9 3000 	str.w	r3, [r9]
 800a636:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a63a:	4606      	mov	r6, r0
 800a63c:	460c      	mov	r4, r1
 800a63e:	b112      	cbz	r2, 800a646 <_printf_common+0x2a>
 800a640:	3301      	adds	r3, #1
 800a642:	f8c9 3000 	str.w	r3, [r9]
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	0699      	lsls	r1, r3, #26
 800a64a:	bf42      	ittt	mi
 800a64c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a650:	3302      	addmi	r3, #2
 800a652:	f8c9 3000 	strmi.w	r3, [r9]
 800a656:	6825      	ldr	r5, [r4, #0]
 800a658:	f015 0506 	ands.w	r5, r5, #6
 800a65c:	d107      	bne.n	800a66e <_printf_common+0x52>
 800a65e:	f104 0a19 	add.w	sl, r4, #25
 800a662:	68e3      	ldr	r3, [r4, #12]
 800a664:	f8d9 2000 	ldr.w	r2, [r9]
 800a668:	1a9b      	subs	r3, r3, r2
 800a66a:	42ab      	cmp	r3, r5
 800a66c:	dc28      	bgt.n	800a6c0 <_printf_common+0xa4>
 800a66e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a672:	6822      	ldr	r2, [r4, #0]
 800a674:	3300      	adds	r3, #0
 800a676:	bf18      	it	ne
 800a678:	2301      	movne	r3, #1
 800a67a:	0692      	lsls	r2, r2, #26
 800a67c:	d42d      	bmi.n	800a6da <_printf_common+0xbe>
 800a67e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a682:	4639      	mov	r1, r7
 800a684:	4630      	mov	r0, r6
 800a686:	47c0      	blx	r8
 800a688:	3001      	adds	r0, #1
 800a68a:	d020      	beq.n	800a6ce <_printf_common+0xb2>
 800a68c:	6823      	ldr	r3, [r4, #0]
 800a68e:	68e5      	ldr	r5, [r4, #12]
 800a690:	f8d9 2000 	ldr.w	r2, [r9]
 800a694:	f003 0306 	and.w	r3, r3, #6
 800a698:	2b04      	cmp	r3, #4
 800a69a:	bf08      	it	eq
 800a69c:	1aad      	subeq	r5, r5, r2
 800a69e:	68a3      	ldr	r3, [r4, #8]
 800a6a0:	6922      	ldr	r2, [r4, #16]
 800a6a2:	bf0c      	ite	eq
 800a6a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6a8:	2500      	movne	r5, #0
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	bfc4      	itt	gt
 800a6ae:	1a9b      	subgt	r3, r3, r2
 800a6b0:	18ed      	addgt	r5, r5, r3
 800a6b2:	f04f 0900 	mov.w	r9, #0
 800a6b6:	341a      	adds	r4, #26
 800a6b8:	454d      	cmp	r5, r9
 800a6ba:	d11a      	bne.n	800a6f2 <_printf_common+0xd6>
 800a6bc:	2000      	movs	r0, #0
 800a6be:	e008      	b.n	800a6d2 <_printf_common+0xb6>
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	4652      	mov	r2, sl
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	47c0      	blx	r8
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	d103      	bne.n	800a6d6 <_printf_common+0xba>
 800a6ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d6:	3501      	adds	r5, #1
 800a6d8:	e7c3      	b.n	800a662 <_printf_common+0x46>
 800a6da:	18e1      	adds	r1, r4, r3
 800a6dc:	1c5a      	adds	r2, r3, #1
 800a6de:	2030      	movs	r0, #48	; 0x30
 800a6e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6e4:	4422      	add	r2, r4
 800a6e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6ee:	3302      	adds	r3, #2
 800a6f0:	e7c5      	b.n	800a67e <_printf_common+0x62>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	4622      	mov	r2, r4
 800a6f6:	4639      	mov	r1, r7
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	47c0      	blx	r8
 800a6fc:	3001      	adds	r0, #1
 800a6fe:	d0e6      	beq.n	800a6ce <_printf_common+0xb2>
 800a700:	f109 0901 	add.w	r9, r9, #1
 800a704:	e7d8      	b.n	800a6b8 <_printf_common+0x9c>
	...

0800a708 <_printf_i>:
 800a708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a70c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a710:	460c      	mov	r4, r1
 800a712:	7e09      	ldrb	r1, [r1, #24]
 800a714:	b085      	sub	sp, #20
 800a716:	296e      	cmp	r1, #110	; 0x6e
 800a718:	4617      	mov	r7, r2
 800a71a:	4606      	mov	r6, r0
 800a71c:	4698      	mov	r8, r3
 800a71e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a720:	f000 80b3 	beq.w	800a88a <_printf_i+0x182>
 800a724:	d822      	bhi.n	800a76c <_printf_i+0x64>
 800a726:	2963      	cmp	r1, #99	; 0x63
 800a728:	d036      	beq.n	800a798 <_printf_i+0x90>
 800a72a:	d80a      	bhi.n	800a742 <_printf_i+0x3a>
 800a72c:	2900      	cmp	r1, #0
 800a72e:	f000 80b9 	beq.w	800a8a4 <_printf_i+0x19c>
 800a732:	2958      	cmp	r1, #88	; 0x58
 800a734:	f000 8083 	beq.w	800a83e <_printf_i+0x136>
 800a738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a73c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a740:	e032      	b.n	800a7a8 <_printf_i+0xa0>
 800a742:	2964      	cmp	r1, #100	; 0x64
 800a744:	d001      	beq.n	800a74a <_printf_i+0x42>
 800a746:	2969      	cmp	r1, #105	; 0x69
 800a748:	d1f6      	bne.n	800a738 <_printf_i+0x30>
 800a74a:	6820      	ldr	r0, [r4, #0]
 800a74c:	6813      	ldr	r3, [r2, #0]
 800a74e:	0605      	lsls	r5, r0, #24
 800a750:	f103 0104 	add.w	r1, r3, #4
 800a754:	d52a      	bpl.n	800a7ac <_printf_i+0xa4>
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6011      	str	r1, [r2, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	da03      	bge.n	800a766 <_printf_i+0x5e>
 800a75e:	222d      	movs	r2, #45	; 0x2d
 800a760:	425b      	negs	r3, r3
 800a762:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a766:	486f      	ldr	r0, [pc, #444]	; (800a924 <_printf_i+0x21c>)
 800a768:	220a      	movs	r2, #10
 800a76a:	e039      	b.n	800a7e0 <_printf_i+0xd8>
 800a76c:	2973      	cmp	r1, #115	; 0x73
 800a76e:	f000 809d 	beq.w	800a8ac <_printf_i+0x1a4>
 800a772:	d808      	bhi.n	800a786 <_printf_i+0x7e>
 800a774:	296f      	cmp	r1, #111	; 0x6f
 800a776:	d020      	beq.n	800a7ba <_printf_i+0xb2>
 800a778:	2970      	cmp	r1, #112	; 0x70
 800a77a:	d1dd      	bne.n	800a738 <_printf_i+0x30>
 800a77c:	6823      	ldr	r3, [r4, #0]
 800a77e:	f043 0320 	orr.w	r3, r3, #32
 800a782:	6023      	str	r3, [r4, #0]
 800a784:	e003      	b.n	800a78e <_printf_i+0x86>
 800a786:	2975      	cmp	r1, #117	; 0x75
 800a788:	d017      	beq.n	800a7ba <_printf_i+0xb2>
 800a78a:	2978      	cmp	r1, #120	; 0x78
 800a78c:	d1d4      	bne.n	800a738 <_printf_i+0x30>
 800a78e:	2378      	movs	r3, #120	; 0x78
 800a790:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a794:	4864      	ldr	r0, [pc, #400]	; (800a928 <_printf_i+0x220>)
 800a796:	e055      	b.n	800a844 <_printf_i+0x13c>
 800a798:	6813      	ldr	r3, [r2, #0]
 800a79a:	1d19      	adds	r1, r3, #4
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	6011      	str	r1, [r2, #0]
 800a7a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e08c      	b.n	800a8c6 <_printf_i+0x1be>
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	6011      	str	r1, [r2, #0]
 800a7b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a7b4:	bf18      	it	ne
 800a7b6:	b21b      	sxthne	r3, r3
 800a7b8:	e7cf      	b.n	800a75a <_printf_i+0x52>
 800a7ba:	6813      	ldr	r3, [r2, #0]
 800a7bc:	6825      	ldr	r5, [r4, #0]
 800a7be:	1d18      	adds	r0, r3, #4
 800a7c0:	6010      	str	r0, [r2, #0]
 800a7c2:	0628      	lsls	r0, r5, #24
 800a7c4:	d501      	bpl.n	800a7ca <_printf_i+0xc2>
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	e002      	b.n	800a7d0 <_printf_i+0xc8>
 800a7ca:	0668      	lsls	r0, r5, #25
 800a7cc:	d5fb      	bpl.n	800a7c6 <_printf_i+0xbe>
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	4854      	ldr	r0, [pc, #336]	; (800a924 <_printf_i+0x21c>)
 800a7d2:	296f      	cmp	r1, #111	; 0x6f
 800a7d4:	bf14      	ite	ne
 800a7d6:	220a      	movne	r2, #10
 800a7d8:	2208      	moveq	r2, #8
 800a7da:	2100      	movs	r1, #0
 800a7dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7e0:	6865      	ldr	r5, [r4, #4]
 800a7e2:	60a5      	str	r5, [r4, #8]
 800a7e4:	2d00      	cmp	r5, #0
 800a7e6:	f2c0 8095 	blt.w	800a914 <_printf_i+0x20c>
 800a7ea:	6821      	ldr	r1, [r4, #0]
 800a7ec:	f021 0104 	bic.w	r1, r1, #4
 800a7f0:	6021      	str	r1, [r4, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d13d      	bne.n	800a872 <_printf_i+0x16a>
 800a7f6:	2d00      	cmp	r5, #0
 800a7f8:	f040 808e 	bne.w	800a918 <_printf_i+0x210>
 800a7fc:	4665      	mov	r5, ip
 800a7fe:	2a08      	cmp	r2, #8
 800a800:	d10b      	bne.n	800a81a <_printf_i+0x112>
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	07db      	lsls	r3, r3, #31
 800a806:	d508      	bpl.n	800a81a <_printf_i+0x112>
 800a808:	6923      	ldr	r3, [r4, #16]
 800a80a:	6862      	ldr	r2, [r4, #4]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	bfde      	ittt	le
 800a810:	2330      	movle	r3, #48	; 0x30
 800a812:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a816:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a81a:	ebac 0305 	sub.w	r3, ip, r5
 800a81e:	6123      	str	r3, [r4, #16]
 800a820:	f8cd 8000 	str.w	r8, [sp]
 800a824:	463b      	mov	r3, r7
 800a826:	aa03      	add	r2, sp, #12
 800a828:	4621      	mov	r1, r4
 800a82a:	4630      	mov	r0, r6
 800a82c:	f7ff fef6 	bl	800a61c <_printf_common>
 800a830:	3001      	adds	r0, #1
 800a832:	d14d      	bne.n	800a8d0 <_printf_i+0x1c8>
 800a834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a838:	b005      	add	sp, #20
 800a83a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a83e:	4839      	ldr	r0, [pc, #228]	; (800a924 <_printf_i+0x21c>)
 800a840:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a844:	6813      	ldr	r3, [r2, #0]
 800a846:	6821      	ldr	r1, [r4, #0]
 800a848:	1d1d      	adds	r5, r3, #4
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	6015      	str	r5, [r2, #0]
 800a84e:	060a      	lsls	r2, r1, #24
 800a850:	d50b      	bpl.n	800a86a <_printf_i+0x162>
 800a852:	07ca      	lsls	r2, r1, #31
 800a854:	bf44      	itt	mi
 800a856:	f041 0120 	orrmi.w	r1, r1, #32
 800a85a:	6021      	strmi	r1, [r4, #0]
 800a85c:	b91b      	cbnz	r3, 800a866 <_printf_i+0x15e>
 800a85e:	6822      	ldr	r2, [r4, #0]
 800a860:	f022 0220 	bic.w	r2, r2, #32
 800a864:	6022      	str	r2, [r4, #0]
 800a866:	2210      	movs	r2, #16
 800a868:	e7b7      	b.n	800a7da <_printf_i+0xd2>
 800a86a:	064d      	lsls	r5, r1, #25
 800a86c:	bf48      	it	mi
 800a86e:	b29b      	uxthmi	r3, r3
 800a870:	e7ef      	b.n	800a852 <_printf_i+0x14a>
 800a872:	4665      	mov	r5, ip
 800a874:	fbb3 f1f2 	udiv	r1, r3, r2
 800a878:	fb02 3311 	mls	r3, r2, r1, r3
 800a87c:	5cc3      	ldrb	r3, [r0, r3]
 800a87e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a882:	460b      	mov	r3, r1
 800a884:	2900      	cmp	r1, #0
 800a886:	d1f5      	bne.n	800a874 <_printf_i+0x16c>
 800a888:	e7b9      	b.n	800a7fe <_printf_i+0xf6>
 800a88a:	6813      	ldr	r3, [r2, #0]
 800a88c:	6825      	ldr	r5, [r4, #0]
 800a88e:	6961      	ldr	r1, [r4, #20]
 800a890:	1d18      	adds	r0, r3, #4
 800a892:	6010      	str	r0, [r2, #0]
 800a894:	0628      	lsls	r0, r5, #24
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	d501      	bpl.n	800a89e <_printf_i+0x196>
 800a89a:	6019      	str	r1, [r3, #0]
 800a89c:	e002      	b.n	800a8a4 <_printf_i+0x19c>
 800a89e:	066a      	lsls	r2, r5, #25
 800a8a0:	d5fb      	bpl.n	800a89a <_printf_i+0x192>
 800a8a2:	8019      	strh	r1, [r3, #0]
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	6123      	str	r3, [r4, #16]
 800a8a8:	4665      	mov	r5, ip
 800a8aa:	e7b9      	b.n	800a820 <_printf_i+0x118>
 800a8ac:	6813      	ldr	r3, [r2, #0]
 800a8ae:	1d19      	adds	r1, r3, #4
 800a8b0:	6011      	str	r1, [r2, #0]
 800a8b2:	681d      	ldr	r5, [r3, #0]
 800a8b4:	6862      	ldr	r2, [r4, #4]
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	f7f5 fc91 	bl	80001e0 <memchr>
 800a8be:	b108      	cbz	r0, 800a8c4 <_printf_i+0x1bc>
 800a8c0:	1b40      	subs	r0, r0, r5
 800a8c2:	6060      	str	r0, [r4, #4]
 800a8c4:	6863      	ldr	r3, [r4, #4]
 800a8c6:	6123      	str	r3, [r4, #16]
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8ce:	e7a7      	b.n	800a820 <_printf_i+0x118>
 800a8d0:	6923      	ldr	r3, [r4, #16]
 800a8d2:	462a      	mov	r2, r5
 800a8d4:	4639      	mov	r1, r7
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	47c0      	blx	r8
 800a8da:	3001      	adds	r0, #1
 800a8dc:	d0aa      	beq.n	800a834 <_printf_i+0x12c>
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	079b      	lsls	r3, r3, #30
 800a8e2:	d413      	bmi.n	800a90c <_printf_i+0x204>
 800a8e4:	68e0      	ldr	r0, [r4, #12]
 800a8e6:	9b03      	ldr	r3, [sp, #12]
 800a8e8:	4298      	cmp	r0, r3
 800a8ea:	bfb8      	it	lt
 800a8ec:	4618      	movlt	r0, r3
 800a8ee:	e7a3      	b.n	800a838 <_printf_i+0x130>
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	464a      	mov	r2, r9
 800a8f4:	4639      	mov	r1, r7
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	47c0      	blx	r8
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	d09a      	beq.n	800a834 <_printf_i+0x12c>
 800a8fe:	3501      	adds	r5, #1
 800a900:	68e3      	ldr	r3, [r4, #12]
 800a902:	9a03      	ldr	r2, [sp, #12]
 800a904:	1a9b      	subs	r3, r3, r2
 800a906:	42ab      	cmp	r3, r5
 800a908:	dcf2      	bgt.n	800a8f0 <_printf_i+0x1e8>
 800a90a:	e7eb      	b.n	800a8e4 <_printf_i+0x1dc>
 800a90c:	2500      	movs	r5, #0
 800a90e:	f104 0919 	add.w	r9, r4, #25
 800a912:	e7f5      	b.n	800a900 <_printf_i+0x1f8>
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1ac      	bne.n	800a872 <_printf_i+0x16a>
 800a918:	7803      	ldrb	r3, [r0, #0]
 800a91a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a91e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a922:	e76c      	b.n	800a7fe <_printf_i+0xf6>
 800a924:	0800bc55 	.word	0x0800bc55
 800a928:	0800bc66 	.word	0x0800bc66

0800a92c <memcpy>:
 800a92c:	b510      	push	{r4, lr}
 800a92e:	1e43      	subs	r3, r0, #1
 800a930:	440a      	add	r2, r1
 800a932:	4291      	cmp	r1, r2
 800a934:	d100      	bne.n	800a938 <memcpy+0xc>
 800a936:	bd10      	pop	{r4, pc}
 800a938:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a93c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a940:	e7f7      	b.n	800a932 <memcpy+0x6>

0800a942 <memmove>:
 800a942:	4288      	cmp	r0, r1
 800a944:	b510      	push	{r4, lr}
 800a946:	eb01 0302 	add.w	r3, r1, r2
 800a94a:	d807      	bhi.n	800a95c <memmove+0x1a>
 800a94c:	1e42      	subs	r2, r0, #1
 800a94e:	4299      	cmp	r1, r3
 800a950:	d00a      	beq.n	800a968 <memmove+0x26>
 800a952:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a956:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a95a:	e7f8      	b.n	800a94e <memmove+0xc>
 800a95c:	4283      	cmp	r3, r0
 800a95e:	d9f5      	bls.n	800a94c <memmove+0xa>
 800a960:	1881      	adds	r1, r0, r2
 800a962:	1ad2      	subs	r2, r2, r3
 800a964:	42d3      	cmn	r3, r2
 800a966:	d100      	bne.n	800a96a <memmove+0x28>
 800a968:	bd10      	pop	{r4, pc}
 800a96a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a96e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a972:	e7f7      	b.n	800a964 <memmove+0x22>

0800a974 <_free_r>:
 800a974:	b538      	push	{r3, r4, r5, lr}
 800a976:	4605      	mov	r5, r0
 800a978:	2900      	cmp	r1, #0
 800a97a:	d045      	beq.n	800aa08 <_free_r+0x94>
 800a97c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a980:	1f0c      	subs	r4, r1, #4
 800a982:	2b00      	cmp	r3, #0
 800a984:	bfb8      	it	lt
 800a986:	18e4      	addlt	r4, r4, r3
 800a988:	f000 f8d2 	bl	800ab30 <__malloc_lock>
 800a98c:	4a1f      	ldr	r2, [pc, #124]	; (800aa0c <_free_r+0x98>)
 800a98e:	6813      	ldr	r3, [r2, #0]
 800a990:	4610      	mov	r0, r2
 800a992:	b933      	cbnz	r3, 800a9a2 <_free_r+0x2e>
 800a994:	6063      	str	r3, [r4, #4]
 800a996:	6014      	str	r4, [r2, #0]
 800a998:	4628      	mov	r0, r5
 800a99a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a99e:	f000 b8c8 	b.w	800ab32 <__malloc_unlock>
 800a9a2:	42a3      	cmp	r3, r4
 800a9a4:	d90c      	bls.n	800a9c0 <_free_r+0x4c>
 800a9a6:	6821      	ldr	r1, [r4, #0]
 800a9a8:	1862      	adds	r2, r4, r1
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	bf04      	itt	eq
 800a9ae:	681a      	ldreq	r2, [r3, #0]
 800a9b0:	685b      	ldreq	r3, [r3, #4]
 800a9b2:	6063      	str	r3, [r4, #4]
 800a9b4:	bf04      	itt	eq
 800a9b6:	1852      	addeq	r2, r2, r1
 800a9b8:	6022      	streq	r2, [r4, #0]
 800a9ba:	6004      	str	r4, [r0, #0]
 800a9bc:	e7ec      	b.n	800a998 <_free_r+0x24>
 800a9be:	4613      	mov	r3, r2
 800a9c0:	685a      	ldr	r2, [r3, #4]
 800a9c2:	b10a      	cbz	r2, 800a9c8 <_free_r+0x54>
 800a9c4:	42a2      	cmp	r2, r4
 800a9c6:	d9fa      	bls.n	800a9be <_free_r+0x4a>
 800a9c8:	6819      	ldr	r1, [r3, #0]
 800a9ca:	1858      	adds	r0, r3, r1
 800a9cc:	42a0      	cmp	r0, r4
 800a9ce:	d10b      	bne.n	800a9e8 <_free_r+0x74>
 800a9d0:	6820      	ldr	r0, [r4, #0]
 800a9d2:	4401      	add	r1, r0
 800a9d4:	1858      	adds	r0, r3, r1
 800a9d6:	4282      	cmp	r2, r0
 800a9d8:	6019      	str	r1, [r3, #0]
 800a9da:	d1dd      	bne.n	800a998 <_free_r+0x24>
 800a9dc:	6810      	ldr	r0, [r2, #0]
 800a9de:	6852      	ldr	r2, [r2, #4]
 800a9e0:	605a      	str	r2, [r3, #4]
 800a9e2:	4401      	add	r1, r0
 800a9e4:	6019      	str	r1, [r3, #0]
 800a9e6:	e7d7      	b.n	800a998 <_free_r+0x24>
 800a9e8:	d902      	bls.n	800a9f0 <_free_r+0x7c>
 800a9ea:	230c      	movs	r3, #12
 800a9ec:	602b      	str	r3, [r5, #0]
 800a9ee:	e7d3      	b.n	800a998 <_free_r+0x24>
 800a9f0:	6820      	ldr	r0, [r4, #0]
 800a9f2:	1821      	adds	r1, r4, r0
 800a9f4:	428a      	cmp	r2, r1
 800a9f6:	bf04      	itt	eq
 800a9f8:	6811      	ldreq	r1, [r2, #0]
 800a9fa:	6852      	ldreq	r2, [r2, #4]
 800a9fc:	6062      	str	r2, [r4, #4]
 800a9fe:	bf04      	itt	eq
 800aa00:	1809      	addeq	r1, r1, r0
 800aa02:	6021      	streq	r1, [r4, #0]
 800aa04:	605c      	str	r4, [r3, #4]
 800aa06:	e7c7      	b.n	800a998 <_free_r+0x24>
 800aa08:	bd38      	pop	{r3, r4, r5, pc}
 800aa0a:	bf00      	nop
 800aa0c:	200000d4 	.word	0x200000d4

0800aa10 <_malloc_r>:
 800aa10:	b570      	push	{r4, r5, r6, lr}
 800aa12:	1ccd      	adds	r5, r1, #3
 800aa14:	f025 0503 	bic.w	r5, r5, #3
 800aa18:	3508      	adds	r5, #8
 800aa1a:	2d0c      	cmp	r5, #12
 800aa1c:	bf38      	it	cc
 800aa1e:	250c      	movcc	r5, #12
 800aa20:	2d00      	cmp	r5, #0
 800aa22:	4606      	mov	r6, r0
 800aa24:	db01      	blt.n	800aa2a <_malloc_r+0x1a>
 800aa26:	42a9      	cmp	r1, r5
 800aa28:	d903      	bls.n	800aa32 <_malloc_r+0x22>
 800aa2a:	230c      	movs	r3, #12
 800aa2c:	6033      	str	r3, [r6, #0]
 800aa2e:	2000      	movs	r0, #0
 800aa30:	bd70      	pop	{r4, r5, r6, pc}
 800aa32:	f000 f87d 	bl	800ab30 <__malloc_lock>
 800aa36:	4a21      	ldr	r2, [pc, #132]	; (800aabc <_malloc_r+0xac>)
 800aa38:	6814      	ldr	r4, [r2, #0]
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	b991      	cbnz	r1, 800aa64 <_malloc_r+0x54>
 800aa3e:	4c20      	ldr	r4, [pc, #128]	; (800aac0 <_malloc_r+0xb0>)
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	b91b      	cbnz	r3, 800aa4c <_malloc_r+0x3c>
 800aa44:	4630      	mov	r0, r6
 800aa46:	f000 f863 	bl	800ab10 <_sbrk_r>
 800aa4a:	6020      	str	r0, [r4, #0]
 800aa4c:	4629      	mov	r1, r5
 800aa4e:	4630      	mov	r0, r6
 800aa50:	f000 f85e 	bl	800ab10 <_sbrk_r>
 800aa54:	1c43      	adds	r3, r0, #1
 800aa56:	d124      	bne.n	800aaa2 <_malloc_r+0x92>
 800aa58:	230c      	movs	r3, #12
 800aa5a:	6033      	str	r3, [r6, #0]
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	f000 f868 	bl	800ab32 <__malloc_unlock>
 800aa62:	e7e4      	b.n	800aa2e <_malloc_r+0x1e>
 800aa64:	680b      	ldr	r3, [r1, #0]
 800aa66:	1b5b      	subs	r3, r3, r5
 800aa68:	d418      	bmi.n	800aa9c <_malloc_r+0x8c>
 800aa6a:	2b0b      	cmp	r3, #11
 800aa6c:	d90f      	bls.n	800aa8e <_malloc_r+0x7e>
 800aa6e:	600b      	str	r3, [r1, #0]
 800aa70:	50cd      	str	r5, [r1, r3]
 800aa72:	18cc      	adds	r4, r1, r3
 800aa74:	4630      	mov	r0, r6
 800aa76:	f000 f85c 	bl	800ab32 <__malloc_unlock>
 800aa7a:	f104 000b 	add.w	r0, r4, #11
 800aa7e:	1d23      	adds	r3, r4, #4
 800aa80:	f020 0007 	bic.w	r0, r0, #7
 800aa84:	1ac3      	subs	r3, r0, r3
 800aa86:	d0d3      	beq.n	800aa30 <_malloc_r+0x20>
 800aa88:	425a      	negs	r2, r3
 800aa8a:	50e2      	str	r2, [r4, r3]
 800aa8c:	e7d0      	b.n	800aa30 <_malloc_r+0x20>
 800aa8e:	428c      	cmp	r4, r1
 800aa90:	684b      	ldr	r3, [r1, #4]
 800aa92:	bf16      	itet	ne
 800aa94:	6063      	strne	r3, [r4, #4]
 800aa96:	6013      	streq	r3, [r2, #0]
 800aa98:	460c      	movne	r4, r1
 800aa9a:	e7eb      	b.n	800aa74 <_malloc_r+0x64>
 800aa9c:	460c      	mov	r4, r1
 800aa9e:	6849      	ldr	r1, [r1, #4]
 800aaa0:	e7cc      	b.n	800aa3c <_malloc_r+0x2c>
 800aaa2:	1cc4      	adds	r4, r0, #3
 800aaa4:	f024 0403 	bic.w	r4, r4, #3
 800aaa8:	42a0      	cmp	r0, r4
 800aaaa:	d005      	beq.n	800aab8 <_malloc_r+0xa8>
 800aaac:	1a21      	subs	r1, r4, r0
 800aaae:	4630      	mov	r0, r6
 800aab0:	f000 f82e 	bl	800ab10 <_sbrk_r>
 800aab4:	3001      	adds	r0, #1
 800aab6:	d0cf      	beq.n	800aa58 <_malloc_r+0x48>
 800aab8:	6025      	str	r5, [r4, #0]
 800aaba:	e7db      	b.n	800aa74 <_malloc_r+0x64>
 800aabc:	200000d4 	.word	0x200000d4
 800aac0:	200000d8 	.word	0x200000d8

0800aac4 <_realloc_r>:
 800aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac6:	4607      	mov	r7, r0
 800aac8:	4614      	mov	r4, r2
 800aaca:	460e      	mov	r6, r1
 800aacc:	b921      	cbnz	r1, 800aad8 <_realloc_r+0x14>
 800aace:	4611      	mov	r1, r2
 800aad0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aad4:	f7ff bf9c 	b.w	800aa10 <_malloc_r>
 800aad8:	b922      	cbnz	r2, 800aae4 <_realloc_r+0x20>
 800aada:	f7ff ff4b 	bl	800a974 <_free_r>
 800aade:	4625      	mov	r5, r4
 800aae0:	4628      	mov	r0, r5
 800aae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aae4:	f000 f826 	bl	800ab34 <_malloc_usable_size_r>
 800aae8:	42a0      	cmp	r0, r4
 800aaea:	d20f      	bcs.n	800ab0c <_realloc_r+0x48>
 800aaec:	4621      	mov	r1, r4
 800aaee:	4638      	mov	r0, r7
 800aaf0:	f7ff ff8e 	bl	800aa10 <_malloc_r>
 800aaf4:	4605      	mov	r5, r0
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d0f2      	beq.n	800aae0 <_realloc_r+0x1c>
 800aafa:	4631      	mov	r1, r6
 800aafc:	4622      	mov	r2, r4
 800aafe:	f7ff ff15 	bl	800a92c <memcpy>
 800ab02:	4631      	mov	r1, r6
 800ab04:	4638      	mov	r0, r7
 800ab06:	f7ff ff35 	bl	800a974 <_free_r>
 800ab0a:	e7e9      	b.n	800aae0 <_realloc_r+0x1c>
 800ab0c:	4635      	mov	r5, r6
 800ab0e:	e7e7      	b.n	800aae0 <_realloc_r+0x1c>

0800ab10 <_sbrk_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4c06      	ldr	r4, [pc, #24]	; (800ab2c <_sbrk_r+0x1c>)
 800ab14:	2300      	movs	r3, #0
 800ab16:	4605      	mov	r5, r0
 800ab18:	4608      	mov	r0, r1
 800ab1a:	6023      	str	r3, [r4, #0]
 800ab1c:	f7ff fb6e 	bl	800a1fc <_sbrk>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d102      	bne.n	800ab2a <_sbrk_r+0x1a>
 800ab24:	6823      	ldr	r3, [r4, #0]
 800ab26:	b103      	cbz	r3, 800ab2a <_sbrk_r+0x1a>
 800ab28:	602b      	str	r3, [r5, #0]
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	20000a24 	.word	0x20000a24

0800ab30 <__malloc_lock>:
 800ab30:	4770      	bx	lr

0800ab32 <__malloc_unlock>:
 800ab32:	4770      	bx	lr

0800ab34 <_malloc_usable_size_r>:
 800ab34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab38:	1f18      	subs	r0, r3, #4
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	bfbc      	itt	lt
 800ab3e:	580b      	ldrlt	r3, [r1, r0]
 800ab40:	18c0      	addlt	r0, r0, r3
 800ab42:	4770      	bx	lr
 800ab44:	0000      	movs	r0, r0
	...

0800ab48 <cos>:
 800ab48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab4a:	ec51 0b10 	vmov	r0, r1, d0
 800ab4e:	4a1e      	ldr	r2, [pc, #120]	; (800abc8 <cos+0x80>)
 800ab50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab54:	4293      	cmp	r3, r2
 800ab56:	dc06      	bgt.n	800ab66 <cos+0x1e>
 800ab58:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800abc0 <cos+0x78>
 800ab5c:	f000 fa2c 	bl	800afb8 <__kernel_cos>
 800ab60:	ec51 0b10 	vmov	r0, r1, d0
 800ab64:	e007      	b.n	800ab76 <cos+0x2e>
 800ab66:	4a19      	ldr	r2, [pc, #100]	; (800abcc <cos+0x84>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	dd09      	ble.n	800ab80 <cos+0x38>
 800ab6c:	ee10 2a10 	vmov	r2, s0
 800ab70:	460b      	mov	r3, r1
 800ab72:	f7f5 fb89 	bl	8000288 <__aeabi_dsub>
 800ab76:	ec41 0b10 	vmov	d0, r0, r1
 800ab7a:	b005      	add	sp, #20
 800ab7c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab80:	4668      	mov	r0, sp
 800ab82:	f000 f825 	bl	800abd0 <__ieee754_rem_pio2>
 800ab86:	f000 0003 	and.w	r0, r0, #3
 800ab8a:	2801      	cmp	r0, #1
 800ab8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ab90:	ed9d 0b00 	vldr	d0, [sp]
 800ab94:	d007      	beq.n	800aba6 <cos+0x5e>
 800ab96:	2802      	cmp	r0, #2
 800ab98:	d00e      	beq.n	800abb8 <cos+0x70>
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	d0de      	beq.n	800ab5c <cos+0x14>
 800ab9e:	2001      	movs	r0, #1
 800aba0:	f000 fe12 	bl	800b7c8 <__kernel_sin>
 800aba4:	e7dc      	b.n	800ab60 <cos+0x18>
 800aba6:	f000 fe0f 	bl	800b7c8 <__kernel_sin>
 800abaa:	ec53 2b10 	vmov	r2, r3, d0
 800abae:	ee10 0a10 	vmov	r0, s0
 800abb2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800abb6:	e7de      	b.n	800ab76 <cos+0x2e>
 800abb8:	f000 f9fe 	bl	800afb8 <__kernel_cos>
 800abbc:	e7f5      	b.n	800abaa <cos+0x62>
 800abbe:	bf00      	nop
	...
 800abc8:	3fe921fb 	.word	0x3fe921fb
 800abcc:	7fefffff 	.word	0x7fefffff

0800abd0 <__ieee754_rem_pio2>:
 800abd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd4:	ec57 6b10 	vmov	r6, r7, d0
 800abd8:	4bc3      	ldr	r3, [pc, #780]	; (800aee8 <__ieee754_rem_pio2+0x318>)
 800abda:	b08d      	sub	sp, #52	; 0x34
 800abdc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800abe0:	4598      	cmp	r8, r3
 800abe2:	4604      	mov	r4, r0
 800abe4:	9704      	str	r7, [sp, #16]
 800abe6:	dc07      	bgt.n	800abf8 <__ieee754_rem_pio2+0x28>
 800abe8:	2200      	movs	r2, #0
 800abea:	2300      	movs	r3, #0
 800abec:	ed84 0b00 	vstr	d0, [r4]
 800abf0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800abf4:	2500      	movs	r5, #0
 800abf6:	e027      	b.n	800ac48 <__ieee754_rem_pio2+0x78>
 800abf8:	4bbc      	ldr	r3, [pc, #752]	; (800aeec <__ieee754_rem_pio2+0x31c>)
 800abfa:	4598      	cmp	r8, r3
 800abfc:	dc75      	bgt.n	800acea <__ieee754_rem_pio2+0x11a>
 800abfe:	9b04      	ldr	r3, [sp, #16]
 800ac00:	4dbb      	ldr	r5, [pc, #748]	; (800aef0 <__ieee754_rem_pio2+0x320>)
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	ee10 0a10 	vmov	r0, s0
 800ac08:	a3a9      	add	r3, pc, #676	; (adr r3, 800aeb0 <__ieee754_rem_pio2+0x2e0>)
 800ac0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0e:	4639      	mov	r1, r7
 800ac10:	dd36      	ble.n	800ac80 <__ieee754_rem_pio2+0xb0>
 800ac12:	f7f5 fb39 	bl	8000288 <__aeabi_dsub>
 800ac16:	45a8      	cmp	r8, r5
 800ac18:	4606      	mov	r6, r0
 800ac1a:	460f      	mov	r7, r1
 800ac1c:	d018      	beq.n	800ac50 <__ieee754_rem_pio2+0x80>
 800ac1e:	a3a6      	add	r3, pc, #664	; (adr r3, 800aeb8 <__ieee754_rem_pio2+0x2e8>)
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	f7f5 fb30 	bl	8000288 <__aeabi_dsub>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	e9c4 2300 	strd	r2, r3, [r4]
 800ac30:	4630      	mov	r0, r6
 800ac32:	4639      	mov	r1, r7
 800ac34:	f7f5 fb28 	bl	8000288 <__aeabi_dsub>
 800ac38:	a39f      	add	r3, pc, #636	; (adr r3, 800aeb8 <__ieee754_rem_pio2+0x2e8>)
 800ac3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3e:	f7f5 fb23 	bl	8000288 <__aeabi_dsub>
 800ac42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac46:	2501      	movs	r5, #1
 800ac48:	4628      	mov	r0, r5
 800ac4a:	b00d      	add	sp, #52	; 0x34
 800ac4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac50:	a39b      	add	r3, pc, #620	; (adr r3, 800aec0 <__ieee754_rem_pio2+0x2f0>)
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	f7f5 fb17 	bl	8000288 <__aeabi_dsub>
 800ac5a:	a39b      	add	r3, pc, #620	; (adr r3, 800aec8 <__ieee754_rem_pio2+0x2f8>)
 800ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac60:	4606      	mov	r6, r0
 800ac62:	460f      	mov	r7, r1
 800ac64:	f7f5 fb10 	bl	8000288 <__aeabi_dsub>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	e9c4 2300 	strd	r2, r3, [r4]
 800ac70:	4630      	mov	r0, r6
 800ac72:	4639      	mov	r1, r7
 800ac74:	f7f5 fb08 	bl	8000288 <__aeabi_dsub>
 800ac78:	a393      	add	r3, pc, #588	; (adr r3, 800aec8 <__ieee754_rem_pio2+0x2f8>)
 800ac7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7e:	e7de      	b.n	800ac3e <__ieee754_rem_pio2+0x6e>
 800ac80:	f7f5 fb04 	bl	800028c <__adddf3>
 800ac84:	45a8      	cmp	r8, r5
 800ac86:	4606      	mov	r6, r0
 800ac88:	460f      	mov	r7, r1
 800ac8a:	d016      	beq.n	800acba <__ieee754_rem_pio2+0xea>
 800ac8c:	a38a      	add	r3, pc, #552	; (adr r3, 800aeb8 <__ieee754_rem_pio2+0x2e8>)
 800ac8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac92:	f7f5 fafb 	bl	800028c <__adddf3>
 800ac96:	4602      	mov	r2, r0
 800ac98:	460b      	mov	r3, r1
 800ac9a:	e9c4 2300 	strd	r2, r3, [r4]
 800ac9e:	4630      	mov	r0, r6
 800aca0:	4639      	mov	r1, r7
 800aca2:	f7f5 faf1 	bl	8000288 <__aeabi_dsub>
 800aca6:	a384      	add	r3, pc, #528	; (adr r3, 800aeb8 <__ieee754_rem_pio2+0x2e8>)
 800aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acac:	f7f5 faee 	bl	800028c <__adddf3>
 800acb0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800acb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800acb8:	e7c6      	b.n	800ac48 <__ieee754_rem_pio2+0x78>
 800acba:	a381      	add	r3, pc, #516	; (adr r3, 800aec0 <__ieee754_rem_pio2+0x2f0>)
 800acbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc0:	f7f5 fae4 	bl	800028c <__adddf3>
 800acc4:	a380      	add	r3, pc, #512	; (adr r3, 800aec8 <__ieee754_rem_pio2+0x2f8>)
 800acc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acca:	4606      	mov	r6, r0
 800accc:	460f      	mov	r7, r1
 800acce:	f7f5 fadd 	bl	800028c <__adddf3>
 800acd2:	4602      	mov	r2, r0
 800acd4:	460b      	mov	r3, r1
 800acd6:	e9c4 2300 	strd	r2, r3, [r4]
 800acda:	4630      	mov	r0, r6
 800acdc:	4639      	mov	r1, r7
 800acde:	f7f5 fad3 	bl	8000288 <__aeabi_dsub>
 800ace2:	a379      	add	r3, pc, #484	; (adr r3, 800aec8 <__ieee754_rem_pio2+0x2f8>)
 800ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace8:	e7e0      	b.n	800acac <__ieee754_rem_pio2+0xdc>
 800acea:	4b82      	ldr	r3, [pc, #520]	; (800aef4 <__ieee754_rem_pio2+0x324>)
 800acec:	4598      	cmp	r8, r3
 800acee:	f300 80d0 	bgt.w	800ae92 <__ieee754_rem_pio2+0x2c2>
 800acf2:	f000 fe23 	bl	800b93c <fabs>
 800acf6:	ec57 6b10 	vmov	r6, r7, d0
 800acfa:	ee10 0a10 	vmov	r0, s0
 800acfe:	a374      	add	r3, pc, #464	; (adr r3, 800aed0 <__ieee754_rem_pio2+0x300>)
 800ad00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad04:	4639      	mov	r1, r7
 800ad06:	f7f5 fc77 	bl	80005f8 <__aeabi_dmul>
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	4b7a      	ldr	r3, [pc, #488]	; (800aef8 <__ieee754_rem_pio2+0x328>)
 800ad0e:	f7f5 fabd 	bl	800028c <__adddf3>
 800ad12:	f7f5 ff0b 	bl	8000b2c <__aeabi_d2iz>
 800ad16:	4605      	mov	r5, r0
 800ad18:	f7f5 fc04 	bl	8000524 <__aeabi_i2d>
 800ad1c:	a364      	add	r3, pc, #400	; (adr r3, 800aeb0 <__ieee754_rem_pio2+0x2e0>)
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad26:	f7f5 fc67 	bl	80005f8 <__aeabi_dmul>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	4630      	mov	r0, r6
 800ad30:	4639      	mov	r1, r7
 800ad32:	f7f5 faa9 	bl	8000288 <__aeabi_dsub>
 800ad36:	a360      	add	r3, pc, #384	; (adr r3, 800aeb8 <__ieee754_rem_pio2+0x2e8>)
 800ad38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3c:	4682      	mov	sl, r0
 800ad3e:	468b      	mov	fp, r1
 800ad40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad44:	f7f5 fc58 	bl	80005f8 <__aeabi_dmul>
 800ad48:	2d1f      	cmp	r5, #31
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	460f      	mov	r7, r1
 800ad4e:	dc0c      	bgt.n	800ad6a <__ieee754_rem_pio2+0x19a>
 800ad50:	1e6a      	subs	r2, r5, #1
 800ad52:	4b6a      	ldr	r3, [pc, #424]	; (800aefc <__ieee754_rem_pio2+0x32c>)
 800ad54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad58:	4543      	cmp	r3, r8
 800ad5a:	d006      	beq.n	800ad6a <__ieee754_rem_pio2+0x19a>
 800ad5c:	4632      	mov	r2, r6
 800ad5e:	463b      	mov	r3, r7
 800ad60:	4650      	mov	r0, sl
 800ad62:	4659      	mov	r1, fp
 800ad64:	f7f5 fa90 	bl	8000288 <__aeabi_dsub>
 800ad68:	e00e      	b.n	800ad88 <__ieee754_rem_pio2+0x1b8>
 800ad6a:	4632      	mov	r2, r6
 800ad6c:	463b      	mov	r3, r7
 800ad6e:	4650      	mov	r0, sl
 800ad70:	4659      	mov	r1, fp
 800ad72:	f7f5 fa89 	bl	8000288 <__aeabi_dsub>
 800ad76:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ad7a:	9305      	str	r3, [sp, #20]
 800ad7c:	9a05      	ldr	r2, [sp, #20]
 800ad7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	2b10      	cmp	r3, #16
 800ad86:	dc02      	bgt.n	800ad8e <__ieee754_rem_pio2+0x1be>
 800ad88:	e9c4 0100 	strd	r0, r1, [r4]
 800ad8c:	e039      	b.n	800ae02 <__ieee754_rem_pio2+0x232>
 800ad8e:	a34c      	add	r3, pc, #304	; (adr r3, 800aec0 <__ieee754_rem_pio2+0x2f0>)
 800ad90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad98:	f7f5 fc2e 	bl	80005f8 <__aeabi_dmul>
 800ad9c:	4606      	mov	r6, r0
 800ad9e:	460f      	mov	r7, r1
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	4650      	mov	r0, sl
 800ada6:	4659      	mov	r1, fp
 800ada8:	f7f5 fa6e 	bl	8000288 <__aeabi_dsub>
 800adac:	4602      	mov	r2, r0
 800adae:	460b      	mov	r3, r1
 800adb0:	4680      	mov	r8, r0
 800adb2:	4689      	mov	r9, r1
 800adb4:	4650      	mov	r0, sl
 800adb6:	4659      	mov	r1, fp
 800adb8:	f7f5 fa66 	bl	8000288 <__aeabi_dsub>
 800adbc:	4632      	mov	r2, r6
 800adbe:	463b      	mov	r3, r7
 800adc0:	f7f5 fa62 	bl	8000288 <__aeabi_dsub>
 800adc4:	a340      	add	r3, pc, #256	; (adr r3, 800aec8 <__ieee754_rem_pio2+0x2f8>)
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	4606      	mov	r6, r0
 800adcc:	460f      	mov	r7, r1
 800adce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800add2:	f7f5 fc11 	bl	80005f8 <__aeabi_dmul>
 800add6:	4632      	mov	r2, r6
 800add8:	463b      	mov	r3, r7
 800adda:	f7f5 fa55 	bl	8000288 <__aeabi_dsub>
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	4606      	mov	r6, r0
 800ade4:	460f      	mov	r7, r1
 800ade6:	4640      	mov	r0, r8
 800ade8:	4649      	mov	r1, r9
 800adea:	f7f5 fa4d 	bl	8000288 <__aeabi_dsub>
 800adee:	9a05      	ldr	r2, [sp, #20]
 800adf0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	2b31      	cmp	r3, #49	; 0x31
 800adf8:	dc20      	bgt.n	800ae3c <__ieee754_rem_pio2+0x26c>
 800adfa:	e9c4 0100 	strd	r0, r1, [r4]
 800adfe:	46c2      	mov	sl, r8
 800ae00:	46cb      	mov	fp, r9
 800ae02:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ae06:	4650      	mov	r0, sl
 800ae08:	4642      	mov	r2, r8
 800ae0a:	464b      	mov	r3, r9
 800ae0c:	4659      	mov	r1, fp
 800ae0e:	f7f5 fa3b 	bl	8000288 <__aeabi_dsub>
 800ae12:	463b      	mov	r3, r7
 800ae14:	4632      	mov	r2, r6
 800ae16:	f7f5 fa37 	bl	8000288 <__aeabi_dsub>
 800ae1a:	9b04      	ldr	r3, [sp, #16]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ae22:	f6bf af11 	bge.w	800ac48 <__ieee754_rem_pio2+0x78>
 800ae26:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ae2a:	6063      	str	r3, [r4, #4]
 800ae2c:	f8c4 8000 	str.w	r8, [r4]
 800ae30:	60a0      	str	r0, [r4, #8]
 800ae32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae36:	60e3      	str	r3, [r4, #12]
 800ae38:	426d      	negs	r5, r5
 800ae3a:	e705      	b.n	800ac48 <__ieee754_rem_pio2+0x78>
 800ae3c:	a326      	add	r3, pc, #152	; (adr r3, 800aed8 <__ieee754_rem_pio2+0x308>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae46:	f7f5 fbd7 	bl	80005f8 <__aeabi_dmul>
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	460f      	mov	r7, r1
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4640      	mov	r0, r8
 800ae54:	4649      	mov	r1, r9
 800ae56:	f7f5 fa17 	bl	8000288 <__aeabi_dsub>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	4682      	mov	sl, r0
 800ae60:	468b      	mov	fp, r1
 800ae62:	4640      	mov	r0, r8
 800ae64:	4649      	mov	r1, r9
 800ae66:	f7f5 fa0f 	bl	8000288 <__aeabi_dsub>
 800ae6a:	4632      	mov	r2, r6
 800ae6c:	463b      	mov	r3, r7
 800ae6e:	f7f5 fa0b 	bl	8000288 <__aeabi_dsub>
 800ae72:	a31b      	add	r3, pc, #108	; (adr r3, 800aee0 <__ieee754_rem_pio2+0x310>)
 800ae74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae78:	4606      	mov	r6, r0
 800ae7a:	460f      	mov	r7, r1
 800ae7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae80:	f7f5 fbba 	bl	80005f8 <__aeabi_dmul>
 800ae84:	4632      	mov	r2, r6
 800ae86:	463b      	mov	r3, r7
 800ae88:	f7f5 f9fe 	bl	8000288 <__aeabi_dsub>
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	460f      	mov	r7, r1
 800ae90:	e764      	b.n	800ad5c <__ieee754_rem_pio2+0x18c>
 800ae92:	4b1b      	ldr	r3, [pc, #108]	; (800af00 <__ieee754_rem_pio2+0x330>)
 800ae94:	4598      	cmp	r8, r3
 800ae96:	dd35      	ble.n	800af04 <__ieee754_rem_pio2+0x334>
 800ae98:	ee10 2a10 	vmov	r2, s0
 800ae9c:	463b      	mov	r3, r7
 800ae9e:	4630      	mov	r0, r6
 800aea0:	4639      	mov	r1, r7
 800aea2:	f7f5 f9f1 	bl	8000288 <__aeabi_dsub>
 800aea6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aeaa:	e9c4 0100 	strd	r0, r1, [r4]
 800aeae:	e6a1      	b.n	800abf4 <__ieee754_rem_pio2+0x24>
 800aeb0:	54400000 	.word	0x54400000
 800aeb4:	3ff921fb 	.word	0x3ff921fb
 800aeb8:	1a626331 	.word	0x1a626331
 800aebc:	3dd0b461 	.word	0x3dd0b461
 800aec0:	1a600000 	.word	0x1a600000
 800aec4:	3dd0b461 	.word	0x3dd0b461
 800aec8:	2e037073 	.word	0x2e037073
 800aecc:	3ba3198a 	.word	0x3ba3198a
 800aed0:	6dc9c883 	.word	0x6dc9c883
 800aed4:	3fe45f30 	.word	0x3fe45f30
 800aed8:	2e000000 	.word	0x2e000000
 800aedc:	3ba3198a 	.word	0x3ba3198a
 800aee0:	252049c1 	.word	0x252049c1
 800aee4:	397b839a 	.word	0x397b839a
 800aee8:	3fe921fb 	.word	0x3fe921fb
 800aeec:	4002d97b 	.word	0x4002d97b
 800aef0:	3ff921fb 	.word	0x3ff921fb
 800aef4:	413921fb 	.word	0x413921fb
 800aef8:	3fe00000 	.word	0x3fe00000
 800aefc:	0800bc78 	.word	0x0800bc78
 800af00:	7fefffff 	.word	0x7fefffff
 800af04:	ea4f 5528 	mov.w	r5, r8, asr #20
 800af08:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800af0c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800af10:	4630      	mov	r0, r6
 800af12:	460f      	mov	r7, r1
 800af14:	f7f5 fe0a 	bl	8000b2c <__aeabi_d2iz>
 800af18:	f7f5 fb04 	bl	8000524 <__aeabi_i2d>
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	4630      	mov	r0, r6
 800af22:	4639      	mov	r1, r7
 800af24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800af28:	f7f5 f9ae 	bl	8000288 <__aeabi_dsub>
 800af2c:	2200      	movs	r2, #0
 800af2e:	4b1f      	ldr	r3, [pc, #124]	; (800afac <__ieee754_rem_pio2+0x3dc>)
 800af30:	f7f5 fb62 	bl	80005f8 <__aeabi_dmul>
 800af34:	460f      	mov	r7, r1
 800af36:	4606      	mov	r6, r0
 800af38:	f7f5 fdf8 	bl	8000b2c <__aeabi_d2iz>
 800af3c:	f7f5 faf2 	bl	8000524 <__aeabi_i2d>
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	4630      	mov	r0, r6
 800af46:	4639      	mov	r1, r7
 800af48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af4c:	f7f5 f99c 	bl	8000288 <__aeabi_dsub>
 800af50:	2200      	movs	r2, #0
 800af52:	4b16      	ldr	r3, [pc, #88]	; (800afac <__ieee754_rem_pio2+0x3dc>)
 800af54:	f7f5 fb50 	bl	80005f8 <__aeabi_dmul>
 800af58:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800af5c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800af60:	f04f 0803 	mov.w	r8, #3
 800af64:	2600      	movs	r6, #0
 800af66:	2700      	movs	r7, #0
 800af68:	4632      	mov	r2, r6
 800af6a:	463b      	mov	r3, r7
 800af6c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800af70:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800af74:	f7f5 fda8 	bl	8000ac8 <__aeabi_dcmpeq>
 800af78:	b9b0      	cbnz	r0, 800afa8 <__ieee754_rem_pio2+0x3d8>
 800af7a:	4b0d      	ldr	r3, [pc, #52]	; (800afb0 <__ieee754_rem_pio2+0x3e0>)
 800af7c:	9301      	str	r3, [sp, #4]
 800af7e:	2302      	movs	r3, #2
 800af80:	9300      	str	r3, [sp, #0]
 800af82:	462a      	mov	r2, r5
 800af84:	4643      	mov	r3, r8
 800af86:	4621      	mov	r1, r4
 800af88:	a806      	add	r0, sp, #24
 800af8a:	f000 f8dd 	bl	800b148 <__kernel_rem_pio2>
 800af8e:	9b04      	ldr	r3, [sp, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	4605      	mov	r5, r0
 800af94:	f6bf ae58 	bge.w	800ac48 <__ieee754_rem_pio2+0x78>
 800af98:	6863      	ldr	r3, [r4, #4]
 800af9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af9e:	6063      	str	r3, [r4, #4]
 800afa0:	68e3      	ldr	r3, [r4, #12]
 800afa2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800afa6:	e746      	b.n	800ae36 <__ieee754_rem_pio2+0x266>
 800afa8:	46d0      	mov	r8, sl
 800afaa:	e7dd      	b.n	800af68 <__ieee754_rem_pio2+0x398>
 800afac:	41700000 	.word	0x41700000
 800afb0:	0800bcf8 	.word	0x0800bcf8
 800afb4:	00000000 	.word	0x00000000

0800afb8 <__kernel_cos>:
 800afb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afbc:	ec59 8b10 	vmov	r8, r9, d0
 800afc0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800afc4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800afc8:	ed2d 8b02 	vpush	{d8}
 800afcc:	eeb0 8a41 	vmov.f32	s16, s2
 800afd0:	eef0 8a61 	vmov.f32	s17, s3
 800afd4:	da07      	bge.n	800afe6 <__kernel_cos+0x2e>
 800afd6:	ee10 0a10 	vmov	r0, s0
 800afda:	4649      	mov	r1, r9
 800afdc:	f7f5 fda6 	bl	8000b2c <__aeabi_d2iz>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	f000 8089 	beq.w	800b0f8 <__kernel_cos+0x140>
 800afe6:	4642      	mov	r2, r8
 800afe8:	464b      	mov	r3, r9
 800afea:	4640      	mov	r0, r8
 800afec:	4649      	mov	r1, r9
 800afee:	f7f5 fb03 	bl	80005f8 <__aeabi_dmul>
 800aff2:	2200      	movs	r2, #0
 800aff4:	4b4e      	ldr	r3, [pc, #312]	; (800b130 <__kernel_cos+0x178>)
 800aff6:	4604      	mov	r4, r0
 800aff8:	460d      	mov	r5, r1
 800affa:	f7f5 fafd 	bl	80005f8 <__aeabi_dmul>
 800affe:	a340      	add	r3, pc, #256	; (adr r3, 800b100 <__kernel_cos+0x148>)
 800b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b004:	4682      	mov	sl, r0
 800b006:	468b      	mov	fp, r1
 800b008:	4620      	mov	r0, r4
 800b00a:	4629      	mov	r1, r5
 800b00c:	f7f5 faf4 	bl	80005f8 <__aeabi_dmul>
 800b010:	a33d      	add	r3, pc, #244	; (adr r3, 800b108 <__kernel_cos+0x150>)
 800b012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b016:	f7f5 f939 	bl	800028c <__adddf3>
 800b01a:	4622      	mov	r2, r4
 800b01c:	462b      	mov	r3, r5
 800b01e:	f7f5 faeb 	bl	80005f8 <__aeabi_dmul>
 800b022:	a33b      	add	r3, pc, #236	; (adr r3, 800b110 <__kernel_cos+0x158>)
 800b024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b028:	f7f5 f92e 	bl	8000288 <__aeabi_dsub>
 800b02c:	4622      	mov	r2, r4
 800b02e:	462b      	mov	r3, r5
 800b030:	f7f5 fae2 	bl	80005f8 <__aeabi_dmul>
 800b034:	a338      	add	r3, pc, #224	; (adr r3, 800b118 <__kernel_cos+0x160>)
 800b036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03a:	f7f5 f927 	bl	800028c <__adddf3>
 800b03e:	4622      	mov	r2, r4
 800b040:	462b      	mov	r3, r5
 800b042:	f7f5 fad9 	bl	80005f8 <__aeabi_dmul>
 800b046:	a336      	add	r3, pc, #216	; (adr r3, 800b120 <__kernel_cos+0x168>)
 800b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04c:	f7f5 f91c 	bl	8000288 <__aeabi_dsub>
 800b050:	4622      	mov	r2, r4
 800b052:	462b      	mov	r3, r5
 800b054:	f7f5 fad0 	bl	80005f8 <__aeabi_dmul>
 800b058:	a333      	add	r3, pc, #204	; (adr r3, 800b128 <__kernel_cos+0x170>)
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	f7f5 f915 	bl	800028c <__adddf3>
 800b062:	4622      	mov	r2, r4
 800b064:	462b      	mov	r3, r5
 800b066:	f7f5 fac7 	bl	80005f8 <__aeabi_dmul>
 800b06a:	4622      	mov	r2, r4
 800b06c:	462b      	mov	r3, r5
 800b06e:	f7f5 fac3 	bl	80005f8 <__aeabi_dmul>
 800b072:	ec53 2b18 	vmov	r2, r3, d8
 800b076:	4604      	mov	r4, r0
 800b078:	460d      	mov	r5, r1
 800b07a:	4640      	mov	r0, r8
 800b07c:	4649      	mov	r1, r9
 800b07e:	f7f5 fabb 	bl	80005f8 <__aeabi_dmul>
 800b082:	460b      	mov	r3, r1
 800b084:	4602      	mov	r2, r0
 800b086:	4629      	mov	r1, r5
 800b088:	4620      	mov	r0, r4
 800b08a:	f7f5 f8fd 	bl	8000288 <__aeabi_dsub>
 800b08e:	4b29      	ldr	r3, [pc, #164]	; (800b134 <__kernel_cos+0x17c>)
 800b090:	429e      	cmp	r6, r3
 800b092:	4680      	mov	r8, r0
 800b094:	4689      	mov	r9, r1
 800b096:	dc11      	bgt.n	800b0bc <__kernel_cos+0x104>
 800b098:	4602      	mov	r2, r0
 800b09a:	460b      	mov	r3, r1
 800b09c:	4650      	mov	r0, sl
 800b09e:	4659      	mov	r1, fp
 800b0a0:	f7f5 f8f2 	bl	8000288 <__aeabi_dsub>
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	4924      	ldr	r1, [pc, #144]	; (800b138 <__kernel_cos+0x180>)
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	f7f5 f8ec 	bl	8000288 <__aeabi_dsub>
 800b0b0:	ecbd 8b02 	vpop	{d8}
 800b0b4:	ec41 0b10 	vmov	d0, r0, r1
 800b0b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0bc:	4b1f      	ldr	r3, [pc, #124]	; (800b13c <__kernel_cos+0x184>)
 800b0be:	491e      	ldr	r1, [pc, #120]	; (800b138 <__kernel_cos+0x180>)
 800b0c0:	429e      	cmp	r6, r3
 800b0c2:	bfcc      	ite	gt
 800b0c4:	4d1e      	ldrgt	r5, [pc, #120]	; (800b140 <__kernel_cos+0x188>)
 800b0c6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b0ca:	2400      	movs	r4, #0
 800b0cc:	4622      	mov	r2, r4
 800b0ce:	462b      	mov	r3, r5
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	f7f5 f8d9 	bl	8000288 <__aeabi_dsub>
 800b0d6:	4622      	mov	r2, r4
 800b0d8:	4606      	mov	r6, r0
 800b0da:	460f      	mov	r7, r1
 800b0dc:	462b      	mov	r3, r5
 800b0de:	4650      	mov	r0, sl
 800b0e0:	4659      	mov	r1, fp
 800b0e2:	f7f5 f8d1 	bl	8000288 <__aeabi_dsub>
 800b0e6:	4642      	mov	r2, r8
 800b0e8:	464b      	mov	r3, r9
 800b0ea:	f7f5 f8cd 	bl	8000288 <__aeabi_dsub>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	4639      	mov	r1, r7
 800b0f6:	e7d9      	b.n	800b0ac <__kernel_cos+0xf4>
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	490f      	ldr	r1, [pc, #60]	; (800b138 <__kernel_cos+0x180>)
 800b0fc:	e7d8      	b.n	800b0b0 <__kernel_cos+0xf8>
 800b0fe:	bf00      	nop
 800b100:	be8838d4 	.word	0xbe8838d4
 800b104:	bda8fae9 	.word	0xbda8fae9
 800b108:	bdb4b1c4 	.word	0xbdb4b1c4
 800b10c:	3e21ee9e 	.word	0x3e21ee9e
 800b110:	809c52ad 	.word	0x809c52ad
 800b114:	3e927e4f 	.word	0x3e927e4f
 800b118:	19cb1590 	.word	0x19cb1590
 800b11c:	3efa01a0 	.word	0x3efa01a0
 800b120:	16c15177 	.word	0x16c15177
 800b124:	3f56c16c 	.word	0x3f56c16c
 800b128:	5555554c 	.word	0x5555554c
 800b12c:	3fa55555 	.word	0x3fa55555
 800b130:	3fe00000 	.word	0x3fe00000
 800b134:	3fd33332 	.word	0x3fd33332
 800b138:	3ff00000 	.word	0x3ff00000
 800b13c:	3fe90000 	.word	0x3fe90000
 800b140:	3fd20000 	.word	0x3fd20000
 800b144:	00000000 	.word	0x00000000

0800b148 <__kernel_rem_pio2>:
 800b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	ed2d 8b02 	vpush	{d8}
 800b150:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b154:	1ed4      	subs	r4, r2, #3
 800b156:	9308      	str	r3, [sp, #32]
 800b158:	9101      	str	r1, [sp, #4]
 800b15a:	4bc5      	ldr	r3, [pc, #788]	; (800b470 <__kernel_rem_pio2+0x328>)
 800b15c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b15e:	9009      	str	r0, [sp, #36]	; 0x24
 800b160:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b164:	9304      	str	r3, [sp, #16]
 800b166:	9b08      	ldr	r3, [sp, #32]
 800b168:	3b01      	subs	r3, #1
 800b16a:	9307      	str	r3, [sp, #28]
 800b16c:	2318      	movs	r3, #24
 800b16e:	fb94 f4f3 	sdiv	r4, r4, r3
 800b172:	f06f 0317 	mvn.w	r3, #23
 800b176:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b17a:	fb04 3303 	mla	r3, r4, r3, r3
 800b17e:	eb03 0a02 	add.w	sl, r3, r2
 800b182:	9b04      	ldr	r3, [sp, #16]
 800b184:	9a07      	ldr	r2, [sp, #28]
 800b186:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b460 <__kernel_rem_pio2+0x318>
 800b18a:	eb03 0802 	add.w	r8, r3, r2
 800b18e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b190:	1aa7      	subs	r7, r4, r2
 800b192:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b196:	ae22      	add	r6, sp, #136	; 0x88
 800b198:	2500      	movs	r5, #0
 800b19a:	4545      	cmp	r5, r8
 800b19c:	dd13      	ble.n	800b1c6 <__kernel_rem_pio2+0x7e>
 800b19e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800b460 <__kernel_rem_pio2+0x318>
 800b1a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b1a6:	2600      	movs	r6, #0
 800b1a8:	9b04      	ldr	r3, [sp, #16]
 800b1aa:	429e      	cmp	r6, r3
 800b1ac:	dc32      	bgt.n	800b214 <__kernel_rem_pio2+0xcc>
 800b1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b0:	9302      	str	r3, [sp, #8]
 800b1b2:	9b08      	ldr	r3, [sp, #32]
 800b1b4:	199d      	adds	r5, r3, r6
 800b1b6:	ab22      	add	r3, sp, #136	; 0x88
 800b1b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b1bc:	9306      	str	r3, [sp, #24]
 800b1be:	ec59 8b18 	vmov	r8, r9, d8
 800b1c2:	2700      	movs	r7, #0
 800b1c4:	e01f      	b.n	800b206 <__kernel_rem_pio2+0xbe>
 800b1c6:	42ef      	cmn	r7, r5
 800b1c8:	d407      	bmi.n	800b1da <__kernel_rem_pio2+0x92>
 800b1ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b1ce:	f7f5 f9a9 	bl	8000524 <__aeabi_i2d>
 800b1d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b1d6:	3501      	adds	r5, #1
 800b1d8:	e7df      	b.n	800b19a <__kernel_rem_pio2+0x52>
 800b1da:	ec51 0b18 	vmov	r0, r1, d8
 800b1de:	e7f8      	b.n	800b1d2 <__kernel_rem_pio2+0x8a>
 800b1e0:	9906      	ldr	r1, [sp, #24]
 800b1e2:	9d02      	ldr	r5, [sp, #8]
 800b1e4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b1e8:	9106      	str	r1, [sp, #24]
 800b1ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b1ee:	9502      	str	r5, [sp, #8]
 800b1f0:	f7f5 fa02 	bl	80005f8 <__aeabi_dmul>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	4640      	mov	r0, r8
 800b1fa:	4649      	mov	r1, r9
 800b1fc:	f7f5 f846 	bl	800028c <__adddf3>
 800b200:	3701      	adds	r7, #1
 800b202:	4680      	mov	r8, r0
 800b204:	4689      	mov	r9, r1
 800b206:	9b07      	ldr	r3, [sp, #28]
 800b208:	429f      	cmp	r7, r3
 800b20a:	dde9      	ble.n	800b1e0 <__kernel_rem_pio2+0x98>
 800b20c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b210:	3601      	adds	r6, #1
 800b212:	e7c9      	b.n	800b1a8 <__kernel_rem_pio2+0x60>
 800b214:	9b04      	ldr	r3, [sp, #16]
 800b216:	aa0e      	add	r2, sp, #56	; 0x38
 800b218:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b21c:	930c      	str	r3, [sp, #48]	; 0x30
 800b21e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b220:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b224:	9c04      	ldr	r4, [sp, #16]
 800b226:	930b      	str	r3, [sp, #44]	; 0x2c
 800b228:	ab9a      	add	r3, sp, #616	; 0x268
 800b22a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800b22e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b232:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b236:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b23a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b23e:	ab9a      	add	r3, sp, #616	; 0x268
 800b240:	445b      	add	r3, fp
 800b242:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800b246:	2500      	movs	r5, #0
 800b248:	1b63      	subs	r3, r4, r5
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	dc78      	bgt.n	800b340 <__kernel_rem_pio2+0x1f8>
 800b24e:	4650      	mov	r0, sl
 800b250:	ec49 8b10 	vmov	d0, r8, r9
 800b254:	f000 fc00 	bl	800ba58 <scalbn>
 800b258:	ec57 6b10 	vmov	r6, r7, d0
 800b25c:	2200      	movs	r2, #0
 800b25e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b262:	ee10 0a10 	vmov	r0, s0
 800b266:	4639      	mov	r1, r7
 800b268:	f7f5 f9c6 	bl	80005f8 <__aeabi_dmul>
 800b26c:	ec41 0b10 	vmov	d0, r0, r1
 800b270:	f000 fb6e 	bl	800b950 <floor>
 800b274:	2200      	movs	r2, #0
 800b276:	ec51 0b10 	vmov	r0, r1, d0
 800b27a:	4b7e      	ldr	r3, [pc, #504]	; (800b474 <__kernel_rem_pio2+0x32c>)
 800b27c:	f7f5 f9bc 	bl	80005f8 <__aeabi_dmul>
 800b280:	4602      	mov	r2, r0
 800b282:	460b      	mov	r3, r1
 800b284:	4630      	mov	r0, r6
 800b286:	4639      	mov	r1, r7
 800b288:	f7f4 fffe 	bl	8000288 <__aeabi_dsub>
 800b28c:	460f      	mov	r7, r1
 800b28e:	4606      	mov	r6, r0
 800b290:	f7f5 fc4c 	bl	8000b2c <__aeabi_d2iz>
 800b294:	9006      	str	r0, [sp, #24]
 800b296:	f7f5 f945 	bl	8000524 <__aeabi_i2d>
 800b29a:	4602      	mov	r2, r0
 800b29c:	460b      	mov	r3, r1
 800b29e:	4630      	mov	r0, r6
 800b2a0:	4639      	mov	r1, r7
 800b2a2:	f7f4 fff1 	bl	8000288 <__aeabi_dsub>
 800b2a6:	f1ba 0f00 	cmp.w	sl, #0
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	460f      	mov	r7, r1
 800b2ae:	dd6c      	ble.n	800b38a <__kernel_rem_pio2+0x242>
 800b2b0:	1e62      	subs	r2, r4, #1
 800b2b2:	ab0e      	add	r3, sp, #56	; 0x38
 800b2b4:	f1ca 0118 	rsb	r1, sl, #24
 800b2b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b2bc:	9d06      	ldr	r5, [sp, #24]
 800b2be:	fa40 f301 	asr.w	r3, r0, r1
 800b2c2:	441d      	add	r5, r3
 800b2c4:	408b      	lsls	r3, r1
 800b2c6:	1ac0      	subs	r0, r0, r3
 800b2c8:	ab0e      	add	r3, sp, #56	; 0x38
 800b2ca:	9506      	str	r5, [sp, #24]
 800b2cc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b2d0:	f1ca 0317 	rsb	r3, sl, #23
 800b2d4:	fa40 f303 	asr.w	r3, r0, r3
 800b2d8:	9302      	str	r3, [sp, #8]
 800b2da:	9b02      	ldr	r3, [sp, #8]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	dd62      	ble.n	800b3a6 <__kernel_rem_pio2+0x25e>
 800b2e0:	9b06      	ldr	r3, [sp, #24]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	9306      	str	r3, [sp, #24]
 800b2e8:	4615      	mov	r5, r2
 800b2ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b2ee:	4294      	cmp	r4, r2
 800b2f0:	f300 8095 	bgt.w	800b41e <__kernel_rem_pio2+0x2d6>
 800b2f4:	f1ba 0f00 	cmp.w	sl, #0
 800b2f8:	dd07      	ble.n	800b30a <__kernel_rem_pio2+0x1c2>
 800b2fa:	f1ba 0f01 	cmp.w	sl, #1
 800b2fe:	f000 80a2 	beq.w	800b446 <__kernel_rem_pio2+0x2fe>
 800b302:	f1ba 0f02 	cmp.w	sl, #2
 800b306:	f000 80c1 	beq.w	800b48c <__kernel_rem_pio2+0x344>
 800b30a:	9b02      	ldr	r3, [sp, #8]
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	d14a      	bne.n	800b3a6 <__kernel_rem_pio2+0x25e>
 800b310:	4632      	mov	r2, r6
 800b312:	463b      	mov	r3, r7
 800b314:	2000      	movs	r0, #0
 800b316:	4958      	ldr	r1, [pc, #352]	; (800b478 <__kernel_rem_pio2+0x330>)
 800b318:	f7f4 ffb6 	bl	8000288 <__aeabi_dsub>
 800b31c:	4606      	mov	r6, r0
 800b31e:	460f      	mov	r7, r1
 800b320:	2d00      	cmp	r5, #0
 800b322:	d040      	beq.n	800b3a6 <__kernel_rem_pio2+0x25e>
 800b324:	4650      	mov	r0, sl
 800b326:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b468 <__kernel_rem_pio2+0x320>
 800b32a:	f000 fb95 	bl	800ba58 <scalbn>
 800b32e:	4630      	mov	r0, r6
 800b330:	4639      	mov	r1, r7
 800b332:	ec53 2b10 	vmov	r2, r3, d0
 800b336:	f7f4 ffa7 	bl	8000288 <__aeabi_dsub>
 800b33a:	4606      	mov	r6, r0
 800b33c:	460f      	mov	r7, r1
 800b33e:	e032      	b.n	800b3a6 <__kernel_rem_pio2+0x25e>
 800b340:	2200      	movs	r2, #0
 800b342:	4b4e      	ldr	r3, [pc, #312]	; (800b47c <__kernel_rem_pio2+0x334>)
 800b344:	4640      	mov	r0, r8
 800b346:	4649      	mov	r1, r9
 800b348:	f7f5 f956 	bl	80005f8 <__aeabi_dmul>
 800b34c:	f7f5 fbee 	bl	8000b2c <__aeabi_d2iz>
 800b350:	f7f5 f8e8 	bl	8000524 <__aeabi_i2d>
 800b354:	2200      	movs	r2, #0
 800b356:	4b4a      	ldr	r3, [pc, #296]	; (800b480 <__kernel_rem_pio2+0x338>)
 800b358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b35c:	f7f5 f94c 	bl	80005f8 <__aeabi_dmul>
 800b360:	4602      	mov	r2, r0
 800b362:	460b      	mov	r3, r1
 800b364:	4640      	mov	r0, r8
 800b366:	4649      	mov	r1, r9
 800b368:	f7f4 ff8e 	bl	8000288 <__aeabi_dsub>
 800b36c:	f7f5 fbde 	bl	8000b2c <__aeabi_d2iz>
 800b370:	ab0e      	add	r3, sp, #56	; 0x38
 800b372:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b376:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b37a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b37e:	f7f4 ff85 	bl	800028c <__adddf3>
 800b382:	3501      	adds	r5, #1
 800b384:	4680      	mov	r8, r0
 800b386:	4689      	mov	r9, r1
 800b388:	e75e      	b.n	800b248 <__kernel_rem_pio2+0x100>
 800b38a:	d105      	bne.n	800b398 <__kernel_rem_pio2+0x250>
 800b38c:	1e63      	subs	r3, r4, #1
 800b38e:	aa0e      	add	r2, sp, #56	; 0x38
 800b390:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b394:	15c3      	asrs	r3, r0, #23
 800b396:	e79f      	b.n	800b2d8 <__kernel_rem_pio2+0x190>
 800b398:	2200      	movs	r2, #0
 800b39a:	4b3a      	ldr	r3, [pc, #232]	; (800b484 <__kernel_rem_pio2+0x33c>)
 800b39c:	f7f5 fbb2 	bl	8000b04 <__aeabi_dcmpge>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	d139      	bne.n	800b418 <__kernel_rem_pio2+0x2d0>
 800b3a4:	9002      	str	r0, [sp, #8]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	4639      	mov	r1, r7
 800b3ae:	f7f5 fb8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	f000 80c7 	beq.w	800b546 <__kernel_rem_pio2+0x3fe>
 800b3b8:	1e65      	subs	r5, r4, #1
 800b3ba:	462b      	mov	r3, r5
 800b3bc:	2200      	movs	r2, #0
 800b3be:	9904      	ldr	r1, [sp, #16]
 800b3c0:	428b      	cmp	r3, r1
 800b3c2:	da6a      	bge.n	800b49a <__kernel_rem_pio2+0x352>
 800b3c4:	2a00      	cmp	r2, #0
 800b3c6:	f000 8088 	beq.w	800b4da <__kernel_rem_pio2+0x392>
 800b3ca:	ab0e      	add	r3, sp, #56	; 0x38
 800b3cc:	f1aa 0a18 	sub.w	sl, sl, #24
 800b3d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f000 80b4 	beq.w	800b542 <__kernel_rem_pio2+0x3fa>
 800b3da:	4650      	mov	r0, sl
 800b3dc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800b468 <__kernel_rem_pio2+0x320>
 800b3e0:	f000 fb3a 	bl	800ba58 <scalbn>
 800b3e4:	00ec      	lsls	r4, r5, #3
 800b3e6:	ab72      	add	r3, sp, #456	; 0x1c8
 800b3e8:	191e      	adds	r6, r3, r4
 800b3ea:	ec59 8b10 	vmov	r8, r9, d0
 800b3ee:	f106 0a08 	add.w	sl, r6, #8
 800b3f2:	462f      	mov	r7, r5
 800b3f4:	2f00      	cmp	r7, #0
 800b3f6:	f280 80df 	bge.w	800b5b8 <__kernel_rem_pio2+0x470>
 800b3fa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800b460 <__kernel_rem_pio2+0x318>
 800b3fe:	f04f 0a00 	mov.w	sl, #0
 800b402:	eba5 030a 	sub.w	r3, r5, sl
 800b406:	2b00      	cmp	r3, #0
 800b408:	f2c0 810a 	blt.w	800b620 <__kernel_rem_pio2+0x4d8>
 800b40c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800b488 <__kernel_rem_pio2+0x340>
 800b410:	ec59 8b18 	vmov	r8, r9, d8
 800b414:	2700      	movs	r7, #0
 800b416:	e0f5      	b.n	800b604 <__kernel_rem_pio2+0x4bc>
 800b418:	2302      	movs	r3, #2
 800b41a:	9302      	str	r3, [sp, #8]
 800b41c:	e760      	b.n	800b2e0 <__kernel_rem_pio2+0x198>
 800b41e:	ab0e      	add	r3, sp, #56	; 0x38
 800b420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b424:	b94d      	cbnz	r5, 800b43a <__kernel_rem_pio2+0x2f2>
 800b426:	b12b      	cbz	r3, 800b434 <__kernel_rem_pio2+0x2ec>
 800b428:	a80e      	add	r0, sp, #56	; 0x38
 800b42a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b42e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b432:	2301      	movs	r3, #1
 800b434:	3201      	adds	r2, #1
 800b436:	461d      	mov	r5, r3
 800b438:	e759      	b.n	800b2ee <__kernel_rem_pio2+0x1a6>
 800b43a:	a80e      	add	r0, sp, #56	; 0x38
 800b43c:	1acb      	subs	r3, r1, r3
 800b43e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b442:	462b      	mov	r3, r5
 800b444:	e7f6      	b.n	800b434 <__kernel_rem_pio2+0x2ec>
 800b446:	1e62      	subs	r2, r4, #1
 800b448:	ab0e      	add	r3, sp, #56	; 0x38
 800b44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b452:	a90e      	add	r1, sp, #56	; 0x38
 800b454:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b458:	e757      	b.n	800b30a <__kernel_rem_pio2+0x1c2>
 800b45a:	bf00      	nop
 800b45c:	f3af 8000 	nop.w
	...
 800b46c:	3ff00000 	.word	0x3ff00000
 800b470:	0800be40 	.word	0x0800be40
 800b474:	40200000 	.word	0x40200000
 800b478:	3ff00000 	.word	0x3ff00000
 800b47c:	3e700000 	.word	0x3e700000
 800b480:	41700000 	.word	0x41700000
 800b484:	3fe00000 	.word	0x3fe00000
 800b488:	0800be00 	.word	0x0800be00
 800b48c:	1e62      	subs	r2, r4, #1
 800b48e:	ab0e      	add	r3, sp, #56	; 0x38
 800b490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b494:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b498:	e7db      	b.n	800b452 <__kernel_rem_pio2+0x30a>
 800b49a:	a90e      	add	r1, sp, #56	; 0x38
 800b49c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	430a      	orrs	r2, r1
 800b4a4:	e78b      	b.n	800b3be <__kernel_rem_pio2+0x276>
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b4ac:	2900      	cmp	r1, #0
 800b4ae:	d0fa      	beq.n	800b4a6 <__kernel_rem_pio2+0x35e>
 800b4b0:	9a08      	ldr	r2, [sp, #32]
 800b4b2:	4422      	add	r2, r4
 800b4b4:	00d2      	lsls	r2, r2, #3
 800b4b6:	a922      	add	r1, sp, #136	; 0x88
 800b4b8:	18e3      	adds	r3, r4, r3
 800b4ba:	9206      	str	r2, [sp, #24]
 800b4bc:	440a      	add	r2, r1
 800b4be:	9302      	str	r3, [sp, #8]
 800b4c0:	f10b 0108 	add.w	r1, fp, #8
 800b4c4:	f102 0308 	add.w	r3, r2, #8
 800b4c8:	1c66      	adds	r6, r4, #1
 800b4ca:	910a      	str	r1, [sp, #40]	; 0x28
 800b4cc:	2500      	movs	r5, #0
 800b4ce:	930d      	str	r3, [sp, #52]	; 0x34
 800b4d0:	9b02      	ldr	r3, [sp, #8]
 800b4d2:	42b3      	cmp	r3, r6
 800b4d4:	da04      	bge.n	800b4e0 <__kernel_rem_pio2+0x398>
 800b4d6:	461c      	mov	r4, r3
 800b4d8:	e6a6      	b.n	800b228 <__kernel_rem_pio2+0xe0>
 800b4da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e7e3      	b.n	800b4a8 <__kernel_rem_pio2+0x360>
 800b4e0:	9b06      	ldr	r3, [sp, #24]
 800b4e2:	18ef      	adds	r7, r5, r3
 800b4e4:	ab22      	add	r3, sp, #136	; 0x88
 800b4e6:	441f      	add	r7, r3
 800b4e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b4ee:	f7f5 f819 	bl	8000524 <__aeabi_i2d>
 800b4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4f4:	461c      	mov	r4, r3
 800b4f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4f8:	e9c7 0100 	strd	r0, r1, [r7]
 800b4fc:	eb03 0b05 	add.w	fp, r3, r5
 800b500:	2700      	movs	r7, #0
 800b502:	f04f 0800 	mov.w	r8, #0
 800b506:	f04f 0900 	mov.w	r9, #0
 800b50a:	9b07      	ldr	r3, [sp, #28]
 800b50c:	429f      	cmp	r7, r3
 800b50e:	dd08      	ble.n	800b522 <__kernel_rem_pio2+0x3da>
 800b510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b512:	aa72      	add	r2, sp, #456	; 0x1c8
 800b514:	18eb      	adds	r3, r5, r3
 800b516:	4413      	add	r3, r2
 800b518:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800b51c:	3601      	adds	r6, #1
 800b51e:	3508      	adds	r5, #8
 800b520:	e7d6      	b.n	800b4d0 <__kernel_rem_pio2+0x388>
 800b522:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b526:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b52a:	f7f5 f865 	bl	80005f8 <__aeabi_dmul>
 800b52e:	4602      	mov	r2, r0
 800b530:	460b      	mov	r3, r1
 800b532:	4640      	mov	r0, r8
 800b534:	4649      	mov	r1, r9
 800b536:	f7f4 fea9 	bl	800028c <__adddf3>
 800b53a:	3701      	adds	r7, #1
 800b53c:	4680      	mov	r8, r0
 800b53e:	4689      	mov	r9, r1
 800b540:	e7e3      	b.n	800b50a <__kernel_rem_pio2+0x3c2>
 800b542:	3d01      	subs	r5, #1
 800b544:	e741      	b.n	800b3ca <__kernel_rem_pio2+0x282>
 800b546:	f1ca 0000 	rsb	r0, sl, #0
 800b54a:	ec47 6b10 	vmov	d0, r6, r7
 800b54e:	f000 fa83 	bl	800ba58 <scalbn>
 800b552:	ec57 6b10 	vmov	r6, r7, d0
 800b556:	2200      	movs	r2, #0
 800b558:	4b99      	ldr	r3, [pc, #612]	; (800b7c0 <__kernel_rem_pio2+0x678>)
 800b55a:	ee10 0a10 	vmov	r0, s0
 800b55e:	4639      	mov	r1, r7
 800b560:	f7f5 fad0 	bl	8000b04 <__aeabi_dcmpge>
 800b564:	b1f8      	cbz	r0, 800b5a6 <__kernel_rem_pio2+0x45e>
 800b566:	2200      	movs	r2, #0
 800b568:	4b96      	ldr	r3, [pc, #600]	; (800b7c4 <__kernel_rem_pio2+0x67c>)
 800b56a:	4630      	mov	r0, r6
 800b56c:	4639      	mov	r1, r7
 800b56e:	f7f5 f843 	bl	80005f8 <__aeabi_dmul>
 800b572:	f7f5 fadb 	bl	8000b2c <__aeabi_d2iz>
 800b576:	4680      	mov	r8, r0
 800b578:	f7f4 ffd4 	bl	8000524 <__aeabi_i2d>
 800b57c:	2200      	movs	r2, #0
 800b57e:	4b90      	ldr	r3, [pc, #576]	; (800b7c0 <__kernel_rem_pio2+0x678>)
 800b580:	f7f5 f83a 	bl	80005f8 <__aeabi_dmul>
 800b584:	460b      	mov	r3, r1
 800b586:	4602      	mov	r2, r0
 800b588:	4639      	mov	r1, r7
 800b58a:	4630      	mov	r0, r6
 800b58c:	f7f4 fe7c 	bl	8000288 <__aeabi_dsub>
 800b590:	f7f5 facc 	bl	8000b2c <__aeabi_d2iz>
 800b594:	1c65      	adds	r5, r4, #1
 800b596:	ab0e      	add	r3, sp, #56	; 0x38
 800b598:	f10a 0a18 	add.w	sl, sl, #24
 800b59c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b5a0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b5a4:	e719      	b.n	800b3da <__kernel_rem_pio2+0x292>
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	f7f5 fabf 	bl	8000b2c <__aeabi_d2iz>
 800b5ae:	ab0e      	add	r3, sp, #56	; 0x38
 800b5b0:	4625      	mov	r5, r4
 800b5b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b5b6:	e710      	b.n	800b3da <__kernel_rem_pio2+0x292>
 800b5b8:	ab0e      	add	r3, sp, #56	; 0x38
 800b5ba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b5be:	f7f4 ffb1 	bl	8000524 <__aeabi_i2d>
 800b5c2:	4642      	mov	r2, r8
 800b5c4:	464b      	mov	r3, r9
 800b5c6:	f7f5 f817 	bl	80005f8 <__aeabi_dmul>
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b5d0:	4b7c      	ldr	r3, [pc, #496]	; (800b7c4 <__kernel_rem_pio2+0x67c>)
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	4649      	mov	r1, r9
 800b5d6:	f7f5 f80f 	bl	80005f8 <__aeabi_dmul>
 800b5da:	3f01      	subs	r7, #1
 800b5dc:	4680      	mov	r8, r0
 800b5de:	4689      	mov	r9, r1
 800b5e0:	e708      	b.n	800b3f4 <__kernel_rem_pio2+0x2ac>
 800b5e2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800b5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800b5ee:	f7f5 f803 	bl	80005f8 <__aeabi_dmul>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4640      	mov	r0, r8
 800b5f8:	4649      	mov	r1, r9
 800b5fa:	f7f4 fe47 	bl	800028c <__adddf3>
 800b5fe:	3701      	adds	r7, #1
 800b600:	4680      	mov	r8, r0
 800b602:	4689      	mov	r9, r1
 800b604:	9b04      	ldr	r3, [sp, #16]
 800b606:	429f      	cmp	r7, r3
 800b608:	dc01      	bgt.n	800b60e <__kernel_rem_pio2+0x4c6>
 800b60a:	45ba      	cmp	sl, r7
 800b60c:	dae9      	bge.n	800b5e2 <__kernel_rem_pio2+0x49a>
 800b60e:	ab4a      	add	r3, sp, #296	; 0x128
 800b610:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b614:	e9c3 8900 	strd	r8, r9, [r3]
 800b618:	f10a 0a01 	add.w	sl, sl, #1
 800b61c:	3e08      	subs	r6, #8
 800b61e:	e6f0      	b.n	800b402 <__kernel_rem_pio2+0x2ba>
 800b620:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b622:	2b03      	cmp	r3, #3
 800b624:	d85b      	bhi.n	800b6de <__kernel_rem_pio2+0x596>
 800b626:	e8df f003 	tbb	[pc, r3]
 800b62a:	264a      	.short	0x264a
 800b62c:	0226      	.short	0x0226
 800b62e:	ab9a      	add	r3, sp, #616	; 0x268
 800b630:	441c      	add	r4, r3
 800b632:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b636:	46a2      	mov	sl, r4
 800b638:	46ab      	mov	fp, r5
 800b63a:	f1bb 0f00 	cmp.w	fp, #0
 800b63e:	dc6c      	bgt.n	800b71a <__kernel_rem_pio2+0x5d2>
 800b640:	46a2      	mov	sl, r4
 800b642:	46ab      	mov	fp, r5
 800b644:	f1bb 0f01 	cmp.w	fp, #1
 800b648:	f300 8086 	bgt.w	800b758 <__kernel_rem_pio2+0x610>
 800b64c:	2000      	movs	r0, #0
 800b64e:	2100      	movs	r1, #0
 800b650:	2d01      	cmp	r5, #1
 800b652:	f300 80a0 	bgt.w	800b796 <__kernel_rem_pio2+0x64e>
 800b656:	9b02      	ldr	r3, [sp, #8]
 800b658:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b65c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800b660:	2b00      	cmp	r3, #0
 800b662:	f040 809e 	bne.w	800b7a2 <__kernel_rem_pio2+0x65a>
 800b666:	9b01      	ldr	r3, [sp, #4]
 800b668:	e9c3 7800 	strd	r7, r8, [r3]
 800b66c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b670:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b674:	e033      	b.n	800b6de <__kernel_rem_pio2+0x596>
 800b676:	3408      	adds	r4, #8
 800b678:	ab4a      	add	r3, sp, #296	; 0x128
 800b67a:	441c      	add	r4, r3
 800b67c:	462e      	mov	r6, r5
 800b67e:	2000      	movs	r0, #0
 800b680:	2100      	movs	r1, #0
 800b682:	2e00      	cmp	r6, #0
 800b684:	da3a      	bge.n	800b6fc <__kernel_rem_pio2+0x5b4>
 800b686:	9b02      	ldr	r3, [sp, #8]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d03d      	beq.n	800b708 <__kernel_rem_pio2+0x5c0>
 800b68c:	4602      	mov	r2, r0
 800b68e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b692:	9c01      	ldr	r4, [sp, #4]
 800b694:	e9c4 2300 	strd	r2, r3, [r4]
 800b698:	4602      	mov	r2, r0
 800b69a:	460b      	mov	r3, r1
 800b69c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b6a0:	f7f4 fdf2 	bl	8000288 <__aeabi_dsub>
 800b6a4:	ae4c      	add	r6, sp, #304	; 0x130
 800b6a6:	2401      	movs	r4, #1
 800b6a8:	42a5      	cmp	r5, r4
 800b6aa:	da30      	bge.n	800b70e <__kernel_rem_pio2+0x5c6>
 800b6ac:	9b02      	ldr	r3, [sp, #8]
 800b6ae:	b113      	cbz	r3, 800b6b6 <__kernel_rem_pio2+0x56e>
 800b6b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	9b01      	ldr	r3, [sp, #4]
 800b6b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b6bc:	e00f      	b.n	800b6de <__kernel_rem_pio2+0x596>
 800b6be:	ab9a      	add	r3, sp, #616	; 0x268
 800b6c0:	441c      	add	r4, r3
 800b6c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	2d00      	cmp	r5, #0
 800b6cc:	da10      	bge.n	800b6f0 <__kernel_rem_pio2+0x5a8>
 800b6ce:	9b02      	ldr	r3, [sp, #8]
 800b6d0:	b113      	cbz	r3, 800b6d8 <__kernel_rem_pio2+0x590>
 800b6d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	9b01      	ldr	r3, [sp, #4]
 800b6da:	e9c3 0100 	strd	r0, r1, [r3]
 800b6de:	9b06      	ldr	r3, [sp, #24]
 800b6e0:	f003 0007 	and.w	r0, r3, #7
 800b6e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b6e8:	ecbd 8b02 	vpop	{d8}
 800b6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b6f4:	f7f4 fdca 	bl	800028c <__adddf3>
 800b6f8:	3d01      	subs	r5, #1
 800b6fa:	e7e6      	b.n	800b6ca <__kernel_rem_pio2+0x582>
 800b6fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b700:	f7f4 fdc4 	bl	800028c <__adddf3>
 800b704:	3e01      	subs	r6, #1
 800b706:	e7bc      	b.n	800b682 <__kernel_rem_pio2+0x53a>
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	e7c1      	b.n	800b692 <__kernel_rem_pio2+0x54a>
 800b70e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b712:	f7f4 fdbb 	bl	800028c <__adddf3>
 800b716:	3401      	adds	r4, #1
 800b718:	e7c6      	b.n	800b6a8 <__kernel_rem_pio2+0x560>
 800b71a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800b71e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b722:	4640      	mov	r0, r8
 800b724:	ec53 2b17 	vmov	r2, r3, d7
 800b728:	4649      	mov	r1, r9
 800b72a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b72e:	f7f4 fdad 	bl	800028c <__adddf3>
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	4606      	mov	r6, r0
 800b738:	460f      	mov	r7, r1
 800b73a:	4640      	mov	r0, r8
 800b73c:	4649      	mov	r1, r9
 800b73e:	f7f4 fda3 	bl	8000288 <__aeabi_dsub>
 800b742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b746:	f7f4 fda1 	bl	800028c <__adddf3>
 800b74a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b74e:	e9ca 0100 	strd	r0, r1, [sl]
 800b752:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800b756:	e770      	b.n	800b63a <__kernel_rem_pio2+0x4f2>
 800b758:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800b75c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b760:	4630      	mov	r0, r6
 800b762:	ec53 2b17 	vmov	r2, r3, d7
 800b766:	4639      	mov	r1, r7
 800b768:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b76c:	f7f4 fd8e 	bl	800028c <__adddf3>
 800b770:	4602      	mov	r2, r0
 800b772:	460b      	mov	r3, r1
 800b774:	4680      	mov	r8, r0
 800b776:	4689      	mov	r9, r1
 800b778:	4630      	mov	r0, r6
 800b77a:	4639      	mov	r1, r7
 800b77c:	f7f4 fd84 	bl	8000288 <__aeabi_dsub>
 800b780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b784:	f7f4 fd82 	bl	800028c <__adddf3>
 800b788:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b78c:	e9ca 0100 	strd	r0, r1, [sl]
 800b790:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800b794:	e756      	b.n	800b644 <__kernel_rem_pio2+0x4fc>
 800b796:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b79a:	f7f4 fd77 	bl	800028c <__adddf3>
 800b79e:	3d01      	subs	r5, #1
 800b7a0:	e756      	b.n	800b650 <__kernel_rem_pio2+0x508>
 800b7a2:	9b01      	ldr	r3, [sp, #4]
 800b7a4:	9a01      	ldr	r2, [sp, #4]
 800b7a6:	601f      	str	r7, [r3, #0]
 800b7a8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800b7ac:	605c      	str	r4, [r3, #4]
 800b7ae:	609d      	str	r5, [r3, #8]
 800b7b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b7b4:	60d3      	str	r3, [r2, #12]
 800b7b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7ba:	6110      	str	r0, [r2, #16]
 800b7bc:	6153      	str	r3, [r2, #20]
 800b7be:	e78e      	b.n	800b6de <__kernel_rem_pio2+0x596>
 800b7c0:	41700000 	.word	0x41700000
 800b7c4:	3e700000 	.word	0x3e700000

0800b7c8 <__kernel_sin>:
 800b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7cc:	ec55 4b10 	vmov	r4, r5, d0
 800b7d0:	b085      	sub	sp, #20
 800b7d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b7d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b7da:	ed8d 1b00 	vstr	d1, [sp]
 800b7de:	9002      	str	r0, [sp, #8]
 800b7e0:	da06      	bge.n	800b7f0 <__kernel_sin+0x28>
 800b7e2:	ee10 0a10 	vmov	r0, s0
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	f7f5 f9a0 	bl	8000b2c <__aeabi_d2iz>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	d051      	beq.n	800b894 <__kernel_sin+0xcc>
 800b7f0:	4622      	mov	r2, r4
 800b7f2:	462b      	mov	r3, r5
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	f7f4 fefe 	bl	80005f8 <__aeabi_dmul>
 800b7fc:	4682      	mov	sl, r0
 800b7fe:	468b      	mov	fp, r1
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	4620      	mov	r0, r4
 800b806:	4629      	mov	r1, r5
 800b808:	f7f4 fef6 	bl	80005f8 <__aeabi_dmul>
 800b80c:	a341      	add	r3, pc, #260	; (adr r3, 800b914 <__kernel_sin+0x14c>)
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	4680      	mov	r8, r0
 800b814:	4689      	mov	r9, r1
 800b816:	4650      	mov	r0, sl
 800b818:	4659      	mov	r1, fp
 800b81a:	f7f4 feed 	bl	80005f8 <__aeabi_dmul>
 800b81e:	a33f      	add	r3, pc, #252	; (adr r3, 800b91c <__kernel_sin+0x154>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	f7f4 fd30 	bl	8000288 <__aeabi_dsub>
 800b828:	4652      	mov	r2, sl
 800b82a:	465b      	mov	r3, fp
 800b82c:	f7f4 fee4 	bl	80005f8 <__aeabi_dmul>
 800b830:	a33c      	add	r3, pc, #240	; (adr r3, 800b924 <__kernel_sin+0x15c>)
 800b832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b836:	f7f4 fd29 	bl	800028c <__adddf3>
 800b83a:	4652      	mov	r2, sl
 800b83c:	465b      	mov	r3, fp
 800b83e:	f7f4 fedb 	bl	80005f8 <__aeabi_dmul>
 800b842:	a33a      	add	r3, pc, #232	; (adr r3, 800b92c <__kernel_sin+0x164>)
 800b844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b848:	f7f4 fd1e 	bl	8000288 <__aeabi_dsub>
 800b84c:	4652      	mov	r2, sl
 800b84e:	465b      	mov	r3, fp
 800b850:	f7f4 fed2 	bl	80005f8 <__aeabi_dmul>
 800b854:	a337      	add	r3, pc, #220	; (adr r3, 800b934 <__kernel_sin+0x16c>)
 800b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85a:	f7f4 fd17 	bl	800028c <__adddf3>
 800b85e:	9b02      	ldr	r3, [sp, #8]
 800b860:	4606      	mov	r6, r0
 800b862:	460f      	mov	r7, r1
 800b864:	b9db      	cbnz	r3, 800b89e <__kernel_sin+0xd6>
 800b866:	4602      	mov	r2, r0
 800b868:	460b      	mov	r3, r1
 800b86a:	4650      	mov	r0, sl
 800b86c:	4659      	mov	r1, fp
 800b86e:	f7f4 fec3 	bl	80005f8 <__aeabi_dmul>
 800b872:	a325      	add	r3, pc, #148	; (adr r3, 800b908 <__kernel_sin+0x140>)
 800b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b878:	f7f4 fd06 	bl	8000288 <__aeabi_dsub>
 800b87c:	4642      	mov	r2, r8
 800b87e:	464b      	mov	r3, r9
 800b880:	f7f4 feba 	bl	80005f8 <__aeabi_dmul>
 800b884:	4602      	mov	r2, r0
 800b886:	460b      	mov	r3, r1
 800b888:	4620      	mov	r0, r4
 800b88a:	4629      	mov	r1, r5
 800b88c:	f7f4 fcfe 	bl	800028c <__adddf3>
 800b890:	4604      	mov	r4, r0
 800b892:	460d      	mov	r5, r1
 800b894:	ec45 4b10 	vmov	d0, r4, r5
 800b898:	b005      	add	sp, #20
 800b89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b89e:	2200      	movs	r2, #0
 800b8a0:	4b1b      	ldr	r3, [pc, #108]	; (800b910 <__kernel_sin+0x148>)
 800b8a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8a6:	f7f4 fea7 	bl	80005f8 <__aeabi_dmul>
 800b8aa:	4632      	mov	r2, r6
 800b8ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8b0:	463b      	mov	r3, r7
 800b8b2:	4640      	mov	r0, r8
 800b8b4:	4649      	mov	r1, r9
 800b8b6:	f7f4 fe9f 	bl	80005f8 <__aeabi_dmul>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	460b      	mov	r3, r1
 800b8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8c2:	f7f4 fce1 	bl	8000288 <__aeabi_dsub>
 800b8c6:	4652      	mov	r2, sl
 800b8c8:	465b      	mov	r3, fp
 800b8ca:	f7f4 fe95 	bl	80005f8 <__aeabi_dmul>
 800b8ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8d2:	f7f4 fcd9 	bl	8000288 <__aeabi_dsub>
 800b8d6:	a30c      	add	r3, pc, #48	; (adr r3, 800b908 <__kernel_sin+0x140>)
 800b8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8dc:	4606      	mov	r6, r0
 800b8de:	460f      	mov	r7, r1
 800b8e0:	4640      	mov	r0, r8
 800b8e2:	4649      	mov	r1, r9
 800b8e4:	f7f4 fe88 	bl	80005f8 <__aeabi_dmul>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	4639      	mov	r1, r7
 800b8f0:	f7f4 fccc 	bl	800028c <__adddf3>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	f7f4 fcc4 	bl	8000288 <__aeabi_dsub>
 800b900:	e7c6      	b.n	800b890 <__kernel_sin+0xc8>
 800b902:	bf00      	nop
 800b904:	f3af 8000 	nop.w
 800b908:	55555549 	.word	0x55555549
 800b90c:	3fc55555 	.word	0x3fc55555
 800b910:	3fe00000 	.word	0x3fe00000
 800b914:	5acfd57c 	.word	0x5acfd57c
 800b918:	3de5d93a 	.word	0x3de5d93a
 800b91c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b920:	3e5ae5e6 	.word	0x3e5ae5e6
 800b924:	57b1fe7d 	.word	0x57b1fe7d
 800b928:	3ec71de3 	.word	0x3ec71de3
 800b92c:	19c161d5 	.word	0x19c161d5
 800b930:	3f2a01a0 	.word	0x3f2a01a0
 800b934:	1110f8a6 	.word	0x1110f8a6
 800b938:	3f811111 	.word	0x3f811111

0800b93c <fabs>:
 800b93c:	ec51 0b10 	vmov	r0, r1, d0
 800b940:	ee10 2a10 	vmov	r2, s0
 800b944:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b948:	ec43 2b10 	vmov	d0, r2, r3
 800b94c:	4770      	bx	lr
	...

0800b950 <floor>:
 800b950:	ec51 0b10 	vmov	r0, r1, d0
 800b954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b958:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b95c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b960:	2e13      	cmp	r6, #19
 800b962:	460c      	mov	r4, r1
 800b964:	ee10 5a10 	vmov	r5, s0
 800b968:	4680      	mov	r8, r0
 800b96a:	dc34      	bgt.n	800b9d6 <floor+0x86>
 800b96c:	2e00      	cmp	r6, #0
 800b96e:	da16      	bge.n	800b99e <floor+0x4e>
 800b970:	a335      	add	r3, pc, #212	; (adr r3, 800ba48 <floor+0xf8>)
 800b972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b976:	f7f4 fc89 	bl	800028c <__adddf3>
 800b97a:	2200      	movs	r2, #0
 800b97c:	2300      	movs	r3, #0
 800b97e:	f7f5 f8cb 	bl	8000b18 <__aeabi_dcmpgt>
 800b982:	b148      	cbz	r0, 800b998 <floor+0x48>
 800b984:	2c00      	cmp	r4, #0
 800b986:	da59      	bge.n	800ba3c <floor+0xec>
 800b988:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b98c:	4a30      	ldr	r2, [pc, #192]	; (800ba50 <floor+0x100>)
 800b98e:	432b      	orrs	r3, r5
 800b990:	2500      	movs	r5, #0
 800b992:	42ab      	cmp	r3, r5
 800b994:	bf18      	it	ne
 800b996:	4614      	movne	r4, r2
 800b998:	4621      	mov	r1, r4
 800b99a:	4628      	mov	r0, r5
 800b99c:	e025      	b.n	800b9ea <floor+0x9a>
 800b99e:	4f2d      	ldr	r7, [pc, #180]	; (800ba54 <floor+0x104>)
 800b9a0:	4137      	asrs	r7, r6
 800b9a2:	ea01 0307 	and.w	r3, r1, r7
 800b9a6:	4303      	orrs	r3, r0
 800b9a8:	d01f      	beq.n	800b9ea <floor+0x9a>
 800b9aa:	a327      	add	r3, pc, #156	; (adr r3, 800ba48 <floor+0xf8>)
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	f7f4 fc6c 	bl	800028c <__adddf3>
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f7f5 f8ae 	bl	8000b18 <__aeabi_dcmpgt>
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	d0eb      	beq.n	800b998 <floor+0x48>
 800b9c0:	2c00      	cmp	r4, #0
 800b9c2:	bfbe      	ittt	lt
 800b9c4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b9c8:	fa43 f606 	asrlt.w	r6, r3, r6
 800b9cc:	19a4      	addlt	r4, r4, r6
 800b9ce:	ea24 0407 	bic.w	r4, r4, r7
 800b9d2:	2500      	movs	r5, #0
 800b9d4:	e7e0      	b.n	800b998 <floor+0x48>
 800b9d6:	2e33      	cmp	r6, #51	; 0x33
 800b9d8:	dd0b      	ble.n	800b9f2 <floor+0xa2>
 800b9da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b9de:	d104      	bne.n	800b9ea <floor+0x9a>
 800b9e0:	ee10 2a10 	vmov	r2, s0
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	f7f4 fc51 	bl	800028c <__adddf3>
 800b9ea:	ec41 0b10 	vmov	d0, r0, r1
 800b9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b9f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9fa:	fa23 f707 	lsr.w	r7, r3, r7
 800b9fe:	4207      	tst	r7, r0
 800ba00:	d0f3      	beq.n	800b9ea <floor+0x9a>
 800ba02:	a311      	add	r3, pc, #68	; (adr r3, 800ba48 <floor+0xf8>)
 800ba04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba08:	f7f4 fc40 	bl	800028c <__adddf3>
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	2300      	movs	r3, #0
 800ba10:	f7f5 f882 	bl	8000b18 <__aeabi_dcmpgt>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d0bf      	beq.n	800b998 <floor+0x48>
 800ba18:	2c00      	cmp	r4, #0
 800ba1a:	da02      	bge.n	800ba22 <floor+0xd2>
 800ba1c:	2e14      	cmp	r6, #20
 800ba1e:	d103      	bne.n	800ba28 <floor+0xd8>
 800ba20:	3401      	adds	r4, #1
 800ba22:	ea25 0507 	bic.w	r5, r5, r7
 800ba26:	e7b7      	b.n	800b998 <floor+0x48>
 800ba28:	2301      	movs	r3, #1
 800ba2a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ba2e:	fa03 f606 	lsl.w	r6, r3, r6
 800ba32:	4435      	add	r5, r6
 800ba34:	4545      	cmp	r5, r8
 800ba36:	bf38      	it	cc
 800ba38:	18e4      	addcc	r4, r4, r3
 800ba3a:	e7f2      	b.n	800ba22 <floor+0xd2>
 800ba3c:	2500      	movs	r5, #0
 800ba3e:	462c      	mov	r4, r5
 800ba40:	e7aa      	b.n	800b998 <floor+0x48>
 800ba42:	bf00      	nop
 800ba44:	f3af 8000 	nop.w
 800ba48:	8800759c 	.word	0x8800759c
 800ba4c:	7e37e43c 	.word	0x7e37e43c
 800ba50:	bff00000 	.word	0xbff00000
 800ba54:	000fffff 	.word	0x000fffff

0800ba58 <scalbn>:
 800ba58:	b570      	push	{r4, r5, r6, lr}
 800ba5a:	ec55 4b10 	vmov	r4, r5, d0
 800ba5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ba62:	4606      	mov	r6, r0
 800ba64:	462b      	mov	r3, r5
 800ba66:	b9aa      	cbnz	r2, 800ba94 <scalbn+0x3c>
 800ba68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba6c:	4323      	orrs	r3, r4
 800ba6e:	d03b      	beq.n	800bae8 <scalbn+0x90>
 800ba70:	4b31      	ldr	r3, [pc, #196]	; (800bb38 <scalbn+0xe0>)
 800ba72:	4629      	mov	r1, r5
 800ba74:	2200      	movs	r2, #0
 800ba76:	ee10 0a10 	vmov	r0, s0
 800ba7a:	f7f4 fdbd 	bl	80005f8 <__aeabi_dmul>
 800ba7e:	4b2f      	ldr	r3, [pc, #188]	; (800bb3c <scalbn+0xe4>)
 800ba80:	429e      	cmp	r6, r3
 800ba82:	4604      	mov	r4, r0
 800ba84:	460d      	mov	r5, r1
 800ba86:	da12      	bge.n	800baae <scalbn+0x56>
 800ba88:	a327      	add	r3, pc, #156	; (adr r3, 800bb28 <scalbn+0xd0>)
 800ba8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8e:	f7f4 fdb3 	bl	80005f8 <__aeabi_dmul>
 800ba92:	e009      	b.n	800baa8 <scalbn+0x50>
 800ba94:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ba98:	428a      	cmp	r2, r1
 800ba9a:	d10c      	bne.n	800bab6 <scalbn+0x5e>
 800ba9c:	ee10 2a10 	vmov	r2, s0
 800baa0:	4620      	mov	r0, r4
 800baa2:	4629      	mov	r1, r5
 800baa4:	f7f4 fbf2 	bl	800028c <__adddf3>
 800baa8:	4604      	mov	r4, r0
 800baaa:	460d      	mov	r5, r1
 800baac:	e01c      	b.n	800bae8 <scalbn+0x90>
 800baae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bab2:	460b      	mov	r3, r1
 800bab4:	3a36      	subs	r2, #54	; 0x36
 800bab6:	4432      	add	r2, r6
 800bab8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800babc:	428a      	cmp	r2, r1
 800babe:	dd0b      	ble.n	800bad8 <scalbn+0x80>
 800bac0:	ec45 4b11 	vmov	d1, r4, r5
 800bac4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800bb30 <scalbn+0xd8>
 800bac8:	f000 f83c 	bl	800bb44 <copysign>
 800bacc:	a318      	add	r3, pc, #96	; (adr r3, 800bb30 <scalbn+0xd8>)
 800bace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad2:	ec51 0b10 	vmov	r0, r1, d0
 800bad6:	e7da      	b.n	800ba8e <scalbn+0x36>
 800bad8:	2a00      	cmp	r2, #0
 800bada:	dd08      	ble.n	800baee <scalbn+0x96>
 800badc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bae0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bae4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bae8:	ec45 4b10 	vmov	d0, r4, r5
 800baec:	bd70      	pop	{r4, r5, r6, pc}
 800baee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800baf2:	da0d      	bge.n	800bb10 <scalbn+0xb8>
 800baf4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800baf8:	429e      	cmp	r6, r3
 800bafa:	ec45 4b11 	vmov	d1, r4, r5
 800bafe:	dce1      	bgt.n	800bac4 <scalbn+0x6c>
 800bb00:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800bb28 <scalbn+0xd0>
 800bb04:	f000 f81e 	bl	800bb44 <copysign>
 800bb08:	a307      	add	r3, pc, #28	; (adr r3, 800bb28 <scalbn+0xd0>)
 800bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0e:	e7e0      	b.n	800bad2 <scalbn+0x7a>
 800bb10:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb14:	3236      	adds	r2, #54	; 0x36
 800bb16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb1e:	4620      	mov	r0, r4
 800bb20:	4629      	mov	r1, r5
 800bb22:	2200      	movs	r2, #0
 800bb24:	4b06      	ldr	r3, [pc, #24]	; (800bb40 <scalbn+0xe8>)
 800bb26:	e7b2      	b.n	800ba8e <scalbn+0x36>
 800bb28:	c2f8f359 	.word	0xc2f8f359
 800bb2c:	01a56e1f 	.word	0x01a56e1f
 800bb30:	8800759c 	.word	0x8800759c
 800bb34:	7e37e43c 	.word	0x7e37e43c
 800bb38:	43500000 	.word	0x43500000
 800bb3c:	ffff3cb0 	.word	0xffff3cb0
 800bb40:	3c900000 	.word	0x3c900000

0800bb44 <copysign>:
 800bb44:	ec51 0b10 	vmov	r0, r1, d0
 800bb48:	ee11 0a90 	vmov	r0, s3
 800bb4c:	ee10 2a10 	vmov	r2, s0
 800bb50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bb54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800bb58:	ea41 0300 	orr.w	r3, r1, r0
 800bb5c:	ec43 2b10 	vmov	d0, r2, r3
 800bb60:	4770      	bx	lr
	...

0800bb64 <_init>:
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb66:	bf00      	nop
 800bb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb6a:	bc08      	pop	{r3}
 800bb6c:	469e      	mov	lr, r3
 800bb6e:	4770      	bx	lr

0800bb70 <_fini>:
 800bb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb72:	bf00      	nop
 800bb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb76:	bc08      	pop	{r3}
 800bb78:	469e      	mov	lr, r3
 800bb7a:	4770      	bx	lr
