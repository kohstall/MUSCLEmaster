
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800ea90  0800ea90  0001ea90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eea0  0800eea0  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800eea0  0800eea0  0001eea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eea8  0800eea8  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eea8  0800eea8  0001eea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eeac  0800eeac  0001eeac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800eeb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001374  200000ac  0800ef5c  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001420  0800ef5c  00021420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0c0  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e85  00000000  00000000  0003a19c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001898  00000000  00000000  0003d028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001768  00000000  00000000  0003e8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000235f5  00000000  00000000  00040028  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012655  00000000  00000000  0006361d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d37fc  00000000  00000000  00075c72  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014946e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007240  00000000  00000000  001494ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ea74 	.word	0x0800ea74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	0800ea74 	.word	0x0800ea74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 b972 	b.w	8000f58 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9e08      	ldr	r6, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	4688      	mov	r8, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14b      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4615      	mov	r5, r2
 8000c9e:	d967      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0720 	rsb	r7, r2, #32
 8000caa:	fa01 f302 	lsl.w	r3, r1, r2
 8000cae:	fa20 f707 	lsr.w	r7, r0, r7
 8000cb2:	4095      	lsls	r5, r2
 8000cb4:	ea47 0803 	orr.w	r8, r7, r3
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc4:	fa1f fc85 	uxth.w	ip, r5
 8000cc8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ccc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cd0:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18eb      	adds	r3, r5, r3
 8000cda:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cde:	f080 811b 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8118 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000ce8:	3f02      	subs	r7, #2
 8000cea:	442b      	add	r3, r5
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d00:	45a4      	cmp	ip, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x290>
 8000d0e:	45a4      	cmp	ip, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x290>
 8000d14:	3802      	subs	r0, #2
 8000d16:	442c      	add	r4, r5
 8000d18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d1c:	eba4 040c 	sub.w	r4, r4, ip
 8000d20:	2700      	movs	r7, #0
 8000d22:	b11e      	cbz	r6, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xbe>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	f000 80eb 	beq.w	8000f12 <__udivmoddi4+0x286>
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d42:	4638      	mov	r0, r7
 8000d44:	4639      	mov	r1, r7
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f783 	clz	r7, r3
 8000d4e:	2f00      	cmp	r7, #0
 8000d50:	d147      	bne.n	8000de2 <__udivmoddi4+0x156>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd0>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80fa 	bhi.w	8000f50 <__udivmoddi4+0x2c4>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	4698      	mov	r8, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000d6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xe8>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 808f 	bne.w	8000e9c <__udivmoddi4+0x210>
 8000d7e:	1b49      	subs	r1, r1, r5
 8000d80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d84:	fa1f f885 	uxth.w	r8, r5
 8000d88:	2701      	movs	r7, #1
 8000d8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8e:	0c23      	lsrs	r3, r4, #16
 8000d90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb08 f10c 	mul.w	r1, r8, ip
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x124>
 8000da0:	18eb      	adds	r3, r5, r3
 8000da2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x122>
 8000da8:	4299      	cmp	r1, r3
 8000daa:	f200 80cd 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000dae:	4684      	mov	ip, r0
 8000db0:	1a59      	subs	r1, r3, r1
 8000db2:	b2a3      	uxth	r3, r4
 8000db4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dc0:	fb08 f800 	mul.w	r8, r8, r0
 8000dc4:	45a0      	cmp	r8, r4
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0x14c>
 8000dc8:	192c      	adds	r4, r5, r4
 8000dca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x14a>
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	f200 80b6 	bhi.w	8000f42 <__udivmoddi4+0x2b6>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000de0:	e79f      	b.n	8000d22 <__udivmoddi4+0x96>
 8000de2:	f1c7 0c20 	rsb	ip, r7, #32
 8000de6:	40bb      	lsls	r3, r7
 8000de8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000df0:	fa01 f407 	lsl.w	r4, r1, r7
 8000df4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e00:	4325      	orrs	r5, r4
 8000e02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e06:	0c2c      	lsrs	r4, r5, #16
 8000e08:	fb08 3319 	mls	r3, r8, r9, r3
 8000e0c:	fa1f fa8e 	uxth.w	sl, lr
 8000e10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e14:	fb09 f40a 	mul.w	r4, r9, sl
 8000e18:	429c      	cmp	r4, r3
 8000e1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x1b0>
 8000e24:	eb1e 0303 	adds.w	r3, lr, r3
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	f080 8087 	bcs.w	8000f3e <__udivmoddi4+0x2b2>
 8000e30:	429c      	cmp	r4, r3
 8000e32:	f240 8084 	bls.w	8000f3e <__udivmoddi4+0x2b2>
 8000e36:	f1a9 0902 	sub.w	r9, r9, #2
 8000e3a:	4473      	add	r3, lr
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	b2ad      	uxth	r5, r5
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e50:	45a2      	cmp	sl, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1da>
 8000e54:	eb1e 0404 	adds.w	r4, lr, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e5c:	d26b      	bcs.n	8000f36 <__udivmoddi4+0x2aa>
 8000e5e:	45a2      	cmp	sl, r4
 8000e60:	d969      	bls.n	8000f36 <__udivmoddi4+0x2aa>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4474      	add	r4, lr
 8000e66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	eba4 040a 	sub.w	r4, r4, sl
 8000e72:	454c      	cmp	r4, r9
 8000e74:	46c2      	mov	sl, r8
 8000e76:	464b      	mov	r3, r9
 8000e78:	d354      	bcc.n	8000f24 <__udivmoddi4+0x298>
 8000e7a:	d051      	beq.n	8000f20 <__udivmoddi4+0x294>
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d069      	beq.n	8000f54 <__udivmoddi4+0x2c8>
 8000e80:	ebb1 050a 	subs.w	r5, r1, sl
 8000e84:	eb64 0403 	sbc.w	r4, r4, r3
 8000e88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e8c:	40fd      	lsrs	r5, r7
 8000e8e:	40fc      	lsrs	r4, r7
 8000e90:	ea4c 0505 	orr.w	r5, ip, r5
 8000e94:	e9c6 5400 	strd	r5, r4, [r6]
 8000e98:	2700      	movs	r7, #0
 8000e9a:	e747      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea4:	4095      	lsls	r5, r2
 8000ea6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8000eae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eb2:	4338      	orrs	r0, r7
 8000eb4:	0c01      	lsrs	r1, r0, #16
 8000eb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eba:	fa1f f885 	uxth.w	r8, r5
 8000ebe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ec2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec6:	fb07 f308 	mul.w	r3, r7, r8
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x256>
 8000ed2:	1869      	adds	r1, r5, r1
 8000ed4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ed8:	d22f      	bcs.n	8000f3a <__udivmoddi4+0x2ae>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d92d      	bls.n	8000f3a <__udivmoddi4+0x2ae>
 8000ede:	3f02      	subs	r7, #2
 8000ee0:	4429      	add	r1, r5
 8000ee2:	1acb      	subs	r3, r1, r3
 8000ee4:	b281      	uxth	r1, r0
 8000ee6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb00 f308 	mul.w	r3, r0, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x27e>
 8000efa:	1869      	adds	r1, r5, r1
 8000efc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f00:	d217      	bcs.n	8000f32 <__udivmoddi4+0x2a6>
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d915      	bls.n	8000f32 <__udivmoddi4+0x2a6>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4429      	add	r1, r5
 8000f0a:	1ac9      	subs	r1, r1, r3
 8000f0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f10:	e73b      	b.n	8000d8a <__udivmoddi4+0xfe>
 8000f12:	4637      	mov	r7, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e709      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f18:	4607      	mov	r7, r0
 8000f1a:	e6e7      	b.n	8000cec <__udivmoddi4+0x60>
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f20:	4541      	cmp	r1, r8
 8000f22:	d2ab      	bcs.n	8000e7c <__udivmoddi4+0x1f0>
 8000f24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f28:	eb69 020e 	sbc.w	r2, r9, lr
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	4613      	mov	r3, r2
 8000f30:	e7a4      	b.n	8000e7c <__udivmoddi4+0x1f0>
 8000f32:	4660      	mov	r0, ip
 8000f34:	e7e9      	b.n	8000f0a <__udivmoddi4+0x27e>
 8000f36:	4618      	mov	r0, r3
 8000f38:	e795      	b.n	8000e66 <__udivmoddi4+0x1da>
 8000f3a:	4667      	mov	r7, ip
 8000f3c:	e7d1      	b.n	8000ee2 <__udivmoddi4+0x256>
 8000f3e:	4681      	mov	r9, r0
 8000f40:	e77c      	b.n	8000e3c <__udivmoddi4+0x1b0>
 8000f42:	3802      	subs	r0, #2
 8000f44:	442c      	add	r4, r5
 8000f46:	e747      	b.n	8000dd8 <__udivmoddi4+0x14c>
 8000f48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f4c:	442b      	add	r3, r5
 8000f4e:	e72f      	b.n	8000db0 <__udivmoddi4+0x124>
 8000f50:	4638      	mov	r0, r7
 8000f52:	e708      	b.n	8000d66 <__udivmoddi4+0xda>
 8000f54:	4637      	mov	r7, r6
 8000f56:	e6e9      	b.n	8000d2c <__udivmoddi4+0xa0>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <HAL_Init+0x40>)
 8000f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_Init+0x40>)
 8000f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_Init+0x40>)
 8000f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f001 ffe5 	bl	8002f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f00b f95a 	bl	800c248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023c00 	.word	0x40023c00

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fffd 	bl	8002fbe <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fdc:	f001 ffc5 	bl	8002f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000044 	.word	0x20000044
 8000ff8:	20000004 	.word	0x20000004
 8000ffc:	20000000 	.word	0x20000000

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000004 	.word	0x20000004
 8001024:	20000128 	.word	0x20000128

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000128 	.word	0x20000128

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_Delay+0x40>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffde 	bl	8001028 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000004 	.word	0x20000004

08001084 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e033      	b.n	8001102 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d109      	bne.n	80010b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f00b f8f8 	bl	800c298 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d118      	bne.n	80010f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010ca:	f023 0302 	bic.w	r3, r3, #2
 80010ce:	f043 0202 	orr.w	r2, r3, #2
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fb80 	bl	80017dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f023 0303 	bic.w	r3, r3, #3
 80010ea:	f043 0201 	orr.w	r2, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40
 80010f2:	e001      	b.n	80010f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b02      	cmp	r3, #2
 8001126:	bf0c      	ite	eq
 8001128:	2301      	moveq	r3, #1
 800112a:	2300      	movne	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0320 	and.w	r3, r3, #32
 800113a:	2b20      	cmp	r3, #32
 800113c:	bf0c      	ite	eq
 800113e:	2301      	moveq	r3, #1
 8001140:	2300      	movne	r3, #0
 8001142:	b2db      	uxtb	r3, r3
 8001144:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d049      	beq.n	80011e0 <HAL_ADC_IRQHandler+0xd6>
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d046      	beq.n	80011e0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	2b00      	cmp	r3, #0
 800115c:	d105      	bne.n	800116a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d12b      	bne.n	80011d0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800117c:	2b00      	cmp	r3, #0
 800117e:	d127      	bne.n	80011d0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001186:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001198:	2b00      	cmp	r3, #0
 800119a:	d119      	bne.n	80011d0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0220 	bic.w	r2, r2, #32
 80011aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f043 0201 	orr.w	r2, r3, #1
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f00a f987 	bl	800b4e4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f06f 0212 	mvn.w	r2, #18
 80011de:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf0c      	ite	eq
 80011ee:	2301      	moveq	r3, #1
 80011f0:	2300      	movne	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001200:	2b80      	cmp	r3, #128	; 0x80
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
 800120a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d057      	beq.n	80012c2 <HAL_ADC_IRQHandler+0x1b8>
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d054      	beq.n	80012c2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	2b00      	cmp	r3, #0
 8001222:	d105      	bne.n	8001230 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d139      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001244:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001256:	2b00      	cmp	r3, #0
 8001258:	d12b      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001264:	2b00      	cmp	r3, #0
 8001266:	d124      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001272:	2b00      	cmp	r3, #0
 8001274:	d11d      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800127a:	2b00      	cmp	r3, #0
 800127c:	d119      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800128c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d105      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 fd7a 	bl	8001dac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f06f 020c 	mvn.w	r2, #12
 80012c0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e2:	2b40      	cmp	r3, #64	; 0x40
 80012e4:	bf0c      	ite	eq
 80012e6:	2301      	moveq	r3, #1
 80012e8:	2300      	movne	r3, #0
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d017      	beq.n	8001324 <HAL_ADC_IRQHandler+0x21a>
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d014      	beq.n	8001324 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	d10d      	bne.n	8001324 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f92b 	bl	8001570 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f06f 0201 	mvn.w	r2, #1
 8001322:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0320 	and.w	r3, r3, #32
 800132e:	2b20      	cmp	r3, #32
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001348:	bf0c      	ite	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	2300      	movne	r3, #0
 800134e:	b2db      	uxtb	r3, r3
 8001350:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d015      	beq.n	8001384 <HAL_ADC_IRQHandler+0x27a>
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d012      	beq.n	8001384 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f043 0202 	orr.w	r2, r3, #2
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f06f 0220 	mvn.w	r2, #32
 8001372:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f905 	bl	8001584 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f06f 0220 	mvn.w	r2, #32
 8001382:	601a      	str	r2, [r3, #0]
  }
}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <HAL_ADC_Start_DMA+0x1e>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e0cc      	b.n	8001544 <HAL_ADC_Start_DMA+0x1b8>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d018      	beq.n	80013f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0201 	orr.w	r2, r2, #1
 80013ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013d0:	4b5e      	ldr	r3, [pc, #376]	; (800154c <HAL_ADC_Start_DMA+0x1c0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a5e      	ldr	r2, [pc, #376]	; (8001550 <HAL_ADC_Start_DMA+0x1c4>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	0c9a      	lsrs	r2, r3, #18
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80013e4:	e002      	b.n	80013ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f9      	bne.n	80013e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	f040 80a0 	bne.w	8001542 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800140a:	f023 0301 	bic.w	r3, r3, #1
 800140e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001420:	2b00      	cmp	r3, #0
 8001422:	d007      	beq.n	8001434 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800142c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800143c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001440:	d106      	bne.n	8001450 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f023 0206 	bic.w	r2, r3, #6
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	645a      	str	r2, [r3, #68]	; 0x44
 800144e:	e002      	b.n	8001456 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_ADC_Start_DMA+0x1c8>)
 8001460:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001466:	4a3c      	ldr	r2, [pc, #240]	; (8001558 <HAL_ADC_Start_DMA+0x1cc>)
 8001468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146e:	4a3b      	ldr	r2, [pc, #236]	; (800155c <HAL_ADC_Start_DMA+0x1d0>)
 8001470:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001476:	4a3a      	ldr	r2, [pc, #232]	; (8001560 <HAL_ADC_Start_DMA+0x1d4>)
 8001478:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001482:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001492:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	334c      	adds	r3, #76	; 0x4c
 80014ae:	4619      	mov	r1, r3
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f001 fe3e 	bl	8003134 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d12a      	bne.n	800151a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a26      	ldr	r2, [pc, #152]	; (8001564 <HAL_ADC_Start_DMA+0x1d8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d015      	beq.n	80014fa <HAL_ADC_Start_DMA+0x16e>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a25      	ldr	r2, [pc, #148]	; (8001568 <HAL_ADC_Start_DMA+0x1dc>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d105      	bne.n	80014e4 <HAL_ADC_Start_DMA+0x158>
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_ADC_Start_DMA+0x1c8>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 031f 	and.w	r3, r3, #31
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00a      	beq.n	80014fa <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a20      	ldr	r2, [pc, #128]	; (800156c <HAL_ADC_Start_DMA+0x1e0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d129      	bne.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_ADC_Start_DMA+0x1c8>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 031f 	and.w	r3, r3, #31
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	d823      	bhi.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d11c      	bne.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	e013      	b.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a11      	ldr	r2, [pc, #68]	; (8001564 <HAL_ADC_Start_DMA+0x1d8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d10e      	bne.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d107      	bne.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001540:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000044 	.word	0x20000044
 8001550:	431bde83 	.word	0x431bde83
 8001554:	40012300 	.word	0x40012300
 8001558:	080019d5 	.word	0x080019d5
 800155c:	08001a8f 	.word	0x08001a8f
 8001560:	08001aab 	.word	0x08001aab
 8001564:	40012000 	.word	0x40012000
 8001568:	40012100 	.word	0x40012100
 800156c:	40012200 	.word	0x40012200

08001570 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x1c>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e105      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x228>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b09      	cmp	r3, #9
 80015c2:	d925      	bls.n	8001610 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68d9      	ldr	r1, [r3, #12]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	3b1e      	subs	r3, #30
 80015da:	2207      	movs	r2, #7
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43da      	mvns	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	400a      	ands	r2, r1
 80015e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68d9      	ldr	r1, [r3, #12]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	4603      	mov	r3, r0
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4403      	add	r3, r0
 8001602:	3b1e      	subs	r3, #30
 8001604:	409a      	lsls	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	e022      	b.n	8001656 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6919      	ldr	r1, [r3, #16]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	2207      	movs	r2, #7
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	400a      	ands	r2, r1
 8001632:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6919      	ldr	r1, [r3, #16]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	b29b      	uxth	r3, r3
 8001644:	4618      	mov	r0, r3
 8001646:	4603      	mov	r3, r0
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4403      	add	r3, r0
 800164c:	409a      	lsls	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b06      	cmp	r3, #6
 800165c:	d824      	bhi.n	80016a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	3b05      	subs	r3, #5
 8001670:	221f      	movs	r2, #31
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	400a      	ands	r2, r1
 800167e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	b29b      	uxth	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	3b05      	subs	r3, #5
 800169a:	fa00 f203 	lsl.w	r2, r0, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	635a      	str	r2, [r3, #52]	; 0x34
 80016a6:	e04c      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b0c      	cmp	r3, #12
 80016ae:	d824      	bhi.n	80016fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	3b23      	subs	r3, #35	; 0x23
 80016c2:	221f      	movs	r2, #31
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43da      	mvns	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	400a      	ands	r2, r1
 80016d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	3b23      	subs	r3, #35	; 0x23
 80016ec:	fa00 f203 	lsl.w	r2, r0, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	631a      	str	r2, [r3, #48]	; 0x30
 80016f8:	e023      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b41      	subs	r3, #65	; 0x41
 800170c:	221f      	movs	r2, #31
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	400a      	ands	r2, r1
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	3b41      	subs	r3, #65	; 0x41
 8001736:	fa00 f203 	lsl.w	r2, r0, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_ADC_ConfigChannel+0x234>)
 8001744:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a21      	ldr	r2, [pc, #132]	; (80017d0 <HAL_ADC_ConfigChannel+0x238>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d109      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x1cc>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b12      	cmp	r3, #18
 8001756:	d105      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <HAL_ADC_ConfigChannel+0x238>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d123      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x21e>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b10      	cmp	r3, #16
 8001774:	d003      	beq.n	800177e <HAL_ADC_ConfigChannel+0x1e6>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b11      	cmp	r3, #17
 800177c:	d11b      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b10      	cmp	r3, #16
 8001790:	d111      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <HAL_ADC_ConfigChannel+0x240>)
 8001798:	fba2 2303 	umull	r2, r3, r2, r3
 800179c:	0c9a      	lsrs	r2, r3, #18
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017a8:	e002      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f9      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	40012000 	.word	0x40012000
 80017d4:	20000044 	.word	0x20000044
 80017d8:	431bde83 	.word	0x431bde83

080017dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e4:	4b79      	ldr	r3, [pc, #484]	; (80019cc <ADC_Init+0x1f0>)
 80017e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	431a      	orrs	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001810:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6859      	ldr	r1, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	021a      	lsls	r2, r3, #8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001834:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001856:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6899      	ldr	r1, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <ADC_Init+0x1f4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d022      	beq.n	80018ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001882:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6899      	ldr	r1, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6899      	ldr	r1, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	e00f      	b.n	80018da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0202 	bic.w	r2, r2, #2
 80018e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6899      	ldr	r1, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7e1b      	ldrb	r3, [r3, #24]
 80018f4:	005a      	lsls	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d01b      	beq.n	8001940 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001916:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001926:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6859      	ldr	r1, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	3b01      	subs	r3, #1
 8001934:	035a      	lsls	r2, r3, #13
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	e007      	b.n	8001950 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800194e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	3b01      	subs	r3, #1
 800196c:	051a      	lsls	r2, r3, #20
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6899      	ldr	r1, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001992:	025a      	lsls	r2, r3, #9
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6899      	ldr	r1, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	029a      	lsls	r2, r3, #10
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	609a      	str	r2, [r3, #8]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	40012300 	.word	0x40012300
 80019d0:	0f000001 	.word	0x0f000001

080019d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d13c      	bne.n	8001a68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d12b      	bne.n	8001a60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d127      	bne.n	8001a60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d119      	bne.n	8001a60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0220 	bic.w	r2, r2, #32
 8001a3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f009 fd3f 	bl	800b4e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a66:	e00e      	b.n	8001a86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fd85 	bl	8001584 <HAL_ADC_ErrorCallback>
}
 8001a7a:	e004      	b.n	8001a86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	4798      	blx	r3
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f009 fd11 	bl	800b4c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2240      	movs	r2, #64	; 0x40
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f043 0204 	orr.w	r2, r3, #4
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f7ff fd5a 	bl	8001584 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_ADCEx_InjectedStart+0x22>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e09d      	b.n	8001c36 <HAL_ADCEx_InjectedStart+0x15e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d018      	beq.n	8001b42 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b20:	4b48      	ldr	r3, [pc, #288]	; (8001c44 <HAL_ADCEx_InjectedStart+0x16c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a48      	ldr	r2, [pc, #288]	; (8001c48 <HAL_ADCEx_InjectedStart+0x170>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0c9a      	lsrs	r2, r3, #18
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b34:	e002      	b.n	8001b3c <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f9      	bne.n	8001b36 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d171      	bne.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f06f 0204 	mvn.w	r2, #4
 8001b86:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <HAL_ADCEx_InjectedStart+0x174>)
 8001b8a:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d124      	bne.n	8001be2 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bf0c      	ite	eq
 8001ba6:	2301      	moveq	r3, #1
 8001ba8:	2300      	movne	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d034      	beq.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d031      	beq.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	e028      	b.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf0c      	ite	eq
 8001c06:	2301      	moveq	r3, #1
 8001c08:	2300      	movne	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <HAL_ADCEx_InjectedStart+0x178>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d10d      	bne.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00a      	beq.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d007      	beq.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c32:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000044 	.word	0x20000044
 8001c48:	431bde83 	.word	0x431bde83
 8001c4c:	40012300 	.word	0x40012300
 8001c50:	40012000 	.word	0x40012000

08001c54 <HAL_ADCEx_InjectedPollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c62:	f7ff f9e1 	bl	8001028 <HAL_GetTick>
 8001c66:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC)))
 8001c68:	e017      	b.n	8001c9a <HAL_ADCEx_InjectedPollForConversion+0x46>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c70:	d013      	beq.n	8001c9a <HAL_ADCEx_InjectedPollForConversion+0x46>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d007      	beq.n	8001c88 <HAL_ADCEx_InjectedPollForConversion+0x34>
 8001c78:	f7ff f9d6 	bl	8001028 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d208      	bcs.n	8001c9a <HAL_ADCEx_InjectedPollForConversion+0x46>
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	641a      	str	r2, [r3, #64]	; 0x40
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e04b      	b.n	8001d32 <HAL_ADCEx_InjectedPollForConversion+0xde>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC)))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d1e0      	bne.n	8001c6a <HAL_ADCEx_InjectedPollForConversion+0x16>
      }
    }
  }
  
  /* Clear injected group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 020c 	mvn.w	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d131      	bne.n	8001d30 <HAL_ADCEx_InjectedPollForConversion+0xdc>
     (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <HAL_ADCEx_InjectedPollForConversion+0x94>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d123      	bne.n	8001d30 <HAL_ADCEx_InjectedPollForConversion+0xdc>
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d11c      	bne.n	8001d30 <HAL_ADCEx_InjectedPollForConversion+0xdc>
      (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d115      	bne.n	8001d30 <HAL_ADCEx_InjectedPollForConversion+0xdc>
      (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	7e1b      	ldrb	r3, [r3, #24]
      (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d111      	bne.n	8001d30 <HAL_ADCEx_InjectedPollForConversion+0xdc>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d105      	bne.n	8001d30 <HAL_ADCEx_InjectedPollForConversion+0xdc>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f043 0201 	orr.w	r2, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}      
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f06f 0204 	mvn.w	r2, #4
 8001d52:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d81f      	bhi.n	8001d9c <HAL_ADCEx_InjectedGetValue+0x60>
 8001d5c:	a201      	add	r2, pc, #4	; (adr r2, 8001d64 <HAL_ADCEx_InjectedGetValue+0x28>)
 8001d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d62:	bf00      	nop
 8001d64:	08001d93 	.word	0x08001d93
 8001d68:	08001d89 	.word	0x08001d89
 8001d6c:	08001d7f 	.word	0x08001d7f
 8001d70:	08001d75 	.word	0x08001d75
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d7a:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001d7c:	e00f      	b.n	8001d9e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d84:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001d86:	e00a      	b.n	8001d9e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001d90:	e005      	b.n	8001d9e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d98:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001d9a:	e000      	b.n	8001d9e <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8001d9c:	bf00      	nop
  }
  return tmp;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e17a      	b.n	80020ce <HAL_ADCEx_InjectedConfigChannel+0x30e>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b09      	cmp	r3, #9
 8001de6:	d925      	bls.n	8001e34 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68d9      	ldr	r1, [r3, #12]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3b1e      	subs	r3, #30
 8001dfe:	2207      	movs	r2, #7
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43da      	mvns	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68d9      	ldr	r1, [r3, #12]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	4603      	mov	r3, r0
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4403      	add	r3, r0
 8001e26:	3b1e      	subs	r3, #30
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	e022      	b.n	8001e7a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6919      	ldr	r1, [r3, #16]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	2207      	movs	r2, #7
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	400a      	ands	r2, r1
 8001e56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6919      	ldr	r1, [r3, #16]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4618      	mov	r0, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4403      	add	r3, r0
 8001e70:	409a      	lsls	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e88:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	051a      	lsls	r2, r3, #20
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	3303      	adds	r3, #3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	221f      	movs	r2, #31
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43da      	mvns	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	400a      	ands	r2, r1
 8001ed0:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	3303      	adds	r3, #3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	fa00 f203 	lsl.w	r2, r0, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a73      	ldr	r2, [pc, #460]	; (80020dc <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d022      	beq.n	8001f58 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001f20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6899      	ldr	r1, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	699a      	ldr	r2, [r3, #24]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001f42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6899      	ldr	r1, [r3, #8]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	69da      	ldr	r2, [r3, #28]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	e00f      	b.n	8001f78 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001f66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001f76:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	7d5b      	ldrb	r3, [r3, #21]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	e007      	b.n	8001fa2 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa0:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	7d1b      	ldrb	r3, [r3, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d008      	beq.n	8001fbc <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	e007      	b.n	8001fcc <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fca:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d017      	beq.n	8002004 <HAL_ADCEx_InjectedConfigChannel+0x244>
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d029      	beq.n	800202c <HAL_ADCEx_InjectedConfigChannel+0x26c>
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d13b      	bne.n	8002054 <HAL_ADCEx_InjectedConfigChannel+0x294>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001fea:	f023 030f 	bic.w	r3, r3, #15
 8001fee:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6959      	ldr	r1, [r3, #20]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	615a      	str	r2, [r3, #20]
      break;
 8002002:	e03b      	b.n	800207c <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002012:	f023 030f 	bic.w	r3, r3, #15
 8002016:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6999      	ldr	r1, [r3, #24]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	619a      	str	r2, [r3, #24]
      break;
 800202a:	e027      	b.n	800207c <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800203a:	f023 030f 	bic.w	r3, r3, #15
 800203e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	69d9      	ldr	r1, [r3, #28]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	61da      	str	r2, [r3, #28]
      break;
 8002052:	e013      	b.n	800207c <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002062:	f023 030f 	bic.w	r3, r3, #15
 8002066:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6a19      	ldr	r1, [r3, #32]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	621a      	str	r2, [r3, #32]
      break;
 800207a:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 800207e:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d109      	bne.n	800209e <HAL_ADCEx_InjectedConfigChannel+0x2de>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b12      	cmp	r3, #18
 8002090:	d105      	bne.n	800209e <HAL_ADCEx_InjectedConfigChannel+0x2de>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d10d      	bne.n	80020c4 <HAL_ADCEx_InjectedConfigChannel+0x304>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	d003      	beq.n	80020b8 <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b11      	cmp	r3, #17
 80020b6:	d105      	bne.n	80020c4 <HAL_ADCEx_InjectedConfigChannel+0x304>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	000f0001 	.word	0x000f0001
 80020e0:	40012300 	.word	0x40012300
 80020e4:	40012000 	.word	0x40012000

080020e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0ed      	b.n	80022d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f00a fab0 	bl	800c66c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0202 	bic.w	r2, r2, #2
 800211a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800211c:	f7fe ff84 	bl	8001028 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002122:	e012      	b.n	800214a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002124:	f7fe ff80 	bl	8001028 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b0a      	cmp	r3, #10
 8002130:	d90b      	bls.n	800214a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2205      	movs	r2, #5
 8002142:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e0c5      	b.n	80022d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1e5      	bne.n	8002124 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002168:	f7fe ff5e 	bl	8001028 <HAL_GetTick>
 800216c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800216e:	e012      	b.n	8002196 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002170:	f7fe ff5a 	bl	8001028 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b0a      	cmp	r3, #10
 800217c:	d90b      	bls.n	8002196 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2205      	movs	r2, #5
 800218e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e09f      	b.n	80022d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0e5      	beq.n	8002170 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7e1b      	ldrb	r3, [r3, #24]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d108      	bne.n	80021be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e007      	b.n	80021ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7e5b      	ldrb	r3, [r3, #25]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d108      	bne.n	80021e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e007      	b.n	80021f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7e9b      	ldrb	r3, [r3, #26]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d108      	bne.n	8002212 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0220 	orr.w	r2, r2, #32
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e007      	b.n	8002222 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0220 	bic.w	r2, r2, #32
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7edb      	ldrb	r3, [r3, #27]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d108      	bne.n	800223c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0210 	bic.w	r2, r2, #16
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e007      	b.n	800224c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0210 	orr.w	r2, r2, #16
 800224a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7f1b      	ldrb	r3, [r3, #28]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d108      	bne.n	8002266 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0208 	orr.w	r2, r2, #8
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e007      	b.n	8002276 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0208 	bic.w	r2, r2, #8
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7f5b      	ldrb	r3, [r3, #29]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0204 	orr.w	r2, r2, #4
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	e007      	b.n	80022a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0204 	bic.w	r2, r2, #4
 800229e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	ea42 0103 	orr.w	r1, r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	1e5a      	subs	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022f8:	7cfb      	ldrb	r3, [r7, #19]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d003      	beq.n	8002306 <HAL_CAN_ConfigFilter+0x26>
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	2b02      	cmp	r3, #2
 8002302:	f040 80be 	bne.w	8002482 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002306:	4b65      	ldr	r3, [pc, #404]	; (800249c <HAL_CAN_ConfigFilter+0x1bc>)
 8002308:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002320:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	021b      	lsls	r3, r3, #8
 8002336:	431a      	orrs	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	2201      	movs	r2, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43db      	mvns	r3, r3
 8002358:	401a      	ands	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d123      	bne.n	80023b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43db      	mvns	r3, r3
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800238a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3248      	adds	r2, #72	; 0x48
 8002390:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023a6:	6979      	ldr	r1, [r7, #20]
 80023a8:	3348      	adds	r3, #72	; 0x48
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	440b      	add	r3, r1
 80023ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d122      	bne.n	80023fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3248      	adds	r2, #72	; 0x48
 80023de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023f4:	6979      	ldr	r1, [r7, #20]
 80023f6:	3348      	adds	r3, #72	; 0x48
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	440b      	add	r3, r1
 80023fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43db      	mvns	r3, r3
 8002410:	401a      	ands	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002418:	e007      	b.n	800242a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	431a      	orrs	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	43db      	mvns	r3, r3
 800243c:	401a      	ands	r2, r3
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002444:	e007      	b.n	8002456 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	431a      	orrs	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d107      	bne.n	800246e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	431a      	orrs	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002474:	f023 0201 	bic.w	r2, r3, #1
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	e006      	b.n	8002490 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
  }
}
 8002490:	4618      	mov	r0, r3
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40006400 	.word	0x40006400

080024a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d12e      	bne.n	8002512 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024cc:	f7fe fdac 	bl	8001028 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024d2:	e012      	b.n	80024fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024d4:	f7fe fda8 	bl	8001028 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b0a      	cmp	r3, #10
 80024e0:	d90b      	bls.n	80024fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2205      	movs	r2, #5
 80024f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e012      	b.n	8002520 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e5      	bne.n	80024d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e006      	b.n	8002520 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
  }
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002546:	7ffb      	ldrb	r3, [r7, #31]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d003      	beq.n	8002554 <HAL_CAN_AddTxMessage+0x2c>
 800254c:	7ffb      	ldrb	r3, [r7, #31]
 800254e:	2b02      	cmp	r3, #2
 8002550:	f040 80b8 	bne.w	80026c4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10a      	bne.n	8002574 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 80a0 	beq.w	80026b4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	0e1b      	lsrs	r3, r3, #24
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d907      	bls.n	8002594 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e09e      	b.n	80026d2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002594:	2201      	movs	r2, #1
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	409a      	lsls	r2, r3
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10d      	bne.n	80025c2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025b0:	68f9      	ldr	r1, [r7, #12]
 80025b2:	6809      	ldr	r1, [r1, #0]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3318      	adds	r3, #24
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	440b      	add	r3, r1
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e00f      	b.n	80025e2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025cc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025d2:	68f9      	ldr	r1, [r7, #12]
 80025d4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80025d6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	3318      	adds	r3, #24
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	440b      	add	r3, r1
 80025e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6819      	ldr	r1, [r3, #0]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3318      	adds	r3, #24
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	440b      	add	r3, r1
 80025f2:	3304      	adds	r3, #4
 80025f4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	7d1b      	ldrb	r3, [r3, #20]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d111      	bne.n	8002622 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	3318      	adds	r3, #24
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	4413      	add	r3, r2
 800260a:	3304      	adds	r3, #4
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	6811      	ldr	r1, [r2, #0]
 8002612:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	3318      	adds	r3, #24
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	440b      	add	r3, r1
 800261e:	3304      	adds	r3, #4
 8002620:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3307      	adds	r3, #7
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	061a      	lsls	r2, r3, #24
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3306      	adds	r3, #6
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	041b      	lsls	r3, r3, #16
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3305      	adds	r3, #5
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	4313      	orrs	r3, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	3204      	adds	r2, #4
 8002642:	7812      	ldrb	r2, [r2, #0]
 8002644:	4610      	mov	r0, r2
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	6811      	ldr	r1, [r2, #0]
 800264a:	ea43 0200 	orr.w	r2, r3, r0
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	440b      	add	r3, r1
 8002654:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002658:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3303      	adds	r3, #3
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	061a      	lsls	r2, r3, #24
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3302      	adds	r3, #2
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3301      	adds	r3, #1
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	4313      	orrs	r3, r2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	7812      	ldrb	r2, [r2, #0]
 800267a:	4610      	mov	r0, r2
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	6811      	ldr	r1, [r2, #0]
 8002680:	ea43 0200 	orr.w	r2, r3, r0
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	440b      	add	r3, r1
 800268a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800268e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	3318      	adds	r3, #24
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	4413      	add	r3, r2
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	6811      	ldr	r1, [r2, #0]
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3318      	adds	r3, #24
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	440b      	add	r3, r1
 80026ae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	e00e      	b.n	80026d2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e006      	b.n	80026d2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3724      	adds	r7, #36	; 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80026de:	b480      	push	{r7}
 80026e0:	b087      	sub	sp, #28
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d003      	beq.n	8002702 <HAL_CAN_GetRxMessage+0x24>
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	f040 80f3 	bne.w	80028e8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10e      	bne.n	8002726 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d116      	bne.n	8002744 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e0e7      	b.n	80028f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d107      	bne.n	8002744 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0d8      	b.n	80028f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	331b      	adds	r3, #27
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	4413      	add	r3, r2
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0204 	and.w	r2, r3, #4
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10c      	bne.n	800277c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	331b      	adds	r3, #27
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	4413      	add	r3, r2
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0d5b      	lsrs	r3, r3, #21
 8002772:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e00b      	b.n	8002794 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	331b      	adds	r3, #27
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	4413      	add	r3, r2
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	08db      	lsrs	r3, r3, #3
 800278c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	331b      	adds	r3, #27
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	4413      	add	r3, r2
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0202 	and.w	r2, r3, #2
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	331b      	adds	r3, #27
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	4413      	add	r3, r2
 80027b6:	3304      	adds	r3, #4
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 020f 	and.w	r2, r3, #15
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	331b      	adds	r3, #27
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	4413      	add	r3, r2
 80027ce:	3304      	adds	r3, #4
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	331b      	adds	r3, #27
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	4413      	add	r3, r2
 80027e6:	3304      	adds	r3, #4
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	0c1b      	lsrs	r3, r3, #16
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	4413      	add	r3, r2
 8002812:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	0a1a      	lsrs	r2, r3, #8
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	3301      	adds	r3, #1
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	4413      	add	r3, r2
 800282c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	0c1a      	lsrs	r2, r3, #16
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	3302      	adds	r3, #2
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	4413      	add	r3, r2
 8002846:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0e1a      	lsrs	r2, r3, #24
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	3303      	adds	r3, #3
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	4413      	add	r3, r2
 8002860:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	3304      	adds	r3, #4
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	4413      	add	r3, r2
 8002878:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	0a1a      	lsrs	r2, r3, #8
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	3305      	adds	r3, #5
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	4413      	add	r3, r2
 8002892:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	0c1a      	lsrs	r2, r3, #16
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	3306      	adds	r3, #6
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	0e1a      	lsrs	r2, r3, #24
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	3307      	adds	r3, #7
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d108      	bne.n	80028d4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0220 	orr.w	r2, r2, #32
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	e007      	b.n	80028e4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0220 	orr.w	r2, r2, #32
 80028e2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e006      	b.n	80028f6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
  }
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002912:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d002      	beq.n	8002920 <HAL_CAN_ActivateNotification+0x1e>
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d109      	bne.n	8002934 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6959      	ldr	r1, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	e006      	b.n	8002942 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
  }
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b08a      	sub	sp, #40	; 0x28
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002956:	2300      	movs	r3, #0
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d07c      	beq.n	8002a8e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d023      	beq.n	80029e6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2201      	movs	r2, #1
 80029a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f97d 	bl	8002cb0 <HAL_CAN_TxMailbox0CompleteCallback>
 80029b6:	e016      	b.n	80029e6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ca:	e00c      	b.n	80029e6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d004      	beq.n	80029e0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
 80029de:	e002      	b.n	80029e6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f983 	bl	8002cec <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d024      	beq.n	8002a3a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f95d 	bl	8002cc4 <HAL_CAN_TxMailbox1CompleteCallback>
 8002a0a:	e016      	b.n	8002a3a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d004      	beq.n	8002a20 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1e:	e00c      	b.n	8002a3a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d004      	beq.n	8002a34 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
 8002a32:	e002      	b.n	8002a3a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f963 	bl	8002d00 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d024      	beq.n	8002a8e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f93d 	bl	8002cd8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002a5e:	e016      	b.n	8002a8e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
 8002a72:	e00c      	b.n	8002a8e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d004      	beq.n	8002a88 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
 8002a86:	e002      	b.n	8002a8e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f943 	bl	8002d14 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00c      	beq.n	8002ab2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2210      	movs	r2, #16
 8002ab0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00b      	beq.n	8002ad4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d006      	beq.n	8002ad4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2208      	movs	r2, #8
 8002acc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f934 	bl	8002d3c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f91b 	bl	8002d28 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00c      	beq.n	8002b16 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2210      	movs	r2, #16
 8002b14:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00b      	beq.n	8002b38 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d006      	beq.n	8002b38 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2208      	movs	r2, #8
 8002b30:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f916 	bl	8002d64 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f8fd 	bl	8002d50 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00b      	beq.n	8002b78 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d006      	beq.n	8002b78 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2210      	movs	r2, #16
 8002b70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f900 	bl	8002d78 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d006      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2208      	movs	r2, #8
 8002b92:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f8f9 	bl	8002d8c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d075      	beq.n	8002c90 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d06c      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	f043 0302 	orr.w	r3, r3, #2
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d03d      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d038      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c1c:	2b30      	cmp	r3, #48	; 0x30
 8002c1e:	d017      	beq.n	8002c50 <HAL_CAN_IRQHandler+0x302>
 8002c20:	2b30      	cmp	r3, #48	; 0x30
 8002c22:	d804      	bhi.n	8002c2e <HAL_CAN_IRQHandler+0x2e0>
 8002c24:	2b10      	cmp	r3, #16
 8002c26:	d009      	beq.n	8002c3c <HAL_CAN_IRQHandler+0x2ee>
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d00c      	beq.n	8002c46 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002c2c:	e024      	b.n	8002c78 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002c2e:	2b50      	cmp	r3, #80	; 0x50
 8002c30:	d018      	beq.n	8002c64 <HAL_CAN_IRQHandler+0x316>
 8002c32:	2b60      	cmp	r3, #96	; 0x60
 8002c34:	d01b      	beq.n	8002c6e <HAL_CAN_IRQHandler+0x320>
 8002c36:	2b40      	cmp	r3, #64	; 0x40
 8002c38:	d00f      	beq.n	8002c5a <HAL_CAN_IRQHandler+0x30c>
            break;
 8002c3a:	e01d      	b.n	8002c78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	f043 0308 	orr.w	r3, r3, #8
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c44:	e018      	b.n	8002c78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	f043 0310 	orr.w	r3, r3, #16
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c4e:	e013      	b.n	8002c78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	f043 0320 	orr.w	r3, r3, #32
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c58:	e00e      	b.n	8002c78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c62:	e009      	b.n	8002c78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c6c:	e004      	b.n	8002c78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c76:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c86:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f87c 	bl	8002da0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3728      	adds	r7, #40	; 0x28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002de6:	4a04      	ldr	r2, [pc, #16]	; (8002df8 <__NVIC_SetPriorityGrouping+0x44>)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	60d3      	str	r3, [r2, #12]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <__NVIC_GetPriorityGrouping+0x18>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	0a1b      	lsrs	r3, r3, #8
 8002e06:	f003 0307 	and.w	r3, r3, #7
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	db0b      	blt.n	8002e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	f003 021f 	and.w	r2, r3, #31
 8002e30:	4907      	ldr	r1, [pc, #28]	; (8002e50 <__NVIC_EnableIRQ+0x38>)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	2001      	movs	r0, #1
 8002e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000e100 	.word	0xe000e100

08002e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	db0a      	blt.n	8002e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	490c      	ldr	r1, [pc, #48]	; (8002ea0 <__NVIC_SetPriority+0x4c>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	0112      	lsls	r2, r2, #4
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	440b      	add	r3, r1
 8002e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e7c:	e00a      	b.n	8002e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	4908      	ldr	r1, [pc, #32]	; (8002ea4 <__NVIC_SetPriority+0x50>)
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	3b04      	subs	r3, #4
 8002e8c:	0112      	lsls	r2, r2, #4
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	440b      	add	r3, r1
 8002e92:	761a      	strb	r2, [r3, #24]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	e000e100 	.word	0xe000e100
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	; 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f1c3 0307 	rsb	r3, r3, #7
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	bf28      	it	cs
 8002ec6:	2304      	movcs	r3, #4
 8002ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	d902      	bls.n	8002ed8 <NVIC_EncodePriority+0x30>
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3b03      	subs	r3, #3
 8002ed6:	e000      	b.n	8002eda <NVIC_EncodePriority+0x32>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	401a      	ands	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	4313      	orrs	r3, r2
         );
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3724      	adds	r7, #36	; 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f20:	d301      	bcc.n	8002f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f22:	2301      	movs	r3, #1
 8002f24:	e00f      	b.n	8002f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f26:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <SysTick_Config+0x40>)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f2e:	210f      	movs	r1, #15
 8002f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f34:	f7ff ff8e 	bl	8002e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <SysTick_Config+0x40>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f3e:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <SysTick_Config+0x40>)
 8002f40:	2207      	movs	r2, #7
 8002f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	e000e010 	.word	0xe000e010

08002f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff ff29 	bl	8002db4 <__NVIC_SetPriorityGrouping>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4603      	mov	r3, r0
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f7c:	f7ff ff3e 	bl	8002dfc <__NVIC_GetPriorityGrouping>
 8002f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	6978      	ldr	r0, [r7, #20]
 8002f88:	f7ff ff8e 	bl	8002ea8 <NVIC_EncodePriority>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff5d 	bl	8002e54 <__NVIC_SetPriority>
}
 8002f9a:	bf00      	nop
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	4603      	mov	r3, r0
 8002faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff31 	bl	8002e18 <__NVIC_EnableIRQ>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff ffa2 	bl	8002f10 <SysTick_Config>
 8002fcc:	4603      	mov	r3, r0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fe4:	f7fe f820 	bl	8001028 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e099      	b.n	8003128 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003014:	e00f      	b.n	8003036 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003016:	f7fe f807 	bl	8001028 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b05      	cmp	r3, #5
 8003022:	d908      	bls.n	8003036 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2203      	movs	r2, #3
 800302e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e078      	b.n	8003128 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e8      	bne.n	8003016 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4b38      	ldr	r3, [pc, #224]	; (8003130 <HAL_DMA_Init+0x158>)
 8003050:	4013      	ands	r3, r2
 8003052:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003062:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	2b04      	cmp	r3, #4
 800308e:	d107      	bne.n	80030a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	4313      	orrs	r3, r2
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f023 0307 	bic.w	r3, r3, #7
 80030b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d117      	bne.n	80030fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00e      	beq.n	80030fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fae5 	bl	80036ac <DMA_CheckFifoParam>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2240      	movs	r2, #64	; 0x40
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030f6:	2301      	movs	r3, #1
 80030f8:	e016      	b.n	8003128 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fa9c 	bl	8003640 <DMA_CalcBaseAndBitshift>
 8003108:	4603      	mov	r3, r0
 800310a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003110:	223f      	movs	r2, #63	; 0x3f
 8003112:	409a      	lsls	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	f010803f 	.word	0xf010803f

08003134 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_DMA_Start_IT+0x26>
 8003156:	2302      	movs	r3, #2
 8003158:	e040      	b.n	80031dc <HAL_DMA_Start_IT+0xa8>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d12f      	bne.n	80031ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2202      	movs	r2, #2
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fa2e 	bl	80035e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318c:	223f      	movs	r2, #63	; 0x3f
 800318e:	409a      	lsls	r2, r3
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0216 	orr.w	r2, r2, #22
 80031a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0208 	orr.w	r2, r2, #8
 80031ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e005      	b.n	80031da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031d6:	2302      	movs	r3, #2
 80031d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031da:	7dfb      	ldrb	r3, [r7, #23]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d004      	beq.n	8003202 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2280      	movs	r2, #128	; 0x80
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e00c      	b.n	800321c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2205      	movs	r2, #5
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0201 	bic.w	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003234:	4b92      	ldr	r3, [pc, #584]	; (8003480 <HAL_DMA_IRQHandler+0x258>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a92      	ldr	r2, [pc, #584]	; (8003484 <HAL_DMA_IRQHandler+0x25c>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	0a9b      	lsrs	r3, r3, #10
 8003240:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003252:	2208      	movs	r2, #8
 8003254:	409a      	lsls	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d01a      	beq.n	8003294 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0204 	bic.w	r2, r2, #4
 800327a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003280:	2208      	movs	r2, #8
 8003282:	409a      	lsls	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	f043 0201 	orr.w	r2, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	2201      	movs	r2, #1
 800329a:	409a      	lsls	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d012      	beq.n	80032ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00b      	beq.n	80032ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b6:	2201      	movs	r2, #1
 80032b8:	409a      	lsls	r2, r3
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c2:	f043 0202 	orr.w	r2, r3, #2
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	2204      	movs	r2, #4
 80032d0:	409a      	lsls	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d012      	beq.n	8003300 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ec:	2204      	movs	r2, #4
 80032ee:	409a      	lsls	r2, r3
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	f043 0204 	orr.w	r2, r3, #4
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	2210      	movs	r2, #16
 8003306:	409a      	lsls	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d043      	beq.n	8003398 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d03c      	beq.n	8003398 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003322:	2210      	movs	r2, #16
 8003324:	409a      	lsls	r2, r3
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d018      	beq.n	800336a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d108      	bne.n	8003358 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d024      	beq.n	8003398 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	4798      	blx	r3
 8003356:	e01f      	b.n	8003398 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01b      	beq.n	8003398 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	4798      	blx	r3
 8003368:	e016      	b.n	8003398 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d107      	bne.n	8003388 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0208 	bic.w	r2, r2, #8
 8003386:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	2220      	movs	r2, #32
 800339e:	409a      	lsls	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 808e 	beq.w	80034c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8086 	beq.w	80034c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033be:	2220      	movs	r2, #32
 80033c0:	409a      	lsls	r2, r3
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b05      	cmp	r3, #5
 80033d0:	d136      	bne.n	8003440 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0216 	bic.w	r2, r2, #22
 80033e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695a      	ldr	r2, [r3, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d103      	bne.n	8003402 <HAL_DMA_IRQHandler+0x1da>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d007      	beq.n	8003412 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0208 	bic.w	r2, r2, #8
 8003410:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003416:	223f      	movs	r2, #63	; 0x3f
 8003418:	409a      	lsls	r2, r3
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003432:	2b00      	cmp	r3, #0
 8003434:	d07d      	beq.n	8003532 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4798      	blx	r3
        }
        return;
 800343e:	e078      	b.n	8003532 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01c      	beq.n	8003488 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d108      	bne.n	800346e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003460:	2b00      	cmp	r3, #0
 8003462:	d030      	beq.n	80034c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
 800346c:	e02b      	b.n	80034c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d027      	beq.n	80034c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4798      	blx	r3
 800347e:	e022      	b.n	80034c6 <HAL_DMA_IRQHandler+0x29e>
 8003480:	20000044 	.word	0x20000044
 8003484:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10f      	bne.n	80034b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0210 	bic.w	r2, r2, #16
 80034a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d032      	beq.n	8003534 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d022      	beq.n	8003520 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2205      	movs	r2, #5
 80034de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	3301      	adds	r3, #1
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d307      	bcc.n	800350e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f2      	bne.n	80034f2 <HAL_DMA_IRQHandler+0x2ca>
 800350c:	e000      	b.n	8003510 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800350e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
 8003530:	e000      	b.n	8003534 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003532:	bf00      	nop
    }
  }
}
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop

0800353c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	460b      	mov	r3, r1
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_DMA_RegisterCallback+0x20>
 8003558:	2302      	movs	r3, #2
 800355a:	e03c      	b.n	80035d6 <HAL_DMA_RegisterCallback+0x9a>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d129      	bne.n	80035c4 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8003570:	7afb      	ldrb	r3, [r7, #11]
 8003572:	2b05      	cmp	r3, #5
 8003574:	d829      	bhi.n	80035ca <HAL_DMA_RegisterCallback+0x8e>
 8003576:	a201      	add	r2, pc, #4	; (adr r2, 800357c <HAL_DMA_RegisterCallback+0x40>)
 8003578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357c:	08003595 	.word	0x08003595
 8003580:	0800359d 	.word	0x0800359d
 8003584:	080035a5 	.word	0x080035a5
 8003588:	080035ad 	.word	0x080035ad
 800358c:	080035b5 	.word	0x080035b5
 8003590:	080035bd 	.word	0x080035bd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800359a:	e017      	b.n	80035cc <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80035a2:	e013      	b.n	80035cc <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80035aa:	e00f      	b.n	80035cc <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80035b2:	e00b      	b.n	80035cc <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80035ba:	e007      	b.n	80035cc <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80035c2:	e003      	b.n	80035cc <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	75fb      	strb	r3, [r7, #23]
 80035c8:	e000      	b.n	80035cc <HAL_DMA_RegisterCallback+0x90>
      break;
 80035ca:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop

080035e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003600:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b40      	cmp	r3, #64	; 0x40
 8003610:	d108      	bne.n	8003624 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003622:	e007      	b.n	8003634 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	60da      	str	r2, [r3, #12]
}
 8003634:	bf00      	nop
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	3b10      	subs	r3, #16
 8003650:	4a14      	ldr	r2, [pc, #80]	; (80036a4 <DMA_CalcBaseAndBitshift+0x64>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800365a:	4a13      	ldr	r2, [pc, #76]	; (80036a8 <DMA_CalcBaseAndBitshift+0x68>)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b03      	cmp	r3, #3
 800366c:	d909      	bls.n	8003682 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003676:	f023 0303 	bic.w	r3, r3, #3
 800367a:	1d1a      	adds	r2, r3, #4
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	659a      	str	r2, [r3, #88]	; 0x58
 8003680:	e007      	b.n	8003692 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800368a:	f023 0303 	bic.w	r3, r3, #3
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	aaaaaaab 	.word	0xaaaaaaab
 80036a8:	0800ec74 	.word	0x0800ec74

080036ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d11f      	bne.n	8003706 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d855      	bhi.n	8003778 <DMA_CheckFifoParam+0xcc>
 80036cc:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <DMA_CheckFifoParam+0x28>)
 80036ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d2:	bf00      	nop
 80036d4:	080036e5 	.word	0x080036e5
 80036d8:	080036f7 	.word	0x080036f7
 80036dc:	080036e5 	.word	0x080036e5
 80036e0:	08003779 	.word	0x08003779
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d045      	beq.n	800377c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f4:	e042      	b.n	800377c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036fe:	d13f      	bne.n	8003780 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003704:	e03c      	b.n	8003780 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370e:	d121      	bne.n	8003754 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d836      	bhi.n	8003784 <DMA_CheckFifoParam+0xd8>
 8003716:	a201      	add	r2, pc, #4	; (adr r2, 800371c <DMA_CheckFifoParam+0x70>)
 8003718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371c:	0800372d 	.word	0x0800372d
 8003720:	08003733 	.word	0x08003733
 8003724:	0800372d 	.word	0x0800372d
 8003728:	08003745 	.word	0x08003745
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
      break;
 8003730:	e02f      	b.n	8003792 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d024      	beq.n	8003788 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003742:	e021      	b.n	8003788 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800374c:	d11e      	bne.n	800378c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003752:	e01b      	b.n	800378c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d902      	bls.n	8003760 <DMA_CheckFifoParam+0xb4>
 800375a:	2b03      	cmp	r3, #3
 800375c:	d003      	beq.n	8003766 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800375e:	e018      	b.n	8003792 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
      break;
 8003764:	e015      	b.n	8003792 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00e      	beq.n	8003790 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
      break;
 8003776:	e00b      	b.n	8003790 <DMA_CheckFifoParam+0xe4>
      break;
 8003778:	bf00      	nop
 800377a:	e00a      	b.n	8003792 <DMA_CheckFifoParam+0xe6>
      break;
 800377c:	bf00      	nop
 800377e:	e008      	b.n	8003792 <DMA_CheckFifoParam+0xe6>
      break;
 8003780:	bf00      	nop
 8003782:	e006      	b.n	8003792 <DMA_CheckFifoParam+0xe6>
      break;
 8003784:	bf00      	nop
 8003786:	e004      	b.n	8003792 <DMA_CheckFifoParam+0xe6>
      break;
 8003788:	bf00      	nop
 800378a:	e002      	b.n	8003792 <DMA_CheckFifoParam+0xe6>
      break;   
 800378c:	bf00      	nop
 800378e:	e000      	b.n	8003792 <DMA_CheckFifoParam+0xe6>
      break;
 8003790:	bf00      	nop
    }
  } 
  
  return status; 
 8003792:	7bfb      	ldrb	r3, [r7, #15]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b089      	sub	sp, #36	; 0x24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e16b      	b.n	8003a94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037bc:	2201      	movs	r2, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4013      	ands	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	f040 815a 	bne.w	8003a8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d00b      	beq.n	80037fa <HAL_GPIO_Init+0x5a>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d007      	beq.n	80037fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037ee:	2b11      	cmp	r3, #17
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b12      	cmp	r3, #18
 80037f8:	d130      	bne.n	800385c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	2203      	movs	r2, #3
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4013      	ands	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4313      	orrs	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003830:	2201      	movs	r2, #1
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 0201 	and.w	r2, r3, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	2203      	movs	r2, #3
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0xfc>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b12      	cmp	r3, #18
 800389a:	d123      	bne.n	80038e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	08da      	lsrs	r2, r3, #3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3208      	adds	r2, #8
 80038a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	220f      	movs	r2, #15
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	08da      	lsrs	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3208      	adds	r2, #8
 80038de:	69b9      	ldr	r1, [r7, #24]
 80038e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	2203      	movs	r2, #3
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0203 	and.w	r2, r3, #3
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80b4 	beq.w	8003a8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	4b5f      	ldr	r3, [pc, #380]	; (8003aa8 <HAL_GPIO_Init+0x308>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	4a5e      	ldr	r2, [pc, #376]	; (8003aa8 <HAL_GPIO_Init+0x308>)
 8003930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003934:	6453      	str	r3, [r2, #68]	; 0x44
 8003936:	4b5c      	ldr	r3, [pc, #368]	; (8003aa8 <HAL_GPIO_Init+0x308>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003942:	4a5a      	ldr	r2, [pc, #360]	; (8003aac <HAL_GPIO_Init+0x30c>)
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	3302      	adds	r3, #2
 800394a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	220f      	movs	r2, #15
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a51      	ldr	r2, [pc, #324]	; (8003ab0 <HAL_GPIO_Init+0x310>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d02b      	beq.n	80039c6 <HAL_GPIO_Init+0x226>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a50      	ldr	r2, [pc, #320]	; (8003ab4 <HAL_GPIO_Init+0x314>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d025      	beq.n	80039c2 <HAL_GPIO_Init+0x222>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a4f      	ldr	r2, [pc, #316]	; (8003ab8 <HAL_GPIO_Init+0x318>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01f      	beq.n	80039be <HAL_GPIO_Init+0x21e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a4e      	ldr	r2, [pc, #312]	; (8003abc <HAL_GPIO_Init+0x31c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d019      	beq.n	80039ba <HAL_GPIO_Init+0x21a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a4d      	ldr	r2, [pc, #308]	; (8003ac0 <HAL_GPIO_Init+0x320>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d013      	beq.n	80039b6 <HAL_GPIO_Init+0x216>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a4c      	ldr	r2, [pc, #304]	; (8003ac4 <HAL_GPIO_Init+0x324>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00d      	beq.n	80039b2 <HAL_GPIO_Init+0x212>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a4b      	ldr	r2, [pc, #300]	; (8003ac8 <HAL_GPIO_Init+0x328>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d007      	beq.n	80039ae <HAL_GPIO_Init+0x20e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4a      	ldr	r2, [pc, #296]	; (8003acc <HAL_GPIO_Init+0x32c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d101      	bne.n	80039aa <HAL_GPIO_Init+0x20a>
 80039a6:	2307      	movs	r3, #7
 80039a8:	e00e      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039aa:	2308      	movs	r3, #8
 80039ac:	e00c      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039ae:	2306      	movs	r3, #6
 80039b0:	e00a      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039b2:	2305      	movs	r3, #5
 80039b4:	e008      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039b6:	2304      	movs	r3, #4
 80039b8:	e006      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039ba:	2303      	movs	r3, #3
 80039bc:	e004      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039be:	2302      	movs	r3, #2
 80039c0:	e002      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <HAL_GPIO_Init+0x228>
 80039c6:	2300      	movs	r3, #0
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	f002 0203 	and.w	r2, r2, #3
 80039ce:	0092      	lsls	r2, r2, #2
 80039d0:	4093      	lsls	r3, r2
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d8:	4934      	ldr	r1, [pc, #208]	; (8003aac <HAL_GPIO_Init+0x30c>)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	3302      	adds	r3, #2
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039e6:	4b3a      	ldr	r3, [pc, #232]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a0a:	4a31      	ldr	r2, [pc, #196]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a10:	4b2f      	ldr	r3, [pc, #188]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a34:	4a26      	ldr	r2, [pc, #152]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a3a:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	43db      	mvns	r3, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4013      	ands	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a5e:	4a1c      	ldr	r2, [pc, #112]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a64:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4013      	ands	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a88:	4a11      	ldr	r2, [pc, #68]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3301      	adds	r3, #1
 8003a92:	61fb      	str	r3, [r7, #28]
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	2b0f      	cmp	r3, #15
 8003a98:	f67f ae90 	bls.w	80037bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	3724      	adds	r7, #36	; 0x24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40013800 	.word	0x40013800
 8003ab0:	40020000 	.word	0x40020000
 8003ab4:	40020400 	.word	0x40020400
 8003ab8:	40020800 	.word	0x40020800
 8003abc:	40020c00 	.word	0x40020c00
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40021400 	.word	0x40021400
 8003ac8:	40021800 	.word	0x40021800
 8003acc:	40021c00 	.word	0x40021c00
 8003ad0:	40013c00 	.word	0x40013c00

08003ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ae4:	787b      	ldrb	r3, [r7, #1]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aea:	887a      	ldrh	r2, [r7, #2]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003af0:	e003      	b.n	8003afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003af2:	887b      	ldrh	r3, [r7, #2]
 8003af4:	041a      	lsls	r2, r3, #16
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	619a      	str	r2, [r3, #24]
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	887b      	ldrh	r3, [r7, #2]
 8003b18:	401a      	ands	r2, r3
 8003b1a:	887b      	ldrh	r3, [r7, #2]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d104      	bne.n	8003b2a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b20:	887b      	ldrh	r3, [r7, #2]
 8003b22:	041a      	lsls	r2, r3, #16
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003b28:	e002      	b.n	8003b30 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003b2a:	887a      	ldrh	r2, [r7, #2]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	619a      	str	r2, [r3, #24]
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b46:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b52:	4a05      	ldr	r2, [pc, #20]	; (8003b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b58:	88fb      	ldrh	r3, [r7, #6]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f007 fe18 	bl	800b790 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40013c00 	.word	0x40013c00

08003b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e11f      	b.n	8003dbe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f008 fdba 	bl	800c70c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2224      	movs	r2, #36	; 0x24
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bd0:	f001 fcb6 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 8003bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4a7b      	ldr	r2, [pc, #492]	; (8003dc8 <HAL_I2C_Init+0x25c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d807      	bhi.n	8003bf0 <HAL_I2C_Init+0x84>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a7a      	ldr	r2, [pc, #488]	; (8003dcc <HAL_I2C_Init+0x260>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	bf94      	ite	ls
 8003be8:	2301      	movls	r3, #1
 8003bea:	2300      	movhi	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e006      	b.n	8003bfe <HAL_I2C_Init+0x92>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4a77      	ldr	r2, [pc, #476]	; (8003dd0 <HAL_I2C_Init+0x264>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	bf94      	ite	ls
 8003bf8:	2301      	movls	r3, #1
 8003bfa:	2300      	movhi	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0db      	b.n	8003dbe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a72      	ldr	r2, [pc, #456]	; (8003dd4 <HAL_I2C_Init+0x268>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0c9b      	lsrs	r3, r3, #18
 8003c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4a64      	ldr	r2, [pc, #400]	; (8003dc8 <HAL_I2C_Init+0x25c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d802      	bhi.n	8003c40 <HAL_I2C_Init+0xd4>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	e009      	b.n	8003c54 <HAL_I2C_Init+0xe8>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
 8003c4a:	4a63      	ldr	r2, [pc, #396]	; (8003dd8 <HAL_I2C_Init+0x26c>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	099b      	lsrs	r3, r3, #6
 8003c52:	3301      	adds	r3, #1
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4956      	ldr	r1, [pc, #344]	; (8003dc8 <HAL_I2C_Init+0x25c>)
 8003c70:	428b      	cmp	r3, r1
 8003c72:	d80d      	bhi.n	8003c90 <HAL_I2C_Init+0x124>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	1e59      	subs	r1, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c82:	3301      	adds	r3, #1
 8003c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	bf38      	it	cc
 8003c8c:	2304      	movcc	r3, #4
 8003c8e:	e04f      	b.n	8003d30 <HAL_I2C_Init+0x1c4>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d111      	bne.n	8003cbc <HAL_I2C_Init+0x150>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	1e58      	subs	r0, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6859      	ldr	r1, [r3, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	440b      	add	r3, r1
 8003ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003caa:	3301      	adds	r3, #1
 8003cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e012      	b.n	8003ce2 <HAL_I2C_Init+0x176>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1e58      	subs	r0, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	0099      	lsls	r1, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	bf0c      	ite	eq
 8003cdc:	2301      	moveq	r3, #1
 8003cde:	2300      	movne	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <HAL_I2C_Init+0x17e>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e022      	b.n	8003d30 <HAL_I2C_Init+0x1c4>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10e      	bne.n	8003d10 <HAL_I2C_Init+0x1a4>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1e58      	subs	r0, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6859      	ldr	r1, [r3, #4]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	440b      	add	r3, r1
 8003d00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d04:	3301      	adds	r3, #1
 8003d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d0e:	e00f      	b.n	8003d30 <HAL_I2C_Init+0x1c4>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1e58      	subs	r0, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6859      	ldr	r1, [r3, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	0099      	lsls	r1, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d26:	3301      	adds	r3, #1
 8003d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	6809      	ldr	r1, [r1, #0]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69da      	ldr	r2, [r3, #28]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6911      	ldr	r1, [r2, #16]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68d2      	ldr	r2, [r2, #12]
 8003d6a:	4311      	orrs	r1, r2
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6812      	ldr	r2, [r2, #0]
 8003d70:	430b      	orrs	r3, r1
 8003d72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	000186a0 	.word	0x000186a0
 8003dcc:	001e847f 	.word	0x001e847f
 8003dd0:	003d08ff 	.word	0x003d08ff
 8003dd4:	431bde83 	.word	0x431bde83
 8003dd8:	10624dd3 	.word	0x10624dd3

08003ddc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	461a      	mov	r2, r3
 8003de8:	460b      	mov	r3, r1
 8003dea:	817b      	strh	r3, [r7, #10]
 8003dec:	4613      	mov	r3, r2
 8003dee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003df0:	f7fd f91a 	bl	8001028 <HAL_GetTick>
 8003df4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	f040 80e0 	bne.w	8003fc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	2319      	movs	r3, #25
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	4970      	ldr	r1, [pc, #448]	; (8003fd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fc56 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e0d3      	b.n	8003fc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_I2C_Master_Transmit+0x50>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e0cc      	b.n	8003fc6 <HAL_I2C_Master_Transmit+0x1ea>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d007      	beq.n	8003e52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0201 	orr.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2221      	movs	r2, #33	; 0x21
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	893a      	ldrh	r2, [r7, #8]
 8003e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4a50      	ldr	r2, [pc, #320]	; (8003fd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e94:	8979      	ldrh	r1, [r7, #10]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	6a3a      	ldr	r2, [r7, #32]
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 fac2 	bl	8004424 <I2C_MasterRequestWrite>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e08d      	b.n	8003fc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ec0:	e066      	b.n	8003f90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	6a39      	ldr	r1, [r7, #32]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fcd0 	bl	800486c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d107      	bne.n	8003eea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e06b      	b.n	8003fc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	781a      	ldrb	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d11b      	bne.n	8003f64 <HAL_I2C_Master_Transmit+0x188>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d017      	beq.n	8003f64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	781a      	ldrb	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	6a39      	ldr	r1, [r7, #32]
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fcc0 	bl	80048ee <I2C_WaitOnBTFFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00d      	beq.n	8003f90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d107      	bne.n	8003f8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e01a      	b.n	8003fc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d194      	bne.n	8003ec2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e000      	b.n	8003fc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	00100002 	.word	0x00100002
 8003fd4:	ffff0000 	.word	0xffff0000

08003fd8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08c      	sub	sp, #48	; 0x30
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	817b      	strh	r3, [r7, #10]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fec:	f7fd f81c 	bl	8001028 <HAL_GetTick>
 8003ff0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	f040 820b 	bne.w	8004416 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	2319      	movs	r3, #25
 8004006:	2201      	movs	r2, #1
 8004008:	497c      	ldr	r1, [pc, #496]	; (80041fc <HAL_I2C_Master_Receive+0x224>)
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 fb58 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
 8004018:	e1fe      	b.n	8004418 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_I2C_Master_Receive+0x50>
 8004024:	2302      	movs	r3, #2
 8004026:	e1f7      	b.n	8004418 <HAL_I2C_Master_Receive+0x440>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b01      	cmp	r3, #1
 800403c:	d007      	beq.n	800404e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f042 0201 	orr.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800405c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2222      	movs	r2, #34	; 0x22
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2210      	movs	r2, #16
 800406a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	893a      	ldrh	r2, [r7, #8]
 800407e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4a5c      	ldr	r2, [pc, #368]	; (8004200 <HAL_I2C_Master_Receive+0x228>)
 800408e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004090:	8979      	ldrh	r1, [r7, #10]
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 fa46 	bl	8004528 <I2C_MasterRequestRead>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e1b8      	b.n	8004418 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d113      	bne.n	80040d6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ae:	2300      	movs	r3, #0
 80040b0:	623b      	str	r3, [r7, #32]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	623b      	str	r3, [r7, #32]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	623b      	str	r3, [r7, #32]
 80040c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e18c      	b.n	80043f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d11b      	bne.n	8004116 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	61fb      	str	r3, [r7, #28]
 8004102:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e16c      	b.n	80043f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	2b02      	cmp	r3, #2
 800411c:	d11b      	bne.n	8004156 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800413c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800413e:	2300      	movs	r3, #0
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	61bb      	str	r3, [r7, #24]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	61bb      	str	r3, [r7, #24]
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	e14c      	b.n	80043f0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004164:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800417c:	e138      	b.n	80043f0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004182:	2b03      	cmp	r3, #3
 8004184:	f200 80f1 	bhi.w	800436a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	2b01      	cmp	r3, #1
 800418e:	d123      	bne.n	80041d8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 fbeb 	bl	8004970 <I2C_WaitOnRXNEFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e139      	b.n	8004418 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041d6:	e10b      	b.n	80043f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d14e      	bne.n	800427e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e6:	2200      	movs	r2, #0
 80041e8:	4906      	ldr	r1, [pc, #24]	; (8004204 <HAL_I2C_Master_Receive+0x22c>)
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fa68 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e10e      	b.n	8004418 <HAL_I2C_Master_Receive+0x440>
 80041fa:	bf00      	nop
 80041fc:	00100002 	.word	0x00100002
 8004200:	ffff0000 	.word	0xffff0000
 8004204:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800427c:	e0b8      	b.n	80043f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	2200      	movs	r2, #0
 8004286:	4966      	ldr	r1, [pc, #408]	; (8004420 <HAL_I2C_Master_Receive+0x448>)
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 fa19 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0bf      	b.n	8004418 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	2200      	movs	r2, #0
 80042e2:	494f      	ldr	r1, [pc, #316]	; (8004420 <HAL_I2C_Master_Receive+0x448>)
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f9eb 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e091      	b.n	8004418 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004302:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004368:	e042      	b.n	80043f0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800436a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fafe 	bl	8004970 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e04c      	b.n	8004418 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d118      	bne.n	80043f0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f47f aec2 	bne.w	800417e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	e000      	b.n	8004418 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004416:	2302      	movs	r3, #2
  }
}
 8004418:	4618      	mov	r0, r3
 800441a:	3728      	adds	r7, #40	; 0x28
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	00010004 	.word	0x00010004

08004424 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af02      	add	r7, sp, #8
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	607a      	str	r2, [r7, #4]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	460b      	mov	r3, r1
 8004432:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b08      	cmp	r3, #8
 800443e:	d006      	beq.n	800444e <I2C_MasterRequestWrite+0x2a>
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d003      	beq.n	800444e <I2C_MasterRequestWrite+0x2a>
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800444c:	d108      	bne.n	8004460 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	e00b      	b.n	8004478 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	2b12      	cmp	r3, #18
 8004466:	d107      	bne.n	8004478 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004476:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f91b 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00c      	beq.n	80044aa <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e035      	b.n	8004516 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044b2:	d108      	bne.n	80044c6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044b4:	897b      	ldrh	r3, [r7, #10]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044c2:	611a      	str	r2, [r3, #16]
 80044c4:	e01b      	b.n	80044fe <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044c6:	897b      	ldrh	r3, [r7, #10]
 80044c8:	11db      	asrs	r3, r3, #7
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f003 0306 	and.w	r3, r3, #6
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f063 030f 	orn	r3, r3, #15
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	490f      	ldr	r1, [pc, #60]	; (8004520 <I2C_MasterRequestWrite+0xfc>)
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f942 	bl	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e010      	b.n	8004516 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044f4:	897b      	ldrh	r3, [r7, #10]
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	4908      	ldr	r1, [pc, #32]	; (8004524 <I2C_MasterRequestWrite+0x100>)
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f932 	bl	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	00010008 	.word	0x00010008
 8004524:	00010002 	.word	0x00010002

08004528 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	607a      	str	r2, [r7, #4]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	460b      	mov	r3, r1
 8004536:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800454c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b08      	cmp	r3, #8
 8004552:	d006      	beq.n	8004562 <I2C_MasterRequestRead+0x3a>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d003      	beq.n	8004562 <I2C_MasterRequestRead+0x3a>
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004560:	d108      	bne.n	8004574 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	e00b      	b.n	800458c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	2b11      	cmp	r3, #17
 800457a:	d107      	bne.n	800458c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800458a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f891 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00c      	beq.n	80045be <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e078      	b.n	80046b0 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045c6:	d108      	bne.n	80045da <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045c8:	897b      	ldrh	r3, [r7, #10]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	611a      	str	r2, [r3, #16]
 80045d8:	e05e      	b.n	8004698 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045da:	897b      	ldrh	r3, [r7, #10]
 80045dc:	11db      	asrs	r3, r3, #7
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	f003 0306 	and.w	r3, r3, #6
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f063 030f 	orn	r3, r3, #15
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	4930      	ldr	r1, [pc, #192]	; (80046b8 <I2C_MasterRequestRead+0x190>)
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f8b8 	bl	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e053      	b.n	80046b0 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004608:	897b      	ldrh	r3, [r7, #10]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	4929      	ldr	r1, [pc, #164]	; (80046bc <I2C_MasterRequestRead+0x194>)
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f8a8 	bl	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e043      	b.n	80046b0 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004628:	2300      	movs	r3, #0
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800464c:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f830 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00c      	beq.n	8004680 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800467a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e017      	b.n	80046b0 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004680:	897b      	ldrh	r3, [r7, #10]
 8004682:	11db      	asrs	r3, r3, #7
 8004684:	b2db      	uxtb	r3, r3
 8004686:	f003 0306 	and.w	r3, r3, #6
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f063 030e 	orn	r3, r3, #14
 8004690:	b2da      	uxtb	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	4907      	ldr	r1, [pc, #28]	; (80046bc <I2C_MasterRequestRead+0x194>)
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f865 	bl	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	00010008 	.word	0x00010008
 80046bc:	00010002 	.word	0x00010002

080046c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046d0:	e025      	b.n	800471e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046d8:	d021      	beq.n	800471e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046da:	f7fc fca5 	bl	8001028 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d302      	bcc.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d116      	bne.n	800471e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f043 0220 	orr.w	r2, r3, #32
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e023      	b.n	8004766 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	0c1b      	lsrs	r3, r3, #16
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	d10d      	bne.n	8004744 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	43da      	mvns	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4013      	ands	r3, r2
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	bf0c      	ite	eq
 800473a:	2301      	moveq	r3, #1
 800473c:	2300      	movne	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	e00c      	b.n	800475e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	43da      	mvns	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4013      	ands	r3, r2
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	bf0c      	ite	eq
 8004756:	2301      	moveq	r3, #1
 8004758:	2300      	movne	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	429a      	cmp	r2, r3
 8004762:	d0b6      	beq.n	80046d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800477c:	e051      	b.n	8004822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478c:	d123      	bne.n	80047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800479c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f043 0204 	orr.w	r2, r3, #4
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e046      	b.n	8004864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047dc:	d021      	beq.n	8004822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047de:	f7fc fc23 	bl	8001028 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d302      	bcc.n	80047f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d116      	bne.n	8004822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f043 0220 	orr.w	r2, r3, #32
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e020      	b.n	8004864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10c      	bne.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	43da      	mvns	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4013      	ands	r3, r2
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	bf14      	ite	ne
 800483e:	2301      	movne	r3, #1
 8004840:	2300      	moveq	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	e00b      	b.n	800485e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	43da      	mvns	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4013      	ands	r3, r2
 8004852:	b29b      	uxth	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	bf14      	ite	ne
 8004858:	2301      	movne	r3, #1
 800485a:	2300      	moveq	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d18d      	bne.n	800477e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004878:	e02d      	b.n	80048d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f8ce 	bl	8004a1c <I2C_IsAcknowledgeFailed>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e02d      	b.n	80048e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004890:	d021      	beq.n	80048d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004892:	f7fc fbc9 	bl	8001028 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d302      	bcc.n	80048a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d116      	bne.n	80048d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f043 0220 	orr.w	r2, r3, #32
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e007      	b.n	80048e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e0:	2b80      	cmp	r3, #128	; 0x80
 80048e2:	d1ca      	bne.n	800487a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048fa:	e02d      	b.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f88d 	bl	8004a1c <I2C_IsAcknowledgeFailed>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e02d      	b.n	8004968 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004912:	d021      	beq.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004914:	f7fc fb88 	bl	8001028 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	429a      	cmp	r2, r3
 8004922:	d302      	bcc.n	800492a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d116      	bne.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	f043 0220 	orr.w	r2, r3, #32
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e007      	b.n	8004968 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b04      	cmp	r3, #4
 8004964:	d1ca      	bne.n	80048fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800497c:	e042      	b.n	8004a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	2b10      	cmp	r3, #16
 800498a:	d119      	bne.n	80049c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0210 	mvn.w	r2, #16
 8004994:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e029      	b.n	8004a14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c0:	f7fc fb32 	bl	8001028 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d302      	bcc.n	80049d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d116      	bne.n	8004a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	f043 0220 	orr.w	r2, r3, #32
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e007      	b.n	8004a14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d1b5      	bne.n	800497e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a32:	d11b      	bne.n	8004a6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	f043 0204 	orr.w	r2, r3, #4
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a7c:	b08f      	sub	sp, #60	; 0x3c
 8004a7e:	af0a      	add	r7, sp, #40	; 0x28
 8004a80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e10f      	b.n	8004cac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f008 f98c 	bl	800cdc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2203      	movs	r2, #3
 8004ab0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f003 ffdd 	bl	8008a8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	603b      	str	r3, [r7, #0]
 8004ad6:	687e      	ldr	r6, [r7, #4]
 8004ad8:	466d      	mov	r5, sp
 8004ada:	f106 0410 	add.w	r4, r6, #16
 8004ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ae4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ae6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004aea:	e885 0003 	stmia.w	r5, {r0, r1}
 8004aee:	1d33      	adds	r3, r6, #4
 8004af0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004af2:	6838      	ldr	r0, [r7, #0]
 8004af4:	f003 ff68 	bl	80089c8 <USB_CoreInit>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2202      	movs	r2, #2
 8004b02:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e0d0      	b.n	8004cac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2100      	movs	r1, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	f003 ffcb 	bl	8008aac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
 8004b1a:	e04a      	b.n	8004bb2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b1c:	7bfa      	ldrb	r2, [r7, #15]
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	4613      	mov	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	333d      	adds	r3, #61	; 0x3d
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b30:	7bfa      	ldrb	r2, [r7, #15]
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	333c      	adds	r3, #60	; 0x3c
 8004b40:	7bfa      	ldrb	r2, [r7, #15]
 8004b42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b44:	7bfa      	ldrb	r2, [r7, #15]
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	b298      	uxth	r0, r3
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	3342      	adds	r3, #66	; 0x42
 8004b58:	4602      	mov	r2, r0
 8004b5a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b5c:	7bfa      	ldrb	r2, [r7, #15]
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	333f      	adds	r3, #63	; 0x3f
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b70:	7bfa      	ldrb	r2, [r7, #15]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	1a9b      	subs	r3, r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	3344      	adds	r3, #68	; 0x44
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b84:	7bfa      	ldrb	r2, [r7, #15]
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	3348      	adds	r3, #72	; 0x48
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b98:	7bfa      	ldrb	r2, [r7, #15]
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	3350      	adds	r3, #80	; 0x50
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	73fb      	strb	r3, [r7, #15]
 8004bb2:	7bfa      	ldrb	r2, [r7, #15]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d3af      	bcc.n	8004b1c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	73fb      	strb	r3, [r7, #15]
 8004bc0:	e044      	b.n	8004c4c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bc2:	7bfa      	ldrb	r2, [r7, #15]
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	1a9b      	subs	r3, r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bd8:	7bfa      	ldrb	r2, [r7, #15]
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004bea:	7bfa      	ldrb	r2, [r7, #15]
 8004bec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bee:	7bfa      	ldrb	r2, [r7, #15]
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	1a9b      	subs	r3, r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c04:	7bfa      	ldrb	r2, [r7, #15]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c1a:	7bfa      	ldrb	r2, [r7, #15]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c30:	7bfa      	ldrb	r2, [r7, #15]
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	1a9b      	subs	r3, r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	73fb      	strb	r3, [r7, #15]
 8004c4c:	7bfa      	ldrb	r2, [r7, #15]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d3b5      	bcc.n	8004bc2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	687e      	ldr	r6, [r7, #4]
 8004c5e:	466d      	mov	r5, sp
 8004c60:	f106 0410 	add.w	r4, r6, #16
 8004c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c70:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c74:	1d33      	adds	r3, r6, #4
 8004c76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c78:	6838      	ldr	r0, [r7, #0]
 8004c7a:	f003 ff41 	bl	8008b00 <USB_DevInit>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e00d      	b.n	8004cac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f004 f8fe 	bl	8008ea6 <USB_DevDisconnect>

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e25b      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d075      	beq.n	8004dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cd2:	4ba3      	ldr	r3, [pc, #652]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d00c      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cde:	4ba0      	ldr	r3, [pc, #640]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d112      	bne.n	8004d10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cea:	4b9d      	ldr	r3, [pc, #628]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf6:	d10b      	bne.n	8004d10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf8:	4b99      	ldr	r3, [pc, #612]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d05b      	beq.n	8004dbc <HAL_RCC_OscConfig+0x108>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d157      	bne.n	8004dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e236      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d18:	d106      	bne.n	8004d28 <HAL_RCC_OscConfig+0x74>
 8004d1a:	4b91      	ldr	r3, [pc, #580]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a90      	ldr	r2, [pc, #576]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	e01d      	b.n	8004d64 <HAL_RCC_OscConfig+0xb0>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d30:	d10c      	bne.n	8004d4c <HAL_RCC_OscConfig+0x98>
 8004d32:	4b8b      	ldr	r3, [pc, #556]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a8a      	ldr	r2, [pc, #552]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	4b88      	ldr	r3, [pc, #544]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a87      	ldr	r2, [pc, #540]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	e00b      	b.n	8004d64 <HAL_RCC_OscConfig+0xb0>
 8004d4c:	4b84      	ldr	r3, [pc, #528]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a83      	ldr	r2, [pc, #524]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	4b81      	ldr	r3, [pc, #516]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a80      	ldr	r2, [pc, #512]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d013      	beq.n	8004d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fc f95c 	bl	8001028 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fc f958 	bl	8001028 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	; 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e1fb      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d86:	4b76      	ldr	r3, [pc, #472]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0xc0>
 8004d92:	e014      	b.n	8004dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d94:	f7fc f948 	bl	8001028 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fc f944 	bl	8001028 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	; 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e1e7      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dae:	4b6c      	ldr	r3, [pc, #432]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0xe8>
 8004dba:	e000      	b.n	8004dbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d063      	beq.n	8004e92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dca:	4b65      	ldr	r3, [pc, #404]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00b      	beq.n	8004dee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dd6:	4b62      	ldr	r3, [pc, #392]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d11c      	bne.n	8004e1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004de2:	4b5f      	ldr	r3, [pc, #380]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d116      	bne.n	8004e1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dee:	4b5c      	ldr	r3, [pc, #368]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <HAL_RCC_OscConfig+0x152>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d001      	beq.n	8004e06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e1bb      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e06:	4b56      	ldr	r3, [pc, #344]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4952      	ldr	r1, [pc, #328]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e1a:	e03a      	b.n	8004e92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d020      	beq.n	8004e66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e24:	4b4f      	ldr	r3, [pc, #316]	; (8004f64 <HAL_RCC_OscConfig+0x2b0>)
 8004e26:	2201      	movs	r2, #1
 8004e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2a:	f7fc f8fd 	bl	8001028 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e32:	f7fc f8f9 	bl	8001028 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e19c      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e44:	4b46      	ldr	r3, [pc, #280]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e50:	4b43      	ldr	r3, [pc, #268]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	4940      	ldr	r1, [pc, #256]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	600b      	str	r3, [r1, #0]
 8004e64:	e015      	b.n	8004e92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e66:	4b3f      	ldr	r3, [pc, #252]	; (8004f64 <HAL_RCC_OscConfig+0x2b0>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6c:	f7fc f8dc 	bl	8001028 <HAL_GetTick>
 8004e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e74:	f7fc f8d8 	bl	8001028 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e17b      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e86:	4b36      	ldr	r3, [pc, #216]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1f0      	bne.n	8004e74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d030      	beq.n	8004f00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d016      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ea6:	4b30      	ldr	r3, [pc, #192]	; (8004f68 <HAL_RCC_OscConfig+0x2b4>)
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eac:	f7fc f8bc 	bl	8001028 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eb4:	f7fc f8b8 	bl	8001028 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e15b      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ec6:	4b26      	ldr	r3, [pc, #152]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f0      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x200>
 8004ed2:	e015      	b.n	8004f00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ed4:	4b24      	ldr	r3, [pc, #144]	; (8004f68 <HAL_RCC_OscConfig+0x2b4>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eda:	f7fc f8a5 	bl	8001028 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ee2:	f7fc f8a1 	bl	8001028 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e144      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef4:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1f0      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 80a0 	beq.w	800504e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f12:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10f      	bne.n	8004f3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	4a0e      	ldr	r2, [pc, #56]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f2e:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <HAL_RCC_OscConfig+0x2ac>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <HAL_RCC_OscConfig+0x2b8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d121      	bne.n	8004f8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f4a:	4b08      	ldr	r3, [pc, #32]	; (8004f6c <HAL_RCC_OscConfig+0x2b8>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a07      	ldr	r2, [pc, #28]	; (8004f6c <HAL_RCC_OscConfig+0x2b8>)
 8004f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f56:	f7fc f867 	bl	8001028 <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5c:	e011      	b.n	8004f82 <HAL_RCC_OscConfig+0x2ce>
 8004f5e:	bf00      	nop
 8004f60:	40023800 	.word	0x40023800
 8004f64:	42470000 	.word	0x42470000
 8004f68:	42470e80 	.word	0x42470e80
 8004f6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f70:	f7fc f85a 	bl	8001028 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e0fd      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f82:	4b81      	ldr	r3, [pc, #516]	; (8005188 <HAL_RCC_OscConfig+0x4d4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f0      	beq.n	8004f70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d106      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x2f0>
 8004f96:	4b7d      	ldr	r3, [pc, #500]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	4a7c      	ldr	r2, [pc, #496]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 8004f9c:	f043 0301 	orr.w	r3, r3, #1
 8004fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa2:	e01c      	b.n	8004fde <HAL_RCC_OscConfig+0x32a>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b05      	cmp	r3, #5
 8004faa:	d10c      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x312>
 8004fac:	4b77      	ldr	r3, [pc, #476]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb0:	4a76      	ldr	r2, [pc, #472]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 8004fb2:	f043 0304 	orr.w	r3, r3, #4
 8004fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb8:	4b74      	ldr	r3, [pc, #464]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 8004fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbc:	4a73      	ldr	r2, [pc, #460]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc4:	e00b      	b.n	8004fde <HAL_RCC_OscConfig+0x32a>
 8004fc6:	4b71      	ldr	r3, [pc, #452]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 8004fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fca:	4a70      	ldr	r2, [pc, #448]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 8004fcc:	f023 0301 	bic.w	r3, r3, #1
 8004fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fd2:	4b6e      	ldr	r3, [pc, #440]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd6:	4a6d      	ldr	r2, [pc, #436]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 8004fd8:	f023 0304 	bic.w	r3, r3, #4
 8004fdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d015      	beq.n	8005012 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe6:	f7fc f81f 	bl	8001028 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fec:	e00a      	b.n	8005004 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fee:	f7fc f81b 	bl	8001028 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e0bc      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005004:	4b61      	ldr	r3, [pc, #388]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0ee      	beq.n	8004fee <HAL_RCC_OscConfig+0x33a>
 8005010:	e014      	b.n	800503c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005012:	f7fc f809 	bl	8001028 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005018:	e00a      	b.n	8005030 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800501a:	f7fc f805 	bl	8001028 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	f241 3288 	movw	r2, #5000	; 0x1388
 8005028:	4293      	cmp	r3, r2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e0a6      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005030:	4b56      	ldr	r3, [pc, #344]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 8005032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1ee      	bne.n	800501a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800503c:	7dfb      	ldrb	r3, [r7, #23]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d105      	bne.n	800504e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005042:	4b52      	ldr	r3, [pc, #328]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	4a51      	ldr	r2, [pc, #324]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 8005048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800504c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 8092 	beq.w	800517c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005058:	4b4c      	ldr	r3, [pc, #304]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 030c 	and.w	r3, r3, #12
 8005060:	2b08      	cmp	r3, #8
 8005062:	d05c      	beq.n	800511e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d141      	bne.n	80050f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800506c:	4b48      	ldr	r3, [pc, #288]	; (8005190 <HAL_RCC_OscConfig+0x4dc>)
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005072:	f7fb ffd9 	bl	8001028 <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800507a:	f7fb ffd5 	bl	8001028 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e078      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508c:	4b3f      	ldr	r3, [pc, #252]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1f0      	bne.n	800507a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	019b      	lsls	r3, r3, #6
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ae:	085b      	lsrs	r3, r3, #1
 80050b0:	3b01      	subs	r3, #1
 80050b2:	041b      	lsls	r3, r3, #16
 80050b4:	431a      	orrs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	061b      	lsls	r3, r3, #24
 80050bc:	4933      	ldr	r1, [pc, #204]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050c2:	4b33      	ldr	r3, [pc, #204]	; (8005190 <HAL_RCC_OscConfig+0x4dc>)
 80050c4:	2201      	movs	r2, #1
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fb ffae 	bl	8001028 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d0:	f7fb ffaa 	bl	8001028 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e04d      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e2:	4b2a      	ldr	r3, [pc, #168]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0f0      	beq.n	80050d0 <HAL_RCC_OscConfig+0x41c>
 80050ee:	e045      	b.n	800517c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f0:	4b27      	ldr	r3, [pc, #156]	; (8005190 <HAL_RCC_OscConfig+0x4dc>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f6:	f7fb ff97 	bl	8001028 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050fe:	f7fb ff93 	bl	8001028 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e036      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005110:	4b1e      	ldr	r3, [pc, #120]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1f0      	bne.n	80050fe <HAL_RCC_OscConfig+0x44a>
 800511c:	e02e      	b.n	800517c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e029      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800512a:	4b18      	ldr	r3, [pc, #96]	; (800518c <HAL_RCC_OscConfig+0x4d8>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	429a      	cmp	r2, r3
 800513c:	d11c      	bne.n	8005178 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005148:	429a      	cmp	r2, r3
 800514a:	d115      	bne.n	8005178 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005152:	4013      	ands	r3, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005158:	4293      	cmp	r3, r2
 800515a:	d10d      	bne.n	8005178 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005166:	429a      	cmp	r2, r3
 8005168:	d106      	bne.n	8005178 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005174:	429a      	cmp	r2, r3
 8005176:	d001      	beq.n	800517c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40007000 	.word	0x40007000
 800518c:	40023800 	.word	0x40023800
 8005190:	42470060 	.word	0x42470060

08005194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e0cc      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051a8:	4b68      	ldr	r3, [pc, #416]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d90c      	bls.n	80051d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b6:	4b65      	ldr	r3, [pc, #404]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051be:	4b63      	ldr	r3, [pc, #396]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0b8      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d020      	beq.n	800521e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051e8:	4b59      	ldr	r3, [pc, #356]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a58      	ldr	r2, [pc, #352]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005200:	4b53      	ldr	r3, [pc, #332]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	4a52      	ldr	r2, [pc, #328]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800520a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800520c:	4b50      	ldr	r3, [pc, #320]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	494d      	ldr	r1, [pc, #308]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 800521a:	4313      	orrs	r3, r2
 800521c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d044      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d107      	bne.n	8005242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005232:	4b47      	ldr	r3, [pc, #284]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d119      	bne.n	8005272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e07f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d003      	beq.n	8005252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800524e:	2b03      	cmp	r3, #3
 8005250:	d107      	bne.n	8005262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005252:	4b3f      	ldr	r3, [pc, #252]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d109      	bne.n	8005272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e06f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005262:	4b3b      	ldr	r3, [pc, #236]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e067      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005272:	4b37      	ldr	r3, [pc, #220]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f023 0203 	bic.w	r2, r3, #3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4934      	ldr	r1, [pc, #208]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005280:	4313      	orrs	r3, r2
 8005282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005284:	f7fb fed0 	bl	8001028 <HAL_GetTick>
 8005288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	e00a      	b.n	80052a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800528c:	f7fb fecc 	bl	8001028 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	f241 3288 	movw	r2, #5000	; 0x1388
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e04f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a2:	4b2b      	ldr	r3, [pc, #172]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 020c 	and.w	r2, r3, #12
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d1eb      	bne.n	800528c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052b4:	4b25      	ldr	r3, [pc, #148]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d20c      	bcs.n	80052dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c2:	4b22      	ldr	r3, [pc, #136]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ca:	4b20      	ldr	r3, [pc, #128]	; (800534c <HAL_RCC_ClockConfig+0x1b8>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d001      	beq.n	80052dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e032      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e8:	4b19      	ldr	r3, [pc, #100]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4916      	ldr	r1, [pc, #88]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	490e      	ldr	r1, [pc, #56]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800531a:	f000 f82d 	bl	8005378 <HAL_RCC_GetSysClockFreq>
 800531e:	4601      	mov	r1, r0
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	4a0a      	ldr	r2, [pc, #40]	; (8005354 <HAL_RCC_ClockConfig+0x1c0>)
 800532c:	5cd3      	ldrb	r3, [r2, r3]
 800532e:	fa21 f303 	lsr.w	r3, r1, r3
 8005332:	4a09      	ldr	r2, [pc, #36]	; (8005358 <HAL_RCC_ClockConfig+0x1c4>)
 8005334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <HAL_RCC_ClockConfig+0x1c8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7fb fe30 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40023c00 	.word	0x40023c00
 8005350:	40023800 	.word	0x40023800
 8005354:	0800ec7c 	.word	0x0800ec7c
 8005358:	20000044 	.word	0x20000044
 800535c:	20000000 	.word	0x20000000

08005360 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005364:	4b03      	ldr	r3, [pc, #12]	; (8005374 <HAL_RCC_EnableCSS+0x14>)
 8005366:	2201      	movs	r2, #1
 8005368:	601a      	str	r2, [r3, #0]
}
 800536a:	bf00      	nop
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	4247004c 	.word	0x4247004c

08005378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	607b      	str	r3, [r7, #4]
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	2300      	movs	r3, #0
 8005388:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800538e:	4b63      	ldr	r3, [pc, #396]	; (800551c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b04      	cmp	r3, #4
 8005398:	d007      	beq.n	80053aa <HAL_RCC_GetSysClockFreq+0x32>
 800539a:	2b08      	cmp	r3, #8
 800539c:	d008      	beq.n	80053b0 <HAL_RCC_GetSysClockFreq+0x38>
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f040 80b4 	bne.w	800550c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053a4:	4b5e      	ldr	r3, [pc, #376]	; (8005520 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80053a6:	60bb      	str	r3, [r7, #8]
       break;
 80053a8:	e0b3      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053aa:	4b5e      	ldr	r3, [pc, #376]	; (8005524 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80053ac:	60bb      	str	r3, [r7, #8]
      break;
 80053ae:	e0b0      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053b0:	4b5a      	ldr	r3, [pc, #360]	; (800551c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053ba:	4b58      	ldr	r3, [pc, #352]	; (800551c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d04a      	beq.n	800545c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053c6:	4b55      	ldr	r3, [pc, #340]	; (800551c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	099b      	lsrs	r3, r3, #6
 80053cc:	f04f 0400 	mov.w	r4, #0
 80053d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	ea03 0501 	and.w	r5, r3, r1
 80053dc:	ea04 0602 	and.w	r6, r4, r2
 80053e0:	4629      	mov	r1, r5
 80053e2:	4632      	mov	r2, r6
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	f04f 0400 	mov.w	r4, #0
 80053ec:	0154      	lsls	r4, r2, #5
 80053ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053f2:	014b      	lsls	r3, r1, #5
 80053f4:	4619      	mov	r1, r3
 80053f6:	4622      	mov	r2, r4
 80053f8:	1b49      	subs	r1, r1, r5
 80053fa:	eb62 0206 	sbc.w	r2, r2, r6
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	f04f 0400 	mov.w	r4, #0
 8005406:	0194      	lsls	r4, r2, #6
 8005408:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800540c:	018b      	lsls	r3, r1, #6
 800540e:	1a5b      	subs	r3, r3, r1
 8005410:	eb64 0402 	sbc.w	r4, r4, r2
 8005414:	f04f 0100 	mov.w	r1, #0
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	00e2      	lsls	r2, r4, #3
 800541e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005422:	00d9      	lsls	r1, r3, #3
 8005424:	460b      	mov	r3, r1
 8005426:	4614      	mov	r4, r2
 8005428:	195b      	adds	r3, r3, r5
 800542a:	eb44 0406 	adc.w	r4, r4, r6
 800542e:	f04f 0100 	mov.w	r1, #0
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	0262      	lsls	r2, r4, #9
 8005438:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800543c:	0259      	lsls	r1, r3, #9
 800543e:	460b      	mov	r3, r1
 8005440:	4614      	mov	r4, r2
 8005442:	4618      	mov	r0, r3
 8005444:	4621      	mov	r1, r4
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f04f 0400 	mov.w	r4, #0
 800544c:	461a      	mov	r2, r3
 800544e:	4623      	mov	r3, r4
 8005450:	f7fb fc04 	bl	8000c5c <__aeabi_uldivmod>
 8005454:	4603      	mov	r3, r0
 8005456:	460c      	mov	r4, r1
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	e049      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800545c:	4b2f      	ldr	r3, [pc, #188]	; (800551c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	099b      	lsrs	r3, r3, #6
 8005462:	f04f 0400 	mov.w	r4, #0
 8005466:	f240 11ff 	movw	r1, #511	; 0x1ff
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	ea03 0501 	and.w	r5, r3, r1
 8005472:	ea04 0602 	and.w	r6, r4, r2
 8005476:	4629      	mov	r1, r5
 8005478:	4632      	mov	r2, r6
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	f04f 0400 	mov.w	r4, #0
 8005482:	0154      	lsls	r4, r2, #5
 8005484:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005488:	014b      	lsls	r3, r1, #5
 800548a:	4619      	mov	r1, r3
 800548c:	4622      	mov	r2, r4
 800548e:	1b49      	subs	r1, r1, r5
 8005490:	eb62 0206 	sbc.w	r2, r2, r6
 8005494:	f04f 0300 	mov.w	r3, #0
 8005498:	f04f 0400 	mov.w	r4, #0
 800549c:	0194      	lsls	r4, r2, #6
 800549e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80054a2:	018b      	lsls	r3, r1, #6
 80054a4:	1a5b      	subs	r3, r3, r1
 80054a6:	eb64 0402 	sbc.w	r4, r4, r2
 80054aa:	f04f 0100 	mov.w	r1, #0
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	00e2      	lsls	r2, r4, #3
 80054b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80054b8:	00d9      	lsls	r1, r3, #3
 80054ba:	460b      	mov	r3, r1
 80054bc:	4614      	mov	r4, r2
 80054be:	195b      	adds	r3, r3, r5
 80054c0:	eb44 0406 	adc.w	r4, r4, r6
 80054c4:	f04f 0100 	mov.w	r1, #0
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	02a2      	lsls	r2, r4, #10
 80054ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80054d2:	0299      	lsls	r1, r3, #10
 80054d4:	460b      	mov	r3, r1
 80054d6:	4614      	mov	r4, r2
 80054d8:	4618      	mov	r0, r3
 80054da:	4621      	mov	r1, r4
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f04f 0400 	mov.w	r4, #0
 80054e2:	461a      	mov	r2, r3
 80054e4:	4623      	mov	r3, r4
 80054e6:	f7fb fbb9 	bl	8000c5c <__aeabi_uldivmod>
 80054ea:	4603      	mov	r3, r0
 80054ec:	460c      	mov	r4, r1
 80054ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054f0:	4b0a      	ldr	r3, [pc, #40]	; (800551c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	0c1b      	lsrs	r3, r3, #16
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	3301      	adds	r3, #1
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	fbb2 f3f3 	udiv	r3, r2, r3
 8005508:	60bb      	str	r3, [r7, #8]
      break;
 800550a:	e002      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800550c:	4b04      	ldr	r3, [pc, #16]	; (8005520 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800550e:	60bb      	str	r3, [r7, #8]
      break;
 8005510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005512:	68bb      	ldr	r3, [r7, #8]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800551c:	40023800 	.word	0x40023800
 8005520:	00f42400 	.word	0x00f42400
 8005524:	007a1200 	.word	0x007a1200

08005528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800552c:	4b03      	ldr	r3, [pc, #12]	; (800553c <HAL_RCC_GetHCLKFreq+0x14>)
 800552e:	681b      	ldr	r3, [r3, #0]
}
 8005530:	4618      	mov	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20000044 	.word	0x20000044

08005540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005544:	f7ff fff0 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 8005548:	4601      	mov	r1, r0
 800554a:	4b05      	ldr	r3, [pc, #20]	; (8005560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	0a9b      	lsrs	r3, r3, #10
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	4a03      	ldr	r2, [pc, #12]	; (8005564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005556:	5cd3      	ldrb	r3, [r2, r3]
 8005558:	fa21 f303 	lsr.w	r3, r1, r3
}
 800555c:	4618      	mov	r0, r3
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40023800 	.word	0x40023800
 8005564:	0800ec8c 	.word	0x0800ec8c

08005568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800556c:	f7ff ffdc 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 8005570:	4601      	mov	r1, r0
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	0b5b      	lsrs	r3, r3, #13
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	4a03      	ldr	r2, [pc, #12]	; (800558c <HAL_RCC_GetPCLK2Freq+0x24>)
 800557e:	5cd3      	ldrb	r3, [r2, r3]
 8005580:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40023800 	.word	0x40023800
 800558c:	0800ec8c 	.word	0x0800ec8c

08005590 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d105      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d035      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055b8:	4b62      	ldr	r3, [pc, #392]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055be:	f7fb fd33 	bl	8001028 <HAL_GetTick>
 80055c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055c4:	e008      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055c6:	f7fb fd2f 	bl	8001028 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e0b0      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055d8:	4b5b      	ldr	r3, [pc, #364]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1f0      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	019a      	lsls	r2, r3, #6
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	071b      	lsls	r3, r3, #28
 80055f0:	4955      	ldr	r1, [pc, #340]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055f8:	4b52      	ldr	r3, [pc, #328]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80055fa:	2201      	movs	r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055fe:	f7fb fd13 	bl	8001028 <HAL_GetTick>
 8005602:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005604:	e008      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005606:	f7fb fd0f 	bl	8001028 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e090      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005618:	4b4b      	ldr	r3, [pc, #300]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8083 	beq.w	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	4b44      	ldr	r3, [pc, #272]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	4a43      	ldr	r2, [pc, #268]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005640:	6413      	str	r3, [r2, #64]	; 0x40
 8005642:	4b41      	ldr	r3, [pc, #260]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800564e:	4b3f      	ldr	r3, [pc, #252]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a3e      	ldr	r2, [pc, #248]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005658:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800565a:	f7fb fce5 	bl	8001028 <HAL_GetTick>
 800565e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005660:	e008      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005662:	f7fb fce1 	bl	8001028 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e062      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005674:	4b35      	ldr	r3, [pc, #212]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0f0      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005680:	4b31      	ldr	r3, [pc, #196]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005688:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d02f      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	429a      	cmp	r2, r3
 800569c:	d028      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800569e:	4b2a      	ldr	r3, [pc, #168]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056a8:	4b29      	ldr	r3, [pc, #164]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056ae:	4b28      	ldr	r3, [pc, #160]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056b4:	4a24      	ldr	r2, [pc, #144]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056ba:	4b23      	ldr	r3, [pc, #140]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d114      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056c6:	f7fb fcaf 	bl	8001028 <HAL_GetTick>
 80056ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056cc:	e00a      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ce:	f7fb fcab 	bl	8001028 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056dc:	4293      	cmp	r3, r2
 80056de:	d901      	bls.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e02a      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e4:	4b18      	ldr	r3, [pc, #96]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0ee      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056fc:	d10d      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80056fe:	4b12      	ldr	r3, [pc, #72]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800570e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005712:	490d      	ldr	r1, [pc, #52]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005714:	4313      	orrs	r3, r2
 8005716:	608b      	str	r3, [r1, #8]
 8005718:	e005      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800571a:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	4a0a      	ldr	r2, [pc, #40]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005720:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005724:	6093      	str	r3, [r2, #8]
 8005726:	4b08      	ldr	r3, [pc, #32]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005728:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005732:	4905      	ldr	r1, [pc, #20]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005734:	4313      	orrs	r3, r2
 8005736:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	42470068 	.word	0x42470068
 8005748:	40023800 	.word	0x40023800
 800574c:	40007000 	.word	0x40007000
 8005750:	42470e40 	.word	0x42470e40

08005754 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e083      	b.n	800586e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	7f5b      	ldrb	r3, [r3, #29]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d105      	bne.n	800577c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f007 f844 	bl	800c804 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	22ca      	movs	r2, #202	; 0xca
 8005788:	625a      	str	r2, [r3, #36]	; 0x24
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2253      	movs	r2, #83	; 0x53
 8005790:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f897 	bl	80058c6 <RTC_EnterInitMode>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d008      	beq.n	80057b0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	22ff      	movs	r2, #255	; 0xff
 80057a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2204      	movs	r2, #4
 80057aa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e05e      	b.n	800586e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80057be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6899      	ldr	r1, [r3, #8]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	68d2      	ldr	r2, [r2, #12]
 80057ea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6919      	ldr	r1, [r3, #16]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	041a      	lsls	r2, r3, #16
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800580e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10e      	bne.n	800583c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f829 	bl	8005876 <HAL_RTC_WaitForSynchro>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d008      	beq.n	800583c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	22ff      	movs	r2, #255	; 0xff
 8005830:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2204      	movs	r2, #4
 8005836:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e018      	b.n	800586e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800584a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	22ff      	movs	r2, #255	; 0xff
 8005864:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800586c:	2300      	movs	r3, #0
  }
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005890:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005892:	f7fb fbc9 	bl	8001028 <HAL_GetTick>
 8005896:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005898:	e009      	b.n	80058ae <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800589a:	f7fb fbc5 	bl	8001028 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058a8:	d901      	bls.n	80058ae <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e007      	b.n	80058be <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0ee      	beq.n	800589a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d119      	bne.n	8005914 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058ea:	f7fb fb9d 	bl	8001028 <HAL_GetTick>
 80058ee:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80058f0:	e009      	b.n	8005906 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80058f2:	f7fb fb99 	bl	8001028 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005900:	d901      	bls.n	8005906 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e007      	b.n	8005916 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0ee      	beq.n	80058f2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e056      	b.n	80059de <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f006 ff70 	bl	800c830 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005966:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	431a      	orrs	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800598c:	431a      	orrs	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	ea42 0103 	orr.w	r1, r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	0c1b      	lsrs	r3, r3, #16
 80059ae:	f003 0104 	and.w	r1, r3, #4
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b088      	sub	sp, #32
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	603b      	str	r3, [r7, #0]
 80059f2:	4613      	mov	r3, r2
 80059f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_SPI_Transmit+0x22>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e11e      	b.n	8005c46 <HAL_SPI_Transmit+0x260>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a10:	f7fb fb0a 	bl	8001028 <HAL_GetTick>
 8005a14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d002      	beq.n	8005a2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a26:	2302      	movs	r3, #2
 8005a28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a2a:	e103      	b.n	8005c34 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <HAL_SPI_Transmit+0x52>
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d102      	bne.n	8005a3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a3c:	e0fa      	b.n	8005c34 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2203      	movs	r2, #3
 8005a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	88fa      	ldrh	r2, [r7, #6]
 8005a56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a84:	d107      	bne.n	8005a96 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa0:	2b40      	cmp	r3, #64	; 0x40
 8005aa2:	d007      	beq.n	8005ab4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ab2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005abc:	d14b      	bne.n	8005b56 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <HAL_SPI_Transmit+0xe6>
 8005ac6:	8afb      	ldrh	r3, [r7, #22]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d13e      	bne.n	8005b4a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad0:	881a      	ldrh	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005adc:	1c9a      	adds	r2, r3, #2
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005af0:	e02b      	b.n	8005b4a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d112      	bne.n	8005b26 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b04:	881a      	ldrh	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	1c9a      	adds	r2, r3, #2
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b24:	e011      	b.n	8005b4a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b26:	f7fb fa7f 	bl	8001028 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d803      	bhi.n	8005b3e <HAL_SPI_Transmit+0x158>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b3c:	d102      	bne.n	8005b44 <HAL_SPI_Transmit+0x15e>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d102      	bne.n	8005b4a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b48:	e074      	b.n	8005c34 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1ce      	bne.n	8005af2 <HAL_SPI_Transmit+0x10c>
 8005b54:	e04c      	b.n	8005bf0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_SPI_Transmit+0x17e>
 8005b5e:	8afb      	ldrh	r3, [r7, #22]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d140      	bne.n	8005be6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	7812      	ldrb	r2, [r2, #0]
 8005b70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b8a:	e02c      	b.n	8005be6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d113      	bne.n	8005bc2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	7812      	ldrb	r2, [r2, #0]
 8005ba6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bc0:	e011      	b.n	8005be6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bc2:	f7fb fa31 	bl	8001028 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d803      	bhi.n	8005bda <HAL_SPI_Transmit+0x1f4>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bd8:	d102      	bne.n	8005be0 <HAL_SPI_Transmit+0x1fa>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d102      	bne.n	8005be6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005be4:	e026      	b.n	8005c34 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1cd      	bne.n	8005b8c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 fcc3 	bl	8006580 <SPI_EndRxTxTransaction>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c0e:	2300      	movs	r3, #0
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	77fb      	strb	r3, [r7, #31]
 8005c30:	e000      	b.n	8005c34 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005c32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c44:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3720      	adds	r7, #32
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b088      	sub	sp, #32
 8005c52:	af02      	add	r7, sp, #8
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	603b      	str	r3, [r7, #0]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c6a:	d112      	bne.n	8005c92 <HAL_SPI_Receive+0x44>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10e      	bne.n	8005c92 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2204      	movs	r2, #4
 8005c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c7c:	88fa      	ldrh	r2, [r7, #6]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	4613      	mov	r3, r2
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f8e9 	bl	8005e60 <HAL_SPI_TransmitReceive>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	e0e2      	b.n	8005e58 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_SPI_Receive+0x52>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e0db      	b.n	8005e58 <HAL_SPI_Receive+0x20a>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ca8:	f7fb f9be 	bl	8001028 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d002      	beq.n	8005cc0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005cba:	2302      	movs	r3, #2
 8005cbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cbe:	e0c2      	b.n	8005e46 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <HAL_SPI_Receive+0x7e>
 8005cc6:	88fb      	ldrh	r3, [r7, #6]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cd0:	e0b9      	b.n	8005e46 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	88fa      	ldrh	r2, [r7, #6]
 8005cea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	88fa      	ldrh	r2, [r7, #6]
 8005cf0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d18:	d107      	bne.n	8005d2a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d28:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d34:	2b40      	cmp	r3, #64	; 0x40
 8005d36:	d007      	beq.n	8005d48 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d162      	bne.n	8005e16 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d50:	e02e      	b.n	8005db0 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d115      	bne.n	8005d8c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f103 020c 	add.w	r2, r3, #12
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	7812      	ldrb	r2, [r2, #0]
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	1c5a      	adds	r2, r3, #1
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d8a:	e011      	b.n	8005db0 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d8c:	f7fb f94c 	bl	8001028 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d803      	bhi.n	8005da4 <HAL_SPI_Receive+0x156>
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005da2:	d102      	bne.n	8005daa <HAL_SPI_Receive+0x15c>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d102      	bne.n	8005db0 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005dae:	e04a      	b.n	8005e46 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1cb      	bne.n	8005d52 <HAL_SPI_Receive+0x104>
 8005dba:	e031      	b.n	8005e20 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d113      	bne.n	8005df2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	b292      	uxth	r2, r2
 8005dd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	1c9a      	adds	r2, r3, #2
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005df0:	e011      	b.n	8005e16 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005df2:	f7fb f919 	bl	8001028 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d803      	bhi.n	8005e0a <HAL_SPI_Receive+0x1bc>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e08:	d102      	bne.n	8005e10 <HAL_SPI_Receive+0x1c2>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e14:	e017      	b.n	8005e46 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1cd      	bne.n	8005dbc <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 fb45 	bl	80064b4 <SPI_EndRxTransaction>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2220      	movs	r2, #32
 8005e34:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	75fb      	strb	r3, [r7, #23]
 8005e42:	e000      	b.n	8005e46 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005e44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08c      	sub	sp, #48	; 0x30
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_SPI_TransmitReceive+0x26>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e18a      	b.n	800619c <HAL_SPI_TransmitReceive+0x33c>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e8e:	f7fb f8cb 	bl	8001028 <HAL_GetTick>
 8005e92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005ea4:	887b      	ldrh	r3, [r7, #2]
 8005ea6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d00f      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x70>
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eb6:	d107      	bne.n	8005ec8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d103      	bne.n	8005ec8 <HAL_SPI_TransmitReceive+0x68>
 8005ec0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d003      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ec8:	2302      	movs	r3, #2
 8005eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ece:	e15b      	b.n	8006188 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_SPI_TransmitReceive+0x82>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <HAL_SPI_TransmitReceive+0x82>
 8005edc:	887b      	ldrh	r3, [r7, #2]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d103      	bne.n	8005eea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ee8:	e14e      	b.n	8006188 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d003      	beq.n	8005efe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2205      	movs	r2, #5
 8005efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	887a      	ldrh	r2, [r7, #2]
 8005f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	887a      	ldrh	r2, [r7, #2]
 8005f14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	887a      	ldrh	r2, [r7, #2]
 8005f20:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	887a      	ldrh	r2, [r7, #2]
 8005f26:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3e:	2b40      	cmp	r3, #64	; 0x40
 8005f40:	d007      	beq.n	8005f52 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f5a:	d178      	bne.n	800604e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <HAL_SPI_TransmitReceive+0x10a>
 8005f64:	8b7b      	ldrh	r3, [r7, #26]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d166      	bne.n	8006038 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	881a      	ldrh	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	1c9a      	adds	r2, r3, #2
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f8e:	e053      	b.n	8006038 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d11b      	bne.n	8005fd6 <HAL_SPI_TransmitReceive+0x176>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d016      	beq.n	8005fd6 <HAL_SPI_TransmitReceive+0x176>
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d113      	bne.n	8005fd6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb2:	881a      	ldrh	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbe:	1c9a      	adds	r2, r3, #2
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d119      	bne.n	8006018 <HAL_SPI_TransmitReceive+0x1b8>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d014      	beq.n	8006018 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68da      	ldr	r2, [r3, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	b292      	uxth	r2, r2
 8005ffa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	1c9a      	adds	r2, r3, #2
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800600a:	b29b      	uxth	r3, r3
 800600c:	3b01      	subs	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006014:	2301      	movs	r3, #1
 8006016:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006018:	f7fb f806 	bl	8001028 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006024:	429a      	cmp	r2, r3
 8006026:	d807      	bhi.n	8006038 <HAL_SPI_TransmitReceive+0x1d8>
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800602e:	d003      	beq.n	8006038 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006036:	e0a7      	b.n	8006188 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1a6      	bne.n	8005f90 <HAL_SPI_TransmitReceive+0x130>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1a1      	bne.n	8005f90 <HAL_SPI_TransmitReceive+0x130>
 800604c:	e07c      	b.n	8006148 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <HAL_SPI_TransmitReceive+0x1fc>
 8006056:	8b7b      	ldrh	r3, [r7, #26]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d16b      	bne.n	8006134 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	330c      	adds	r3, #12
 8006066:	7812      	ldrb	r2, [r2, #0]
 8006068:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006082:	e057      	b.n	8006134 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b02      	cmp	r3, #2
 8006090:	d11c      	bne.n	80060cc <HAL_SPI_TransmitReceive+0x26c>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006096:	b29b      	uxth	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d017      	beq.n	80060cc <HAL_SPI_TransmitReceive+0x26c>
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d114      	bne.n	80060cc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	330c      	adds	r3, #12
 80060ac:	7812      	ldrb	r2, [r2, #0]
 80060ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d119      	bne.n	800610e <HAL_SPI_TransmitReceive+0x2ae>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060de:	b29b      	uxth	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d014      	beq.n	800610e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006100:	b29b      	uxth	r3, r3
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800610a:	2301      	movs	r3, #1
 800610c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800610e:	f7fa ff8b 	bl	8001028 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800611a:	429a      	cmp	r2, r3
 800611c:	d803      	bhi.n	8006126 <HAL_SPI_TransmitReceive+0x2c6>
 800611e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006124:	d102      	bne.n	800612c <HAL_SPI_TransmitReceive+0x2cc>
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	2b00      	cmp	r3, #0
 800612a:	d103      	bne.n	8006134 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006132:	e029      	b.n	8006188 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1a2      	bne.n	8006084 <HAL_SPI_TransmitReceive+0x224>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d19d      	bne.n	8006084 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 fa17 	bl	8006580 <SPI_EndRxTxTransaction>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d006      	beq.n	8006166 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2220      	movs	r2, #32
 8006162:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006164:	e010      	b.n	8006188 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10b      	bne.n	8006186 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800616e:	2300      	movs	r3, #0
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	e000      	b.n	8006188 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006186:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006198:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800619c:	4618      	mov	r0, r3
 800619e:	3730      	adds	r7, #48	; 0x30
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	099b      	lsrs	r3, r3, #6
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10f      	bne.n	80061e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	099b      	lsrs	r3, r3, #6
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d004      	beq.n	80061e8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4798      	blx	r3
    return;
 80061e6:	e0d8      	b.n	800639a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	085b      	lsrs	r3, r3, #1
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <HAL_SPI_IRQHandler+0x66>
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	09db      	lsrs	r3, r3, #7
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d004      	beq.n	800620a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	4798      	blx	r3
    return;
 8006208:	e0c7      	b.n	800639a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	095b      	lsrs	r3, r3, #5
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10c      	bne.n	8006230 <HAL_SPI_IRQHandler+0x8c>
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	099b      	lsrs	r3, r3, #6
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	0a1b      	lsrs	r3, r3, #8
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 80b5 	beq.w	800639a <HAL_SPI_IRQHandler+0x1f6>
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80ae 	beq.w	800639a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	099b      	lsrs	r3, r3, #6
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d023      	beq.n	8006292 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b03      	cmp	r3, #3
 8006254:	d011      	beq.n	800627a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625a:	f043 0204 	orr.w	r2, r3, #4
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	e00b      	b.n	8006292 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800627a:	2300      	movs	r3, #0
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	613b      	str	r3, [r7, #16]
 800628e:	693b      	ldr	r3, [r7, #16]
        return;
 8006290:	e083      	b.n	800639a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d014      	beq.n	80062c8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a2:	f043 0201 	orr.w	r2, r3, #1
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	0a1b      	lsrs	r3, r3, #8
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00c      	beq.n	80062ee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d8:	f043 0208 	orr.w	r2, r3, #8
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80062e0:	2300      	movs	r3, #0
 80062e2:	60bb      	str	r3, [r7, #8]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	60bb      	str	r3, [r7, #8]
 80062ec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d050      	beq.n	8006398 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006304:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d104      	bne.n	8006322 <HAL_SPI_IRQHandler+0x17e>
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d034      	beq.n	800638c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0203 	bic.w	r2, r2, #3
 8006330:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006336:	2b00      	cmp	r3, #0
 8006338:	d011      	beq.n	800635e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800633e:	4a18      	ldr	r2, [pc, #96]	; (80063a0 <HAL_SPI_IRQHandler+0x1fc>)
 8006340:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006346:	4618      	mov	r0, r3
 8006348:	f7fc ff4c 	bl	80031e4 <HAL_DMA_Abort_IT>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006356:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006362:	2b00      	cmp	r3, #0
 8006364:	d016      	beq.n	8006394 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800636a:	4a0d      	ldr	r2, [pc, #52]	; (80063a0 <HAL_SPI_IRQHandler+0x1fc>)
 800636c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006372:	4618      	mov	r0, r3
 8006374:	f7fc ff36 	bl	80031e4 <HAL_DMA_Abort_IT>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006382:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800638a:	e003      	b.n	8006394 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f809 	bl	80063a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006392:	e000      	b.n	8006396 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006394:	bf00      	nop
    return;
 8006396:	bf00      	nop
 8006398:	bf00      	nop
  }
}
 800639a:	3720      	adds	r7, #32
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	080063b9 	.word	0x080063b9

080063a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f7ff ffe6 	bl	80063a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063d8:	bf00      	nop
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	603b      	str	r3, [r7, #0]
 80063ec:	4613      	mov	r3, r2
 80063ee:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063f0:	e04c      	b.n	800648c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063f8:	d048      	beq.n	800648c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80063fa:	f7fa fe15 	bl	8001028 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	429a      	cmp	r2, r3
 8006408:	d902      	bls.n	8006410 <SPI_WaitFlagStateUntilTimeout+0x30>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d13d      	bne.n	800648c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800641e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006428:	d111      	bne.n	800644e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006432:	d004      	beq.n	800643e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800643c:	d107      	bne.n	800644e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800644c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006456:	d10f      	bne.n	8006478 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006476:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e00f      	b.n	80064ac <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4013      	ands	r3, r2
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	429a      	cmp	r2, r3
 800649a:	bf0c      	ite	eq
 800649c:	2301      	moveq	r3, #1
 800649e:	2300      	movne	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d1a3      	bne.n	80063f2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064c8:	d111      	bne.n	80064ee <SPI_EndRxTransaction+0x3a>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064d2:	d004      	beq.n	80064de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064dc:	d107      	bne.n	80064ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064f6:	d12a      	bne.n	800654e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006500:	d012      	beq.n	8006528 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2200      	movs	r2, #0
 800650a:	2180      	movs	r1, #128	; 0x80
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f7ff ff67 	bl	80063e0 <SPI_WaitFlagStateUntilTimeout>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d02d      	beq.n	8006574 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651c:	f043 0220 	orr.w	r2, r3, #32
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e026      	b.n	8006576 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2200      	movs	r2, #0
 8006530:	2101      	movs	r1, #1
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f7ff ff54 	bl	80063e0 <SPI_WaitFlagStateUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d01a      	beq.n	8006574 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006542:	f043 0220 	orr.w	r2, r3, #32
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e013      	b.n	8006576 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2200      	movs	r2, #0
 8006556:	2101      	movs	r1, #1
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f7ff ff41 	bl	80063e0 <SPI_WaitFlagStateUntilTimeout>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d007      	beq.n	8006574 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006568:	f043 0220 	orr.w	r2, r3, #32
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e000      	b.n	8006576 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
	...

08006580 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af02      	add	r7, sp, #8
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800658c:	4b1b      	ldr	r3, [pc, #108]	; (80065fc <SPI_EndRxTxTransaction+0x7c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1b      	ldr	r2, [pc, #108]	; (8006600 <SPI_EndRxTxTransaction+0x80>)
 8006592:	fba2 2303 	umull	r2, r3, r2, r3
 8006596:	0d5b      	lsrs	r3, r3, #21
 8006598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800659c:	fb02 f303 	mul.w	r3, r2, r3
 80065a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065aa:	d112      	bne.n	80065d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2200      	movs	r2, #0
 80065b4:	2180      	movs	r1, #128	; 0x80
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7ff ff12 	bl	80063e0 <SPI_WaitFlagStateUntilTimeout>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d016      	beq.n	80065f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c6:	f043 0220 	orr.w	r2, r3, #32
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e00f      	b.n	80065f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00a      	beq.n	80065ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	3b01      	subs	r3, #1
 80065dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e8:	2b80      	cmp	r3, #128	; 0x80
 80065ea:	d0f2      	beq.n	80065d2 <SPI_EndRxTxTransaction+0x52>
 80065ec:	e000      	b.n	80065f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80065ee:	bf00      	nop
  }

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000044 	.word	0x20000044
 8006600:	165e9f81 	.word	0x165e9f81

08006604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e01d      	b.n	8006652 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f006 f950 	bl	800c8d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3304      	adds	r3, #4
 8006640:	4619      	mov	r1, r3
 8006642:	4610      	mov	r0, r2
 8006644:	f000 fdf6 	bl	8007234 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800665a:	b480      	push	{r7}
 800665c:	b085      	sub	sp, #20
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2202      	movs	r2, #2
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b06      	cmp	r3, #6
 800667a:	d007      	beq.n	800668c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b085      	sub	sp, #20
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f042 0201 	orr.w	r2, r2, #1
 80066b8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2b06      	cmp	r3, #6
 80066ca:	d007      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0201 	orr.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b082      	sub	sp, #8
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e01d      	b.n	8006738 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d106      	bne.n	8006716 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f815 	bl	8006740 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	3304      	adds	r3, #4
 8006726:	4619      	mov	r1, r3
 8006728:	4610      	mov	r0, r2
 800672a:	f000 fd83 	bl	8007234 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2201      	movs	r2, #1
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f001 f978 	bl	8007a5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a15      	ldr	r2, [pc, #84]	; (80067c8 <HAL_TIM_OC_Start+0x74>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d004      	beq.n	8006780 <HAL_TIM_OC_Start+0x2c>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a14      	ldr	r2, [pc, #80]	; (80067cc <HAL_TIM_OC_Start+0x78>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d101      	bne.n	8006784 <HAL_TIM_OC_Start+0x30>
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <HAL_TIM_OC_Start+0x32>
 8006784:	2300      	movs	r3, #0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d007      	beq.n	800679a <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006798:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b06      	cmp	r3, #6
 80067aa:	d007      	beq.n	80067bc <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0201 	orr.w	r2, r2, #1
 80067ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40010000 	.word	0x40010000
 80067cc:	40010400 	.word	0x40010400

080067d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e01d      	b.n	800681e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f815 	bl	8006826 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	3304      	adds	r3, #4
 800680c:	4619      	mov	r1, r3
 800680e:	4610      	mov	r0, r2
 8006810:	f000 fd10 	bl	8007234 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
	...

0800683c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2201      	movs	r2, #1
 800684c:	6839      	ldr	r1, [r7, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f001 f904 	bl	8007a5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a15      	ldr	r2, [pc, #84]	; (80068b0 <HAL_TIM_PWM_Start+0x74>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d004      	beq.n	8006868 <HAL_TIM_PWM_Start+0x2c>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a14      	ldr	r2, [pc, #80]	; (80068b4 <HAL_TIM_PWM_Start+0x78>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d101      	bne.n	800686c <HAL_TIM_PWM_Start+0x30>
 8006868:	2301      	movs	r3, #1
 800686a:	e000      	b.n	800686e <HAL_TIM_PWM_Start+0x32>
 800686c:	2300      	movs	r3, #0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d007      	beq.n	8006882 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006880:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f003 0307 	and.w	r3, r3, #7
 800688c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b06      	cmp	r3, #6
 8006892:	d007      	beq.n	80068a4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	40010000 	.word	0x40010000
 80068b4:	40010400 	.word	0x40010400

080068b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e01d      	b.n	8006906 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d106      	bne.n	80068e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f815 	bl	800690e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	3304      	adds	r3, #4
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	f000 fc9c 	bl	8007234 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b086      	sub	sp, #24
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e083      	b.n	8006a3e <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f006 f8f0 	bl	800cb30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6812      	ldr	r2, [r2, #0]
 8006962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006966:	f023 0307 	bic.w	r3, r3, #7
 800696a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3304      	adds	r3, #4
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f000 fc5c 	bl	8007234 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069a4:	f023 0303 	bic.w	r3, r3, #3
 80069a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	689a      	ldr	r2, [r3, #8]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	021b      	lsls	r3, r3, #8
 80069b4:	4313      	orrs	r3, r2
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80069c2:	f023 030c 	bic.w	r3, r3, #12
 80069c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	4313      	orrs	r3, r2
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	011a      	lsls	r2, r3, #4
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	031b      	lsls	r3, r3, #12
 80069f2:	4313      	orrs	r3, r2
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006a00:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006a08:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	4313      	orrs	r3, r2
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <HAL_TIM_Encoder_Start_IT+0x16>
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d010      	beq.n	8006a7c <HAL_TIM_Encoder_Start_IT+0x36>
 8006a5a:	e01f      	b.n	8006a9c <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2201      	movs	r2, #1
 8006a62:	2100      	movs	r1, #0
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fff9 	bl	8007a5c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68da      	ldr	r2, [r3, #12]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0202 	orr.w	r2, r2, #2
 8006a78:	60da      	str	r2, [r3, #12]
      break;
 8006a7a:	e02e      	b.n	8006ada <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2201      	movs	r2, #1
 8006a82:	2104      	movs	r1, #4
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 ffe9 	bl	8007a5c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68da      	ldr	r2, [r3, #12]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f042 0204 	orr.w	r2, r2, #4
 8006a98:	60da      	str	r2, [r3, #12]
      break;
 8006a9a:	e01e      	b.n	8006ada <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 ffd9 	bl	8007a5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	2104      	movs	r1, #4
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 ffd2 	bl	8007a5c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0202 	orr.w	r2, r2, #2
 8006ac6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0204 	orr.w	r2, r2, #4
 8006ad6:	60da      	str	r2, [r3, #12]
      break;
 8006ad8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f042 0201 	orr.w	r2, r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d122      	bne.n	8006b50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d11b      	bne.n	8006b50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f06f 0202 	mvn.w	r2, #2
 8006b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f004 fe92 	bl	800b860 <HAL_TIM_IC_CaptureCallback>
 8006b3c:	e005      	b.n	8006b4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fb59 	bl	80071f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fb60 	bl	800720a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f003 0304 	and.w	r3, r3, #4
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d122      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d11b      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f06f 0204 	mvn.w	r2, #4
 8006b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f004 fe68 	bl	800b860 <HAL_TIM_IC_CaptureCallback>
 8006b90:	e005      	b.n	8006b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fb2f 	bl	80071f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fb36 	bl	800720a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0308 	and.w	r3, r3, #8
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	d122      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f003 0308 	and.w	r3, r3, #8
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	d11b      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f06f 0208 	mvn.w	r2, #8
 8006bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2204      	movs	r2, #4
 8006bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f004 fe3e 	bl	800b860 <HAL_TIM_IC_CaptureCallback>
 8006be4:	e005      	b.n	8006bf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fb05 	bl	80071f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fb0c 	bl	800720a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0310 	and.w	r3, r3, #16
 8006c02:	2b10      	cmp	r3, #16
 8006c04:	d122      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	2b10      	cmp	r3, #16
 8006c12:	d11b      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0210 	mvn.w	r2, #16
 8006c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2208      	movs	r2, #8
 8006c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f004 fe14 	bl	800b860 <HAL_TIM_IC_CaptureCallback>
 8006c38:	e005      	b.n	8006c46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fadb 	bl	80071f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fae2 	bl	800720a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d10e      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d107      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0201 	mvn.w	r2, #1
 8006c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f004 fc48 	bl	800b508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c82:	2b80      	cmp	r3, #128	; 0x80
 8006c84:	d10e      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c90:	2b80      	cmp	r3, #128	; 0x80
 8006c92:	d107      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f001 f804 	bl	8007cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cae:	2b40      	cmp	r3, #64	; 0x40
 8006cb0:	d10e      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbc:	2b40      	cmp	r3, #64	; 0x40
 8006cbe:	d107      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 faa7 	bl	800721e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	d10e      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f003 0320 	and.w	r3, r3, #32
 8006ce8:	2b20      	cmp	r3, #32
 8006cea:	d107      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f06f 0220 	mvn.w	r2, #32
 8006cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 ffce 	bl	8007c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <HAL_TIM_OC_ConfigChannel+0x1a>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e04e      	b.n	8006dbc <HAL_TIM_OC_ConfigChannel+0xb8>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2202      	movs	r2, #2
 8006d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b0c      	cmp	r3, #12
 8006d32:	d839      	bhi.n	8006da8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8006d34:	a201      	add	r2, pc, #4	; (adr r2, 8006d3c <HAL_TIM_OC_ConfigChannel+0x38>)
 8006d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3a:	bf00      	nop
 8006d3c:	08006d71 	.word	0x08006d71
 8006d40:	08006da9 	.word	0x08006da9
 8006d44:	08006da9 	.word	0x08006da9
 8006d48:	08006da9 	.word	0x08006da9
 8006d4c:	08006d7f 	.word	0x08006d7f
 8006d50:	08006da9 	.word	0x08006da9
 8006d54:	08006da9 	.word	0x08006da9
 8006d58:	08006da9 	.word	0x08006da9
 8006d5c:	08006d8d 	.word	0x08006d8d
 8006d60:	08006da9 	.word	0x08006da9
 8006d64:	08006da9 	.word	0x08006da9
 8006d68:	08006da9 	.word	0x08006da9
 8006d6c:	08006d9b 	.word	0x08006d9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68b9      	ldr	r1, [r7, #8]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 fafc 	bl	8007374 <TIM_OC1_SetConfig>
      break;
 8006d7c:	e015      	b.n	8006daa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68b9      	ldr	r1, [r7, #8]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fb65 	bl	8007454 <TIM_OC2_SetConfig>
      break;
 8006d8a:	e00e      	b.n	8006daa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fbd4 	bl	8007540 <TIM_OC3_SetConfig>
      break;
 8006d98:	e007      	b.n	8006daa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68b9      	ldr	r1, [r7, #8]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 fc41 	bl	8007628 <TIM_OC4_SetConfig>
      break;
 8006da6:	e000      	b.n	8006daa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006da8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d101      	bne.n	8006dde <HAL_TIM_IC_ConfigChannel+0x1a>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	e08a      	b.n	8006ef4 <HAL_TIM_IC_ConfigChannel+0x130>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2202      	movs	r2, #2
 8006dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d11b      	bne.n	8006e2c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6818      	ldr	r0, [r3, #0]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	6819      	ldr	r1, [r3, #0]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f000 fc66 	bl	80076d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	699a      	ldr	r2, [r3, #24]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 020c 	bic.w	r2, r2, #12
 8006e16:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6999      	ldr	r1, [r3, #24]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	619a      	str	r2, [r3, #24]
 8006e2a:	e05a      	b.n	8006ee2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d11c      	bne.n	8006e6c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6818      	ldr	r0, [r3, #0]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	6819      	ldr	r1, [r3, #0]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f000 fcea 	bl	800781a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	699a      	ldr	r2, [r3, #24]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006e54:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6999      	ldr	r1, [r3, #24]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	021a      	lsls	r2, r3, #8
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	619a      	str	r2, [r3, #24]
 8006e6a:	e03a      	b.n	8006ee2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b08      	cmp	r3, #8
 8006e70:	d11b      	bne.n	8006eaa <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6818      	ldr	r0, [r3, #0]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	6819      	ldr	r1, [r3, #0]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f000 fd37 	bl	80078f4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69da      	ldr	r2, [r3, #28]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 020c 	bic.w	r2, r2, #12
 8006e94:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69d9      	ldr	r1, [r3, #28]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	689a      	ldr	r2, [r3, #8]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	61da      	str	r2, [r3, #28]
 8006ea8:	e01b      	b.n	8006ee2 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6818      	ldr	r0, [r3, #0]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	6819      	ldr	r1, [r3, #0]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f000 fd57 	bl	800796c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69da      	ldr	r2, [r3, #28]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ecc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69d9      	ldr	r1, [r3, #28]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	021a      	lsls	r2, r3, #8
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006f12:	2302      	movs	r3, #2
 8006f14:	e0b4      	b.n	8007080 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2202      	movs	r2, #2
 8006f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b0c      	cmp	r3, #12
 8006f2a:	f200 809f 	bhi.w	800706c <HAL_TIM_PWM_ConfigChannel+0x170>
 8006f2e:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f34:	08006f69 	.word	0x08006f69
 8006f38:	0800706d 	.word	0x0800706d
 8006f3c:	0800706d 	.word	0x0800706d
 8006f40:	0800706d 	.word	0x0800706d
 8006f44:	08006fa9 	.word	0x08006fa9
 8006f48:	0800706d 	.word	0x0800706d
 8006f4c:	0800706d 	.word	0x0800706d
 8006f50:	0800706d 	.word	0x0800706d
 8006f54:	08006feb 	.word	0x08006feb
 8006f58:	0800706d 	.word	0x0800706d
 8006f5c:	0800706d 	.word	0x0800706d
 8006f60:	0800706d 	.word	0x0800706d
 8006f64:	0800702b 	.word	0x0800702b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68b9      	ldr	r1, [r7, #8]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fa00 	bl	8007374 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	699a      	ldr	r2, [r3, #24]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f042 0208 	orr.w	r2, r2, #8
 8006f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	699a      	ldr	r2, [r3, #24]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0204 	bic.w	r2, r2, #4
 8006f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6999      	ldr	r1, [r3, #24]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	691a      	ldr	r2, [r3, #16]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	619a      	str	r2, [r3, #24]
      break;
 8006fa6:	e062      	b.n	800706e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68b9      	ldr	r1, [r7, #8]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fa50 	bl	8007454 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	699a      	ldr	r2, [r3, #24]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6999      	ldr	r1, [r3, #24]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	021a      	lsls	r2, r3, #8
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	619a      	str	r2, [r3, #24]
      break;
 8006fe8:	e041      	b.n	800706e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 faa5 	bl	8007540 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69da      	ldr	r2, [r3, #28]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f042 0208 	orr.w	r2, r2, #8
 8007004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69da      	ldr	r2, [r3, #28]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 0204 	bic.w	r2, r2, #4
 8007014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69d9      	ldr	r1, [r3, #28]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	430a      	orrs	r2, r1
 8007026:	61da      	str	r2, [r3, #28]
      break;
 8007028:	e021      	b.n	800706e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68b9      	ldr	r1, [r7, #8]
 8007030:	4618      	mov	r0, r3
 8007032:	f000 faf9 	bl	8007628 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	69da      	ldr	r2, [r3, #28]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	69da      	ldr	r2, [r3, #28]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	69d9      	ldr	r1, [r3, #28]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	021a      	lsls	r2, r3, #8
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	61da      	str	r2, [r3, #28]
      break;
 800706a:	e000      	b.n	800706e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800706c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007098:	2b01      	cmp	r3, #1
 800709a:	d101      	bne.n	80070a0 <HAL_TIM_ConfigClockSource+0x18>
 800709c:	2302      	movs	r3, #2
 800709e:	e0a6      	b.n	80071ee <HAL_TIM_ConfigClockSource+0x166>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b40      	cmp	r3, #64	; 0x40
 80070d6:	d067      	beq.n	80071a8 <HAL_TIM_ConfigClockSource+0x120>
 80070d8:	2b40      	cmp	r3, #64	; 0x40
 80070da:	d80b      	bhi.n	80070f4 <HAL_TIM_ConfigClockSource+0x6c>
 80070dc:	2b10      	cmp	r3, #16
 80070de:	d073      	beq.n	80071c8 <HAL_TIM_ConfigClockSource+0x140>
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	d802      	bhi.n	80070ea <HAL_TIM_ConfigClockSource+0x62>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d06f      	beq.n	80071c8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80070e8:	e078      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80070ea:	2b20      	cmp	r3, #32
 80070ec:	d06c      	beq.n	80071c8 <HAL_TIM_ConfigClockSource+0x140>
 80070ee:	2b30      	cmp	r3, #48	; 0x30
 80070f0:	d06a      	beq.n	80071c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80070f2:	e073      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80070f4:	2b70      	cmp	r3, #112	; 0x70
 80070f6:	d00d      	beq.n	8007114 <HAL_TIM_ConfigClockSource+0x8c>
 80070f8:	2b70      	cmp	r3, #112	; 0x70
 80070fa:	d804      	bhi.n	8007106 <HAL_TIM_ConfigClockSource+0x7e>
 80070fc:	2b50      	cmp	r3, #80	; 0x50
 80070fe:	d033      	beq.n	8007168 <HAL_TIM_ConfigClockSource+0xe0>
 8007100:	2b60      	cmp	r3, #96	; 0x60
 8007102:	d041      	beq.n	8007188 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007104:	e06a      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710a:	d066      	beq.n	80071da <HAL_TIM_ConfigClockSource+0x152>
 800710c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007110:	d017      	beq.n	8007142 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007112:	e063      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	6899      	ldr	r1, [r3, #8]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f000 fc7a 	bl	8007a1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007136:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	609a      	str	r2, [r3, #8]
      break;
 8007140:	e04c      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6818      	ldr	r0, [r3, #0]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	6899      	ldr	r1, [r3, #8]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f000 fc63 	bl	8007a1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007164:	609a      	str	r2, [r3, #8]
      break;
 8007166:	e039      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6818      	ldr	r0, [r3, #0]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	6859      	ldr	r1, [r3, #4]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	461a      	mov	r2, r3
 8007176:	f000 fb21 	bl	80077bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2150      	movs	r1, #80	; 0x50
 8007180:	4618      	mov	r0, r3
 8007182:	f000 fc30 	bl	80079e6 <TIM_ITRx_SetConfig>
      break;
 8007186:	e029      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	6859      	ldr	r1, [r3, #4]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	461a      	mov	r2, r3
 8007196:	f000 fb7d 	bl	8007894 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2160      	movs	r1, #96	; 0x60
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fc20 	bl	80079e6 <TIM_ITRx_SetConfig>
      break;
 80071a6:	e019      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	6859      	ldr	r1, [r3, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	461a      	mov	r2, r3
 80071b6:	f000 fb01 	bl	80077bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2140      	movs	r1, #64	; 0x40
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fc10 	bl	80079e6 <TIM_ITRx_SetConfig>
      break;
 80071c6:	e009      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4619      	mov	r1, r3
 80071d2:	4610      	mov	r0, r2
 80071d4:	f000 fc07 	bl	80079e6 <TIM_ITRx_SetConfig>
      break;
 80071d8:	e000      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80071da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b083      	sub	sp, #12
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
	...

08007234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a40      	ldr	r2, [pc, #256]	; (8007348 <TIM_Base_SetConfig+0x114>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d013      	beq.n	8007274 <TIM_Base_SetConfig+0x40>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007252:	d00f      	beq.n	8007274 <TIM_Base_SetConfig+0x40>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a3d      	ldr	r2, [pc, #244]	; (800734c <TIM_Base_SetConfig+0x118>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00b      	beq.n	8007274 <TIM_Base_SetConfig+0x40>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a3c      	ldr	r2, [pc, #240]	; (8007350 <TIM_Base_SetConfig+0x11c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d007      	beq.n	8007274 <TIM_Base_SetConfig+0x40>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a3b      	ldr	r2, [pc, #236]	; (8007354 <TIM_Base_SetConfig+0x120>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d003      	beq.n	8007274 <TIM_Base_SetConfig+0x40>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a3a      	ldr	r2, [pc, #232]	; (8007358 <TIM_Base_SetConfig+0x124>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d108      	bne.n	8007286 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	4313      	orrs	r3, r2
 8007284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a2f      	ldr	r2, [pc, #188]	; (8007348 <TIM_Base_SetConfig+0x114>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d02b      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007294:	d027      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a2c      	ldr	r2, [pc, #176]	; (800734c <TIM_Base_SetConfig+0x118>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d023      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a2b      	ldr	r2, [pc, #172]	; (8007350 <TIM_Base_SetConfig+0x11c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d01f      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a2a      	ldr	r2, [pc, #168]	; (8007354 <TIM_Base_SetConfig+0x120>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d01b      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a29      	ldr	r2, [pc, #164]	; (8007358 <TIM_Base_SetConfig+0x124>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d017      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a28      	ldr	r2, [pc, #160]	; (800735c <TIM_Base_SetConfig+0x128>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d013      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a27      	ldr	r2, [pc, #156]	; (8007360 <TIM_Base_SetConfig+0x12c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00f      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a26      	ldr	r2, [pc, #152]	; (8007364 <TIM_Base_SetConfig+0x130>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00b      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a25      	ldr	r2, [pc, #148]	; (8007368 <TIM_Base_SetConfig+0x134>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d007      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a24      	ldr	r2, [pc, #144]	; (800736c <TIM_Base_SetConfig+0x138>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d003      	beq.n	80072e6 <TIM_Base_SetConfig+0xb2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a23      	ldr	r2, [pc, #140]	; (8007370 <TIM_Base_SetConfig+0x13c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d108      	bne.n	80072f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a0a      	ldr	r2, [pc, #40]	; (8007348 <TIM_Base_SetConfig+0x114>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_Base_SetConfig+0xf8>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a0c      	ldr	r2, [pc, #48]	; (8007358 <TIM_Base_SetConfig+0x124>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d103      	bne.n	8007334 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	691a      	ldr	r2, [r3, #16]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	615a      	str	r2, [r3, #20]
}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	40010000 	.word	0x40010000
 800734c:	40000400 	.word	0x40000400
 8007350:	40000800 	.word	0x40000800
 8007354:	40000c00 	.word	0x40000c00
 8007358:	40010400 	.word	0x40010400
 800735c:	40014000 	.word	0x40014000
 8007360:	40014400 	.word	0x40014400
 8007364:	40014800 	.word	0x40014800
 8007368:	40001800 	.word	0x40001800
 800736c:	40001c00 	.word	0x40001c00
 8007370:	40002000 	.word	0x40002000

08007374 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	f023 0201 	bic.w	r2, r3, #1
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0303 	bic.w	r3, r3, #3
 80073aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f023 0302 	bic.w	r3, r3, #2
 80073bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a20      	ldr	r2, [pc, #128]	; (800744c <TIM_OC1_SetConfig+0xd8>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d003      	beq.n	80073d8 <TIM_OC1_SetConfig+0x64>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a1f      	ldr	r2, [pc, #124]	; (8007450 <TIM_OC1_SetConfig+0xdc>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d10c      	bne.n	80073f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f023 0308 	bic.w	r3, r3, #8
 80073de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f023 0304 	bic.w	r3, r3, #4
 80073f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a15      	ldr	r2, [pc, #84]	; (800744c <TIM_OC1_SetConfig+0xd8>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d003      	beq.n	8007402 <TIM_OC1_SetConfig+0x8e>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a14      	ldr	r2, [pc, #80]	; (8007450 <TIM_OC1_SetConfig+0xdc>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d111      	bne.n	8007426 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	4313      	orrs	r3, r2
 800741a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	4313      	orrs	r3, r2
 8007424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	621a      	str	r2, [r3, #32]
}
 8007440:	bf00      	nop
 8007442:	371c      	adds	r7, #28
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	40010000 	.word	0x40010000
 8007450:	40010400 	.word	0x40010400

08007454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	f023 0210 	bic.w	r2, r3, #16
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800748a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f023 0320 	bic.w	r3, r3, #32
 800749e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	011b      	lsls	r3, r3, #4
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a22      	ldr	r2, [pc, #136]	; (8007538 <TIM_OC2_SetConfig+0xe4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d003      	beq.n	80074bc <TIM_OC2_SetConfig+0x68>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a21      	ldr	r2, [pc, #132]	; (800753c <TIM_OC2_SetConfig+0xe8>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d10d      	bne.n	80074d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a17      	ldr	r2, [pc, #92]	; (8007538 <TIM_OC2_SetConfig+0xe4>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d003      	beq.n	80074e8 <TIM_OC2_SetConfig+0x94>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a16      	ldr	r2, [pc, #88]	; (800753c <TIM_OC2_SetConfig+0xe8>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d113      	bne.n	8007510 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	4313      	orrs	r3, r2
 8007502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	4313      	orrs	r3, r2
 800750e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	621a      	str	r2, [r3, #32]
}
 800752a:	bf00      	nop
 800752c:	371c      	adds	r7, #28
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	40010000 	.word	0x40010000
 800753c:	40010400 	.word	0x40010400

08007540 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f023 0303 	bic.w	r3, r3, #3
 8007576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4313      	orrs	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	021b      	lsls	r3, r3, #8
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	4313      	orrs	r3, r2
 8007594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a21      	ldr	r2, [pc, #132]	; (8007620 <TIM_OC3_SetConfig+0xe0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d003      	beq.n	80075a6 <TIM_OC3_SetConfig+0x66>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a20      	ldr	r2, [pc, #128]	; (8007624 <TIM_OC3_SetConfig+0xe4>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d10d      	bne.n	80075c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	021b      	lsls	r3, r3, #8
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a16      	ldr	r2, [pc, #88]	; (8007620 <TIM_OC3_SetConfig+0xe0>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d003      	beq.n	80075d2 <TIM_OC3_SetConfig+0x92>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a15      	ldr	r2, [pc, #84]	; (8007624 <TIM_OC3_SetConfig+0xe4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d113      	bne.n	80075fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	011b      	lsls	r3, r3, #4
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	011b      	lsls	r3, r3, #4
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	621a      	str	r2, [r3, #32]
}
 8007614:	bf00      	nop
 8007616:	371c      	adds	r7, #28
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	40010000 	.word	0x40010000
 8007624:	40010400 	.word	0x40010400

08007628 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800765e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	021b      	lsls	r3, r3, #8
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	4313      	orrs	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	031b      	lsls	r3, r3, #12
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	4313      	orrs	r3, r2
 800767e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a12      	ldr	r2, [pc, #72]	; (80076cc <TIM_OC4_SetConfig+0xa4>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d003      	beq.n	8007690 <TIM_OC4_SetConfig+0x68>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a11      	ldr	r2, [pc, #68]	; (80076d0 <TIM_OC4_SetConfig+0xa8>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d109      	bne.n	80076a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	019b      	lsls	r3, r3, #6
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	621a      	str	r2, [r3, #32]
}
 80076be:	bf00      	nop
 80076c0:	371c      	adds	r7, #28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	40010000 	.word	0x40010000
 80076d0:	40010400 	.word	0x40010400

080076d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	f023 0201 	bic.w	r2, r3, #1
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6a1b      	ldr	r3, [r3, #32]
 80076f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4a28      	ldr	r2, [pc, #160]	; (80077a0 <TIM_TI1_SetConfig+0xcc>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d01b      	beq.n	800773a <TIM_TI1_SetConfig+0x66>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007708:	d017      	beq.n	800773a <TIM_TI1_SetConfig+0x66>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	4a25      	ldr	r2, [pc, #148]	; (80077a4 <TIM_TI1_SetConfig+0xd0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d013      	beq.n	800773a <TIM_TI1_SetConfig+0x66>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4a24      	ldr	r2, [pc, #144]	; (80077a8 <TIM_TI1_SetConfig+0xd4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00f      	beq.n	800773a <TIM_TI1_SetConfig+0x66>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4a23      	ldr	r2, [pc, #140]	; (80077ac <TIM_TI1_SetConfig+0xd8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00b      	beq.n	800773a <TIM_TI1_SetConfig+0x66>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4a22      	ldr	r2, [pc, #136]	; (80077b0 <TIM_TI1_SetConfig+0xdc>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d007      	beq.n	800773a <TIM_TI1_SetConfig+0x66>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4a21      	ldr	r2, [pc, #132]	; (80077b4 <TIM_TI1_SetConfig+0xe0>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d003      	beq.n	800773a <TIM_TI1_SetConfig+0x66>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4a20      	ldr	r2, [pc, #128]	; (80077b8 <TIM_TI1_SetConfig+0xe4>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d101      	bne.n	800773e <TIM_TI1_SetConfig+0x6a>
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <TIM_TI1_SetConfig+0x6c>
 800773e:	2300      	movs	r3, #0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d008      	beq.n	8007756 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f023 0303 	bic.w	r3, r3, #3
 800774a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	e003      	b.n	800775e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f043 0301 	orr.w	r3, r3, #1
 800775c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	b2db      	uxtb	r3, r3
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f023 030a 	bic.w	r3, r3, #10
 8007778:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f003 030a 	and.w	r3, r3, #10
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	4313      	orrs	r3, r2
 8007784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	621a      	str	r2, [r3, #32]
}
 8007792:	bf00      	nop
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40010000 	.word	0x40010000
 80077a4:	40000400 	.word	0x40000400
 80077a8:	40000800 	.word	0x40000800
 80077ac:	40000c00 	.word	0x40000c00
 80077b0:	40010400 	.word	0x40010400
 80077b4:	40014000 	.word	0x40014000
 80077b8:	40001800 	.word	0x40001800

080077bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	f023 0201 	bic.w	r2, r3, #1
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	011b      	lsls	r3, r3, #4
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f023 030a 	bic.w	r3, r3, #10
 80077f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	4313      	orrs	r3, r2
 8007800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	621a      	str	r2, [r3, #32]
}
 800780e:	bf00      	nop
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800781a:	b480      	push	{r7}
 800781c:	b087      	sub	sp, #28
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a1b      	ldr	r3, [r3, #32]
 800782c:	f023 0210 	bic.w	r2, r3, #16
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007846:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	021b      	lsls	r3, r3, #8
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007858:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	031b      	lsls	r3, r3, #12
 800785e:	b29b      	uxth	r3, r3
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	4313      	orrs	r3, r2
 8007864:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800786c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	011b      	lsls	r3, r3, #4
 8007872:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	4313      	orrs	r3, r2
 800787a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	621a      	str	r2, [r3, #32]
}
 8007888:	bf00      	nop
 800788a:	371c      	adds	r7, #28
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	f023 0210 	bic.w	r2, r3, #16
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	031b      	lsls	r3, r3, #12
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	011b      	lsls	r3, r3, #4
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4313      	orrs	r3, r2
 80078da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	621a      	str	r2, [r3, #32]
}
 80078e8:	bf00      	nop
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b087      	sub	sp, #28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f023 0303 	bic.w	r3, r3, #3
 8007920:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4313      	orrs	r3, r2
 8007928:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007930:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	011b      	lsls	r3, r3, #4
 8007936:	b2db      	uxtb	r3, r3
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007944:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	4313      	orrs	r3, r2
 8007952:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	621a      	str	r2, [r3, #32]
}
 8007960:	bf00      	nop
 8007962:	371c      	adds	r7, #28
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007998:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	021b      	lsls	r3, r3, #8
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	031b      	lsls	r3, r3, #12
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80079be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	031b      	lsls	r3, r3, #12
 80079c4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	621a      	str	r2, [r3, #32]
}
 80079da:	bf00      	nop
 80079dc:	371c      	adds	r7, #28
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b085      	sub	sp, #20
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	f043 0307 	orr.w	r3, r3, #7
 8007a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	609a      	str	r2, [r3, #8]
}
 8007a10:	bf00      	nop
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	021a      	lsls	r2, r3, #8
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	609a      	str	r2, [r3, #8]
}
 8007a50:	bf00      	nop
 8007a52:	371c      	adds	r7, #28
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	f003 031f 	and.w	r3, r3, #31
 8007a6e:	2201      	movs	r2, #1
 8007a70:	fa02 f303 	lsl.w	r3, r2, r3
 8007a74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6a1a      	ldr	r2, [r3, #32]
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	43db      	mvns	r3, r3
 8007a7e:	401a      	ands	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a1a      	ldr	r2, [r3, #32]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f003 031f 	and.w	r3, r3, #31
 8007a8e:	6879      	ldr	r1, [r7, #4]
 8007a90:	fa01 f303 	lsl.w	r3, r1, r3
 8007a94:	431a      	orrs	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	621a      	str	r2, [r3, #32]
}
 8007a9a:	bf00      	nop
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2204      	movs	r2, #4
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 f901 	bl	8007cc0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007acc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f003 0307 	and.w	r3, r3, #7
 8007ad8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b06      	cmp	r3, #6
 8007ade:	d007      	beq.n	8007af0 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0201 	orr.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
	...

08007afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d101      	bne.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e05a      	b.n	8007bca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a21      	ldr	r2, [pc, #132]	; (8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d022      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b60:	d01d      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a1d      	ldr	r2, [pc, #116]	; (8007bdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d018      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a1b      	ldr	r2, [pc, #108]	; (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d013      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a1a      	ldr	r2, [pc, #104]	; (8007be4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d00e      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a18      	ldr	r2, [pc, #96]	; (8007be8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d009      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a17      	ldr	r2, [pc, #92]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d004      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a15      	ldr	r2, [pc, #84]	; (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d10c      	bne.n	8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40010000 	.word	0x40010000
 8007bdc:	40000400 	.word	0x40000400
 8007be0:	40000800 	.word	0x40000800
 8007be4:	40000c00 	.word	0x40000c00
 8007be8:	40010400 	.word	0x40010400
 8007bec:	40014000 	.word	0x40014000
 8007bf0:	40001800 	.word	0x40001800

08007bf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d101      	bne.n	8007c10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	e03d      	b.n	8007c8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f003 031f 	and.w	r3, r3, #31
 8007cd2:	2204      	movs	r2, #4
 8007cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6a1a      	ldr	r2, [r3, #32]
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	43db      	mvns	r3, r3
 8007ce2:	401a      	ands	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6a1a      	ldr	r2, [r3, #32]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f003 031f 	and.w	r3, r3, #31
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	621a      	str	r2, [r3, #32]
}
 8007cfe:	bf00      	nop
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e03f      	b.n	8007d9c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d106      	bne.n	8007d36 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f004 ffc5 	bl	800ccc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2224      	movs	r2, #36	; 0x24
 8007d3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68da      	ldr	r2, [r3, #12]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fabe 	bl	80082d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691a      	ldr	r2, [r3, #16]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	695a      	ldr	r2, [r3, #20]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d72:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d82:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2220      	movs	r2, #32
 8007d96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	4613      	mov	r3, r2
 8007db0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b20      	cmp	r3, #32
 8007dbc:	d140      	bne.n	8007e40 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <HAL_UART_Receive_IT+0x26>
 8007dc4:	88fb      	ldrh	r3, [r7, #6]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e039      	b.n	8007e42 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d101      	bne.n	8007ddc <HAL_UART_Receive_IT+0x38>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e032      	b.n	8007e42 <HAL_UART_Receive_IT+0x9e>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	88fa      	ldrh	r2, [r7, #6]
 8007dee:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	88fa      	ldrh	r2, [r7, #6]
 8007df4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2222      	movs	r2, #34	; 0x22
 8007e00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e1a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695a      	ldr	r2, [r3, #20]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f042 0201 	orr.w	r2, r2, #1
 8007e2a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f042 0220 	orr.w	r2, r2, #32
 8007e3a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	e000      	b.n	8007e42 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007e40:	2302      	movs	r3, #2
  }
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3714      	adds	r7, #20
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
	...

08007e50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b088      	sub	sp, #32
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	f003 030f 	and.w	r3, r3, #15
 8007e7e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10d      	bne.n	8007ea2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	f003 0320 	and.w	r3, r3, #32
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d008      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x52>
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	f003 0320 	and.w	r3, r3, #32
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f996 	bl	80081cc <UART_Receive_IT>
      return;
 8007ea0:	e0d1      	b.n	8008046 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 80b0 	beq.w	800800a <HAL_UART_IRQHandler+0x1ba>
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d105      	bne.n	8007ec0 <HAL_UART_IRQHandler+0x70>
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 80a5 	beq.w	800800a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <HAL_UART_IRQHandler+0x90>
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed8:	f043 0201 	orr.w	r2, r3, #1
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	f003 0304 	and.w	r3, r3, #4
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <HAL_UART_IRQHandler+0xb0>
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d005      	beq.n	8007f00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef8:	f043 0202 	orr.w	r2, r3, #2
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <HAL_UART_IRQHandler+0xd0>
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d005      	beq.n	8007f20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f18:	f043 0204 	orr.w	r2, r3, #4
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	f003 0308 	and.w	r3, r3, #8
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00f      	beq.n	8007f4a <HAL_UART_IRQHandler+0xfa>
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	f003 0320 	and.w	r3, r3, #32
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d104      	bne.n	8007f3e <HAL_UART_IRQHandler+0xee>
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d005      	beq.n	8007f4a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f42:	f043 0208 	orr.w	r2, r3, #8
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d078      	beq.n	8008044 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	f003 0320 	and.w	r3, r3, #32
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d007      	beq.n	8007f6c <HAL_UART_IRQHandler+0x11c>
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	f003 0320 	and.w	r3, r3, #32
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f930 	bl	80081cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f76:	2b40      	cmp	r3, #64	; 0x40
 8007f78:	bf0c      	ite	eq
 8007f7a:	2301      	moveq	r3, #1
 8007f7c:	2300      	movne	r3, #0
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f86:	f003 0308 	and.w	r3, r3, #8
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d102      	bne.n	8007f94 <HAL_UART_IRQHandler+0x144>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d031      	beq.n	8007ff8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f879 	bl	800808c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa4:	2b40      	cmp	r3, #64	; 0x40
 8007fa6:	d123      	bne.n	8007ff0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	695a      	ldr	r2, [r3, #20]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fb6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d013      	beq.n	8007fe8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc4:	4a21      	ldr	r2, [pc, #132]	; (800804c <HAL_UART_IRQHandler+0x1fc>)
 8007fc6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fb f909 	bl	80031e4 <HAL_DMA_Abort_IT>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d016      	beq.n	8008006 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe6:	e00e      	b.n	8008006 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f845 	bl	8008078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fee:	e00a      	b.n	8008006 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f841 	bl	8008078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff6:	e006      	b.n	8008006 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f83d 	bl	8008078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008004:	e01e      	b.n	8008044 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008006:	bf00      	nop
    return;
 8008008:	e01c      	b.n	8008044 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008010:	2b00      	cmp	r3, #0
 8008012:	d008      	beq.n	8008026 <HAL_UART_IRQHandler+0x1d6>
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f866 	bl	80080f0 <UART_Transmit_IT>
    return;
 8008024:	e00f      	b.n	8008046 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00a      	beq.n	8008046 <HAL_UART_IRQHandler+0x1f6>
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008036:	2b00      	cmp	r3, #0
 8008038:	d005      	beq.n	8008046 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f8ae 	bl	800819c <UART_EndTransmit_IT>
    return;
 8008040:	bf00      	nop
 8008042:	e000      	b.n	8008046 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008044:	bf00      	nop
  }
}
 8008046:	3720      	adds	r7, #32
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	080080c9 	.word	0x080080c9

08008050 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80080a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	695a      	ldr	r2, [r3, #20]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0201 	bic.w	r2, r2, #1
 80080b2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7ff ffc8 	bl	8008078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080e8:	bf00      	nop
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b21      	cmp	r3, #33	; 0x21
 8008102:	d144      	bne.n	800818e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800810c:	d11a      	bne.n	8008144 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	461a      	mov	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008122:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d105      	bne.n	8008138 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	1c9a      	adds	r2, r3, #2
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	621a      	str	r2, [r3, #32]
 8008136:	e00e      	b.n	8008156 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	621a      	str	r2, [r3, #32]
 8008142:	e008      	b.n	8008156 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	1c59      	adds	r1, r3, #1
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	6211      	str	r1, [r2, #32]
 800814e:	781a      	ldrb	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800815a:	b29b      	uxth	r3, r3
 800815c:	3b01      	subs	r3, #1
 800815e:	b29b      	uxth	r3, r3
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	4619      	mov	r1, r3
 8008164:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10f      	bne.n	800818a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68da      	ldr	r2, [r3, #12]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008178:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68da      	ldr	r2, [r3, #12]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008188:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	e000      	b.n	8008190 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800818e:	2302      	movs	r3, #2
  }
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2220      	movs	r2, #32
 80081b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff ff47 	bl	8008050 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b22      	cmp	r3, #34	; 0x22
 80081de:	d171      	bne.n	80082c4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e8:	d123      	bne.n	8008232 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ee:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10e      	bne.n	8008216 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008204:	b29a      	uxth	r2, r3
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820e:	1c9a      	adds	r2, r3, #2
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	629a      	str	r2, [r3, #40]	; 0x28
 8008214:	e029      	b.n	800826a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	b29b      	uxth	r3, r3
 800821e:	b2db      	uxtb	r3, r3
 8008220:	b29a      	uxth	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	629a      	str	r2, [r3, #40]	; 0x28
 8008230:	e01b      	b.n	800826a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10a      	bne.n	8008250 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6858      	ldr	r0, [r3, #4]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008244:	1c59      	adds	r1, r3, #1
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	6291      	str	r1, [r2, #40]	; 0x28
 800824a:	b2c2      	uxtb	r2, r0
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	e00c      	b.n	800826a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	b2da      	uxtb	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825c:	1c58      	adds	r0, r3, #1
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	6288      	str	r0, [r1, #40]	; 0x28
 8008262:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008266:	b2d2      	uxtb	r2, r2
 8008268:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800826e:	b29b      	uxth	r3, r3
 8008270:	3b01      	subs	r3, #1
 8008272:	b29b      	uxth	r3, r3
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	4619      	mov	r1, r3
 8008278:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800827a:	2b00      	cmp	r3, #0
 800827c:	d120      	bne.n	80082c0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68da      	ldr	r2, [r3, #12]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0220 	bic.w	r2, r2, #32
 800828c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68da      	ldr	r2, [r3, #12]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800829c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	695a      	ldr	r2, [r3, #20]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 0201 	bic.w	r2, r2, #1
 80082ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff fed4 	bl	8008064 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	e002      	b.n	80082c6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	e000      	b.n	80082c6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80082c4:	2302      	movs	r3, #2
  }
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	b085      	sub	sp, #20
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68da      	ldr	r2, [r3, #12]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689a      	ldr	r2, [r3, #8]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	431a      	orrs	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	431a      	orrs	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	4313      	orrs	r3, r2
 8008306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008312:	f023 030c 	bic.w	r3, r3, #12
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	6812      	ldr	r2, [r2, #0]
 800831a:	68f9      	ldr	r1, [r7, #12]
 800831c:	430b      	orrs	r3, r1
 800831e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	699a      	ldr	r2, [r3, #24]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800833e:	f040 818b 	bne.w	8008658 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4ac1      	ldr	r2, [pc, #772]	; (800864c <UART_SetConfig+0x37c>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d005      	beq.n	8008358 <UART_SetConfig+0x88>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4abf      	ldr	r2, [pc, #764]	; (8008650 <UART_SetConfig+0x380>)
 8008352:	4293      	cmp	r3, r2
 8008354:	f040 80bd 	bne.w	80084d2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008358:	f7fd f906 	bl	8005568 <HAL_RCC_GetPCLK2Freq>
 800835c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	461d      	mov	r5, r3
 8008362:	f04f 0600 	mov.w	r6, #0
 8008366:	46a8      	mov	r8, r5
 8008368:	46b1      	mov	r9, r6
 800836a:	eb18 0308 	adds.w	r3, r8, r8
 800836e:	eb49 0409 	adc.w	r4, r9, r9
 8008372:	4698      	mov	r8, r3
 8008374:	46a1      	mov	r9, r4
 8008376:	eb18 0805 	adds.w	r8, r8, r5
 800837a:	eb49 0906 	adc.w	r9, r9, r6
 800837e:	f04f 0100 	mov.w	r1, #0
 8008382:	f04f 0200 	mov.w	r2, #0
 8008386:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800838a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800838e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008392:	4688      	mov	r8, r1
 8008394:	4691      	mov	r9, r2
 8008396:	eb18 0005 	adds.w	r0, r8, r5
 800839a:	eb49 0106 	adc.w	r1, r9, r6
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	461d      	mov	r5, r3
 80083a4:	f04f 0600 	mov.w	r6, #0
 80083a8:	196b      	adds	r3, r5, r5
 80083aa:	eb46 0406 	adc.w	r4, r6, r6
 80083ae:	461a      	mov	r2, r3
 80083b0:	4623      	mov	r3, r4
 80083b2:	f7f8 fc53 	bl	8000c5c <__aeabi_uldivmod>
 80083b6:	4603      	mov	r3, r0
 80083b8:	460c      	mov	r4, r1
 80083ba:	461a      	mov	r2, r3
 80083bc:	4ba5      	ldr	r3, [pc, #660]	; (8008654 <UART_SetConfig+0x384>)
 80083be:	fba3 2302 	umull	r2, r3, r3, r2
 80083c2:	095b      	lsrs	r3, r3, #5
 80083c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	461d      	mov	r5, r3
 80083cc:	f04f 0600 	mov.w	r6, #0
 80083d0:	46a9      	mov	r9, r5
 80083d2:	46b2      	mov	sl, r6
 80083d4:	eb19 0309 	adds.w	r3, r9, r9
 80083d8:	eb4a 040a 	adc.w	r4, sl, sl
 80083dc:	4699      	mov	r9, r3
 80083de:	46a2      	mov	sl, r4
 80083e0:	eb19 0905 	adds.w	r9, r9, r5
 80083e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80083e8:	f04f 0100 	mov.w	r1, #0
 80083ec:	f04f 0200 	mov.w	r2, #0
 80083f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083fc:	4689      	mov	r9, r1
 80083fe:	4692      	mov	sl, r2
 8008400:	eb19 0005 	adds.w	r0, r9, r5
 8008404:	eb4a 0106 	adc.w	r1, sl, r6
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	461d      	mov	r5, r3
 800840e:	f04f 0600 	mov.w	r6, #0
 8008412:	196b      	adds	r3, r5, r5
 8008414:	eb46 0406 	adc.w	r4, r6, r6
 8008418:	461a      	mov	r2, r3
 800841a:	4623      	mov	r3, r4
 800841c:	f7f8 fc1e 	bl	8000c5c <__aeabi_uldivmod>
 8008420:	4603      	mov	r3, r0
 8008422:	460c      	mov	r4, r1
 8008424:	461a      	mov	r2, r3
 8008426:	4b8b      	ldr	r3, [pc, #556]	; (8008654 <UART_SetConfig+0x384>)
 8008428:	fba3 1302 	umull	r1, r3, r3, r2
 800842c:	095b      	lsrs	r3, r3, #5
 800842e:	2164      	movs	r1, #100	; 0x64
 8008430:	fb01 f303 	mul.w	r3, r1, r3
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	3332      	adds	r3, #50	; 0x32
 800843a:	4a86      	ldr	r2, [pc, #536]	; (8008654 <UART_SetConfig+0x384>)
 800843c:	fba2 2303 	umull	r2, r3, r2, r3
 8008440:	095b      	lsrs	r3, r3, #5
 8008442:	005b      	lsls	r3, r3, #1
 8008444:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008448:	4498      	add	r8, r3
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	461d      	mov	r5, r3
 800844e:	f04f 0600 	mov.w	r6, #0
 8008452:	46a9      	mov	r9, r5
 8008454:	46b2      	mov	sl, r6
 8008456:	eb19 0309 	adds.w	r3, r9, r9
 800845a:	eb4a 040a 	adc.w	r4, sl, sl
 800845e:	4699      	mov	r9, r3
 8008460:	46a2      	mov	sl, r4
 8008462:	eb19 0905 	adds.w	r9, r9, r5
 8008466:	eb4a 0a06 	adc.w	sl, sl, r6
 800846a:	f04f 0100 	mov.w	r1, #0
 800846e:	f04f 0200 	mov.w	r2, #0
 8008472:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008476:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800847a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800847e:	4689      	mov	r9, r1
 8008480:	4692      	mov	sl, r2
 8008482:	eb19 0005 	adds.w	r0, r9, r5
 8008486:	eb4a 0106 	adc.w	r1, sl, r6
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	461d      	mov	r5, r3
 8008490:	f04f 0600 	mov.w	r6, #0
 8008494:	196b      	adds	r3, r5, r5
 8008496:	eb46 0406 	adc.w	r4, r6, r6
 800849a:	461a      	mov	r2, r3
 800849c:	4623      	mov	r3, r4
 800849e:	f7f8 fbdd 	bl	8000c5c <__aeabi_uldivmod>
 80084a2:	4603      	mov	r3, r0
 80084a4:	460c      	mov	r4, r1
 80084a6:	461a      	mov	r2, r3
 80084a8:	4b6a      	ldr	r3, [pc, #424]	; (8008654 <UART_SetConfig+0x384>)
 80084aa:	fba3 1302 	umull	r1, r3, r3, r2
 80084ae:	095b      	lsrs	r3, r3, #5
 80084b0:	2164      	movs	r1, #100	; 0x64
 80084b2:	fb01 f303 	mul.w	r3, r1, r3
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	00db      	lsls	r3, r3, #3
 80084ba:	3332      	adds	r3, #50	; 0x32
 80084bc:	4a65      	ldr	r2, [pc, #404]	; (8008654 <UART_SetConfig+0x384>)
 80084be:	fba2 2303 	umull	r2, r3, r2, r3
 80084c2:	095b      	lsrs	r3, r3, #5
 80084c4:	f003 0207 	and.w	r2, r3, #7
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4442      	add	r2, r8
 80084ce:	609a      	str	r2, [r3, #8]
 80084d0:	e26f      	b.n	80089b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084d2:	f7fd f835 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 80084d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	461d      	mov	r5, r3
 80084dc:	f04f 0600 	mov.w	r6, #0
 80084e0:	46a8      	mov	r8, r5
 80084e2:	46b1      	mov	r9, r6
 80084e4:	eb18 0308 	adds.w	r3, r8, r8
 80084e8:	eb49 0409 	adc.w	r4, r9, r9
 80084ec:	4698      	mov	r8, r3
 80084ee:	46a1      	mov	r9, r4
 80084f0:	eb18 0805 	adds.w	r8, r8, r5
 80084f4:	eb49 0906 	adc.w	r9, r9, r6
 80084f8:	f04f 0100 	mov.w	r1, #0
 80084fc:	f04f 0200 	mov.w	r2, #0
 8008500:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008504:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008508:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800850c:	4688      	mov	r8, r1
 800850e:	4691      	mov	r9, r2
 8008510:	eb18 0005 	adds.w	r0, r8, r5
 8008514:	eb49 0106 	adc.w	r1, r9, r6
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	461d      	mov	r5, r3
 800851e:	f04f 0600 	mov.w	r6, #0
 8008522:	196b      	adds	r3, r5, r5
 8008524:	eb46 0406 	adc.w	r4, r6, r6
 8008528:	461a      	mov	r2, r3
 800852a:	4623      	mov	r3, r4
 800852c:	f7f8 fb96 	bl	8000c5c <__aeabi_uldivmod>
 8008530:	4603      	mov	r3, r0
 8008532:	460c      	mov	r4, r1
 8008534:	461a      	mov	r2, r3
 8008536:	4b47      	ldr	r3, [pc, #284]	; (8008654 <UART_SetConfig+0x384>)
 8008538:	fba3 2302 	umull	r2, r3, r3, r2
 800853c:	095b      	lsrs	r3, r3, #5
 800853e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	461d      	mov	r5, r3
 8008546:	f04f 0600 	mov.w	r6, #0
 800854a:	46a9      	mov	r9, r5
 800854c:	46b2      	mov	sl, r6
 800854e:	eb19 0309 	adds.w	r3, r9, r9
 8008552:	eb4a 040a 	adc.w	r4, sl, sl
 8008556:	4699      	mov	r9, r3
 8008558:	46a2      	mov	sl, r4
 800855a:	eb19 0905 	adds.w	r9, r9, r5
 800855e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008562:	f04f 0100 	mov.w	r1, #0
 8008566:	f04f 0200 	mov.w	r2, #0
 800856a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800856e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008572:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008576:	4689      	mov	r9, r1
 8008578:	4692      	mov	sl, r2
 800857a:	eb19 0005 	adds.w	r0, r9, r5
 800857e:	eb4a 0106 	adc.w	r1, sl, r6
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	461d      	mov	r5, r3
 8008588:	f04f 0600 	mov.w	r6, #0
 800858c:	196b      	adds	r3, r5, r5
 800858e:	eb46 0406 	adc.w	r4, r6, r6
 8008592:	461a      	mov	r2, r3
 8008594:	4623      	mov	r3, r4
 8008596:	f7f8 fb61 	bl	8000c5c <__aeabi_uldivmod>
 800859a:	4603      	mov	r3, r0
 800859c:	460c      	mov	r4, r1
 800859e:	461a      	mov	r2, r3
 80085a0:	4b2c      	ldr	r3, [pc, #176]	; (8008654 <UART_SetConfig+0x384>)
 80085a2:	fba3 1302 	umull	r1, r3, r3, r2
 80085a6:	095b      	lsrs	r3, r3, #5
 80085a8:	2164      	movs	r1, #100	; 0x64
 80085aa:	fb01 f303 	mul.w	r3, r1, r3
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	00db      	lsls	r3, r3, #3
 80085b2:	3332      	adds	r3, #50	; 0x32
 80085b4:	4a27      	ldr	r2, [pc, #156]	; (8008654 <UART_SetConfig+0x384>)
 80085b6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ba:	095b      	lsrs	r3, r3, #5
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085c2:	4498      	add	r8, r3
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	461d      	mov	r5, r3
 80085c8:	f04f 0600 	mov.w	r6, #0
 80085cc:	46a9      	mov	r9, r5
 80085ce:	46b2      	mov	sl, r6
 80085d0:	eb19 0309 	adds.w	r3, r9, r9
 80085d4:	eb4a 040a 	adc.w	r4, sl, sl
 80085d8:	4699      	mov	r9, r3
 80085da:	46a2      	mov	sl, r4
 80085dc:	eb19 0905 	adds.w	r9, r9, r5
 80085e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80085e4:	f04f 0100 	mov.w	r1, #0
 80085e8:	f04f 0200 	mov.w	r2, #0
 80085ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80085f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80085f8:	4689      	mov	r9, r1
 80085fa:	4692      	mov	sl, r2
 80085fc:	eb19 0005 	adds.w	r0, r9, r5
 8008600:	eb4a 0106 	adc.w	r1, sl, r6
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	461d      	mov	r5, r3
 800860a:	f04f 0600 	mov.w	r6, #0
 800860e:	196b      	adds	r3, r5, r5
 8008610:	eb46 0406 	adc.w	r4, r6, r6
 8008614:	461a      	mov	r2, r3
 8008616:	4623      	mov	r3, r4
 8008618:	f7f8 fb20 	bl	8000c5c <__aeabi_uldivmod>
 800861c:	4603      	mov	r3, r0
 800861e:	460c      	mov	r4, r1
 8008620:	461a      	mov	r2, r3
 8008622:	4b0c      	ldr	r3, [pc, #48]	; (8008654 <UART_SetConfig+0x384>)
 8008624:	fba3 1302 	umull	r1, r3, r3, r2
 8008628:	095b      	lsrs	r3, r3, #5
 800862a:	2164      	movs	r1, #100	; 0x64
 800862c:	fb01 f303 	mul.w	r3, r1, r3
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	00db      	lsls	r3, r3, #3
 8008634:	3332      	adds	r3, #50	; 0x32
 8008636:	4a07      	ldr	r2, [pc, #28]	; (8008654 <UART_SetConfig+0x384>)
 8008638:	fba2 2303 	umull	r2, r3, r2, r3
 800863c:	095b      	lsrs	r3, r3, #5
 800863e:	f003 0207 	and.w	r2, r3, #7
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4442      	add	r2, r8
 8008648:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800864a:	e1b2      	b.n	80089b2 <UART_SetConfig+0x6e2>
 800864c:	40011000 	.word	0x40011000
 8008650:	40011400 	.word	0x40011400
 8008654:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4ad7      	ldr	r2, [pc, #860]	; (80089bc <UART_SetConfig+0x6ec>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d005      	beq.n	800866e <UART_SetConfig+0x39e>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4ad6      	ldr	r2, [pc, #856]	; (80089c0 <UART_SetConfig+0x6f0>)
 8008668:	4293      	cmp	r3, r2
 800866a:	f040 80d1 	bne.w	8008810 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800866e:	f7fc ff7b 	bl	8005568 <HAL_RCC_GetPCLK2Freq>
 8008672:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	469a      	mov	sl, r3
 8008678:	f04f 0b00 	mov.w	fp, #0
 800867c:	46d0      	mov	r8, sl
 800867e:	46d9      	mov	r9, fp
 8008680:	eb18 0308 	adds.w	r3, r8, r8
 8008684:	eb49 0409 	adc.w	r4, r9, r9
 8008688:	4698      	mov	r8, r3
 800868a:	46a1      	mov	r9, r4
 800868c:	eb18 080a 	adds.w	r8, r8, sl
 8008690:	eb49 090b 	adc.w	r9, r9, fp
 8008694:	f04f 0100 	mov.w	r1, #0
 8008698:	f04f 0200 	mov.w	r2, #0
 800869c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80086a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80086a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80086a8:	4688      	mov	r8, r1
 80086aa:	4691      	mov	r9, r2
 80086ac:	eb1a 0508 	adds.w	r5, sl, r8
 80086b0:	eb4b 0609 	adc.w	r6, fp, r9
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	4619      	mov	r1, r3
 80086ba:	f04f 0200 	mov.w	r2, #0
 80086be:	f04f 0300 	mov.w	r3, #0
 80086c2:	f04f 0400 	mov.w	r4, #0
 80086c6:	0094      	lsls	r4, r2, #2
 80086c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80086cc:	008b      	lsls	r3, r1, #2
 80086ce:	461a      	mov	r2, r3
 80086d0:	4623      	mov	r3, r4
 80086d2:	4628      	mov	r0, r5
 80086d4:	4631      	mov	r1, r6
 80086d6:	f7f8 fac1 	bl	8000c5c <__aeabi_uldivmod>
 80086da:	4603      	mov	r3, r0
 80086dc:	460c      	mov	r4, r1
 80086de:	461a      	mov	r2, r3
 80086e0:	4bb8      	ldr	r3, [pc, #736]	; (80089c4 <UART_SetConfig+0x6f4>)
 80086e2:	fba3 2302 	umull	r2, r3, r3, r2
 80086e6:	095b      	lsrs	r3, r3, #5
 80086e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	469b      	mov	fp, r3
 80086f0:	f04f 0c00 	mov.w	ip, #0
 80086f4:	46d9      	mov	r9, fp
 80086f6:	46e2      	mov	sl, ip
 80086f8:	eb19 0309 	adds.w	r3, r9, r9
 80086fc:	eb4a 040a 	adc.w	r4, sl, sl
 8008700:	4699      	mov	r9, r3
 8008702:	46a2      	mov	sl, r4
 8008704:	eb19 090b 	adds.w	r9, r9, fp
 8008708:	eb4a 0a0c 	adc.w	sl, sl, ip
 800870c:	f04f 0100 	mov.w	r1, #0
 8008710:	f04f 0200 	mov.w	r2, #0
 8008714:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008718:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800871c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008720:	4689      	mov	r9, r1
 8008722:	4692      	mov	sl, r2
 8008724:	eb1b 0509 	adds.w	r5, fp, r9
 8008728:	eb4c 060a 	adc.w	r6, ip, sl
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	4619      	mov	r1, r3
 8008732:	f04f 0200 	mov.w	r2, #0
 8008736:	f04f 0300 	mov.w	r3, #0
 800873a:	f04f 0400 	mov.w	r4, #0
 800873e:	0094      	lsls	r4, r2, #2
 8008740:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008744:	008b      	lsls	r3, r1, #2
 8008746:	461a      	mov	r2, r3
 8008748:	4623      	mov	r3, r4
 800874a:	4628      	mov	r0, r5
 800874c:	4631      	mov	r1, r6
 800874e:	f7f8 fa85 	bl	8000c5c <__aeabi_uldivmod>
 8008752:	4603      	mov	r3, r0
 8008754:	460c      	mov	r4, r1
 8008756:	461a      	mov	r2, r3
 8008758:	4b9a      	ldr	r3, [pc, #616]	; (80089c4 <UART_SetConfig+0x6f4>)
 800875a:	fba3 1302 	umull	r1, r3, r3, r2
 800875e:	095b      	lsrs	r3, r3, #5
 8008760:	2164      	movs	r1, #100	; 0x64
 8008762:	fb01 f303 	mul.w	r3, r1, r3
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	011b      	lsls	r3, r3, #4
 800876a:	3332      	adds	r3, #50	; 0x32
 800876c:	4a95      	ldr	r2, [pc, #596]	; (80089c4 <UART_SetConfig+0x6f4>)
 800876e:	fba2 2303 	umull	r2, r3, r2, r3
 8008772:	095b      	lsrs	r3, r3, #5
 8008774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008778:	4498      	add	r8, r3
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	469b      	mov	fp, r3
 800877e:	f04f 0c00 	mov.w	ip, #0
 8008782:	46d9      	mov	r9, fp
 8008784:	46e2      	mov	sl, ip
 8008786:	eb19 0309 	adds.w	r3, r9, r9
 800878a:	eb4a 040a 	adc.w	r4, sl, sl
 800878e:	4699      	mov	r9, r3
 8008790:	46a2      	mov	sl, r4
 8008792:	eb19 090b 	adds.w	r9, r9, fp
 8008796:	eb4a 0a0c 	adc.w	sl, sl, ip
 800879a:	f04f 0100 	mov.w	r1, #0
 800879e:	f04f 0200 	mov.w	r2, #0
 80087a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80087aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80087ae:	4689      	mov	r9, r1
 80087b0:	4692      	mov	sl, r2
 80087b2:	eb1b 0509 	adds.w	r5, fp, r9
 80087b6:	eb4c 060a 	adc.w	r6, ip, sl
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	4619      	mov	r1, r3
 80087c0:	f04f 0200 	mov.w	r2, #0
 80087c4:	f04f 0300 	mov.w	r3, #0
 80087c8:	f04f 0400 	mov.w	r4, #0
 80087cc:	0094      	lsls	r4, r2, #2
 80087ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80087d2:	008b      	lsls	r3, r1, #2
 80087d4:	461a      	mov	r2, r3
 80087d6:	4623      	mov	r3, r4
 80087d8:	4628      	mov	r0, r5
 80087da:	4631      	mov	r1, r6
 80087dc:	f7f8 fa3e 	bl	8000c5c <__aeabi_uldivmod>
 80087e0:	4603      	mov	r3, r0
 80087e2:	460c      	mov	r4, r1
 80087e4:	461a      	mov	r2, r3
 80087e6:	4b77      	ldr	r3, [pc, #476]	; (80089c4 <UART_SetConfig+0x6f4>)
 80087e8:	fba3 1302 	umull	r1, r3, r3, r2
 80087ec:	095b      	lsrs	r3, r3, #5
 80087ee:	2164      	movs	r1, #100	; 0x64
 80087f0:	fb01 f303 	mul.w	r3, r1, r3
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	011b      	lsls	r3, r3, #4
 80087f8:	3332      	adds	r3, #50	; 0x32
 80087fa:	4a72      	ldr	r2, [pc, #456]	; (80089c4 <UART_SetConfig+0x6f4>)
 80087fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008800:	095b      	lsrs	r3, r3, #5
 8008802:	f003 020f 	and.w	r2, r3, #15
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4442      	add	r2, r8
 800880c:	609a      	str	r2, [r3, #8]
 800880e:	e0d0      	b.n	80089b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008810:	f7fc fe96 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 8008814:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	469a      	mov	sl, r3
 800881a:	f04f 0b00 	mov.w	fp, #0
 800881e:	46d0      	mov	r8, sl
 8008820:	46d9      	mov	r9, fp
 8008822:	eb18 0308 	adds.w	r3, r8, r8
 8008826:	eb49 0409 	adc.w	r4, r9, r9
 800882a:	4698      	mov	r8, r3
 800882c:	46a1      	mov	r9, r4
 800882e:	eb18 080a 	adds.w	r8, r8, sl
 8008832:	eb49 090b 	adc.w	r9, r9, fp
 8008836:	f04f 0100 	mov.w	r1, #0
 800883a:	f04f 0200 	mov.w	r2, #0
 800883e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008842:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008846:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800884a:	4688      	mov	r8, r1
 800884c:	4691      	mov	r9, r2
 800884e:	eb1a 0508 	adds.w	r5, sl, r8
 8008852:	eb4b 0609 	adc.w	r6, fp, r9
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	4619      	mov	r1, r3
 800885c:	f04f 0200 	mov.w	r2, #0
 8008860:	f04f 0300 	mov.w	r3, #0
 8008864:	f04f 0400 	mov.w	r4, #0
 8008868:	0094      	lsls	r4, r2, #2
 800886a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800886e:	008b      	lsls	r3, r1, #2
 8008870:	461a      	mov	r2, r3
 8008872:	4623      	mov	r3, r4
 8008874:	4628      	mov	r0, r5
 8008876:	4631      	mov	r1, r6
 8008878:	f7f8 f9f0 	bl	8000c5c <__aeabi_uldivmod>
 800887c:	4603      	mov	r3, r0
 800887e:	460c      	mov	r4, r1
 8008880:	461a      	mov	r2, r3
 8008882:	4b50      	ldr	r3, [pc, #320]	; (80089c4 <UART_SetConfig+0x6f4>)
 8008884:	fba3 2302 	umull	r2, r3, r3, r2
 8008888:	095b      	lsrs	r3, r3, #5
 800888a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	469b      	mov	fp, r3
 8008892:	f04f 0c00 	mov.w	ip, #0
 8008896:	46d9      	mov	r9, fp
 8008898:	46e2      	mov	sl, ip
 800889a:	eb19 0309 	adds.w	r3, r9, r9
 800889e:	eb4a 040a 	adc.w	r4, sl, sl
 80088a2:	4699      	mov	r9, r3
 80088a4:	46a2      	mov	sl, r4
 80088a6:	eb19 090b 	adds.w	r9, r9, fp
 80088aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80088ae:	f04f 0100 	mov.w	r1, #0
 80088b2:	f04f 0200 	mov.w	r2, #0
 80088b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088c2:	4689      	mov	r9, r1
 80088c4:	4692      	mov	sl, r2
 80088c6:	eb1b 0509 	adds.w	r5, fp, r9
 80088ca:	eb4c 060a 	adc.w	r6, ip, sl
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	4619      	mov	r1, r3
 80088d4:	f04f 0200 	mov.w	r2, #0
 80088d8:	f04f 0300 	mov.w	r3, #0
 80088dc:	f04f 0400 	mov.w	r4, #0
 80088e0:	0094      	lsls	r4, r2, #2
 80088e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088e6:	008b      	lsls	r3, r1, #2
 80088e8:	461a      	mov	r2, r3
 80088ea:	4623      	mov	r3, r4
 80088ec:	4628      	mov	r0, r5
 80088ee:	4631      	mov	r1, r6
 80088f0:	f7f8 f9b4 	bl	8000c5c <__aeabi_uldivmod>
 80088f4:	4603      	mov	r3, r0
 80088f6:	460c      	mov	r4, r1
 80088f8:	461a      	mov	r2, r3
 80088fa:	4b32      	ldr	r3, [pc, #200]	; (80089c4 <UART_SetConfig+0x6f4>)
 80088fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008900:	095b      	lsrs	r3, r3, #5
 8008902:	2164      	movs	r1, #100	; 0x64
 8008904:	fb01 f303 	mul.w	r3, r1, r3
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	011b      	lsls	r3, r3, #4
 800890c:	3332      	adds	r3, #50	; 0x32
 800890e:	4a2d      	ldr	r2, [pc, #180]	; (80089c4 <UART_SetConfig+0x6f4>)
 8008910:	fba2 2303 	umull	r2, r3, r2, r3
 8008914:	095b      	lsrs	r3, r3, #5
 8008916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800891a:	4498      	add	r8, r3
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	469b      	mov	fp, r3
 8008920:	f04f 0c00 	mov.w	ip, #0
 8008924:	46d9      	mov	r9, fp
 8008926:	46e2      	mov	sl, ip
 8008928:	eb19 0309 	adds.w	r3, r9, r9
 800892c:	eb4a 040a 	adc.w	r4, sl, sl
 8008930:	4699      	mov	r9, r3
 8008932:	46a2      	mov	sl, r4
 8008934:	eb19 090b 	adds.w	r9, r9, fp
 8008938:	eb4a 0a0c 	adc.w	sl, sl, ip
 800893c:	f04f 0100 	mov.w	r1, #0
 8008940:	f04f 0200 	mov.w	r2, #0
 8008944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008948:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800894c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008950:	4689      	mov	r9, r1
 8008952:	4692      	mov	sl, r2
 8008954:	eb1b 0509 	adds.w	r5, fp, r9
 8008958:	eb4c 060a 	adc.w	r6, ip, sl
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	4619      	mov	r1, r3
 8008962:	f04f 0200 	mov.w	r2, #0
 8008966:	f04f 0300 	mov.w	r3, #0
 800896a:	f04f 0400 	mov.w	r4, #0
 800896e:	0094      	lsls	r4, r2, #2
 8008970:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008974:	008b      	lsls	r3, r1, #2
 8008976:	461a      	mov	r2, r3
 8008978:	4623      	mov	r3, r4
 800897a:	4628      	mov	r0, r5
 800897c:	4631      	mov	r1, r6
 800897e:	f7f8 f96d 	bl	8000c5c <__aeabi_uldivmod>
 8008982:	4603      	mov	r3, r0
 8008984:	460c      	mov	r4, r1
 8008986:	461a      	mov	r2, r3
 8008988:	4b0e      	ldr	r3, [pc, #56]	; (80089c4 <UART_SetConfig+0x6f4>)
 800898a:	fba3 1302 	umull	r1, r3, r3, r2
 800898e:	095b      	lsrs	r3, r3, #5
 8008990:	2164      	movs	r1, #100	; 0x64
 8008992:	fb01 f303 	mul.w	r3, r1, r3
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	011b      	lsls	r3, r3, #4
 800899a:	3332      	adds	r3, #50	; 0x32
 800899c:	4a09      	ldr	r2, [pc, #36]	; (80089c4 <UART_SetConfig+0x6f4>)
 800899e:	fba2 2303 	umull	r2, r3, r2, r3
 80089a2:	095b      	lsrs	r3, r3, #5
 80089a4:	f003 020f 	and.w	r2, r3, #15
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4442      	add	r2, r8
 80089ae:	609a      	str	r2, [r3, #8]
}
 80089b0:	e7ff      	b.n	80089b2 <UART_SetConfig+0x6e2>
 80089b2:	bf00      	nop
 80089b4:	3714      	adds	r7, #20
 80089b6:	46bd      	mov	sp, r7
 80089b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089bc:	40011000 	.word	0x40011000
 80089c0:	40011400 	.word	0x40011400
 80089c4:	51eb851f 	.word	0x51eb851f

080089c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089c8:	b084      	sub	sp, #16
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	f107 001c 	add.w	r0, r7, #28
 80089d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d122      	bne.n	8008a26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80089f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d105      	bne.n	8008a1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa5c 	bl	8008ed8 <USB_CoreReset>
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]
 8008a24:	e01a      	b.n	8008a5c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fa50 	bl	8008ed8 <USB_CoreReset>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d106      	bne.n	8008a50 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	639a      	str	r2, [r3, #56]	; 0x38
 8008a4e:	e005      	b.n	8008a5c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d10b      	bne.n	8008a7a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	f043 0206 	orr.w	r2, r3, #6
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f043 0220 	orr.w	r2, r3, #32
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a86:	b004      	add	sp, #16
 8008a88:	4770      	bx	lr

08008a8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b083      	sub	sp, #12
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f023 0201 	bic.w	r2, r3, #1
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d106      	bne.n	8008ad8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	60da      	str	r2, [r3, #12]
 8008ad6:	e00b      	b.n	8008af0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ad8:	78fb      	ldrb	r3, [r7, #3]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d106      	bne.n	8008aec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	60da      	str	r2, [r3, #12]
 8008aea:	e001      	b.n	8008af0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e003      	b.n	8008af8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008af0:	2032      	movs	r0, #50	; 0x32
 8008af2:	f7f8 faa5 	bl	8001040 <HAL_Delay>

  return HAL_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b00:	b084      	sub	sp, #16
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b086      	sub	sp, #24
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	613b      	str	r3, [r7, #16]
 8008b1e:	e009      	b.n	8008b34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	3340      	adds	r3, #64	; 0x40
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	3301      	adds	r3, #1
 8008b32:	613b      	str	r3, [r7, #16]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	2b0e      	cmp	r3, #14
 8008b38:	d9f2      	bls.n	8008b20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d112      	bne.n	8008b66 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	639a      	str	r2, [r3, #56]	; 0x38
 8008b64:	e00b      	b.n	8008b7e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b84:	461a      	mov	r2, r3
 8008b86:	2300      	movs	r3, #0
 8008b88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b90:	4619      	mov	r1, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b98:	461a      	mov	r2, r3
 8008b9a:	680b      	ldr	r3, [r1, #0]
 8008b9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d10c      	bne.n	8008bbe <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d104      	bne.n	8008bb4 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008baa:	2100      	movs	r1, #0
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f961 	bl	8008e74 <USB_SetDevSpeed>
 8008bb2:	e008      	b.n	8008bc6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f95c 	bl	8008e74 <USB_SetDevSpeed>
 8008bbc:	e003      	b.n	8008bc6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008bbe:	2103      	movs	r1, #3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f957 	bl	8008e74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008bc6:	2110      	movs	r1, #16
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f90b 	bl	8008de4 <USB_FlushTxFifo>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d001      	beq.n	8008bd8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f929 	bl	8008e30 <USB_FlushRxFifo>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bee:	461a      	mov	r2, r3
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c06:	461a      	mov	r2, r3
 8008c08:	2300      	movs	r3, #0
 8008c0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	613b      	str	r3, [r7, #16]
 8008c10:	e043      	b.n	8008c9a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c28:	d118      	bne.n	8008c5c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10a      	bne.n	8008c46 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	e013      	b.n	8008c6e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	015a      	lsls	r2, r3, #5
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c52:	461a      	mov	r2, r3
 8008c54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c58:	6013      	str	r3, [r2, #0]
 8008c5a:	e008      	b.n	8008c6e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	015a      	lsls	r2, r3, #5
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c68:	461a      	mov	r2, r3
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	015a      	lsls	r2, r3, #5
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	015a      	lsls	r2, r3, #5
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	3301      	adds	r3, #1
 8008c98:	613b      	str	r3, [r7, #16]
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d3b7      	bcc.n	8008c12 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	613b      	str	r3, [r7, #16]
 8008ca6:	e043      	b.n	8008d30 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cbe:	d118      	bne.n	8008cf2 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10a      	bne.n	8008cdc <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cd8:	6013      	str	r3, [r2, #0]
 8008cda:	e013      	b.n	8008d04 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce8:	461a      	mov	r2, r3
 8008cea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cee:	6013      	str	r3, [r2, #0]
 8008cf0:	e008      	b.n	8008d04 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfe:	461a      	mov	r2, r3
 8008d00:	2300      	movs	r3, #0
 8008d02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d10:	461a      	mov	r2, r3
 8008d12:	2300      	movs	r3, #0
 8008d14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	015a      	lsls	r2, r3, #5
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d22:	461a      	mov	r2, r3
 8008d24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	613b      	str	r3, [r7, #16]
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d3b7      	bcc.n	8008ca8 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d4a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d111      	bne.n	8008d76 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d58:	461a      	mov	r2, r3
 8008d5a:	4b20      	ldr	r3, [pc, #128]	; (8008ddc <USB_DevInit+0x2dc>)
 8008d5c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d70:	f043 0303 	orr.w	r3, r3, #3
 8008d74:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d82:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d105      	bne.n	8008d96 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	f043 0210 	orr.w	r2, r3, #16
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	699a      	ldr	r2, [r3, #24]
 8008d9a:	4b11      	ldr	r3, [pc, #68]	; (8008de0 <USB_DevInit+0x2e0>)
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d005      	beq.n	8008db4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	f043 0208 	orr.w	r2, r3, #8
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d107      	bne.n	8008dca <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dc2:	f043 0304 	orr.w	r3, r3, #4
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008dd6:	b004      	add	sp, #16
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	00800100 	.word	0x00800100
 8008de0:	803c3800 	.word	0x803c3800

08008de4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008dee:	2300      	movs	r3, #0
 8008df0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	019b      	lsls	r3, r3, #6
 8008df6:	f043 0220 	orr.w	r2, r3, #32
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3301      	adds	r3, #1
 8008e02:	60fb      	str	r3, [r7, #12]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4a09      	ldr	r2, [pc, #36]	; (8008e2c <USB_FlushTxFifo+0x48>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d901      	bls.n	8008e10 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	e006      	b.n	8008e1e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	f003 0320 	and.w	r3, r3, #32
 8008e18:	2b20      	cmp	r3, #32
 8008e1a:	d0f0      	beq.n	8008dfe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	00030d40 	.word	0x00030d40

08008e30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2210      	movs	r2, #16
 8008e40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3301      	adds	r3, #1
 8008e46:	60fb      	str	r3, [r7, #12]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4a09      	ldr	r2, [pc, #36]	; (8008e70 <USB_FlushRxFifo+0x40>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d901      	bls.n	8008e54 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e006      	b.n	8008e62 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	f003 0310 	and.w	r3, r3, #16
 8008e5c:	2b10      	cmp	r3, #16
 8008e5e:	d0f0      	beq.n	8008e42 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	00030d40 	.word	0x00030d40

08008e74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	78fb      	ldrb	r3, [r7, #3]
 8008e8e:	68f9      	ldr	r1, [r7, #12]
 8008e90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e94:	4313      	orrs	r3, r2
 8008e96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ec0:	f043 0302 	orr.w	r3, r3, #2
 8008ec4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008ec6:	2003      	movs	r0, #3
 8008ec8:	f7f8 f8ba 	bl	8001040 <HAL_Delay>

  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	60fb      	str	r3, [r7, #12]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	4a13      	ldr	r2, [pc, #76]	; (8008f3c <USB_CoreReset+0x64>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d901      	bls.n	8008ef6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	e01b      	b.n	8008f2e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	daf2      	bge.n	8008ee4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	f043 0201 	orr.w	r2, r3, #1
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	3301      	adds	r3, #1
 8008f12:	60fb      	str	r3, [r7, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4a09      	ldr	r2, [pc, #36]	; (8008f3c <USB_CoreReset+0x64>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d901      	bls.n	8008f20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e006      	b.n	8008f2e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d0f0      	beq.n	8008f0e <USB_CoreReset+0x36>

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	00030d40 	.word	0x00030d40

08008f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f42:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 8008f46:	af1e      	add	r7, sp, #120	; 0x78
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008f48:	f7f8 f808 	bl	8000f5c <HAL_Init>
  // todo transfer init part of code here

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008f4c:	f000 ff44 	bl	8009dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008f50:	f001 ff9a 	bl	800ae88 <MX_GPIO_Init>
  MX_DMA_Init();
 8008f54:	f001 ff52 	bl	800adfc <MX_DMA_Init>
  MX_TIM9_Init();
 8008f58:	f001 fde0 	bl	800ab1c <MX_TIM9_Init>
  MX_SPI2_Init();
 8008f5c:	f001 fb12 	bl	800a584 <MX_SPI2_Init>
  MX_ADC1_Init();
 8008f60:	f000 ffbe 	bl	8009ee0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8008f64:	f001 f89a 	bl	800a09c <MX_ADC2_Init>
  MX_CAN1_Init();
 8008f68:	f001 fa54 	bl	800a414 <MX_CAN1_Init>
  MX_I2C1_Init();
 8008f6c:	f001 fa88 	bl	800a480 <MX_I2C1_Init>
  MX_I2C2_Init();
 8008f70:	f001 fab4 	bl	800a4dc <MX_I2C2_Init>
  MX_TIM1_Init();
 8008f74:	f001 fb3e 	bl	800a5f4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8008f78:	f001 fee8 	bl	800ad4c <MX_USART3_UART_Init>
  MX_TIM8_Init();
 8008f7c:	f001 fd76 	bl	800aa6c <MX_TIM8_Init>
  MX_TIM13_Init();
 8008f80:	f001 fe9e 	bl	800acc0 <MX_TIM13_Init>
  MX_TIM12_Init();
 8008f84:	f001 fe3c 	bl	800ac00 <MX_TIM12_Init>
  MX_TIM2_Init();
 8008f88:	f001 fc06 	bl	800a798 <MX_TIM2_Init>
  MX_ADC3_Init();
 8008f8c:	f001 f964 	bl	800a258 <MX_ADC3_Init>
  MX_USB_OTG_FS_PCD_Init();
 8008f90:	f001 ff06 	bl	800ada0 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8008f94:	f001 fad0 	bl	800a538 <MX_RTC_Init>
  MX_TIM6_Init();
 8008f98:	f001 fd32 	bl	800aa00 <MX_TIM6_Init>
  MX_TIM3_Init();
 8008f9c:	f001 fc6e 	bl	800a87c <MX_TIM3_Init>
  MX_TIM5_Init();
 8008fa0:	f001 fce0 	bl	800a964 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  calc_lookup(lookup);
 8008fa4:	4860      	ldr	r0, [pc, #384]	; (8009128 <main+0x1e8>)
 8008fa6:	f002 fa13 	bl	800b3d0 <calc_lookup>

	uint8_t buf[400];
	//uint8_t plot[300];

	char ch='.';
 8008faa:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8008fae:	222e      	movs	r2, #46	; 0x2e
 8008fb0:	701a      	strb	r2, [r3, #0]
	int16_t accel16;
	uint8_t accel8l;
	uint8_t accel8h;

  // --- SET STATUS LEDS
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	485d      	ldr	r0, [pc, #372]	; (800912c <main+0x1ec>)
 8008fb6:	f7fd fc41 	bl	800683c <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2);
 8008fba:	2104      	movs	r1, #4
 8008fbc:	485b      	ldr	r0, [pc, #364]	; (800912c <main+0x1ec>)
 8008fbe:	f7fd fbc9 	bl	8006754 <HAL_TIM_OC_Start>

  HAL_TIM_OC_Start(&htim12, TIM_CHANNEL_1);
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	485a      	ldr	r0, [pc, #360]	; (8009130 <main+0x1f0>)
 8008fc6:	f7fd fbc5 	bl	8006754 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8008fca:	2100      	movs	r1, #0
 8008fcc:	4859      	ldr	r0, [pc, #356]	; (8009134 <main+0x1f4>)
 8008fce:	f7fd fbc1 	bl	8006754 <HAL_TIM_OC_Start>

  // --- ENABLE DRV
  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1); //todo maybe redundant since its also done below
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008fd8:	4857      	ldr	r0, [pc, #348]	; (8009138 <main+0x1f8>)
 8008fda:	f7fa fd7b 	bl	8003ad4 <HAL_GPIO_WritePin>


  SCB->CPACR |= 0xf00000;
 8008fde:	4b57      	ldr	r3, [pc, #348]	; (800913c <main+0x1fc>)
 8008fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe4:	4a55      	ldr	r2, [pc, #340]	; (800913c <main+0x1fc>)
 8008fe6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  int i=0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	uint32_t i_fast = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	uint32_t i_slow = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	uint32_t fast2slow = 100;
 8009000:	2364      	movs	r3, #100	; 0x64
 8009002:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

	int blink_duration = 100;
 8009006:	2364      	movs	r3, #100	; 0x64
 8009008:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  //  HAL_Delay(2);


	// --- MOTOR DRIVER ----------------------------------------------------
	//EN_GATE
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800900c:	2100      	movs	r1, #0
 800900e:	484c      	ldr	r0, [pc, #304]	; (8009140 <main+0x200>)
 8009010:	f7fd fc14 	bl	800683c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8009014:	2100      	movs	r1, #0
 8009016:	484a      	ldr	r0, [pc, #296]	; (8009140 <main+0x200>)
 8009018:	f7fe fd45 	bl	8007aa6 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800901c:	2104      	movs	r1, #4
 800901e:	4848      	ldr	r0, [pc, #288]	; (8009140 <main+0x200>)
 8009020:	f7fd fc0c 	bl	800683c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8009024:	2104      	movs	r1, #4
 8009026:	4846      	ldr	r0, [pc, #280]	; (8009140 <main+0x200>)
 8009028:	f7fe fd3d 	bl	8007aa6 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800902c:	2108      	movs	r1, #8
 800902e:	4844      	ldr	r0, [pc, #272]	; (8009140 <main+0x200>)
 8009030:	f7fd fc04 	bl	800683c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8009034:	2108      	movs	r1, #8
 8009036:	4842      	ldr	r0, [pc, #264]	; (8009140 <main+0x200>)
 8009038:	f7fe fd35 	bl	8007aa6 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 800903c:	210c      	movs	r1, #12
 800903e:	4840      	ldr	r0, [pc, #256]	; (8009140 <main+0x200>)
 8009040:	f7fd fb88 	bl	8006754 <HAL_TIM_OC_Start>

	playSound( 3, 100, 20);
 8009044:	2214      	movs	r2, #20
 8009046:	2164      	movs	r1, #100	; 0x64
 8009048:	2003      	movs	r0, #3
 800904a:	f002 f983 	bl	800b354 <playSound>

	HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
 800904e:	2201      	movs	r2, #1
 8009050:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009054:	4838      	ldr	r0, [pc, #224]	; (8009138 <main+0x1f8>)
 8009056:	f7fa fd3d 	bl	8003ad4 <HAL_GPIO_WritePin>


	// --- used for heartbeat of microcontroller
	HAL_TIM_Base_Start_IT(&htim3);
 800905a:	483a      	ldr	r0, [pc, #232]	; (8009144 <main+0x204>)
 800905c:	f7fd fb21 	bl	80066a2 <HAL_TIM_Base_Start_IT>

	// --- 32bit timer used to measure time in10mus
	HAL_TIM_Base_Start(&htim5);
 8009060:	4839      	ldr	r0, [pc, #228]	; (8009148 <main+0x208>)
 8009062:	f7fd fafa 	bl	800665a <HAL_TIM_Base_Start>
	// --- I2C2 IMU ------------------------------------------------
	//see: https://www.youtube.com/watch?v=isOekyygpR8
	//b1101000
	char accel_char[20];

	buf[0] = 0x6B; //power register
 8009066:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800906a:	226b      	movs	r2, #107	; 0x6b
 800906c:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x00; //switch on
 800906e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009072:	2200      	movs	r2, #0
 8009074:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 2, HAL_MAX_DELAY);
 8009076:	23d0      	movs	r3, #208	; 0xd0
 8009078:	b299      	uxth	r1, r3
 800907a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800907e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	2302      	movs	r3, #2
 8009086:	4831      	ldr	r0, [pc, #196]	; (800914c <main+0x20c>)
 8009088:	f7fa fea8 	bl	8003ddc <HAL_I2C_Master_Transmit>
 800908c:	4603      	mov	r3, r0
 800908e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
	if (ret != HAL_OK){
 8009092:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8009096:	2b00      	cmp	r3, #0
 8009098:	d008      	beq.n	80090ac <main+0x16c>
		strcpy((char*)buf, "Error IMU T\r\n");
 800909a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800909e:	4a2c      	ldr	r2, [pc, #176]	; (8009150 <main+0x210>)
 80090a0:	461c      	mov	r4, r3
 80090a2:	4613      	mov	r3, r2
 80090a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80090a6:	c407      	stmia	r4!, {r0, r1, r2}
 80090a8:	8023      	strh	r3, [r4, #0]
 80090aa:	e003      	b.n	80090b4 <main+0x174>
	} else {
		buf[0] = 0x00;
 80090ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80090b0:	2200      	movs	r2, #0
 80090b2:	701a      	strb	r2, [r3, #0]
	}

	buf[0] = 0x3B;
 80090b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80090b8:	223b      	movs	r2, #59	; 0x3b
 80090ba:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 80090bc:	23d0      	movs	r3, #208	; 0xd0
 80090be:	b299      	uxth	r1, r3
 80090c0:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80090c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	2301      	movs	r3, #1
 80090cc:	481f      	ldr	r0, [pc, #124]	; (800914c <main+0x20c>)
 80090ce:	f7fa fe85 	bl	8003ddc <HAL_I2C_Master_Transmit>
 80090d2:	4603      	mov	r3, r0
 80090d4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
	if (ret != HAL_OK){
 80090d8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d008      	beq.n	80090f2 <main+0x1b2>
		strcpy((char*)buf, "Error IMU T\r\n");
 80090e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80090e4:	4a1a      	ldr	r2, [pc, #104]	; (8009150 <main+0x210>)
 80090e6:	461c      	mov	r4, r3
 80090e8:	4613      	mov	r3, r2
 80090ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80090ec:	c407      	stmia	r4!, {r0, r1, r2}
 80090ee:	8023      	strh	r3, [r4, #0]
 80090f0:	e03f      	b.n	8009172 <main+0x232>
	} else {
		ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 80090f2:	23d0      	movs	r3, #208	; 0xd0
 80090f4:	b299      	uxth	r1, r3
 80090f6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80090fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	2301      	movs	r3, #1
 8009102:	4812      	ldr	r0, [pc, #72]	; (800914c <main+0x20c>)
 8009104:	f7fa ff68 	bl	8003fd8 <HAL_I2C_Master_Receive>
 8009108:	4603      	mov	r3, r0
 800910a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
		if (ret != HAL_OK){
 800910e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8009112:	2b00      	cmp	r3, #0
 8009114:	d020      	beq.n	8009158 <main+0x218>
			strcpy((char*)buf, "Error IMU R\r\n");
 8009116:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800911a:	4a0e      	ldr	r2, [pc, #56]	; (8009154 <main+0x214>)
 800911c:	461c      	mov	r4, r3
 800911e:	4613      	mov	r3, r2
 8009120:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009122:	c407      	stmia	r4!, {r0, r1, r2}
 8009124:	8023      	strh	r3, [r4, #0]
 8009126:	e024      	b.n	8009172 <main+0x232>
 8009128:	20000224 	.word	0x20000224
 800912c:	20000ea8 	.word	0x20000ea8
 8009130:	20001070 	.word	0x20001070
 8009134:	20000f8c 	.word	0x20000f8c
 8009138:	40021000 	.word	0x40021000
 800913c:	e000ed00 	.word	0xe000ed00
 8009140:	20000e00 	.word	0x20000e00
 8009144:	20000bec 	.word	0x20000bec
 8009148:	20000ba8 	.word	0x20000ba8
 800914c:	20000a90 	.word	0x20000a90
 8009150:	0800ea90 	.word	0x0800ea90
 8009154:	0800eaa0 	.word	0x0800eaa0
		} else {
			accel8l = (int8_t)buf[0];
 8009158:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	f887 323a 	strb.w	r3, [r7, #570]	; 0x23a
			sprintf((char*)accel_char, "%u m\r\n", (int)accel8l);
 8009162:	f897 223a 	ldrb.w	r2, [r7, #570]	; 0x23a
 8009166:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800916a:	49d8      	ldr	r1, [pc, #864]	; (80094cc <main+0x58c>)
 800916c:	4618      	mov	r0, r3
 800916e:	f004 f813 	bl	800d198 <siprintf>
  //					}
  //
  //				}

	// --- TIMERS ----------------------------------------------------
	TIM9->CCR1 = blink_duration;
 8009172:	4ad7      	ldr	r2, [pc, #860]	; (80094d0 <main+0x590>)
 8009174:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8009178:	6353      	str	r3, [r2, #52]	; 0x34
	TIM9->CCR2 = blink_duration;
 800917a:	4ad5      	ldr	r2, [pc, #852]	; (80094d0 <main+0x590>)
 800917c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8009180:	6393      	str	r3, [r2, #56]	; 0x38

	// --- GPIO ----------------------------------------------------

	GPIOE->BSRR = GPIO_PIN_4; //switches LD2
 8009182:	4bd4      	ldr	r3, [pc, #848]	; (80094d4 <main+0x594>)
 8009184:	2210      	movs	r2, #16
 8009186:	619a      	str	r2, [r3, #24]




	playSound( 2, 100, 40);
 8009188:	2228      	movs	r2, #40	; 0x28
 800918a:	2164      	movs	r1, #100	; 0x64
 800918c:	2002      	movs	r0, #2
 800918e:	f002 f8e1 	bl	800b354 <playSound>
	playSound( 1, 100, 80);
 8009192:	2250      	movs	r2, #80	; 0x50
 8009194:	2164      	movs	r1, #100	; 0x64
 8009196:	2001      	movs	r0, #1
 8009198:	f002 f8dc 	bl	800b354 <playSound>
	HAL_Delay(100); // So the system stops vibrating
 800919c:	2064      	movs	r0, #100	; 0x64
 800919e:	f7f7 ff4f 	bl	8001040 <HAL_Delay>




	// --- ROTATION SENSOR INIT ----------------------------------------------------
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL );
 80091a2:	213c      	movs	r1, #60	; 0x3c
 80091a4:	48cc      	ldr	r0, [pc, #816]	; (80094d8 <main+0x598>)
 80091a6:	f7fd fc4e 	bl	8006a46 <HAL_TIM_Encoder_Start_IT>
	uint8_t spi_value_8[2];

	//todo UGLY BUG - Ugly FIX: now i just send the init below twice because somehow the communication of the first transaction does not seem to work-- i sse on the MISO signal the lines just pulls up to 0.5V instead of 3V but it works fine for the next transmission so it gets initialized correctly if i sent it twice

	// --- set ABI and enable PWM
	spi_address_8[1]= 0x00;//
 80091aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80091ae:	2200      	movs	r2, #0
 80091b0:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0x18;//00000000 00011000
 80091b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80091b6:	2218      	movs	r2, #24
 80091b8:	701a      	strb	r2, [r3, #0]
	spi_value_8[1]= 0x80;
 80091ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80091be:	2280      	movs	r2, #128	; 0x80
 80091c0:	705a      	strb	r2, [r3, #1]
	spi_value_8[0]= 0x80;  //10000000 10000000
 80091c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80091c6:	2280      	movs	r2, #128	; 0x80
 80091c8:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 80091ca:	f002 f8ab 	bl	800b324 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80091ce:	2200      	movs	r2, #0
 80091d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80091d4:	48c1      	ldr	r0, [pc, #772]	; (80094dc <main+0x59c>)
 80091d6:	f7fa fc7d 	bl	8003ad4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 80091da:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80091de:	2301      	movs	r3, #1
 80091e0:	2201      	movs	r2, #1
 80091e2:	48bf      	ldr	r0, [pc, #764]	; (80094e0 <main+0x5a0>)
 80091e4:	f7fc fbff 	bl	80059e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80091e8:	2201      	movs	r2, #1
 80091ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80091ee:	48bb      	ldr	r0, [pc, #748]	; (80094dc <main+0x59c>)
 80091f0:	f7fa fc70 	bl	8003ad4 <HAL_GPIO_WritePin>
	delay_SPI();
 80091f4:	f002 f896 	bl	800b324 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80091f8:	2200      	movs	r2, #0
 80091fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80091fe:	48b7      	ldr	r0, [pc, #732]	; (80094dc <main+0x59c>)
 8009200:	f7fa fc68 	bl	8003ad4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8009204:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8009208:	2301      	movs	r3, #1
 800920a:	2201      	movs	r2, #1
 800920c:	48b4      	ldr	r0, [pc, #720]	; (80094e0 <main+0x5a0>)
 800920e:	f7fc fbea 	bl	80059e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8009212:	2201      	movs	r2, #1
 8009214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009218:	48b0      	ldr	r0, [pc, #704]	; (80094dc <main+0x59c>)
 800921a:	f7fa fc5b 	bl	8003ad4 <HAL_GPIO_WritePin>

	// --- set ABI and enable PWM
		spi_address_8[1]= 0x00;//
 800921e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009222:	2200      	movs	r2, #0
 8009224:	705a      	strb	r2, [r3, #1]
		spi_address_8[0]= 0x18;//00000000 00011000
 8009226:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800922a:	2218      	movs	r2, #24
 800922c:	701a      	strb	r2, [r3, #0]
		spi_value_8[1]= 0x80;
 800922e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009232:	2280      	movs	r2, #128	; 0x80
 8009234:	705a      	strb	r2, [r3, #1]
		spi_value_8[0]= 0x80;  //10000000 10000000
 8009236:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800923a:	2280      	movs	r2, #128	; 0x80
 800923c:	701a      	strb	r2, [r3, #0]
		delay_SPI();
 800923e:	f002 f871 	bl	800b324 <delay_SPI>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8009242:	2200      	movs	r2, #0
 8009244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009248:	48a4      	ldr	r0, [pc, #656]	; (80094dc <main+0x59c>)
 800924a:	f7fa fc43 	bl	8003ad4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 800924e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009252:	2301      	movs	r3, #1
 8009254:	2201      	movs	r2, #1
 8009256:	48a2      	ldr	r0, [pc, #648]	; (80094e0 <main+0x5a0>)
 8009258:	f7fc fbc5 	bl	80059e6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 800925c:	2201      	movs	r2, #1
 800925e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009262:	489e      	ldr	r0, [pc, #632]	; (80094dc <main+0x59c>)
 8009264:	f7fa fc36 	bl	8003ad4 <HAL_GPIO_WritePin>
		delay_SPI();
 8009268:	f002 f85c 	bl	800b324 <delay_SPI>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 800926c:	2200      	movs	r2, #0
 800926e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009272:	489a      	ldr	r0, [pc, #616]	; (80094dc <main+0x59c>)
 8009274:	f7fa fc2e 	bl	8003ad4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8009278:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800927c:	2301      	movs	r3, #1
 800927e:	2201      	movs	r2, #1
 8009280:	4897      	ldr	r0, [pc, #604]	; (80094e0 <main+0x5a0>)
 8009282:	f7fc fbb0 	bl	80059e6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8009286:	2201      	movs	r2, #1
 8009288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800928c:	4893      	ldr	r0, [pc, #588]	; (80094dc <main+0x59c>)
 800928e:	f7fa fc21 	bl	8003ad4 <HAL_GPIO_WritePin>



	// --- set ABI and enable PWM
	spi_address_8[1]= 0x00;//
 8009292:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009296:	2200      	movs	r2, #0
 8009298:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0x18;//00000000 00011000
 800929a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800929e:	2218      	movs	r2, #24
 80092a0:	701a      	strb	r2, [r3, #0]
	spi_value_8[1]= 0x80;
 80092a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80092a6:	2280      	movs	r2, #128	; 0x80
 80092a8:	705a      	strb	r2, [r3, #1]
	spi_value_8[0]= 0x80;  //10000000 10000000
 80092aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80092ae:	2280      	movs	r2, #128	; 0x80
 80092b0:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 80092b2:	f002 f837 	bl	800b324 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80092b6:	2200      	movs	r2, #0
 80092b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092bc:	4887      	ldr	r0, [pc, #540]	; (80094dc <main+0x59c>)
 80092be:	f7fa fc09 	bl	8003ad4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 80092c2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80092c6:	2301      	movs	r3, #1
 80092c8:	2201      	movs	r2, #1
 80092ca:	4885      	ldr	r0, [pc, #532]	; (80094e0 <main+0x5a0>)
 80092cc:	f7fc fb8b 	bl	80059e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80092d0:	2201      	movs	r2, #1
 80092d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092d6:	4881      	ldr	r0, [pc, #516]	; (80094dc <main+0x59c>)
 80092d8:	f7fa fbfc 	bl	8003ad4 <HAL_GPIO_WritePin>
	delay_SPI();
 80092dc:	f002 f822 	bl	800b324 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80092e0:	2200      	movs	r2, #0
 80092e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092e6:	487d      	ldr	r0, [pc, #500]	; (80094dc <main+0x59c>)
 80092e8:	f7fa fbf4 	bl	8003ad4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 80092ec:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80092f0:	2301      	movs	r3, #1
 80092f2:	2201      	movs	r2, #1
 80092f4:	487a      	ldr	r0, [pc, #488]	; (80094e0 <main+0x5a0>)
 80092f6:	f7fc fb76 	bl	80059e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80092fa:	2201      	movs	r2, #1
 80092fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009300:	4876      	ldr	r0, [pc, #472]	; (80094dc <main+0x59c>)
 8009302:	f7fa fbe7 	bl	8003ad4 <HAL_GPIO_WritePin>

	// --- set steps 2000steps 500 pulses //todo this seems not to work as I get 4000 steps
	spi_address_8[1]= 0x80;
 8009306:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800930a:	2280      	movs	r2, #128	; 0x80
 800930c:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0x19; //00001000 00011001
 800930e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009312:	2219      	movs	r2, #25
 8009314:	701a      	strb	r2, [r3, #0]
	//address = AS_ADDR_SETTINGS2 | AS_WRITE ; // 0x8019
	//value = 0x0020 | AS_ODD; // 0x8020
	//value = 0x00E0 | AS_ODD;
	spi_value_8[1]= 0x80;
 8009316:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800931a:	2280      	movs	r2, #128	; 0x80
 800931c:	705a      	strb	r2, [r3, #1]
	spi_value_8[0]= 0x20;  // 10000000 00100000
 800931e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009322:	2220      	movs	r2, #32
 8009324:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 8009326:	f001 fffd 	bl	800b324 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 800932a:	2200      	movs	r2, #0
 800932c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009330:	486a      	ldr	r0, [pc, #424]	; (80094dc <main+0x59c>)
 8009332:	f7fa fbcf 	bl	8003ad4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8009336:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800933a:	2301      	movs	r3, #1
 800933c:	2201      	movs	r2, #1
 800933e:	4868      	ldr	r0, [pc, #416]	; (80094e0 <main+0x5a0>)
 8009340:	f7fc fb51 	bl	80059e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8009344:	2201      	movs	r2, #1
 8009346:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800934a:	4864      	ldr	r0, [pc, #400]	; (80094dc <main+0x59c>)
 800934c:	f7fa fbc2 	bl	8003ad4 <HAL_GPIO_WritePin>
	delay_SPI();
 8009350:	f001 ffe8 	bl	800b324 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8009354:	2200      	movs	r2, #0
 8009356:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800935a:	4860      	ldr	r0, [pc, #384]	; (80094dc <main+0x59c>)
 800935c:	f7fa fbba 	bl	8003ad4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8009360:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8009364:	2301      	movs	r3, #1
 8009366:	2201      	movs	r2, #1
 8009368:	485d      	ldr	r0, [pc, #372]	; (80094e0 <main+0x5a0>)
 800936a:	f7fc fb3c 	bl	80059e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 800936e:	2201      	movs	r2, #1
 8009370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009374:	4859      	ldr	r0, [pc, #356]	; (80094dc <main+0x59c>)
 8009376:	f7fa fbad 	bl	8003ad4 <HAL_GPIO_WritePin>

	// --- read angle
	HAL_Delay(1);
 800937a:	2001      	movs	r0, #1
 800937c:	f7f7 fe60 	bl	8001040 <HAL_Delay>

	uint8_t angle8[2];
	uint16_t angle;

	//for (int i=0; i<4; i++)
	spi_address_8[1]= 0x7F;
 8009380:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009384:	227f      	movs	r2, #127	; 0x7f
 8009386:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0xFE;
 8009388:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800938c:	22fe      	movs	r2, #254	; 0xfe
 800938e:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 8009390:	f001 ffc8 	bl	800b324 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8009394:	2200      	movs	r2, #0
 8009396:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800939a:	4850      	ldr	r0, [pc, #320]	; (80094dc <main+0x59c>)
 800939c:	f7fa fb9a 	bl	8003ad4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 80093a0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80093a4:	2301      	movs	r3, #1
 80093a6:	2201      	movs	r2, #1
 80093a8:	484d      	ldr	r0, [pc, #308]	; (80094e0 <main+0x5a0>)
 80093aa:	f7fc fb1c 	bl	80059e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80093ae:	2201      	movs	r2, #1
 80093b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80093b4:	4849      	ldr	r0, [pc, #292]	; (80094dc <main+0x59c>)
 80093b6:	f7fa fb8d 	bl	8003ad4 <HAL_GPIO_WritePin>
	delay_SPI();
 80093ba:	f001 ffb3 	bl	800b324 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80093be:	2200      	movs	r2, #0
 80093c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80093c4:	4845      	ldr	r0, [pc, #276]	; (80094dc <main+0x59c>)
 80093c6:	f7fa fb85 	bl	8003ad4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, (uint8_t *)&angle8, 1, 1);
 80093ca:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80093ce:	2301      	movs	r3, #1
 80093d0:	2201      	movs	r2, #1
 80093d2:	4843      	ldr	r0, [pc, #268]	; (80094e0 <main+0x5a0>)
 80093d4:	f7fc fc3b 	bl	8005c4e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80093d8:	2201      	movs	r2, #1
 80093da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80093de:	483f      	ldr	r0, [pc, #252]	; (80094dc <main+0x59c>)
 80093e0:	f7fa fb78 	bl	8003ad4 <HAL_GPIO_WritePin>

	angle = (uint16_t) angle8[0] | (uint16_t) angle8[1] << 8U;
 80093e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	b21a      	sxth	r2, r3
 80093ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80093f0:	785b      	ldrb	r3, [r3, #1]
 80093f2:	021b      	lsls	r3, r3, #8
 80093f4:	b21b      	sxth	r3, r3
 80093f6:	4313      	orrs	r3, r2
 80093f8:	b21b      	sxth	r3, r3
 80093fa:	f8a7 3238 	strh.w	r3, [r7, #568]	; 0x238
	angle &= AS_DATA_MASK;
 80093fe:	f8b7 3238 	ldrh.w	r3, [r7, #568]	; 0x238
 8009402:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009406:	f8a7 3238 	strh.w	r3, [r7, #568]	; 0x238


	// --- ROTATION SENSOR 0 POINT SETTING ----------------------------------------------------
	//angle &= AS_DATA_MASK;
	EncVal = (uint16_t) ((float)angle /16384.0 * ENC_STEPS);
 800940a:	f8b7 3238 	ldrh.w	r3, [r7, #568]	; 0x238
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009416:	ee17 0a90 	vmov	r0, s15
 800941a:	f7f7 f895 	bl	8000548 <__aeabi_f2d>
 800941e:	f04f 0200 	mov.w	r2, #0
 8009422:	4b30      	ldr	r3, [pc, #192]	; (80094e4 <main+0x5a4>)
 8009424:	f7f7 fa12 	bl	800084c <__aeabi_ddiv>
 8009428:	4603      	mov	r3, r0
 800942a:	460c      	mov	r4, r1
 800942c:	4618      	mov	r0, r3
 800942e:	4621      	mov	r1, r4
 8009430:	f04f 0200 	mov.w	r2, #0
 8009434:	4b2c      	ldr	r3, [pc, #176]	; (80094e8 <main+0x5a8>)
 8009436:	f7f7 f8df 	bl	80005f8 <__aeabi_dmul>
 800943a:	4603      	mov	r3, r0
 800943c:	460c      	mov	r4, r1
 800943e:	4618      	mov	r0, r3
 8009440:	4621      	mov	r1, r4
 8009442:	f7f7 fb9b 	bl	8000b7c <__aeabi_d2uiz>
 8009446:	4603      	mov	r3, r0
 8009448:	b29b      	uxth	r3, r3
 800944a:	b21a      	sxth	r2, r3
 800944c:	4b27      	ldr	r3, [pc, #156]	; (80094ec <main+0x5ac>)
 800944e:	801a      	strh	r2, [r3, #0]
	last_EncVal = EncVal;
 8009450:	4b26      	ldr	r3, [pc, #152]	; (80094ec <main+0x5ac>)
 8009452:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009456:	4b26      	ldr	r3, [pc, #152]	; (80094f0 <main+0x5b0>)
 8009458:	801a      	strh	r2, [r3, #0]
	last_EncVal_v = EncVal;
 800945a:	4b24      	ldr	r3, [pc, #144]	; (80094ec <main+0x5ac>)
 800945c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009460:	4b24      	ldr	r3, [pc, #144]	; (80094f4 <main+0x5b4>)
 8009462:	801a      	strh	r2, [r3, #0]
	TIM8->CNT = EncVal;
 8009464:	4b21      	ldr	r3, [pc, #132]	; (80094ec <main+0x5ac>)
 8009466:	f9b3 2000 	ldrsh.w	r2, [r3]
 800946a:	4b23      	ldr	r3, [pc, #140]	; (80094f8 <main+0x5b8>)
 800946c:	625a      	str	r2, [r3, #36]	; 0x24
//	EncVal = TIM8->CNT;//takes 200ns
//	TIM1->CCR1 = 0;
//	phase = (float) EncVal * 0.02199 ;

	// --- UART DMA
	HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMAUSARTTransferComplete);
 800946e:	4a23      	ldr	r2, [pc, #140]	; (80094fc <main+0x5bc>)
 8009470:	2100      	movs	r1, #0
 8009472:	4823      	ldr	r0, [pc, #140]	; (8009500 <main+0x5c0>)
 8009474:	f7fa f862 	bl	800353c <HAL_DMA_RegisterCallback>


	//HAL_TIM_RegisterCallback(&htim8, HAL_TIM_IC_CAPTURE_CB_ID, &EncoderStepCallback );

	// --- ADC DMA
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, 30); // this is the only one working // the length must be multiple of channels otherwise I observed mess in order - even like 2 of one and lots of mess
 8009478:	221e      	movs	r2, #30
 800947a:	4922      	ldr	r1, [pc, #136]	; (8009504 <main+0x5c4>)
 800947c:	4822      	ldr	r0, [pc, #136]	; (8009508 <main+0x5c8>)
 800947e:	f7f7 ff85 	bl	800138c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, 30); // TODO enabling this only leads to no change all values stay zero
 8009482:	221e      	movs	r2, #30
 8009484:	4921      	ldr	r1, [pc, #132]	; (800950c <main+0x5cc>)
 8009486:	4822      	ldr	r0, [pc, #136]	; (8009510 <main+0x5d0>)
 8009488:	f7f7 ff80 	bl	800138c <HAL_ADC_Start_DMA>
 	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, 30); // TODO enabling this breaks transmission entirely
 800948c:	221e      	movs	r2, #30
 800948e:	4921      	ldr	r1, [pc, #132]	; (8009514 <main+0x5d4>)
 8009490:	4821      	ldr	r0, [pc, #132]	; (8009518 <main+0x5d8>)
 8009492:	f7f7 ff7b 	bl	800138c <HAL_ADC_Start_DMA>


	HAL_ADCEx_InjectedStart (&hadc1);
 8009496:	481c      	ldr	r0, [pc, #112]	; (8009508 <main+0x5c8>)
 8009498:	f7f8 fb1e 	bl	8001ad8 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc2);
 800949c:	481c      	ldr	r0, [pc, #112]	; (8009510 <main+0x5d0>)
 800949e:	f7f8 fb1b 	bl	8001ad8 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc3); // again this seems to break  the full loop
 80094a2:	481d      	ldr	r0, [pc, #116]	; (8009518 <main+0x5d8>)
 80094a4:	f7f8 fb18 	bl	8001ad8 <HAL_ADCEx_InjectedStart>
//
//


	sprintf((char*)buf, "\r\n\r\nWELCOME TO MUSCLEmaster \r\n\r\nangle: %d EncVal %d \r\nangle: %u EncVal %u \r\n\r\n",
 80094a8:	f8b7 1238 	ldrh.w	r1, [r7, #568]	; 0x238
 80094ac:	4b0f      	ldr	r3, [pc, #60]	; (80094ec <main+0x5ac>)
 80094ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094b2:	461c      	mov	r4, r3
 80094b4:	f8b7 3238 	ldrh.w	r3, [r7, #568]	; 0x238
 80094b8:	4a0c      	ldr	r2, [pc, #48]	; (80094ec <main+0x5ac>)
 80094ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 80094be:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80094c2:	9201      	str	r2, [sp, #4]
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	4623      	mov	r3, r4
 80094c8:	460a      	mov	r2, r1
 80094ca:	e027      	b.n	800951c <main+0x5dc>
 80094cc:	0800eab0 	.word	0x0800eab0
 80094d0:	40014000 	.word	0x40014000
 80094d4:	40021000 	.word	0x40021000
 80094d8:	2000056c 	.word	0x2000056c
 80094dc:	40020c00 	.word	0x40020c00
 80094e0:	200001cc 	.word	0x200001cc
 80094e4:	40d00000 	.word	0x40d00000
 80094e8:	409f4000 	.word	0x409f4000
 80094ec:	20000d3c 	.word	0x20000d3c
 80094f0:	20000ae4 	.word	0x20000ae4
 80094f4:	20000be8 	.word	0x20000be8
 80094f8:	40010400 	.word	0x40010400
 80094fc:	0800b49d 	.word	0x0800b49d
 8009500:	20000b48 	.word	0x20000b48
 8009504:	20000c30 	.word	0x20000c30
 8009508:	20000c6c 	.word	0x20000c6c
 800950c:	20000f50 	.word	0x20000f50
 8009510:	200005ec 	.word	0x200005ec
 8009514:	20000e6c 	.word	0x20000e6c
 8009518:	20000cb4 	.word	0x20000cb4
 800951c:	49c4      	ldr	r1, [pc, #784]	; (8009830 <main+0x8f0>)
 800951e:	f003 fe3b 	bl	800d198 <siprintf>
			angle, EncVal ,
			angle, EncVal );
	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 8009522:	4bc4      	ldr	r3, [pc, #784]	; (8009834 <main+0x8f4>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	695a      	ldr	r2, [r3, #20]
 8009528:	4bc2      	ldr	r3, [pc, #776]	; (8009834 <main+0x8f4>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009530:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 8009532:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8009536:	4bbf      	ldr	r3, [pc, #764]	; (8009834 <main+0x8f4>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3304      	adds	r3, #4
 800953c:	461d      	mov	r5, r3
 800953e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009542:	4618      	mov	r0, r3
 8009544:	f7f6 fe44 	bl	80001d0 <strlen>
 8009548:	4603      	mov	r3, r0
 800954a:	462a      	mov	r2, r5
 800954c:	4621      	mov	r1, r4
 800954e:	48ba      	ldr	r0, [pc, #744]	; (8009838 <main+0x8f8>)
 8009550:	f7f9 fdf0 	bl	8003134 <HAL_DMA_Start_IT>

	HAL_Delay(10); //some delay needed othwise the first print statement in while will overwrite
 8009554:	200a      	movs	r0, #10
 8009556:	f7f7 fd73 	bl	8001040 <HAL_Delay>
	//HAL_TIM_Base_Start(&htim3);


	//HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);

	mode_of_operation = 1;
 800955a:	4bb8      	ldr	r3, [pc, #736]	; (800983c <main+0x8fc>)
 800955c:	2201      	movs	r2, #1
 800955e:	701a      	strb	r2, [r3, #0]


	pHeader.DLC =6;
 8009560:	4bb7      	ldr	r3, [pc, #732]	; (8009840 <main+0x900>)
 8009562:	2206      	movs	r2, #6
 8009564:	611a      	str	r2, [r3, #16]
	pHeader.IDE = CAN_ID_STD;
 8009566:	4bb6      	ldr	r3, [pc, #728]	; (8009840 <main+0x900>)
 8009568:	2200      	movs	r2, #0
 800956a:	609a      	str	r2, [r3, #8]
	pHeader.RTR = CAN_RTR_DATA;
 800956c:	4bb4      	ldr	r3, [pc, #720]	; (8009840 <main+0x900>)
 800956e:	2200      	movs	r2, #0
 8009570:	60da      	str	r2, [r3, #12]
	pHeader.StdId = 0x001;
 8009572:	4bb3      	ldr	r3, [pc, #716]	; (8009840 <main+0x900>)
 8009574:	2201      	movs	r2, #1
 8009576:	601a      	str	r2, [r3, #0]

	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8009578:	4bb2      	ldr	r3, [pc, #712]	; (8009844 <main+0x904>)
 800957a:	2200      	movs	r2, #0
 800957c:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = CAN_ID<<5;
 800957e:	4bb1      	ldr	r3, [pc, #708]	; (8009844 <main+0x904>)
 8009580:	f44f 7218 	mov.w	r2, #608	; 0x260
 8009584:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8009586:	4baf      	ldr	r3, [pc, #700]	; (8009844 <main+0x904>)
 8009588:	2200      	movs	r2, #0
 800958a:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF;
 800958c:	4bad      	ldr	r3, [pc, #692]	; (8009844 <main+0x904>)
 800958e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009592:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0xFFFF;
 8009594:	4bab      	ldr	r3, [pc, #684]	; (8009844 <main+0x904>)
 8009596:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800959a:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800959c:	4ba9      	ldr	r3, [pc, #676]	; (8009844 <main+0x904>)
 800959e:	2200      	movs	r2, #0
 80095a0:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 80095a2:	4ba8      	ldr	r3, [pc, #672]	; (8009844 <main+0x904>)
 80095a4:	2201      	movs	r2, #1
 80095a6:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80095a8:	49a6      	ldr	r1, [pc, #664]	; (8009844 <main+0x904>)
 80095aa:	48a7      	ldr	r0, [pc, #668]	; (8009848 <main+0x908>)
 80095ac:	f7f8 fe98 	bl	80022e0 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 80095b0:	48a5      	ldr	r0, [pc, #660]	; (8009848 <main+0x908>)
 80095b2:	f7f8 ff75 	bl	80024a0 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80095b6:	2102      	movs	r1, #2
 80095b8:	48a3      	ldr	r0, [pc, #652]	; (8009848 <main+0x908>)
 80095ba:	f7f9 f9a2 	bl	8002902 <HAL_CAN_ActivateNotification>
  {
  	// -------------------------------------------------------------
		// --- FAST PROCESS ----------------------------------------------------
		// -------------------------------------------------------------

  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 80095be:	4ba3      	ldr	r3, [pc, #652]	; (800984c <main+0x90c>)
 80095c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80095c4:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 80095c6:	4ba1      	ldr	r3, [pc, #644]	; (800984c <main+0x90c>)
 80095c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095cc:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 80095ce:	4b9f      	ldr	r3, [pc, #636]	; (800984c <main+0x90c>)
 80095d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80095d4:	619a      	str	r2, [r3, #24]
		debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 80095d6:	4b9d      	ldr	r3, [pc, #628]	; (800984c <main+0x90c>)
 80095d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095dc:	619a      	str	r2, [r3, #24]

	  // -------------------------------------------------------------
	  // --- SLOW PROCESS ----------------------------------------------------
	  // -------------------------------------------------------------

	  if (i_fast%fast2slow == 0){
 80095de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80095e2:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80095e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80095ea:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 80095ee:	fb01 f202 	mul.w	r2, r1, r2
 80095f2:	1a9b      	subs	r3, r3, r2
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f040 83c6 	bne.w	8009d86 <main+0xe46>
	  	//a++;
	  	//HAL_CAN_AddTxMessage(&hcan1, &pHeader, &a, &TxMailbox);

	  	// --- GPIO ----------------------------------------------------
	  	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 80095fa:	2110      	movs	r1, #16
 80095fc:	4894      	ldr	r0, [pc, #592]	; (8009850 <main+0x910>)
 80095fe:	f7fa fa82 	bl	8003b06 <HAL_GPIO_TogglePin>

			// --- UART ----------------------------------------------------


			HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 8009602:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8009606:	2201      	movs	r2, #1
 8009608:	4619      	mov	r1, r3
 800960a:	488a      	ldr	r0, [pc, #552]	; (8009834 <main+0x8f4>)
 800960c:	f7fe fbca 	bl	8007da4 <HAL_UART_Receive_IT>

			if (rx_character_buffered != '.'){
 8009610:	4b90      	ldr	r3, [pc, #576]	; (8009854 <main+0x914>)
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2b2e      	cmp	r3, #46	; 0x2e
 8009616:	d007      	beq.n	8009628 <main+0x6e8>
				ch = rx_character_buffered;
 8009618:	4b8e      	ldr	r3, [pc, #568]	; (8009854 <main+0x914>)
 800961a:	781a      	ldrb	r2, [r3, #0]
 800961c:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8009620:	701a      	strb	r2, [r3, #0]
				//rx_character_armed = 0;
				rx_character_buffered = '.';
 8009622:	4b8c      	ldr	r3, [pc, #560]	; (8009854 <main+0x914>)
 8009624:	222e      	movs	r2, #46	; 0x2e
 8009626:	701a      	strb	r2, [r3, #0]
			}



			switch(ch){
 8009628:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	3b41      	subs	r3, #65	; 0x41
 8009630:	2b39      	cmp	r3, #57	; 0x39
 8009632:	f200 81f9 	bhi.w	8009a28 <main+0xae8>
 8009636:	a201      	add	r2, pc, #4	; (adr r2, 800963c <main+0x6fc>)
 8009638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963c:	08009959 	.word	0x08009959
 8009640:	080099e5 	.word	0x080099e5
 8009644:	08009a29 	.word	0x08009a29
 8009648:	08009947 	.word	0x08009947
 800964c:	08009995 	.word	0x08009995
 8009650:	08009981 	.word	0x08009981
 8009654:	080099dd 	.word	0x080099dd
 8009658:	08009a29 	.word	0x08009a29
 800965c:	08009a29 	.word	0x08009a29
 8009660:	08009a29 	.word	0x08009a29
 8009664:	08009a29 	.word	0x08009a29
 8009668:	08009a29 	.word	0x08009a29
 800966c:	08009a29 	.word	0x08009a29
 8009670:	08009a29 	.word	0x08009a29
 8009674:	08009a29 	.word	0x08009a29
 8009678:	08009903 	.word	0x08009903
 800967c:	080099a1 	.word	0x080099a1
 8009680:	0800996f 	.word	0x0800996f
 8009684:	08009931 	.word	0x08009931
 8009688:	080099d5 	.word	0x080099d5
 800968c:	08009a29 	.word	0x08009a29
 8009690:	08009a29 	.word	0x08009a29
 8009694:	0800991f 	.word	0x0800991f
 8009698:	080098fd 	.word	0x080098fd
 800969c:	08009a29 	.word	0x08009a29
 80096a0:	08009a29 	.word	0x08009a29
 80096a4:	08009a29 	.word	0x08009a29
 80096a8:	08009a29 	.word	0x08009a29
 80096ac:	08009a29 	.word	0x08009a29
 80096b0:	08009a29 	.word	0x08009a29
 80096b4:	08009a29 	.word	0x08009a29
 80096b8:	08009a29 	.word	0x08009a29
 80096bc:	0800974d 	.word	0x0800974d
 80096c0:	08009a29 	.word	0x08009a29
 80096c4:	08009a29 	.word	0x08009a29
 80096c8:	08009775 	.word	0x08009775
 80096cc:	080097c5 	.word	0x080097c5
 80096d0:	08009805 	.word	0x08009805
 80096d4:	080097f5 	.word	0x080097f5
 80096d8:	080097fd 	.word	0x080097fd
 80096dc:	08009909 	.word	0x08009909
 80096e0:	08009895 	.word	0x08009895
 80096e4:	08009911 	.word	0x08009911
 80096e8:	080098e7 	.word	0x080098e7
 80096ec:	080099ad 	.word	0x080099ad
 80096f0:	080099bf 	.word	0x080099bf
 80096f4:	080098dd 	.word	0x080098dd
 80096f8:	080098bd 	.word	0x080098bd
 80096fc:	0800979d 	.word	0x0800979d
 8009700:	0800980f 	.word	0x0800980f
 8009704:	08009737 	.word	0x08009737
 8009708:	080097ed 	.word	0x080097ed
 800970c:	0800986d 	.word	0x0800986d
 8009710:	08009a29 	.word	0x08009a29
 8009714:	08009725 	.word	0x08009725
 8009718:	08009a29 	.word	0x08009a29
 800971c:	08009a29 	.word	0x08009a29
 8009720:	0800981b 	.word	0x0800981b
				case 'w':
					amp *= 2;
 8009724:	4b4c      	ldr	r3, [pc, #304]	; (8009858 <main+0x918>)
 8009726:	edd3 7a00 	vldr	s15, [r3]
 800972a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800972e:	4b4a      	ldr	r3, [pc, #296]	; (8009858 <main+0x918>)
 8009730:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009734:	e17c      	b.n	8009a30 <main+0xaf0>
				case 's':
					amp /= 2;
 8009736:	4b48      	ldr	r3, [pc, #288]	; (8009858 <main+0x918>)
 8009738:	ed93 7a00 	vldr	s14, [r3]
 800973c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009740:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009744:	4b44      	ldr	r3, [pc, #272]	; (8009858 <main+0x918>)
 8009746:	edc3 7a00 	vstr	s15, [r3]
					break;
 800974a:	e171      	b.n	8009a30 <main+0xaf0>
				case 'a':
					phase_shift -= 0.05;
 800974c:	4b43      	ldr	r3, [pc, #268]	; (800985c <main+0x91c>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4618      	mov	r0, r3
 8009752:	f7f6 fef9 	bl	8000548 <__aeabi_f2d>
 8009756:	a334      	add	r3, pc, #208	; (adr r3, 8009828 <main+0x8e8>)
 8009758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975c:	f7f6 fd94 	bl	8000288 <__aeabi_dsub>
 8009760:	4603      	mov	r3, r0
 8009762:	460c      	mov	r4, r1
 8009764:	4618      	mov	r0, r3
 8009766:	4621      	mov	r1, r4
 8009768:	f7f7 fa28 	bl	8000bbc <__aeabi_d2f>
 800976c:	4602      	mov	r2, r0
 800976e:	4b3b      	ldr	r3, [pc, #236]	; (800985c <main+0x91c>)
 8009770:	601a      	str	r2, [r3, #0]
					break;
 8009772:	e15d      	b.n	8009a30 <main+0xaf0>
				case 'd':
					phase_shift += 0.05;
 8009774:	4b39      	ldr	r3, [pc, #228]	; (800985c <main+0x91c>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4618      	mov	r0, r3
 800977a:	f7f6 fee5 	bl	8000548 <__aeabi_f2d>
 800977e:	a32a      	add	r3, pc, #168	; (adr r3, 8009828 <main+0x8e8>)
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	f7f6 fd82 	bl	800028c <__adddf3>
 8009788:	4603      	mov	r3, r0
 800978a:	460c      	mov	r4, r1
 800978c:	4618      	mov	r0, r3
 800978e:	4621      	mov	r1, r4
 8009790:	f7f7 fa14 	bl	8000bbc <__aeabi_d2f>
 8009794:	4602      	mov	r2, r0
 8009796:	4b31      	ldr	r3, [pc, #196]	; (800985c <main+0x91c>)
 8009798:	601a      	str	r2, [r3, #0]
					break;
 800979a:	e149      	b.n	8009a30 <main+0xaf0>
				case 'q':
					phase0 -= 0.05;
 800979c:	4b30      	ldr	r3, [pc, #192]	; (8009860 <main+0x920>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7f6 fed1 	bl	8000548 <__aeabi_f2d>
 80097a6:	a320      	add	r3, pc, #128	; (adr r3, 8009828 <main+0x8e8>)
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	f7f6 fd6c 	bl	8000288 <__aeabi_dsub>
 80097b0:	4603      	mov	r3, r0
 80097b2:	460c      	mov	r4, r1
 80097b4:	4618      	mov	r0, r3
 80097b6:	4621      	mov	r1, r4
 80097b8:	f7f7 fa00 	bl	8000bbc <__aeabi_d2f>
 80097bc:	4602      	mov	r2, r0
 80097be:	4b28      	ldr	r3, [pc, #160]	; (8009860 <main+0x920>)
 80097c0:	601a      	str	r2, [r3, #0]
					break;
 80097c2:	e135      	b.n	8009a30 <main+0xaf0>
				case 'e':
					phase0 += 0.05;
 80097c4:	4b26      	ldr	r3, [pc, #152]	; (8009860 <main+0x920>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7f6 febd 	bl	8000548 <__aeabi_f2d>
 80097ce:	a316      	add	r3, pc, #88	; (adr r3, 8009828 <main+0x8e8>)
 80097d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d4:	f7f6 fd5a 	bl	800028c <__adddf3>
 80097d8:	4603      	mov	r3, r0
 80097da:	460c      	mov	r4, r1
 80097dc:	4618      	mov	r0, r3
 80097de:	4621      	mov	r1, r4
 80097e0:	f7f7 f9ec 	bl	8000bbc <__aeabi_d2f>
 80097e4:	4602      	mov	r2, r0
 80097e6:	4b1e      	ldr	r3, [pc, #120]	; (8009860 <main+0x920>)
 80097e8:	601a      	str	r2, [r3, #0]
					break;
 80097ea:	e121      	b.n	8009a30 <main+0xaf0>
				case 't':
					run_motor = 1;
 80097ec:	4b1d      	ldr	r3, [pc, #116]	; (8009864 <main+0x924>)
 80097ee:	2201      	movs	r2, #1
 80097f0:	601a      	str	r2, [r3, #0]
					break;
 80097f2:	e11d      	b.n	8009a30 <main+0xaf0>
				case 'g':
					run_motor = 0;
 80097f4:	4b1b      	ldr	r3, [pc, #108]	; (8009864 <main+0x924>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	601a      	str	r2, [r3, #0]
					break;
 80097fa:	e119      	b.n	8009a30 <main+0xaf0>
				case 'h':
					direction = 1; //positive should be clockwise == EncVal increases positive :)
 80097fc:	4b1a      	ldr	r3, [pc, #104]	; (8009868 <main+0x928>)
 80097fe:	2201      	movs	r2, #1
 8009800:	601a      	str	r2, [r3, #0]
					break;
 8009802:	e115      	b.n	8009a30 <main+0xaf0>
				case 'f':
					direction = -1;
 8009804:	4b18      	ldr	r3, [pc, #96]	; (8009868 <main+0x928>)
 8009806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800980a:	601a      	str	r2, [r3, #0]
					break;
 800980c:	e110      	b.n	8009a30 <main+0xaf0>
				case 'r':
					direction *= -1;
 800980e:	4b16      	ldr	r3, [pc, #88]	; (8009868 <main+0x928>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	425b      	negs	r3, r3
 8009814:	4a14      	ldr	r2, [pc, #80]	; (8009868 <main+0x928>)
 8009816:	6013      	str	r3, [r2, #0]
					break;
 8009818:	e10a      	b.n	8009a30 <main+0xaf0>
				case 'z':
					playSound( 1, 20, 100);
 800981a:	2264      	movs	r2, #100	; 0x64
 800981c:	2114      	movs	r1, #20
 800981e:	2001      	movs	r0, #1
 8009820:	f001 fd98 	bl	800b354 <playSound>
					break;
 8009824:	e104      	b.n	8009a30 <main+0xaf0>
 8009826:	bf00      	nop
 8009828:	9999999a 	.word	0x9999999a
 800982c:	3fa99999 	.word	0x3fa99999
 8009830:	0800eab8 	.word	0x0800eab8
 8009834:	200005ac 	.word	0x200005ac
 8009838:	20000b48 	.word	0x20000b48
 800983c:	20000111 	.word	0x20000111
 8009840:	200010b0 	.word	0x200010b0
 8009844:	2000012c 	.word	0x2000012c
 8009848:	20001048 	.word	0x20001048
 800984c:	40020c00 	.word	0x40020c00
 8009850:	40021000 	.word	0x40021000
 8009854:	2000000e 	.word	0x2000000e
 8009858:	20000018 	.word	0x20000018
 800985c:	20000024 	.word	0x20000024
 8009860:	20000010 	.word	0x20000010
 8009864:	2000001c 	.word	0x2000001c
 8009868:	20000020 	.word	0x20000020
				case 'u':
					stiffness += 0.001;
 800986c:	4b62      	ldr	r3, [pc, #392]	; (80099f8 <main+0xab8>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4618      	mov	r0, r3
 8009872:	f7f6 fe69 	bl	8000548 <__aeabi_f2d>
 8009876:	a35e      	add	r3, pc, #376	; (adr r3, 80099f0 <main+0xab0>)
 8009878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987c:	f7f6 fd06 	bl	800028c <__adddf3>
 8009880:	4603      	mov	r3, r0
 8009882:	460c      	mov	r4, r1
 8009884:	4618      	mov	r0, r3
 8009886:	4621      	mov	r1, r4
 8009888:	f7f7 f998 	bl	8000bbc <__aeabi_d2f>
 800988c:	4602      	mov	r2, r0
 800988e:	4b5a      	ldr	r3, [pc, #360]	; (80099f8 <main+0xab8>)
 8009890:	601a      	str	r2, [r3, #0]
					break;
 8009892:	e0cd      	b.n	8009a30 <main+0xaf0>
				case 'j':
					stiffness -= 0.001;
 8009894:	4b58      	ldr	r3, [pc, #352]	; (80099f8 <main+0xab8>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4618      	mov	r0, r3
 800989a:	f7f6 fe55 	bl	8000548 <__aeabi_f2d>
 800989e:	a354      	add	r3, pc, #336	; (adr r3, 80099f0 <main+0xab0>)
 80098a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a4:	f7f6 fcf0 	bl	8000288 <__aeabi_dsub>
 80098a8:	4603      	mov	r3, r0
 80098aa:	460c      	mov	r4, r1
 80098ac:	4618      	mov	r0, r3
 80098ae:	4621      	mov	r1, r4
 80098b0:	f7f7 f984 	bl	8000bbc <__aeabi_d2f>
 80098b4:	4602      	mov	r2, r0
 80098b6:	4b50      	ldr	r3, [pc, #320]	; (80099f8 <main+0xab8>)
 80098b8:	601a      	str	r2, [r3, #0]
					break;
 80098ba:	e0b9      	b.n	8009a30 <main+0xaf0>
				case 'p':
					//print2uart = false;
					print2uart = !print2uart;
 80098bc:	4b4f      	ldr	r3, [pc, #316]	; (80099fc <main+0xabc>)
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	bf14      	ite	ne
 80098c4:	2301      	movne	r3, #1
 80098c6:	2300      	moveq	r3, #0
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	f083 0301 	eor.w	r3, r3, #1
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	4b49      	ldr	r3, [pc, #292]	; (80099fc <main+0xabc>)
 80098d8:	701a      	strb	r2, [r3, #0]
					break;
 80098da:	e0a9      	b.n	8009a30 <main+0xaf0>
				case 'o':
					//HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
					EN_GATE_GPIO_Port->BSRR = (uint32_t)EN_GATE_Pin << 16U;
 80098dc:	4b48      	ldr	r3, [pc, #288]	; (8009a00 <main+0xac0>)
 80098de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80098e2:	619a      	str	r2, [r3, #24]
					break;
 80098e4:	e0a4      	b.n	8009a30 <main+0xaf0>
				case 'l':
					HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 80098e6:	2201      	movs	r2, #1
 80098e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80098ec:	4844      	ldr	r0, [pc, #272]	; (8009a00 <main+0xac0>)
 80098ee:	f7fa f8f1 	bl	8003ad4 <HAL_GPIO_WritePin>
					EN_GATE_GPIO_Port->BSRR = EN_GATE_Pin ;
 80098f2:	4b43      	ldr	r3, [pc, #268]	; (8009a00 <main+0xac0>)
 80098f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80098f8:	619a      	str	r2, [r3, #24]
					break;
 80098fa:	e099      	b.n	8009a30 <main+0xaf0>
				case 'X':
					step_through_pole_angles();
 80098fc:	f001 fbb0 	bl	800b060 <step_through_pole_angles>
					break;
 8009900:	e096      	b.n	8009a30 <main+0xaf0>
				case 'P':
					step_through_pwm_percent();
 8009902:	f001 fcd7 	bl	800b2b4 <step_through_pwm_percent>
					break;
 8009906:	e093      	b.n	8009a30 <main+0xaf0>
				case 'i':
					mode_of_control = 1;
 8009908:	4b3e      	ldr	r3, [pc, #248]	; (8009a04 <main+0xac4>)
 800990a:	2201      	movs	r2, #1
 800990c:	701a      	strb	r2, [r3, #0]
					break;
 800990e:	e08f      	b.n	8009a30 <main+0xaf0>
				case 'k':
					mode_of_control = 0;
 8009910:	4b3c      	ldr	r3, [pc, #240]	; (8009a04 <main+0xac4>)
 8009912:	2200      	movs	r2, #0
 8009914:	701a      	strb	r2, [r3, #0]
					amp = 0.05;
 8009916:	4b3c      	ldr	r3, [pc, #240]	; (8009a08 <main+0xac8>)
 8009918:	4a3c      	ldr	r2, [pc, #240]	; (8009a0c <main+0xacc>)
 800991a:	601a      	str	r2, [r3, #0]
					break;
 800991c:	e088      	b.n	8009a30 <main+0xaf0>

				// pos control
				case 'W':
					pos_amp *= 2;
 800991e:	4b3c      	ldr	r3, [pc, #240]	; (8009a10 <main+0xad0>)
 8009920:	edd3 7a00 	vldr	s15, [r3]
 8009924:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009928:	4b39      	ldr	r3, [pc, #228]	; (8009a10 <main+0xad0>)
 800992a:	edc3 7a00 	vstr	s15, [r3]
					break;
 800992e:	e07f      	b.n	8009a30 <main+0xaf0>
				case 'S':
					pos_amp *= 0.5;
 8009930:	4b37      	ldr	r3, [pc, #220]	; (8009a10 <main+0xad0>)
 8009932:	edd3 7a00 	vldr	s15, [r3]
 8009936:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800993a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800993e:	4b34      	ldr	r3, [pc, #208]	; (8009a10 <main+0xad0>)
 8009940:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009944:	e074      	b.n	8009a30 <main+0xaf0>
				case 'D':
					pos_freq *= 2;
 8009946:	4b33      	ldr	r3, [pc, #204]	; (8009a14 <main+0xad4>)
 8009948:	edd3 7a00 	vldr	s15, [r3]
 800994c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009950:	4b30      	ldr	r3, [pc, #192]	; (8009a14 <main+0xad4>)
 8009952:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009956:	e06b      	b.n	8009a30 <main+0xaf0>
				case 'A':
					pos_freq *= 0.5;
 8009958:	4b2e      	ldr	r3, [pc, #184]	; (8009a14 <main+0xad4>)
 800995a:	edd3 7a00 	vldr	s15, [r3]
 800995e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009966:	4b2b      	ldr	r3, [pc, #172]	; (8009a14 <main+0xad4>)
 8009968:	edc3 7a00 	vstr	s15, [r3]
					break;
 800996c:	e060      	b.n	8009a30 <main+0xaf0>
				case 'R':
					pos_amp_limit *= 2;
 800996e:	4b2a      	ldr	r3, [pc, #168]	; (8009a18 <main+0xad8>)
 8009970:	edd3 7a00 	vldr	s15, [r3]
 8009974:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009978:	4b27      	ldr	r3, [pc, #156]	; (8009a18 <main+0xad8>)
 800997a:	edc3 7a00 	vstr	s15, [r3]
					break;
 800997e:	e057      	b.n	8009a30 <main+0xaf0>
				case 'F':
					pos_amp_limit *= 0.5;
 8009980:	4b25      	ldr	r3, [pc, #148]	; (8009a18 <main+0xad8>)
 8009982:	edd3 7a00 	vldr	s15, [r3]
 8009986:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800998a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800998e:	4b22      	ldr	r3, [pc, #136]	; (8009a18 <main+0xad8>)
 8009990:	edc3 7a00 	vstr	s15, [r3]
				case 'E':
					pos_offset += 200;
 8009994:	4b21      	ldr	r3, [pc, #132]	; (8009a1c <main+0xadc>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	33c8      	adds	r3, #200	; 0xc8
 800999a:	4a20      	ldr	r2, [pc, #128]	; (8009a1c <main+0xadc>)
 800999c:	6013      	str	r3, [r2, #0]
					break;
 800999e:	e047      	b.n	8009a30 <main+0xaf0>
				case 'Q':
					pos_offset -= 200;
 80099a0:	4b1e      	ldr	r3, [pc, #120]	; (8009a1c <main+0xadc>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3bc8      	subs	r3, #200	; 0xc8
 80099a6:	4a1d      	ldr	r2, [pc, #116]	; (8009a1c <main+0xadc>)
 80099a8:	6013      	str	r3, [r2, #0]
					break;
 80099aa:	e041      	b.n	8009a30 <main+0xaf0>
				case 'm':
					P_gain *= 2;
 80099ac:	4b1c      	ldr	r3, [pc, #112]	; (8009a20 <main+0xae0>)
 80099ae:	edd3 7a00 	vldr	s15, [r3]
 80099b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80099b6:	4b1a      	ldr	r3, [pc, #104]	; (8009a20 <main+0xae0>)
 80099b8:	edc3 7a00 	vstr	s15, [r3]
					break;
 80099bc:	e038      	b.n	8009a30 <main+0xaf0>
				case 'n':
					P_gain *= 0.5;
 80099be:	4b18      	ldr	r3, [pc, #96]	; (8009a20 <main+0xae0>)
 80099c0:	edd3 7a00 	vldr	s15, [r3]
 80099c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80099c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099cc:	4b14      	ldr	r3, [pc, #80]	; (8009a20 <main+0xae0>)
 80099ce:	edc3 7a00 	vstr	s15, [r3]
					break;
 80099d2:	e02d      	b.n	8009a30 <main+0xaf0>

				case 'T':
					wave_mode = 0;
 80099d4:	4b13      	ldr	r3, [pc, #76]	; (8009a24 <main+0xae4>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	701a      	strb	r2, [r3, #0]
					break;
 80099da:	e029      	b.n	8009a30 <main+0xaf0>
				case 'G':
					wave_mode = 1;
 80099dc:	4b11      	ldr	r3, [pc, #68]	; (8009a24 <main+0xae4>)
 80099de:	2201      	movs	r2, #1
 80099e0:	701a      	strb	r2, [r3, #0]
					break;
 80099e2:	e025      	b.n	8009a30 <main+0xaf0>
				case 'B':
					wave_mode = 2;
 80099e4:	4b0f      	ldr	r3, [pc, #60]	; (8009a24 <main+0xae4>)
 80099e6:	2202      	movs	r2, #2
 80099e8:	701a      	strb	r2, [r3, #0]
					break;
 80099ea:	e021      	b.n	8009a30 <main+0xaf0>
 80099ec:	f3af 8000 	nop.w
 80099f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80099f4:	3f50624d 	.word	0x3f50624d
 80099f8:	200000d0 	.word	0x200000d0
 80099fc:	20000040 	.word	0x20000040
 8009a00:	40021000 	.word	0x40021000
 8009a04:	20000112 	.word	0x20000112
 8009a08:	20000018 	.word	0x20000018
 8009a0c:	3d4ccccd 	.word	0x3d4ccccd
 8009a10:	20000028 	.word	0x20000028
 8009a14:	2000002c 	.word	0x2000002c
 8009a18:	20000030 	.word	0x20000030
 8009a1c:	200000d4 	.word	0x200000d4
 8009a20:	20000034 	.word	0x20000034
 8009a24:	20000110 	.word	0x20000110

				default:
					ch='.';
 8009a28:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8009a2c:	222e      	movs	r2, #46	; 0x2e
 8009a2e:	701a      	strb	r2, [r3, #0]
			}

			//HAL_ADCEx_InjectedStart (&hadc1);
			HAL_ADCEx_InjectedPollForConversion (&hadc1, 1);
 8009a30:	2101      	movs	r1, #1
 8009a32:	48b4      	ldr	r0, [pc, #720]	; (8009d04 <main+0xdc4>)
 8009a34:	f7f8 f90e 	bl	8001c54 <HAL_ADCEx_InjectedPollForConversion>

			uint32_t val_I = HAL_ADCEx_InjectedGetValue (&hadc1, 1);
 8009a38:	2101      	movs	r1, #1
 8009a3a:	48b2      	ldr	r0, [pc, #712]	; (8009d04 <main+0xdc4>)
 8009a3c:	f7f8 f97e 	bl	8001d3c <HAL_ADCEx_InjectedGetValue>
 8009a40:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
			uint32_t val_ASENSE = HAL_ADCEx_InjectedGetValue (&hadc1, 2);
 8009a44:	2102      	movs	r1, #2
 8009a46:	48af      	ldr	r0, [pc, #700]	; (8009d04 <main+0xdc4>)
 8009a48:	f7f8 f978 	bl	8001d3c <HAL_ADCEx_InjectedGetValue>
 8009a4c:	f8c7 0230 	str.w	r0, [r7, #560]	; 0x230
			uint32_t val_STRAIN0 = HAL_ADCEx_InjectedGetValue (&hadc1, 3);
 8009a50:	2103      	movs	r1, #3
 8009a52:	48ac      	ldr	r0, [pc, #688]	; (8009d04 <main+0xdc4>)
 8009a54:	f7f8 f972 	bl	8001d3c <HAL_ADCEx_InjectedGetValue>
 8009a58:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
			uint32_t val_M0_TEMP = HAL_ADCEx_InjectedGetValue (&hadc1, 4);
 8009a5c:	2104      	movs	r1, #4
 8009a5e:	48a9      	ldr	r0, [pc, #676]	; (8009d04 <main+0xdc4>)
 8009a60:	f7f8 f96c 	bl	8001d3c <HAL_ADCEx_InjectedGetValue>
 8009a64:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228

			uint32_t val_SO1 = HAL_ADCEx_InjectedGetValue (&hadc2, 1);
 8009a68:	2101      	movs	r1, #1
 8009a6a:	48a7      	ldr	r0, [pc, #668]	; (8009d08 <main+0xdc8>)
 8009a6c:	f7f8 f966 	bl	8001d3c <HAL_ADCEx_InjectedGetValue>
 8009a70:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
			uint32_t val_BSENSE = HAL_ADCEx_InjectedGetValue (&hadc2, 2);
 8009a74:	2102      	movs	r1, #2
 8009a76:	48a4      	ldr	r0, [pc, #656]	; (8009d08 <main+0xdc8>)
 8009a78:	f7f8 f960 	bl	8001d3c <HAL_ADCEx_InjectedGetValue>
 8009a7c:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
			uint32_t val_STRAIN1 = HAL_ADCEx_InjectedGetValue (&hadc2, 3);
 8009a80:	2103      	movs	r1, #3
 8009a82:	48a1      	ldr	r0, [pc, #644]	; (8009d08 <main+0xdc8>)
 8009a84:	f7f8 f95a 	bl	8001d3c <HAL_ADCEx_InjectedGetValue>
 8009a88:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
			uint32_t val_TEMP = HAL_ADCEx_InjectedGetValue (&hadc2, 4);
 8009a8c:	2104      	movs	r1, #4
 8009a8e:	489e      	ldr	r0, [pc, #632]	; (8009d08 <main+0xdc8>)
 8009a90:	f7f8 f954 	bl	8001d3c <HAL_ADCEx_InjectedGetValue>
 8009a94:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218

			uint32_t val_SO2 = HAL_ADCEx_InjectedGetValue (&hadc3, 1);
 8009a98:	2101      	movs	r1, #1
 8009a9a:	489c      	ldr	r0, [pc, #624]	; (8009d0c <main+0xdcc>)
 8009a9c:	f7f8 f94e 	bl	8001d3c <HAL_ADCEx_InjectedGetValue>
 8009aa0:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
			uint32_t val_CSENSE = HAL_ADCEx_InjectedGetValue (&hadc3, 2);
 8009aa4:	2102      	movs	r1, #2
 8009aa6:	4899      	ldr	r0, [pc, #612]	; (8009d0c <main+0xdcc>)
 8009aa8:	f7f8 f948 	bl	8001d3c <HAL_ADCEx_InjectedGetValue>
 8009aac:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210

//			// --- read angle
				//uint8_t spi_address_8[2];
				//uint8_t angle8[2];
				spi_address_8[1]= 0x7F;
 8009ab0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009ab4:	227f      	movs	r2, #127	; 0x7f
 8009ab6:	705a      	strb	r2, [r3, #1]
				spi_address_8[0]= 0xFE;
 8009ab8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009abc:	22fe      	movs	r2, #254	; 0xfe
 8009abe:	701a      	strb	r2, [r3, #0]
				//address8 = {0xFE, 0x7F};
				//address = 0x3FFE | AS_READ ;
				delay_SPI();
 8009ac0:	f001 fc30 	bl	800b324 <delay_SPI>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009aca:	4891      	ldr	r0, [pc, #580]	; (8009d10 <main+0xdd0>)
 8009acc:	f7fa f802 	bl	8003ad4 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8009ad0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	488e      	ldr	r0, [pc, #568]	; (8009d14 <main+0xdd4>)
 8009ada:	f7fb ff84 	bl	80059e6 <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ae4:	488a      	ldr	r0, [pc, #552]	; (8009d10 <main+0xdd0>)
 8009ae6:	f7f9 fff5 	bl	8003ad4 <HAL_GPIO_WritePin>
				delay_SPI();
 8009aea:	f001 fc1b 	bl	800b324 <delay_SPI>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8009aee:	2200      	movs	r2, #0
 8009af0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009af4:	4886      	ldr	r0, [pc, #536]	; (8009d10 <main+0xdd0>)
 8009af6:	f7f9 ffed 	bl	8003ad4 <HAL_GPIO_WritePin>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&angle8, 1, 1);
 8009afa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009afe:	2301      	movs	r3, #1
 8009b00:	2201      	movs	r2, #1
 8009b02:	4884      	ldr	r0, [pc, #528]	; (8009d14 <main+0xdd4>)
 8009b04:	f7fc f8a3 	bl	8005c4e <HAL_SPI_Receive>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009b0e:	4880      	ldr	r0, [pc, #512]	; (8009d10 <main+0xdd0>)
 8009b10:	f7f9 ffe0 	bl	8003ad4 <HAL_GPIO_WritePin>
				angle = (uint16_t) angle8[0] | (uint16_t) angle8[1] << 8U;
 8009b14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	b21a      	sxth	r2, r3
 8009b1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009b20:	785b      	ldrb	r3, [r3, #1]
 8009b22:	021b      	lsls	r3, r3, #8
 8009b24:	b21b      	sxth	r3, r3
 8009b26:	4313      	orrs	r3, r2
 8009b28:	b21b      	sxth	r3, r3
 8009b2a:	f8a7 3238 	strh.w	r3, [r7, #568]	; 0x238
				angle &= AS_DATA_MASK;
 8009b2e:	f8b7 3238 	ldrh.w	r3, [r7, #568]	; 0x238
 8009b32:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009b36:	f8a7 3238 	strh.w	r3, [r7, #568]	; 0x238

				uint32_t time10mus = TIM5->CNT;
 8009b3a:	4b77      	ldr	r3, [pc, #476]	; (8009d18 <main+0xdd8>)
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

				if (print2uart){
 8009b42:	4b76      	ldr	r3, [pc, #472]	; (8009d1c <main+0xddc>)
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 8114 	beq.w	8009d74 <main+0xe34>



						//                   0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5
						sprintf((char*)buf, "%c %d %d %d %d  %d c: %c r: %d %d %d %d %d  _ %d %d %d %d %d %d %d F %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d              \r\n",
 8009b4c:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	469c      	mov	ip, r3
								ch, tx_msg[0], rx_msg[1],rx_msg[2],rx_msg[3],rx_character,rx_character, rx_control_0, rx_control_1, rx_mode_0, rx_mode_1, rx_intent, (int)(av_start_angle*1000), time10mus, rotation_counter, angle, EncVal, (int)(phase_shift*1000),(int)(phase0*1000),//(int)(amp*100), (int)(phase_shift*100),
 8009b54:	4b72      	ldr	r3, [pc, #456]	; (8009d20 <main+0xde0>)
 8009b56:	781b      	ldrb	r3, [r3, #0]
						sprintf((char*)buf, "%c %d %d %d %d  %d c: %c r: %d %d %d %d %d  _ %d %d %d %d %d %d %d F %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d              \r\n",
 8009b58:	469e      	mov	lr, r3
								ch, tx_msg[0], rx_msg[1],rx_msg[2],rx_msg[3],rx_character,rx_character, rx_control_0, rx_control_1, rx_mode_0, rx_mode_1, rx_intent, (int)(av_start_angle*1000), time10mus, rotation_counter, angle, EncVal, (int)(phase_shift*1000),(int)(phase0*1000),//(int)(amp*100), (int)(phase_shift*100),
 8009b5a:	4b72      	ldr	r3, [pc, #456]	; (8009d24 <main+0xde4>)
 8009b5c:	785b      	ldrb	r3, [r3, #1]
						sprintf((char*)buf, "%c %d %d %d %d  %d c: %c r: %d %d %d %d %d  _ %d %d %d %d %d %d %d F %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d              \r\n",
 8009b5e:	647b      	str	r3, [r7, #68]	; 0x44
								ch, tx_msg[0], rx_msg[1],rx_msg[2],rx_msg[3],rx_character,rx_character, rx_control_0, rx_control_1, rx_mode_0, rx_mode_1, rx_intent, (int)(av_start_angle*1000), time10mus, rotation_counter, angle, EncVal, (int)(phase_shift*1000),(int)(phase0*1000),//(int)(amp*100), (int)(phase_shift*100),
 8009b60:	4b70      	ldr	r3, [pc, #448]	; (8009d24 <main+0xde4>)
 8009b62:	789b      	ldrb	r3, [r3, #2]
						sprintf((char*)buf, "%c %d %d %d %d  %d c: %c r: %d %d %d %d %d  _ %d %d %d %d %d %d %d F %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d              \r\n",
 8009b64:	643b      	str	r3, [r7, #64]	; 0x40
								ch, tx_msg[0], rx_msg[1],rx_msg[2],rx_msg[3],rx_character,rx_character, rx_control_0, rx_control_1, rx_mode_0, rx_mode_1, rx_intent, (int)(av_start_angle*1000), time10mus, rotation_counter, angle, EncVal, (int)(phase_shift*1000),(int)(phase0*1000),//(int)(amp*100), (int)(phase_shift*100),
 8009b66:	4b6f      	ldr	r3, [pc, #444]	; (8009d24 <main+0xde4>)
 8009b68:	78db      	ldrb	r3, [r3, #3]
						sprintf((char*)buf, "%c %d %d %d %d  %d c: %c r: %d %d %d %d %d  _ %d %d %d %d %d %d %d F %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d              \r\n",
 8009b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b6c:	4b6e      	ldr	r3, [pc, #440]	; (8009d28 <main+0xde8>)
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b72:	4b6d      	ldr	r3, [pc, #436]	; (8009d28 <main+0xde8>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	637b      	str	r3, [r7, #52]	; 0x34
 8009b78:	4b6c      	ldr	r3, [pc, #432]	; (8009d2c <main+0xdec>)
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8009b7e:	4b6c      	ldr	r3, [pc, #432]	; (8009d30 <main+0xdf0>)
 8009b80:	881b      	ldrh	r3, [r3, #0]
 8009b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b84:	4b6b      	ldr	r3, [pc, #428]	; (8009d34 <main+0xdf4>)
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b8a:	4b6b      	ldr	r3, [pc, #428]	; (8009d38 <main+0xdf8>)
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b90:	4b6a      	ldr	r3, [pc, #424]	; (8009d3c <main+0xdfc>)
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	623b      	str	r3, [r7, #32]
								ch, tx_msg[0], rx_msg[1],rx_msg[2],rx_msg[3],rx_character,rx_character, rx_control_0, rx_control_1, rx_mode_0, rx_mode_1, rx_intent, (int)(av_start_angle*1000), time10mus, rotation_counter, angle, EncVal, (int)(phase_shift*1000),(int)(phase0*1000),//(int)(amp*100), (int)(phase_shift*100),
 8009b96:	4b6a      	ldr	r3, [pc, #424]	; (8009d40 <main+0xe00>)
 8009b98:	edd3 7a00 	vldr	s15, [r3]
 8009b9c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8009d44 <main+0xe04>
 8009ba0:	ee67 7a87 	vmul.f32	s15, s15, s14
						sprintf((char*)buf, "%c %d %d %d %d  %d c: %c r: %d %d %d %d %d  _ %d %d %d %d %d %d %d F %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d              \r\n",
 8009ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ba8:	edc7 7a07 	vstr	s15, [r7, #28]
 8009bac:	4b66      	ldr	r3, [pc, #408]	; (8009d48 <main+0xe08>)
 8009bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bb2:	61bb      	str	r3, [r7, #24]
 8009bb4:	f8b7 1238 	ldrh.w	r1, [r7, #568]	; 0x238
 8009bb8:	460a      	mov	r2, r1
 8009bba:	617a      	str	r2, [r7, #20]
 8009bbc:	4b63      	ldr	r3, [pc, #396]	; (8009d4c <main+0xe0c>)
 8009bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bc2:	613b      	str	r3, [r7, #16]
								ch, tx_msg[0], rx_msg[1],rx_msg[2],rx_msg[3],rx_character,rx_character, rx_control_0, rx_control_1, rx_mode_0, rx_mode_1, rx_intent, (int)(av_start_angle*1000), time10mus, rotation_counter, angle, EncVal, (int)(phase_shift*1000),(int)(phase0*1000),//(int)(amp*100), (int)(phase_shift*100),
 8009bc4:	4b62      	ldr	r3, [pc, #392]	; (8009d50 <main+0xe10>)
 8009bc6:	edd3 7a00 	vldr	s15, [r3]
 8009bca:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8009d44 <main+0xe04>
 8009bce:	ee67 7a87 	vmul.f32	s15, s15, s14
						sprintf((char*)buf, "%c %d %d %d %d  %d c: %c r: %d %d %d %d %d  _ %d %d %d %d %d %d %d F %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d              \r\n",
 8009bd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009bd6:	edc7 7a03 	vstr	s15, [r7, #12]
								ch, tx_msg[0], rx_msg[1],rx_msg[2],rx_msg[3],rx_character,rx_character, rx_control_0, rx_control_1, rx_mode_0, rx_mode_1, rx_intent, (int)(av_start_angle*1000), time10mus, rotation_counter, angle, EncVal, (int)(phase_shift*1000),(int)(phase0*1000),//(int)(amp*100), (int)(phase_shift*100),
 8009bda:	4b5e      	ldr	r3, [pc, #376]	; (8009d54 <main+0xe14>)
 8009bdc:	edd3 7a00 	vldr	s15, [r3]
 8009be0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8009d44 <main+0xe04>
 8009be4:	ee67 7a87 	vmul.f32	s15, s15, s14
						sprintf((char*)buf, "%c %d %d %d %d  %d c: %c r: %d %d %d %d %d  _ %d %d %d %d %d %d %d F %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d              \r\n",
 8009be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009bec:	edc7 7a02 	vstr	s15, [r7, #8]
 8009bf0:	4b59      	ldr	r3, [pc, #356]	; (8009d58 <main+0xe18>)
 8009bf2:	681d      	ldr	r5, [r3, #0]
								//(int)(stiffness*1000),
								//(int)(1000*field_phase_shift), (int)(1000*field_phase_shift_pihalf), field_amplitude,
								pwmA, //pwmB, pwmC,
								(int)(1000*av_velocity),
 8009bf4:	4b59      	ldr	r3, [pc, #356]	; (8009d5c <main+0xe1c>)
 8009bf6:	edd3 7a00 	vldr	s15, [r3]
 8009bfa:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8009d44 <main+0xe04>
 8009bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
						sprintf((char*)buf, "%c %d %d %d %d  %d c: %c r: %d %d %d %d %d  _ %d %d %d %d %d %d %d F %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d              \r\n",
 8009c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c06:	edc7 7a01 	vstr	s15, [r7, #4]
 8009c0a:	4b50      	ldr	r3, [pc, #320]	; (8009d4c <main+0xe0c>)
 8009c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c10:	603b      	str	r3, [r7, #0]
								EncVal,
								val_I, val_ASENSE, val_STRAIN0, val_M0_TEMP,
								val_SO1,
								//val_BSENSE, val_STRAIN1, val_TEMP,
								//val_SO2, val_CSENSE),
								adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4]
 8009c12:	4b53      	ldr	r3, [pc, #332]	; (8009d60 <main+0xe20>)
 8009c14:	881b      	ldrh	r3, [r3, #0]
						sprintf((char*)buf, "%c %d %d %d %d  %d c: %c r: %d %d %d %d %d  _ %d %d %d %d %d %d %d F %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d              \r\n",
 8009c16:	461c      	mov	r4, r3
								adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4]
 8009c18:	4b51      	ldr	r3, [pc, #324]	; (8009d60 <main+0xe20>)
 8009c1a:	885b      	ldrh	r3, [r3, #2]
						sprintf((char*)buf, "%c %d %d %d %d  %d c: %c r: %d %d %d %d %d  _ %d %d %d %d %d %d %d F %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d              \r\n",
 8009c1c:	4618      	mov	r0, r3
								adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4]
 8009c1e:	4b50      	ldr	r3, [pc, #320]	; (8009d60 <main+0xe20>)
 8009c20:	889b      	ldrh	r3, [r3, #4]
						sprintf((char*)buf, "%c %d %d %d %d  %d c: %c r: %d %d %d %d %d  _ %d %d %d %d %d %d %d F %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d              \r\n",
 8009c22:	4619      	mov	r1, r3
								adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4]
 8009c24:	4b4e      	ldr	r3, [pc, #312]	; (8009d60 <main+0xe20>)
 8009c26:	88db      	ldrh	r3, [r3, #6]
						sprintf((char*)buf, "%c %d %d %d %d  %d c: %c r: %d %d %d %d %d  _ %d %d %d %d %d %d %d F %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d              \r\n",
 8009c28:	461a      	mov	r2, r3
								adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4]
 8009c2a:	4b4d      	ldr	r3, [pc, #308]	; (8009d60 <main+0xe20>)
 8009c2c:	891b      	ldrh	r3, [r3, #8]
						sprintf((char*)buf, "%c %d %d %d %d  %d c: %c r: %d %d %d %d %d  _ %d %d %d %d %d %d %d F %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d              \r\n",
 8009c2e:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 8009c32:	931d      	str	r3, [sp, #116]	; 0x74
 8009c34:	921c      	str	r2, [sp, #112]	; 0x70
 8009c36:	911b      	str	r1, [sp, #108]	; 0x6c
 8009c38:	901a      	str	r0, [sp, #104]	; 0x68
 8009c3a:	9419      	str	r4, [sp, #100]	; 0x64
 8009c3c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8009c40:	9318      	str	r3, [sp, #96]	; 0x60
 8009c42:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8009c46:	9317      	str	r3, [sp, #92]	; 0x5c
 8009c48:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8009c4c:	9316      	str	r3, [sp, #88]	; 0x58
 8009c4e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8009c52:	9315      	str	r3, [sp, #84]	; 0x54
 8009c54:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8009c58:	9314      	str	r3, [sp, #80]	; 0x50
 8009c5a:	6839      	ldr	r1, [r7, #0]
 8009c5c:	9113      	str	r1, [sp, #76]	; 0x4c
 8009c5e:	6879      	ldr	r1, [r7, #4]
 8009c60:	9112      	str	r1, [sp, #72]	; 0x48
 8009c62:	9511      	str	r5, [sp, #68]	; 0x44
 8009c64:	68b9      	ldr	r1, [r7, #8]
 8009c66:	9110      	str	r1, [sp, #64]	; 0x40
 8009c68:	68f9      	ldr	r1, [r7, #12]
 8009c6a:	910f      	str	r1, [sp, #60]	; 0x3c
 8009c6c:	6939      	ldr	r1, [r7, #16]
 8009c6e:	910e      	str	r1, [sp, #56]	; 0x38
 8009c70:	697a      	ldr	r2, [r7, #20]
 8009c72:	920d      	str	r2, [sp, #52]	; 0x34
 8009c74:	69ba      	ldr	r2, [r7, #24]
 8009c76:	920c      	str	r2, [sp, #48]	; 0x30
 8009c78:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009c7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c7e:	69fa      	ldr	r2, [r7, #28]
 8009c80:	920a      	str	r2, [sp, #40]	; 0x28
 8009c82:	6a3a      	ldr	r2, [r7, #32]
 8009c84:	9209      	str	r2, [sp, #36]	; 0x24
 8009c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c88:	9208      	str	r2, [sp, #32]
 8009c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c8c:	9207      	str	r2, [sp, #28]
 8009c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c90:	9206      	str	r2, [sp, #24]
 8009c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c94:	9205      	str	r2, [sp, #20]
 8009c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c98:	9204      	str	r2, [sp, #16]
 8009c9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c9c:	9203      	str	r2, [sp, #12]
 8009c9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ca0:	9202      	str	r2, [sp, #8]
 8009ca2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ca4:	9201      	str	r2, [sp, #4]
 8009ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	4673      	mov	r3, lr
 8009cac:	4662      	mov	r2, ip
 8009cae:	492d      	ldr	r1, [pc, #180]	; (8009d64 <main+0xe24>)
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	f003 fa71 	bl	800d198 <siprintf>
			//			buf[100] = '.';
			//			buf[50] = '|';
			//			buf[100 + max(-50, min(50, (int)av_velocity))] = 'v';


						if (buf_msgs[0] != '\0'){
 8009cb6:	4b2c      	ldr	r3, [pc, #176]	; (8009d68 <main+0xe28>)
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d008      	beq.n	8009cd0 <main+0xd90>
							strcat(buf, buf_msgs);
 8009cbe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009cc2:	4929      	ldr	r1, [pc, #164]	; (8009d68 <main+0xe28>)
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f003 fa87 	bl	800d1d8 <strcat>
							buf_msgs[0] = '\0';
 8009cca:	4b27      	ldr	r3, [pc, #156]	; (8009d68 <main+0xe28>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	701a      	strb	r2, [r3, #0]
						}



						//HAL_UART_Transmit_IT(&huart3, buf, strlen((char*)buf)); //WORKS but replaced by DMA below
						huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 8009cd0:	4b26      	ldr	r3, [pc, #152]	; (8009d6c <main+0xe2c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	695a      	ldr	r2, [r3, #20]
 8009cd6:	4b25      	ldr	r3, [pc, #148]	; (8009d6c <main+0xe2c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009cde:	615a      	str	r2, [r3, #20]
						HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 8009ce0:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8009ce4:	4b21      	ldr	r3, [pc, #132]	; (8009d6c <main+0xe2c>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3304      	adds	r3, #4
 8009cea:	461d      	mov	r5, r3
 8009cec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7f6 fa6d 	bl	80001d0 <strlen>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	462a      	mov	r2, r5
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	481c      	ldr	r0, [pc, #112]	; (8009d70 <main+0xe30>)
 8009cfe:	f7f9 fa19 	bl	8003134 <HAL_DMA_Start_IT>
 8009d02:	e037      	b.n	8009d74 <main+0xe34>
 8009d04:	20000c6c 	.word	0x20000c6c
 8009d08:	200005ec 	.word	0x200005ec
 8009d0c:	20000cb4 	.word	0x20000cb4
 8009d10:	40020c00 	.word	0x40020c00
 8009d14:	200001cc 	.word	0x200001cc
 8009d18:	40000c00 	.word	0x40000c00
 8009d1c:	20000040 	.word	0x20000040
 8009d20:	20000008 	.word	0x20000008
 8009d24:	20000c2c 	.word	0x20000c2c
 8009d28:	2000000f 	.word	0x2000000f
 8009d2c:	200000c8 	.word	0x200000c8
 8009d30:	200000ca 	.word	0x200000ca
 8009d34:	200000cc 	.word	0x200000cc
 8009d38:	200000cd 	.word	0x200000cd
 8009d3c:	200000ce 	.word	0x200000ce
 8009d40:	20000e68 	.word	0x20000e68
 8009d44:	447a0000 	.word	0x447a0000
 8009d48:	200000d8 	.word	0x200000d8
 8009d4c:	20000d3c 	.word	0x20000d3c
 8009d50:	20000024 	.word	0x20000024
 8009d54:	20000010 	.word	0x20000010
 8009d58:	200000ec 	.word	0x200000ec
 8009d5c:	200000e8 	.word	0x200000e8
 8009d60:	20000c30 	.word	0x20000c30
 8009d64:	0800eb08 	.word	0x0800eb08
 8009d68:	20000eec 	.word	0x20000eec
 8009d6c:	200005ac 	.word	0x200005ac
 8009d70:	20000b48 	.word	0x20000b48
				}
			ch='.';
 8009d74:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8009d78:	222e      	movs	r2, #46	; 0x2e
 8009d7a:	701a      	strb	r2, [r3, #0]

			i_slow++;
 8009d7c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8009d80:	3301      	adds	r3, #1
 8009d82:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	  }

	  i_fast++;
 8009d86:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	  HAL_Delay(1);
 8009d90:	2001      	movs	r0, #1
 8009d92:	f7f7 f955 	bl	8001040 <HAL_Delay>
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8009d96:	e412      	b.n	80095be <main+0x67e>

08009d98 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009d9c:	4808      	ldr	r0, [pc, #32]	; (8009dc0 <CAN1_RX0_IRQHandler+0x28>)
 8009d9e:	f7f8 fdd6 	bl	800294e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &rx_msg);
 8009da2:	4b08      	ldr	r3, [pc, #32]	; (8009dc4 <CAN1_RX0_IRQHandler+0x2c>)
 8009da4:	4a08      	ldr	r2, [pc, #32]	; (8009dc8 <CAN1_RX0_IRQHandler+0x30>)
 8009da6:	2100      	movs	r1, #0
 8009da8:	4805      	ldr	r0, [pc, #20]	; (8009dc0 <CAN1_RX0_IRQHandler+0x28>)
 8009daa:	f7f8 fc98 	bl	80026de <HAL_CAN_GetRxMessage>
//	//	tx_msg[4] = tx_msg[4] | (v1_1 << 2) ;
//	//	tx_msg[4] = tx_msg[4] | (v1_2 << 1) ;
//


  HAL_CAN_AddTxMessage(&hcan1, &pHeader, &tx_msg, &TxMailbox);
 8009dae:	4b07      	ldr	r3, [pc, #28]	; (8009dcc <CAN1_RX0_IRQHandler+0x34>)
 8009db0:	4a07      	ldr	r2, [pc, #28]	; (8009dd0 <CAN1_RX0_IRQHandler+0x38>)
 8009db2:	4908      	ldr	r1, [pc, #32]	; (8009dd4 <CAN1_RX0_IRQHandler+0x3c>)
 8009db4:	4802      	ldr	r0, [pc, #8]	; (8009dc0 <CAN1_RX0_IRQHandler+0x28>)
 8009db6:	f7f8 fbb7 	bl	8002528 <HAL_CAN_AddTxMessage>




  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8009dba:	bf00      	nop
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	20001048 	.word	0x20001048
 8009dc4:	20000c2c 	.word	0x20000c2c
 8009dc8:	20000fcc 	.word	0x20000fcc
 8009dcc:	20000ee8 	.word	0x20000ee8
 8009dd0:	20000008 	.word	0x20000008
 8009dd4:	200010b0 	.word	0x200010b0

08009dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b098      	sub	sp, #96	; 0x60
 8009ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009dde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009de2:	2230      	movs	r2, #48	; 0x30
 8009de4:	2100      	movs	r1, #0
 8009de6:	4618      	mov	r0, r3
 8009de8:	f003 f9ce 	bl	800d188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009dec:	f107 031c 	add.w	r3, r7, #28
 8009df0:	2200      	movs	r2, #0
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	605a      	str	r2, [r3, #4]
 8009df6:	609a      	str	r2, [r3, #8]
 8009df8:	60da      	str	r2, [r3, #12]
 8009dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009dfc:	f107 030c 	add.w	r3, r7, #12
 8009e00:	2200      	movs	r2, #0
 8009e02:	601a      	str	r2, [r3, #0]
 8009e04:	605a      	str	r2, [r3, #4]
 8009e06:	609a      	str	r2, [r3, #8]
 8009e08:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	60bb      	str	r3, [r7, #8]
 8009e0e:	4b32      	ldr	r3, [pc, #200]	; (8009ed8 <SystemClock_Config+0x100>)
 8009e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e12:	4a31      	ldr	r2, [pc, #196]	; (8009ed8 <SystemClock_Config+0x100>)
 8009e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e18:	6413      	str	r3, [r2, #64]	; 0x40
 8009e1a:	4b2f      	ldr	r3, [pc, #188]	; (8009ed8 <SystemClock_Config+0x100>)
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e22:	60bb      	str	r3, [r7, #8]
 8009e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009e26:	2300      	movs	r3, #0
 8009e28:	607b      	str	r3, [r7, #4]
 8009e2a:	4b2c      	ldr	r3, [pc, #176]	; (8009edc <SystemClock_Config+0x104>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a2b      	ldr	r2, [pc, #172]	; (8009edc <SystemClock_Config+0x104>)
 8009e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e34:	6013      	str	r3, [r2, #0]
 8009e36:	4b29      	ldr	r3, [pc, #164]	; (8009edc <SystemClock_Config+0x104>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e3e:	607b      	str	r3, [r7, #4]
 8009e40:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8009e42:	2309      	movs	r3, #9
 8009e44:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009e50:	2302      	movs	r3, #2
 8009e52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009e54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009e58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009e5a:	2304      	movs	r3, #4
 8009e5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009e5e:	23a8      	movs	r3, #168	; 0xa8
 8009e60:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009e62:	2302      	movs	r3, #2
 8009e64:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009e66:	2307      	movs	r3, #7
 8009e68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009e6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fa ff20 	bl	8004cb4 <HAL_RCC_OscConfig>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8009e7a:	f002 f9dd 	bl	800c238 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009e7e:	230f      	movs	r3, #15
 8009e80:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009e82:	2302      	movs	r3, #2
 8009e84:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009e86:	2300      	movs	r3, #0
 8009e88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009e8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e94:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009e96:	f107 031c 	add.w	r3, r7, #28
 8009e9a:	2105      	movs	r1, #5
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fb f979 	bl	8005194 <HAL_RCC_ClockConfig>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8009ea8:	f002 f9c6 	bl	800c238 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009eac:	2302      	movs	r3, #2
 8009eae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8009eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009eb4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009eb6:	f107 030c 	add.w	r3, r7, #12
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fb fb68 	bl	8005590 <HAL_RCCEx_PeriphCLKConfig>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8009ec6:	f002 f9b7 	bl	800c238 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8009eca:	f7fb fa49 	bl	8005360 <HAL_RCC_EnableCSS>
}
 8009ece:	bf00      	nop
 8009ed0:	3760      	adds	r7, #96	; 0x60
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	40023800 	.word	0x40023800
 8009edc:	40007000 	.word	0x40007000

08009ee0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08c      	sub	sp, #48	; 0x30
 8009ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009ee6:	f107 0320 	add.w	r3, r7, #32
 8009eea:	2200      	movs	r2, #0
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	605a      	str	r2, [r3, #4]
 8009ef0:	609a      	str	r2, [r3, #8]
 8009ef2:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8009ef4:	463b      	mov	r3, r7
 8009ef6:	2220      	movs	r2, #32
 8009ef8:	2100      	movs	r1, #0
 8009efa:	4618      	mov	r0, r3
 8009efc:	f003 f944 	bl	800d188 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8009f00:	4b63      	ldr	r3, [pc, #396]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009f02:	4a64      	ldr	r2, [pc, #400]	; (800a094 <MX_ADC1_Init+0x1b4>)
 8009f04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8009f06:	4b62      	ldr	r3, [pc, #392]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009f08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009f0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009f0e:	4b60      	ldr	r3, [pc, #384]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8009f14:	4b5e      	ldr	r3, [pc, #376]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009f16:	2201      	movs	r2, #1
 8009f18:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8009f1a:	4b5d      	ldr	r3, [pc, #372]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009f20:	4b5b      	ldr	r3, [pc, #364]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009f28:	4b59      	ldr	r3, [pc, #356]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009f2e:	4b58      	ldr	r3, [pc, #352]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009f30:	4a59      	ldr	r2, [pc, #356]	; (800a098 <MX_ADC1_Init+0x1b8>)
 8009f32:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009f34:	4b56      	ldr	r3, [pc, #344]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009f36:	2200      	movs	r2, #0
 8009f38:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8009f3a:	4b55      	ldr	r3, [pc, #340]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009f3c:	2205      	movs	r2, #5
 8009f3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8009f40:	4b53      	ldr	r3, [pc, #332]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009f48:	4b51      	ldr	r3, [pc, #324]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009f4e:	4850      	ldr	r0, [pc, #320]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009f50:	f7f7 f898 	bl	8001084 <HAL_ADC_Init>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8009f5a:	f002 f96d 	bl	800c238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8009f62:	2301      	movs	r3, #1
 8009f64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8009f66:	2301      	movs	r3, #1
 8009f68:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009f6a:	f107 0320 	add.w	r3, r7, #32
 8009f6e:	4619      	mov	r1, r3
 8009f70:	4847      	ldr	r0, [pc, #284]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009f72:	f7f7 fb11 	bl	8001598 <HAL_ADC_ConfigChannel>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8009f7c:	f002 f95c 	bl	800c238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8009f80:	230b      	movs	r3, #11
 8009f82:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8009f84:	2302      	movs	r3, #2
 8009f86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009f88:	f107 0320 	add.w	r3, r7, #32
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4840      	ldr	r0, [pc, #256]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009f90:	f7f7 fb02 	bl	8001598 <HAL_ADC_ConfigChannel>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8009f9a:	f002 f94d 	bl	800c238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009f9e:	230e      	movs	r3, #14
 8009fa0:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009fa6:	f107 0320 	add.w	r3, r7, #32
 8009faa:	4619      	mov	r1, r3
 8009fac:	4838      	ldr	r0, [pc, #224]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009fae:	f7f7 faf3 	bl	8001598 <HAL_ADC_ConfigChannel>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8009fb8:	f002 f93e 	bl	800c238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8009fbc:	2305      	movs	r3, #5
 8009fbe:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 8009fc0:	2304      	movs	r3, #4
 8009fc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009fc4:	f107 0320 	add.w	r3, r7, #32
 8009fc8:	4619      	mov	r1, r3
 8009fca:	4831      	ldr	r0, [pc, #196]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009fcc:	f7f7 fae4 	bl	8001598 <HAL_ADC_ConfigChannel>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d001      	beq.n	8009fda <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8009fd6:	f002 f92f 	bl	800c238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8009fda:	2310      	movs	r3, #16
 8009fdc:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 8009fde:	2305      	movs	r3, #5
 8009fe0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009fe2:	f107 0320 	add.w	r3, r7, #32
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	4829      	ldr	r0, [pc, #164]	; (800a090 <MX_ADC1_Init+0x1b0>)
 8009fea:	f7f7 fad5 	bl	8001598 <HAL_ADC_ConfigChannel>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8009ff4:	f002 f920 	bl	800c238 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800a000:	2304      	movs	r3, #4
 800a002:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a004:	2300      	movs	r3, #0
 800a006:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 800a008:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800a00c:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800a00e:	2300      	movs	r3, #0
 800a010:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800a012:	2300      	movs	r3, #0
 800a014:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800a016:	2300      	movs	r3, #0
 800a018:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800a01e:	463b      	mov	r3, r7
 800a020:	4619      	mov	r1, r3
 800a022:	481b      	ldr	r0, [pc, #108]	; (800a090 <MX_ADC1_Init+0x1b0>)
 800a024:	f7f7 fecc 	bl	8001dc0 <HAL_ADCEx_InjectedConfigChannel>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800a02e:	f002 f903 	bl	800c238 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 800a032:	230b      	movs	r3, #11
 800a034:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800a036:	2302      	movs	r3, #2
 800a038:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800a03a:	463b      	mov	r3, r7
 800a03c:	4619      	mov	r1, r3
 800a03e:	4814      	ldr	r0, [pc, #80]	; (800a090 <MX_ADC1_Init+0x1b0>)
 800a040:	f7f7 febe 	bl	8001dc0 <HAL_ADCEx_InjectedConfigChannel>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800a04a:	f002 f8f5 	bl	800c238 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 800a04e:	230e      	movs	r3, #14
 800a050:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800a052:	2303      	movs	r3, #3
 800a054:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800a056:	463b      	mov	r3, r7
 800a058:	4619      	mov	r1, r3
 800a05a:	480d      	ldr	r0, [pc, #52]	; (800a090 <MX_ADC1_Init+0x1b0>)
 800a05c:	f7f7 feb0 	bl	8001dc0 <HAL_ADCEx_InjectedConfigChannel>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 800a066:	f002 f8e7 	bl	800c238 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 800a06a:	2305      	movs	r3, #5
 800a06c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 800a06e:	2304      	movs	r3, #4
 800a070:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800a072:	463b      	mov	r3, r7
 800a074:	4619      	mov	r1, r3
 800a076:	4806      	ldr	r0, [pc, #24]	; (800a090 <MX_ADC1_Init+0x1b0>)
 800a078:	f7f7 fea2 	bl	8001dc0 <HAL_ADCEx_InjectedConfigChannel>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 800a082:	f002 f8d9 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a086:	bf00      	nop
 800a088:	3730      	adds	r7, #48	; 0x30
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	20000c6c 	.word	0x20000c6c
 800a094:	40012000 	.word	0x40012000
 800a098:	0f000001 	.word	0x0f000001

0800a09c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b08c      	sub	sp, #48	; 0x30
 800a0a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a0a2:	f107 0320 	add.w	r3, r7, #32
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	601a      	str	r2, [r3, #0]
 800a0aa:	605a      	str	r2, [r3, #4]
 800a0ac:	609a      	str	r2, [r3, #8]
 800a0ae:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800a0b0:	463b      	mov	r3, r7
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f003 f866 	bl	800d188 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800a0bc:	4b63      	ldr	r3, [pc, #396]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a0be:	4a64      	ldr	r2, [pc, #400]	; (800a250 <MX_ADC2_Init+0x1b4>)
 800a0c0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800a0c2:	4b62      	ldr	r3, [pc, #392]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a0c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a0c8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800a0ca:	4b60      	ldr	r3, [pc, #384]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800a0d0:	4b5e      	ldr	r3, [pc, #376]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800a0d6:	4b5d      	ldr	r3, [pc, #372]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a0d8:	2201      	movs	r2, #1
 800a0da:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800a0dc:	4b5b      	ldr	r3, [pc, #364]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a0e4:	4b59      	ldr	r3, [pc, #356]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a0ea:	4b58      	ldr	r3, [pc, #352]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a0ec:	4a59      	ldr	r2, [pc, #356]	; (800a254 <MX_ADC2_Init+0x1b8>)
 800a0ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a0f0:	4b56      	ldr	r3, [pc, #344]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 800a0f6:	4b55      	ldr	r3, [pc, #340]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a0f8:	2205      	movs	r2, #5
 800a0fa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800a0fc:	4b53      	ldr	r3, [pc, #332]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a104:	4b51      	ldr	r3, [pc, #324]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a106:	2201      	movs	r2, #1
 800a108:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800a10a:	4850      	ldr	r0, [pc, #320]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a10c:	f7f6 ffba 	bl	8001084 <HAL_ADC_Init>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d001      	beq.n	800a11a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800a116:	f002 f88f 	bl	800c238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800a11a:	2302      	movs	r3, #2
 800a11c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800a11e:	2301      	movs	r3, #1
 800a120:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800a122:	2301      	movs	r3, #1
 800a124:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a126:	f107 0320 	add.w	r3, r7, #32
 800a12a:	4619      	mov	r1, r3
 800a12c:	4847      	ldr	r0, [pc, #284]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a12e:	f7f7 fa33 	bl	8001598 <HAL_ADC_ConfigChannel>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <MX_ADC2_Init+0xa0>
  {
    Error_Handler();
 800a138:	f002 f87e 	bl	800c238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800a13c:	230c      	movs	r3, #12
 800a13e:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 800a140:	2302      	movs	r3, #2
 800a142:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a144:	f107 0320 	add.w	r3, r7, #32
 800a148:	4619      	mov	r1, r3
 800a14a:	4840      	ldr	r0, [pc, #256]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a14c:	f7f7 fa24 	bl	8001598 <HAL_ADC_ConfigChannel>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 800a156:	f002 f86f 	bl	800c238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800a15a:	230f      	movs	r3, #15
 800a15c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 800a15e:	2303      	movs	r3, #3
 800a160:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a162:	f107 0320 	add.w	r3, r7, #32
 800a166:	4619      	mov	r1, r3
 800a168:	4838      	ldr	r0, [pc, #224]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a16a:	f7f7 fa15 	bl	8001598 <HAL_ADC_ConfigChannel>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d001      	beq.n	800a178 <MX_ADC2_Init+0xdc>
  {
    Error_Handler();
 800a174:	f002 f860 	bl	800c238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800a178:	2304      	movs	r3, #4
 800a17a:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 800a17c:	2304      	movs	r3, #4
 800a17e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a180:	f107 0320 	add.w	r3, r7, #32
 800a184:	4619      	mov	r1, r3
 800a186:	4831      	ldr	r0, [pc, #196]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a188:	f7f7 fa06 	bl	8001598 <HAL_ADC_ConfigChannel>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d001      	beq.n	800a196 <MX_ADC2_Init+0xfa>
  {
    Error_Handler();
 800a192:	f002 f851 	bl	800c238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800a196:	2308      	movs	r3, #8
 800a198:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 800a19a:	2305      	movs	r3, #5
 800a19c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a19e:	f107 0320 	add.w	r3, r7, #32
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	4829      	ldr	r0, [pc, #164]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a1a6:	f7f7 f9f7 	bl	8001598 <HAL_ADC_ConfigChannel>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d001      	beq.n	800a1b4 <MX_ADC2_Init+0x118>
  {
    Error_Handler();
 800a1b0:	f002 f842 	bl	800c238 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800a1bc:	2304      	movs	r3, #4
 800a1be:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 800a1c4:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800a1c8:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800a1da:	463b      	mov	r3, r7
 800a1dc:	4619      	mov	r1, r3
 800a1de:	481b      	ldr	r0, [pc, #108]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a1e0:	f7f7 fdee 	bl	8001dc0 <HAL_ADCEx_InjectedConfigChannel>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d001      	beq.n	800a1ee <MX_ADC2_Init+0x152>
  {
    Error_Handler();
 800a1ea:	f002 f825 	bl	800c238 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 800a1ee:	230c      	movs	r3, #12
 800a1f0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800a1f6:	463b      	mov	r3, r7
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4814      	ldr	r0, [pc, #80]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a1fc:	f7f7 fde0 	bl	8001dc0 <HAL_ADCEx_InjectedConfigChannel>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <MX_ADC2_Init+0x16e>
  {
    Error_Handler();
 800a206:	f002 f817 	bl	800c238 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 800a20a:	230f      	movs	r3, #15
 800a20c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800a20e:	2303      	movs	r3, #3
 800a210:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800a212:	463b      	mov	r3, r7
 800a214:	4619      	mov	r1, r3
 800a216:	480d      	ldr	r0, [pc, #52]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a218:	f7f7 fdd2 	bl	8001dc0 <HAL_ADCEx_InjectedConfigChannel>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <MX_ADC2_Init+0x18a>
  {
    Error_Handler();
 800a222:	f002 f809 	bl	800c238 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800a226:	2304      	movs	r3, #4
 800a228:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 800a22a:	2304      	movs	r3, #4
 800a22c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800a22e:	463b      	mov	r3, r7
 800a230:	4619      	mov	r1, r3
 800a232:	4806      	ldr	r0, [pc, #24]	; (800a24c <MX_ADC2_Init+0x1b0>)
 800a234:	f7f7 fdc4 	bl	8001dc0 <HAL_ADCEx_InjectedConfigChannel>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <MX_ADC2_Init+0x1a6>
  {
    Error_Handler();
 800a23e:	f001 fffb 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800a242:	bf00      	nop
 800a244:	3730      	adds	r7, #48	; 0x30
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	200005ec 	.word	0x200005ec
 800a250:	40012100 	.word	0x40012100
 800a254:	0f000001 	.word	0x0f000001

0800a258 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b08c      	sub	sp, #48	; 0x30
 800a25c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a25e:	f107 0320 	add.w	r3, r7, #32
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]
 800a266:	605a      	str	r2, [r3, #4]
 800a268:	609a      	str	r2, [r3, #8]
 800a26a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800a26c:	463b      	mov	r3, r7
 800a26e:	2220      	movs	r2, #32
 800a270:	2100      	movs	r1, #0
 800a272:	4618      	mov	r0, r3
 800a274:	f002 ff88 	bl	800d188 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800a278:	4b63      	ldr	r3, [pc, #396]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a27a:	4a64      	ldr	r2, [pc, #400]	; (800a40c <MX_ADC3_Init+0x1b4>)
 800a27c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800a27e:	4b62      	ldr	r3, [pc, #392]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a280:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a284:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800a286:	4b60      	ldr	r3, [pc, #384]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a288:	2200      	movs	r2, #0
 800a28a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800a28c:	4b5e      	ldr	r3, [pc, #376]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a28e:	2201      	movs	r2, #1
 800a290:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800a292:	4b5d      	ldr	r3, [pc, #372]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a294:	2201      	movs	r2, #1
 800a296:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800a298:	4b5b      	ldr	r3, [pc, #364]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a2a0:	4b59      	ldr	r3, [pc, #356]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a2a6:	4b58      	ldr	r3, [pc, #352]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a2a8:	4a59      	ldr	r2, [pc, #356]	; (800a410 <MX_ADC3_Init+0x1b8>)
 800a2aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a2ac:	4b56      	ldr	r3, [pc, #344]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 5;
 800a2b2:	4b55      	ldr	r3, [pc, #340]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a2b4:	2205      	movs	r2, #5
 800a2b6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800a2b8:	4b53      	ldr	r3, [pc, #332]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a2c0:	4b51      	ldr	r3, [pc, #324]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800a2c6:	4850      	ldr	r0, [pc, #320]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a2c8:	f7f6 fedc 	bl	8001084 <HAL_ADC_Init>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 800a2d2:	f001 ffb1 	bl	800c238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800a2d6:	2303      	movs	r3, #3
 800a2d8:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a2e2:	f107 0320 	add.w	r3, r7, #32
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	4847      	ldr	r0, [pc, #284]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a2ea:	f7f7 f955 	bl	8001598 <HAL_ADC_ConfigChannel>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d001      	beq.n	800a2f8 <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 800a2f4:	f001 ffa0 	bl	800c238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800a2f8:	230d      	movs	r3, #13
 800a2fa:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a300:	f107 0320 	add.w	r3, r7, #32
 800a304:	4619      	mov	r1, r3
 800a306:	4840      	ldr	r0, [pc, #256]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a308:	f7f7 f946 	bl	8001598 <HAL_ADC_ConfigChannel>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <MX_ADC3_Init+0xbe>
  {
    Error_Handler();
 800a312:	f001 ff91 	bl	800c238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800a316:	2303      	movs	r3, #3
 800a318:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 800a31a:	2303      	movs	r3, #3
 800a31c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a31e:	f107 0320 	add.w	r3, r7, #32
 800a322:	4619      	mov	r1, r3
 800a324:	4838      	ldr	r0, [pc, #224]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a326:	f7f7 f937 	bl	8001598 <HAL_ADC_ConfigChannel>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 800a330:	f001 ff82 	bl	800c238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800a334:	230d      	movs	r3, #13
 800a336:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 800a338:	2304      	movs	r3, #4
 800a33a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a33c:	f107 0320 	add.w	r3, r7, #32
 800a340:	4619      	mov	r1, r3
 800a342:	4831      	ldr	r0, [pc, #196]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a344:	f7f7 f928 	bl	8001598 <HAL_ADC_ConfigChannel>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d001      	beq.n	800a352 <MX_ADC3_Init+0xfa>
  {
    Error_Handler();
 800a34e:	f001 ff73 	bl	800c238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800a352:	2303      	movs	r3, #3
 800a354:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 800a356:	2305      	movs	r3, #5
 800a358:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a35a:	f107 0320 	add.w	r3, r7, #32
 800a35e:	4619      	mov	r1, r3
 800a360:	4829      	ldr	r0, [pc, #164]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a362:	f7f7 f919 	bl	8001598 <HAL_ADC_ConfigChannel>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d001      	beq.n	800a370 <MX_ADC3_Init+0x118>
  {
    Error_Handler();
 800a36c:	f001 ff64 	bl	800c238 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800a370:	2303      	movs	r3, #3
 800a372:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800a374:	2301      	movs	r3, #1
 800a376:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800a378:	2304      	movs	r3, #4
 800a37a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a37c:	2300      	movs	r3, #0
 800a37e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 800a380:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800a384:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800a386:	2300      	movs	r3, #0
 800a388:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800a38a:	2300      	movs	r3, #0
 800a38c:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800a38e:	2300      	movs	r3, #0
 800a390:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800a392:	2300      	movs	r3, #0
 800a394:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a396:	463b      	mov	r3, r7
 800a398:	4619      	mov	r1, r3
 800a39a:	481b      	ldr	r0, [pc, #108]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a39c:	f7f7 fd10 	bl	8001dc0 <HAL_ADCEx_InjectedConfigChannel>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <MX_ADC3_Init+0x152>
  {
    Error_Handler();
 800a3a6:	f001 ff47 	bl	800c238 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 800a3aa:	230d      	movs	r3, #13
 800a3ac:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a3b2:	463b      	mov	r3, r7
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	4814      	ldr	r0, [pc, #80]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a3b8:	f7f7 fd02 	bl	8001dc0 <HAL_ADCEx_InjectedConfigChannel>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <MX_ADC3_Init+0x16e>
  {
    Error_Handler();
 800a3c2:	f001 ff39 	bl	800c238 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a3ce:	463b      	mov	r3, r7
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	480d      	ldr	r0, [pc, #52]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a3d4:	f7f7 fcf4 	bl	8001dc0 <HAL_ADCEx_InjectedConfigChannel>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <MX_ADC3_Init+0x18a>
  {
    Error_Handler();
 800a3de:	f001 ff2b 	bl	800c238 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 800a3e2:	230d      	movs	r3, #13
 800a3e4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 800a3e6:	2304      	movs	r3, #4
 800a3e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a3ea:	463b      	mov	r3, r7
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	4806      	ldr	r0, [pc, #24]	; (800a408 <MX_ADC3_Init+0x1b0>)
 800a3f0:	f7f7 fce6 	bl	8001dc0 <HAL_ADCEx_InjectedConfigChannel>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <MX_ADC3_Init+0x1a6>
  {
    Error_Handler();
 800a3fa:	f001 ff1d 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800a3fe:	bf00      	nop
 800a400:	3730      	adds	r7, #48	; 0x30
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	20000cb4 	.word	0x20000cb4
 800a40c:	40012200 	.word	0x40012200
 800a410:	0f000001 	.word	0x0f000001

0800a414 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800a418:	4b17      	ldr	r3, [pc, #92]	; (800a478 <MX_CAN1_Init+0x64>)
 800a41a:	4a18      	ldr	r2, [pc, #96]	; (800a47c <MX_CAN1_Init+0x68>)
 800a41c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800a41e:	4b16      	ldr	r3, [pc, #88]	; (800a478 <MX_CAN1_Init+0x64>)
 800a420:	2203      	movs	r2, #3
 800a422:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800a424:	4b14      	ldr	r3, [pc, #80]	; (800a478 <MX_CAN1_Init+0x64>)
 800a426:	2200      	movs	r2, #0
 800a428:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800a42a:	4b13      	ldr	r3, [pc, #76]	; (800a478 <MX_CAN1_Init+0x64>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800a430:	4b11      	ldr	r3, [pc, #68]	; (800a478 <MX_CAN1_Init+0x64>)
 800a432:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800a436:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800a438:	4b0f      	ldr	r3, [pc, #60]	; (800a478 <MX_CAN1_Init+0x64>)
 800a43a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a43e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800a440:	4b0d      	ldr	r3, [pc, #52]	; (800a478 <MX_CAN1_Init+0x64>)
 800a442:	2200      	movs	r2, #0
 800a444:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800a446:	4b0c      	ldr	r3, [pc, #48]	; (800a478 <MX_CAN1_Init+0x64>)
 800a448:	2200      	movs	r2, #0
 800a44a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800a44c:	4b0a      	ldr	r3, [pc, #40]	; (800a478 <MX_CAN1_Init+0x64>)
 800a44e:	2200      	movs	r2, #0
 800a450:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800a452:	4b09      	ldr	r3, [pc, #36]	; (800a478 <MX_CAN1_Init+0x64>)
 800a454:	2200      	movs	r2, #0
 800a456:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800a458:	4b07      	ldr	r3, [pc, #28]	; (800a478 <MX_CAN1_Init+0x64>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800a45e:	4b06      	ldr	r3, [pc, #24]	; (800a478 <MX_CAN1_Init+0x64>)
 800a460:	2200      	movs	r2, #0
 800a462:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800a464:	4804      	ldr	r0, [pc, #16]	; (800a478 <MX_CAN1_Init+0x64>)
 800a466:	f7f7 fe3f 	bl	80020e8 <HAL_CAN_Init>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d001      	beq.n	800a474 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800a470:	f001 fee2 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800a474:	bf00      	nop
 800a476:	bd80      	pop	{r7, pc}
 800a478:	20001048 	.word	0x20001048
 800a47c:	40006400 	.word	0x40006400

0800a480 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a484:	4b12      	ldr	r3, [pc, #72]	; (800a4d0 <MX_I2C1_Init+0x50>)
 800a486:	4a13      	ldr	r2, [pc, #76]	; (800a4d4 <MX_I2C1_Init+0x54>)
 800a488:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800a48a:	4b11      	ldr	r3, [pc, #68]	; (800a4d0 <MX_I2C1_Init+0x50>)
 800a48c:	4a12      	ldr	r2, [pc, #72]	; (800a4d8 <MX_I2C1_Init+0x58>)
 800a48e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a490:	4b0f      	ldr	r3, [pc, #60]	; (800a4d0 <MX_I2C1_Init+0x50>)
 800a492:	2200      	movs	r2, #0
 800a494:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a496:	4b0e      	ldr	r3, [pc, #56]	; (800a4d0 <MX_I2C1_Init+0x50>)
 800a498:	2200      	movs	r2, #0
 800a49a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a49c:	4b0c      	ldr	r3, [pc, #48]	; (800a4d0 <MX_I2C1_Init+0x50>)
 800a49e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a4a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a4a4:	4b0a      	ldr	r3, [pc, #40]	; (800a4d0 <MX_I2C1_Init+0x50>)
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a4aa:	4b09      	ldr	r3, [pc, #36]	; (800a4d0 <MX_I2C1_Init+0x50>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a4b0:	4b07      	ldr	r3, [pc, #28]	; (800a4d0 <MX_I2C1_Init+0x50>)
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a4b6:	4b06      	ldr	r3, [pc, #24]	; (800a4d0 <MX_I2C1_Init+0x50>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a4bc:	4804      	ldr	r0, [pc, #16]	; (800a4d0 <MX_I2C1_Init+0x50>)
 800a4be:	f7f9 fb55 	bl	8003b6c <HAL_I2C_Init>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d001      	beq.n	800a4cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a4c8:	f001 feb6 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a4cc:	bf00      	nop
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	20000634 	.word	0x20000634
 800a4d4:	40005400 	.word	0x40005400
 800a4d8:	000186a0 	.word	0x000186a0

0800a4dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a4e0:	4b12      	ldr	r3, [pc, #72]	; (800a52c <MX_I2C2_Init+0x50>)
 800a4e2:	4a13      	ldr	r2, [pc, #76]	; (800a530 <MX_I2C2_Init+0x54>)
 800a4e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800a4e6:	4b11      	ldr	r3, [pc, #68]	; (800a52c <MX_I2C2_Init+0x50>)
 800a4e8:	4a12      	ldr	r2, [pc, #72]	; (800a534 <MX_I2C2_Init+0x58>)
 800a4ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a4ec:	4b0f      	ldr	r3, [pc, #60]	; (800a52c <MX_I2C2_Init+0x50>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800a4f2:	4b0e      	ldr	r3, [pc, #56]	; (800a52c <MX_I2C2_Init+0x50>)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a4f8:	4b0c      	ldr	r3, [pc, #48]	; (800a52c <MX_I2C2_Init+0x50>)
 800a4fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a4fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a500:	4b0a      	ldr	r3, [pc, #40]	; (800a52c <MX_I2C2_Init+0x50>)
 800a502:	2200      	movs	r2, #0
 800a504:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800a506:	4b09      	ldr	r3, [pc, #36]	; (800a52c <MX_I2C2_Init+0x50>)
 800a508:	2200      	movs	r2, #0
 800a50a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a50c:	4b07      	ldr	r3, [pc, #28]	; (800a52c <MX_I2C2_Init+0x50>)
 800a50e:	2200      	movs	r2, #0
 800a510:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a512:	4b06      	ldr	r3, [pc, #24]	; (800a52c <MX_I2C2_Init+0x50>)
 800a514:	2200      	movs	r2, #0
 800a516:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a518:	4804      	ldr	r0, [pc, #16]	; (800a52c <MX_I2C2_Init+0x50>)
 800a51a:	f7f9 fb27 	bl	8003b6c <HAL_I2C_Init>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d001      	beq.n	800a528 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800a524:	f001 fe88 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a528:	bf00      	nop
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	20000a90 	.word	0x20000a90
 800a530:	40005800 	.word	0x40005800
 800a534:	000186a0 	.word	0x000186a0

0800a538 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800a53c:	4b0f      	ldr	r3, [pc, #60]	; (800a57c <MX_RTC_Init+0x44>)
 800a53e:	4a10      	ldr	r2, [pc, #64]	; (800a580 <MX_RTC_Init+0x48>)
 800a540:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a542:	4b0e      	ldr	r3, [pc, #56]	; (800a57c <MX_RTC_Init+0x44>)
 800a544:	2200      	movs	r2, #0
 800a546:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a548:	4b0c      	ldr	r3, [pc, #48]	; (800a57c <MX_RTC_Init+0x44>)
 800a54a:	227f      	movs	r2, #127	; 0x7f
 800a54c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a54e:	4b0b      	ldr	r3, [pc, #44]	; (800a57c <MX_RTC_Init+0x44>)
 800a550:	22ff      	movs	r2, #255	; 0xff
 800a552:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a554:	4b09      	ldr	r3, [pc, #36]	; (800a57c <MX_RTC_Init+0x44>)
 800a556:	2200      	movs	r2, #0
 800a558:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a55a:	4b08      	ldr	r3, [pc, #32]	; (800a57c <MX_RTC_Init+0x44>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a560:	4b06      	ldr	r3, [pc, #24]	; (800a57c <MX_RTC_Init+0x44>)
 800a562:	2200      	movs	r2, #0
 800a564:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a566:	4805      	ldr	r0, [pc, #20]	; (800a57c <MX_RTC_Init+0x44>)
 800a568:	f7fb f8f4 	bl	8005754 <HAL_RTC_Init>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800a572:	f001 fe61 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a576:	bf00      	nop
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	20000da0 	.word	0x20000da0
 800a580:	40002800 	.word	0x40002800

0800a584 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800a588:	4b18      	ldr	r3, [pc, #96]	; (800a5ec <MX_SPI2_Init+0x68>)
 800a58a:	4a19      	ldr	r2, [pc, #100]	; (800a5f0 <MX_SPI2_Init+0x6c>)
 800a58c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800a58e:	4b17      	ldr	r3, [pc, #92]	; (800a5ec <MX_SPI2_Init+0x68>)
 800a590:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a594:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800a596:	4b15      	ldr	r3, [pc, #84]	; (800a5ec <MX_SPI2_Init+0x68>)
 800a598:	2200      	movs	r2, #0
 800a59a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800a59c:	4b13      	ldr	r3, [pc, #76]	; (800a5ec <MX_SPI2_Init+0x68>)
 800a59e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5a2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a5a4:	4b11      	ldr	r3, [pc, #68]	; (800a5ec <MX_SPI2_Init+0x68>)
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800a5aa:	4b10      	ldr	r3, [pc, #64]	; (800a5ec <MX_SPI2_Init+0x68>)
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800a5b0:	4b0e      	ldr	r3, [pc, #56]	; (800a5ec <MX_SPI2_Init+0x68>)
 800a5b2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a5b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800a5b8:	4b0c      	ldr	r3, [pc, #48]	; (800a5ec <MX_SPI2_Init+0x68>)
 800a5ba:	2220      	movs	r2, #32
 800a5bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a5be:	4b0b      	ldr	r3, [pc, #44]	; (800a5ec <MX_SPI2_Init+0x68>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800a5c4:	4b09      	ldr	r3, [pc, #36]	; (800a5ec <MX_SPI2_Init+0x68>)
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5ca:	4b08      	ldr	r3, [pc, #32]	; (800a5ec <MX_SPI2_Init+0x68>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800a5d0:	4b06      	ldr	r3, [pc, #24]	; (800a5ec <MX_SPI2_Init+0x68>)
 800a5d2:	220a      	movs	r2, #10
 800a5d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a5d6:	4805      	ldr	r0, [pc, #20]	; (800a5ec <MX_SPI2_Init+0x68>)
 800a5d8:	f7fb f9a1 	bl	800591e <HAL_SPI_Init>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800a5e2:	f001 fe29 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800a5e6:	bf00      	nop
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	200001cc 	.word	0x200001cc
 800a5f0:	40003800 	.word	0x40003800

0800a5f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b096      	sub	sp, #88	; 0x58
 800a5f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a5fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a5fe:	2200      	movs	r2, #0
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	605a      	str	r2, [r3, #4]
 800a604:	609a      	str	r2, [r3, #8]
 800a606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a608:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a60c:	2200      	movs	r2, #0
 800a60e:	601a      	str	r2, [r3, #0]
 800a610:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a616:	2200      	movs	r2, #0
 800a618:	601a      	str	r2, [r3, #0]
 800a61a:	605a      	str	r2, [r3, #4]
 800a61c:	609a      	str	r2, [r3, #8]
 800a61e:	60da      	str	r2, [r3, #12]
 800a620:	611a      	str	r2, [r3, #16]
 800a622:	615a      	str	r2, [r3, #20]
 800a624:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a626:	1d3b      	adds	r3, r7, #4
 800a628:	2220      	movs	r2, #32
 800a62a:	2100      	movs	r1, #0
 800a62c:	4618      	mov	r0, r3
 800a62e:	f002 fdab 	bl	800d188 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a632:	4b57      	ldr	r3, [pc, #348]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a634:	4a57      	ldr	r2, [pc, #348]	; (800a794 <MX_TIM1_Init+0x1a0>)
 800a636:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a638:	4b55      	ldr	r3, [pc, #340]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a63e:	4b54      	ldr	r3, [pc, #336]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a640:	2200      	movs	r2, #0
 800a642:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 800a644:	4b52      	ldr	r3, [pc, #328]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a646:	f640 72ff 	movw	r2, #4095	; 0xfff
 800a64a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a64c:	4b50      	ldr	r3, [pc, #320]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a64e:	2200      	movs	r2, #0
 800a650:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a652:	4b4f      	ldr	r3, [pc, #316]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a654:	2200      	movs	r2, #0
 800a656:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a658:	4b4d      	ldr	r3, [pc, #308]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a65e:	484c      	ldr	r0, [pc, #304]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a660:	f7fb ffd0 	bl	8006604 <HAL_TIM_Base_Init>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d001      	beq.n	800a66e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800a66a:	f001 fde5 	bl	800c238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a66e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a672:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a674:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a678:	4619      	mov	r1, r3
 800a67a:	4845      	ldr	r0, [pc, #276]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a67c:	f7fc fd04 	bl	8007088 <HAL_TIM_ConfigClockSource>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800a686:	f001 fdd7 	bl	800c238 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a68a:	4841      	ldr	r0, [pc, #260]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a68c:	f7fc f8a0 	bl	80067d0 <HAL_TIM_PWM_Init>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800a696:	f001 fdcf 	bl	800c238 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800a69a:	483d      	ldr	r0, [pc, #244]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a69c:	f7fc f825 	bl	80066ea <HAL_TIM_OC_Init>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800a6a6:	f001 fdc7 	bl	800c238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a6b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	4835      	ldr	r0, [pc, #212]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a6ba:	f7fd fa1f 	bl	8007afc <HAL_TIMEx_MasterConfigSynchronization>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d001      	beq.n	800a6c8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800a6c4:	f001 fdb8 	bl	800c238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a6c8:	2360      	movs	r3, #96	; 0x60
 800a6ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a6e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	4828      	ldr	r0, [pc, #160]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a6ee:	f7fc fc05 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d001      	beq.n	800a6fc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800a6f8:	f001 fd9e 	bl	800c238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a6fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a700:	2204      	movs	r2, #4
 800a702:	4619      	mov	r1, r3
 800a704:	4822      	ldr	r0, [pc, #136]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a706:	f7fc fbf9 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d001      	beq.n	800a714 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 800a710:	f001 fd92 	bl	800c238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a718:	2208      	movs	r2, #8
 800a71a:	4619      	mov	r1, r3
 800a71c:	481c      	ldr	r0, [pc, #112]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a71e:	f7fc fbed 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d001      	beq.n	800a72c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800a728:	f001 fd86 	bl	800c238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800a72c:	2330      	movs	r3, #48	; 0x30
 800a72e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1900;
 800a730:	f240 736c 	movw	r3, #1900	; 0x76c
 800a734:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a73a:	220c      	movs	r2, #12
 800a73c:	4619      	mov	r1, r3
 800a73e:	4814      	ldr	r0, [pc, #80]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a740:	f7fc fae0 	bl	8006d04 <HAL_TIM_OC_ConfigChannel>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800a74a:	f001 fd75 	bl	800c238 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a74e:	2300      	movs	r3, #0
 800a750:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a752:	2300      	movs	r3, #0
 800a754:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a756:	2300      	movs	r3, #0
 800a758:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a75e:	2300      	movs	r3, #0
 800a760:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a766:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a768:	2300      	movs	r3, #0
 800a76a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a76c:	1d3b      	adds	r3, r7, #4
 800a76e:	4619      	mov	r1, r3
 800a770:	4807      	ldr	r0, [pc, #28]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a772:	f7fd fa3f 	bl	8007bf4 <HAL_TIMEx_ConfigBreakDeadTime>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d001      	beq.n	800a780 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 800a77c:	f001 fd5c 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800a780:	4803      	ldr	r0, [pc, #12]	; (800a790 <MX_TIM1_Init+0x19c>)
 800a782:	f002 fa3d 	bl	800cc00 <HAL_TIM_MspPostInit>

}
 800a786:	bf00      	nop
 800a788:	3758      	adds	r7, #88	; 0x58
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	20000e00 	.word	0x20000e00
 800a794:	40010000 	.word	0x40010000

0800a798 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08e      	sub	sp, #56	; 0x38
 800a79c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a79e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	601a      	str	r2, [r3, #0]
 800a7a6:	605a      	str	r2, [r3, #4]
 800a7a8:	609a      	str	r2, [r3, #8]
 800a7aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a7ac:	f107 0320 	add.w	r3, r7, #32
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	601a      	str	r2, [r3, #0]
 800a7b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a7b6:	1d3b      	adds	r3, r7, #4
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	601a      	str	r2, [r3, #0]
 800a7bc:	605a      	str	r2, [r3, #4]
 800a7be:	609a      	str	r2, [r3, #8]
 800a7c0:	60da      	str	r2, [r3, #12]
 800a7c2:	611a      	str	r2, [r3, #16]
 800a7c4:	615a      	str	r2, [r3, #20]
 800a7c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a7c8:	4b2b      	ldr	r3, [pc, #172]	; (800a878 <MX_TIM2_Init+0xe0>)
 800a7ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a7ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 800a7d0:	4b29      	ldr	r3, [pc, #164]	; (800a878 <MX_TIM2_Init+0xe0>)
 800a7d2:	2207      	movs	r2, #7
 800a7d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a7d6:	4b28      	ldr	r3, [pc, #160]	; (800a878 <MX_TIM2_Init+0xe0>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800a7dc:	4b26      	ldr	r3, [pc, #152]	; (800a878 <MX_TIM2_Init+0xe0>)
 800a7de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a7e4:	4b24      	ldr	r3, [pc, #144]	; (800a878 <MX_TIM2_Init+0xe0>)
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a7ea:	4b23      	ldr	r3, [pc, #140]	; (800a878 <MX_TIM2_Init+0xe0>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a7f0:	4821      	ldr	r0, [pc, #132]	; (800a878 <MX_TIM2_Init+0xe0>)
 800a7f2:	f7fb ff07 	bl	8006604 <HAL_TIM_Base_Init>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800a7fc:	f001 fd1c 	bl	800c238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a804:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a80a:	4619      	mov	r1, r3
 800a80c:	481a      	ldr	r0, [pc, #104]	; (800a878 <MX_TIM2_Init+0xe0>)
 800a80e:	f7fc fc3b 	bl	8007088 <HAL_TIM_ConfigClockSource>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800a818:	f001 fd0e 	bl	800c238 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800a81c:	4816      	ldr	r0, [pc, #88]	; (800a878 <MX_TIM2_Init+0xe0>)
 800a81e:	f7fb ff64 	bl	80066ea <HAL_TIM_OC_Init>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d001      	beq.n	800a82c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800a828:	f001 fd06 	bl	800c238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a82c:	2300      	movs	r3, #0
 800a82e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a830:	2300      	movs	r3, #0
 800a832:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a834:	f107 0320 	add.w	r3, r7, #32
 800a838:	4619      	mov	r1, r3
 800a83a:	480f      	ldr	r0, [pc, #60]	; (800a878 <MX_TIM2_Init+0xe0>)
 800a83c:	f7fd f95e 	bl	8007afc <HAL_TIMEx_MasterConfigSynchronization>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800a846:	f001 fcf7 	bl	800c238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800a84a:	2300      	movs	r3, #0
 800a84c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a852:	2300      	movs	r3, #0
 800a854:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a856:	2300      	movs	r3, #0
 800a858:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a85a:	1d3b      	adds	r3, r7, #4
 800a85c:	2200      	movs	r2, #0
 800a85e:	4619      	mov	r1, r3
 800a860:	4805      	ldr	r0, [pc, #20]	; (800a878 <MX_TIM2_Init+0xe0>)
 800a862:	f7fc fa4f 	bl	8006d04 <HAL_TIM_OC_ConfigChannel>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d001      	beq.n	800a870 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800a86c:	f001 fce4 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a870:	bf00      	nop
 800a872:	3738      	adds	r7, #56	; 0x38
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	20000f8c 	.word	0x20000f8c

0800a87c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b08e      	sub	sp, #56	; 0x38
 800a880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a886:	2200      	movs	r2, #0
 800a888:	601a      	str	r2, [r3, #0]
 800a88a:	605a      	str	r2, [r3, #4]
 800a88c:	609a      	str	r2, [r3, #8]
 800a88e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a890:	f107 0320 	add.w	r3, r7, #32
 800a894:	2200      	movs	r2, #0
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a89a:	1d3b      	adds	r3, r7, #4
 800a89c:	2200      	movs	r2, #0
 800a89e:	601a      	str	r2, [r3, #0]
 800a8a0:	605a      	str	r2, [r3, #4]
 800a8a2:	609a      	str	r2, [r3, #8]
 800a8a4:	60da      	str	r2, [r3, #12]
 800a8a6:	611a      	str	r2, [r3, #16]
 800a8a8:	615a      	str	r2, [r3, #20]
 800a8aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a8ac:	4b2b      	ldr	r3, [pc, #172]	; (800a95c <MX_TIM3_Init+0xe0>)
 800a8ae:	4a2c      	ldr	r2, [pc, #176]	; (800a960 <MX_TIM3_Init+0xe4>)
 800a8b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800a8b2:	4b2a      	ldr	r3, [pc, #168]	; (800a95c <MX_TIM3_Init+0xe0>)
 800a8b4:	2253      	movs	r2, #83	; 0x53
 800a8b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a8b8:	4b28      	ldr	r3, [pc, #160]	; (800a95c <MX_TIM3_Init+0xe0>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800a8be:	4b27      	ldr	r3, [pc, #156]	; (800a95c <MX_TIM3_Init+0xe0>)
 800a8c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a8c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a8c6:	4b25      	ldr	r3, [pc, #148]	; (800a95c <MX_TIM3_Init+0xe0>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a8cc:	4b23      	ldr	r3, [pc, #140]	; (800a95c <MX_TIM3_Init+0xe0>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a8d2:	4822      	ldr	r0, [pc, #136]	; (800a95c <MX_TIM3_Init+0xe0>)
 800a8d4:	f7fb fe96 	bl	8006604 <HAL_TIM_Base_Init>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800a8de:	f001 fcab 	bl	800c238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a8e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a8e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	481b      	ldr	r0, [pc, #108]	; (800a95c <MX_TIM3_Init+0xe0>)
 800a8f0:	f7fc fbca 	bl	8007088 <HAL_TIM_ConfigClockSource>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800a8fa:	f001 fc9d 	bl	800c238 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800a8fe:	4817      	ldr	r0, [pc, #92]	; (800a95c <MX_TIM3_Init+0xe0>)
 800a900:	f7fb fef3 	bl	80066ea <HAL_TIM_OC_Init>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d001      	beq.n	800a90e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800a90a:	f001 fc95 	bl	800c238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a90e:	2300      	movs	r3, #0
 800a910:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a912:	2300      	movs	r3, #0
 800a914:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a916:	f107 0320 	add.w	r3, r7, #32
 800a91a:	4619      	mov	r1, r3
 800a91c:	480f      	ldr	r0, [pc, #60]	; (800a95c <MX_TIM3_Init+0xe0>)
 800a91e:	f7fd f8ed 	bl	8007afc <HAL_TIMEx_MasterConfigSynchronization>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800a928:	f001 fc86 	bl	800c238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800a92c:	2330      	movs	r3, #48	; 0x30
 800a92e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a930:	2300      	movs	r3, #0
 800a932:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a934:	2300      	movs	r3, #0
 800a936:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a938:	2300      	movs	r3, #0
 800a93a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a93c:	1d3b      	adds	r3, r7, #4
 800a93e:	2200      	movs	r2, #0
 800a940:	4619      	mov	r1, r3
 800a942:	4806      	ldr	r0, [pc, #24]	; (800a95c <MX_TIM3_Init+0xe0>)
 800a944:	f7fc f9de 	bl	8006d04 <HAL_TIM_OC_ConfigChannel>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d001      	beq.n	800a952 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800a94e:	f001 fc73 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a952:	bf00      	nop
 800a954:	3738      	adds	r7, #56	; 0x38
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	20000bec 	.word	0x20000bec
 800a960:	40000400 	.word	0x40000400

0800a964 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a96a:	f107 0308 	add.w	r3, r7, #8
 800a96e:	2200      	movs	r2, #0
 800a970:	601a      	str	r2, [r3, #0]
 800a972:	605a      	str	r2, [r3, #4]
 800a974:	609a      	str	r2, [r3, #8]
 800a976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a978:	463b      	mov	r3, r7
 800a97a:	2200      	movs	r2, #0
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a980:	4b1d      	ldr	r3, [pc, #116]	; (800a9f8 <MX_TIM5_Init+0x94>)
 800a982:	4a1e      	ldr	r2, [pc, #120]	; (800a9fc <MX_TIM5_Init+0x98>)
 800a984:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 839;
 800a986:	4b1c      	ldr	r3, [pc, #112]	; (800a9f8 <MX_TIM5_Init+0x94>)
 800a988:	f240 3247 	movw	r2, #839	; 0x347
 800a98c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a98e:	4b1a      	ldr	r3, [pc, #104]	; (800a9f8 <MX_TIM5_Init+0x94>)
 800a990:	2200      	movs	r2, #0
 800a992:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800a994:	4b18      	ldr	r3, [pc, #96]	; (800a9f8 <MX_TIM5_Init+0x94>)
 800a996:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a99a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a99c:	4b16      	ldr	r3, [pc, #88]	; (800a9f8 <MX_TIM5_Init+0x94>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a9a2:	4b15      	ldr	r3, [pc, #84]	; (800a9f8 <MX_TIM5_Init+0x94>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800a9a8:	4813      	ldr	r0, [pc, #76]	; (800a9f8 <MX_TIM5_Init+0x94>)
 800a9aa:	f7fb fe2b 	bl	8006604 <HAL_TIM_Base_Init>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800a9b4:	f001 fc40 	bl	800c238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a9b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800a9be:	f107 0308 	add.w	r3, r7, #8
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	480c      	ldr	r0, [pc, #48]	; (800a9f8 <MX_TIM5_Init+0x94>)
 800a9c6:	f7fc fb5f 	bl	8007088 <HAL_TIM_ConfigClockSource>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d001      	beq.n	800a9d4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800a9d0:	f001 fc32 	bl	800c238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a9dc:	463b      	mov	r3, r7
 800a9de:	4619      	mov	r1, r3
 800a9e0:	4805      	ldr	r0, [pc, #20]	; (800a9f8 <MX_TIM5_Init+0x94>)
 800a9e2:	f7fd f88b 	bl	8007afc <HAL_TIMEx_MasterConfigSynchronization>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800a9ec:	f001 fc24 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800a9f0:	bf00      	nop
 800a9f2:	3718      	adds	r7, #24
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	20000ba8 	.word	0x20000ba8
 800a9fc:	40000c00 	.word	0x40000c00

0800aa00 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aa06:	463b      	mov	r3, r7
 800aa08:	2200      	movs	r2, #0
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800aa0e:	4b15      	ldr	r3, [pc, #84]	; (800aa64 <MX_TIM6_Init+0x64>)
 800aa10:	4a15      	ldr	r2, [pc, #84]	; (800aa68 <MX_TIM6_Init+0x68>)
 800aa12:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 800aa14:	4b13      	ldr	r3, [pc, #76]	; (800aa64 <MX_TIM6_Init+0x64>)
 800aa16:	2253      	movs	r2, #83	; 0x53
 800aa18:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aa1a:	4b12      	ldr	r3, [pc, #72]	; (800aa64 <MX_TIM6_Init+0x64>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800aa20:	4b10      	ldr	r3, [pc, #64]	; (800aa64 <MX_TIM6_Init+0x64>)
 800aa22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aa28:	4b0e      	ldr	r3, [pc, #56]	; (800aa64 <MX_TIM6_Init+0x64>)
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800aa2e:	480d      	ldr	r0, [pc, #52]	; (800aa64 <MX_TIM6_Init+0x64>)
 800aa30:	f7fb fde8 	bl	8006604 <HAL_TIM_Base_Init>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d001      	beq.n	800aa3e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800aa3a:	f001 fbfd 	bl	800c238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aa42:	2300      	movs	r3, #0
 800aa44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800aa46:	463b      	mov	r3, r7
 800aa48:	4619      	mov	r1, r3
 800aa4a:	4806      	ldr	r0, [pc, #24]	; (800aa64 <MX_TIM6_Init+0x64>)
 800aa4c:	f7fd f856 	bl	8007afc <HAL_TIMEx_MasterConfigSynchronization>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800aa56:	f001 fbef 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800aa5a:	bf00      	nop
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	20000dc0 	.word	0x20000dc0
 800aa68:	40001000 	.word	0x40001000

0800aa6c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b08c      	sub	sp, #48	; 0x30
 800aa70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800aa72:	f107 030c 	add.w	r3, r7, #12
 800aa76:	2224      	movs	r2, #36	; 0x24
 800aa78:	2100      	movs	r1, #0
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f002 fb84 	bl	800d188 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aa80:	1d3b      	adds	r3, r7, #4
 800aa82:	2200      	movs	r2, #0
 800aa84:	601a      	str	r2, [r3, #0]
 800aa86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800aa88:	4b22      	ldr	r3, [pc, #136]	; (800ab14 <MX_TIM8_Init+0xa8>)
 800aa8a:	4a23      	ldr	r2, [pc, #140]	; (800ab18 <MX_TIM8_Init+0xac>)
 800aa8c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800aa8e:	4b21      	ldr	r3, [pc, #132]	; (800ab14 <MX_TIM8_Init+0xa8>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aa94:	4b1f      	ldr	r3, [pc, #124]	; (800ab14 <MX_TIM8_Init+0xa8>)
 800aa96:	2200      	movs	r2, #0
 800aa98:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1999;
 800aa9a:	4b1e      	ldr	r3, [pc, #120]	; (800ab14 <MX_TIM8_Init+0xa8>)
 800aa9c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800aaa0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aaa2:	4b1c      	ldr	r3, [pc, #112]	; (800ab14 <MX_TIM8_Init+0xa8>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800aaa8:	4b1a      	ldr	r3, [pc, #104]	; (800ab14 <MX_TIM8_Init+0xa8>)
 800aaaa:	2200      	movs	r2, #0
 800aaac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aaae:	4b19      	ldr	r3, [pc, #100]	; (800ab14 <MX_TIM8_Init+0xa8>)
 800aab0:	2200      	movs	r2, #0
 800aab2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800aab4:	2303      	movs	r3, #3
 800aab6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800aab8:	2300      	movs	r3, #0
 800aaba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800aabc:	2301      	movs	r3, #1
 800aabe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800aac0:	2300      	movs	r3, #0
 800aac2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800aac4:	2300      	movs	r3, #0
 800aac6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800aac8:	2300      	movs	r3, #0
 800aaca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800aacc:	2301      	movs	r3, #1
 800aace:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800aad0:	2300      	movs	r3, #0
 800aad2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800aad8:	f107 030c 	add.w	r3, r7, #12
 800aadc:	4619      	mov	r1, r3
 800aade:	480d      	ldr	r0, [pc, #52]	; (800ab14 <MX_TIM8_Init+0xa8>)
 800aae0:	f7fb ff1f 	bl	8006922 <HAL_TIM_Encoder_Init>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d001      	beq.n	800aaee <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800aaea:	f001 fba5 	bl	800c238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800aaee:	2320      	movs	r3, #32
 800aaf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800aaf6:	1d3b      	adds	r3, r7, #4
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4806      	ldr	r0, [pc, #24]	; (800ab14 <MX_TIM8_Init+0xa8>)
 800aafc:	f7fc fffe 	bl	8007afc <HAL_TIMEx_MasterConfigSynchronization>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800ab06:	f001 fb97 	bl	800c238 <Error_Handler>
  //HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); // this didn't seem to be necessary


  /* USER CODE END TIM8_Init 2 */

}
 800ab0a:	bf00      	nop
 800ab0c:	3730      	adds	r7, #48	; 0x30
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	2000056c 	.word	0x2000056c
 800ab18:	40010400 	.word	0x40010400

0800ab1c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08c      	sub	sp, #48	; 0x30
 800ab20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ab22:	f107 0320 	add.w	r3, r7, #32
 800ab26:	2200      	movs	r2, #0
 800ab28:	601a      	str	r2, [r3, #0]
 800ab2a:	605a      	str	r2, [r3, #4]
 800ab2c:	609a      	str	r2, [r3, #8]
 800ab2e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ab30:	1d3b      	adds	r3, r7, #4
 800ab32:	2200      	movs	r2, #0
 800ab34:	601a      	str	r2, [r3, #0]
 800ab36:	605a      	str	r2, [r3, #4]
 800ab38:	609a      	str	r2, [r3, #8]
 800ab3a:	60da      	str	r2, [r3, #12]
 800ab3c:	611a      	str	r2, [r3, #16]
 800ab3e:	615a      	str	r2, [r3, #20]
 800ab40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800ab42:	4b2d      	ldr	r3, [pc, #180]	; (800abf8 <MX_TIM9_Init+0xdc>)
 800ab44:	4a2d      	ldr	r2, [pc, #180]	; (800abfc <MX_TIM9_Init+0xe0>)
 800ab46:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 800ab48:	4b2b      	ldr	r3, [pc, #172]	; (800abf8 <MX_TIM9_Init+0xdc>)
 800ab4a:	22a7      	movs	r2, #167	; 0xa7
 800ab4c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab4e:	4b2a      	ldr	r3, [pc, #168]	; (800abf8 <MX_TIM9_Init+0xdc>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 800ab54:	4b28      	ldr	r3, [pc, #160]	; (800abf8 <MX_TIM9_Init+0xdc>)
 800ab56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab5a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ab5c:	4b26      	ldr	r3, [pc, #152]	; (800abf8 <MX_TIM9_Init+0xdc>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab62:	4b25      	ldr	r3, [pc, #148]	; (800abf8 <MX_TIM9_Init+0xdc>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800ab68:	4823      	ldr	r0, [pc, #140]	; (800abf8 <MX_TIM9_Init+0xdc>)
 800ab6a:	f7fb fd4b 	bl	8006604 <HAL_TIM_Base_Init>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d001      	beq.n	800ab78 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800ab74:	f001 fb60 	bl	800c238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ab78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800ab7e:	f107 0320 	add.w	r3, r7, #32
 800ab82:	4619      	mov	r1, r3
 800ab84:	481c      	ldr	r0, [pc, #112]	; (800abf8 <MX_TIM9_Init+0xdc>)
 800ab86:	f7fc fa7f 	bl	8007088 <HAL_TIM_ConfigClockSource>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d001      	beq.n	800ab94 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800ab90:	f001 fb52 	bl	800c238 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800ab94:	4818      	ldr	r0, [pc, #96]	; (800abf8 <MX_TIM9_Init+0xdc>)
 800ab96:	f7fb fe1b 	bl	80067d0 <HAL_TIM_PWM_Init>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d001      	beq.n	800aba4 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800aba0:	f001 fb4a 	bl	800c238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800aba4:	2360      	movs	r3, #96	; 0x60
 800aba6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800aba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800abac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800abae:	2300      	movs	r3, #0
 800abb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800abb2:	2300      	movs	r3, #0
 800abb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800abb6:	1d3b      	adds	r3, r7, #4
 800abb8:	2200      	movs	r2, #0
 800abba:	4619      	mov	r1, r3
 800abbc:	480e      	ldr	r0, [pc, #56]	; (800abf8 <MX_TIM9_Init+0xdc>)
 800abbe:	f7fc f99d 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d001      	beq.n	800abcc <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 800abc8:	f001 fb36 	bl	800c238 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 800abcc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800abd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800abd2:	1d3b      	adds	r3, r7, #4
 800abd4:	2204      	movs	r2, #4
 800abd6:	4619      	mov	r1, r3
 800abd8:	4807      	ldr	r0, [pc, #28]	; (800abf8 <MX_TIM9_Init+0xdc>)
 800abda:	f7fc f98f 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d001      	beq.n	800abe8 <MX_TIM9_Init+0xcc>
  {
    Error_Handler();
 800abe4:	f001 fb28 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800abe8:	4803      	ldr	r0, [pc, #12]	; (800abf8 <MX_TIM9_Init+0xdc>)
 800abea:	f002 f809 	bl	800cc00 <HAL_TIM_MspPostInit>

}
 800abee:	bf00      	nop
 800abf0:	3730      	adds	r7, #48	; 0x30
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	20000ea8 	.word	0x20000ea8
 800abfc:	40014000 	.word	0x40014000

0800ac00 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b08c      	sub	sp, #48	; 0x30
 800ac04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ac06:	f107 0320 	add.w	r3, r7, #32
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	601a      	str	r2, [r3, #0]
 800ac0e:	605a      	str	r2, [r3, #4]
 800ac10:	609a      	str	r2, [r3, #8]
 800ac12:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ac14:	1d3b      	adds	r3, r7, #4
 800ac16:	2200      	movs	r2, #0
 800ac18:	601a      	str	r2, [r3, #0]
 800ac1a:	605a      	str	r2, [r3, #4]
 800ac1c:	609a      	str	r2, [r3, #8]
 800ac1e:	60da      	str	r2, [r3, #12]
 800ac20:	611a      	str	r2, [r3, #16]
 800ac22:	615a      	str	r2, [r3, #20]
 800ac24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800ac26:	4b24      	ldr	r3, [pc, #144]	; (800acb8 <MX_TIM12_Init+0xb8>)
 800ac28:	4a24      	ldr	r2, [pc, #144]	; (800acbc <MX_TIM12_Init+0xbc>)
 800ac2a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 7;
 800ac2c:	4b22      	ldr	r3, [pc, #136]	; (800acb8 <MX_TIM12_Init+0xb8>)
 800ac2e:	2207      	movs	r2, #7
 800ac30:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac32:	4b21      	ldr	r3, [pc, #132]	; (800acb8 <MX_TIM12_Init+0xb8>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800ac38:	4b1f      	ldr	r3, [pc, #124]	; (800acb8 <MX_TIM12_Init+0xb8>)
 800ac3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac3e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac40:	4b1d      	ldr	r3, [pc, #116]	; (800acb8 <MX_TIM12_Init+0xb8>)
 800ac42:	2200      	movs	r2, #0
 800ac44:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac46:	4b1c      	ldr	r3, [pc, #112]	; (800acb8 <MX_TIM12_Init+0xb8>)
 800ac48:	2200      	movs	r2, #0
 800ac4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800ac4c:	481a      	ldr	r0, [pc, #104]	; (800acb8 <MX_TIM12_Init+0xb8>)
 800ac4e:	f7fb fcd9 	bl	8006604 <HAL_TIM_Base_Init>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800ac58:	f001 faee 	bl	800c238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ac5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac60:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800ac62:	f107 0320 	add.w	r3, r7, #32
 800ac66:	4619      	mov	r1, r3
 800ac68:	4813      	ldr	r0, [pc, #76]	; (800acb8 <MX_TIM12_Init+0xb8>)
 800ac6a:	f7fc fa0d 	bl	8007088 <HAL_TIM_ConfigClockSource>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d001      	beq.n	800ac78 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800ac74:	f001 fae0 	bl	800c238 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 800ac78:	480f      	ldr	r0, [pc, #60]	; (800acb8 <MX_TIM12_Init+0xb8>)
 800ac7a:	f7fb fd36 	bl	80066ea <HAL_TIM_OC_Init>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d001      	beq.n	800ac88 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800ac84:	f001 fad8 	bl	800c238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ac90:	2300      	movs	r3, #0
 800ac92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ac94:	2300      	movs	r3, #0
 800ac96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ac98:	1d3b      	adds	r3, r7, #4
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	4806      	ldr	r0, [pc, #24]	; (800acb8 <MX_TIM12_Init+0xb8>)
 800aca0:	f7fc f830 	bl	8006d04 <HAL_TIM_OC_ConfigChannel>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800acaa:	f001 fac5 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800acae:	bf00      	nop
 800acb0:	3730      	adds	r7, #48	; 0x30
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	20001070 	.word	0x20001070
 800acbc:	40001800 	.word	0x40001800

0800acc0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800acc6:	463b      	mov	r3, r7
 800acc8:	2200      	movs	r2, #0
 800acca:	601a      	str	r2, [r3, #0]
 800accc:	605a      	str	r2, [r3, #4]
 800acce:	609a      	str	r2, [r3, #8]
 800acd0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800acd2:	4b1c      	ldr	r3, [pc, #112]	; (800ad44 <MX_TIM13_Init+0x84>)
 800acd4:	4a1c      	ldr	r2, [pc, #112]	; (800ad48 <MX_TIM13_Init+0x88>)
 800acd6:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800acd8:	4b1a      	ldr	r3, [pc, #104]	; (800ad44 <MX_TIM13_Init+0x84>)
 800acda:	2200      	movs	r2, #0
 800acdc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800acde:	4b19      	ldr	r3, [pc, #100]	; (800ad44 <MX_TIM13_Init+0x84>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 800ace4:	4b17      	ldr	r3, [pc, #92]	; (800ad44 <MX_TIM13_Init+0x84>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800acea:	4b16      	ldr	r3, [pc, #88]	; (800ad44 <MX_TIM13_Init+0x84>)
 800acec:	2200      	movs	r2, #0
 800acee:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800acf0:	4b14      	ldr	r3, [pc, #80]	; (800ad44 <MX_TIM13_Init+0x84>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800acf6:	4813      	ldr	r0, [pc, #76]	; (800ad44 <MX_TIM13_Init+0x84>)
 800acf8:	f7fb fc84 	bl	8006604 <HAL_TIM_Base_Init>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d001      	beq.n	800ad06 <MX_TIM13_Init+0x46>
  {
    Error_Handler();
 800ad02:	f001 fa99 	bl	800c238 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 800ad06:	480f      	ldr	r0, [pc, #60]	; (800ad44 <MX_TIM13_Init+0x84>)
 800ad08:	f7fb fdd6 	bl	80068b8 <HAL_TIM_IC_Init>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <MX_TIM13_Init+0x56>
  {
    Error_Handler();
 800ad12:	f001 fa91 	bl	800c238 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ad16:	2300      	movs	r3, #0
 800ad18:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800ad22:	2300      	movs	r3, #0
 800ad24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ad26:	463b      	mov	r3, r7
 800ad28:	2200      	movs	r2, #0
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	4805      	ldr	r0, [pc, #20]	; (800ad44 <MX_TIM13_Init+0x84>)
 800ad2e:	f7fc f849 	bl	8006dc4 <HAL_TIM_IC_ConfigChannel>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d001      	beq.n	800ad3c <MX_TIM13_Init+0x7c>
  {
    Error_Handler();
 800ad38:	f001 fa7e 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800ad3c:	bf00      	nop
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	20000cfc 	.word	0x20000cfc
 800ad48:	40001c00 	.word	0x40001c00

0800ad4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800ad50:	4b11      	ldr	r3, [pc, #68]	; (800ad98 <MX_USART3_UART_Init+0x4c>)
 800ad52:	4a12      	ldr	r2, [pc, #72]	; (800ad9c <MX_USART3_UART_Init+0x50>)
 800ad54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800ad56:	4b10      	ldr	r3, [pc, #64]	; (800ad98 <MX_USART3_UART_Init+0x4c>)
 800ad58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ad5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ad5e:	4b0e      	ldr	r3, [pc, #56]	; (800ad98 <MX_USART3_UART_Init+0x4c>)
 800ad60:	2200      	movs	r2, #0
 800ad62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ad64:	4b0c      	ldr	r3, [pc, #48]	; (800ad98 <MX_USART3_UART_Init+0x4c>)
 800ad66:	2200      	movs	r2, #0
 800ad68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800ad6a:	4b0b      	ldr	r3, [pc, #44]	; (800ad98 <MX_USART3_UART_Init+0x4c>)
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ad70:	4b09      	ldr	r3, [pc, #36]	; (800ad98 <MX_USART3_UART_Init+0x4c>)
 800ad72:	220c      	movs	r2, #12
 800ad74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ad76:	4b08      	ldr	r3, [pc, #32]	; (800ad98 <MX_USART3_UART_Init+0x4c>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ad7c:	4b06      	ldr	r3, [pc, #24]	; (800ad98 <MX_USART3_UART_Init+0x4c>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ad82:	4805      	ldr	r0, [pc, #20]	; (800ad98 <MX_USART3_UART_Init+0x4c>)
 800ad84:	f7fc ffc1 	bl	8007d0a <HAL_UART_Init>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800ad8e:	f001 fa53 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800ad92:	bf00      	nop
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	200005ac 	.word	0x200005ac
 800ad9c:	40004800 	.word	0x40004800

0800ada0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ada4:	4b14      	ldr	r3, [pc, #80]	; (800adf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800ada6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800adaa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800adac:	4b12      	ldr	r3, [pc, #72]	; (800adf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800adae:	2204      	movs	r2, #4
 800adb0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800adb2:	4b11      	ldr	r3, [pc, #68]	; (800adf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800adb4:	2202      	movs	r2, #2
 800adb6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800adb8:	4b0f      	ldr	r3, [pc, #60]	; (800adf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800adba:	2200      	movs	r2, #0
 800adbc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800adbe:	4b0e      	ldr	r3, [pc, #56]	; (800adf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800adc0:	2202      	movs	r2, #2
 800adc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800adc4:	4b0c      	ldr	r3, [pc, #48]	; (800adf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800adc6:	2200      	movs	r2, #0
 800adc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800adca:	4b0b      	ldr	r3, [pc, #44]	; (800adf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800adcc:	2200      	movs	r2, #0
 800adce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800add0:	4b09      	ldr	r3, [pc, #36]	; (800adf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800add2:	2200      	movs	r2, #0
 800add4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800add6:	4b08      	ldr	r3, [pc, #32]	; (800adf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800add8:	2200      	movs	r2, #0
 800adda:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800addc:	4b06      	ldr	r3, [pc, #24]	; (800adf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800adde:	2200      	movs	r2, #0
 800ade0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ade2:	4805      	ldr	r0, [pc, #20]	; (800adf8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800ade4:	f7f9 fe49 	bl	8004a7a <HAL_PCD_Init>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d001      	beq.n	800adf2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800adee:	f001 fa23 	bl	800c238 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800adf2:	bf00      	nop
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20000688 	.word	0x20000688

0800adfc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800ae02:	2300      	movs	r3, #0
 800ae04:	607b      	str	r3, [r7, #4]
 800ae06:	4b1f      	ldr	r3, [pc, #124]	; (800ae84 <MX_DMA_Init+0x88>)
 800ae08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae0a:	4a1e      	ldr	r2, [pc, #120]	; (800ae84 <MX_DMA_Init+0x88>)
 800ae0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ae10:	6313      	str	r3, [r2, #48]	; 0x30
 800ae12:	4b1c      	ldr	r3, [pc, #112]	; (800ae84 <MX_DMA_Init+0x88>)
 800ae14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae1a:	607b      	str	r3, [r7, #4]
 800ae1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ae1e:	2300      	movs	r3, #0
 800ae20:	603b      	str	r3, [r7, #0]
 800ae22:	4b18      	ldr	r3, [pc, #96]	; (800ae84 <MX_DMA_Init+0x88>)
 800ae24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae26:	4a17      	ldr	r2, [pc, #92]	; (800ae84 <MX_DMA_Init+0x88>)
 800ae28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ae2c:	6313      	str	r3, [r2, #48]	; 0x30
 800ae2e:	4b15      	ldr	r3, [pc, #84]	; (800ae84 <MX_DMA_Init+0x88>)
 800ae30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae36:	603b      	str	r3, [r7, #0]
 800ae38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	200e      	movs	r0, #14
 800ae40:	f7f8 f893 	bl	8002f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800ae44:	200e      	movs	r0, #14
 800ae46:	f7f8 f8ac 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	2038      	movs	r0, #56	; 0x38
 800ae50:	f7f8 f88b 	bl	8002f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800ae54:	2038      	movs	r0, #56	; 0x38
 800ae56:	f7f8 f8a4 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	2039      	movs	r0, #57	; 0x39
 800ae60:	f7f8 f883 	bl	8002f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800ae64:	2039      	movs	r0, #57	; 0x39
 800ae66:	f7f8 f89c 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	203a      	movs	r0, #58	; 0x3a
 800ae70:	f7f8 f87b 	bl	8002f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800ae74:	203a      	movs	r0, #58	; 0x3a
 800ae76:	f7f8 f894 	bl	8002fa2 <HAL_NVIC_EnableIRQ>

}
 800ae7a:	bf00      	nop
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	40023800 	.word	0x40023800

0800ae88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08c      	sub	sp, #48	; 0x30
 800ae8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae8e:	f107 031c 	add.w	r3, r7, #28
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]
 800ae96:	605a      	str	r2, [r3, #4]
 800ae98:	609a      	str	r2, [r3, #8]
 800ae9a:	60da      	str	r2, [r3, #12]
 800ae9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ae9e:	2300      	movs	r3, #0
 800aea0:	61bb      	str	r3, [r7, #24]
 800aea2:	4b61      	ldr	r3, [pc, #388]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800aea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea6:	4a60      	ldr	r2, [pc, #384]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800aea8:	f043 0310 	orr.w	r3, r3, #16
 800aeac:	6313      	str	r3, [r2, #48]	; 0x30
 800aeae:	4b5e      	ldr	r3, [pc, #376]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800aeb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb2:	f003 0310 	and.w	r3, r3, #16
 800aeb6:	61bb      	str	r3, [r7, #24]
 800aeb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aeba:	2300      	movs	r3, #0
 800aebc:	617b      	str	r3, [r7, #20]
 800aebe:	4b5a      	ldr	r3, [pc, #360]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800aec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec2:	4a59      	ldr	r2, [pc, #356]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800aec4:	f043 0304 	orr.w	r3, r3, #4
 800aec8:	6313      	str	r3, [r2, #48]	; 0x30
 800aeca:	4b57      	ldr	r3, [pc, #348]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800aecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aece:	f003 0304 	and.w	r3, r3, #4
 800aed2:	617b      	str	r3, [r7, #20]
 800aed4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800aed6:	2300      	movs	r3, #0
 800aed8:	613b      	str	r3, [r7, #16]
 800aeda:	4b53      	ldr	r3, [pc, #332]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800aedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aede:	4a52      	ldr	r2, [pc, #328]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800aee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee4:	6313      	str	r3, [r2, #48]	; 0x30
 800aee6:	4b50      	ldr	r3, [pc, #320]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800aee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeee:	613b      	str	r3, [r7, #16]
 800aef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800aef2:	2300      	movs	r3, #0
 800aef4:	60fb      	str	r3, [r7, #12]
 800aef6:	4b4c      	ldr	r3, [pc, #304]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800aef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aefa:	4a4b      	ldr	r2, [pc, #300]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800aefc:	f043 0301 	orr.w	r3, r3, #1
 800af00:	6313      	str	r3, [r2, #48]	; 0x30
 800af02:	4b49      	ldr	r3, [pc, #292]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800af04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800af0e:	2300      	movs	r3, #0
 800af10:	60bb      	str	r3, [r7, #8]
 800af12:	4b45      	ldr	r3, [pc, #276]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800af14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af16:	4a44      	ldr	r2, [pc, #272]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800af18:	f043 0302 	orr.w	r3, r3, #2
 800af1c:	6313      	str	r3, [r2, #48]	; 0x30
 800af1e:	4b42      	ldr	r3, [pc, #264]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800af20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af22:	f003 0302 	and.w	r3, r3, #2
 800af26:	60bb      	str	r3, [r7, #8]
 800af28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800af2a:	2300      	movs	r3, #0
 800af2c:	607b      	str	r3, [r7, #4]
 800af2e:	4b3e      	ldr	r3, [pc, #248]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800af30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af32:	4a3d      	ldr	r2, [pc, #244]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800af34:	f043 0308 	orr.w	r3, r3, #8
 800af38:	6313      	str	r3, [r2, #48]	; 0x30
 800af3a:	4b3b      	ldr	r3, [pc, #236]	; (800b028 <MX_GPIO_Init+0x1a0>)
 800af3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3e:	f003 0308 	and.w	r3, r3, #8
 800af42:	607b      	str	r3, [r7, #4]
 800af44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin, GPIO_PIN_RESET);
 800af46:	2200      	movs	r2, #0
 800af48:	f24c 0118 	movw	r1, #49176	; 0xc018
 800af4c:	4837      	ldr	r0, [pc, #220]	; (800b02c <MX_GPIO_Init+0x1a4>)
 800af4e:	f7f8 fdc1 	bl	8003ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800af52:	2200      	movs	r2, #0
 800af54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800af58:	4835      	ldr	r0, [pc, #212]	; (800b030 <MX_GPIO_Init+0x1a8>)
 800af5a:	f7f8 fdbb 	bl	8003ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 800af5e:	2200      	movs	r2, #0
 800af60:	f64b 0180 	movw	r1, #47232	; 0xb880
 800af64:	4833      	ldr	r0, [pc, #204]	; (800b034 <MX_GPIO_Init+0x1ac>)
 800af66:	f7f8 fdb5 	bl	8003ad4 <HAL_GPIO_WritePin>
                          |nSCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin EN_GATE_Pin M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin;
 800af6a:	f24c 0318 	movw	r3, #49176	; 0xc018
 800af6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800af70:	2301      	movs	r3, #1
 800af72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af74:	2300      	movs	r3, #0
 800af76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af78:	2300      	movs	r3, #0
 800af7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800af7c:	f107 031c 	add.w	r3, r7, #28
 800af80:	4619      	mov	r1, r3
 800af82:	482a      	ldr	r0, [pc, #168]	; (800b02c <MX_GPIO_Init+0x1a4>)
 800af84:	f7f8 fc0c 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800af88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800af8e:	2301      	movs	r3, #1
 800af90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af92:	2300      	movs	r3, #0
 800af94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af96:	2300      	movs	r3, #0
 800af98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800af9a:	f107 031c 	add.w	r3, r7, #28
 800af9e:	4619      	mov	r1, r3
 800afa0:	4823      	ldr	r0, [pc, #140]	; (800b030 <MX_GPIO_Init+0x1a8>)
 800afa2:	f7f8 fbfd 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 debug1_out_Pin debug2_out_Pin ROT0_nCS_Pin 
                           nSCS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 800afa6:	f64b 0380 	movw	r3, #47232	; 0xb880
 800afaa:	61fb      	str	r3, [r7, #28]
                          |nSCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800afac:	2301      	movs	r3, #1
 800afae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afb0:	2300      	movs	r3, #0
 800afb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afb4:	2300      	movs	r3, #0
 800afb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800afb8:	f107 031c 	add.w	r3, r7, #28
 800afbc:	4619      	mov	r1, r3
 800afbe:	481d      	ldr	r0, [pc, #116]	; (800b034 <MX_GPIO_Init+0x1ac>)
 800afc0:	f7f8 fbee 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : debug1_in_Pin */
  GPIO_InitStruct.Pin = debug1_in_Pin;
 800afc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800afc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800afca:	2300      	movs	r3, #0
 800afcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afce:	2300      	movs	r3, #0
 800afd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(debug1_in_GPIO_Port, &GPIO_InitStruct);
 800afd2:	f107 031c 	add.w	r3, r7, #28
 800afd6:	4619      	mov	r1, r3
 800afd8:	4816      	ldr	r0, [pc, #88]	; (800b034 <MX_GPIO_Init+0x1ac>)
 800afda:	f7f8 fbe1 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT0_I_W_Pin */
  GPIO_InitStruct.Pin = ROT0_I_W_Pin;
 800afde:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800afe4:	4b14      	ldr	r3, [pc, #80]	; (800b038 <MX_GPIO_Init+0x1b0>)
 800afe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afe8:	2300      	movs	r3, #0
 800afea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ROT0_I_W_GPIO_Port, &GPIO_InitStruct);
 800afec:	f107 031c 	add.w	r3, r7, #28
 800aff0:	4619      	mov	r1, r3
 800aff2:	480f      	ldr	r0, [pc, #60]	; (800b030 <MX_GPIO_Init+0x1a8>)
 800aff4:	f7f8 fbd4 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 800aff8:	2370      	movs	r3, #112	; 0x70
 800affa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800affc:	2300      	movs	r3, #0
 800affe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b000:	2301      	movs	r3, #1
 800b002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b004:	f107 031c 	add.w	r3, r7, #28
 800b008:	4619      	mov	r1, r3
 800b00a:	480a      	ldr	r0, [pc, #40]	; (800b034 <MX_GPIO_Init+0x1ac>)
 800b00c:	f7f8 fbc8 	bl	80037a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800b010:	2200      	movs	r2, #0
 800b012:	2100      	movs	r1, #0
 800b014:	2017      	movs	r0, #23
 800b016:	f7f7 ffa8 	bl	8002f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800b01a:	2017      	movs	r0, #23
 800b01c:	f7f7 ffc1 	bl	8002fa2 <HAL_NVIC_EnableIRQ>

}
 800b020:	bf00      	nop
 800b022:	3730      	adds	r7, #48	; 0x30
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	40023800 	.word	0x40023800
 800b02c:	40021000 	.word	0x40021000
 800b030:	40020800 	.word	0x40020800
 800b034:	40020c00 	.word	0x40020c00
 800b038:	10110000 	.word	0x10110000

0800b03c <set_pwm_off>:

/* USER CODE BEGIN 4 */

void set_pwm_off(void){
 800b03c:	b480      	push	{r7}
 800b03e:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 800b040:	4b06      	ldr	r3, [pc, #24]	; (800b05c <set_pwm_off+0x20>)
 800b042:	2200      	movs	r2, #0
 800b044:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800b046:	4b05      	ldr	r3, [pc, #20]	; (800b05c <set_pwm_off+0x20>)
 800b048:	2200      	movs	r2, #0
 800b04a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800b04c:	4b03      	ldr	r3, [pc, #12]	; (800b05c <set_pwm_off+0x20>)
 800b04e:	2200      	movs	r2, #0
 800b050:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b052:	bf00      	nop
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr
 800b05c:	40010000 	.word	0x40010000

0800b060 <step_through_pole_angles>:

void step_through_pole_angles(void){
 800b060:	b5b0      	push	{r4, r5, r7, lr}
 800b062:	b0d4      	sub	sp, #336	; 0x150
 800b064:	af02      	add	r7, sp, #8
	normal_operation_enabled = false;
 800b066:	4b84      	ldr	r3, [pc, #528]	; (800b278 <step_through_pole_angles+0x218>)
 800b068:	2200      	movs	r2, #0
 800b06a:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800b06c:	f7ff ffe6 	bl	800b03c <set_pwm_off>
	//run_motor = 0;
	HAL_Delay(100);
 800b070:	2064      	movs	r0, #100	; 0x64
 800b072:	f7f5 ffe5 	bl	8001040 <HAL_Delay>
	uint16_t step_through_amp = 5 * PWM_1PERCENT;
 800b076:	23cd      	movs	r3, #205	; 0xcd
 800b078:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	for (uint8_t pole = 0; pole < N_POLES ; pole++){
 800b07c:	2300      	movs	r3, #0
 800b07e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 800b082:	e07f      	b.n	800b184 <step_through_pole_angles+0x124>
		for (uint8_t ABC = 0; ABC < N_PHASES ; ABC++){
 800b084:	2300      	movs	r3, #0
 800b086:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 800b08a:	e072      	b.n	800b172 <step_through_pole_angles+0x112>
			set_pwm_off();
 800b08c:	f7ff ffd6 	bl	800b03c <set_pwm_off>
			if (ABC==0){
 800b090:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 800b094:	2b00      	cmp	r3, #0
 800b096:	d104      	bne.n	800b0a2 <step_through_pole_angles+0x42>
				TIM1->CCR1 = step_through_amp;
 800b098:	4a78      	ldr	r2, [pc, #480]	; (800b27c <step_through_pole_angles+0x21c>)
 800b09a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800b09e:	6353      	str	r3, [r2, #52]	; 0x34
 800b0a0:	e00c      	b.n	800b0bc <step_through_pole_angles+0x5c>
			}
			else if (ABC==1){
 800b0a2:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d104      	bne.n	800b0b4 <step_through_pole_angles+0x54>
				TIM1->CCR2 = step_through_amp;
 800b0aa:	4a74      	ldr	r2, [pc, #464]	; (800b27c <step_through_pole_angles+0x21c>)
 800b0ac:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800b0b0:	6393      	str	r3, [r2, #56]	; 0x38
 800b0b2:	e003      	b.n	800b0bc <step_through_pole_angles+0x5c>
			}
			else {
				TIM1->CCR3 = step_through_amp;
 800b0b4:	4a71      	ldr	r2, [pc, #452]	; (800b27c <step_through_pole_angles+0x21c>)
 800b0b6:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800b0ba:	63d3      	str	r3, [r2, #60]	; 0x3c
			}
			HAL_Delay(200);
 800b0bc:	20c8      	movs	r0, #200	; 0xc8
 800b0be:	f7f5 ffbf 	bl	8001040 <HAL_Delay>
			pole_angles[pole * N_PHASES + ABC]=TIM8->CNT;
 800b0c2:	4b6f      	ldr	r3, [pc, #444]	; (800b280 <step_through_pole_angles+0x220>)
 800b0c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b0c6:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	005b      	lsls	r3, r3, #1
 800b0ce:	441a      	add	r2, r3
 800b0d0:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 800b0d4:	4413      	add	r3, r2
 800b0d6:	b289      	uxth	r1, r1
 800b0d8:	4a6a      	ldr	r2, [pc, #424]	; (800b284 <step_through_pole_angles+0x224>)
 800b0da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]



			uint8_t buf[300];
			buf[0] = '\0';
 800b0de:	1d3b      	adds	r3, r7, #4
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	701a      	strb	r2, [r3, #0]
			sprintf((char*)buf_msg, "[step_through_pole_angles] pole: %d ABC: %d angle: %d \r\n", pole, ABC, TIM8->CNT);
 800b0e4:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 800b0e8:	f897 1146 	ldrb.w	r1, [r7, #326]	; 0x146
 800b0ec:	4b64      	ldr	r3, [pc, #400]	; (800b280 <step_through_pole_angles+0x220>)
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4964      	ldr	r1, [pc, #400]	; (800b288 <step_through_pole_angles+0x228>)
 800b0f6:	4865      	ldr	r0, [pc, #404]	; (800b28c <step_through_pole_angles+0x22c>)
 800b0f8:	f002 f84e 	bl	800d198 <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800b0fc:	4863      	ldr	r0, [pc, #396]	; (800b28c <step_through_pole_angles+0x22c>)
 800b0fe:	f7f5 f867 	bl	80001d0 <strlen>
 800b102:	4604      	mov	r4, r0
 800b104:	4862      	ldr	r0, [pc, #392]	; (800b290 <step_through_pole_angles+0x230>)
 800b106:	f7f5 f863 	bl	80001d0 <strlen>
 800b10a:	4603      	mov	r3, r0
 800b10c:	4423      	add	r3, r4
 800b10e:	2b63      	cmp	r3, #99	; 0x63
 800b110:	d804      	bhi.n	800b11c <step_through_pole_angles+0xbc>
				strcat(buf_msgs, buf_msg);
 800b112:	495e      	ldr	r1, [pc, #376]	; (800b28c <step_through_pole_angles+0x22c>)
 800b114:	485e      	ldr	r0, [pc, #376]	; (800b290 <step_through_pole_angles+0x230>)
 800b116:	f002 f85f 	bl	800d1d8 <strcat>
 800b11a:	e002      	b.n	800b122 <step_through_pole_angles+0xc2>
			}
			else {
				buf_msgs[0] = '#';
 800b11c:	4b5c      	ldr	r3, [pc, #368]	; (800b290 <step_through_pole_angles+0x230>)
 800b11e:	2223      	movs	r2, #35	; 0x23
 800b120:	701a      	strb	r2, [r3, #0]
			}
			if (buf_msgs[0] != '\0'){
 800b122:	4b5b      	ldr	r3, [pc, #364]	; (800b290 <step_through_pole_angles+0x230>)
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d007      	beq.n	800b13a <step_through_pole_angles+0xda>
				strcat(buf, buf_msgs);
 800b12a:	1d3b      	adds	r3, r7, #4
 800b12c:	4958      	ldr	r1, [pc, #352]	; (800b290 <step_through_pole_angles+0x230>)
 800b12e:	4618      	mov	r0, r3
 800b130:	f002 f852 	bl	800d1d8 <strcat>
				buf_msgs[0] = '\0';
 800b134:	4b56      	ldr	r3, [pc, #344]	; (800b290 <step_through_pole_angles+0x230>)
 800b136:	2200      	movs	r2, #0
 800b138:	701a      	strb	r2, [r3, #0]
			}
			//HAL_UART_Transmit_IT(&huart3, buf, strlen((char*)buf)); //WORKS but replaced by DMA below
			huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 800b13a:	4b56      	ldr	r3, [pc, #344]	; (800b294 <step_through_pole_angles+0x234>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	695a      	ldr	r2, [r3, #20]
 800b140:	4b54      	ldr	r3, [pc, #336]	; (800b294 <step_through_pole_angles+0x234>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b148:	615a      	str	r2, [r3, #20]
			HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 800b14a:	1d3c      	adds	r4, r7, #4
 800b14c:	4b51      	ldr	r3, [pc, #324]	; (800b294 <step_through_pole_angles+0x234>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	3304      	adds	r3, #4
 800b152:	461d      	mov	r5, r3
 800b154:	1d3b      	adds	r3, r7, #4
 800b156:	4618      	mov	r0, r3
 800b158:	f7f5 f83a 	bl	80001d0 <strlen>
 800b15c:	4603      	mov	r3, r0
 800b15e:	462a      	mov	r2, r5
 800b160:	4621      	mov	r1, r4
 800b162:	484d      	ldr	r0, [pc, #308]	; (800b298 <step_through_pole_angles+0x238>)
 800b164:	f7f7 ffe6 	bl	8003134 <HAL_DMA_Start_IT>
		for (uint8_t ABC = 0; ABC < N_PHASES ; ABC++){
 800b168:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 800b16c:	3301      	adds	r3, #1
 800b16e:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 800b172:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 800b176:	2b02      	cmp	r3, #2
 800b178:	d988      	bls.n	800b08c <step_through_pole_angles+0x2c>
	for (uint8_t pole = 0; pole < N_POLES ; pole++){
 800b17a:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800b17e:	3301      	adds	r3, #1
 800b180:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 800b184:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800b188:	2b13      	cmp	r3, #19
 800b18a:	f67f af7b 	bls.w	800b084 <step_through_pole_angles+0x24>

		}
	}
	set_pwm_off();
 800b18e:	f7ff ff55 	bl	800b03c <set_pwm_off>
	normal_operation_enabled = true;
 800b192:	4b39      	ldr	r3, [pc, #228]	; (800b278 <step_through_pole_angles+0x218>)
 800b194:	2201      	movs	r2, #1
 800b196:	701a      	strb	r2, [r3, #0]

	float sum = 0;
 800b198:	f04f 0300 	mov.w	r3, #0
 800b19c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	float enc_steps_per_A2B = (float)ENC_STEPS / (float)(N_POLES * N_PHASES);
 800b1a0:	4b3e      	ldr	r3, [pc, #248]	; (800b29c <step_through_pole_angles+0x23c>)
 800b1a2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	float enc_steps_per_A2A = (float)ENC_STEPS / (float)N_POLES;
 800b1a6:	4b3e      	ldr	r3, [pc, #248]	; (800b2a0 <step_through_pole_angles+0x240>)
 800b1a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	for (uint8_t i = 0; i < N_POLES * N_PHASES ; i++){
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b1b2:	e057      	b.n	800b264 <step_through_pole_angles+0x204>
		float reduced_pole_angle = pole_angles[i] - i * enc_steps_per_A2B ;//should be 95.238=ENC_STEPS/21 = ENC_STEPS/ (N_POLES * N_PHASES)
 800b1b4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b1b8:	4a32      	ldr	r2, [pc, #200]	; (800b284 <step_through_pole_angles+0x224>)
 800b1ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1be:	ee07 3a90 	vmov	s15, r3
 800b1c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b1c6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b1ca:	ee07 3a90 	vmov	s15, r3
 800b1ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b1d2:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 800b1d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b1da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1de:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
		if (reduced_pole_angle > -ENC_STEPS_HALF){
 800b1e2:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800b1e6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b2a4 <step_through_pole_angles+0x244>
 800b1ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f2:	dd08      	ble.n	800b206 <step_through_pole_angles+0x1a6>
			sum += reduced_pole_angle;
 800b1f4:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 800b1f8:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800b1fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b200:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
 800b204:	e00b      	b.n	800b21e <step_through_pole_angles+0x1be>
		}
		else{
			sum += reduced_pole_angle + ENC_STEPS;
 800b206:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800b20a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800b2a8 <step_through_pole_angles+0x248>
 800b20e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b212:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 800b216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b21a:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
		}
		av_start_angle = sum / (float)(N_POLES * N_PHASES);
 800b21e:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 800b222:	eddf 6a22 	vldr	s13, [pc, #136]	; 800b2ac <step_through_pole_angles+0x24c>
 800b226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b22a:	4b21      	ldr	r3, [pc, #132]	; (800b2b0 <step_through_pole_angles+0x250>)
 800b22c:	edc3 7a00 	vstr	s15, [r3]
		while(av_start_angle > enc_steps_per_A2A){
 800b230:	e009      	b.n	800b246 <step_through_pole_angles+0x1e6>
			av_start_angle -= enc_steps_per_A2A;
 800b232:	4b1f      	ldr	r3, [pc, #124]	; (800b2b0 <step_through_pole_angles+0x250>)
 800b234:	ed93 7a00 	vldr	s14, [r3]
 800b238:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 800b23c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b240:	4b1b      	ldr	r3, [pc, #108]	; (800b2b0 <step_through_pole_angles+0x250>)
 800b242:	edc3 7a00 	vstr	s15, [r3]
		while(av_start_angle > enc_steps_per_A2A){
 800b246:	4b1a      	ldr	r3, [pc, #104]	; (800b2b0 <step_through_pole_angles+0x250>)
 800b248:	edd3 7a00 	vldr	s15, [r3]
 800b24c:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 800b250:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b258:	d4eb      	bmi.n	800b232 <step_through_pole_angles+0x1d2>
	for (uint8_t i = 0; i < N_POLES * N_PHASES ; i++){
 800b25a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b25e:	3301      	adds	r3, #1
 800b260:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b264:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b268:	2b3b      	cmp	r3, #59	; 0x3b
 800b26a:	d9a3      	bls.n	800b1b4 <step_through_pole_angles+0x154>
		//float av_angle_first_A =

	}


}
 800b26c:	bf00      	nop
 800b26e:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800b272:	46bd      	mov	sp, r7
 800b274:	bdb0      	pop	{r4, r5, r7, pc}
 800b276:	bf00      	nop
 800b278:	20000041 	.word	0x20000041
 800b27c:	40010000 	.word	0x40010000
 800b280:	40010400 	.word	0x40010400
 800b284:	20000154 	.word	0x20000154
 800b288:	0800eb94 	.word	0x0800eb94
 800b28c:	200010c8 	.word	0x200010c8
 800b290:	20000eec 	.word	0x20000eec
 800b294:	200005ac 	.word	0x200005ac
 800b298:	20000b48 	.word	0x20000b48
 800b29c:	42055555 	.word	0x42055555
 800b2a0:	42c80000 	.word	0x42c80000
 800b2a4:	c47a0000 	.word	0xc47a0000
 800b2a8:	44fa0000 	.word	0x44fa0000
 800b2ac:	42700000 	.word	0x42700000
 800b2b0:	20000e68 	.word	0x20000e68

0800b2b4 <step_through_pwm_percent>:

void step_through_pwm_percent(void){
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
	normal_operation_enabled = false;
 800b2ba:	4b16      	ldr	r3, [pc, #88]	; (800b314 <step_through_pwm_percent+0x60>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800b2c0:	f7ff febc 	bl	800b03c <set_pwm_off>
	HAL_Delay(100);
 800b2c4:	2064      	movs	r0, #100	; 0x64
 800b2c6:	f7f5 febb 	bl	8001040 <HAL_Delay>
	for (uint8_t percent = 0; percent < 10 ; percent++){
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	71fb      	strb	r3, [r7, #7]
 800b2ce:	e014      	b.n	800b2fa <step_through_pwm_percent+0x46>
		TIM1->CCR1 = percent * PWM_1PERCENT;
 800b2d0:	79fa      	ldrb	r2, [r7, #7]
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	4413      	add	r3, r2
 800b2d8:	00db      	lsls	r3, r3, #3
 800b2da:	441a      	add	r2, r3
 800b2dc:	4b0e      	ldr	r3, [pc, #56]	; (800b318 <step_through_pwm_percent+0x64>)
 800b2de:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(200);
 800b2e0:	20c8      	movs	r0, #200	; 0xc8
 800b2e2:	f7f5 fead 	bl	8001040 <HAL_Delay>
		pole_angle_by_amp[percent]=TIM8->CNT;
 800b2e6:	4b0d      	ldr	r3, [pc, #52]	; (800b31c <step_through_pwm_percent+0x68>)
 800b2e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2ea:	79fb      	ldrb	r3, [r7, #7]
 800b2ec:	b291      	uxth	r1, r2
 800b2ee:	4a0c      	ldr	r2, [pc, #48]	; (800b320 <step_through_pwm_percent+0x6c>)
 800b2f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t percent = 0; percent < 10 ; percent++){
 800b2f4:	79fb      	ldrb	r3, [r7, #7]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	71fb      	strb	r3, [r7, #7]
 800b2fa:	79fb      	ldrb	r3, [r7, #7]
 800b2fc:	2b09      	cmp	r3, #9
 800b2fe:	d9e7      	bls.n	800b2d0 <step_through_pwm_percent+0x1c>
	}
	set_pwm_off();
 800b300:	f7ff fe9c 	bl	800b03c <set_pwm_off>
	normal_operation_enabled = true;
 800b304:	4b03      	ldr	r3, [pc, #12]	; (800b314 <step_through_pwm_percent+0x60>)
 800b306:	2201      	movs	r2, #1
 800b308:	701a      	strb	r2, [r3, #0]
}
 800b30a:	bf00      	nop
 800b30c:	3708      	adds	r7, #8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	20000041 	.word	0x20000041
 800b318:	40010000 	.word	0x40010000
 800b31c:	40010400 	.word	0x40010400
 800b320:	20000e40 	.word	0x20000e40

0800b324 <delay_SPI>:
    //for (i=0; i<3195; i++);
  	for (i=0; i<1; i++);
  }
}

void delay_SPI(void){
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
	int g =0;
 800b32a:	2300      	movs	r3, #0
 800b32c:	607b      	str	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800b32e:	2300      	movs	r3, #0
 800b330:	603b      	str	r3, [r7, #0]
 800b332:	e005      	b.n	800b340 <delay_SPI+0x1c>
		g++;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	3301      	adds	r3, #1
 800b338:	607b      	str	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	3301      	adds	r3, #1
 800b33e:	603b      	str	r3, [r7, #0]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	2b13      	cmp	r3, #19
 800b344:	ddf6      	ble.n	800b334 <delay_SPI+0x10>
	}
}
 800b346:	bf00      	nop
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
	...

0800b354 <playSound>:
void myDelay(void){
	HAL_Delay(1);

}

void playSound(uint16_t periode, uint16_t volume, uint16_t cycles){
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	4603      	mov	r3, r0
 800b35c:	80fb      	strh	r3, [r7, #6]
 800b35e:	460b      	mov	r3, r1
 800b360:	80bb      	strh	r3, [r7, #4]
 800b362:	4613      	mov	r3, r2
 800b364:	807b      	strh	r3, [r7, #2]
	// TODO disable interrupt for the duration of sound
	//HAL_NVIC_DisableIRQ(TIM8_UP_TIM13_IRQn);
	//HAL_Delay(1000);
	normal_operation_enabled = false;
 800b366:	4b17      	ldr	r3, [pc, #92]	; (800b3c4 <playSound+0x70>)
 800b368:	2200      	movs	r2, #0
 800b36a:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800b36c:	f7ff fe66 	bl	800b03c <set_pwm_off>
	HAL_Delay(10);
 800b370:	200a      	movs	r0, #10
 800b372:	f7f5 fe65 	bl	8001040 <HAL_Delay>

	for (uint16_t i=0; i<cycles; i++){
 800b376:	2300      	movs	r3, #0
 800b378:	81fb      	strh	r3, [r7, #14]
 800b37a:	e016      	b.n	800b3aa <playSound+0x56>
		TIM1->CCR1 = 0; //takes<150ns
 800b37c:	4b12      	ldr	r3, [pc, #72]	; (800b3c8 <playSound+0x74>)
 800b37e:	2200      	movs	r2, #0
 800b380:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = volume; //takes<150ns
 800b382:	4a11      	ldr	r2, [pc, #68]	; (800b3c8 <playSound+0x74>)
 800b384:	88bb      	ldrh	r3, [r7, #4]
 800b386:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_Delay(periode);
 800b388:	88fb      	ldrh	r3, [r7, #6]
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7f5 fe58 	bl	8001040 <HAL_Delay>
		TIM1->CCR1 = volume; //takes<150ns
 800b390:	4a0d      	ldr	r2, [pc, #52]	; (800b3c8 <playSound+0x74>)
 800b392:	88bb      	ldrh	r3, [r7, #4]
 800b394:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = 0; //takes<150ns
 800b396:	4b0c      	ldr	r3, [pc, #48]	; (800b3c8 <playSound+0x74>)
 800b398:	2200      	movs	r2, #0
 800b39a:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(periode);
 800b39c:	88fb      	ldrh	r3, [r7, #6]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7f5 fe4e 	bl	8001040 <HAL_Delay>
	for (uint16_t i=0; i<cycles; i++){
 800b3a4:	89fb      	ldrh	r3, [r7, #14]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	81fb      	strh	r3, [r7, #14]
 800b3aa:	89fa      	ldrh	r2, [r7, #14]
 800b3ac:	887b      	ldrh	r3, [r7, #2]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d3e4      	bcc.n	800b37c <playSound+0x28>
	}
	set_pwm_off();
 800b3b2:	f7ff fe43 	bl	800b03c <set_pwm_off>
	normal_operation_enabled = true;
 800b3b6:	4b03      	ldr	r3, [pc, #12]	; (800b3c4 <playSound+0x70>)
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	701a      	strb	r2, [r3, #0]



	//HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
}
 800b3bc:	bf00      	nop
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	20000041 	.word	0x20000041
 800b3c8:	40010000 	.word	0x40010000
 800b3cc:	00000000 	.word	0x00000000

0800b3d0 <calc_lookup>:

void calc_lookup(float *lookup){
 800b3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
	// TODO plug in a higher order harmonic and see if system gets more energy efficient or more silent
	for (int i=0; i<210; i++){
 800b3d8:	2300      	movs	r3, #0
 800b3da:	60fb      	str	r3, [r7, #12]
 800b3dc:	e051      	b.n	800b482 <calc_lookup+0xb2>
	    lookup[i] = cos((float)i/100.0) + cos((float)i/100.0-1.047);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	ee07 3a90 	vmov	s15, r3
 800b3e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3e8:	ee17 0a90 	vmov	r0, s15
 800b3ec:	f7f5 f8ac 	bl	8000548 <__aeabi_f2d>
 800b3f0:	f04f 0200 	mov.w	r2, #0
 800b3f4:	4b28      	ldr	r3, [pc, #160]	; (800b498 <calc_lookup+0xc8>)
 800b3f6:	f7f5 fa29 	bl	800084c <__aeabi_ddiv>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	ec44 3b17 	vmov	d7, r3, r4
 800b402:	eeb0 0a47 	vmov.f32	s0, s14
 800b406:	eef0 0a67 	vmov.f32	s1, s15
 800b40a:	f002 fadd 	bl	800d9c8 <cos>
 800b40e:	ec56 5b10 	vmov	r5, r6, d0
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	ee07 3a90 	vmov	s15, r3
 800b418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b41c:	ee17 0a90 	vmov	r0, s15
 800b420:	f7f5 f892 	bl	8000548 <__aeabi_f2d>
 800b424:	f04f 0200 	mov.w	r2, #0
 800b428:	4b1b      	ldr	r3, [pc, #108]	; (800b498 <calc_lookup+0xc8>)
 800b42a:	f7f5 fa0f 	bl	800084c <__aeabi_ddiv>
 800b42e:	4603      	mov	r3, r0
 800b430:	460c      	mov	r4, r1
 800b432:	4618      	mov	r0, r3
 800b434:	4621      	mov	r1, r4
 800b436:	a316      	add	r3, pc, #88	; (adr r3, 800b490 <calc_lookup+0xc0>)
 800b438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43c:	f7f4 ff24 	bl	8000288 <__aeabi_dsub>
 800b440:	4603      	mov	r3, r0
 800b442:	460c      	mov	r4, r1
 800b444:	ec44 3b17 	vmov	d7, r3, r4
 800b448:	eeb0 0a47 	vmov.f32	s0, s14
 800b44c:	eef0 0a67 	vmov.f32	s1, s15
 800b450:	f002 faba 	bl	800d9c8 <cos>
 800b454:	ec54 3b10 	vmov	r3, r4, d0
 800b458:	461a      	mov	r2, r3
 800b45a:	4623      	mov	r3, r4
 800b45c:	4628      	mov	r0, r5
 800b45e:	4631      	mov	r1, r6
 800b460:	f7f4 ff14 	bl	800028c <__adddf3>
 800b464:	4603      	mov	r3, r0
 800b466:	460c      	mov	r4, r1
 800b468:	4618      	mov	r0, r3
 800b46a:	4621      	mov	r1, r4
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	18d4      	adds	r4, r2, r3
 800b474:	f7f5 fba2 	bl	8000bbc <__aeabi_d2f>
 800b478:	4603      	mov	r3, r0
 800b47a:	6023      	str	r3, [r4, #0]
	for (int i=0; i<210; i++){
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	3301      	adds	r3, #1
 800b480:	60fb      	str	r3, [r7, #12]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2bd1      	cmp	r3, #209	; 0xd1
 800b486:	ddaa      	ble.n	800b3de <calc_lookup+0xe>
	}
}
 800b488:	bf00      	nop
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b490:	126e978d 	.word	0x126e978d
 800b494:	3ff0c083 	.word	0x3ff0c083
 800b498:	40590000 	.word	0x40590000

0800b49c <DMAUSARTTransferComplete>:

void DMAUSARTTransferComplete(DMA_HandleTypeDef *hdma){
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
	huart3.Instance->CR3 &= ~USART_CR3_DMAT;
 800b4a4:	4b06      	ldr	r3, [pc, #24]	; (800b4c0 <DMAUSARTTransferComplete+0x24>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	695a      	ldr	r2, [r3, #20]
 800b4aa:	4b05      	ldr	r3, [pc, #20]	; (800b4c0 <DMAUSARTTransferComplete+0x24>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4b2:	615a      	str	r2, [r3, #20]
}
 800b4b4:	bf00      	nop
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	200005ac 	.word	0x200005ac

0800b4c4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
	debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin;
 800b4cc:	4b04      	ldr	r3, [pc, #16]	; (800b4e0 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800b4ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b4d2:	619a      	str	r2, [r3, #24]
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	40020c00 	.word	0x40020c00

0800b4e4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
	debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin << 16U;
 800b4ec:	4b04      	ldr	r3, [pc, #16]	; (800b500 <HAL_ADC_ConvCpltCallback+0x1c>)
 800b4ee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b4f2:	619a      	str	r2, [r3, #24]
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr
 800b500:	40020c00 	.word	0x40020c00
 800b504:	00000000 	.word	0x00000000

0800b508 <HAL_TIM_PeriodElapsedCallback>:
//	}
//}


// --- 1ms heartbeat of the microcontroller
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim3){
 800b508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b50c:	b08c      	sub	sp, #48	; 0x30
 800b50e:	af06      	add	r7, sp, #24
 800b510:	6078      	str	r0, [r7, #4]

	// shift tx here to offload the can interrupt

	if (TIM5->CNT - time_of_last_pwm_update  > 95){ //100 time time_step = heartbeat
 800b512:	4b89      	ldr	r3, [pc, #548]	; (800b738 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800b514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b516:	4a89      	ldr	r2, [pc, #548]	; (800b73c <HAL_TIM_PeriodElapsedCallback+0x234>)
 800b518:	6812      	ldr	r2, [r2, #0]
 800b51a:	1a9b      	subs	r3, r3, r2
 800b51c:	2b5f      	cmp	r3, #95	; 0x5f
 800b51e:	d905      	bls.n	800b52c <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 800b520:	2108      	movs	r1, #8
 800b522:	4887      	ldr	r0, [pc, #540]	; (800b740 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800b524:	f7f8 faef 	bl	8003b06 <HAL_GPIO_TogglePin>
		update_pwm();
 800b528:	f000 fb5a 	bl	800bbe0 <update_pwm>
	}



	if (mode_of_control == 1){
 800b52c:	4b85      	ldr	r3, [pc, #532]	; (800b744 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	2b01      	cmp	r3, #1
 800b532:	f040 80f4 	bne.w	800b71e <HAL_TIM_PeriodElapsedCallback+0x216>
		float t = (float)((TIM5->CNT - last_tim5_cnt) / 100) / 1000.0;
 800b536:	4b80      	ldr	r3, [pc, #512]	; (800b738 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800b538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b53a:	4b83      	ldr	r3, [pc, #524]	; (800b748 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	4a82      	ldr	r2, [pc, #520]	; (800b74c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800b542:	fba2 2303 	umull	r2, r3, r2, r3
 800b546:	095b      	lsrs	r3, r3, #5
 800b548:	ee07 3a90 	vmov	s15, r3
 800b54c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b550:	eddf 6a7f 	vldr	s13, [pc, #508]	; 800b750 <HAL_TIM_PeriodElapsedCallback+0x248>
 800b554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b558:	edc7 7a04 	vstr	s15, [r7, #16]

		int32_t desired_EncVal = pos_offset + pos_amp * sin(6.28f * pos_freq * t);
 800b55c:	4b7d      	ldr	r3, [pc, #500]	; (800b754 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4618      	mov	r0, r3
 800b562:	f7f4 ffdf 	bl	8000524 <__aeabi_i2d>
 800b566:	4604      	mov	r4, r0
 800b568:	460d      	mov	r5, r1
 800b56a:	4b7b      	ldr	r3, [pc, #492]	; (800b758 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4618      	mov	r0, r3
 800b570:	f7f4 ffea 	bl	8000548 <__aeabi_f2d>
 800b574:	4680      	mov	r8, r0
 800b576:	4689      	mov	r9, r1
 800b578:	4b78      	ldr	r3, [pc, #480]	; (800b75c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800b57a:	edd3 7a00 	vldr	s15, [r3]
 800b57e:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800b760 <HAL_TIM_PeriodElapsedCallback+0x258>
 800b582:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b586:	edd7 7a04 	vldr	s15, [r7, #16]
 800b58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b58e:	ee17 0a90 	vmov	r0, s15
 800b592:	f7f4 ffd9 	bl	8000548 <__aeabi_f2d>
 800b596:	4602      	mov	r2, r0
 800b598:	460b      	mov	r3, r1
 800b59a:	ec43 2b10 	vmov	d0, r2, r3
 800b59e:	f002 fa57 	bl	800da50 <sin>
 800b5a2:	ec53 2b10 	vmov	r2, r3, d0
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	4649      	mov	r1, r9
 800b5aa:	f7f5 f825 	bl	80005f8 <__aeabi_dmul>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	f7f4 fe69 	bl	800028c <__adddf3>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	460c      	mov	r4, r1
 800b5be:	4618      	mov	r0, r3
 800b5c0:	4621      	mov	r1, r4
 800b5c2:	f7f5 fab3 	bl	8000b2c <__aeabi_d2iz>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	60fb      	str	r3, [r7, #12]
//		else{
//			desired_EncVal = 0;
//		}


		int32_t Enc_Val_total = EncVal + rotation_counter * ENC_STEPS;
 800b5ca:	4b66      	ldr	r3, [pc, #408]	; (800b764 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800b5cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	4b65      	ldr	r3, [pc, #404]	; (800b768 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800b5d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b5de:	fb03 f301 	mul.w	r3, r3, r1
 800b5e2:	4413      	add	r3, r2
 800b5e4:	60bb      	str	r3, [r7, #8]
		float raw_amp = (float)(Enc_Val_total - desired_EncVal) * P_gain; //oscillates for P_gain > 0.005
 800b5e6:	68ba      	ldr	r2, [r7, #8]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	ee07 3a90 	vmov	s15, r3
 800b5f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b5f4:	4b5d      	ldr	r3, [pc, #372]	; (800b76c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800b5f6:	edd3 7a00 	vldr	s15, [r3]
 800b5fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5fe:	edc7 7a05 	vstr	s15, [r7, #20]
		if (raw_amp < 0.0){
 800b602:	edd7 7a05 	vldr	s15, [r7, #20]
 800b606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b60e:	d50a      	bpl.n	800b626 <HAL_TIM_PeriodElapsedCallback+0x11e>
			raw_amp = -raw_amp;
 800b610:	edd7 7a05 	vldr	s15, [r7, #20]
 800b614:	eef1 7a67 	vneg.f32	s15, s15
 800b618:	edc7 7a05 	vstr	s15, [r7, #20]
			direction = -1;
 800b61c:	4b54      	ldr	r3, [pc, #336]	; (800b770 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800b61e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b622:	601a      	str	r2, [r3, #0]
 800b624:	e002      	b.n	800b62c <HAL_TIM_PeriodElapsedCallback+0x124>
		}
		else{
			direction = 1;
 800b626:	4b52      	ldr	r3, [pc, #328]	; (800b770 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800b628:	2201      	movs	r2, #1
 800b62a:	601a      	str	r2, [r3, #0]
		}
		if (raw_amp > pos_amp_limit){
 800b62c:	4b51      	ldr	r3, [pc, #324]	; (800b774 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800b62e:	edd3 7a00 	vldr	s15, [r3]
 800b632:	ed97 7a05 	vldr	s14, [r7, #20]
 800b636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b63e:	dd02      	ble.n	800b646 <HAL_TIM_PeriodElapsedCallback+0x13e>
			raw_amp = pos_amp_limit;
 800b640:	4b4c      	ldr	r3, [pc, #304]	; (800b774 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	617b      	str	r3, [r7, #20]
		}
		amp = raw_amp;
 800b646:	4a4c      	ldr	r2, [pc, #304]	; (800b778 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	6013      	str	r3, [r2, #0]

		if (buf_msgs[0] == '\0'){
 800b64c:	4b4b      	ldr	r3, [pc, #300]	; (800b77c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d168      	bne.n	800b726 <HAL_TIM_PeriodElapsedCallback+0x21e>
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
					(int)((float)(Enc_Val_total - desired_EncVal) * 0.0005*1000),
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	1ad3      	subs	r3, r2, r3
 800b65a:	ee07 3a90 	vmov	s15, r3
 800b65e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b662:	ee17 0a90 	vmov	r0, s15
 800b666:	f7f4 ff6f 	bl	8000548 <__aeabi_f2d>
 800b66a:	a331      	add	r3, pc, #196	; (adr r3, 800b730 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b670:	f7f4 ffc2 	bl	80005f8 <__aeabi_dmul>
 800b674:	4603      	mov	r3, r0
 800b676:	460c      	mov	r4, r1
 800b678:	4618      	mov	r0, r3
 800b67a:	4621      	mov	r1, r4
 800b67c:	f04f 0200 	mov.w	r2, #0
 800b680:	4b3f      	ldr	r3, [pc, #252]	; (800b780 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800b682:	f7f4 ffb9 	bl	80005f8 <__aeabi_dmul>
 800b686:	4603      	mov	r3, r0
 800b688:	460c      	mov	r4, r1
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b68a:	4618      	mov	r0, r3
 800b68c:	4621      	mov	r1, r4
 800b68e:	f7f5 fa4d 	bl	8000b2c <__aeabi_d2iz>
 800b692:	4605      	mov	r5, r0
					(int)(raw_amp*1000),
 800b694:	edd7 7a05 	vldr	s15, [r7, #20]
 800b698:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800b750 <HAL_TIM_PeriodElapsedCallback+0x248>
 800b69c:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b6a0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800b6a4:	4b2c      	ldr	r3, [pc, #176]	; (800b758 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800b6a6:	edd3 7a00 	vldr	s15, [r3]
 800b6aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6ae:	ee17 1a90 	vmov	r1, s15
					(int)Enc_Val_total,
					(int)(pos_amp),
					(int)(pos_freq*1000),
 800b6b2:	4b2a      	ldr	r3, [pc, #168]	; (800b75c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800b6b4:	edd3 7a00 	vldr	s15, [r3]
 800b6b8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800b750 <HAL_TIM_PeriodElapsedCallback+0x248>
 800b6bc:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b6c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6c4:	ee17 0a90 	vmov	r0, s15
					(int)(pos_amp_limit * 1000),
 800b6c8:	4b2a      	ldr	r3, [pc, #168]	; (800b774 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800b6ca:	edd3 7a00 	vldr	s15, [r3]
 800b6ce:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800b750 <HAL_TIM_PeriodElapsedCallback+0x248>
 800b6d2:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b6d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6da:	ee17 4a90 	vmov	r4, s15
 800b6de:	4b1d      	ldr	r3, [pc, #116]	; (800b754 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
					(int)(pos_offset),
					(int)(P_gain*1000000));
 800b6e2:	4a22      	ldr	r2, [pc, #136]	; (800b76c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800b6e4:	edd2 7a00 	vldr	s15, [r2]
 800b6e8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800b784 <HAL_TIM_PeriodElapsedCallback+0x27c>
 800b6ec:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b6f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6f4:	ee17 2a90 	vmov	r2, s15
 800b6f8:	9205      	str	r2, [sp, #20]
 800b6fa:	9304      	str	r3, [sp, #16]
 800b6fc:	9403      	str	r4, [sp, #12]
 800b6fe:	9002      	str	r0, [sp, #8]
 800b700:	9101      	str	r1, [sp, #4]
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	ee16 3a90 	vmov	r3, s13
 800b70a:	462a      	mov	r2, r5
 800b70c:	491e      	ldr	r1, [pc, #120]	; (800b788 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800b70e:	481f      	ldr	r0, [pc, #124]	; (800b78c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800b710:	f001 fd42 	bl	800d198 <siprintf>
			strcat(buf_msgs, buf_msg);
 800b714:	491d      	ldr	r1, [pc, #116]	; (800b78c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800b716:	4819      	ldr	r0, [pc, #100]	; (800b77c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800b718:	f001 fd5e 	bl	800d1d8 <strcat>
	}




}
 800b71c:	e003      	b.n	800b726 <HAL_TIM_PeriodElapsedCallback+0x21e>
		last_tim5_cnt = TIM5->CNT;
 800b71e:	4b06      	ldr	r3, [pc, #24]	; (800b738 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800b720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b722:	4a09      	ldr	r2, [pc, #36]	; (800b748 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800b724:	6013      	str	r3, [r2, #0]
}
 800b726:	bf00      	nop
 800b728:	3718      	adds	r7, #24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b730:	d2f1a9fc 	.word	0xd2f1a9fc
 800b734:	3f40624d 	.word	0x3f40624d
 800b738:	40000c00 	.word	0x40000c00
 800b73c:	20000118 	.word	0x20000118
 800b740:	40021000 	.word	0x40021000
 800b744:	20000112 	.word	0x20000112
 800b748:	20000114 	.word	0x20000114
 800b74c:	51eb851f 	.word	0x51eb851f
 800b750:	447a0000 	.word	0x447a0000
 800b754:	200000d4 	.word	0x200000d4
 800b758:	20000028 	.word	0x20000028
 800b75c:	2000002c 	.word	0x2000002c
 800b760:	40c8f5c3 	.word	0x40c8f5c3
 800b764:	20000d3c 	.word	0x20000d3c
 800b768:	200000d8 	.word	0x200000d8
 800b76c:	20000034 	.word	0x20000034
 800b770:	20000020 	.word	0x20000020
 800b774:	20000030 	.word	0x20000030
 800b778:	20000018 	.word	0x20000018
 800b77c:	20000eec 	.word	0x20000eec
 800b780:	408f4000 	.word	0x408f4000
 800b784:	49742400 	.word	0x49742400
 800b788:	0800ebd0 	.word	0x0800ebd0
 800b78c:	200010c8 	.word	0x200010c8

0800b790 <HAL_GPIO_EXTI_Callback>:

// --- Callback when Encoder fires the I at zero point
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800b790:	b590      	push	{r4, r7, lr}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
 800b796:	4603      	mov	r3, r0
 800b798:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT0_I_W_Pin){
 800b79a:	88fb      	ldrh	r3, [r7, #6]
 800b79c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7a0:	d14a      	bne.n	800b838 <HAL_GPIO_EXTI_Callback+0xa8>
		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
		uint16_t encoder_belief = TIM8->CNT;
 800b7a2:	4b28      	ldr	r3, [pc, #160]	; (800b844 <HAL_GPIO_EXTI_Callback+0xb4>)
 800b7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a6:	81fb      	strh	r3, [r7, #14]

		if (counter0ing_at0crossing){
 800b7a8:	4b27      	ldr	r3, [pc, #156]	; (800b848 <HAL_GPIO_EXTI_Callback+0xb8>)
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d01e      	beq.n	800b7ee <HAL_GPIO_EXTI_Callback+0x5e>
			TIM8->CNT = 0;     //TODO: this could lead to an offset of 1 since the CNT value may not be set yet and get incremented thereafter if this interrupt is executed before the CNT increment.
 800b7b0:	4b24      	ldr	r3, [pc, #144]	; (800b844 <HAL_GPIO_EXTI_Callback+0xb4>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	625a      	str	r2, [r3, #36]	; 0x24
			counter0ing_at0crossing = false;
 800b7b6:	4b24      	ldr	r3, [pc, #144]	; (800b848 <HAL_GPIO_EXTI_Callback+0xb8>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	701a      	strb	r2, [r3, #0]
			sprintf((char*)buf_msg, "[EXTI_Callback] EncVal at FIRST ZERO: %d \r\n", encoder_belief);
 800b7bc:	89fb      	ldrh	r3, [r7, #14]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	4922      	ldr	r1, [pc, #136]	; (800b84c <HAL_GPIO_EXTI_Callback+0xbc>)
 800b7c2:	4823      	ldr	r0, [pc, #140]	; (800b850 <HAL_GPIO_EXTI_Callback+0xc0>)
 800b7c4:	f001 fce8 	bl	800d198 <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800b7c8:	4821      	ldr	r0, [pc, #132]	; (800b850 <HAL_GPIO_EXTI_Callback+0xc0>)
 800b7ca:	f7f4 fd01 	bl	80001d0 <strlen>
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	4820      	ldr	r0, [pc, #128]	; (800b854 <HAL_GPIO_EXTI_Callback+0xc4>)
 800b7d2:	f7f4 fcfd 	bl	80001d0 <strlen>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	4423      	add	r3, r4
 800b7da:	2b63      	cmp	r3, #99	; 0x63
 800b7dc:	d804      	bhi.n	800b7e8 <HAL_GPIO_EXTI_Callback+0x58>
				strcat(buf_msgs, buf_msg);
 800b7de:	491c      	ldr	r1, [pc, #112]	; (800b850 <HAL_GPIO_EXTI_Callback+0xc0>)
 800b7e0:	481c      	ldr	r0, [pc, #112]	; (800b854 <HAL_GPIO_EXTI_Callback+0xc4>)
 800b7e2:	f001 fcf9 	bl	800d1d8 <strcat>
 800b7e6:	e002      	b.n	800b7ee <HAL_GPIO_EXTI_Callback+0x5e>
			}
			else {
				buf_msgs[0] = '#';
 800b7e8:	4b1a      	ldr	r3, [pc, #104]	; (800b854 <HAL_GPIO_EXTI_Callback+0xc4>)
 800b7ea:	2223      	movs	r2, #35	; 0x23
 800b7ec:	701a      	strb	r2, [r3, #0]
			}
		}
		val_SO1_buf_index = 0;
 800b7ee:	4b1a      	ldr	r3, [pc, #104]	; (800b858 <HAL_GPIO_EXTI_Callback+0xc8>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	801a      	strh	r2, [r3, #0]

		if (encoder_belief > ENC_TOLERANCE && encoder_belief < ENC_STEPS - ENC_TOLERANCE){
 800b7f4:	89fb      	ldrh	r3, [r7, #14]
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d91f      	bls.n	800b83a <HAL_GPIO_EXTI_Callback+0xaa>
 800b7fa:	89fb      	ldrh	r3, [r7, #14]
 800b7fc:	f240 72cd 	movw	r2, #1997	; 0x7cd
 800b800:	4293      	cmp	r3, r2
 800b802:	d81a      	bhi.n	800b83a <HAL_GPIO_EXTI_Callback+0xaa>
			sprintf((char*)buf_msg, "[EXTI_Callback] EncVal at ZERO MISMATCH: %d \r\n", encoder_belief);
 800b804:	89fb      	ldrh	r3, [r7, #14]
 800b806:	461a      	mov	r2, r3
 800b808:	4914      	ldr	r1, [pc, #80]	; (800b85c <HAL_GPIO_EXTI_Callback+0xcc>)
 800b80a:	4811      	ldr	r0, [pc, #68]	; (800b850 <HAL_GPIO_EXTI_Callback+0xc0>)
 800b80c:	f001 fcc4 	bl	800d198 <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800b810:	480f      	ldr	r0, [pc, #60]	; (800b850 <HAL_GPIO_EXTI_Callback+0xc0>)
 800b812:	f7f4 fcdd 	bl	80001d0 <strlen>
 800b816:	4604      	mov	r4, r0
 800b818:	480e      	ldr	r0, [pc, #56]	; (800b854 <HAL_GPIO_EXTI_Callback+0xc4>)
 800b81a:	f7f4 fcd9 	bl	80001d0 <strlen>
 800b81e:	4603      	mov	r3, r0
 800b820:	4423      	add	r3, r4
 800b822:	2b63      	cmp	r3, #99	; 0x63
 800b824:	d804      	bhi.n	800b830 <HAL_GPIO_EXTI_Callback+0xa0>
				strcat(buf_msgs, buf_msg);
 800b826:	490a      	ldr	r1, [pc, #40]	; (800b850 <HAL_GPIO_EXTI_Callback+0xc0>)
 800b828:	480a      	ldr	r0, [pc, #40]	; (800b854 <HAL_GPIO_EXTI_Callback+0xc4>)
 800b82a:	f001 fcd5 	bl	800d1d8 <strcat>
		}
	}
	else{
		__NOP();
	}
}
 800b82e:	e004      	b.n	800b83a <HAL_GPIO_EXTI_Callback+0xaa>
				buf_msgs[0] = '#';
 800b830:	4b08      	ldr	r3, [pc, #32]	; (800b854 <HAL_GPIO_EXTI_Callback+0xc4>)
 800b832:	2223      	movs	r2, #35	; 0x23
 800b834:	701a      	strb	r2, [r3, #0]
}
 800b836:	e000      	b.n	800b83a <HAL_GPIO_EXTI_Callback+0xaa>
		__NOP();
 800b838:	bf00      	nop
}
 800b83a:	bf00      	nop
 800b83c:	3714      	adds	r7, #20
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd90      	pop	{r4, r7, pc}
 800b842:	bf00      	nop
 800b844:	40010400 	.word	0x40010400
 800b848:	20000038 	.word	0x20000038
 800b84c:	0800ec18 	.word	0x0800ec18
 800b850:	200010c8 	.word	0x200010c8
 800b854:	20000eec 	.word	0x20000eec
 800b858:	20000100 	.word	0x20000100
 800b85c:	0800ec44 	.word	0x0800ec44

0800b860 <HAL_TIM_IC_CaptureCallback>:




//this is it
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800b860:	b5b0      	push	{r4, r5, r7, lr}
 800b862:	b086      	sub	sp, #24
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
	// see https://community.st.com/s/question/0D50X00009XkWUpSAN/encoder-mode-and-rotary-encoder

	//debug2_out_GPIO_Port->BSRR = debug2_out_Pin; //takes 60ns == 5 clock cycles
	//debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin << 16U;
	//HAL_GPIO_TogglePin(debug2_out_GPIO_Port, debug2_out_Pin);
	if(htim->Instance == TIM8){
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a92      	ldr	r2, [pc, #584]	; (800bab8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	f040 8198 	bne.w	800bba4 <HAL_TIM_IC_CaptureCallback+0x344>

		if (skip_update){ //TODO somehow the Callback is triggered at this strange 25% duty cycle so we just look at every second update to get a constant frequency
 800b874:	4b91      	ldr	r3, [pc, #580]	; (800babc <HAL_TIM_IC_CaptureCallback+0x25c>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d003      	beq.n	800b884 <HAL_TIM_IC_CaptureCallback+0x24>
			skip_update = 0;
 800b87c:	4b8f      	ldr	r3, [pc, #572]	; (800babc <HAL_TIM_IC_CaptureCallback+0x25c>)
 800b87e:	2200      	movs	r2, #0
 800b880:	601a      	str	r2, [r3, #0]
	}


	//counterISR++;

}
 800b882:	e18f      	b.n	800bba4 <HAL_TIM_IC_CaptureCallback+0x344>
			skip_update = 1;
 800b884:	4b8d      	ldr	r3, [pc, #564]	; (800babc <HAL_TIM_IC_CaptureCallback+0x25c>)
 800b886:	2201      	movs	r2, #1
 800b888:	601a      	str	r2, [r3, #0]
			debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 800b88a:	4b8d      	ldr	r3, [pc, #564]	; (800bac0 <HAL_TIM_IC_CaptureCallback+0x260>)
 800b88c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b890:	619a      	str	r2, [r3, #24]
			debug1_out_GPIO_Port->BSRR = debug1_out_Pin << 16U; //takes 60ns == 5 clock cycles
 800b892:	4b8b      	ldr	r3, [pc, #556]	; (800bac0 <HAL_TIM_IC_CaptureCallback+0x260>)
 800b894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b898:	619a      	str	r2, [r3, #24]
			last_EncVal = EncVal;
 800b89a:	4b8a      	ldr	r3, [pc, #552]	; (800bac4 <HAL_TIM_IC_CaptureCallback+0x264>)
 800b89c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b8a0:	4b89      	ldr	r3, [pc, #548]	; (800bac8 <HAL_TIM_IC_CaptureCallback+0x268>)
 800b8a2:	801a      	strh	r2, [r3, #0]
			EncVal = TIM8->CNT;//takes 200ns
 800b8a4:	4b84      	ldr	r3, [pc, #528]	; (800bab8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800b8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a8:	b21a      	sxth	r2, r3
 800b8aa:	4b86      	ldr	r3, [pc, #536]	; (800bac4 <HAL_TIM_IC_CaptureCallback+0x264>)
 800b8ac:	801a      	strh	r2, [r3, #0]
			if (EncVal - last_EncVal > ENC_STEPS_HALF){
 800b8ae:	4b85      	ldr	r3, [pc, #532]	; (800bac4 <HAL_TIM_IC_CaptureCallback+0x264>)
 800b8b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	4b84      	ldr	r3, [pc, #528]	; (800bac8 <HAL_TIM_IC_CaptureCallback+0x268>)
 800b8b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8bc:	1ad3      	subs	r3, r2, r3
 800b8be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b8c2:	dd09      	ble.n	800b8d8 <HAL_TIM_IC_CaptureCallback+0x78>
				rotation_counter--;
 800b8c4:	4b81      	ldr	r3, [pc, #516]	; (800bacc <HAL_TIM_IC_CaptureCallback+0x26c>)
 800b8c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	b21a      	sxth	r2, r3
 800b8d2:	4b7e      	ldr	r3, [pc, #504]	; (800bacc <HAL_TIM_IC_CaptureCallback+0x26c>)
 800b8d4:	801a      	strh	r2, [r3, #0]
 800b8d6:	e013      	b.n	800b900 <HAL_TIM_IC_CaptureCallback+0xa0>
			else if (last_EncVal - EncVal > ENC_STEPS_HALF){
 800b8d8:	4b7b      	ldr	r3, [pc, #492]	; (800bac8 <HAL_TIM_IC_CaptureCallback+0x268>)
 800b8da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	4b78      	ldr	r3, [pc, #480]	; (800bac4 <HAL_TIM_IC_CaptureCallback+0x264>)
 800b8e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8e6:	1ad3      	subs	r3, r2, r3
 800b8e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b8ec:	dd08      	ble.n	800b900 <HAL_TIM_IC_CaptureCallback+0xa0>
				rotation_counter++;
 800b8ee:	4b77      	ldr	r3, [pc, #476]	; (800bacc <HAL_TIM_IC_CaptureCallback+0x26c>)
 800b8f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	b21a      	sxth	r2, r3
 800b8fc:	4b73      	ldr	r3, [pc, #460]	; (800bacc <HAL_TIM_IC_CaptureCallback+0x26c>)
 800b8fe:	801a      	strh	r2, [r3, #0]
			if (val_SO1_buf_index < 72){
 800b900:	4b73      	ldr	r3, [pc, #460]	; (800bad0 <HAL_TIM_IC_CaptureCallback+0x270>)
 800b902:	881b      	ldrh	r3, [r3, #0]
 800b904:	2b47      	cmp	r3, #71	; 0x47
 800b906:	d810      	bhi.n	800b92a <HAL_TIM_IC_CaptureCallback+0xca>
				val_SO1_buf[val_SO1_buf_index] = HAL_ADCEx_InjectedGetValue (&hadc2, 1);
 800b908:	4b71      	ldr	r3, [pc, #452]	; (800bad0 <HAL_TIM_IC_CaptureCallback+0x270>)
 800b90a:	881b      	ldrh	r3, [r3, #0]
 800b90c:	461c      	mov	r4, r3
 800b90e:	2101      	movs	r1, #1
 800b910:	4870      	ldr	r0, [pc, #448]	; (800bad4 <HAL_TIM_IC_CaptureCallback+0x274>)
 800b912:	f7f6 fa13 	bl	8001d3c <HAL_ADCEx_InjectedGetValue>
 800b916:	4602      	mov	r2, r0
 800b918:	4b6f      	ldr	r3, [pc, #444]	; (800bad8 <HAL_TIM_IC_CaptureCallback+0x278>)
 800b91a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				val_SO1_buf_index++;
 800b91e:	4b6c      	ldr	r3, [pc, #432]	; (800bad0 <HAL_TIM_IC_CaptureCallback+0x270>)
 800b920:	881b      	ldrh	r3, [r3, #0]
 800b922:	3301      	adds	r3, #1
 800b924:	b29a      	uxth	r2, r3
 800b926:	4b6a      	ldr	r3, [pc, #424]	; (800bad0 <HAL_TIM_IC_CaptureCallback+0x270>)
 800b928:	801a      	strh	r2, [r3, #0]
			if (val_SO1_buf_index == 72){  // some hints that this takes 10mus
 800b92a:	4b69      	ldr	r3, [pc, #420]	; (800bad0 <HAL_TIM_IC_CaptureCallback+0x270>)
 800b92c:	881b      	ldrh	r3, [r3, #0]
 800b92e:	2b48      	cmp	r3, #72	; 0x48
 800b930:	f040 8081 	bne.w	800ba36 <HAL_TIM_IC_CaptureCallback+0x1d6>
				int32_t cos_part = 0;
 800b934:	2300      	movs	r3, #0
 800b936:	617b      	str	r3, [r7, #20]
				int32_t sin_part = 0;
 800b938:	2300      	movs	r3, #0
 800b93a:	613b      	str	r3, [r7, #16]
				for (int i=0; i< 72; i++){
 800b93c:	2300      	movs	r3, #0
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	e046      	b.n	800b9d0 <HAL_TIM_IC_CaptureCallback+0x170>
				    if (i<18){
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2b11      	cmp	r3, #17
 800b946:	dc0e      	bgt.n	800b966 <HAL_TIM_IC_CaptureCallback+0x106>
				      cos_part += val_SO1_buf[i];
 800b948:	4a63      	ldr	r2, [pc, #396]	; (800bad8 <HAL_TIM_IC_CaptureCallback+0x278>)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	4413      	add	r3, r2
 800b954:	617b      	str	r3, [r7, #20]
				      sin_part += val_SO1_buf[i];}
 800b956:	4a60      	ldr	r2, [pc, #384]	; (800bad8 <HAL_TIM_IC_CaptureCallback+0x278>)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	4413      	add	r3, r2
 800b962:	613b      	str	r3, [r7, #16]
 800b964:	e031      	b.n	800b9ca <HAL_TIM_IC_CaptureCallback+0x16a>
				    else if (i<36){
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2b23      	cmp	r3, #35	; 0x23
 800b96a:	dc0e      	bgt.n	800b98a <HAL_TIM_IC_CaptureCallback+0x12a>
				      cos_part -= val_SO1_buf[i];
 800b96c:	697a      	ldr	r2, [r7, #20]
 800b96e:	495a      	ldr	r1, [pc, #360]	; (800bad8 <HAL_TIM_IC_CaptureCallback+0x278>)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	617b      	str	r3, [r7, #20]
				      sin_part += val_SO1_buf[i];}
 800b97a:	4a57      	ldr	r2, [pc, #348]	; (800bad8 <HAL_TIM_IC_CaptureCallback+0x278>)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	4413      	add	r3, r2
 800b986:	613b      	str	r3, [r7, #16]
 800b988:	e01f      	b.n	800b9ca <HAL_TIM_IC_CaptureCallback+0x16a>
				    else if (i<54){
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2b35      	cmp	r3, #53	; 0x35
 800b98e:	dc0e      	bgt.n	800b9ae <HAL_TIM_IC_CaptureCallback+0x14e>
				      cos_part -= val_SO1_buf[i];
 800b990:	697a      	ldr	r2, [r7, #20]
 800b992:	4951      	ldr	r1, [pc, #324]	; (800bad8 <HAL_TIM_IC_CaptureCallback+0x278>)
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b99a:	1ad3      	subs	r3, r2, r3
 800b99c:	617b      	str	r3, [r7, #20]
				      sin_part -= val_SO1_buf[i];}
 800b99e:	693a      	ldr	r2, [r7, #16]
 800b9a0:	494d      	ldr	r1, [pc, #308]	; (800bad8 <HAL_TIM_IC_CaptureCallback+0x278>)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	613b      	str	r3, [r7, #16]
 800b9ac:	e00d      	b.n	800b9ca <HAL_TIM_IC_CaptureCallback+0x16a>
				      cos_part += val_SO1_buf[i];
 800b9ae:	4a4a      	ldr	r2, [pc, #296]	; (800bad8 <HAL_TIM_IC_CaptureCallback+0x278>)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	617b      	str	r3, [r7, #20]
				      sin_part -= val_SO1_buf[i];}
 800b9bc:	693a      	ldr	r2, [r7, #16]
 800b9be:	4946      	ldr	r1, [pc, #280]	; (800bad8 <HAL_TIM_IC_CaptureCallback+0x278>)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b9c6:	1ad3      	subs	r3, r2, r3
 800b9c8:	613b      	str	r3, [r7, #16]
				for (int i=0; i< 72; i++){
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	60fb      	str	r3, [r7, #12]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2b47      	cmp	r3, #71	; 0x47
 800b9d4:	ddb5      	ble.n	800b942 <HAL_TIM_IC_CaptureCallback+0xe2>
				field_amplitude = cos_part*cos_part + sin_part*sin_part;
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	697a      	ldr	r2, [r7, #20]
 800b9da:	fb02 f203 	mul.w	r2, r2, r3
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	6939      	ldr	r1, [r7, #16]
 800b9e2:	fb01 f303 	mul.w	r3, r1, r3
 800b9e6:	4413      	add	r3, r2
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	4b3c      	ldr	r3, [pc, #240]	; (800badc <HAL_TIM_IC_CaptureCallback+0x27c>)
 800b9ec:	601a      	str	r2, [r3, #0]
				field_phase_shift = (float) cos_part / (float) sin_part;
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	ee07 3a90 	vmov	s15, r3
 800b9f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	ee07 3a90 	vmov	s15, r3
 800b9fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba06:	4b36      	ldr	r3, [pc, #216]	; (800bae0 <HAL_TIM_IC_CaptureCallback+0x280>)
 800ba08:	edc3 7a00 	vstr	s15, [r3]
				field_phase_shift_pihalf = (float) sin_part / (float) cos_part;
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	ee07 3a90 	vmov	s15, r3
 800ba12:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	ee07 3a90 	vmov	s15, r3
 800ba1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba24:	4b2f      	ldr	r3, [pc, #188]	; (800bae4 <HAL_TIM_IC_CaptureCallback+0x284>)
 800ba26:	edc3 7a00 	vstr	s15, [r3]
				val_SO1_buf_index++;
 800ba2a:	4b29      	ldr	r3, [pc, #164]	; (800bad0 <HAL_TIM_IC_CaptureCallback+0x270>)
 800ba2c:	881b      	ldrh	r3, [r3, #0]
 800ba2e:	3301      	adds	r3, #1
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	4b27      	ldr	r3, [pc, #156]	; (800bad0 <HAL_TIM_IC_CaptureCallback+0x270>)
 800ba34:	801a      	strh	r2, [r3, #0]
			if (abs(av_velocity) > 5 &&  skip_update_high_v == 1){
 800ba36:	4b2c      	ldr	r3, [pc, #176]	; (800bae8 <HAL_TIM_IC_CaptureCallback+0x288>)
 800ba38:	edd3 7a00 	vldr	s15, [r3]
 800ba3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba40:	ee17 3a90 	vmov	r3, s15
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	bfb8      	it	lt
 800ba48:	425b      	neglt	r3, r3
 800ba4a:	2b05      	cmp	r3, #5
 800ba4c:	dd07      	ble.n	800ba5e <HAL_TIM_IC_CaptureCallback+0x1fe>
 800ba4e:	4b27      	ldr	r3, [pc, #156]	; (800baec <HAL_TIM_IC_CaptureCallback+0x28c>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d103      	bne.n	800ba5e <HAL_TIM_IC_CaptureCallback+0x1fe>
				skip_update_high_v = 0;
 800ba56:	4b25      	ldr	r3, [pc, #148]	; (800baec <HAL_TIM_IC_CaptureCallback+0x28c>)
 800ba58:	2200      	movs	r2, #0
 800ba5a:	601a      	str	r2, [r3, #0]
}
 800ba5c:	e0a2      	b.n	800bba4 <HAL_TIM_IC_CaptureCallback+0x344>
				debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 800ba5e:	4b18      	ldr	r3, [pc, #96]	; (800bac0 <HAL_TIM_IC_CaptureCallback+0x260>)
 800ba60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ba64:	619a      	str	r2, [r3, #24]
				GPIOC->BSRR = GPIO_PIN_13; // DEBUG
 800ba66:	4b22      	ldr	r3, [pc, #136]	; (800baf0 <HAL_TIM_IC_CaptureCallback+0x290>)
 800ba68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ba6c:	619a      	str	r2, [r3, #24]
				skip_update_high_v = 1;
 800ba6e:	4b1f      	ldr	r3, [pc, #124]	; (800baec <HAL_TIM_IC_CaptureCallback+0x28c>)
 800ba70:	2201      	movs	r2, #1
 800ba72:	601a      	str	r2, [r3, #0]
				tim12_counter = TIM2->CNT;
 800ba74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7a:	4a1e      	ldr	r2, [pc, #120]	; (800baf4 <HAL_TIM_IC_CaptureCallback+0x294>)
 800ba7c:	6013      	str	r3, [r2, #0]
				if (tim12_counter > ENC_STEPS){ // TODO fix the issue that this gets almost never called when velocity is super low.
 800ba7e:	4b1d      	ldr	r3, [pc, #116]	; (800baf4 <HAL_TIM_IC_CaptureCallback+0x294>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ba86:	f240 8087 	bls.w	800bb98 <HAL_TIM_IC_CaptureCallback+0x338>
					TIM2->CNT = 0;
 800ba8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba8e:	2200      	movs	r2, #0
 800ba90:	625a      	str	r2, [r3, #36]	; 0x24
					int EncDiff = EncVal-last_EncVal_v;
 800ba92:	4b0c      	ldr	r3, [pc, #48]	; (800bac4 <HAL_TIM_IC_CaptureCallback+0x264>)
 800ba94:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	4b17      	ldr	r3, [pc, #92]	; (800baf8 <HAL_TIM_IC_CaptureCallback+0x298>)
 800ba9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	60bb      	str	r3, [r7, #8]
					if (EncDiff > ENC_STEPS_HALF){ // if jump is more than a half rotation it's most likely the 0 crossing
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800baaa:	dd27      	ble.n	800bafc <HAL_TIM_IC_CaptureCallback+0x29c>
						EncDiff -= ENC_STEPS;
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800bab2:	60bb      	str	r3, [r7, #8]
 800bab4:	e02a      	b.n	800bb0c <HAL_TIM_IC_CaptureCallback+0x2ac>
 800bab6:	bf00      	nop
 800bab8:	40010400 	.word	0x40010400
 800babc:	200000f8 	.word	0x200000f8
 800bac0:	40020c00 	.word	0x40020c00
 800bac4:	20000d3c 	.word	0x20000d3c
 800bac8:	20000ae4 	.word	0x20000ae4
 800bacc:	200000d8 	.word	0x200000d8
 800bad0:	20000100 	.word	0x20000100
 800bad4:	200005ec 	.word	0x200005ec
 800bad8:	200010fc 	.word	0x200010fc
 800badc:	2000010c 	.word	0x2000010c
 800bae0:	20000104 	.word	0x20000104
 800bae4:	20000108 	.word	0x20000108
 800bae8:	200000e8 	.word	0x200000e8
 800baec:	200000fc 	.word	0x200000fc
 800baf0:	40020800 	.word	0x40020800
 800baf4:	2000003c 	.word	0x2000003c
 800baf8:	20000be8 	.word	0x20000be8
					else if (EncDiff < -1000){
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800bb02:	da03      	bge.n	800bb0c <HAL_TIM_IC_CaptureCallback+0x2ac>
						EncDiff += ENC_STEPS;
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800bb0a:	60bb      	str	r3, [r7, #8]
					velocity = (float)(EncDiff) / (float)tim12_counter; //[steps/counts]
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	ee07 3a90 	vmov	s15, r3
 800bb12:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bb16:	4b2a      	ldr	r3, [pc, #168]	; (800bbc0 <HAL_TIM_IC_CaptureCallback+0x360>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	ee07 3a90 	vmov	s15, r3
 800bb1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bb22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb26:	4b27      	ldr	r3, [pc, #156]	; (800bbc4 <HAL_TIM_IC_CaptureCallback+0x364>)
 800bb28:	edc3 7a00 	vstr	s15, [r3]
					velocity *= 21000000/ENC_STEPS; // /ENC_STEPS steps/round * 21000000 counts/sec --> [round/sec]  //TODO velocity seems too high by factor of 2 or 3 maybe same clock frequency issue that we actually run at 42 MHz. !!! TODO check clock frequency  // TODO divided by 10 as well
 800bb2c:	4b25      	ldr	r3, [pc, #148]	; (800bbc4 <HAL_TIM_IC_CaptureCallback+0x364>)
 800bb2e:	edd3 7a00 	vldr	s15, [r3]
 800bb32:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800bbc8 <HAL_TIM_IC_CaptureCallback+0x368>
 800bb36:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb3a:	4b22      	ldr	r3, [pc, #136]	; (800bbc4 <HAL_TIM_IC_CaptureCallback+0x364>)
 800bb3c:	edc3 7a00 	vstr	s15, [r3]
					av_velocity = 0.95 * av_velocity + 0.05 * velocity;
 800bb40:	4b22      	ldr	r3, [pc, #136]	; (800bbcc <HAL_TIM_IC_CaptureCallback+0x36c>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7f4 fcff 	bl	8000548 <__aeabi_f2d>
 800bb4a:	a319      	add	r3, pc, #100	; (adr r3, 800bbb0 <HAL_TIM_IC_CaptureCallback+0x350>)
 800bb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb50:	f7f4 fd52 	bl	80005f8 <__aeabi_dmul>
 800bb54:	4603      	mov	r3, r0
 800bb56:	460c      	mov	r4, r1
 800bb58:	4625      	mov	r5, r4
 800bb5a:	461c      	mov	r4, r3
 800bb5c:	4b19      	ldr	r3, [pc, #100]	; (800bbc4 <HAL_TIM_IC_CaptureCallback+0x364>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7f4 fcf1 	bl	8000548 <__aeabi_f2d>
 800bb66:	a314      	add	r3, pc, #80	; (adr r3, 800bbb8 <HAL_TIM_IC_CaptureCallback+0x358>)
 800bb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6c:	f7f4 fd44 	bl	80005f8 <__aeabi_dmul>
 800bb70:	4602      	mov	r2, r0
 800bb72:	460b      	mov	r3, r1
 800bb74:	4620      	mov	r0, r4
 800bb76:	4629      	mov	r1, r5
 800bb78:	f7f4 fb88 	bl	800028c <__adddf3>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	460c      	mov	r4, r1
 800bb80:	4618      	mov	r0, r3
 800bb82:	4621      	mov	r1, r4
 800bb84:	f7f5 f81a 	bl	8000bbc <__aeabi_d2f>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	4b10      	ldr	r3, [pc, #64]	; (800bbcc <HAL_TIM_IC_CaptureCallback+0x36c>)
 800bb8c:	601a      	str	r2, [r3, #0]
					last_EncVal_v = EncVal;
 800bb8e:	4b10      	ldr	r3, [pc, #64]	; (800bbd0 <HAL_TIM_IC_CaptureCallback+0x370>)
 800bb90:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bb94:	4b0f      	ldr	r3, [pc, #60]	; (800bbd4 <HAL_TIM_IC_CaptureCallback+0x374>)
 800bb96:	801a      	strh	r2, [r3, #0]
				update_pwm();
 800bb98:	f000 f822 	bl	800bbe0 <update_pwm>
				GPIOC->BSRR = GPIO_PIN_13  << 16U ; // DEBUG
 800bb9c:	4b0e      	ldr	r3, [pc, #56]	; (800bbd8 <HAL_TIM_IC_CaptureCallback+0x378>)
 800bb9e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800bba2:	619a      	str	r2, [r3, #24]
}
 800bba4:	bf00      	nop
 800bba6:	3718      	adds	r7, #24
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bdb0      	pop	{r4, r5, r7, pc}
 800bbac:	f3af 8000 	nop.w
 800bbb0:	66666666 	.word	0x66666666
 800bbb4:	3fee6666 	.word	0x3fee6666
 800bbb8:	9999999a 	.word	0x9999999a
 800bbbc:	3fa99999 	.word	0x3fa99999
 800bbc0:	2000003c 	.word	0x2000003c
 800bbc4:	200000e4 	.word	0x200000e4
 800bbc8:	46241000 	.word	0x46241000
 800bbcc:	200000e8 	.word	0x200000e8
 800bbd0:	20000d3c 	.word	0x20000d3c
 800bbd4:	20000be8 	.word	0x20000be8
 800bbd8:	40020800 	.word	0x40020800
 800bbdc:	00000000 	.word	0x00000000

0800bbe0 <update_pwm>:

void update_pwm(void){
 800bbe0:	b590      	push	{r4, r7, lr}
 800bbe2:	b087      	sub	sp, #28
 800bbe4:	af00      	add	r7, sp, #0

	//dtime_since_last_pwm_update = TIM5->CNT - time_of_last_pwm_update;
	time_of_last_pwm_update = TIM5->CNT;
 800bbe6:	4bb2      	ldr	r3, [pc, #712]	; (800beb0 <update_pwm+0x2d0>)
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	461a      	mov	r2, r3
 800bbec:	4bb1      	ldr	r3, [pc, #708]	; (800beb4 <update_pwm+0x2d4>)
 800bbee:	601a      	str	r2, [r3, #0]

	phase = (float) EncVal * 0.0031415 * N_POLES ; //(float) EncVal / ENC_STEPS * 2*PI * N_POLES ; //takes 1500ns
 800bbf0:	4bb1      	ldr	r3, [pc, #708]	; (800beb8 <update_pwm+0x2d8>)
 800bbf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbf6:	ee07 3a90 	vmov	s15, r3
 800bbfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbfe:	ee17 0a90 	vmov	r0, s15
 800bc02:	f7f4 fca1 	bl	8000548 <__aeabi_f2d>
 800bc06:	a3a6      	add	r3, pc, #664	; (adr r3, 800bea0 <update_pwm+0x2c0>)
 800bc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0c:	f7f4 fcf4 	bl	80005f8 <__aeabi_dmul>
 800bc10:	4603      	mov	r3, r0
 800bc12:	460c      	mov	r4, r1
 800bc14:	4618      	mov	r0, r3
 800bc16:	4621      	mov	r1, r4
 800bc18:	f04f 0200 	mov.w	r2, #0
 800bc1c:	4ba7      	ldr	r3, [pc, #668]	; (800bebc <update_pwm+0x2dc>)
 800bc1e:	f7f4 fceb 	bl	80005f8 <__aeabi_dmul>
 800bc22:	4603      	mov	r3, r0
 800bc24:	460c      	mov	r4, r1
 800bc26:	4618      	mov	r0, r3
 800bc28:	4621      	mov	r1, r4
 800bc2a:	f7f4 ffc7 	bl	8000bbc <__aeabi_d2f>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	4ba3      	ldr	r3, [pc, #652]	; (800bec0 <update_pwm+0x2e0>)
 800bc32:	601a      	str	r2, [r3, #0]
	phase -= phase0;
 800bc34:	4ba2      	ldr	r3, [pc, #648]	; (800bec0 <update_pwm+0x2e0>)
 800bc36:	ed93 7a00 	vldr	s14, [r3]
 800bc3a:	4ba2      	ldr	r3, [pc, #648]	; (800bec4 <update_pwm+0x2e4>)
 800bc3c:	edd3 7a00 	vldr	s15, [r3]
 800bc40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc44:	4b9e      	ldr	r3, [pc, #632]	; (800bec0 <update_pwm+0x2e0>)
 800bc46:	edc3 7a00 	vstr	s15, [r3]
	//phase = -phase;

	float u0 = 0.5773; //0.5 * 2.0 / 1.73205;// maximal possible U on one coil thanks to wankel //takes<200ns
 800bc4a:	4b9f      	ldr	r3, [pc, #636]	; (800bec8 <update_pwm+0x2e8>)
 800bc4c:	607b      	str	r3, [r7, #4]
	float modified_amp = amp + stiffness * av_velocity * direction; // TODO the abs allows same stiffness to make it softer for both directions - without a signchange is needed BUT turnaround is super aggressive now :( SAME issue with direction - super forceful reverse but sign identical --- looks like v needs to direct also the phase !!!!
 800bc4e:	4b9f      	ldr	r3, [pc, #636]	; (800becc <update_pwm+0x2ec>)
 800bc50:	ed93 7a00 	vldr	s14, [r3]
 800bc54:	4b9e      	ldr	r3, [pc, #632]	; (800bed0 <update_pwm+0x2f0>)
 800bc56:	edd3 7a00 	vldr	s15, [r3]
 800bc5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc5e:	4b9d      	ldr	r3, [pc, #628]	; (800bed4 <update_pwm+0x2f4>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	ee07 3a90 	vmov	s15, r3
 800bc66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc6e:	4b9a      	ldr	r3, [pc, #616]	; (800bed8 <update_pwm+0x2f8>)
 800bc70:	edd3 7a00 	vldr	s15, [r3]
 800bc74:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc78:	edc7 7a05 	vstr	s15, [r7, #20]
	//u0 *= amp;  //takes<200ns
	if (modified_amp > AMP_LIMIT){
 800bc7c:	6978      	ldr	r0, [r7, #20]
 800bc7e:	f7f4 fc63 	bl	8000548 <__aeabi_f2d>
 800bc82:	a389      	add	r3, pc, #548	; (adr r3, 800bea8 <update_pwm+0x2c8>)
 800bc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc88:	f7f4 ff46 	bl	8000b18 <__aeabi_dcmpgt>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d001      	beq.n	800bc96 <update_pwm+0xb6>
		modified_amp = AMP_LIMIT;
 800bc92:	4b92      	ldr	r3, [pc, #584]	; (800bedc <update_pwm+0x2fc>)
 800bc94:	617b      	str	r3, [r7, #20]
	}
//	else if (modified_amp < -AMP_LIMIT){
//		modified_amp = -AMP_LIMIT;
//	}
	u0 *= modified_amp;  //takes<200ns
 800bc96:	ed97 7a01 	vldr	s14, [r7, #4]
 800bc9a:	edd7 7a05 	vldr	s15, [r7, #20]
 800bc9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bca2:	edc7 7a01 	vstr	s15, [r7, #4]
	u0 *= run_motor;  //takes<200ns
 800bca6:	4b8e      	ldr	r3, [pc, #568]	; (800bee0 <update_pwm+0x300>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	ee07 3a90 	vmov	s15, r3
 800bcae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcb2:	ed97 7a01 	vldr	s14, [r7, #4]
 800bcb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcba:	edc7 7a01 	vstr	s15, [r7, #4]

	if (direction == 1){
 800bcbe:	4b85      	ldr	r3, [pc, #532]	; (800bed4 <update_pwm+0x2f4>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d10b      	bne.n	800bcde <update_pwm+0xfe>
		phase -= phase_shift;  //takes<200ns
 800bcc6:	4b7e      	ldr	r3, [pc, #504]	; (800bec0 <update_pwm+0x2e0>)
 800bcc8:	ed93 7a00 	vldr	s14, [r3]
 800bccc:	4b85      	ldr	r3, [pc, #532]	; (800bee4 <update_pwm+0x304>)
 800bcce:	edd3 7a00 	vldr	s15, [r3]
 800bcd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcd6:	4b7a      	ldr	r3, [pc, #488]	; (800bec0 <update_pwm+0x2e0>)
 800bcd8:	edc3 7a00 	vstr	s15, [r3]
 800bcdc:	e00a      	b.n	800bcf4 <update_pwm+0x114>
	}
	else {
		phase += phase_shift;
 800bcde:	4b78      	ldr	r3, [pc, #480]	; (800bec0 <update_pwm+0x2e0>)
 800bce0:	ed93 7a00 	vldr	s14, [r3]
 800bce4:	4b7f      	ldr	r3, [pc, #508]	; (800bee4 <update_pwm+0x304>)
 800bce6:	edd3 7a00 	vldr	s15, [r3]
 800bcea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcee:	4b74      	ldr	r3, [pc, #464]	; (800bec0 <update_pwm+0x2e0>)
 800bcf0:	edc3 7a00 	vstr	s15, [r3]

//



	phase *= 100;
 800bcf4:	4b72      	ldr	r3, [pc, #456]	; (800bec0 <update_pwm+0x2e0>)
 800bcf6:	edd3 7a00 	vldr	s15, [r3]
 800bcfa:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800bee8 <update_pwm+0x308>
 800bcfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd02:	4b6f      	ldr	r3, [pc, #444]	; (800bec0 <update_pwm+0x2e0>)
 800bd04:	edc3 7a00 	vstr	s15, [r3]
	int_phase = (int) phase;
 800bd08:	4b6d      	ldr	r3, [pc, #436]	; (800bec0 <update_pwm+0x2e0>)
 800bd0a:	edd3 7a00 	vldr	s15, [r3]
 800bd0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd12:	ee17 2a90 	vmov	r2, s15
 800bd16:	4b75      	ldr	r3, [pc, #468]	; (800beec <update_pwm+0x30c>)
 800bd18:	601a      	str	r2, [r3, #0]
	int_phase = int_phase % 628;
 800bd1a:	4b74      	ldr	r3, [pc, #464]	; (800beec <update_pwm+0x30c>)
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	4b74      	ldr	r3, [pc, #464]	; (800bef0 <update_pwm+0x310>)
 800bd20:	fb83 1302 	smull	r1, r3, r3, r2
 800bd24:	11d9      	asrs	r1, r3, #7
 800bd26:	17d3      	asrs	r3, r2, #31
 800bd28:	1acb      	subs	r3, r1, r3
 800bd2a:	f44f 711d 	mov.w	r1, #628	; 0x274
 800bd2e:	fb01 f303 	mul.w	r3, r1, r3
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	4a6d      	ldr	r2, [pc, #436]	; (800beec <update_pwm+0x30c>)
 800bd36:	6013      	str	r3, [r2, #0]
	if (int_phase < 0) {
 800bd38:	4b6c      	ldr	r3, [pc, #432]	; (800beec <update_pwm+0x30c>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	da05      	bge.n	800bd4c <update_pwm+0x16c>
		int_phase += 628;
 800bd40:	4b6a      	ldr	r3, [pc, #424]	; (800beec <update_pwm+0x30c>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800bd48:	4a68      	ldr	r2, [pc, #416]	; (800beec <update_pwm+0x30c>)
 800bd4a:	6013      	str	r3, [r2, #0]
	}

	float uA = 0;
 800bd4c:	f04f 0300 	mov.w	r3, #0
 800bd50:	613b      	str	r3, [r7, #16]
	float uB = 0;
 800bd52:	f04f 0300 	mov.w	r3, #0
 800bd56:	60fb      	str	r3, [r7, #12]
	float uC = 0;
 800bd58:	f04f 0300 	mov.w	r3, #0
 800bd5c:	60bb      	str	r3, [r7, #8]

	if (wave_mode < 2 ){
 800bd5e:	4b65      	ldr	r3, [pc, #404]	; (800bef4 <update_pwm+0x314>)
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	f200 813b 	bhi.w	800bfde <update_pwm+0x3fe>
		if (wave_mode == 0 ){
 800bd68:	4b62      	ldr	r3, [pc, #392]	; (800bef4 <update_pwm+0x314>)
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d149      	bne.n	800be04 <update_pwm+0x224>
		//    			uB = lookup[2]; // takes 3mus
		//    			uC = 0;

			// ---- lookup  this optimized routine brings roundtrip down to 5mus

			if  (int_phase < 210)	{ //0...209
 800bd70:	4b5e      	ldr	r3, [pc, #376]	; (800beec <update_pwm+0x30c>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2bd1      	cmp	r3, #209	; 0xd1
 800bd76:	dc13      	bgt.n	800bda0 <update_pwm+0x1c0>
				uA = lookup[int_phase]; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 800bd78:	4b5c      	ldr	r3, [pc, #368]	; (800beec <update_pwm+0x30c>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a5e      	ldr	r2, [pc, #376]	; (800bef8 <update_pwm+0x318>)
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	4413      	add	r3, r2
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	613b      	str	r3, [r7, #16]
				uB = lookup[210 - 1 - int_phase]; // takes 3mus
 800bd86:	4b59      	ldr	r3, [pc, #356]	; (800beec <update_pwm+0x30c>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f1c3 03d1 	rsb	r3, r3, #209	; 0xd1
 800bd8e:	4a5a      	ldr	r2, [pc, #360]	; (800bef8 <update_pwm+0x318>)
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4413      	add	r3, r2
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	60fb      	str	r3, [r7, #12]
				uC = 0;
 800bd98:	f04f 0300 	mov.w	r3, #0
 800bd9c:	60bb      	str	r3, [r7, #8]
 800bd9e:	e0c6      	b.n	800bf2e <update_pwm+0x34e>
			}
		 else if  (int_phase < 420){	 //210...419
 800bda0:	4b52      	ldr	r3, [pc, #328]	; (800beec <update_pwm+0x30c>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800bda8:	da15      	bge.n	800bdd6 <update_pwm+0x1f6>
				uA = 0; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 800bdaa:	f04f 0300 	mov.w	r3, #0
 800bdae:	613b      	str	r3, [r7, #16]
				uB = lookup[int_phase - 210]; // takes 3mus
 800bdb0:	4b4e      	ldr	r3, [pc, #312]	; (800beec <update_pwm+0x30c>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3bd2      	subs	r3, #210	; 0xd2
 800bdb6:	4a50      	ldr	r2, [pc, #320]	; (800bef8 <update_pwm+0x318>)
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	4413      	add	r3, r2
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	60fb      	str	r3, [r7, #12]
				uC = lookup[420 - 1 - int_phase];
 800bdc0:	4b4a      	ldr	r3, [pc, #296]	; (800beec <update_pwm+0x30c>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f5c3 73d1 	rsb	r3, r3, #418	; 0x1a2
 800bdc8:	3301      	adds	r3, #1
 800bdca:	4a4b      	ldr	r2, [pc, #300]	; (800bef8 <update_pwm+0x318>)
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	60bb      	str	r3, [r7, #8]
 800bdd4:	e0ab      	b.n	800bf2e <update_pwm+0x34e>
		 }
		 else	{  //420...629
				uA = lookup[630 - 1 - int_phase]; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 800bdd6:	4b45      	ldr	r3, [pc, #276]	; (800beec <update_pwm+0x30c>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f5c3 731d 	rsb	r3, r3, #628	; 0x274
 800bdde:	3301      	adds	r3, #1
 800bde0:	4a45      	ldr	r2, [pc, #276]	; (800bef8 <update_pwm+0x318>)
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4413      	add	r3, r2
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	613b      	str	r3, [r7, #16]
				uB = 0; // takes 3mus
 800bdea:	f04f 0300 	mov.w	r3, #0
 800bdee:	60fb      	str	r3, [r7, #12]
				uC = lookup[int_phase - 420];
 800bdf0:	4b3e      	ldr	r3, [pc, #248]	; (800beec <update_pwm+0x30c>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800bdf8:	4a3f      	ldr	r2, [pc, #252]	; (800bef8 <update_pwm+0x318>)
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	4413      	add	r3, r2
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	60bb      	str	r3, [r7, #8]
 800be02:	e094      	b.n	800bf2e <update_pwm+0x34e>
			}
		}

		else if (wave_mode == 1){
 800be04:	4b3b      	ldr	r3, [pc, #236]	; (800bef4 <update_pwm+0x314>)
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	2b01      	cmp	r3, #1
 800be0a:	f040 8090 	bne.w	800bf2e <update_pwm+0x34e>
			if  (int_phase < 105-52)	{
 800be0e:	4b37      	ldr	r3, [pc, #220]	; (800beec <update_pwm+0x30c>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2b34      	cmp	r3, #52	; 0x34
 800be14:	dc09      	bgt.n	800be2a <update_pwm+0x24a>
				uA = 1;
 800be16:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800be1a:	613b      	str	r3, [r7, #16]
				uB = 0;
 800be1c:	f04f 0300 	mov.w	r3, #0
 800be20:	60fb      	str	r3, [r7, #12]
				uC = 0;
 800be22:	f04f 0300 	mov.w	r3, #0
 800be26:	60bb      	str	r3, [r7, #8]
 800be28:	e081      	b.n	800bf2e <update_pwm+0x34e>
			}
			else if  (int_phase < 210-52)	{
 800be2a:	4b30      	ldr	r3, [pc, #192]	; (800beec <update_pwm+0x30c>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2b9d      	cmp	r3, #157	; 0x9d
 800be30:	dc09      	bgt.n	800be46 <update_pwm+0x266>
				uA = 1;
 800be32:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800be36:	613b      	str	r3, [r7, #16]
				uB = 1;
 800be38:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800be3c:	60fb      	str	r3, [r7, #12]
				uC = 0;
 800be3e:	f04f 0300 	mov.w	r3, #0
 800be42:	60bb      	str	r3, [r7, #8]
 800be44:	e073      	b.n	800bf2e <update_pwm+0x34e>
			}
			else if  (int_phase < 315-52)	{
 800be46:	4b29      	ldr	r3, [pc, #164]	; (800beec <update_pwm+0x30c>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800be4e:	dc09      	bgt.n	800be64 <update_pwm+0x284>
				uA = 0;
 800be50:	f04f 0300 	mov.w	r3, #0
 800be54:	613b      	str	r3, [r7, #16]
				uB = 1;
 800be56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800be5a:	60fb      	str	r3, [r7, #12]
				uC = 0;
 800be5c:	f04f 0300 	mov.w	r3, #0
 800be60:	60bb      	str	r3, [r7, #8]
 800be62:	e064      	b.n	800bf2e <update_pwm+0x34e>
			}
			else if  (int_phase < 420-52)	{
 800be64:	4b21      	ldr	r3, [pc, #132]	; (800beec <update_pwm+0x30c>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 800be6c:	da09      	bge.n	800be82 <update_pwm+0x2a2>
				uA = 0;
 800be6e:	f04f 0300 	mov.w	r3, #0
 800be72:	613b      	str	r3, [r7, #16]
				uB = 1;
 800be74:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800be78:	60fb      	str	r3, [r7, #12]
				uC = 1;
 800be7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800be7e:	60bb      	str	r3, [r7, #8]
 800be80:	e055      	b.n	800bf2e <update_pwm+0x34e>
			}
			else if  (int_phase < 525-52)	{
 800be82:	4b1a      	ldr	r3, [pc, #104]	; (800beec <update_pwm+0x30c>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 800be8a:	dc37      	bgt.n	800befc <update_pwm+0x31c>
				uA = 0;
 800be8c:	f04f 0300 	mov.w	r3, #0
 800be90:	613b      	str	r3, [r7, #16]
				uB = 0;
 800be92:	f04f 0300 	mov.w	r3, #0
 800be96:	60fb      	str	r3, [r7, #12]
				uC = 1;
 800be98:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800be9c:	60bb      	str	r3, [r7, #8]
 800be9e:	e046      	b.n	800bf2e <update_pwm+0x34e>
 800bea0:	f85510d4 	.word	0xf85510d4
 800bea4:	3f69bc33 	.word	0x3f69bc33
 800bea8:	9999999a 	.word	0x9999999a
 800beac:	3fd99999 	.word	0x3fd99999
 800beb0:	40000c00 	.word	0x40000c00
 800beb4:	20000118 	.word	0x20000118
 800beb8:	20000d3c 	.word	0x20000d3c
 800bebc:	40340000 	.word	0x40340000
 800bec0:	200000dc 	.word	0x200000dc
 800bec4:	20000010 	.word	0x20000010
 800bec8:	3f13c9ef 	.word	0x3f13c9ef
 800becc:	200000d0 	.word	0x200000d0
 800bed0:	200000e8 	.word	0x200000e8
 800bed4:	20000020 	.word	0x20000020
 800bed8:	20000018 	.word	0x20000018
 800bedc:	3ecccccd 	.word	0x3ecccccd
 800bee0:	2000001c 	.word	0x2000001c
 800bee4:	20000024 	.word	0x20000024
 800bee8:	42c80000 	.word	0x42c80000
 800beec:	200000e0 	.word	0x200000e0
 800bef0:	342da7f3 	.word	0x342da7f3
 800bef4:	20000110 	.word	0x20000110
 800bef8:	20000224 	.word	0x20000224
			}
			else if  (int_phase < 630-52)	{
 800befc:	4bac      	ldr	r3, [pc, #688]	; (800c1b0 <update_pwm+0x5d0>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f240 2241 	movw	r2, #577	; 0x241
 800bf04:	4293      	cmp	r3, r2
 800bf06:	dc09      	bgt.n	800bf1c <update_pwm+0x33c>
				uA = 1;
 800bf08:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bf0c:	613b      	str	r3, [r7, #16]
				uB = 0;
 800bf0e:	f04f 0300 	mov.w	r3, #0
 800bf12:	60fb      	str	r3, [r7, #12]
				uC = 1;
 800bf14:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bf18:	60bb      	str	r3, [r7, #8]
 800bf1a:	e008      	b.n	800bf2e <update_pwm+0x34e>
			}
			else 	{ //same as first half phase
				uA = 1;
 800bf1c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bf20:	613b      	str	r3, [r7, #16]
				uB = 0;
 800bf22:	f04f 0300 	mov.w	r3, #0
 800bf26:	60fb      	str	r3, [r7, #12]
				uC = 0;
 800bf28:	f04f 0300 	mov.w	r3, #0
 800bf2c:	60bb      	str	r3, [r7, #8]
			}
		}
		pwmA = (uint16_t) (pwm * u0 * uA); //takes<2s00ns
 800bf2e:	4ba1      	ldr	r3, [pc, #644]	; (800c1b4 <update_pwm+0x5d4>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	ee07 3a90 	vmov	s15, r3
 800bf36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bf3a:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf42:	edd7 7a04 	vldr	s15, [r7, #16]
 800bf46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf4e:	ee17 3a90 	vmov	r3, s15
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	461a      	mov	r2, r3
 800bf56:	4b98      	ldr	r3, [pc, #608]	; (800c1b8 <update_pwm+0x5d8>)
 800bf58:	601a      	str	r2, [r3, #0]
		pwmB = (uint16_t) (pwm * u0 * uB); //takes<200ns
 800bf5a:	4b96      	ldr	r3, [pc, #600]	; (800c1b4 <update_pwm+0x5d4>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	ee07 3a90 	vmov	s15, r3
 800bf62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bf66:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf6e:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf7a:	ee17 3a90 	vmov	r3, s15
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	461a      	mov	r2, r3
 800bf82:	4b8e      	ldr	r3, [pc, #568]	; (800c1bc <update_pwm+0x5dc>)
 800bf84:	601a      	str	r2, [r3, #0]
		pwmC = (uint16_t) (pwm * u0 * uC); //takes<200ns
 800bf86:	4b8b      	ldr	r3, [pc, #556]	; (800c1b4 <update_pwm+0x5d4>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	ee07 3a90 	vmov	s15, r3
 800bf8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bf92:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf96:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf9a:	edd7 7a02 	vldr	s15, [r7, #8]
 800bf9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfa6:	ee17 3a90 	vmov	r3, s15
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	461a      	mov	r2, r3
 800bfae:	4b84      	ldr	r3, [pc, #528]	; (800c1c0 <update_pwm+0x5e0>)
 800bfb0:	601a      	str	r2, [r3, #0]

		// ---- end lookup

		debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 800bfb2:	4b84      	ldr	r3, [pc, #528]	; (800c1c4 <update_pwm+0x5e4>)
 800bfb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfb8:	619a      	str	r2, [r3, #24]

		// --- MOTOR DRIVER ----------------------------------------------------
		// --- PWM pulses 0...2048
		if (normal_operation_enabled){
 800bfba:	4b83      	ldr	r3, [pc, #524]	; (800c1c8 <update_pwm+0x5e8>)
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	f000 812f 	beq.w	800c222 <update_pwm+0x642>
			TIM1->CCR1 = pwmA; //takes<150ns
 800bfc4:	4b7c      	ldr	r3, [pc, #496]	; (800c1b8 <update_pwm+0x5d8>)
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	4b80      	ldr	r3, [pc, #512]	; (800c1cc <update_pwm+0x5ec>)
 800bfca:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = pwmB; //takes<150ns
 800bfcc:	4b7b      	ldr	r3, [pc, #492]	; (800c1bc <update_pwm+0x5dc>)
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	4b7e      	ldr	r3, [pc, #504]	; (800c1cc <update_pwm+0x5ec>)
 800bfd2:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = pwmC; //takes<150ns
 800bfd4:	4b7a      	ldr	r3, [pc, #488]	; (800c1c0 <update_pwm+0x5e0>)
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	4b7c      	ldr	r3, [pc, #496]	; (800c1cc <update_pwm+0x5ec>)
 800bfda:	63da      	str	r2, [r3, #60]	; 0x3c
	}




}
 800bfdc:	e121      	b.n	800c222 <update_pwm+0x642>
		if  (int_phase < 105)	{
 800bfde:	4b74      	ldr	r3, [pc, #464]	; (800c1b0 <update_pwm+0x5d0>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2b68      	cmp	r3, #104	; 0x68
 800bfe4:	dc29      	bgt.n	800c03a <update_pwm+0x45a>
			uA = 1;
 800bfe6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bfea:	613b      	str	r3, [r7, #16]
			pwmA = (uint16_t) (pwm * u0 * uA); //takes<2s00ns
 800bfec:	4b71      	ldr	r3, [pc, #452]	; (800c1b4 <update_pwm+0x5d4>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	ee07 3a90 	vmov	s15, r3
 800bff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bff8:	edd7 7a01 	vldr	s15, [r7, #4]
 800bffc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c000:	edd7 7a04 	vldr	s15, [r7, #16]
 800c004:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c00c:	ee17 3a90 	vmov	r3, s15
 800c010:	b29b      	uxth	r3, r3
 800c012:	461a      	mov	r2, r3
 800c014:	4b68      	ldr	r3, [pc, #416]	; (800c1b8 <update_pwm+0x5d8>)
 800c016:	601a      	str	r2, [r3, #0]
			TIM1->CCR1 = pwmA; //takes<150ns
 800c018:	4b67      	ldr	r3, [pc, #412]	; (800c1b8 <update_pwm+0x5d8>)
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	4b6b      	ldr	r3, [pc, #428]	; (800c1cc <update_pwm+0x5ec>)
 800c01e:	635a      	str	r2, [r3, #52]	; 0x34
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800c020:	4b6a      	ldr	r3, [pc, #424]	; (800c1cc <update_pwm+0x5ec>)
 800c022:	699b      	ldr	r3, [r3, #24]
 800c024:	4a69      	ldr	r2, [pc, #420]	; (800c1cc <update_pwm+0x5ec>)
 800c026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c02a:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800c02c:	4b67      	ldr	r3, [pc, #412]	; (800c1cc <update_pwm+0x5ec>)
 800c02e:	699b      	ldr	r3, [r3, #24]
 800c030:	4a66      	ldr	r2, [pc, #408]	; (800c1cc <update_pwm+0x5ec>)
 800c032:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c036:	6193      	str	r3, [r2, #24]
}
 800c038:	e0f3      	b.n	800c222 <update_pwm+0x642>
		else if  (int_phase < 210)	{
 800c03a:	4b5d      	ldr	r3, [pc, #372]	; (800c1b0 <update_pwm+0x5d0>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2bd1      	cmp	r3, #209	; 0xd1
 800c040:	dc29      	bgt.n	800c096 <update_pwm+0x4b6>
			uB = 1;
 800c042:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c046:	60fb      	str	r3, [r7, #12]
			pwmB = (uint16_t) (pwm * u0 * uB); //takes<2s00ns
 800c048:	4b5a      	ldr	r3, [pc, #360]	; (800c1b4 <update_pwm+0x5d4>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	ee07 3a90 	vmov	s15, r3
 800c050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c054:	edd7 7a01 	vldr	s15, [r7, #4]
 800c058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c05c:	edd7 7a03 	vldr	s15, [r7, #12]
 800c060:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c068:	ee17 3a90 	vmov	r3, s15
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	461a      	mov	r2, r3
 800c070:	4b52      	ldr	r3, [pc, #328]	; (800c1bc <update_pwm+0x5dc>)
 800c072:	601a      	str	r2, [r3, #0]
			TIM1->CCR2 = pwmB; //takes<150ns
 800c074:	4b51      	ldr	r3, [pc, #324]	; (800c1bc <update_pwm+0x5dc>)
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	4b54      	ldr	r3, [pc, #336]	; (800c1cc <update_pwm+0x5ec>)
 800c07a:	639a      	str	r2, [r3, #56]	; 0x38
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800c07c:	4b53      	ldr	r3, [pc, #332]	; (800c1cc <update_pwm+0x5ec>)
 800c07e:	699b      	ldr	r3, [r3, #24]
 800c080:	4a52      	ldr	r2, [pc, #328]	; (800c1cc <update_pwm+0x5ec>)
 800c082:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c086:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800c088:	4b50      	ldr	r3, [pc, #320]	; (800c1cc <update_pwm+0x5ec>)
 800c08a:	699b      	ldr	r3, [r3, #24]
 800c08c:	4a4f      	ldr	r2, [pc, #316]	; (800c1cc <update_pwm+0x5ec>)
 800c08e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c092:	6193      	str	r3, [r2, #24]
}
 800c094:	e0c5      	b.n	800c222 <update_pwm+0x642>
		else if  (int_phase < 315)	{
 800c096:	4b46      	ldr	r3, [pc, #280]	; (800c1b0 <update_pwm+0x5d0>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800c09e:	dc29      	bgt.n	800c0f4 <update_pwm+0x514>
			uB = 1;
 800c0a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c0a4:	60fb      	str	r3, [r7, #12]
			pwmB = (uint16_t) (pwm * u0 * uB); //takes<2s00ns
 800c0a6:	4b43      	ldr	r3, [pc, #268]	; (800c1b4 <update_pwm+0x5d4>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	ee07 3a90 	vmov	s15, r3
 800c0ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c0b2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c0b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800c0be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0c6:	ee17 3a90 	vmov	r3, s15
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	4b3b      	ldr	r3, [pc, #236]	; (800c1bc <update_pwm+0x5dc>)
 800c0d0:	601a      	str	r2, [r3, #0]
			TIM1->CCR2 = pwmB; //takes<150ns
 800c0d2:	4b3a      	ldr	r3, [pc, #232]	; (800c1bc <update_pwm+0x5dc>)
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	4b3d      	ldr	r3, [pc, #244]	; (800c1cc <update_pwm+0x5ec>)
 800c0d8:	639a      	str	r2, [r3, #56]	; 0x38
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800c0da:	4b3c      	ldr	r3, [pc, #240]	; (800c1cc <update_pwm+0x5ec>)
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	4a3b      	ldr	r2, [pc, #236]	; (800c1cc <update_pwm+0x5ec>)
 800c0e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c0e4:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800c0e6:	4b39      	ldr	r3, [pc, #228]	; (800c1cc <update_pwm+0x5ec>)
 800c0e8:	699b      	ldr	r3, [r3, #24]
 800c0ea:	4a38      	ldr	r2, [pc, #224]	; (800c1cc <update_pwm+0x5ec>)
 800c0ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0f0:	6193      	str	r3, [r2, #24]
}
 800c0f2:	e096      	b.n	800c222 <update_pwm+0x642>
		else if  (int_phase < 420)	{
 800c0f4:	4b2e      	ldr	r3, [pc, #184]	; (800c1b0 <update_pwm+0x5d0>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800c0fc:	da29      	bge.n	800c152 <update_pwm+0x572>
			uC = 1;
 800c0fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c102:	60bb      	str	r3, [r7, #8]
			pwmC = (uint16_t) (pwm * u0 * uC); //takes<2s00ns
 800c104:	4b2b      	ldr	r3, [pc, #172]	; (800c1b4 <update_pwm+0x5d4>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	ee07 3a90 	vmov	s15, r3
 800c10c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c110:	edd7 7a01 	vldr	s15, [r7, #4]
 800c114:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c118:	edd7 7a02 	vldr	s15, [r7, #8]
 800c11c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c124:	ee17 3a90 	vmov	r3, s15
 800c128:	b29b      	uxth	r3, r3
 800c12a:	461a      	mov	r2, r3
 800c12c:	4b24      	ldr	r3, [pc, #144]	; (800c1c0 <update_pwm+0x5e0>)
 800c12e:	601a      	str	r2, [r3, #0]
			TIM1->CCR3 = pwmC; //takes<150ns
 800c130:	4b23      	ldr	r3, [pc, #140]	; (800c1c0 <update_pwm+0x5e0>)
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	4b25      	ldr	r3, [pc, #148]	; (800c1cc <update_pwm+0x5ec>)
 800c136:	63da      	str	r2, [r3, #60]	; 0x3c
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800c138:	4b24      	ldr	r3, [pc, #144]	; (800c1cc <update_pwm+0x5ec>)
 800c13a:	699b      	ldr	r3, [r3, #24]
 800c13c:	4a23      	ldr	r2, [pc, #140]	; (800c1cc <update_pwm+0x5ec>)
 800c13e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c142:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800c144:	4b21      	ldr	r3, [pc, #132]	; (800c1cc <update_pwm+0x5ec>)
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	4a20      	ldr	r2, [pc, #128]	; (800c1cc <update_pwm+0x5ec>)
 800c14a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c14e:	6193      	str	r3, [r2, #24]
}
 800c150:	e067      	b.n	800c222 <update_pwm+0x642>
		else if  (int_phase < 525)	{
 800c152:	4b17      	ldr	r3, [pc, #92]	; (800c1b0 <update_pwm+0x5d0>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800c15a:	dc39      	bgt.n	800c1d0 <update_pwm+0x5f0>
			uC = 1;
 800c15c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c160:	60bb      	str	r3, [r7, #8]
			pwmC = (uint16_t) (pwm * u0 * uC); //takes<2s00ns
 800c162:	4b14      	ldr	r3, [pc, #80]	; (800c1b4 <update_pwm+0x5d4>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	ee07 3a90 	vmov	s15, r3
 800c16a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c16e:	edd7 7a01 	vldr	s15, [r7, #4]
 800c172:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c176:	edd7 7a02 	vldr	s15, [r7, #8]
 800c17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c17e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c182:	ee17 3a90 	vmov	r3, s15
 800c186:	b29b      	uxth	r3, r3
 800c188:	461a      	mov	r2, r3
 800c18a:	4b0d      	ldr	r3, [pc, #52]	; (800c1c0 <update_pwm+0x5e0>)
 800c18c:	601a      	str	r2, [r3, #0]
			TIM1->CCR3 = pwmC; //takes<150ns
 800c18e:	4b0c      	ldr	r3, [pc, #48]	; (800c1c0 <update_pwm+0x5e0>)
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	4b0e      	ldr	r3, [pc, #56]	; (800c1cc <update_pwm+0x5ec>)
 800c194:	63da      	str	r2, [r3, #60]	; 0x3c
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800c196:	4b0d      	ldr	r3, [pc, #52]	; (800c1cc <update_pwm+0x5ec>)
 800c198:	699b      	ldr	r3, [r3, #24]
 800c19a:	4a0c      	ldr	r2, [pc, #48]	; (800c1cc <update_pwm+0x5ec>)
 800c19c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c1a0:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800c1a2:	4b0a      	ldr	r3, [pc, #40]	; (800c1cc <update_pwm+0x5ec>)
 800c1a4:	699b      	ldr	r3, [r3, #24]
 800c1a6:	4a09      	ldr	r2, [pc, #36]	; (800c1cc <update_pwm+0x5ec>)
 800c1a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c1ac:	6193      	str	r3, [r2, #24]
}
 800c1ae:	e038      	b.n	800c222 <update_pwm+0x642>
 800c1b0:	200000e0 	.word	0x200000e0
 800c1b4:	20000014 	.word	0x20000014
 800c1b8:	200000ec 	.word	0x200000ec
 800c1bc:	200000f0 	.word	0x200000f0
 800c1c0:	200000f4 	.word	0x200000f4
 800c1c4:	40020c00 	.word	0x40020c00
 800c1c8:	20000041 	.word	0x20000041
 800c1cc:	40010000 	.word	0x40010000
			uA = 1;
 800c1d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c1d4:	613b      	str	r3, [r7, #16]
			pwmA = (uint16_t) (pwm * u0 * uA); //takes<2s00ns
 800c1d6:	4b15      	ldr	r3, [pc, #84]	; (800c22c <update_pwm+0x64c>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	ee07 3a90 	vmov	s15, r3
 800c1de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c1e2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c1e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1ea:	edd7 7a04 	vldr	s15, [r7, #16]
 800c1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1f6:	ee17 3a90 	vmov	r3, s15
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	4b0c      	ldr	r3, [pc, #48]	; (800c230 <update_pwm+0x650>)
 800c200:	601a      	str	r2, [r3, #0]
			TIM1->CCR1 = pwmA; //takes<150ns
 800c202:	4b0b      	ldr	r3, [pc, #44]	; (800c230 <update_pwm+0x650>)
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	4b0b      	ldr	r3, [pc, #44]	; (800c234 <update_pwm+0x654>)
 800c208:	635a      	str	r2, [r3, #52]	; 0x34
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800c20a:	4b0a      	ldr	r3, [pc, #40]	; (800c234 <update_pwm+0x654>)
 800c20c:	699b      	ldr	r3, [r3, #24]
 800c20e:	4a09      	ldr	r2, [pc, #36]	; (800c234 <update_pwm+0x654>)
 800c210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c214:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800c216:	4b07      	ldr	r3, [pc, #28]	; (800c234 <update_pwm+0x654>)
 800c218:	699b      	ldr	r3, [r3, #24]
 800c21a:	4a06      	ldr	r2, [pc, #24]	; (800c234 <update_pwm+0x654>)
 800c21c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c220:	6193      	str	r3, [r2, #24]
}
 800c222:	bf00      	nop
 800c224:	371c      	adds	r7, #28
 800c226:	46bd      	mov	sp, r7
 800c228:	bd90      	pop	{r4, r7, pc}
 800c22a:	bf00      	nop
 800c22c:	20000014 	.word	0x20000014
 800c230:	200000ec 	.word	0x200000ec
 800c234:	40010000 	.word	0x40010000

0800c238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c238:	b480      	push	{r7}
 800c23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c23c:	bf00      	nop
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
	...

0800c248 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c24e:	2300      	movs	r3, #0
 800c250:	607b      	str	r3, [r7, #4]
 800c252:	4b10      	ldr	r3, [pc, #64]	; (800c294 <HAL_MspInit+0x4c>)
 800c254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c256:	4a0f      	ldr	r2, [pc, #60]	; (800c294 <HAL_MspInit+0x4c>)
 800c258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c25c:	6453      	str	r3, [r2, #68]	; 0x44
 800c25e:	4b0d      	ldr	r3, [pc, #52]	; (800c294 <HAL_MspInit+0x4c>)
 800c260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c266:	607b      	str	r3, [r7, #4]
 800c268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c26a:	2300      	movs	r3, #0
 800c26c:	603b      	str	r3, [r7, #0]
 800c26e:	4b09      	ldr	r3, [pc, #36]	; (800c294 <HAL_MspInit+0x4c>)
 800c270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c272:	4a08      	ldr	r2, [pc, #32]	; (800c294 <HAL_MspInit+0x4c>)
 800c274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c278:	6413      	str	r3, [r2, #64]	; 0x40
 800c27a:	4b06      	ldr	r3, [pc, #24]	; (800c294 <HAL_MspInit+0x4c>)
 800c27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c27e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c282:	603b      	str	r3, [r7, #0]
 800c284:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c286:	bf00      	nop
 800c288:	370c      	adds	r7, #12
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr
 800c292:	bf00      	nop
 800c294:	40023800 	.word	0x40023800

0800c298 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b092      	sub	sp, #72	; 0x48
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	601a      	str	r2, [r3, #0]
 800c2a8:	605a      	str	r2, [r3, #4]
 800c2aa:	609a      	str	r2, [r3, #8]
 800c2ac:	60da      	str	r2, [r3, #12]
 800c2ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a9b      	ldr	r2, [pc, #620]	; (800c524 <HAL_ADC_MspInit+0x28c>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	f040 8096 	bne.w	800c3e8 <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c2bc:	2300      	movs	r3, #0
 800c2be:	633b      	str	r3, [r7, #48]	; 0x30
 800c2c0:	4b99      	ldr	r3, [pc, #612]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c2c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2c4:	4a98      	ldr	r2, [pc, #608]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c2c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2ca:	6453      	str	r3, [r2, #68]	; 0x44
 800c2cc:	4b96      	ldr	r3, [pc, #600]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2d4:	633b      	str	r3, [r7, #48]	; 0x30
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c2d8:	2300      	movs	r3, #0
 800c2da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2dc:	4b92      	ldr	r3, [pc, #584]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2e0:	4a91      	ldr	r2, [pc, #580]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c2e2:	f043 0304 	orr.w	r3, r3, #4
 800c2e6:	6313      	str	r3, [r2, #48]	; 0x30
 800c2e8:	4b8f      	ldr	r3, [pc, #572]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ec:	f003 0304 	and.w	r3, r3, #4
 800c2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2f8:	4b8b      	ldr	r3, [pc, #556]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2fc:	4a8a      	ldr	r2, [pc, #552]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c2fe:	f043 0301 	orr.w	r3, r3, #1
 800c302:	6313      	str	r3, [r2, #48]	; 0x30
 800c304:	4b88      	ldr	r3, [pc, #544]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c308:	f003 0301 	and.w	r3, r3, #1
 800c30c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c310:	2300      	movs	r3, #0
 800c312:	627b      	str	r3, [r7, #36]	; 0x24
 800c314:	4b84      	ldr	r3, [pc, #528]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c318:	4a83      	ldr	r2, [pc, #524]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c31a:	f043 0302 	orr.w	r3, r3, #2
 800c31e:	6313      	str	r3, [r2, #48]	; 0x30
 800c320:	4b81      	ldr	r3, [pc, #516]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c324:	f003 0302 	and.w	r3, r3, #2
 800c328:	627b      	str	r3, [r7, #36]	; 0x24
 800c32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c32c:	233e      	movs	r3, #62	; 0x3e
 800c32e:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c330:	2303      	movs	r3, #3
 800c332:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c334:	2300      	movs	r3, #0
 800c336:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c338:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c33c:	4619      	mov	r1, r3
 800c33e:	487b      	ldr	r0, [pc, #492]	; (800c52c <HAL_ADC_MspInit+0x294>)
 800c340:	f7f7 fa2e 	bl	80037a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c344:	233e      	movs	r3, #62	; 0x3e
 800c346:	637b      	str	r3, [r7, #52]	; 0x34
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c348:	2303      	movs	r3, #3
 800c34a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c34c:	2300      	movs	r3, #0
 800c34e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c350:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c354:	4619      	mov	r1, r3
 800c356:	4876      	ldr	r0, [pc, #472]	; (800c530 <HAL_ADC_MspInit+0x298>)
 800c358:	f7f7 fa22 	bl	80037a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c35c:	2301      	movs	r3, #1
 800c35e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c360:	2303      	movs	r3, #3
 800c362:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c364:	2300      	movs	r3, #0
 800c366:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c368:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c36c:	4619      	mov	r1, r3
 800c36e:	4871      	ldr	r0, [pc, #452]	; (800c534 <HAL_ADC_MspInit+0x29c>)
 800c370:	f7f7 fa16 	bl	80037a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800c374:	4b70      	ldr	r3, [pc, #448]	; (800c538 <HAL_ADC_MspInit+0x2a0>)
 800c376:	4a71      	ldr	r2, [pc, #452]	; (800c53c <HAL_ADC_MspInit+0x2a4>)
 800c378:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800c37a:	4b6f      	ldr	r3, [pc, #444]	; (800c538 <HAL_ADC_MspInit+0x2a0>)
 800c37c:	2200      	movs	r2, #0
 800c37e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c380:	4b6d      	ldr	r3, [pc, #436]	; (800c538 <HAL_ADC_MspInit+0x2a0>)
 800c382:	2200      	movs	r2, #0
 800c384:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c386:	4b6c      	ldr	r3, [pc, #432]	; (800c538 <HAL_ADC_MspInit+0x2a0>)
 800c388:	2200      	movs	r2, #0
 800c38a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c38c:	4b6a      	ldr	r3, [pc, #424]	; (800c538 <HAL_ADC_MspInit+0x2a0>)
 800c38e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c392:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c394:	4b68      	ldr	r3, [pc, #416]	; (800c538 <HAL_ADC_MspInit+0x2a0>)
 800c396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c39a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c39c:	4b66      	ldr	r3, [pc, #408]	; (800c538 <HAL_ADC_MspInit+0x2a0>)
 800c39e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c3a2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800c3a4:	4b64      	ldr	r3, [pc, #400]	; (800c538 <HAL_ADC_MspInit+0x2a0>)
 800c3a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c3aa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800c3ac:	4b62      	ldr	r3, [pc, #392]	; (800c538 <HAL_ADC_MspInit+0x2a0>)
 800c3ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c3b2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c3b4:	4b60      	ldr	r3, [pc, #384]	; (800c538 <HAL_ADC_MspInit+0x2a0>)
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800c3ba:	485f      	ldr	r0, [pc, #380]	; (800c538 <HAL_ADC_MspInit+0x2a0>)
 800c3bc:	f7f6 fe0c 	bl	8002fd8 <HAL_DMA_Init>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d001      	beq.n	800c3ca <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800c3c6:	f7ff ff37 	bl	800c238 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	4a5a      	ldr	r2, [pc, #360]	; (800c538 <HAL_ADC_MspInit+0x2a0>)
 800c3ce:	639a      	str	r2, [r3, #56]	; 0x38
 800c3d0:	4a59      	ldr	r2, [pc, #356]	; (800c538 <HAL_ADC_MspInit+0x2a0>)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	2100      	movs	r1, #0
 800c3da:	2012      	movs	r0, #18
 800c3dc:	f7f6 fdc5 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c3e0:	2012      	movs	r0, #18
 800c3e2:	f7f6 fdde 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800c3e6:	e131      	b.n	800c64c <HAL_ADC_MspInit+0x3b4>
  else if(hadc->Instance==ADC2)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a54      	ldr	r2, [pc, #336]	; (800c540 <HAL_ADC_MspInit+0x2a8>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	f040 80ac 	bne.w	800c54c <HAL_ADC_MspInit+0x2b4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	623b      	str	r3, [r7, #32]
 800c3f8:	4b4b      	ldr	r3, [pc, #300]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c3fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3fc:	4a4a      	ldr	r2, [pc, #296]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c3fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c402:	6453      	str	r3, [r2, #68]	; 0x44
 800c404:	4b48      	ldr	r3, [pc, #288]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c40c:	623b      	str	r3, [r7, #32]
 800c40e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c410:	2300      	movs	r3, #0
 800c412:	61fb      	str	r3, [r7, #28]
 800c414:	4b44      	ldr	r3, [pc, #272]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c418:	4a43      	ldr	r2, [pc, #268]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c41a:	f043 0304 	orr.w	r3, r3, #4
 800c41e:	6313      	str	r3, [r2, #48]	; 0x30
 800c420:	4b41      	ldr	r3, [pc, #260]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c424:	f003 0304 	and.w	r3, r3, #4
 800c428:	61fb      	str	r3, [r7, #28]
 800c42a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c42c:	2300      	movs	r3, #0
 800c42e:	61bb      	str	r3, [r7, #24]
 800c430:	4b3d      	ldr	r3, [pc, #244]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c434:	4a3c      	ldr	r2, [pc, #240]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c436:	f043 0301 	orr.w	r3, r3, #1
 800c43a:	6313      	str	r3, [r2, #48]	; 0x30
 800c43c:	4b3a      	ldr	r3, [pc, #232]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c440:	f003 0301 	and.w	r3, r3, #1
 800c444:	61bb      	str	r3, [r7, #24]
 800c446:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c448:	2300      	movs	r3, #0
 800c44a:	617b      	str	r3, [r7, #20]
 800c44c:	4b36      	ldr	r3, [pc, #216]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c450:	4a35      	ldr	r2, [pc, #212]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c452:	f043 0302 	orr.w	r3, r3, #2
 800c456:	6313      	str	r3, [r2, #48]	; 0x30
 800c458:	4b33      	ldr	r3, [pc, #204]	; (800c528 <HAL_ADC_MspInit+0x290>)
 800c45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c45c:	f003 0302 	and.w	r3, r3, #2
 800c460:	617b      	str	r3, [r7, #20]
 800c462:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c464:	233e      	movs	r3, #62	; 0x3e
 800c466:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c468:	2303      	movs	r3, #3
 800c46a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c46c:	2300      	movs	r3, #0
 800c46e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c470:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c474:	4619      	mov	r1, r3
 800c476:	482d      	ldr	r0, [pc, #180]	; (800c52c <HAL_ADC_MspInit+0x294>)
 800c478:	f7f7 f992 	bl	80037a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 800c47c:	2316      	movs	r3, #22
 800c47e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c480:	2303      	movs	r3, #3
 800c482:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c484:	2300      	movs	r3, #0
 800c486:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c488:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c48c:	4619      	mov	r1, r3
 800c48e:	4828      	ldr	r0, [pc, #160]	; (800c530 <HAL_ADC_MspInit+0x298>)
 800c490:	f7f7 f986 	bl	80037a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c494:	2301      	movs	r3, #1
 800c496:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c498:	2303      	movs	r3, #3
 800c49a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c49c:	2300      	movs	r3, #0
 800c49e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c4a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	4823      	ldr	r0, [pc, #140]	; (800c534 <HAL_ADC_MspInit+0x29c>)
 800c4a8:	f7f7 f97a 	bl	80037a0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800c4ac:	4b25      	ldr	r3, [pc, #148]	; (800c544 <HAL_ADC_MspInit+0x2ac>)
 800c4ae:	4a26      	ldr	r2, [pc, #152]	; (800c548 <HAL_ADC_MspInit+0x2b0>)
 800c4b0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800c4b2:	4b24      	ldr	r3, [pc, #144]	; (800c544 <HAL_ADC_MspInit+0x2ac>)
 800c4b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c4b8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c4ba:	4b22      	ldr	r3, [pc, #136]	; (800c544 <HAL_ADC_MspInit+0x2ac>)
 800c4bc:	2200      	movs	r2, #0
 800c4be:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800c4c0:	4b20      	ldr	r3, [pc, #128]	; (800c544 <HAL_ADC_MspInit+0x2ac>)
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800c4c6:	4b1f      	ldr	r3, [pc, #124]	; (800c544 <HAL_ADC_MspInit+0x2ac>)
 800c4c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c4cc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c4ce:	4b1d      	ldr	r3, [pc, #116]	; (800c544 <HAL_ADC_MspInit+0x2ac>)
 800c4d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4d4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c4d6:	4b1b      	ldr	r3, [pc, #108]	; (800c544 <HAL_ADC_MspInit+0x2ac>)
 800c4d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c4dc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800c4de:	4b19      	ldr	r3, [pc, #100]	; (800c544 <HAL_ADC_MspInit+0x2ac>)
 800c4e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4e4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800c4e6:	4b17      	ldr	r3, [pc, #92]	; (800c544 <HAL_ADC_MspInit+0x2ac>)
 800c4e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c4ec:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c4ee:	4b15      	ldr	r3, [pc, #84]	; (800c544 <HAL_ADC_MspInit+0x2ac>)
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800c4f4:	4813      	ldr	r0, [pc, #76]	; (800c544 <HAL_ADC_MspInit+0x2ac>)
 800c4f6:	f7f6 fd6f 	bl	8002fd8 <HAL_DMA_Init>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d001      	beq.n	800c504 <HAL_ADC_MspInit+0x26c>
      Error_Handler();
 800c500:	f7ff fe9a 	bl	800c238 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	4a0f      	ldr	r2, [pc, #60]	; (800c544 <HAL_ADC_MspInit+0x2ac>)
 800c508:	639a      	str	r2, [r3, #56]	; 0x38
 800c50a:	4a0e      	ldr	r2, [pc, #56]	; (800c544 <HAL_ADC_MspInit+0x2ac>)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c510:	2200      	movs	r2, #0
 800c512:	2100      	movs	r1, #0
 800c514:	2012      	movs	r0, #18
 800c516:	f7f6 fd28 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c51a:	2012      	movs	r0, #18
 800c51c:	f7f6 fd41 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
}
 800c520:	e094      	b.n	800c64c <HAL_ADC_MspInit+0x3b4>
 800c522:	bf00      	nop
 800c524:	40012000 	.word	0x40012000
 800c528:	40023800 	.word	0x40023800
 800c52c:	40020800 	.word	0x40020800
 800c530:	40020000 	.word	0x40020000
 800c534:	40020400 	.word	0x40020400
 800c538:	20000d40 	.word	0x20000d40
 800c53c:	40026410 	.word	0x40026410
 800c540:	40012100 	.word	0x40012100
 800c544:	20000fe8 	.word	0x20000fe8
 800c548:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a40      	ldr	r2, [pc, #256]	; (800c654 <HAL_ADC_MspInit+0x3bc>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d17a      	bne.n	800c64c <HAL_ADC_MspInit+0x3b4>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800c556:	2300      	movs	r3, #0
 800c558:	613b      	str	r3, [r7, #16]
 800c55a:	4b3f      	ldr	r3, [pc, #252]	; (800c658 <HAL_ADC_MspInit+0x3c0>)
 800c55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c55e:	4a3e      	ldr	r2, [pc, #248]	; (800c658 <HAL_ADC_MspInit+0x3c0>)
 800c560:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c564:	6453      	str	r3, [r2, #68]	; 0x44
 800c566:	4b3c      	ldr	r3, [pc, #240]	; (800c658 <HAL_ADC_MspInit+0x3c0>)
 800c568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c56a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c56e:	613b      	str	r3, [r7, #16]
 800c570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c572:	2300      	movs	r3, #0
 800c574:	60fb      	str	r3, [r7, #12]
 800c576:	4b38      	ldr	r3, [pc, #224]	; (800c658 <HAL_ADC_MspInit+0x3c0>)
 800c578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c57a:	4a37      	ldr	r2, [pc, #220]	; (800c658 <HAL_ADC_MspInit+0x3c0>)
 800c57c:	f043 0304 	orr.w	r3, r3, #4
 800c580:	6313      	str	r3, [r2, #48]	; 0x30
 800c582:	4b35      	ldr	r3, [pc, #212]	; (800c658 <HAL_ADC_MspInit+0x3c0>)
 800c584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c586:	f003 0304 	and.w	r3, r3, #4
 800c58a:	60fb      	str	r3, [r7, #12]
 800c58c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c58e:	2300      	movs	r3, #0
 800c590:	60bb      	str	r3, [r7, #8]
 800c592:	4b31      	ldr	r3, [pc, #196]	; (800c658 <HAL_ADC_MspInit+0x3c0>)
 800c594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c596:	4a30      	ldr	r2, [pc, #192]	; (800c658 <HAL_ADC_MspInit+0x3c0>)
 800c598:	f043 0301 	orr.w	r3, r3, #1
 800c59c:	6313      	str	r3, [r2, #48]	; 0x30
 800c59e:	4b2e      	ldr	r3, [pc, #184]	; (800c658 <HAL_ADC_MspInit+0x3c0>)
 800c5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5a2:	f003 0301 	and.w	r3, r3, #1
 800c5a6:	60bb      	str	r3, [r7, #8]
 800c5a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c5aa:	2308      	movs	r3, #8
 800c5ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c5ae:	2303      	movs	r3, #3
 800c5b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c5b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	4827      	ldr	r0, [pc, #156]	; (800c65c <HAL_ADC_MspInit+0x3c4>)
 800c5be:	f7f7 f8ef 	bl	80037a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c5c2:	2308      	movs	r3, #8
 800c5c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c5ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	4822      	ldr	r0, [pc, #136]	; (800c660 <HAL_ADC_MspInit+0x3c8>)
 800c5d6:	f7f7 f8e3 	bl	80037a0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800c5da:	4b22      	ldr	r3, [pc, #136]	; (800c664 <HAL_ADC_MspInit+0x3cc>)
 800c5dc:	4a22      	ldr	r2, [pc, #136]	; (800c668 <HAL_ADC_MspInit+0x3d0>)
 800c5de:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800c5e0:	4b20      	ldr	r3, [pc, #128]	; (800c664 <HAL_ADC_MspInit+0x3cc>)
 800c5e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c5e6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c5e8:	4b1e      	ldr	r3, [pc, #120]	; (800c664 <HAL_ADC_MspInit+0x3cc>)
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800c5ee:	4b1d      	ldr	r3, [pc, #116]	; (800c664 <HAL_ADC_MspInit+0x3cc>)
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800c5f4:	4b1b      	ldr	r3, [pc, #108]	; (800c664 <HAL_ADC_MspInit+0x3cc>)
 800c5f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c5fa:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c5fc:	4b19      	ldr	r3, [pc, #100]	; (800c664 <HAL_ADC_MspInit+0x3cc>)
 800c5fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c602:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c604:	4b17      	ldr	r3, [pc, #92]	; (800c664 <HAL_ADC_MspInit+0x3cc>)
 800c606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c60a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800c60c:	4b15      	ldr	r3, [pc, #84]	; (800c664 <HAL_ADC_MspInit+0x3cc>)
 800c60e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c612:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800c614:	4b13      	ldr	r3, [pc, #76]	; (800c664 <HAL_ADC_MspInit+0x3cc>)
 800c616:	2200      	movs	r2, #0
 800c618:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c61a:	4b12      	ldr	r3, [pc, #72]	; (800c664 <HAL_ADC_MspInit+0x3cc>)
 800c61c:	2200      	movs	r2, #0
 800c61e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800c620:	4810      	ldr	r0, [pc, #64]	; (800c664 <HAL_ADC_MspInit+0x3cc>)
 800c622:	f7f6 fcd9 	bl	8002fd8 <HAL_DMA_Init>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d001      	beq.n	800c630 <HAL_ADC_MspInit+0x398>
      Error_Handler();
 800c62c:	f7ff fe04 	bl	800c238 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	4a0c      	ldr	r2, [pc, #48]	; (800c664 <HAL_ADC_MspInit+0x3cc>)
 800c634:	639a      	str	r2, [r3, #56]	; 0x38
 800c636:	4a0b      	ldr	r2, [pc, #44]	; (800c664 <HAL_ADC_MspInit+0x3cc>)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c63c:	2200      	movs	r2, #0
 800c63e:	2100      	movs	r1, #0
 800c640:	2012      	movs	r0, #18
 800c642:	f7f6 fc92 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c646:	2012      	movs	r0, #18
 800c648:	f7f6 fcab 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
}
 800c64c:	bf00      	nop
 800c64e:	3748      	adds	r7, #72	; 0x48
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	40012200 	.word	0x40012200
 800c658:	40023800 	.word	0x40023800
 800c65c:	40020800 	.word	0x40020800
 800c660:	40020000 	.word	0x40020000
 800c664:	20000ae8 	.word	0x20000ae8
 800c668:	40026428 	.word	0x40026428

0800c66c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b08a      	sub	sp, #40	; 0x28
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c674:	f107 0314 	add.w	r3, r7, #20
 800c678:	2200      	movs	r2, #0
 800c67a:	601a      	str	r2, [r3, #0]
 800c67c:	605a      	str	r2, [r3, #4]
 800c67e:	609a      	str	r2, [r3, #8]
 800c680:	60da      	str	r2, [r3, #12]
 800c682:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a1d      	ldr	r2, [pc, #116]	; (800c700 <HAL_CAN_MspInit+0x94>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d133      	bne.n	800c6f6 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800c68e:	2300      	movs	r3, #0
 800c690:	613b      	str	r3, [r7, #16]
 800c692:	4b1c      	ldr	r3, [pc, #112]	; (800c704 <HAL_CAN_MspInit+0x98>)
 800c694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c696:	4a1b      	ldr	r2, [pc, #108]	; (800c704 <HAL_CAN_MspInit+0x98>)
 800c698:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c69c:	6413      	str	r3, [r2, #64]	; 0x40
 800c69e:	4b19      	ldr	r3, [pc, #100]	; (800c704 <HAL_CAN_MspInit+0x98>)
 800c6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6a6:	613b      	str	r3, [r7, #16]
 800c6a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	60fb      	str	r3, [r7, #12]
 800c6ae:	4b15      	ldr	r3, [pc, #84]	; (800c704 <HAL_CAN_MspInit+0x98>)
 800c6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6b2:	4a14      	ldr	r2, [pc, #80]	; (800c704 <HAL_CAN_MspInit+0x98>)
 800c6b4:	f043 0308 	orr.w	r3, r3, #8
 800c6b8:	6313      	str	r3, [r2, #48]	; 0x30
 800c6ba:	4b12      	ldr	r3, [pc, #72]	; (800c704 <HAL_CAN_MspInit+0x98>)
 800c6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6be:	f003 0308 	and.w	r3, r3, #8
 800c6c2:	60fb      	str	r3, [r7, #12]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800c6c6:	2303      	movs	r3, #3
 800c6c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6ca:	2302      	movs	r3, #2
 800c6cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6d2:	2303      	movs	r3, #3
 800c6d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800c6d6:	2309      	movs	r3, #9
 800c6d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c6da:	f107 0314 	add.w	r3, r7, #20
 800c6de:	4619      	mov	r1, r3
 800c6e0:	4809      	ldr	r0, [pc, #36]	; (800c708 <HAL_CAN_MspInit+0x9c>)
 800c6e2:	f7f7 f85d 	bl	80037a0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	2014      	movs	r0, #20
 800c6ec:	f7f6 fc3d 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800c6f0:	2014      	movs	r0, #20
 800c6f2:	f7f6 fc56 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800c6f6:	bf00      	nop
 800c6f8:	3728      	adds	r7, #40	; 0x28
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	40006400 	.word	0x40006400
 800c704:	40023800 	.word	0x40023800
 800c708:	40020c00 	.word	0x40020c00

0800c70c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b08c      	sub	sp, #48	; 0x30
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c714:	f107 031c 	add.w	r3, r7, #28
 800c718:	2200      	movs	r2, #0
 800c71a:	601a      	str	r2, [r3, #0]
 800c71c:	605a      	str	r2, [r3, #4]
 800c71e:	609a      	str	r2, [r3, #8]
 800c720:	60da      	str	r2, [r3, #12]
 800c722:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a32      	ldr	r2, [pc, #200]	; (800c7f4 <HAL_I2C_MspInit+0xe8>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d12c      	bne.n	800c788 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c72e:	2300      	movs	r3, #0
 800c730:	61bb      	str	r3, [r7, #24]
 800c732:	4b31      	ldr	r3, [pc, #196]	; (800c7f8 <HAL_I2C_MspInit+0xec>)
 800c734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c736:	4a30      	ldr	r2, [pc, #192]	; (800c7f8 <HAL_I2C_MspInit+0xec>)
 800c738:	f043 0302 	orr.w	r3, r3, #2
 800c73c:	6313      	str	r3, [r2, #48]	; 0x30
 800c73e:	4b2e      	ldr	r3, [pc, #184]	; (800c7f8 <HAL_I2C_MspInit+0xec>)
 800c740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c742:	f003 0302 	and.w	r3, r3, #2
 800c746:	61bb      	str	r3, [r7, #24]
 800c748:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c74a:	23c0      	movs	r3, #192	; 0xc0
 800c74c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c74e:	2312      	movs	r3, #18
 800c750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c752:	2301      	movs	r3, #1
 800c754:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c756:	2303      	movs	r3, #3
 800c758:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800c75a:	2304      	movs	r3, #4
 800c75c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c75e:	f107 031c 	add.w	r3, r7, #28
 800c762:	4619      	mov	r1, r3
 800c764:	4825      	ldr	r0, [pc, #148]	; (800c7fc <HAL_I2C_MspInit+0xf0>)
 800c766:	f7f7 f81b 	bl	80037a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c76a:	2300      	movs	r3, #0
 800c76c:	617b      	str	r3, [r7, #20]
 800c76e:	4b22      	ldr	r3, [pc, #136]	; (800c7f8 <HAL_I2C_MspInit+0xec>)
 800c770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c772:	4a21      	ldr	r2, [pc, #132]	; (800c7f8 <HAL_I2C_MspInit+0xec>)
 800c774:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c778:	6413      	str	r3, [r2, #64]	; 0x40
 800c77a:	4b1f      	ldr	r3, [pc, #124]	; (800c7f8 <HAL_I2C_MspInit+0xec>)
 800c77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c77e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c782:	617b      	str	r3, [r7, #20]
 800c784:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800c786:	e031      	b.n	800c7ec <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a1c      	ldr	r2, [pc, #112]	; (800c800 <HAL_I2C_MspInit+0xf4>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d12c      	bne.n	800c7ec <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c792:	2300      	movs	r3, #0
 800c794:	613b      	str	r3, [r7, #16]
 800c796:	4b18      	ldr	r3, [pc, #96]	; (800c7f8 <HAL_I2C_MspInit+0xec>)
 800c798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c79a:	4a17      	ldr	r2, [pc, #92]	; (800c7f8 <HAL_I2C_MspInit+0xec>)
 800c79c:	f043 0302 	orr.w	r3, r3, #2
 800c7a0:	6313      	str	r3, [r2, #48]	; 0x30
 800c7a2:	4b15      	ldr	r3, [pc, #84]	; (800c7f8 <HAL_I2C_MspInit+0xec>)
 800c7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7a6:	f003 0302 	and.w	r3, r3, #2
 800c7aa:	613b      	str	r3, [r7, #16]
 800c7ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c7ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c7b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c7b4:	2312      	movs	r3, #18
 800c7b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7bc:	2303      	movs	r3, #3
 800c7be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800c7c0:	2304      	movs	r3, #4
 800c7c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c7c4:	f107 031c 	add.w	r3, r7, #28
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	480c      	ldr	r0, [pc, #48]	; (800c7fc <HAL_I2C_MspInit+0xf0>)
 800c7cc:	f7f6 ffe8 	bl	80037a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	60fb      	str	r3, [r7, #12]
 800c7d4:	4b08      	ldr	r3, [pc, #32]	; (800c7f8 <HAL_I2C_MspInit+0xec>)
 800c7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d8:	4a07      	ldr	r2, [pc, #28]	; (800c7f8 <HAL_I2C_MspInit+0xec>)
 800c7da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c7de:	6413      	str	r3, [r2, #64]	; 0x40
 800c7e0:	4b05      	ldr	r3, [pc, #20]	; (800c7f8 <HAL_I2C_MspInit+0xec>)
 800c7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7e8:	60fb      	str	r3, [r7, #12]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
}
 800c7ec:	bf00      	nop
 800c7ee:	3730      	adds	r7, #48	; 0x30
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	40005400 	.word	0x40005400
 800c7f8:	40023800 	.word	0x40023800
 800c7fc:	40020400 	.word	0x40020400
 800c800:	40005800 	.word	0x40005800

0800c804 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a05      	ldr	r2, [pc, #20]	; (800c828 <HAL_RTC_MspInit+0x24>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d102      	bne.n	800c81c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c816:	4b05      	ldr	r3, [pc, #20]	; (800c82c <HAL_RTC_MspInit+0x28>)
 800c818:	2201      	movs	r2, #1
 800c81a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800c81c:	bf00      	nop
 800c81e:	370c      	adds	r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr
 800c828:	40002800 	.word	0x40002800
 800c82c:	42470e3c 	.word	0x42470e3c

0800c830 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b08a      	sub	sp, #40	; 0x28
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c838:	f107 0314 	add.w	r3, r7, #20
 800c83c:	2200      	movs	r2, #0
 800c83e:	601a      	str	r2, [r3, #0]
 800c840:	605a      	str	r2, [r3, #4]
 800c842:	609a      	str	r2, [r3, #8]
 800c844:	60da      	str	r2, [r3, #12]
 800c846:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a1d      	ldr	r2, [pc, #116]	; (800c8c4 <HAL_SPI_MspInit+0x94>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d134      	bne.n	800c8bc <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c852:	2300      	movs	r3, #0
 800c854:	613b      	str	r3, [r7, #16]
 800c856:	4b1c      	ldr	r3, [pc, #112]	; (800c8c8 <HAL_SPI_MspInit+0x98>)
 800c858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c85a:	4a1b      	ldr	r2, [pc, #108]	; (800c8c8 <HAL_SPI_MspInit+0x98>)
 800c85c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c860:	6413      	str	r3, [r2, #64]	; 0x40
 800c862:	4b19      	ldr	r3, [pc, #100]	; (800c8c8 <HAL_SPI_MspInit+0x98>)
 800c864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c86a:	613b      	str	r3, [r7, #16]
 800c86c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c86e:	2300      	movs	r3, #0
 800c870:	60fb      	str	r3, [r7, #12]
 800c872:	4b15      	ldr	r3, [pc, #84]	; (800c8c8 <HAL_SPI_MspInit+0x98>)
 800c874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c876:	4a14      	ldr	r2, [pc, #80]	; (800c8c8 <HAL_SPI_MspInit+0x98>)
 800c878:	f043 0302 	orr.w	r3, r3, #2
 800c87c:	6313      	str	r3, [r2, #48]	; 0x30
 800c87e:	4b12      	ldr	r3, [pc, #72]	; (800c8c8 <HAL_SPI_MspInit+0x98>)
 800c880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c882:	f003 0302 	and.w	r3, r3, #2
 800c886:	60fb      	str	r3, [r7, #12]
 800c888:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800c88a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800c88e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c890:	2302      	movs	r3, #2
 800c892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c894:	2300      	movs	r3, #0
 800c896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c898:	2303      	movs	r3, #3
 800c89a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c89c:	2305      	movs	r3, #5
 800c89e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c8a0:	f107 0314 	add.w	r3, r7, #20
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	4809      	ldr	r0, [pc, #36]	; (800c8cc <HAL_SPI_MspInit+0x9c>)
 800c8a8:	f7f6 ff7a 	bl	80037a0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	2024      	movs	r0, #36	; 0x24
 800c8b2:	f7f6 fb5a 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800c8b6:	2024      	movs	r0, #36	; 0x24
 800c8b8:	f7f6 fb73 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800c8bc:	bf00      	nop
 800c8be:	3728      	adds	r7, #40	; 0x28
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	40003800 	.word	0x40003800
 800c8c8:	40023800 	.word	0x40023800
 800c8cc:	40020400 	.word	0x40020400

0800c8d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b090      	sub	sp, #64	; 0x40
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c8dc:	2200      	movs	r2, #0
 800c8de:	601a      	str	r2, [r3, #0]
 800c8e0:	605a      	str	r2, [r3, #4]
 800c8e2:	609a      	str	r2, [r3, #8]
 800c8e4:	60da      	str	r2, [r3, #12]
 800c8e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a87      	ldr	r2, [pc, #540]	; (800cb0c <HAL_TIM_Base_MspInit+0x23c>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d12e      	bne.n	800c950 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8f6:	4b86      	ldr	r3, [pc, #536]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800c8f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8fa:	4a85      	ldr	r2, [pc, #532]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800c8fc:	f043 0301 	orr.w	r3, r3, #1
 800c900:	6453      	str	r3, [r2, #68]	; 0x44
 800c902:	4b83      	ldr	r3, [pc, #524]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800c904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c906:	f003 0301 	and.w	r3, r3, #1
 800c90a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800c90e:	2200      	movs	r2, #0
 800c910:	2100      	movs	r1, #0
 800c912:	2018      	movs	r0, #24
 800c914:	f7f6 fb29 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800c918:	2018      	movs	r0, #24
 800c91a:	f7f6 fb42 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800c91e:	2200      	movs	r2, #0
 800c920:	2100      	movs	r1, #0
 800c922:	2019      	movs	r0, #25
 800c924:	f7f6 fb21 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800c928:	2019      	movs	r0, #25
 800c92a:	f7f6 fb3a 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800c92e:	2200      	movs	r2, #0
 800c930:	2100      	movs	r1, #0
 800c932:	201a      	movs	r0, #26
 800c934:	f7f6 fb19 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800c938:	201a      	movs	r0, #26
 800c93a:	f7f6 fb32 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800c93e:	2200      	movs	r2, #0
 800c940:	2100      	movs	r1, #0
 800c942:	201b      	movs	r0, #27
 800c944:	f7f6 fb11 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800c948:	201b      	movs	r0, #27
 800c94a:	f7f6 fb2a 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800c94e:	e0d8      	b.n	800cb02 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM2)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c958:	d10e      	bne.n	800c978 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c95a:	2300      	movs	r3, #0
 800c95c:	627b      	str	r3, [r7, #36]	; 0x24
 800c95e:	4b6c      	ldr	r3, [pc, #432]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800c960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c962:	4a6b      	ldr	r2, [pc, #428]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800c964:	f043 0301 	orr.w	r3, r3, #1
 800c968:	6413      	str	r3, [r2, #64]	; 0x40
 800c96a:	4b69      	ldr	r3, [pc, #420]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800c96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c96e:	f003 0301 	and.w	r3, r3, #1
 800c972:	627b      	str	r3, [r7, #36]	; 0x24
 800c974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c976:	e0c4      	b.n	800cb02 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM3)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a65      	ldr	r2, [pc, #404]	; (800cb14 <HAL_TIM_Base_MspInit+0x244>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d116      	bne.n	800c9b0 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c982:	2300      	movs	r3, #0
 800c984:	623b      	str	r3, [r7, #32]
 800c986:	4b62      	ldr	r3, [pc, #392]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800c988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c98a:	4a61      	ldr	r2, [pc, #388]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800c98c:	f043 0302 	orr.w	r3, r3, #2
 800c990:	6413      	str	r3, [r2, #64]	; 0x40
 800c992:	4b5f      	ldr	r3, [pc, #380]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800c994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c996:	f003 0302 	and.w	r3, r3, #2
 800c99a:	623b      	str	r3, [r7, #32]
 800c99c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800c99e:	2200      	movs	r2, #0
 800c9a0:	2100      	movs	r1, #0
 800c9a2:	201d      	movs	r0, #29
 800c9a4:	f7f6 fae1 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800c9a8:	201d      	movs	r0, #29
 800c9aa:	f7f6 fafa 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
}
 800c9ae:	e0a8      	b.n	800cb02 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM5)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a58      	ldr	r2, [pc, #352]	; (800cb18 <HAL_TIM_Base_MspInit+0x248>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d116      	bne.n	800c9e8 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	61fb      	str	r3, [r7, #28]
 800c9be:	4b54      	ldr	r3, [pc, #336]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800c9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c2:	4a53      	ldr	r2, [pc, #332]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800c9c4:	f043 0308 	orr.w	r3, r3, #8
 800c9c8:	6413      	str	r3, [r2, #64]	; 0x40
 800c9ca:	4b51      	ldr	r3, [pc, #324]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800c9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ce:	f003 0308 	and.w	r3, r3, #8
 800c9d2:	61fb      	str	r3, [r7, #28]
 800c9d4:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	2100      	movs	r1, #0
 800c9da:	2032      	movs	r0, #50	; 0x32
 800c9dc:	f7f6 fac5 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800c9e0:	2032      	movs	r0, #50	; 0x32
 800c9e2:	f7f6 fade 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
}
 800c9e6:	e08c      	b.n	800cb02 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM6)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a4b      	ldr	r2, [pc, #300]	; (800cb1c <HAL_TIM_Base_MspInit+0x24c>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d116      	bne.n	800ca20 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	61bb      	str	r3, [r7, #24]
 800c9f6:	4b46      	ldr	r3, [pc, #280]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800c9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9fa:	4a45      	ldr	r2, [pc, #276]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800c9fc:	f043 0310 	orr.w	r3, r3, #16
 800ca00:	6413      	str	r3, [r2, #64]	; 0x40
 800ca02:	4b43      	ldr	r3, [pc, #268]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800ca04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca06:	f003 0310 	and.w	r3, r3, #16
 800ca0a:	61bb      	str	r3, [r7, #24]
 800ca0c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800ca0e:	2200      	movs	r2, #0
 800ca10:	2100      	movs	r1, #0
 800ca12:	2036      	movs	r0, #54	; 0x36
 800ca14:	f7f6 faa9 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ca18:	2036      	movs	r0, #54	; 0x36
 800ca1a:	f7f6 fac2 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
}
 800ca1e:	e070      	b.n	800cb02 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM9)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a3e      	ldr	r2, [pc, #248]	; (800cb20 <HAL_TIM_Base_MspInit+0x250>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d116      	bne.n	800ca58 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	617b      	str	r3, [r7, #20]
 800ca2e:	4b38      	ldr	r3, [pc, #224]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800ca30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca32:	4a37      	ldr	r2, [pc, #220]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800ca34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca38:	6453      	str	r3, [r2, #68]	; 0x44
 800ca3a:	4b35      	ldr	r3, [pc, #212]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800ca3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca42:	617b      	str	r3, [r7, #20]
 800ca44:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800ca46:	2200      	movs	r2, #0
 800ca48:	2100      	movs	r1, #0
 800ca4a:	2018      	movs	r0, #24
 800ca4c:	f7f6 fa8d 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800ca50:	2018      	movs	r0, #24
 800ca52:	f7f6 faa6 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
}
 800ca56:	e054      	b.n	800cb02 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM12)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a31      	ldr	r2, [pc, #196]	; (800cb24 <HAL_TIM_Base_MspInit+0x254>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d116      	bne.n	800ca90 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800ca62:	2300      	movs	r3, #0
 800ca64:	613b      	str	r3, [r7, #16]
 800ca66:	4b2a      	ldr	r3, [pc, #168]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800ca68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca6a:	4a29      	ldr	r2, [pc, #164]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800ca6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca70:	6413      	str	r3, [r2, #64]	; 0x40
 800ca72:	4b27      	ldr	r3, [pc, #156]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800ca74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca7a:	613b      	str	r3, [r7, #16]
 800ca7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800ca7e:	2200      	movs	r2, #0
 800ca80:	2100      	movs	r1, #0
 800ca82:	202b      	movs	r0, #43	; 0x2b
 800ca84:	f7f6 fa71 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800ca88:	202b      	movs	r0, #43	; 0x2b
 800ca8a:	f7f6 fa8a 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
}
 800ca8e:	e038      	b.n	800cb02 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM13)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a24      	ldr	r2, [pc, #144]	; (800cb28 <HAL_TIM_Base_MspInit+0x258>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d133      	bne.n	800cb02 <HAL_TIM_Base_MspInit+0x232>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	60fb      	str	r3, [r7, #12]
 800ca9e:	4b1c      	ldr	r3, [pc, #112]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800caa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa2:	4a1b      	ldr	r2, [pc, #108]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800caa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caa8:	6413      	str	r3, [r2, #64]	; 0x40
 800caaa:	4b19      	ldr	r3, [pc, #100]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800caac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cab2:	60fb      	str	r3, [r7, #12]
 800cab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cab6:	2300      	movs	r3, #0
 800cab8:	60bb      	str	r3, [r7, #8]
 800caba:	4b15      	ldr	r3, [pc, #84]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800cabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cabe:	4a14      	ldr	r2, [pc, #80]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800cac0:	f043 0301 	orr.w	r3, r3, #1
 800cac4:	6313      	str	r3, [r2, #48]	; 0x30
 800cac6:	4b12      	ldr	r3, [pc, #72]	; (800cb10 <HAL_TIM_Base_MspInit+0x240>)
 800cac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caca:	f003 0301 	and.w	r3, r3, #1
 800cace:	60bb      	str	r3, [r7, #8]
 800cad0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800cad2:	2340      	movs	r3, #64	; 0x40
 800cad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cad6:	2302      	movs	r3, #2
 800cad8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cada:	2300      	movs	r3, #0
 800cadc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cade:	2300      	movs	r3, #0
 800cae0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800cae2:	2309      	movs	r3, #9
 800cae4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800caea:	4619      	mov	r1, r3
 800caec:	480f      	ldr	r0, [pc, #60]	; (800cb2c <HAL_TIM_Base_MspInit+0x25c>)
 800caee:	f7f6 fe57 	bl	80037a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800caf2:	2200      	movs	r2, #0
 800caf4:	2100      	movs	r1, #0
 800caf6:	202c      	movs	r0, #44	; 0x2c
 800caf8:	f7f6 fa37 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800cafc:	202c      	movs	r0, #44	; 0x2c
 800cafe:	f7f6 fa50 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
}
 800cb02:	bf00      	nop
 800cb04:	3740      	adds	r7, #64	; 0x40
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	bf00      	nop
 800cb0c:	40010000 	.word	0x40010000
 800cb10:	40023800 	.word	0x40023800
 800cb14:	40000400 	.word	0x40000400
 800cb18:	40000c00 	.word	0x40000c00
 800cb1c:	40001000 	.word	0x40001000
 800cb20:	40014000 	.word	0x40014000
 800cb24:	40001800 	.word	0x40001800
 800cb28:	40001c00 	.word	0x40001c00
 800cb2c:	40020000 	.word	0x40020000

0800cb30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b08a      	sub	sp, #40	; 0x28
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb38:	f107 0314 	add.w	r3, r7, #20
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	601a      	str	r2, [r3, #0]
 800cb40:	605a      	str	r2, [r3, #4]
 800cb42:	609a      	str	r2, [r3, #8]
 800cb44:	60da      	str	r2, [r3, #12]
 800cb46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a29      	ldr	r2, [pc, #164]	; (800cbf4 <HAL_TIM_Encoder_MspInit+0xc4>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d14b      	bne.n	800cbea <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800cb52:	2300      	movs	r3, #0
 800cb54:	613b      	str	r3, [r7, #16]
 800cb56:	4b28      	ldr	r3, [pc, #160]	; (800cbf8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800cb58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb5a:	4a27      	ldr	r2, [pc, #156]	; (800cbf8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800cb5c:	f043 0302 	orr.w	r3, r3, #2
 800cb60:	6453      	str	r3, [r2, #68]	; 0x44
 800cb62:	4b25      	ldr	r3, [pc, #148]	; (800cbf8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800cb64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb66:	f003 0302 	and.w	r3, r3, #2
 800cb6a:	613b      	str	r3, [r7, #16]
 800cb6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cb6e:	2300      	movs	r3, #0
 800cb70:	60fb      	str	r3, [r7, #12]
 800cb72:	4b21      	ldr	r3, [pc, #132]	; (800cbf8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800cb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb76:	4a20      	ldr	r2, [pc, #128]	; (800cbf8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800cb78:	f043 0304 	orr.w	r3, r3, #4
 800cb7c:	6313      	str	r3, [r2, #48]	; 0x30
 800cb7e:	4b1e      	ldr	r3, [pc, #120]	; (800cbf8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800cb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb82:	f003 0304 	and.w	r3, r3, #4
 800cb86:	60fb      	str	r3, [r7, #12]
 800cb88:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800cb8a:	23c0      	movs	r3, #192	; 0xc0
 800cb8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb8e:	2302      	movs	r3, #2
 800cb90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb92:	2300      	movs	r3, #0
 800cb94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb96:	2300      	movs	r3, #0
 800cb98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cb9a:	2303      	movs	r3, #3
 800cb9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cb9e:	f107 0314 	add.w	r3, r7, #20
 800cba2:	4619      	mov	r1, r3
 800cba4:	4815      	ldr	r0, [pc, #84]	; (800cbfc <HAL_TIM_Encoder_MspInit+0xcc>)
 800cba6:	f7f6 fdfb 	bl	80037a0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800cbaa:	2200      	movs	r2, #0
 800cbac:	2100      	movs	r1, #0
 800cbae:	202b      	movs	r0, #43	; 0x2b
 800cbb0:	f7f6 f9db 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800cbb4:	202b      	movs	r0, #43	; 0x2b
 800cbb6:	f7f6 f9f4 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800cbba:	2200      	movs	r2, #0
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	202c      	movs	r0, #44	; 0x2c
 800cbc0:	f7f6 f9d3 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800cbc4:	202c      	movs	r0, #44	; 0x2c
 800cbc6:	f7f6 f9ec 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800cbca:	2200      	movs	r2, #0
 800cbcc:	2100      	movs	r1, #0
 800cbce:	202d      	movs	r0, #45	; 0x2d
 800cbd0:	f7f6 f9cb 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800cbd4:	202d      	movs	r0, #45	; 0x2d
 800cbd6:	f7f6 f9e4 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800cbda:	2200      	movs	r2, #0
 800cbdc:	2100      	movs	r1, #0
 800cbde:	202e      	movs	r0, #46	; 0x2e
 800cbe0:	f7f6 f9c3 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800cbe4:	202e      	movs	r0, #46	; 0x2e
 800cbe6:	f7f6 f9dc 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800cbea:	bf00      	nop
 800cbec:	3728      	adds	r7, #40	; 0x28
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	40010400 	.word	0x40010400
 800cbf8:	40023800 	.word	0x40023800
 800cbfc:	40020800 	.word	0x40020800

0800cc00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b08a      	sub	sp, #40	; 0x28
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc08:	f107 0314 	add.w	r3, r7, #20
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	601a      	str	r2, [r3, #0]
 800cc10:	605a      	str	r2, [r3, #4]
 800cc12:	609a      	str	r2, [r3, #8]
 800cc14:	60da      	str	r2, [r3, #12]
 800cc16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a24      	ldr	r2, [pc, #144]	; (800ccb0 <HAL_TIM_MspPostInit+0xb0>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d11f      	bne.n	800cc62 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800cc22:	2300      	movs	r3, #0
 800cc24:	613b      	str	r3, [r7, #16]
 800cc26:	4b23      	ldr	r3, [pc, #140]	; (800ccb4 <HAL_TIM_MspPostInit+0xb4>)
 800cc28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc2a:	4a22      	ldr	r2, [pc, #136]	; (800ccb4 <HAL_TIM_MspPostInit+0xb4>)
 800cc2c:	f043 0310 	orr.w	r3, r3, #16
 800cc30:	6313      	str	r3, [r2, #48]	; 0x30
 800cc32:	4b20      	ldr	r3, [pc, #128]	; (800ccb4 <HAL_TIM_MspPostInit+0xb4>)
 800cc34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc36:	f003 0310 	and.w	r3, r3, #16
 800cc3a:	613b      	str	r3, [r7, #16]
 800cc3c:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800cc3e:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 800cc42:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc44:	2302      	movs	r3, #2
 800cc46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800cc50:	2301      	movs	r3, #1
 800cc52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cc54:	f107 0314 	add.w	r3, r7, #20
 800cc58:	4619      	mov	r1, r3
 800cc5a:	4817      	ldr	r0, [pc, #92]	; (800ccb8 <HAL_TIM_MspPostInit+0xb8>)
 800cc5c:	f7f6 fda0 	bl	80037a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800cc60:	e022      	b.n	800cca8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a15      	ldr	r2, [pc, #84]	; (800ccbc <HAL_TIM_MspPostInit+0xbc>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d11d      	bne.n	800cca8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	60fb      	str	r3, [r7, #12]
 800cc70:	4b10      	ldr	r3, [pc, #64]	; (800ccb4 <HAL_TIM_MspPostInit+0xb4>)
 800cc72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc74:	4a0f      	ldr	r2, [pc, #60]	; (800ccb4 <HAL_TIM_MspPostInit+0xb4>)
 800cc76:	f043 0310 	orr.w	r3, r3, #16
 800cc7a:	6313      	str	r3, [r2, #48]	; 0x30
 800cc7c:	4b0d      	ldr	r3, [pc, #52]	; (800ccb4 <HAL_TIM_MspPostInit+0xb4>)
 800cc7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc80:	f003 0310 	and.w	r3, r3, #16
 800cc84:	60fb      	str	r3, [r7, #12]
 800cc86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800cc88:	2360      	movs	r3, #96	; 0x60
 800cc8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc90:	2300      	movs	r3, #0
 800cc92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc94:	2300      	movs	r3, #0
 800cc96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800cc98:	2303      	movs	r3, #3
 800cc9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cc9c:	f107 0314 	add.w	r3, r7, #20
 800cca0:	4619      	mov	r1, r3
 800cca2:	4805      	ldr	r0, [pc, #20]	; (800ccb8 <HAL_TIM_MspPostInit+0xb8>)
 800cca4:	f7f6 fd7c 	bl	80037a0 <HAL_GPIO_Init>
}
 800cca8:	bf00      	nop
 800ccaa:	3728      	adds	r7, #40	; 0x28
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	40010000 	.word	0x40010000
 800ccb4:	40023800 	.word	0x40023800
 800ccb8:	40021000 	.word	0x40021000
 800ccbc:	40014000 	.word	0x40014000

0800ccc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b08a      	sub	sp, #40	; 0x28
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccc8:	f107 0314 	add.w	r3, r7, #20
 800cccc:	2200      	movs	r2, #0
 800ccce:	601a      	str	r2, [r3, #0]
 800ccd0:	605a      	str	r2, [r3, #4]
 800ccd2:	609a      	str	r2, [r3, #8]
 800ccd4:	60da      	str	r2, [r3, #12]
 800ccd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a34      	ldr	r2, [pc, #208]	; (800cdb0 <HAL_UART_MspInit+0xf0>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d162      	bne.n	800cda8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800cce2:	2300      	movs	r3, #0
 800cce4:	613b      	str	r3, [r7, #16]
 800cce6:	4b33      	ldr	r3, [pc, #204]	; (800cdb4 <HAL_UART_MspInit+0xf4>)
 800cce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccea:	4a32      	ldr	r2, [pc, #200]	; (800cdb4 <HAL_UART_MspInit+0xf4>)
 800ccec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ccf0:	6413      	str	r3, [r2, #64]	; 0x40
 800ccf2:	4b30      	ldr	r3, [pc, #192]	; (800cdb4 <HAL_UART_MspInit+0xf4>)
 800ccf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ccfa:	613b      	str	r3, [r7, #16]
 800ccfc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ccfe:	2300      	movs	r3, #0
 800cd00:	60fb      	str	r3, [r7, #12]
 800cd02:	4b2c      	ldr	r3, [pc, #176]	; (800cdb4 <HAL_UART_MspInit+0xf4>)
 800cd04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd06:	4a2b      	ldr	r2, [pc, #172]	; (800cdb4 <HAL_UART_MspInit+0xf4>)
 800cd08:	f043 0308 	orr.w	r3, r3, #8
 800cd0c:	6313      	str	r3, [r2, #48]	; 0x30
 800cd0e:	4b29      	ldr	r3, [pc, #164]	; (800cdb4 <HAL_UART_MspInit+0xf4>)
 800cd10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd12:	f003 0308 	and.w	r3, r3, #8
 800cd16:	60fb      	str	r3, [r7, #12]
 800cd18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800cd1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cd1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd20:	2302      	movs	r3, #2
 800cd22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cd24:	2301      	movs	r3, #1
 800cd26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd28:	2303      	movs	r3, #3
 800cd2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800cd2c:	2307      	movs	r3, #7
 800cd2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cd30:	f107 0314 	add.w	r3, r7, #20
 800cd34:	4619      	mov	r1, r3
 800cd36:	4820      	ldr	r0, [pc, #128]	; (800cdb8 <HAL_UART_MspInit+0xf8>)
 800cd38:	f7f6 fd32 	bl	80037a0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800cd3c:	4b1f      	ldr	r3, [pc, #124]	; (800cdbc <HAL_UART_MspInit+0xfc>)
 800cd3e:	4a20      	ldr	r2, [pc, #128]	; (800cdc0 <HAL_UART_MspInit+0x100>)
 800cd40:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800cd42:	4b1e      	ldr	r3, [pc, #120]	; (800cdbc <HAL_UART_MspInit+0xfc>)
 800cd44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cd48:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cd4a:	4b1c      	ldr	r3, [pc, #112]	; (800cdbc <HAL_UART_MspInit+0xfc>)
 800cd4c:	2240      	movs	r2, #64	; 0x40
 800cd4e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cd50:	4b1a      	ldr	r3, [pc, #104]	; (800cdbc <HAL_UART_MspInit+0xfc>)
 800cd52:	2200      	movs	r2, #0
 800cd54:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800cd56:	4b19      	ldr	r3, [pc, #100]	; (800cdbc <HAL_UART_MspInit+0xfc>)
 800cd58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cd5c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cd5e:	4b17      	ldr	r3, [pc, #92]	; (800cdbc <HAL_UART_MspInit+0xfc>)
 800cd60:	2200      	movs	r2, #0
 800cd62:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cd64:	4b15      	ldr	r3, [pc, #84]	; (800cdbc <HAL_UART_MspInit+0xfc>)
 800cd66:	2200      	movs	r2, #0
 800cd68:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800cd6a:	4b14      	ldr	r3, [pc, #80]	; (800cdbc <HAL_UART_MspInit+0xfc>)
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800cd70:	4b12      	ldr	r3, [pc, #72]	; (800cdbc <HAL_UART_MspInit+0xfc>)
 800cd72:	2200      	movs	r2, #0
 800cd74:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cd76:	4b11      	ldr	r3, [pc, #68]	; (800cdbc <HAL_UART_MspInit+0xfc>)
 800cd78:	2200      	movs	r2, #0
 800cd7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800cd7c:	480f      	ldr	r0, [pc, #60]	; (800cdbc <HAL_UART_MspInit+0xfc>)
 800cd7e:	f7f6 f92b 	bl	8002fd8 <HAL_DMA_Init>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d001      	beq.n	800cd8c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800cd88:	f7ff fa56 	bl	800c238 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a0b      	ldr	r2, [pc, #44]	; (800cdbc <HAL_UART_MspInit+0xfc>)
 800cd90:	631a      	str	r2, [r3, #48]	; 0x30
 800cd92:	4a0a      	ldr	r2, [pc, #40]	; (800cdbc <HAL_UART_MspInit+0xfc>)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800cd98:	2200      	movs	r2, #0
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	2027      	movs	r0, #39	; 0x27
 800cd9e:	f7f6 f8e4 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800cda2:	2027      	movs	r0, #39	; 0x27
 800cda4:	f7f6 f8fd 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800cda8:	bf00      	nop
 800cdaa:	3728      	adds	r7, #40	; 0x28
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}
 800cdb0:	40004800 	.word	0x40004800
 800cdb4:	40023800 	.word	0x40023800
 800cdb8:	40020c00 	.word	0x40020c00
 800cdbc:	20000b48 	.word	0x20000b48
 800cdc0:	40026058 	.word	0x40026058

0800cdc4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b08a      	sub	sp, #40	; 0x28
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdcc:	f107 0314 	add.w	r3, r7, #20
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	601a      	str	r2, [r3, #0]
 800cdd4:	605a      	str	r2, [r3, #4]
 800cdd6:	609a      	str	r2, [r3, #8]
 800cdd8:	60da      	str	r2, [r3, #12]
 800cdda:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cde4:	d132      	bne.n	800ce4c <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cde6:	2300      	movs	r3, #0
 800cde8:	613b      	str	r3, [r7, #16]
 800cdea:	4b1a      	ldr	r3, [pc, #104]	; (800ce54 <HAL_PCD_MspInit+0x90>)
 800cdec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdee:	4a19      	ldr	r2, [pc, #100]	; (800ce54 <HAL_PCD_MspInit+0x90>)
 800cdf0:	f043 0301 	orr.w	r3, r3, #1
 800cdf4:	6313      	str	r3, [r2, #48]	; 0x30
 800cdf6:	4b17      	ldr	r3, [pc, #92]	; (800ce54 <HAL_PCD_MspInit+0x90>)
 800cdf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	613b      	str	r3, [r7, #16]
 800ce00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ce02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ce06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce08:	2302      	movs	r3, #2
 800ce0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce10:	2303      	movs	r3, #3
 800ce12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ce14:	230a      	movs	r3, #10
 800ce16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce18:	f107 0314 	add.w	r3, r7, #20
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	480e      	ldr	r0, [pc, #56]	; (800ce58 <HAL_PCD_MspInit+0x94>)
 800ce20:	f7f6 fcbe 	bl	80037a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ce24:	4b0b      	ldr	r3, [pc, #44]	; (800ce54 <HAL_PCD_MspInit+0x90>)
 800ce26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce28:	4a0a      	ldr	r2, [pc, #40]	; (800ce54 <HAL_PCD_MspInit+0x90>)
 800ce2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce2e:	6353      	str	r3, [r2, #52]	; 0x34
 800ce30:	2300      	movs	r3, #0
 800ce32:	60fb      	str	r3, [r7, #12]
 800ce34:	4b07      	ldr	r3, [pc, #28]	; (800ce54 <HAL_PCD_MspInit+0x90>)
 800ce36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce38:	4a06      	ldr	r2, [pc, #24]	; (800ce54 <HAL_PCD_MspInit+0x90>)
 800ce3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce3e:	6453      	str	r3, [r2, #68]	; 0x44
 800ce40:	4b04      	ldr	r3, [pc, #16]	; (800ce54 <HAL_PCD_MspInit+0x90>)
 800ce42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce48:	60fb      	str	r3, [r7, #12]
 800ce4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800ce4c:	bf00      	nop
 800ce4e:	3728      	adds	r7, #40	; 0x28
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	40023800 	.word	0x40023800
 800ce58:	40020000 	.word	0x40020000

0800ce5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ce60:	bf00      	nop
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ce6a:	b480      	push	{r7}
 800ce6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ce6e:	e7fe      	b.n	800ce6e <HardFault_Handler+0x4>

0800ce70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ce70:	b480      	push	{r7}
 800ce72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ce74:	e7fe      	b.n	800ce74 <MemManage_Handler+0x4>

0800ce76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ce76:	b480      	push	{r7}
 800ce78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ce7a:	e7fe      	b.n	800ce7a <BusFault_Handler+0x4>

0800ce7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ce80:	e7fe      	b.n	800ce80 <UsageFault_Handler+0x4>

0800ce82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ce82:	b480      	push	{r7}
 800ce84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ce86:	bf00      	nop
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ce90:	b480      	push	{r7}
 800ce92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ce94:	bf00      	nop
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr

0800ce9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ce9e:	b480      	push	{r7}
 800cea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cea2:	bf00      	nop
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ceb0:	f7f4 f8a6 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ceb4:	bf00      	nop
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800cebc:	4802      	ldr	r0, [pc, #8]	; (800cec8 <DMA1_Stream3_IRQHandler+0x10>)
 800cebe:	f7f6 f9b3 	bl	8003228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800cec2:	bf00      	nop
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	20000b48 	.word	0x20000b48

0800cecc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800ced0:	4805      	ldr	r0, [pc, #20]	; (800cee8 <ADC_IRQHandler+0x1c>)
 800ced2:	f7f4 f91a 	bl	800110a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800ced6:	4805      	ldr	r0, [pc, #20]	; (800ceec <ADC_IRQHandler+0x20>)
 800ced8:	f7f4 f917 	bl	800110a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800cedc:	4804      	ldr	r0, [pc, #16]	; (800cef0 <ADC_IRQHandler+0x24>)
 800cede:	f7f4 f914 	bl	800110a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800cee2:	bf00      	nop
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	20000c6c 	.word	0x20000c6c
 800ceec:	200005ec 	.word	0x200005ec
 800cef0:	20000cb4 	.word	0x20000cb4

0800cef4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800cef8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cefc:	f7f6 fe1e 	bl	8003b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800cf00:	bf00      	nop
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cf08:	4803      	ldr	r0, [pc, #12]	; (800cf18 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800cf0a:	f7f9 fdf3 	bl	8006af4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800cf0e:	4803      	ldr	r0, [pc, #12]	; (800cf1c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800cf10:	f7f9 fdf0 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800cf14:	bf00      	nop
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	20000e00 	.word	0x20000e00
 800cf1c:	20000ea8 	.word	0x20000ea8

0800cf20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cf24:	4802      	ldr	r0, [pc, #8]	; (800cf30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800cf26:	f7f9 fde5 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800cf2a:	bf00      	nop
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	20000e00 	.word	0x20000e00

0800cf34 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cf38:	4802      	ldr	r0, [pc, #8]	; (800cf44 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800cf3a:	f7f9 fddb 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800cf3e:	bf00      	nop
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	20000e00 	.word	0x20000e00

0800cf48 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cf4c:	4802      	ldr	r0, [pc, #8]	; (800cf58 <TIM1_CC_IRQHandler+0x10>)
 800cf4e:	f7f9 fdd1 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800cf52:	bf00      	nop
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	20000e00 	.word	0x20000e00

0800cf5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800cf60:	4802      	ldr	r0, [pc, #8]	; (800cf6c <TIM3_IRQHandler+0x10>)
 800cf62:	f7f9 fdc7 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
  /* USER CODE END TIM3_IRQn 1 */
}
 800cf66:	bf00      	nop
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	20000bec 	.word	0x20000bec

0800cf70 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800cf74:	4802      	ldr	r0, [pc, #8]	; (800cf80 <SPI2_IRQHandler+0x10>)
 800cf76:	f7f9 f915 	bl	80061a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800cf7a:	bf00      	nop
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	200001cc 	.word	0x200001cc

0800cf84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800cf88:	4802      	ldr	r0, [pc, #8]	; (800cf94 <USART3_IRQHandler+0x10>)
 800cf8a:	f7fa ff61 	bl	8007e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800cf8e:	bf00      	nop
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	200005ac 	.word	0x200005ac

0800cf98 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cf9c:	4803      	ldr	r0, [pc, #12]	; (800cfac <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800cf9e:	f7f9 fda9 	bl	8006af4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800cfa2:	4803      	ldr	r0, [pc, #12]	; (800cfb0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800cfa4:	f7f9 fda6 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800cfa8:	bf00      	nop
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	2000056c 	.word	0x2000056c
 800cfb0:	20001070 	.word	0x20001070

0800cfb4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cfb8:	4803      	ldr	r0, [pc, #12]	; (800cfc8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800cfba:	f7f9 fd9b 	bl	8006af4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800cfbe:	4803      	ldr	r0, [pc, #12]	; (800cfcc <TIM8_UP_TIM13_IRQHandler+0x18>)
 800cfc0:	f7f9 fd98 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800cfc4:	bf00      	nop
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	2000056c 	.word	0x2000056c
 800cfcc:	20000cfc 	.word	0x20000cfc

0800cfd0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cfd4:	4802      	ldr	r0, [pc, #8]	; (800cfe0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800cfd6:	f7f9 fd8d 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800cfda:	bf00      	nop
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	2000056c 	.word	0x2000056c

0800cfe4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cfe8:	4802      	ldr	r0, [pc, #8]	; (800cff4 <TIM8_CC_IRQHandler+0x10>)
 800cfea:	f7f9 fd83 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800cfee:	bf00      	nop
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	2000056c 	.word	0x2000056c

0800cff8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800cffc:	4802      	ldr	r0, [pc, #8]	; (800d008 <TIM5_IRQHandler+0x10>)
 800cffe:	f7f9 fd79 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800d002:	bf00      	nop
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	20000ba8 	.word	0x20000ba8

0800d00c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800d010:	4802      	ldr	r0, [pc, #8]	; (800d01c <TIM6_DAC_IRQHandler+0x10>)
 800d012:	f7f9 fd6f 	bl	8006af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800d016:	bf00      	nop
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	20000dc0 	.word	0x20000dc0

0800d020 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800d024:	4802      	ldr	r0, [pc, #8]	; (800d030 <DMA2_Stream0_IRQHandler+0x10>)
 800d026:	f7f6 f8ff 	bl	8003228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800d02a:	bf00      	nop
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	20000d40 	.word	0x20000d40

0800d034 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800d038:	4802      	ldr	r0, [pc, #8]	; (800d044 <DMA2_Stream1_IRQHandler+0x10>)
 800d03a:	f7f6 f8f5 	bl	8003228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800d03e:	bf00      	nop
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	20000ae8 	.word	0x20000ae8

0800d048 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800d04c:	4802      	ldr	r0, [pc, #8]	; (800d058 <DMA2_Stream2_IRQHandler+0x10>)
 800d04e:	f7f6 f8eb 	bl	8003228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800d052:	bf00      	nop
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	20000fe8 	.word	0x20000fe8

0800d05c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800d064:	4b11      	ldr	r3, [pc, #68]	; (800d0ac <_sbrk+0x50>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d102      	bne.n	800d072 <_sbrk+0x16>
		heap_end = &end;
 800d06c:	4b0f      	ldr	r3, [pc, #60]	; (800d0ac <_sbrk+0x50>)
 800d06e:	4a10      	ldr	r2, [pc, #64]	; (800d0b0 <_sbrk+0x54>)
 800d070:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800d072:	4b0e      	ldr	r3, [pc, #56]	; (800d0ac <_sbrk+0x50>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800d078:	4b0c      	ldr	r3, [pc, #48]	; (800d0ac <_sbrk+0x50>)
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4413      	add	r3, r2
 800d080:	466a      	mov	r2, sp
 800d082:	4293      	cmp	r3, r2
 800d084:	d907      	bls.n	800d096 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800d086:	f000 f855 	bl	800d134 <__errno>
 800d08a:	4602      	mov	r2, r0
 800d08c:	230c      	movs	r3, #12
 800d08e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800d090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d094:	e006      	b.n	800d0a4 <_sbrk+0x48>
	}

	heap_end += incr;
 800d096:	4b05      	ldr	r3, [pc, #20]	; (800d0ac <_sbrk+0x50>)
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	4413      	add	r3, r2
 800d09e:	4a03      	ldr	r2, [pc, #12]	; (800d0ac <_sbrk+0x50>)
 800d0a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3710      	adds	r7, #16
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	2000011c 	.word	0x2000011c
 800d0b0:	20001420 	.word	0x20001420

0800d0b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d0b8:	4b08      	ldr	r3, [pc, #32]	; (800d0dc <SystemInit+0x28>)
 800d0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0be:	4a07      	ldr	r2, [pc, #28]	; (800d0dc <SystemInit+0x28>)
 800d0c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d0c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d0c8:	4b04      	ldr	r3, [pc, #16]	; (800d0dc <SystemInit+0x28>)
 800d0ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d0ce:	609a      	str	r2, [r3, #8]
#endif
}
 800d0d0:	bf00      	nop
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	e000ed00 	.word	0xe000ed00

0800d0e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d0e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d118 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d0e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d0e6:	e003      	b.n	800d0f0 <LoopCopyDataInit>

0800d0e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d0e8:	4b0c      	ldr	r3, [pc, #48]	; (800d11c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d0ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d0ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d0ee:	3104      	adds	r1, #4

0800d0f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d0f0:	480b      	ldr	r0, [pc, #44]	; (800d120 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d0f2:	4b0c      	ldr	r3, [pc, #48]	; (800d124 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d0f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d0f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d0f8:	d3f6      	bcc.n	800d0e8 <CopyDataInit>
  ldr  r2, =_sbss
 800d0fa:	4a0b      	ldr	r2, [pc, #44]	; (800d128 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d0fc:	e002      	b.n	800d104 <LoopFillZerobss>

0800d0fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d0fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d100:	f842 3b04 	str.w	r3, [r2], #4

0800d104 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d104:	4b09      	ldr	r3, [pc, #36]	; (800d12c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d106:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d108:	d3f9      	bcc.n	800d0fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d10a:	f7ff ffd3 	bl	800d0b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d10e:	f000 f817 	bl	800d140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d112:	f7fb ff15 	bl	8008f40 <main>
  bx  lr    
 800d116:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d118:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d11c:	0800eeb0 	.word	0x0800eeb0
  ldr  r0, =_sdata
 800d120:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d124:	200000ac 	.word	0x200000ac
  ldr  r2, =_sbss
 800d128:	200000ac 	.word	0x200000ac
  ldr  r3, = _ebss
 800d12c:	20001420 	.word	0x20001420

0800d130 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d130:	e7fe      	b.n	800d130 <CAN1_RX1_IRQHandler>
	...

0800d134 <__errno>:
 800d134:	4b01      	ldr	r3, [pc, #4]	; (800d13c <__errno+0x8>)
 800d136:	6818      	ldr	r0, [r3, #0]
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop
 800d13c:	20000048 	.word	0x20000048

0800d140 <__libc_init_array>:
 800d140:	b570      	push	{r4, r5, r6, lr}
 800d142:	4e0d      	ldr	r6, [pc, #52]	; (800d178 <__libc_init_array+0x38>)
 800d144:	4c0d      	ldr	r4, [pc, #52]	; (800d17c <__libc_init_array+0x3c>)
 800d146:	1ba4      	subs	r4, r4, r6
 800d148:	10a4      	asrs	r4, r4, #2
 800d14a:	2500      	movs	r5, #0
 800d14c:	42a5      	cmp	r5, r4
 800d14e:	d109      	bne.n	800d164 <__libc_init_array+0x24>
 800d150:	4e0b      	ldr	r6, [pc, #44]	; (800d180 <__libc_init_array+0x40>)
 800d152:	4c0c      	ldr	r4, [pc, #48]	; (800d184 <__libc_init_array+0x44>)
 800d154:	f001 fc8e 	bl	800ea74 <_init>
 800d158:	1ba4      	subs	r4, r4, r6
 800d15a:	10a4      	asrs	r4, r4, #2
 800d15c:	2500      	movs	r5, #0
 800d15e:	42a5      	cmp	r5, r4
 800d160:	d105      	bne.n	800d16e <__libc_init_array+0x2e>
 800d162:	bd70      	pop	{r4, r5, r6, pc}
 800d164:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d168:	4798      	blx	r3
 800d16a:	3501      	adds	r5, #1
 800d16c:	e7ee      	b.n	800d14c <__libc_init_array+0xc>
 800d16e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d172:	4798      	blx	r3
 800d174:	3501      	adds	r5, #1
 800d176:	e7f2      	b.n	800d15e <__libc_init_array+0x1e>
 800d178:	0800eea8 	.word	0x0800eea8
 800d17c:	0800eea8 	.word	0x0800eea8
 800d180:	0800eea8 	.word	0x0800eea8
 800d184:	0800eeac 	.word	0x0800eeac

0800d188 <memset>:
 800d188:	4402      	add	r2, r0
 800d18a:	4603      	mov	r3, r0
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d100      	bne.n	800d192 <memset+0xa>
 800d190:	4770      	bx	lr
 800d192:	f803 1b01 	strb.w	r1, [r3], #1
 800d196:	e7f9      	b.n	800d18c <memset+0x4>

0800d198 <siprintf>:
 800d198:	b40e      	push	{r1, r2, r3}
 800d19a:	b500      	push	{lr}
 800d19c:	b09c      	sub	sp, #112	; 0x70
 800d19e:	ab1d      	add	r3, sp, #116	; 0x74
 800d1a0:	9002      	str	r0, [sp, #8]
 800d1a2:	9006      	str	r0, [sp, #24]
 800d1a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d1a8:	4809      	ldr	r0, [pc, #36]	; (800d1d0 <siprintf+0x38>)
 800d1aa:	9107      	str	r1, [sp, #28]
 800d1ac:	9104      	str	r1, [sp, #16]
 800d1ae:	4909      	ldr	r1, [pc, #36]	; (800d1d4 <siprintf+0x3c>)
 800d1b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1b4:	9105      	str	r1, [sp, #20]
 800d1b6:	6800      	ldr	r0, [r0, #0]
 800d1b8:	9301      	str	r3, [sp, #4]
 800d1ba:	a902      	add	r1, sp, #8
 800d1bc:	f000 f876 	bl	800d2ac <_svfiprintf_r>
 800d1c0:	9b02      	ldr	r3, [sp, #8]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	701a      	strb	r2, [r3, #0]
 800d1c6:	b01c      	add	sp, #112	; 0x70
 800d1c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1cc:	b003      	add	sp, #12
 800d1ce:	4770      	bx	lr
 800d1d0:	20000048 	.word	0x20000048
 800d1d4:	ffff0208 	.word	0xffff0208

0800d1d8 <strcat>:
 800d1d8:	b510      	push	{r4, lr}
 800d1da:	4603      	mov	r3, r0
 800d1dc:	781a      	ldrb	r2, [r3, #0]
 800d1de:	1c5c      	adds	r4, r3, #1
 800d1e0:	b93a      	cbnz	r2, 800d1f2 <strcat+0x1a>
 800d1e2:	3b01      	subs	r3, #1
 800d1e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1ec:	2a00      	cmp	r2, #0
 800d1ee:	d1f9      	bne.n	800d1e4 <strcat+0xc>
 800d1f0:	bd10      	pop	{r4, pc}
 800d1f2:	4623      	mov	r3, r4
 800d1f4:	e7f2      	b.n	800d1dc <strcat+0x4>

0800d1f6 <__ssputs_r>:
 800d1f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1fa:	688e      	ldr	r6, [r1, #8]
 800d1fc:	429e      	cmp	r6, r3
 800d1fe:	4682      	mov	sl, r0
 800d200:	460c      	mov	r4, r1
 800d202:	4690      	mov	r8, r2
 800d204:	4699      	mov	r9, r3
 800d206:	d837      	bhi.n	800d278 <__ssputs_r+0x82>
 800d208:	898a      	ldrh	r2, [r1, #12]
 800d20a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d20e:	d031      	beq.n	800d274 <__ssputs_r+0x7e>
 800d210:	6825      	ldr	r5, [r4, #0]
 800d212:	6909      	ldr	r1, [r1, #16]
 800d214:	1a6f      	subs	r7, r5, r1
 800d216:	6965      	ldr	r5, [r4, #20]
 800d218:	2302      	movs	r3, #2
 800d21a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d21e:	fb95 f5f3 	sdiv	r5, r5, r3
 800d222:	f109 0301 	add.w	r3, r9, #1
 800d226:	443b      	add	r3, r7
 800d228:	429d      	cmp	r5, r3
 800d22a:	bf38      	it	cc
 800d22c:	461d      	movcc	r5, r3
 800d22e:	0553      	lsls	r3, r2, #21
 800d230:	d530      	bpl.n	800d294 <__ssputs_r+0x9e>
 800d232:	4629      	mov	r1, r5
 800d234:	f000 fb2c 	bl	800d890 <_malloc_r>
 800d238:	4606      	mov	r6, r0
 800d23a:	b950      	cbnz	r0, 800d252 <__ssputs_r+0x5c>
 800d23c:	230c      	movs	r3, #12
 800d23e:	f8ca 3000 	str.w	r3, [sl]
 800d242:	89a3      	ldrh	r3, [r4, #12]
 800d244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d248:	81a3      	strh	r3, [r4, #12]
 800d24a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d252:	463a      	mov	r2, r7
 800d254:	6921      	ldr	r1, [r4, #16]
 800d256:	f000 faa9 	bl	800d7ac <memcpy>
 800d25a:	89a3      	ldrh	r3, [r4, #12]
 800d25c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d264:	81a3      	strh	r3, [r4, #12]
 800d266:	6126      	str	r6, [r4, #16]
 800d268:	6165      	str	r5, [r4, #20]
 800d26a:	443e      	add	r6, r7
 800d26c:	1bed      	subs	r5, r5, r7
 800d26e:	6026      	str	r6, [r4, #0]
 800d270:	60a5      	str	r5, [r4, #8]
 800d272:	464e      	mov	r6, r9
 800d274:	454e      	cmp	r6, r9
 800d276:	d900      	bls.n	800d27a <__ssputs_r+0x84>
 800d278:	464e      	mov	r6, r9
 800d27a:	4632      	mov	r2, r6
 800d27c:	4641      	mov	r1, r8
 800d27e:	6820      	ldr	r0, [r4, #0]
 800d280:	f000 fa9f 	bl	800d7c2 <memmove>
 800d284:	68a3      	ldr	r3, [r4, #8]
 800d286:	1b9b      	subs	r3, r3, r6
 800d288:	60a3      	str	r3, [r4, #8]
 800d28a:	6823      	ldr	r3, [r4, #0]
 800d28c:	441e      	add	r6, r3
 800d28e:	6026      	str	r6, [r4, #0]
 800d290:	2000      	movs	r0, #0
 800d292:	e7dc      	b.n	800d24e <__ssputs_r+0x58>
 800d294:	462a      	mov	r2, r5
 800d296:	f000 fb55 	bl	800d944 <_realloc_r>
 800d29a:	4606      	mov	r6, r0
 800d29c:	2800      	cmp	r0, #0
 800d29e:	d1e2      	bne.n	800d266 <__ssputs_r+0x70>
 800d2a0:	6921      	ldr	r1, [r4, #16]
 800d2a2:	4650      	mov	r0, sl
 800d2a4:	f000 faa6 	bl	800d7f4 <_free_r>
 800d2a8:	e7c8      	b.n	800d23c <__ssputs_r+0x46>
	...

0800d2ac <_svfiprintf_r>:
 800d2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b0:	461d      	mov	r5, r3
 800d2b2:	898b      	ldrh	r3, [r1, #12]
 800d2b4:	061f      	lsls	r7, r3, #24
 800d2b6:	b09d      	sub	sp, #116	; 0x74
 800d2b8:	4680      	mov	r8, r0
 800d2ba:	460c      	mov	r4, r1
 800d2bc:	4616      	mov	r6, r2
 800d2be:	d50f      	bpl.n	800d2e0 <_svfiprintf_r+0x34>
 800d2c0:	690b      	ldr	r3, [r1, #16]
 800d2c2:	b96b      	cbnz	r3, 800d2e0 <_svfiprintf_r+0x34>
 800d2c4:	2140      	movs	r1, #64	; 0x40
 800d2c6:	f000 fae3 	bl	800d890 <_malloc_r>
 800d2ca:	6020      	str	r0, [r4, #0]
 800d2cc:	6120      	str	r0, [r4, #16]
 800d2ce:	b928      	cbnz	r0, 800d2dc <_svfiprintf_r+0x30>
 800d2d0:	230c      	movs	r3, #12
 800d2d2:	f8c8 3000 	str.w	r3, [r8]
 800d2d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2da:	e0c8      	b.n	800d46e <_svfiprintf_r+0x1c2>
 800d2dc:	2340      	movs	r3, #64	; 0x40
 800d2de:	6163      	str	r3, [r4, #20]
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2e4:	2320      	movs	r3, #32
 800d2e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2ea:	2330      	movs	r3, #48	; 0x30
 800d2ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2f0:	9503      	str	r5, [sp, #12]
 800d2f2:	f04f 0b01 	mov.w	fp, #1
 800d2f6:	4637      	mov	r7, r6
 800d2f8:	463d      	mov	r5, r7
 800d2fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d2fe:	b10b      	cbz	r3, 800d304 <_svfiprintf_r+0x58>
 800d300:	2b25      	cmp	r3, #37	; 0x25
 800d302:	d13e      	bne.n	800d382 <_svfiprintf_r+0xd6>
 800d304:	ebb7 0a06 	subs.w	sl, r7, r6
 800d308:	d00b      	beq.n	800d322 <_svfiprintf_r+0x76>
 800d30a:	4653      	mov	r3, sl
 800d30c:	4632      	mov	r2, r6
 800d30e:	4621      	mov	r1, r4
 800d310:	4640      	mov	r0, r8
 800d312:	f7ff ff70 	bl	800d1f6 <__ssputs_r>
 800d316:	3001      	adds	r0, #1
 800d318:	f000 80a4 	beq.w	800d464 <_svfiprintf_r+0x1b8>
 800d31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d31e:	4453      	add	r3, sl
 800d320:	9309      	str	r3, [sp, #36]	; 0x24
 800d322:	783b      	ldrb	r3, [r7, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	f000 809d 	beq.w	800d464 <_svfiprintf_r+0x1b8>
 800d32a:	2300      	movs	r3, #0
 800d32c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d334:	9304      	str	r3, [sp, #16]
 800d336:	9307      	str	r3, [sp, #28]
 800d338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d33c:	931a      	str	r3, [sp, #104]	; 0x68
 800d33e:	462f      	mov	r7, r5
 800d340:	2205      	movs	r2, #5
 800d342:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d346:	4850      	ldr	r0, [pc, #320]	; (800d488 <_svfiprintf_r+0x1dc>)
 800d348:	f7f2 ff4a 	bl	80001e0 <memchr>
 800d34c:	9b04      	ldr	r3, [sp, #16]
 800d34e:	b9d0      	cbnz	r0, 800d386 <_svfiprintf_r+0xda>
 800d350:	06d9      	lsls	r1, r3, #27
 800d352:	bf44      	itt	mi
 800d354:	2220      	movmi	r2, #32
 800d356:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d35a:	071a      	lsls	r2, r3, #28
 800d35c:	bf44      	itt	mi
 800d35e:	222b      	movmi	r2, #43	; 0x2b
 800d360:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d364:	782a      	ldrb	r2, [r5, #0]
 800d366:	2a2a      	cmp	r2, #42	; 0x2a
 800d368:	d015      	beq.n	800d396 <_svfiprintf_r+0xea>
 800d36a:	9a07      	ldr	r2, [sp, #28]
 800d36c:	462f      	mov	r7, r5
 800d36e:	2000      	movs	r0, #0
 800d370:	250a      	movs	r5, #10
 800d372:	4639      	mov	r1, r7
 800d374:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d378:	3b30      	subs	r3, #48	; 0x30
 800d37a:	2b09      	cmp	r3, #9
 800d37c:	d94d      	bls.n	800d41a <_svfiprintf_r+0x16e>
 800d37e:	b1b8      	cbz	r0, 800d3b0 <_svfiprintf_r+0x104>
 800d380:	e00f      	b.n	800d3a2 <_svfiprintf_r+0xf6>
 800d382:	462f      	mov	r7, r5
 800d384:	e7b8      	b.n	800d2f8 <_svfiprintf_r+0x4c>
 800d386:	4a40      	ldr	r2, [pc, #256]	; (800d488 <_svfiprintf_r+0x1dc>)
 800d388:	1a80      	subs	r0, r0, r2
 800d38a:	fa0b f000 	lsl.w	r0, fp, r0
 800d38e:	4318      	orrs	r0, r3
 800d390:	9004      	str	r0, [sp, #16]
 800d392:	463d      	mov	r5, r7
 800d394:	e7d3      	b.n	800d33e <_svfiprintf_r+0x92>
 800d396:	9a03      	ldr	r2, [sp, #12]
 800d398:	1d11      	adds	r1, r2, #4
 800d39a:	6812      	ldr	r2, [r2, #0]
 800d39c:	9103      	str	r1, [sp, #12]
 800d39e:	2a00      	cmp	r2, #0
 800d3a0:	db01      	blt.n	800d3a6 <_svfiprintf_r+0xfa>
 800d3a2:	9207      	str	r2, [sp, #28]
 800d3a4:	e004      	b.n	800d3b0 <_svfiprintf_r+0x104>
 800d3a6:	4252      	negs	r2, r2
 800d3a8:	f043 0302 	orr.w	r3, r3, #2
 800d3ac:	9207      	str	r2, [sp, #28]
 800d3ae:	9304      	str	r3, [sp, #16]
 800d3b0:	783b      	ldrb	r3, [r7, #0]
 800d3b2:	2b2e      	cmp	r3, #46	; 0x2e
 800d3b4:	d10c      	bne.n	800d3d0 <_svfiprintf_r+0x124>
 800d3b6:	787b      	ldrb	r3, [r7, #1]
 800d3b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d3ba:	d133      	bne.n	800d424 <_svfiprintf_r+0x178>
 800d3bc:	9b03      	ldr	r3, [sp, #12]
 800d3be:	1d1a      	adds	r2, r3, #4
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	9203      	str	r2, [sp, #12]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	bfb8      	it	lt
 800d3c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d3cc:	3702      	adds	r7, #2
 800d3ce:	9305      	str	r3, [sp, #20]
 800d3d0:	4d2e      	ldr	r5, [pc, #184]	; (800d48c <_svfiprintf_r+0x1e0>)
 800d3d2:	7839      	ldrb	r1, [r7, #0]
 800d3d4:	2203      	movs	r2, #3
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	f7f2 ff02 	bl	80001e0 <memchr>
 800d3dc:	b138      	cbz	r0, 800d3ee <_svfiprintf_r+0x142>
 800d3de:	2340      	movs	r3, #64	; 0x40
 800d3e0:	1b40      	subs	r0, r0, r5
 800d3e2:	fa03 f000 	lsl.w	r0, r3, r0
 800d3e6:	9b04      	ldr	r3, [sp, #16]
 800d3e8:	4303      	orrs	r3, r0
 800d3ea:	3701      	adds	r7, #1
 800d3ec:	9304      	str	r3, [sp, #16]
 800d3ee:	7839      	ldrb	r1, [r7, #0]
 800d3f0:	4827      	ldr	r0, [pc, #156]	; (800d490 <_svfiprintf_r+0x1e4>)
 800d3f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3f6:	2206      	movs	r2, #6
 800d3f8:	1c7e      	adds	r6, r7, #1
 800d3fa:	f7f2 fef1 	bl	80001e0 <memchr>
 800d3fe:	2800      	cmp	r0, #0
 800d400:	d038      	beq.n	800d474 <_svfiprintf_r+0x1c8>
 800d402:	4b24      	ldr	r3, [pc, #144]	; (800d494 <_svfiprintf_r+0x1e8>)
 800d404:	bb13      	cbnz	r3, 800d44c <_svfiprintf_r+0x1a0>
 800d406:	9b03      	ldr	r3, [sp, #12]
 800d408:	3307      	adds	r3, #7
 800d40a:	f023 0307 	bic.w	r3, r3, #7
 800d40e:	3308      	adds	r3, #8
 800d410:	9303      	str	r3, [sp, #12]
 800d412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d414:	444b      	add	r3, r9
 800d416:	9309      	str	r3, [sp, #36]	; 0x24
 800d418:	e76d      	b.n	800d2f6 <_svfiprintf_r+0x4a>
 800d41a:	fb05 3202 	mla	r2, r5, r2, r3
 800d41e:	2001      	movs	r0, #1
 800d420:	460f      	mov	r7, r1
 800d422:	e7a6      	b.n	800d372 <_svfiprintf_r+0xc6>
 800d424:	2300      	movs	r3, #0
 800d426:	3701      	adds	r7, #1
 800d428:	9305      	str	r3, [sp, #20]
 800d42a:	4619      	mov	r1, r3
 800d42c:	250a      	movs	r5, #10
 800d42e:	4638      	mov	r0, r7
 800d430:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d434:	3a30      	subs	r2, #48	; 0x30
 800d436:	2a09      	cmp	r2, #9
 800d438:	d903      	bls.n	800d442 <_svfiprintf_r+0x196>
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d0c8      	beq.n	800d3d0 <_svfiprintf_r+0x124>
 800d43e:	9105      	str	r1, [sp, #20]
 800d440:	e7c6      	b.n	800d3d0 <_svfiprintf_r+0x124>
 800d442:	fb05 2101 	mla	r1, r5, r1, r2
 800d446:	2301      	movs	r3, #1
 800d448:	4607      	mov	r7, r0
 800d44a:	e7f0      	b.n	800d42e <_svfiprintf_r+0x182>
 800d44c:	ab03      	add	r3, sp, #12
 800d44e:	9300      	str	r3, [sp, #0]
 800d450:	4622      	mov	r2, r4
 800d452:	4b11      	ldr	r3, [pc, #68]	; (800d498 <_svfiprintf_r+0x1ec>)
 800d454:	a904      	add	r1, sp, #16
 800d456:	4640      	mov	r0, r8
 800d458:	f3af 8000 	nop.w
 800d45c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d460:	4681      	mov	r9, r0
 800d462:	d1d6      	bne.n	800d412 <_svfiprintf_r+0x166>
 800d464:	89a3      	ldrh	r3, [r4, #12]
 800d466:	065b      	lsls	r3, r3, #25
 800d468:	f53f af35 	bmi.w	800d2d6 <_svfiprintf_r+0x2a>
 800d46c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d46e:	b01d      	add	sp, #116	; 0x74
 800d470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d474:	ab03      	add	r3, sp, #12
 800d476:	9300      	str	r3, [sp, #0]
 800d478:	4622      	mov	r2, r4
 800d47a:	4b07      	ldr	r3, [pc, #28]	; (800d498 <_svfiprintf_r+0x1ec>)
 800d47c:	a904      	add	r1, sp, #16
 800d47e:	4640      	mov	r0, r8
 800d480:	f000 f882 	bl	800d588 <_printf_i>
 800d484:	e7ea      	b.n	800d45c <_svfiprintf_r+0x1b0>
 800d486:	bf00      	nop
 800d488:	0800ec94 	.word	0x0800ec94
 800d48c:	0800ec9a 	.word	0x0800ec9a
 800d490:	0800ec9e 	.word	0x0800ec9e
 800d494:	00000000 	.word	0x00000000
 800d498:	0800d1f7 	.word	0x0800d1f7

0800d49c <_printf_common>:
 800d49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4a0:	4691      	mov	r9, r2
 800d4a2:	461f      	mov	r7, r3
 800d4a4:	688a      	ldr	r2, [r1, #8]
 800d4a6:	690b      	ldr	r3, [r1, #16]
 800d4a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	bfb8      	it	lt
 800d4b0:	4613      	movlt	r3, r2
 800d4b2:	f8c9 3000 	str.w	r3, [r9]
 800d4b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4ba:	4606      	mov	r6, r0
 800d4bc:	460c      	mov	r4, r1
 800d4be:	b112      	cbz	r2, 800d4c6 <_printf_common+0x2a>
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	f8c9 3000 	str.w	r3, [r9]
 800d4c6:	6823      	ldr	r3, [r4, #0]
 800d4c8:	0699      	lsls	r1, r3, #26
 800d4ca:	bf42      	ittt	mi
 800d4cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d4d0:	3302      	addmi	r3, #2
 800d4d2:	f8c9 3000 	strmi.w	r3, [r9]
 800d4d6:	6825      	ldr	r5, [r4, #0]
 800d4d8:	f015 0506 	ands.w	r5, r5, #6
 800d4dc:	d107      	bne.n	800d4ee <_printf_common+0x52>
 800d4de:	f104 0a19 	add.w	sl, r4, #25
 800d4e2:	68e3      	ldr	r3, [r4, #12]
 800d4e4:	f8d9 2000 	ldr.w	r2, [r9]
 800d4e8:	1a9b      	subs	r3, r3, r2
 800d4ea:	42ab      	cmp	r3, r5
 800d4ec:	dc28      	bgt.n	800d540 <_printf_common+0xa4>
 800d4ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d4f2:	6822      	ldr	r2, [r4, #0]
 800d4f4:	3300      	adds	r3, #0
 800d4f6:	bf18      	it	ne
 800d4f8:	2301      	movne	r3, #1
 800d4fa:	0692      	lsls	r2, r2, #26
 800d4fc:	d42d      	bmi.n	800d55a <_printf_common+0xbe>
 800d4fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d502:	4639      	mov	r1, r7
 800d504:	4630      	mov	r0, r6
 800d506:	47c0      	blx	r8
 800d508:	3001      	adds	r0, #1
 800d50a:	d020      	beq.n	800d54e <_printf_common+0xb2>
 800d50c:	6823      	ldr	r3, [r4, #0]
 800d50e:	68e5      	ldr	r5, [r4, #12]
 800d510:	f8d9 2000 	ldr.w	r2, [r9]
 800d514:	f003 0306 	and.w	r3, r3, #6
 800d518:	2b04      	cmp	r3, #4
 800d51a:	bf08      	it	eq
 800d51c:	1aad      	subeq	r5, r5, r2
 800d51e:	68a3      	ldr	r3, [r4, #8]
 800d520:	6922      	ldr	r2, [r4, #16]
 800d522:	bf0c      	ite	eq
 800d524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d528:	2500      	movne	r5, #0
 800d52a:	4293      	cmp	r3, r2
 800d52c:	bfc4      	itt	gt
 800d52e:	1a9b      	subgt	r3, r3, r2
 800d530:	18ed      	addgt	r5, r5, r3
 800d532:	f04f 0900 	mov.w	r9, #0
 800d536:	341a      	adds	r4, #26
 800d538:	454d      	cmp	r5, r9
 800d53a:	d11a      	bne.n	800d572 <_printf_common+0xd6>
 800d53c:	2000      	movs	r0, #0
 800d53e:	e008      	b.n	800d552 <_printf_common+0xb6>
 800d540:	2301      	movs	r3, #1
 800d542:	4652      	mov	r2, sl
 800d544:	4639      	mov	r1, r7
 800d546:	4630      	mov	r0, r6
 800d548:	47c0      	blx	r8
 800d54a:	3001      	adds	r0, #1
 800d54c:	d103      	bne.n	800d556 <_printf_common+0xba>
 800d54e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d556:	3501      	adds	r5, #1
 800d558:	e7c3      	b.n	800d4e2 <_printf_common+0x46>
 800d55a:	18e1      	adds	r1, r4, r3
 800d55c:	1c5a      	adds	r2, r3, #1
 800d55e:	2030      	movs	r0, #48	; 0x30
 800d560:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d564:	4422      	add	r2, r4
 800d566:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d56a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d56e:	3302      	adds	r3, #2
 800d570:	e7c5      	b.n	800d4fe <_printf_common+0x62>
 800d572:	2301      	movs	r3, #1
 800d574:	4622      	mov	r2, r4
 800d576:	4639      	mov	r1, r7
 800d578:	4630      	mov	r0, r6
 800d57a:	47c0      	blx	r8
 800d57c:	3001      	adds	r0, #1
 800d57e:	d0e6      	beq.n	800d54e <_printf_common+0xb2>
 800d580:	f109 0901 	add.w	r9, r9, #1
 800d584:	e7d8      	b.n	800d538 <_printf_common+0x9c>
	...

0800d588 <_printf_i>:
 800d588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d58c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d590:	460c      	mov	r4, r1
 800d592:	7e09      	ldrb	r1, [r1, #24]
 800d594:	b085      	sub	sp, #20
 800d596:	296e      	cmp	r1, #110	; 0x6e
 800d598:	4617      	mov	r7, r2
 800d59a:	4606      	mov	r6, r0
 800d59c:	4698      	mov	r8, r3
 800d59e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5a0:	f000 80b3 	beq.w	800d70a <_printf_i+0x182>
 800d5a4:	d822      	bhi.n	800d5ec <_printf_i+0x64>
 800d5a6:	2963      	cmp	r1, #99	; 0x63
 800d5a8:	d036      	beq.n	800d618 <_printf_i+0x90>
 800d5aa:	d80a      	bhi.n	800d5c2 <_printf_i+0x3a>
 800d5ac:	2900      	cmp	r1, #0
 800d5ae:	f000 80b9 	beq.w	800d724 <_printf_i+0x19c>
 800d5b2:	2958      	cmp	r1, #88	; 0x58
 800d5b4:	f000 8083 	beq.w	800d6be <_printf_i+0x136>
 800d5b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d5c0:	e032      	b.n	800d628 <_printf_i+0xa0>
 800d5c2:	2964      	cmp	r1, #100	; 0x64
 800d5c4:	d001      	beq.n	800d5ca <_printf_i+0x42>
 800d5c6:	2969      	cmp	r1, #105	; 0x69
 800d5c8:	d1f6      	bne.n	800d5b8 <_printf_i+0x30>
 800d5ca:	6820      	ldr	r0, [r4, #0]
 800d5cc:	6813      	ldr	r3, [r2, #0]
 800d5ce:	0605      	lsls	r5, r0, #24
 800d5d0:	f103 0104 	add.w	r1, r3, #4
 800d5d4:	d52a      	bpl.n	800d62c <_printf_i+0xa4>
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6011      	str	r1, [r2, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	da03      	bge.n	800d5e6 <_printf_i+0x5e>
 800d5de:	222d      	movs	r2, #45	; 0x2d
 800d5e0:	425b      	negs	r3, r3
 800d5e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d5e6:	486f      	ldr	r0, [pc, #444]	; (800d7a4 <_printf_i+0x21c>)
 800d5e8:	220a      	movs	r2, #10
 800d5ea:	e039      	b.n	800d660 <_printf_i+0xd8>
 800d5ec:	2973      	cmp	r1, #115	; 0x73
 800d5ee:	f000 809d 	beq.w	800d72c <_printf_i+0x1a4>
 800d5f2:	d808      	bhi.n	800d606 <_printf_i+0x7e>
 800d5f4:	296f      	cmp	r1, #111	; 0x6f
 800d5f6:	d020      	beq.n	800d63a <_printf_i+0xb2>
 800d5f8:	2970      	cmp	r1, #112	; 0x70
 800d5fa:	d1dd      	bne.n	800d5b8 <_printf_i+0x30>
 800d5fc:	6823      	ldr	r3, [r4, #0]
 800d5fe:	f043 0320 	orr.w	r3, r3, #32
 800d602:	6023      	str	r3, [r4, #0]
 800d604:	e003      	b.n	800d60e <_printf_i+0x86>
 800d606:	2975      	cmp	r1, #117	; 0x75
 800d608:	d017      	beq.n	800d63a <_printf_i+0xb2>
 800d60a:	2978      	cmp	r1, #120	; 0x78
 800d60c:	d1d4      	bne.n	800d5b8 <_printf_i+0x30>
 800d60e:	2378      	movs	r3, #120	; 0x78
 800d610:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d614:	4864      	ldr	r0, [pc, #400]	; (800d7a8 <_printf_i+0x220>)
 800d616:	e055      	b.n	800d6c4 <_printf_i+0x13c>
 800d618:	6813      	ldr	r3, [r2, #0]
 800d61a:	1d19      	adds	r1, r3, #4
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	6011      	str	r1, [r2, #0]
 800d620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d628:	2301      	movs	r3, #1
 800d62a:	e08c      	b.n	800d746 <_printf_i+0x1be>
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	6011      	str	r1, [r2, #0]
 800d630:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d634:	bf18      	it	ne
 800d636:	b21b      	sxthne	r3, r3
 800d638:	e7cf      	b.n	800d5da <_printf_i+0x52>
 800d63a:	6813      	ldr	r3, [r2, #0]
 800d63c:	6825      	ldr	r5, [r4, #0]
 800d63e:	1d18      	adds	r0, r3, #4
 800d640:	6010      	str	r0, [r2, #0]
 800d642:	0628      	lsls	r0, r5, #24
 800d644:	d501      	bpl.n	800d64a <_printf_i+0xc2>
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	e002      	b.n	800d650 <_printf_i+0xc8>
 800d64a:	0668      	lsls	r0, r5, #25
 800d64c:	d5fb      	bpl.n	800d646 <_printf_i+0xbe>
 800d64e:	881b      	ldrh	r3, [r3, #0]
 800d650:	4854      	ldr	r0, [pc, #336]	; (800d7a4 <_printf_i+0x21c>)
 800d652:	296f      	cmp	r1, #111	; 0x6f
 800d654:	bf14      	ite	ne
 800d656:	220a      	movne	r2, #10
 800d658:	2208      	moveq	r2, #8
 800d65a:	2100      	movs	r1, #0
 800d65c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d660:	6865      	ldr	r5, [r4, #4]
 800d662:	60a5      	str	r5, [r4, #8]
 800d664:	2d00      	cmp	r5, #0
 800d666:	f2c0 8095 	blt.w	800d794 <_printf_i+0x20c>
 800d66a:	6821      	ldr	r1, [r4, #0]
 800d66c:	f021 0104 	bic.w	r1, r1, #4
 800d670:	6021      	str	r1, [r4, #0]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d13d      	bne.n	800d6f2 <_printf_i+0x16a>
 800d676:	2d00      	cmp	r5, #0
 800d678:	f040 808e 	bne.w	800d798 <_printf_i+0x210>
 800d67c:	4665      	mov	r5, ip
 800d67e:	2a08      	cmp	r2, #8
 800d680:	d10b      	bne.n	800d69a <_printf_i+0x112>
 800d682:	6823      	ldr	r3, [r4, #0]
 800d684:	07db      	lsls	r3, r3, #31
 800d686:	d508      	bpl.n	800d69a <_printf_i+0x112>
 800d688:	6923      	ldr	r3, [r4, #16]
 800d68a:	6862      	ldr	r2, [r4, #4]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	bfde      	ittt	le
 800d690:	2330      	movle	r3, #48	; 0x30
 800d692:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d696:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d69a:	ebac 0305 	sub.w	r3, ip, r5
 800d69e:	6123      	str	r3, [r4, #16]
 800d6a0:	f8cd 8000 	str.w	r8, [sp]
 800d6a4:	463b      	mov	r3, r7
 800d6a6:	aa03      	add	r2, sp, #12
 800d6a8:	4621      	mov	r1, r4
 800d6aa:	4630      	mov	r0, r6
 800d6ac:	f7ff fef6 	bl	800d49c <_printf_common>
 800d6b0:	3001      	adds	r0, #1
 800d6b2:	d14d      	bne.n	800d750 <_printf_i+0x1c8>
 800d6b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6b8:	b005      	add	sp, #20
 800d6ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6be:	4839      	ldr	r0, [pc, #228]	; (800d7a4 <_printf_i+0x21c>)
 800d6c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d6c4:	6813      	ldr	r3, [r2, #0]
 800d6c6:	6821      	ldr	r1, [r4, #0]
 800d6c8:	1d1d      	adds	r5, r3, #4
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	6015      	str	r5, [r2, #0]
 800d6ce:	060a      	lsls	r2, r1, #24
 800d6d0:	d50b      	bpl.n	800d6ea <_printf_i+0x162>
 800d6d2:	07ca      	lsls	r2, r1, #31
 800d6d4:	bf44      	itt	mi
 800d6d6:	f041 0120 	orrmi.w	r1, r1, #32
 800d6da:	6021      	strmi	r1, [r4, #0]
 800d6dc:	b91b      	cbnz	r3, 800d6e6 <_printf_i+0x15e>
 800d6de:	6822      	ldr	r2, [r4, #0]
 800d6e0:	f022 0220 	bic.w	r2, r2, #32
 800d6e4:	6022      	str	r2, [r4, #0]
 800d6e6:	2210      	movs	r2, #16
 800d6e8:	e7b7      	b.n	800d65a <_printf_i+0xd2>
 800d6ea:	064d      	lsls	r5, r1, #25
 800d6ec:	bf48      	it	mi
 800d6ee:	b29b      	uxthmi	r3, r3
 800d6f0:	e7ef      	b.n	800d6d2 <_printf_i+0x14a>
 800d6f2:	4665      	mov	r5, ip
 800d6f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6f8:	fb02 3311 	mls	r3, r2, r1, r3
 800d6fc:	5cc3      	ldrb	r3, [r0, r3]
 800d6fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d702:	460b      	mov	r3, r1
 800d704:	2900      	cmp	r1, #0
 800d706:	d1f5      	bne.n	800d6f4 <_printf_i+0x16c>
 800d708:	e7b9      	b.n	800d67e <_printf_i+0xf6>
 800d70a:	6813      	ldr	r3, [r2, #0]
 800d70c:	6825      	ldr	r5, [r4, #0]
 800d70e:	6961      	ldr	r1, [r4, #20]
 800d710:	1d18      	adds	r0, r3, #4
 800d712:	6010      	str	r0, [r2, #0]
 800d714:	0628      	lsls	r0, r5, #24
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	d501      	bpl.n	800d71e <_printf_i+0x196>
 800d71a:	6019      	str	r1, [r3, #0]
 800d71c:	e002      	b.n	800d724 <_printf_i+0x19c>
 800d71e:	066a      	lsls	r2, r5, #25
 800d720:	d5fb      	bpl.n	800d71a <_printf_i+0x192>
 800d722:	8019      	strh	r1, [r3, #0]
 800d724:	2300      	movs	r3, #0
 800d726:	6123      	str	r3, [r4, #16]
 800d728:	4665      	mov	r5, ip
 800d72a:	e7b9      	b.n	800d6a0 <_printf_i+0x118>
 800d72c:	6813      	ldr	r3, [r2, #0]
 800d72e:	1d19      	adds	r1, r3, #4
 800d730:	6011      	str	r1, [r2, #0]
 800d732:	681d      	ldr	r5, [r3, #0]
 800d734:	6862      	ldr	r2, [r4, #4]
 800d736:	2100      	movs	r1, #0
 800d738:	4628      	mov	r0, r5
 800d73a:	f7f2 fd51 	bl	80001e0 <memchr>
 800d73e:	b108      	cbz	r0, 800d744 <_printf_i+0x1bc>
 800d740:	1b40      	subs	r0, r0, r5
 800d742:	6060      	str	r0, [r4, #4]
 800d744:	6863      	ldr	r3, [r4, #4]
 800d746:	6123      	str	r3, [r4, #16]
 800d748:	2300      	movs	r3, #0
 800d74a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d74e:	e7a7      	b.n	800d6a0 <_printf_i+0x118>
 800d750:	6923      	ldr	r3, [r4, #16]
 800d752:	462a      	mov	r2, r5
 800d754:	4639      	mov	r1, r7
 800d756:	4630      	mov	r0, r6
 800d758:	47c0      	blx	r8
 800d75a:	3001      	adds	r0, #1
 800d75c:	d0aa      	beq.n	800d6b4 <_printf_i+0x12c>
 800d75e:	6823      	ldr	r3, [r4, #0]
 800d760:	079b      	lsls	r3, r3, #30
 800d762:	d413      	bmi.n	800d78c <_printf_i+0x204>
 800d764:	68e0      	ldr	r0, [r4, #12]
 800d766:	9b03      	ldr	r3, [sp, #12]
 800d768:	4298      	cmp	r0, r3
 800d76a:	bfb8      	it	lt
 800d76c:	4618      	movlt	r0, r3
 800d76e:	e7a3      	b.n	800d6b8 <_printf_i+0x130>
 800d770:	2301      	movs	r3, #1
 800d772:	464a      	mov	r2, r9
 800d774:	4639      	mov	r1, r7
 800d776:	4630      	mov	r0, r6
 800d778:	47c0      	blx	r8
 800d77a:	3001      	adds	r0, #1
 800d77c:	d09a      	beq.n	800d6b4 <_printf_i+0x12c>
 800d77e:	3501      	adds	r5, #1
 800d780:	68e3      	ldr	r3, [r4, #12]
 800d782:	9a03      	ldr	r2, [sp, #12]
 800d784:	1a9b      	subs	r3, r3, r2
 800d786:	42ab      	cmp	r3, r5
 800d788:	dcf2      	bgt.n	800d770 <_printf_i+0x1e8>
 800d78a:	e7eb      	b.n	800d764 <_printf_i+0x1dc>
 800d78c:	2500      	movs	r5, #0
 800d78e:	f104 0919 	add.w	r9, r4, #25
 800d792:	e7f5      	b.n	800d780 <_printf_i+0x1f8>
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1ac      	bne.n	800d6f2 <_printf_i+0x16a>
 800d798:	7803      	ldrb	r3, [r0, #0]
 800d79a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d79e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7a2:	e76c      	b.n	800d67e <_printf_i+0xf6>
 800d7a4:	0800eca5 	.word	0x0800eca5
 800d7a8:	0800ecb6 	.word	0x0800ecb6

0800d7ac <memcpy>:
 800d7ac:	b510      	push	{r4, lr}
 800d7ae:	1e43      	subs	r3, r0, #1
 800d7b0:	440a      	add	r2, r1
 800d7b2:	4291      	cmp	r1, r2
 800d7b4:	d100      	bne.n	800d7b8 <memcpy+0xc>
 800d7b6:	bd10      	pop	{r4, pc}
 800d7b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7c0:	e7f7      	b.n	800d7b2 <memcpy+0x6>

0800d7c2 <memmove>:
 800d7c2:	4288      	cmp	r0, r1
 800d7c4:	b510      	push	{r4, lr}
 800d7c6:	eb01 0302 	add.w	r3, r1, r2
 800d7ca:	d807      	bhi.n	800d7dc <memmove+0x1a>
 800d7cc:	1e42      	subs	r2, r0, #1
 800d7ce:	4299      	cmp	r1, r3
 800d7d0:	d00a      	beq.n	800d7e8 <memmove+0x26>
 800d7d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7d6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d7da:	e7f8      	b.n	800d7ce <memmove+0xc>
 800d7dc:	4283      	cmp	r3, r0
 800d7de:	d9f5      	bls.n	800d7cc <memmove+0xa>
 800d7e0:	1881      	adds	r1, r0, r2
 800d7e2:	1ad2      	subs	r2, r2, r3
 800d7e4:	42d3      	cmn	r3, r2
 800d7e6:	d100      	bne.n	800d7ea <memmove+0x28>
 800d7e8:	bd10      	pop	{r4, pc}
 800d7ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7ee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d7f2:	e7f7      	b.n	800d7e4 <memmove+0x22>

0800d7f4 <_free_r>:
 800d7f4:	b538      	push	{r3, r4, r5, lr}
 800d7f6:	4605      	mov	r5, r0
 800d7f8:	2900      	cmp	r1, #0
 800d7fa:	d045      	beq.n	800d888 <_free_r+0x94>
 800d7fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d800:	1f0c      	subs	r4, r1, #4
 800d802:	2b00      	cmp	r3, #0
 800d804:	bfb8      	it	lt
 800d806:	18e4      	addlt	r4, r4, r3
 800d808:	f000 f8d2 	bl	800d9b0 <__malloc_lock>
 800d80c:	4a1f      	ldr	r2, [pc, #124]	; (800d88c <_free_r+0x98>)
 800d80e:	6813      	ldr	r3, [r2, #0]
 800d810:	4610      	mov	r0, r2
 800d812:	b933      	cbnz	r3, 800d822 <_free_r+0x2e>
 800d814:	6063      	str	r3, [r4, #4]
 800d816:	6014      	str	r4, [r2, #0]
 800d818:	4628      	mov	r0, r5
 800d81a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d81e:	f000 b8c8 	b.w	800d9b2 <__malloc_unlock>
 800d822:	42a3      	cmp	r3, r4
 800d824:	d90c      	bls.n	800d840 <_free_r+0x4c>
 800d826:	6821      	ldr	r1, [r4, #0]
 800d828:	1862      	adds	r2, r4, r1
 800d82a:	4293      	cmp	r3, r2
 800d82c:	bf04      	itt	eq
 800d82e:	681a      	ldreq	r2, [r3, #0]
 800d830:	685b      	ldreq	r3, [r3, #4]
 800d832:	6063      	str	r3, [r4, #4]
 800d834:	bf04      	itt	eq
 800d836:	1852      	addeq	r2, r2, r1
 800d838:	6022      	streq	r2, [r4, #0]
 800d83a:	6004      	str	r4, [r0, #0]
 800d83c:	e7ec      	b.n	800d818 <_free_r+0x24>
 800d83e:	4613      	mov	r3, r2
 800d840:	685a      	ldr	r2, [r3, #4]
 800d842:	b10a      	cbz	r2, 800d848 <_free_r+0x54>
 800d844:	42a2      	cmp	r2, r4
 800d846:	d9fa      	bls.n	800d83e <_free_r+0x4a>
 800d848:	6819      	ldr	r1, [r3, #0]
 800d84a:	1858      	adds	r0, r3, r1
 800d84c:	42a0      	cmp	r0, r4
 800d84e:	d10b      	bne.n	800d868 <_free_r+0x74>
 800d850:	6820      	ldr	r0, [r4, #0]
 800d852:	4401      	add	r1, r0
 800d854:	1858      	adds	r0, r3, r1
 800d856:	4282      	cmp	r2, r0
 800d858:	6019      	str	r1, [r3, #0]
 800d85a:	d1dd      	bne.n	800d818 <_free_r+0x24>
 800d85c:	6810      	ldr	r0, [r2, #0]
 800d85e:	6852      	ldr	r2, [r2, #4]
 800d860:	605a      	str	r2, [r3, #4]
 800d862:	4401      	add	r1, r0
 800d864:	6019      	str	r1, [r3, #0]
 800d866:	e7d7      	b.n	800d818 <_free_r+0x24>
 800d868:	d902      	bls.n	800d870 <_free_r+0x7c>
 800d86a:	230c      	movs	r3, #12
 800d86c:	602b      	str	r3, [r5, #0]
 800d86e:	e7d3      	b.n	800d818 <_free_r+0x24>
 800d870:	6820      	ldr	r0, [r4, #0]
 800d872:	1821      	adds	r1, r4, r0
 800d874:	428a      	cmp	r2, r1
 800d876:	bf04      	itt	eq
 800d878:	6811      	ldreq	r1, [r2, #0]
 800d87a:	6852      	ldreq	r2, [r2, #4]
 800d87c:	6062      	str	r2, [r4, #4]
 800d87e:	bf04      	itt	eq
 800d880:	1809      	addeq	r1, r1, r0
 800d882:	6021      	streq	r1, [r4, #0]
 800d884:	605c      	str	r4, [r3, #4]
 800d886:	e7c7      	b.n	800d818 <_free_r+0x24>
 800d888:	bd38      	pop	{r3, r4, r5, pc}
 800d88a:	bf00      	nop
 800d88c:	20000120 	.word	0x20000120

0800d890 <_malloc_r>:
 800d890:	b570      	push	{r4, r5, r6, lr}
 800d892:	1ccd      	adds	r5, r1, #3
 800d894:	f025 0503 	bic.w	r5, r5, #3
 800d898:	3508      	adds	r5, #8
 800d89a:	2d0c      	cmp	r5, #12
 800d89c:	bf38      	it	cc
 800d89e:	250c      	movcc	r5, #12
 800d8a0:	2d00      	cmp	r5, #0
 800d8a2:	4606      	mov	r6, r0
 800d8a4:	db01      	blt.n	800d8aa <_malloc_r+0x1a>
 800d8a6:	42a9      	cmp	r1, r5
 800d8a8:	d903      	bls.n	800d8b2 <_malloc_r+0x22>
 800d8aa:	230c      	movs	r3, #12
 800d8ac:	6033      	str	r3, [r6, #0]
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	bd70      	pop	{r4, r5, r6, pc}
 800d8b2:	f000 f87d 	bl	800d9b0 <__malloc_lock>
 800d8b6:	4a21      	ldr	r2, [pc, #132]	; (800d93c <_malloc_r+0xac>)
 800d8b8:	6814      	ldr	r4, [r2, #0]
 800d8ba:	4621      	mov	r1, r4
 800d8bc:	b991      	cbnz	r1, 800d8e4 <_malloc_r+0x54>
 800d8be:	4c20      	ldr	r4, [pc, #128]	; (800d940 <_malloc_r+0xb0>)
 800d8c0:	6823      	ldr	r3, [r4, #0]
 800d8c2:	b91b      	cbnz	r3, 800d8cc <_malloc_r+0x3c>
 800d8c4:	4630      	mov	r0, r6
 800d8c6:	f000 f863 	bl	800d990 <_sbrk_r>
 800d8ca:	6020      	str	r0, [r4, #0]
 800d8cc:	4629      	mov	r1, r5
 800d8ce:	4630      	mov	r0, r6
 800d8d0:	f000 f85e 	bl	800d990 <_sbrk_r>
 800d8d4:	1c43      	adds	r3, r0, #1
 800d8d6:	d124      	bne.n	800d922 <_malloc_r+0x92>
 800d8d8:	230c      	movs	r3, #12
 800d8da:	6033      	str	r3, [r6, #0]
 800d8dc:	4630      	mov	r0, r6
 800d8de:	f000 f868 	bl	800d9b2 <__malloc_unlock>
 800d8e2:	e7e4      	b.n	800d8ae <_malloc_r+0x1e>
 800d8e4:	680b      	ldr	r3, [r1, #0]
 800d8e6:	1b5b      	subs	r3, r3, r5
 800d8e8:	d418      	bmi.n	800d91c <_malloc_r+0x8c>
 800d8ea:	2b0b      	cmp	r3, #11
 800d8ec:	d90f      	bls.n	800d90e <_malloc_r+0x7e>
 800d8ee:	600b      	str	r3, [r1, #0]
 800d8f0:	50cd      	str	r5, [r1, r3]
 800d8f2:	18cc      	adds	r4, r1, r3
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	f000 f85c 	bl	800d9b2 <__malloc_unlock>
 800d8fa:	f104 000b 	add.w	r0, r4, #11
 800d8fe:	1d23      	adds	r3, r4, #4
 800d900:	f020 0007 	bic.w	r0, r0, #7
 800d904:	1ac3      	subs	r3, r0, r3
 800d906:	d0d3      	beq.n	800d8b0 <_malloc_r+0x20>
 800d908:	425a      	negs	r2, r3
 800d90a:	50e2      	str	r2, [r4, r3]
 800d90c:	e7d0      	b.n	800d8b0 <_malloc_r+0x20>
 800d90e:	428c      	cmp	r4, r1
 800d910:	684b      	ldr	r3, [r1, #4]
 800d912:	bf16      	itet	ne
 800d914:	6063      	strne	r3, [r4, #4]
 800d916:	6013      	streq	r3, [r2, #0]
 800d918:	460c      	movne	r4, r1
 800d91a:	e7eb      	b.n	800d8f4 <_malloc_r+0x64>
 800d91c:	460c      	mov	r4, r1
 800d91e:	6849      	ldr	r1, [r1, #4]
 800d920:	e7cc      	b.n	800d8bc <_malloc_r+0x2c>
 800d922:	1cc4      	adds	r4, r0, #3
 800d924:	f024 0403 	bic.w	r4, r4, #3
 800d928:	42a0      	cmp	r0, r4
 800d92a:	d005      	beq.n	800d938 <_malloc_r+0xa8>
 800d92c:	1a21      	subs	r1, r4, r0
 800d92e:	4630      	mov	r0, r6
 800d930:	f000 f82e 	bl	800d990 <_sbrk_r>
 800d934:	3001      	adds	r0, #1
 800d936:	d0cf      	beq.n	800d8d8 <_malloc_r+0x48>
 800d938:	6025      	str	r5, [r4, #0]
 800d93a:	e7db      	b.n	800d8f4 <_malloc_r+0x64>
 800d93c:	20000120 	.word	0x20000120
 800d940:	20000124 	.word	0x20000124

0800d944 <_realloc_r>:
 800d944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d946:	4607      	mov	r7, r0
 800d948:	4614      	mov	r4, r2
 800d94a:	460e      	mov	r6, r1
 800d94c:	b921      	cbnz	r1, 800d958 <_realloc_r+0x14>
 800d94e:	4611      	mov	r1, r2
 800d950:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d954:	f7ff bf9c 	b.w	800d890 <_malloc_r>
 800d958:	b922      	cbnz	r2, 800d964 <_realloc_r+0x20>
 800d95a:	f7ff ff4b 	bl	800d7f4 <_free_r>
 800d95e:	4625      	mov	r5, r4
 800d960:	4628      	mov	r0, r5
 800d962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d964:	f000 f826 	bl	800d9b4 <_malloc_usable_size_r>
 800d968:	42a0      	cmp	r0, r4
 800d96a:	d20f      	bcs.n	800d98c <_realloc_r+0x48>
 800d96c:	4621      	mov	r1, r4
 800d96e:	4638      	mov	r0, r7
 800d970:	f7ff ff8e 	bl	800d890 <_malloc_r>
 800d974:	4605      	mov	r5, r0
 800d976:	2800      	cmp	r0, #0
 800d978:	d0f2      	beq.n	800d960 <_realloc_r+0x1c>
 800d97a:	4631      	mov	r1, r6
 800d97c:	4622      	mov	r2, r4
 800d97e:	f7ff ff15 	bl	800d7ac <memcpy>
 800d982:	4631      	mov	r1, r6
 800d984:	4638      	mov	r0, r7
 800d986:	f7ff ff35 	bl	800d7f4 <_free_r>
 800d98a:	e7e9      	b.n	800d960 <_realloc_r+0x1c>
 800d98c:	4635      	mov	r5, r6
 800d98e:	e7e7      	b.n	800d960 <_realloc_r+0x1c>

0800d990 <_sbrk_r>:
 800d990:	b538      	push	{r3, r4, r5, lr}
 800d992:	4c06      	ldr	r4, [pc, #24]	; (800d9ac <_sbrk_r+0x1c>)
 800d994:	2300      	movs	r3, #0
 800d996:	4605      	mov	r5, r0
 800d998:	4608      	mov	r0, r1
 800d99a:	6023      	str	r3, [r4, #0]
 800d99c:	f7ff fb5e 	bl	800d05c <_sbrk>
 800d9a0:	1c43      	adds	r3, r0, #1
 800d9a2:	d102      	bne.n	800d9aa <_sbrk_r+0x1a>
 800d9a4:	6823      	ldr	r3, [r4, #0]
 800d9a6:	b103      	cbz	r3, 800d9aa <_sbrk_r+0x1a>
 800d9a8:	602b      	str	r3, [r5, #0]
 800d9aa:	bd38      	pop	{r3, r4, r5, pc}
 800d9ac:	2000141c 	.word	0x2000141c

0800d9b0 <__malloc_lock>:
 800d9b0:	4770      	bx	lr

0800d9b2 <__malloc_unlock>:
 800d9b2:	4770      	bx	lr

0800d9b4 <_malloc_usable_size_r>:
 800d9b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9b8:	1f18      	subs	r0, r3, #4
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	bfbc      	itt	lt
 800d9be:	580b      	ldrlt	r3, [r1, r0]
 800d9c0:	18c0      	addlt	r0, r0, r3
 800d9c2:	4770      	bx	lr
 800d9c4:	0000      	movs	r0, r0
	...

0800d9c8 <cos>:
 800d9c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9ca:	ec51 0b10 	vmov	r0, r1, d0
 800d9ce:	4a1e      	ldr	r2, [pc, #120]	; (800da48 <cos+0x80>)
 800d9d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	dc06      	bgt.n	800d9e6 <cos+0x1e>
 800d9d8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800da40 <cos+0x78>
 800d9dc:	f000 fa74 	bl	800dec8 <__kernel_cos>
 800d9e0:	ec51 0b10 	vmov	r0, r1, d0
 800d9e4:	e007      	b.n	800d9f6 <cos+0x2e>
 800d9e6:	4a19      	ldr	r2, [pc, #100]	; (800da4c <cos+0x84>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	dd09      	ble.n	800da00 <cos+0x38>
 800d9ec:	ee10 2a10 	vmov	r2, s0
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	f7f2 fc49 	bl	8000288 <__aeabi_dsub>
 800d9f6:	ec41 0b10 	vmov	d0, r0, r1
 800d9fa:	b005      	add	sp, #20
 800d9fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800da00:	4668      	mov	r0, sp
 800da02:	f000 f86d 	bl	800dae0 <__ieee754_rem_pio2>
 800da06:	f000 0003 	and.w	r0, r0, #3
 800da0a:	2801      	cmp	r0, #1
 800da0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da10:	ed9d 0b00 	vldr	d0, [sp]
 800da14:	d007      	beq.n	800da26 <cos+0x5e>
 800da16:	2802      	cmp	r0, #2
 800da18:	d00e      	beq.n	800da38 <cos+0x70>
 800da1a:	2800      	cmp	r0, #0
 800da1c:	d0de      	beq.n	800d9dc <cos+0x14>
 800da1e:	2001      	movs	r0, #1
 800da20:	f000 fe5a 	bl	800e6d8 <__kernel_sin>
 800da24:	e7dc      	b.n	800d9e0 <cos+0x18>
 800da26:	f000 fe57 	bl	800e6d8 <__kernel_sin>
 800da2a:	ec53 2b10 	vmov	r2, r3, d0
 800da2e:	ee10 0a10 	vmov	r0, s0
 800da32:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800da36:	e7de      	b.n	800d9f6 <cos+0x2e>
 800da38:	f000 fa46 	bl	800dec8 <__kernel_cos>
 800da3c:	e7f5      	b.n	800da2a <cos+0x62>
 800da3e:	bf00      	nop
	...
 800da48:	3fe921fb 	.word	0x3fe921fb
 800da4c:	7fefffff 	.word	0x7fefffff

0800da50 <sin>:
 800da50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da52:	ec51 0b10 	vmov	r0, r1, d0
 800da56:	4a20      	ldr	r2, [pc, #128]	; (800dad8 <sin+0x88>)
 800da58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da5c:	4293      	cmp	r3, r2
 800da5e:	dc07      	bgt.n	800da70 <sin+0x20>
 800da60:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800dad0 <sin+0x80>
 800da64:	2000      	movs	r0, #0
 800da66:	f000 fe37 	bl	800e6d8 <__kernel_sin>
 800da6a:	ec51 0b10 	vmov	r0, r1, d0
 800da6e:	e007      	b.n	800da80 <sin+0x30>
 800da70:	4a1a      	ldr	r2, [pc, #104]	; (800dadc <sin+0x8c>)
 800da72:	4293      	cmp	r3, r2
 800da74:	dd09      	ble.n	800da8a <sin+0x3a>
 800da76:	ee10 2a10 	vmov	r2, s0
 800da7a:	460b      	mov	r3, r1
 800da7c:	f7f2 fc04 	bl	8000288 <__aeabi_dsub>
 800da80:	ec41 0b10 	vmov	d0, r0, r1
 800da84:	b005      	add	sp, #20
 800da86:	f85d fb04 	ldr.w	pc, [sp], #4
 800da8a:	4668      	mov	r0, sp
 800da8c:	f000 f828 	bl	800dae0 <__ieee754_rem_pio2>
 800da90:	f000 0003 	and.w	r0, r0, #3
 800da94:	2801      	cmp	r0, #1
 800da96:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da9a:	ed9d 0b00 	vldr	d0, [sp]
 800da9e:	d004      	beq.n	800daaa <sin+0x5a>
 800daa0:	2802      	cmp	r0, #2
 800daa2:	d005      	beq.n	800dab0 <sin+0x60>
 800daa4:	b970      	cbnz	r0, 800dac4 <sin+0x74>
 800daa6:	2001      	movs	r0, #1
 800daa8:	e7dd      	b.n	800da66 <sin+0x16>
 800daaa:	f000 fa0d 	bl	800dec8 <__kernel_cos>
 800daae:	e7dc      	b.n	800da6a <sin+0x1a>
 800dab0:	2001      	movs	r0, #1
 800dab2:	f000 fe11 	bl	800e6d8 <__kernel_sin>
 800dab6:	ec53 2b10 	vmov	r2, r3, d0
 800daba:	ee10 0a10 	vmov	r0, s0
 800dabe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dac2:	e7dd      	b.n	800da80 <sin+0x30>
 800dac4:	f000 fa00 	bl	800dec8 <__kernel_cos>
 800dac8:	e7f5      	b.n	800dab6 <sin+0x66>
 800daca:	bf00      	nop
 800dacc:	f3af 8000 	nop.w
	...
 800dad8:	3fe921fb 	.word	0x3fe921fb
 800dadc:	7fefffff 	.word	0x7fefffff

0800dae0 <__ieee754_rem_pio2>:
 800dae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae4:	ec57 6b10 	vmov	r6, r7, d0
 800dae8:	4bc3      	ldr	r3, [pc, #780]	; (800ddf8 <__ieee754_rem_pio2+0x318>)
 800daea:	b08d      	sub	sp, #52	; 0x34
 800daec:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800daf0:	4598      	cmp	r8, r3
 800daf2:	4604      	mov	r4, r0
 800daf4:	9704      	str	r7, [sp, #16]
 800daf6:	dc07      	bgt.n	800db08 <__ieee754_rem_pio2+0x28>
 800daf8:	2200      	movs	r2, #0
 800dafa:	2300      	movs	r3, #0
 800dafc:	ed84 0b00 	vstr	d0, [r4]
 800db00:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800db04:	2500      	movs	r5, #0
 800db06:	e027      	b.n	800db58 <__ieee754_rem_pio2+0x78>
 800db08:	4bbc      	ldr	r3, [pc, #752]	; (800ddfc <__ieee754_rem_pio2+0x31c>)
 800db0a:	4598      	cmp	r8, r3
 800db0c:	dc75      	bgt.n	800dbfa <__ieee754_rem_pio2+0x11a>
 800db0e:	9b04      	ldr	r3, [sp, #16]
 800db10:	4dbb      	ldr	r5, [pc, #748]	; (800de00 <__ieee754_rem_pio2+0x320>)
 800db12:	2b00      	cmp	r3, #0
 800db14:	ee10 0a10 	vmov	r0, s0
 800db18:	a3a9      	add	r3, pc, #676	; (adr r3, 800ddc0 <__ieee754_rem_pio2+0x2e0>)
 800db1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1e:	4639      	mov	r1, r7
 800db20:	dd36      	ble.n	800db90 <__ieee754_rem_pio2+0xb0>
 800db22:	f7f2 fbb1 	bl	8000288 <__aeabi_dsub>
 800db26:	45a8      	cmp	r8, r5
 800db28:	4606      	mov	r6, r0
 800db2a:	460f      	mov	r7, r1
 800db2c:	d018      	beq.n	800db60 <__ieee754_rem_pio2+0x80>
 800db2e:	a3a6      	add	r3, pc, #664	; (adr r3, 800ddc8 <__ieee754_rem_pio2+0x2e8>)
 800db30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db34:	f7f2 fba8 	bl	8000288 <__aeabi_dsub>
 800db38:	4602      	mov	r2, r0
 800db3a:	460b      	mov	r3, r1
 800db3c:	e9c4 2300 	strd	r2, r3, [r4]
 800db40:	4630      	mov	r0, r6
 800db42:	4639      	mov	r1, r7
 800db44:	f7f2 fba0 	bl	8000288 <__aeabi_dsub>
 800db48:	a39f      	add	r3, pc, #636	; (adr r3, 800ddc8 <__ieee754_rem_pio2+0x2e8>)
 800db4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4e:	f7f2 fb9b 	bl	8000288 <__aeabi_dsub>
 800db52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800db56:	2501      	movs	r5, #1
 800db58:	4628      	mov	r0, r5
 800db5a:	b00d      	add	sp, #52	; 0x34
 800db5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db60:	a39b      	add	r3, pc, #620	; (adr r3, 800ddd0 <__ieee754_rem_pio2+0x2f0>)
 800db62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db66:	f7f2 fb8f 	bl	8000288 <__aeabi_dsub>
 800db6a:	a39b      	add	r3, pc, #620	; (adr r3, 800ddd8 <__ieee754_rem_pio2+0x2f8>)
 800db6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db70:	4606      	mov	r6, r0
 800db72:	460f      	mov	r7, r1
 800db74:	f7f2 fb88 	bl	8000288 <__aeabi_dsub>
 800db78:	4602      	mov	r2, r0
 800db7a:	460b      	mov	r3, r1
 800db7c:	e9c4 2300 	strd	r2, r3, [r4]
 800db80:	4630      	mov	r0, r6
 800db82:	4639      	mov	r1, r7
 800db84:	f7f2 fb80 	bl	8000288 <__aeabi_dsub>
 800db88:	a393      	add	r3, pc, #588	; (adr r3, 800ddd8 <__ieee754_rem_pio2+0x2f8>)
 800db8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8e:	e7de      	b.n	800db4e <__ieee754_rem_pio2+0x6e>
 800db90:	f7f2 fb7c 	bl	800028c <__adddf3>
 800db94:	45a8      	cmp	r8, r5
 800db96:	4606      	mov	r6, r0
 800db98:	460f      	mov	r7, r1
 800db9a:	d016      	beq.n	800dbca <__ieee754_rem_pio2+0xea>
 800db9c:	a38a      	add	r3, pc, #552	; (adr r3, 800ddc8 <__ieee754_rem_pio2+0x2e8>)
 800db9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba2:	f7f2 fb73 	bl	800028c <__adddf3>
 800dba6:	4602      	mov	r2, r0
 800dba8:	460b      	mov	r3, r1
 800dbaa:	e9c4 2300 	strd	r2, r3, [r4]
 800dbae:	4630      	mov	r0, r6
 800dbb0:	4639      	mov	r1, r7
 800dbb2:	f7f2 fb69 	bl	8000288 <__aeabi_dsub>
 800dbb6:	a384      	add	r3, pc, #528	; (adr r3, 800ddc8 <__ieee754_rem_pio2+0x2e8>)
 800dbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbc:	f7f2 fb66 	bl	800028c <__adddf3>
 800dbc0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800dbc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dbc8:	e7c6      	b.n	800db58 <__ieee754_rem_pio2+0x78>
 800dbca:	a381      	add	r3, pc, #516	; (adr r3, 800ddd0 <__ieee754_rem_pio2+0x2f0>)
 800dbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd0:	f7f2 fb5c 	bl	800028c <__adddf3>
 800dbd4:	a380      	add	r3, pc, #512	; (adr r3, 800ddd8 <__ieee754_rem_pio2+0x2f8>)
 800dbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbda:	4606      	mov	r6, r0
 800dbdc:	460f      	mov	r7, r1
 800dbde:	f7f2 fb55 	bl	800028c <__adddf3>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	e9c4 2300 	strd	r2, r3, [r4]
 800dbea:	4630      	mov	r0, r6
 800dbec:	4639      	mov	r1, r7
 800dbee:	f7f2 fb4b 	bl	8000288 <__aeabi_dsub>
 800dbf2:	a379      	add	r3, pc, #484	; (adr r3, 800ddd8 <__ieee754_rem_pio2+0x2f8>)
 800dbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf8:	e7e0      	b.n	800dbbc <__ieee754_rem_pio2+0xdc>
 800dbfa:	4b82      	ldr	r3, [pc, #520]	; (800de04 <__ieee754_rem_pio2+0x324>)
 800dbfc:	4598      	cmp	r8, r3
 800dbfe:	f300 80d0 	bgt.w	800dda2 <__ieee754_rem_pio2+0x2c2>
 800dc02:	f000 fe23 	bl	800e84c <fabs>
 800dc06:	ec57 6b10 	vmov	r6, r7, d0
 800dc0a:	ee10 0a10 	vmov	r0, s0
 800dc0e:	a374      	add	r3, pc, #464	; (adr r3, 800dde0 <__ieee754_rem_pio2+0x300>)
 800dc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc14:	4639      	mov	r1, r7
 800dc16:	f7f2 fcef 	bl	80005f8 <__aeabi_dmul>
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	4b7a      	ldr	r3, [pc, #488]	; (800de08 <__ieee754_rem_pio2+0x328>)
 800dc1e:	f7f2 fb35 	bl	800028c <__adddf3>
 800dc22:	f7f2 ff83 	bl	8000b2c <__aeabi_d2iz>
 800dc26:	4605      	mov	r5, r0
 800dc28:	f7f2 fc7c 	bl	8000524 <__aeabi_i2d>
 800dc2c:	a364      	add	r3, pc, #400	; (adr r3, 800ddc0 <__ieee754_rem_pio2+0x2e0>)
 800dc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc36:	f7f2 fcdf 	bl	80005f8 <__aeabi_dmul>
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	4630      	mov	r0, r6
 800dc40:	4639      	mov	r1, r7
 800dc42:	f7f2 fb21 	bl	8000288 <__aeabi_dsub>
 800dc46:	a360      	add	r3, pc, #384	; (adr r3, 800ddc8 <__ieee754_rem_pio2+0x2e8>)
 800dc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4c:	4682      	mov	sl, r0
 800dc4e:	468b      	mov	fp, r1
 800dc50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc54:	f7f2 fcd0 	bl	80005f8 <__aeabi_dmul>
 800dc58:	2d1f      	cmp	r5, #31
 800dc5a:	4606      	mov	r6, r0
 800dc5c:	460f      	mov	r7, r1
 800dc5e:	dc0c      	bgt.n	800dc7a <__ieee754_rem_pio2+0x19a>
 800dc60:	1e6a      	subs	r2, r5, #1
 800dc62:	4b6a      	ldr	r3, [pc, #424]	; (800de0c <__ieee754_rem_pio2+0x32c>)
 800dc64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc68:	4543      	cmp	r3, r8
 800dc6a:	d006      	beq.n	800dc7a <__ieee754_rem_pio2+0x19a>
 800dc6c:	4632      	mov	r2, r6
 800dc6e:	463b      	mov	r3, r7
 800dc70:	4650      	mov	r0, sl
 800dc72:	4659      	mov	r1, fp
 800dc74:	f7f2 fb08 	bl	8000288 <__aeabi_dsub>
 800dc78:	e00e      	b.n	800dc98 <__ieee754_rem_pio2+0x1b8>
 800dc7a:	4632      	mov	r2, r6
 800dc7c:	463b      	mov	r3, r7
 800dc7e:	4650      	mov	r0, sl
 800dc80:	4659      	mov	r1, fp
 800dc82:	f7f2 fb01 	bl	8000288 <__aeabi_dsub>
 800dc86:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dc8a:	9305      	str	r3, [sp, #20]
 800dc8c:	9a05      	ldr	r2, [sp, #20]
 800dc8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dc92:	1ad3      	subs	r3, r2, r3
 800dc94:	2b10      	cmp	r3, #16
 800dc96:	dc02      	bgt.n	800dc9e <__ieee754_rem_pio2+0x1be>
 800dc98:	e9c4 0100 	strd	r0, r1, [r4]
 800dc9c:	e039      	b.n	800dd12 <__ieee754_rem_pio2+0x232>
 800dc9e:	a34c      	add	r3, pc, #304	; (adr r3, 800ddd0 <__ieee754_rem_pio2+0x2f0>)
 800dca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dca8:	f7f2 fca6 	bl	80005f8 <__aeabi_dmul>
 800dcac:	4606      	mov	r6, r0
 800dcae:	460f      	mov	r7, r1
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	4650      	mov	r0, sl
 800dcb6:	4659      	mov	r1, fp
 800dcb8:	f7f2 fae6 	bl	8000288 <__aeabi_dsub>
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	4680      	mov	r8, r0
 800dcc2:	4689      	mov	r9, r1
 800dcc4:	4650      	mov	r0, sl
 800dcc6:	4659      	mov	r1, fp
 800dcc8:	f7f2 fade 	bl	8000288 <__aeabi_dsub>
 800dccc:	4632      	mov	r2, r6
 800dcce:	463b      	mov	r3, r7
 800dcd0:	f7f2 fada 	bl	8000288 <__aeabi_dsub>
 800dcd4:	a340      	add	r3, pc, #256	; (adr r3, 800ddd8 <__ieee754_rem_pio2+0x2f8>)
 800dcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcda:	4606      	mov	r6, r0
 800dcdc:	460f      	mov	r7, r1
 800dcde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dce2:	f7f2 fc89 	bl	80005f8 <__aeabi_dmul>
 800dce6:	4632      	mov	r2, r6
 800dce8:	463b      	mov	r3, r7
 800dcea:	f7f2 facd 	bl	8000288 <__aeabi_dsub>
 800dcee:	4602      	mov	r2, r0
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	4606      	mov	r6, r0
 800dcf4:	460f      	mov	r7, r1
 800dcf6:	4640      	mov	r0, r8
 800dcf8:	4649      	mov	r1, r9
 800dcfa:	f7f2 fac5 	bl	8000288 <__aeabi_dsub>
 800dcfe:	9a05      	ldr	r2, [sp, #20]
 800dd00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dd04:	1ad3      	subs	r3, r2, r3
 800dd06:	2b31      	cmp	r3, #49	; 0x31
 800dd08:	dc20      	bgt.n	800dd4c <__ieee754_rem_pio2+0x26c>
 800dd0a:	e9c4 0100 	strd	r0, r1, [r4]
 800dd0e:	46c2      	mov	sl, r8
 800dd10:	46cb      	mov	fp, r9
 800dd12:	e9d4 8900 	ldrd	r8, r9, [r4]
 800dd16:	4650      	mov	r0, sl
 800dd18:	4642      	mov	r2, r8
 800dd1a:	464b      	mov	r3, r9
 800dd1c:	4659      	mov	r1, fp
 800dd1e:	f7f2 fab3 	bl	8000288 <__aeabi_dsub>
 800dd22:	463b      	mov	r3, r7
 800dd24:	4632      	mov	r2, r6
 800dd26:	f7f2 faaf 	bl	8000288 <__aeabi_dsub>
 800dd2a:	9b04      	ldr	r3, [sp, #16]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dd32:	f6bf af11 	bge.w	800db58 <__ieee754_rem_pio2+0x78>
 800dd36:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dd3a:	6063      	str	r3, [r4, #4]
 800dd3c:	f8c4 8000 	str.w	r8, [r4]
 800dd40:	60a0      	str	r0, [r4, #8]
 800dd42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd46:	60e3      	str	r3, [r4, #12]
 800dd48:	426d      	negs	r5, r5
 800dd4a:	e705      	b.n	800db58 <__ieee754_rem_pio2+0x78>
 800dd4c:	a326      	add	r3, pc, #152	; (adr r3, 800dde8 <__ieee754_rem_pio2+0x308>)
 800dd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd56:	f7f2 fc4f 	bl	80005f8 <__aeabi_dmul>
 800dd5a:	4606      	mov	r6, r0
 800dd5c:	460f      	mov	r7, r1
 800dd5e:	4602      	mov	r2, r0
 800dd60:	460b      	mov	r3, r1
 800dd62:	4640      	mov	r0, r8
 800dd64:	4649      	mov	r1, r9
 800dd66:	f7f2 fa8f 	bl	8000288 <__aeabi_dsub>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	4682      	mov	sl, r0
 800dd70:	468b      	mov	fp, r1
 800dd72:	4640      	mov	r0, r8
 800dd74:	4649      	mov	r1, r9
 800dd76:	f7f2 fa87 	bl	8000288 <__aeabi_dsub>
 800dd7a:	4632      	mov	r2, r6
 800dd7c:	463b      	mov	r3, r7
 800dd7e:	f7f2 fa83 	bl	8000288 <__aeabi_dsub>
 800dd82:	a31b      	add	r3, pc, #108	; (adr r3, 800ddf0 <__ieee754_rem_pio2+0x310>)
 800dd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd88:	4606      	mov	r6, r0
 800dd8a:	460f      	mov	r7, r1
 800dd8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd90:	f7f2 fc32 	bl	80005f8 <__aeabi_dmul>
 800dd94:	4632      	mov	r2, r6
 800dd96:	463b      	mov	r3, r7
 800dd98:	f7f2 fa76 	bl	8000288 <__aeabi_dsub>
 800dd9c:	4606      	mov	r6, r0
 800dd9e:	460f      	mov	r7, r1
 800dda0:	e764      	b.n	800dc6c <__ieee754_rem_pio2+0x18c>
 800dda2:	4b1b      	ldr	r3, [pc, #108]	; (800de10 <__ieee754_rem_pio2+0x330>)
 800dda4:	4598      	cmp	r8, r3
 800dda6:	dd35      	ble.n	800de14 <__ieee754_rem_pio2+0x334>
 800dda8:	ee10 2a10 	vmov	r2, s0
 800ddac:	463b      	mov	r3, r7
 800ddae:	4630      	mov	r0, r6
 800ddb0:	4639      	mov	r1, r7
 800ddb2:	f7f2 fa69 	bl	8000288 <__aeabi_dsub>
 800ddb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ddba:	e9c4 0100 	strd	r0, r1, [r4]
 800ddbe:	e6a1      	b.n	800db04 <__ieee754_rem_pio2+0x24>
 800ddc0:	54400000 	.word	0x54400000
 800ddc4:	3ff921fb 	.word	0x3ff921fb
 800ddc8:	1a626331 	.word	0x1a626331
 800ddcc:	3dd0b461 	.word	0x3dd0b461
 800ddd0:	1a600000 	.word	0x1a600000
 800ddd4:	3dd0b461 	.word	0x3dd0b461
 800ddd8:	2e037073 	.word	0x2e037073
 800dddc:	3ba3198a 	.word	0x3ba3198a
 800dde0:	6dc9c883 	.word	0x6dc9c883
 800dde4:	3fe45f30 	.word	0x3fe45f30
 800dde8:	2e000000 	.word	0x2e000000
 800ddec:	3ba3198a 	.word	0x3ba3198a
 800ddf0:	252049c1 	.word	0x252049c1
 800ddf4:	397b839a 	.word	0x397b839a
 800ddf8:	3fe921fb 	.word	0x3fe921fb
 800ddfc:	4002d97b 	.word	0x4002d97b
 800de00:	3ff921fb 	.word	0x3ff921fb
 800de04:	413921fb 	.word	0x413921fb
 800de08:	3fe00000 	.word	0x3fe00000
 800de0c:	0800ecc8 	.word	0x0800ecc8
 800de10:	7fefffff 	.word	0x7fefffff
 800de14:	ea4f 5528 	mov.w	r5, r8, asr #20
 800de18:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800de1c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800de20:	4630      	mov	r0, r6
 800de22:	460f      	mov	r7, r1
 800de24:	f7f2 fe82 	bl	8000b2c <__aeabi_d2iz>
 800de28:	f7f2 fb7c 	bl	8000524 <__aeabi_i2d>
 800de2c:	4602      	mov	r2, r0
 800de2e:	460b      	mov	r3, r1
 800de30:	4630      	mov	r0, r6
 800de32:	4639      	mov	r1, r7
 800de34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800de38:	f7f2 fa26 	bl	8000288 <__aeabi_dsub>
 800de3c:	2200      	movs	r2, #0
 800de3e:	4b1f      	ldr	r3, [pc, #124]	; (800debc <__ieee754_rem_pio2+0x3dc>)
 800de40:	f7f2 fbda 	bl	80005f8 <__aeabi_dmul>
 800de44:	460f      	mov	r7, r1
 800de46:	4606      	mov	r6, r0
 800de48:	f7f2 fe70 	bl	8000b2c <__aeabi_d2iz>
 800de4c:	f7f2 fb6a 	bl	8000524 <__aeabi_i2d>
 800de50:	4602      	mov	r2, r0
 800de52:	460b      	mov	r3, r1
 800de54:	4630      	mov	r0, r6
 800de56:	4639      	mov	r1, r7
 800de58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800de5c:	f7f2 fa14 	bl	8000288 <__aeabi_dsub>
 800de60:	2200      	movs	r2, #0
 800de62:	4b16      	ldr	r3, [pc, #88]	; (800debc <__ieee754_rem_pio2+0x3dc>)
 800de64:	f7f2 fbc8 	bl	80005f8 <__aeabi_dmul>
 800de68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800de6c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800de70:	f04f 0803 	mov.w	r8, #3
 800de74:	2600      	movs	r6, #0
 800de76:	2700      	movs	r7, #0
 800de78:	4632      	mov	r2, r6
 800de7a:	463b      	mov	r3, r7
 800de7c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800de80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800de84:	f7f2 fe20 	bl	8000ac8 <__aeabi_dcmpeq>
 800de88:	b9b0      	cbnz	r0, 800deb8 <__ieee754_rem_pio2+0x3d8>
 800de8a:	4b0d      	ldr	r3, [pc, #52]	; (800dec0 <__ieee754_rem_pio2+0x3e0>)
 800de8c:	9301      	str	r3, [sp, #4]
 800de8e:	2302      	movs	r3, #2
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	462a      	mov	r2, r5
 800de94:	4643      	mov	r3, r8
 800de96:	4621      	mov	r1, r4
 800de98:	a806      	add	r0, sp, #24
 800de9a:	f000 f8dd 	bl	800e058 <__kernel_rem_pio2>
 800de9e:	9b04      	ldr	r3, [sp, #16]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	4605      	mov	r5, r0
 800dea4:	f6bf ae58 	bge.w	800db58 <__ieee754_rem_pio2+0x78>
 800dea8:	6863      	ldr	r3, [r4, #4]
 800deaa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800deae:	6063      	str	r3, [r4, #4]
 800deb0:	68e3      	ldr	r3, [r4, #12]
 800deb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800deb6:	e746      	b.n	800dd46 <__ieee754_rem_pio2+0x266>
 800deb8:	46d0      	mov	r8, sl
 800deba:	e7dd      	b.n	800de78 <__ieee754_rem_pio2+0x398>
 800debc:	41700000 	.word	0x41700000
 800dec0:	0800ed48 	.word	0x0800ed48
 800dec4:	00000000 	.word	0x00000000

0800dec8 <__kernel_cos>:
 800dec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800decc:	ec59 8b10 	vmov	r8, r9, d0
 800ded0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800ded4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800ded8:	ed2d 8b02 	vpush	{d8}
 800dedc:	eeb0 8a41 	vmov.f32	s16, s2
 800dee0:	eef0 8a61 	vmov.f32	s17, s3
 800dee4:	da07      	bge.n	800def6 <__kernel_cos+0x2e>
 800dee6:	ee10 0a10 	vmov	r0, s0
 800deea:	4649      	mov	r1, r9
 800deec:	f7f2 fe1e 	bl	8000b2c <__aeabi_d2iz>
 800def0:	2800      	cmp	r0, #0
 800def2:	f000 8089 	beq.w	800e008 <__kernel_cos+0x140>
 800def6:	4642      	mov	r2, r8
 800def8:	464b      	mov	r3, r9
 800defa:	4640      	mov	r0, r8
 800defc:	4649      	mov	r1, r9
 800defe:	f7f2 fb7b 	bl	80005f8 <__aeabi_dmul>
 800df02:	2200      	movs	r2, #0
 800df04:	4b4e      	ldr	r3, [pc, #312]	; (800e040 <__kernel_cos+0x178>)
 800df06:	4604      	mov	r4, r0
 800df08:	460d      	mov	r5, r1
 800df0a:	f7f2 fb75 	bl	80005f8 <__aeabi_dmul>
 800df0e:	a340      	add	r3, pc, #256	; (adr r3, 800e010 <__kernel_cos+0x148>)
 800df10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df14:	4682      	mov	sl, r0
 800df16:	468b      	mov	fp, r1
 800df18:	4620      	mov	r0, r4
 800df1a:	4629      	mov	r1, r5
 800df1c:	f7f2 fb6c 	bl	80005f8 <__aeabi_dmul>
 800df20:	a33d      	add	r3, pc, #244	; (adr r3, 800e018 <__kernel_cos+0x150>)
 800df22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df26:	f7f2 f9b1 	bl	800028c <__adddf3>
 800df2a:	4622      	mov	r2, r4
 800df2c:	462b      	mov	r3, r5
 800df2e:	f7f2 fb63 	bl	80005f8 <__aeabi_dmul>
 800df32:	a33b      	add	r3, pc, #236	; (adr r3, 800e020 <__kernel_cos+0x158>)
 800df34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df38:	f7f2 f9a6 	bl	8000288 <__aeabi_dsub>
 800df3c:	4622      	mov	r2, r4
 800df3e:	462b      	mov	r3, r5
 800df40:	f7f2 fb5a 	bl	80005f8 <__aeabi_dmul>
 800df44:	a338      	add	r3, pc, #224	; (adr r3, 800e028 <__kernel_cos+0x160>)
 800df46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4a:	f7f2 f99f 	bl	800028c <__adddf3>
 800df4e:	4622      	mov	r2, r4
 800df50:	462b      	mov	r3, r5
 800df52:	f7f2 fb51 	bl	80005f8 <__aeabi_dmul>
 800df56:	a336      	add	r3, pc, #216	; (adr r3, 800e030 <__kernel_cos+0x168>)
 800df58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5c:	f7f2 f994 	bl	8000288 <__aeabi_dsub>
 800df60:	4622      	mov	r2, r4
 800df62:	462b      	mov	r3, r5
 800df64:	f7f2 fb48 	bl	80005f8 <__aeabi_dmul>
 800df68:	a333      	add	r3, pc, #204	; (adr r3, 800e038 <__kernel_cos+0x170>)
 800df6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6e:	f7f2 f98d 	bl	800028c <__adddf3>
 800df72:	4622      	mov	r2, r4
 800df74:	462b      	mov	r3, r5
 800df76:	f7f2 fb3f 	bl	80005f8 <__aeabi_dmul>
 800df7a:	4622      	mov	r2, r4
 800df7c:	462b      	mov	r3, r5
 800df7e:	f7f2 fb3b 	bl	80005f8 <__aeabi_dmul>
 800df82:	ec53 2b18 	vmov	r2, r3, d8
 800df86:	4604      	mov	r4, r0
 800df88:	460d      	mov	r5, r1
 800df8a:	4640      	mov	r0, r8
 800df8c:	4649      	mov	r1, r9
 800df8e:	f7f2 fb33 	bl	80005f8 <__aeabi_dmul>
 800df92:	460b      	mov	r3, r1
 800df94:	4602      	mov	r2, r0
 800df96:	4629      	mov	r1, r5
 800df98:	4620      	mov	r0, r4
 800df9a:	f7f2 f975 	bl	8000288 <__aeabi_dsub>
 800df9e:	4b29      	ldr	r3, [pc, #164]	; (800e044 <__kernel_cos+0x17c>)
 800dfa0:	429e      	cmp	r6, r3
 800dfa2:	4680      	mov	r8, r0
 800dfa4:	4689      	mov	r9, r1
 800dfa6:	dc11      	bgt.n	800dfcc <__kernel_cos+0x104>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	460b      	mov	r3, r1
 800dfac:	4650      	mov	r0, sl
 800dfae:	4659      	mov	r1, fp
 800dfb0:	f7f2 f96a 	bl	8000288 <__aeabi_dsub>
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	4924      	ldr	r1, [pc, #144]	; (800e048 <__kernel_cos+0x180>)
 800dfb8:	4602      	mov	r2, r0
 800dfba:	2000      	movs	r0, #0
 800dfbc:	f7f2 f964 	bl	8000288 <__aeabi_dsub>
 800dfc0:	ecbd 8b02 	vpop	{d8}
 800dfc4:	ec41 0b10 	vmov	d0, r0, r1
 800dfc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfcc:	4b1f      	ldr	r3, [pc, #124]	; (800e04c <__kernel_cos+0x184>)
 800dfce:	491e      	ldr	r1, [pc, #120]	; (800e048 <__kernel_cos+0x180>)
 800dfd0:	429e      	cmp	r6, r3
 800dfd2:	bfcc      	ite	gt
 800dfd4:	4d1e      	ldrgt	r5, [pc, #120]	; (800e050 <__kernel_cos+0x188>)
 800dfd6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800dfda:	2400      	movs	r4, #0
 800dfdc:	4622      	mov	r2, r4
 800dfde:	462b      	mov	r3, r5
 800dfe0:	2000      	movs	r0, #0
 800dfe2:	f7f2 f951 	bl	8000288 <__aeabi_dsub>
 800dfe6:	4622      	mov	r2, r4
 800dfe8:	4606      	mov	r6, r0
 800dfea:	460f      	mov	r7, r1
 800dfec:	462b      	mov	r3, r5
 800dfee:	4650      	mov	r0, sl
 800dff0:	4659      	mov	r1, fp
 800dff2:	f7f2 f949 	bl	8000288 <__aeabi_dsub>
 800dff6:	4642      	mov	r2, r8
 800dff8:	464b      	mov	r3, r9
 800dffa:	f7f2 f945 	bl	8000288 <__aeabi_dsub>
 800dffe:	4602      	mov	r2, r0
 800e000:	460b      	mov	r3, r1
 800e002:	4630      	mov	r0, r6
 800e004:	4639      	mov	r1, r7
 800e006:	e7d9      	b.n	800dfbc <__kernel_cos+0xf4>
 800e008:	2000      	movs	r0, #0
 800e00a:	490f      	ldr	r1, [pc, #60]	; (800e048 <__kernel_cos+0x180>)
 800e00c:	e7d8      	b.n	800dfc0 <__kernel_cos+0xf8>
 800e00e:	bf00      	nop
 800e010:	be8838d4 	.word	0xbe8838d4
 800e014:	bda8fae9 	.word	0xbda8fae9
 800e018:	bdb4b1c4 	.word	0xbdb4b1c4
 800e01c:	3e21ee9e 	.word	0x3e21ee9e
 800e020:	809c52ad 	.word	0x809c52ad
 800e024:	3e927e4f 	.word	0x3e927e4f
 800e028:	19cb1590 	.word	0x19cb1590
 800e02c:	3efa01a0 	.word	0x3efa01a0
 800e030:	16c15177 	.word	0x16c15177
 800e034:	3f56c16c 	.word	0x3f56c16c
 800e038:	5555554c 	.word	0x5555554c
 800e03c:	3fa55555 	.word	0x3fa55555
 800e040:	3fe00000 	.word	0x3fe00000
 800e044:	3fd33332 	.word	0x3fd33332
 800e048:	3ff00000 	.word	0x3ff00000
 800e04c:	3fe90000 	.word	0x3fe90000
 800e050:	3fd20000 	.word	0x3fd20000
 800e054:	00000000 	.word	0x00000000

0800e058 <__kernel_rem_pio2>:
 800e058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05c:	ed2d 8b02 	vpush	{d8}
 800e060:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e064:	1ed4      	subs	r4, r2, #3
 800e066:	9308      	str	r3, [sp, #32]
 800e068:	9101      	str	r1, [sp, #4]
 800e06a:	4bc5      	ldr	r3, [pc, #788]	; (800e380 <__kernel_rem_pio2+0x328>)
 800e06c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e06e:	9009      	str	r0, [sp, #36]	; 0x24
 800e070:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e074:	9304      	str	r3, [sp, #16]
 800e076:	9b08      	ldr	r3, [sp, #32]
 800e078:	3b01      	subs	r3, #1
 800e07a:	9307      	str	r3, [sp, #28]
 800e07c:	2318      	movs	r3, #24
 800e07e:	fb94 f4f3 	sdiv	r4, r4, r3
 800e082:	f06f 0317 	mvn.w	r3, #23
 800e086:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800e08a:	fb04 3303 	mla	r3, r4, r3, r3
 800e08e:	eb03 0a02 	add.w	sl, r3, r2
 800e092:	9b04      	ldr	r3, [sp, #16]
 800e094:	9a07      	ldr	r2, [sp, #28]
 800e096:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800e370 <__kernel_rem_pio2+0x318>
 800e09a:	eb03 0802 	add.w	r8, r3, r2
 800e09e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e0a0:	1aa7      	subs	r7, r4, r2
 800e0a2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e0a6:	ae22      	add	r6, sp, #136	; 0x88
 800e0a8:	2500      	movs	r5, #0
 800e0aa:	4545      	cmp	r5, r8
 800e0ac:	dd13      	ble.n	800e0d6 <__kernel_rem_pio2+0x7e>
 800e0ae:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800e370 <__kernel_rem_pio2+0x318>
 800e0b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e0b6:	2600      	movs	r6, #0
 800e0b8:	9b04      	ldr	r3, [sp, #16]
 800e0ba:	429e      	cmp	r6, r3
 800e0bc:	dc32      	bgt.n	800e124 <__kernel_rem_pio2+0xcc>
 800e0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0c0:	9302      	str	r3, [sp, #8]
 800e0c2:	9b08      	ldr	r3, [sp, #32]
 800e0c4:	199d      	adds	r5, r3, r6
 800e0c6:	ab22      	add	r3, sp, #136	; 0x88
 800e0c8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e0cc:	9306      	str	r3, [sp, #24]
 800e0ce:	ec59 8b18 	vmov	r8, r9, d8
 800e0d2:	2700      	movs	r7, #0
 800e0d4:	e01f      	b.n	800e116 <__kernel_rem_pio2+0xbe>
 800e0d6:	42ef      	cmn	r7, r5
 800e0d8:	d407      	bmi.n	800e0ea <__kernel_rem_pio2+0x92>
 800e0da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e0de:	f7f2 fa21 	bl	8000524 <__aeabi_i2d>
 800e0e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e0e6:	3501      	adds	r5, #1
 800e0e8:	e7df      	b.n	800e0aa <__kernel_rem_pio2+0x52>
 800e0ea:	ec51 0b18 	vmov	r0, r1, d8
 800e0ee:	e7f8      	b.n	800e0e2 <__kernel_rem_pio2+0x8a>
 800e0f0:	9906      	ldr	r1, [sp, #24]
 800e0f2:	9d02      	ldr	r5, [sp, #8]
 800e0f4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800e0f8:	9106      	str	r1, [sp, #24]
 800e0fa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800e0fe:	9502      	str	r5, [sp, #8]
 800e100:	f7f2 fa7a 	bl	80005f8 <__aeabi_dmul>
 800e104:	4602      	mov	r2, r0
 800e106:	460b      	mov	r3, r1
 800e108:	4640      	mov	r0, r8
 800e10a:	4649      	mov	r1, r9
 800e10c:	f7f2 f8be 	bl	800028c <__adddf3>
 800e110:	3701      	adds	r7, #1
 800e112:	4680      	mov	r8, r0
 800e114:	4689      	mov	r9, r1
 800e116:	9b07      	ldr	r3, [sp, #28]
 800e118:	429f      	cmp	r7, r3
 800e11a:	dde9      	ble.n	800e0f0 <__kernel_rem_pio2+0x98>
 800e11c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800e120:	3601      	adds	r6, #1
 800e122:	e7c9      	b.n	800e0b8 <__kernel_rem_pio2+0x60>
 800e124:	9b04      	ldr	r3, [sp, #16]
 800e126:	aa0e      	add	r2, sp, #56	; 0x38
 800e128:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e12c:	930c      	str	r3, [sp, #48]	; 0x30
 800e12e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e130:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e134:	9c04      	ldr	r4, [sp, #16]
 800e136:	930b      	str	r3, [sp, #44]	; 0x2c
 800e138:	ab9a      	add	r3, sp, #616	; 0x268
 800e13a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800e13e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e142:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e146:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800e14a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800e14e:	ab9a      	add	r3, sp, #616	; 0x268
 800e150:	445b      	add	r3, fp
 800e152:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800e156:	2500      	movs	r5, #0
 800e158:	1b63      	subs	r3, r4, r5
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	dc78      	bgt.n	800e250 <__kernel_rem_pio2+0x1f8>
 800e15e:	4650      	mov	r0, sl
 800e160:	ec49 8b10 	vmov	d0, r8, r9
 800e164:	f000 fc00 	bl	800e968 <scalbn>
 800e168:	ec57 6b10 	vmov	r6, r7, d0
 800e16c:	2200      	movs	r2, #0
 800e16e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e172:	ee10 0a10 	vmov	r0, s0
 800e176:	4639      	mov	r1, r7
 800e178:	f7f2 fa3e 	bl	80005f8 <__aeabi_dmul>
 800e17c:	ec41 0b10 	vmov	d0, r0, r1
 800e180:	f000 fb6e 	bl	800e860 <floor>
 800e184:	2200      	movs	r2, #0
 800e186:	ec51 0b10 	vmov	r0, r1, d0
 800e18a:	4b7e      	ldr	r3, [pc, #504]	; (800e384 <__kernel_rem_pio2+0x32c>)
 800e18c:	f7f2 fa34 	bl	80005f8 <__aeabi_dmul>
 800e190:	4602      	mov	r2, r0
 800e192:	460b      	mov	r3, r1
 800e194:	4630      	mov	r0, r6
 800e196:	4639      	mov	r1, r7
 800e198:	f7f2 f876 	bl	8000288 <__aeabi_dsub>
 800e19c:	460f      	mov	r7, r1
 800e19e:	4606      	mov	r6, r0
 800e1a0:	f7f2 fcc4 	bl	8000b2c <__aeabi_d2iz>
 800e1a4:	9006      	str	r0, [sp, #24]
 800e1a6:	f7f2 f9bd 	bl	8000524 <__aeabi_i2d>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	4630      	mov	r0, r6
 800e1b0:	4639      	mov	r1, r7
 800e1b2:	f7f2 f869 	bl	8000288 <__aeabi_dsub>
 800e1b6:	f1ba 0f00 	cmp.w	sl, #0
 800e1ba:	4606      	mov	r6, r0
 800e1bc:	460f      	mov	r7, r1
 800e1be:	dd6c      	ble.n	800e29a <__kernel_rem_pio2+0x242>
 800e1c0:	1e62      	subs	r2, r4, #1
 800e1c2:	ab0e      	add	r3, sp, #56	; 0x38
 800e1c4:	f1ca 0118 	rsb	r1, sl, #24
 800e1c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e1cc:	9d06      	ldr	r5, [sp, #24]
 800e1ce:	fa40 f301 	asr.w	r3, r0, r1
 800e1d2:	441d      	add	r5, r3
 800e1d4:	408b      	lsls	r3, r1
 800e1d6:	1ac0      	subs	r0, r0, r3
 800e1d8:	ab0e      	add	r3, sp, #56	; 0x38
 800e1da:	9506      	str	r5, [sp, #24]
 800e1dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e1e0:	f1ca 0317 	rsb	r3, sl, #23
 800e1e4:	fa40 f303 	asr.w	r3, r0, r3
 800e1e8:	9302      	str	r3, [sp, #8]
 800e1ea:	9b02      	ldr	r3, [sp, #8]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	dd62      	ble.n	800e2b6 <__kernel_rem_pio2+0x25e>
 800e1f0:	9b06      	ldr	r3, [sp, #24]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	9306      	str	r3, [sp, #24]
 800e1f8:	4615      	mov	r5, r2
 800e1fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e1fe:	4294      	cmp	r4, r2
 800e200:	f300 8095 	bgt.w	800e32e <__kernel_rem_pio2+0x2d6>
 800e204:	f1ba 0f00 	cmp.w	sl, #0
 800e208:	dd07      	ble.n	800e21a <__kernel_rem_pio2+0x1c2>
 800e20a:	f1ba 0f01 	cmp.w	sl, #1
 800e20e:	f000 80a2 	beq.w	800e356 <__kernel_rem_pio2+0x2fe>
 800e212:	f1ba 0f02 	cmp.w	sl, #2
 800e216:	f000 80c1 	beq.w	800e39c <__kernel_rem_pio2+0x344>
 800e21a:	9b02      	ldr	r3, [sp, #8]
 800e21c:	2b02      	cmp	r3, #2
 800e21e:	d14a      	bne.n	800e2b6 <__kernel_rem_pio2+0x25e>
 800e220:	4632      	mov	r2, r6
 800e222:	463b      	mov	r3, r7
 800e224:	2000      	movs	r0, #0
 800e226:	4958      	ldr	r1, [pc, #352]	; (800e388 <__kernel_rem_pio2+0x330>)
 800e228:	f7f2 f82e 	bl	8000288 <__aeabi_dsub>
 800e22c:	4606      	mov	r6, r0
 800e22e:	460f      	mov	r7, r1
 800e230:	2d00      	cmp	r5, #0
 800e232:	d040      	beq.n	800e2b6 <__kernel_rem_pio2+0x25e>
 800e234:	4650      	mov	r0, sl
 800e236:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800e378 <__kernel_rem_pio2+0x320>
 800e23a:	f000 fb95 	bl	800e968 <scalbn>
 800e23e:	4630      	mov	r0, r6
 800e240:	4639      	mov	r1, r7
 800e242:	ec53 2b10 	vmov	r2, r3, d0
 800e246:	f7f2 f81f 	bl	8000288 <__aeabi_dsub>
 800e24a:	4606      	mov	r6, r0
 800e24c:	460f      	mov	r7, r1
 800e24e:	e032      	b.n	800e2b6 <__kernel_rem_pio2+0x25e>
 800e250:	2200      	movs	r2, #0
 800e252:	4b4e      	ldr	r3, [pc, #312]	; (800e38c <__kernel_rem_pio2+0x334>)
 800e254:	4640      	mov	r0, r8
 800e256:	4649      	mov	r1, r9
 800e258:	f7f2 f9ce 	bl	80005f8 <__aeabi_dmul>
 800e25c:	f7f2 fc66 	bl	8000b2c <__aeabi_d2iz>
 800e260:	f7f2 f960 	bl	8000524 <__aeabi_i2d>
 800e264:	2200      	movs	r2, #0
 800e266:	4b4a      	ldr	r3, [pc, #296]	; (800e390 <__kernel_rem_pio2+0x338>)
 800e268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e26c:	f7f2 f9c4 	bl	80005f8 <__aeabi_dmul>
 800e270:	4602      	mov	r2, r0
 800e272:	460b      	mov	r3, r1
 800e274:	4640      	mov	r0, r8
 800e276:	4649      	mov	r1, r9
 800e278:	f7f2 f806 	bl	8000288 <__aeabi_dsub>
 800e27c:	f7f2 fc56 	bl	8000b2c <__aeabi_d2iz>
 800e280:	ab0e      	add	r3, sp, #56	; 0x38
 800e282:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800e286:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e28a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e28e:	f7f1 fffd 	bl	800028c <__adddf3>
 800e292:	3501      	adds	r5, #1
 800e294:	4680      	mov	r8, r0
 800e296:	4689      	mov	r9, r1
 800e298:	e75e      	b.n	800e158 <__kernel_rem_pio2+0x100>
 800e29a:	d105      	bne.n	800e2a8 <__kernel_rem_pio2+0x250>
 800e29c:	1e63      	subs	r3, r4, #1
 800e29e:	aa0e      	add	r2, sp, #56	; 0x38
 800e2a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e2a4:	15c3      	asrs	r3, r0, #23
 800e2a6:	e79f      	b.n	800e1e8 <__kernel_rem_pio2+0x190>
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	4b3a      	ldr	r3, [pc, #232]	; (800e394 <__kernel_rem_pio2+0x33c>)
 800e2ac:	f7f2 fc2a 	bl	8000b04 <__aeabi_dcmpge>
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	d139      	bne.n	800e328 <__kernel_rem_pio2+0x2d0>
 800e2b4:	9002      	str	r0, [sp, #8]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	4630      	mov	r0, r6
 800e2bc:	4639      	mov	r1, r7
 800e2be:	f7f2 fc03 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	f000 80c7 	beq.w	800e456 <__kernel_rem_pio2+0x3fe>
 800e2c8:	1e65      	subs	r5, r4, #1
 800e2ca:	462b      	mov	r3, r5
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	9904      	ldr	r1, [sp, #16]
 800e2d0:	428b      	cmp	r3, r1
 800e2d2:	da6a      	bge.n	800e3aa <__kernel_rem_pio2+0x352>
 800e2d4:	2a00      	cmp	r2, #0
 800e2d6:	f000 8088 	beq.w	800e3ea <__kernel_rem_pio2+0x392>
 800e2da:	ab0e      	add	r3, sp, #56	; 0x38
 800e2dc:	f1aa 0a18 	sub.w	sl, sl, #24
 800e2e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f000 80b4 	beq.w	800e452 <__kernel_rem_pio2+0x3fa>
 800e2ea:	4650      	mov	r0, sl
 800e2ec:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800e378 <__kernel_rem_pio2+0x320>
 800e2f0:	f000 fb3a 	bl	800e968 <scalbn>
 800e2f4:	00ec      	lsls	r4, r5, #3
 800e2f6:	ab72      	add	r3, sp, #456	; 0x1c8
 800e2f8:	191e      	adds	r6, r3, r4
 800e2fa:	ec59 8b10 	vmov	r8, r9, d0
 800e2fe:	f106 0a08 	add.w	sl, r6, #8
 800e302:	462f      	mov	r7, r5
 800e304:	2f00      	cmp	r7, #0
 800e306:	f280 80df 	bge.w	800e4c8 <__kernel_rem_pio2+0x470>
 800e30a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800e370 <__kernel_rem_pio2+0x318>
 800e30e:	f04f 0a00 	mov.w	sl, #0
 800e312:	eba5 030a 	sub.w	r3, r5, sl
 800e316:	2b00      	cmp	r3, #0
 800e318:	f2c0 810a 	blt.w	800e530 <__kernel_rem_pio2+0x4d8>
 800e31c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800e398 <__kernel_rem_pio2+0x340>
 800e320:	ec59 8b18 	vmov	r8, r9, d8
 800e324:	2700      	movs	r7, #0
 800e326:	e0f5      	b.n	800e514 <__kernel_rem_pio2+0x4bc>
 800e328:	2302      	movs	r3, #2
 800e32a:	9302      	str	r3, [sp, #8]
 800e32c:	e760      	b.n	800e1f0 <__kernel_rem_pio2+0x198>
 800e32e:	ab0e      	add	r3, sp, #56	; 0x38
 800e330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e334:	b94d      	cbnz	r5, 800e34a <__kernel_rem_pio2+0x2f2>
 800e336:	b12b      	cbz	r3, 800e344 <__kernel_rem_pio2+0x2ec>
 800e338:	a80e      	add	r0, sp, #56	; 0x38
 800e33a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e33e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e342:	2301      	movs	r3, #1
 800e344:	3201      	adds	r2, #1
 800e346:	461d      	mov	r5, r3
 800e348:	e759      	b.n	800e1fe <__kernel_rem_pio2+0x1a6>
 800e34a:	a80e      	add	r0, sp, #56	; 0x38
 800e34c:	1acb      	subs	r3, r1, r3
 800e34e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e352:	462b      	mov	r3, r5
 800e354:	e7f6      	b.n	800e344 <__kernel_rem_pio2+0x2ec>
 800e356:	1e62      	subs	r2, r4, #1
 800e358:	ab0e      	add	r3, sp, #56	; 0x38
 800e35a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e35e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e362:	a90e      	add	r1, sp, #56	; 0x38
 800e364:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e368:	e757      	b.n	800e21a <__kernel_rem_pio2+0x1c2>
 800e36a:	bf00      	nop
 800e36c:	f3af 8000 	nop.w
	...
 800e37c:	3ff00000 	.word	0x3ff00000
 800e380:	0800ee90 	.word	0x0800ee90
 800e384:	40200000 	.word	0x40200000
 800e388:	3ff00000 	.word	0x3ff00000
 800e38c:	3e700000 	.word	0x3e700000
 800e390:	41700000 	.word	0x41700000
 800e394:	3fe00000 	.word	0x3fe00000
 800e398:	0800ee50 	.word	0x0800ee50
 800e39c:	1e62      	subs	r2, r4, #1
 800e39e:	ab0e      	add	r3, sp, #56	; 0x38
 800e3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e3a8:	e7db      	b.n	800e362 <__kernel_rem_pio2+0x30a>
 800e3aa:	a90e      	add	r1, sp, #56	; 0x38
 800e3ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e3b0:	3b01      	subs	r3, #1
 800e3b2:	430a      	orrs	r2, r1
 800e3b4:	e78b      	b.n	800e2ce <__kernel_rem_pio2+0x276>
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e3bc:	2900      	cmp	r1, #0
 800e3be:	d0fa      	beq.n	800e3b6 <__kernel_rem_pio2+0x35e>
 800e3c0:	9a08      	ldr	r2, [sp, #32]
 800e3c2:	4422      	add	r2, r4
 800e3c4:	00d2      	lsls	r2, r2, #3
 800e3c6:	a922      	add	r1, sp, #136	; 0x88
 800e3c8:	18e3      	adds	r3, r4, r3
 800e3ca:	9206      	str	r2, [sp, #24]
 800e3cc:	440a      	add	r2, r1
 800e3ce:	9302      	str	r3, [sp, #8]
 800e3d0:	f10b 0108 	add.w	r1, fp, #8
 800e3d4:	f102 0308 	add.w	r3, r2, #8
 800e3d8:	1c66      	adds	r6, r4, #1
 800e3da:	910a      	str	r1, [sp, #40]	; 0x28
 800e3dc:	2500      	movs	r5, #0
 800e3de:	930d      	str	r3, [sp, #52]	; 0x34
 800e3e0:	9b02      	ldr	r3, [sp, #8]
 800e3e2:	42b3      	cmp	r3, r6
 800e3e4:	da04      	bge.n	800e3f0 <__kernel_rem_pio2+0x398>
 800e3e6:	461c      	mov	r4, r3
 800e3e8:	e6a6      	b.n	800e138 <__kernel_rem_pio2+0xe0>
 800e3ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	e7e3      	b.n	800e3b8 <__kernel_rem_pio2+0x360>
 800e3f0:	9b06      	ldr	r3, [sp, #24]
 800e3f2:	18ef      	adds	r7, r5, r3
 800e3f4:	ab22      	add	r3, sp, #136	; 0x88
 800e3f6:	441f      	add	r7, r3
 800e3f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e3fe:	f7f2 f891 	bl	8000524 <__aeabi_i2d>
 800e402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e404:	461c      	mov	r4, r3
 800e406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e408:	e9c7 0100 	strd	r0, r1, [r7]
 800e40c:	eb03 0b05 	add.w	fp, r3, r5
 800e410:	2700      	movs	r7, #0
 800e412:	f04f 0800 	mov.w	r8, #0
 800e416:	f04f 0900 	mov.w	r9, #0
 800e41a:	9b07      	ldr	r3, [sp, #28]
 800e41c:	429f      	cmp	r7, r3
 800e41e:	dd08      	ble.n	800e432 <__kernel_rem_pio2+0x3da>
 800e420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e422:	aa72      	add	r2, sp, #456	; 0x1c8
 800e424:	18eb      	adds	r3, r5, r3
 800e426:	4413      	add	r3, r2
 800e428:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800e42c:	3601      	adds	r6, #1
 800e42e:	3508      	adds	r5, #8
 800e430:	e7d6      	b.n	800e3e0 <__kernel_rem_pio2+0x388>
 800e432:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e436:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e43a:	f7f2 f8dd 	bl	80005f8 <__aeabi_dmul>
 800e43e:	4602      	mov	r2, r0
 800e440:	460b      	mov	r3, r1
 800e442:	4640      	mov	r0, r8
 800e444:	4649      	mov	r1, r9
 800e446:	f7f1 ff21 	bl	800028c <__adddf3>
 800e44a:	3701      	adds	r7, #1
 800e44c:	4680      	mov	r8, r0
 800e44e:	4689      	mov	r9, r1
 800e450:	e7e3      	b.n	800e41a <__kernel_rem_pio2+0x3c2>
 800e452:	3d01      	subs	r5, #1
 800e454:	e741      	b.n	800e2da <__kernel_rem_pio2+0x282>
 800e456:	f1ca 0000 	rsb	r0, sl, #0
 800e45a:	ec47 6b10 	vmov	d0, r6, r7
 800e45e:	f000 fa83 	bl	800e968 <scalbn>
 800e462:	ec57 6b10 	vmov	r6, r7, d0
 800e466:	2200      	movs	r2, #0
 800e468:	4b99      	ldr	r3, [pc, #612]	; (800e6d0 <__kernel_rem_pio2+0x678>)
 800e46a:	ee10 0a10 	vmov	r0, s0
 800e46e:	4639      	mov	r1, r7
 800e470:	f7f2 fb48 	bl	8000b04 <__aeabi_dcmpge>
 800e474:	b1f8      	cbz	r0, 800e4b6 <__kernel_rem_pio2+0x45e>
 800e476:	2200      	movs	r2, #0
 800e478:	4b96      	ldr	r3, [pc, #600]	; (800e6d4 <__kernel_rem_pio2+0x67c>)
 800e47a:	4630      	mov	r0, r6
 800e47c:	4639      	mov	r1, r7
 800e47e:	f7f2 f8bb 	bl	80005f8 <__aeabi_dmul>
 800e482:	f7f2 fb53 	bl	8000b2c <__aeabi_d2iz>
 800e486:	4680      	mov	r8, r0
 800e488:	f7f2 f84c 	bl	8000524 <__aeabi_i2d>
 800e48c:	2200      	movs	r2, #0
 800e48e:	4b90      	ldr	r3, [pc, #576]	; (800e6d0 <__kernel_rem_pio2+0x678>)
 800e490:	f7f2 f8b2 	bl	80005f8 <__aeabi_dmul>
 800e494:	460b      	mov	r3, r1
 800e496:	4602      	mov	r2, r0
 800e498:	4639      	mov	r1, r7
 800e49a:	4630      	mov	r0, r6
 800e49c:	f7f1 fef4 	bl	8000288 <__aeabi_dsub>
 800e4a0:	f7f2 fb44 	bl	8000b2c <__aeabi_d2iz>
 800e4a4:	1c65      	adds	r5, r4, #1
 800e4a6:	ab0e      	add	r3, sp, #56	; 0x38
 800e4a8:	f10a 0a18 	add.w	sl, sl, #24
 800e4ac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e4b0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e4b4:	e719      	b.n	800e2ea <__kernel_rem_pio2+0x292>
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	4639      	mov	r1, r7
 800e4ba:	f7f2 fb37 	bl	8000b2c <__aeabi_d2iz>
 800e4be:	ab0e      	add	r3, sp, #56	; 0x38
 800e4c0:	4625      	mov	r5, r4
 800e4c2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e4c6:	e710      	b.n	800e2ea <__kernel_rem_pio2+0x292>
 800e4c8:	ab0e      	add	r3, sp, #56	; 0x38
 800e4ca:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e4ce:	f7f2 f829 	bl	8000524 <__aeabi_i2d>
 800e4d2:	4642      	mov	r2, r8
 800e4d4:	464b      	mov	r3, r9
 800e4d6:	f7f2 f88f 	bl	80005f8 <__aeabi_dmul>
 800e4da:	2200      	movs	r2, #0
 800e4dc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e4e0:	4b7c      	ldr	r3, [pc, #496]	; (800e6d4 <__kernel_rem_pio2+0x67c>)
 800e4e2:	4640      	mov	r0, r8
 800e4e4:	4649      	mov	r1, r9
 800e4e6:	f7f2 f887 	bl	80005f8 <__aeabi_dmul>
 800e4ea:	3f01      	subs	r7, #1
 800e4ec:	4680      	mov	r8, r0
 800e4ee:	4689      	mov	r9, r1
 800e4f0:	e708      	b.n	800e304 <__kernel_rem_pio2+0x2ac>
 800e4f2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800e4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800e4fe:	f7f2 f87b 	bl	80005f8 <__aeabi_dmul>
 800e502:	4602      	mov	r2, r0
 800e504:	460b      	mov	r3, r1
 800e506:	4640      	mov	r0, r8
 800e508:	4649      	mov	r1, r9
 800e50a:	f7f1 febf 	bl	800028c <__adddf3>
 800e50e:	3701      	adds	r7, #1
 800e510:	4680      	mov	r8, r0
 800e512:	4689      	mov	r9, r1
 800e514:	9b04      	ldr	r3, [sp, #16]
 800e516:	429f      	cmp	r7, r3
 800e518:	dc01      	bgt.n	800e51e <__kernel_rem_pio2+0x4c6>
 800e51a:	45ba      	cmp	sl, r7
 800e51c:	dae9      	bge.n	800e4f2 <__kernel_rem_pio2+0x49a>
 800e51e:	ab4a      	add	r3, sp, #296	; 0x128
 800e520:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e524:	e9c3 8900 	strd	r8, r9, [r3]
 800e528:	f10a 0a01 	add.w	sl, sl, #1
 800e52c:	3e08      	subs	r6, #8
 800e52e:	e6f0      	b.n	800e312 <__kernel_rem_pio2+0x2ba>
 800e530:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e532:	2b03      	cmp	r3, #3
 800e534:	d85b      	bhi.n	800e5ee <__kernel_rem_pio2+0x596>
 800e536:	e8df f003 	tbb	[pc, r3]
 800e53a:	264a      	.short	0x264a
 800e53c:	0226      	.short	0x0226
 800e53e:	ab9a      	add	r3, sp, #616	; 0x268
 800e540:	441c      	add	r4, r3
 800e542:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e546:	46a2      	mov	sl, r4
 800e548:	46ab      	mov	fp, r5
 800e54a:	f1bb 0f00 	cmp.w	fp, #0
 800e54e:	dc6c      	bgt.n	800e62a <__kernel_rem_pio2+0x5d2>
 800e550:	46a2      	mov	sl, r4
 800e552:	46ab      	mov	fp, r5
 800e554:	f1bb 0f01 	cmp.w	fp, #1
 800e558:	f300 8086 	bgt.w	800e668 <__kernel_rem_pio2+0x610>
 800e55c:	2000      	movs	r0, #0
 800e55e:	2100      	movs	r1, #0
 800e560:	2d01      	cmp	r5, #1
 800e562:	f300 80a0 	bgt.w	800e6a6 <__kernel_rem_pio2+0x64e>
 800e566:	9b02      	ldr	r3, [sp, #8]
 800e568:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800e56c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800e570:	2b00      	cmp	r3, #0
 800e572:	f040 809e 	bne.w	800e6b2 <__kernel_rem_pio2+0x65a>
 800e576:	9b01      	ldr	r3, [sp, #4]
 800e578:	e9c3 7800 	strd	r7, r8, [r3]
 800e57c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e580:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e584:	e033      	b.n	800e5ee <__kernel_rem_pio2+0x596>
 800e586:	3408      	adds	r4, #8
 800e588:	ab4a      	add	r3, sp, #296	; 0x128
 800e58a:	441c      	add	r4, r3
 800e58c:	462e      	mov	r6, r5
 800e58e:	2000      	movs	r0, #0
 800e590:	2100      	movs	r1, #0
 800e592:	2e00      	cmp	r6, #0
 800e594:	da3a      	bge.n	800e60c <__kernel_rem_pio2+0x5b4>
 800e596:	9b02      	ldr	r3, [sp, #8]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d03d      	beq.n	800e618 <__kernel_rem_pio2+0x5c0>
 800e59c:	4602      	mov	r2, r0
 800e59e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5a2:	9c01      	ldr	r4, [sp, #4]
 800e5a4:	e9c4 2300 	strd	r2, r3, [r4]
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	460b      	mov	r3, r1
 800e5ac:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e5b0:	f7f1 fe6a 	bl	8000288 <__aeabi_dsub>
 800e5b4:	ae4c      	add	r6, sp, #304	; 0x130
 800e5b6:	2401      	movs	r4, #1
 800e5b8:	42a5      	cmp	r5, r4
 800e5ba:	da30      	bge.n	800e61e <__kernel_rem_pio2+0x5c6>
 800e5bc:	9b02      	ldr	r3, [sp, #8]
 800e5be:	b113      	cbz	r3, 800e5c6 <__kernel_rem_pio2+0x56e>
 800e5c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	9b01      	ldr	r3, [sp, #4]
 800e5c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e5cc:	e00f      	b.n	800e5ee <__kernel_rem_pio2+0x596>
 800e5ce:	ab9a      	add	r3, sp, #616	; 0x268
 800e5d0:	441c      	add	r4, r3
 800e5d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e5d6:	2000      	movs	r0, #0
 800e5d8:	2100      	movs	r1, #0
 800e5da:	2d00      	cmp	r5, #0
 800e5dc:	da10      	bge.n	800e600 <__kernel_rem_pio2+0x5a8>
 800e5de:	9b02      	ldr	r3, [sp, #8]
 800e5e0:	b113      	cbz	r3, 800e5e8 <__kernel_rem_pio2+0x590>
 800e5e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	9b01      	ldr	r3, [sp, #4]
 800e5ea:	e9c3 0100 	strd	r0, r1, [r3]
 800e5ee:	9b06      	ldr	r3, [sp, #24]
 800e5f0:	f003 0007 	and.w	r0, r3, #7
 800e5f4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e5f8:	ecbd 8b02 	vpop	{d8}
 800e5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e600:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e604:	f7f1 fe42 	bl	800028c <__adddf3>
 800e608:	3d01      	subs	r5, #1
 800e60a:	e7e6      	b.n	800e5da <__kernel_rem_pio2+0x582>
 800e60c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e610:	f7f1 fe3c 	bl	800028c <__adddf3>
 800e614:	3e01      	subs	r6, #1
 800e616:	e7bc      	b.n	800e592 <__kernel_rem_pio2+0x53a>
 800e618:	4602      	mov	r2, r0
 800e61a:	460b      	mov	r3, r1
 800e61c:	e7c1      	b.n	800e5a2 <__kernel_rem_pio2+0x54a>
 800e61e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e622:	f7f1 fe33 	bl	800028c <__adddf3>
 800e626:	3401      	adds	r4, #1
 800e628:	e7c6      	b.n	800e5b8 <__kernel_rem_pio2+0x560>
 800e62a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800e62e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e632:	4640      	mov	r0, r8
 800e634:	ec53 2b17 	vmov	r2, r3, d7
 800e638:	4649      	mov	r1, r9
 800e63a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e63e:	f7f1 fe25 	bl	800028c <__adddf3>
 800e642:	4602      	mov	r2, r0
 800e644:	460b      	mov	r3, r1
 800e646:	4606      	mov	r6, r0
 800e648:	460f      	mov	r7, r1
 800e64a:	4640      	mov	r0, r8
 800e64c:	4649      	mov	r1, r9
 800e64e:	f7f1 fe1b 	bl	8000288 <__aeabi_dsub>
 800e652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e656:	f7f1 fe19 	bl	800028c <__adddf3>
 800e65a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e65e:	e9ca 0100 	strd	r0, r1, [sl]
 800e662:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800e666:	e770      	b.n	800e54a <__kernel_rem_pio2+0x4f2>
 800e668:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800e66c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e670:	4630      	mov	r0, r6
 800e672:	ec53 2b17 	vmov	r2, r3, d7
 800e676:	4639      	mov	r1, r7
 800e678:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e67c:	f7f1 fe06 	bl	800028c <__adddf3>
 800e680:	4602      	mov	r2, r0
 800e682:	460b      	mov	r3, r1
 800e684:	4680      	mov	r8, r0
 800e686:	4689      	mov	r9, r1
 800e688:	4630      	mov	r0, r6
 800e68a:	4639      	mov	r1, r7
 800e68c:	f7f1 fdfc 	bl	8000288 <__aeabi_dsub>
 800e690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e694:	f7f1 fdfa 	bl	800028c <__adddf3>
 800e698:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e69c:	e9ca 0100 	strd	r0, r1, [sl]
 800e6a0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800e6a4:	e756      	b.n	800e554 <__kernel_rem_pio2+0x4fc>
 800e6a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e6aa:	f7f1 fdef 	bl	800028c <__adddf3>
 800e6ae:	3d01      	subs	r5, #1
 800e6b0:	e756      	b.n	800e560 <__kernel_rem_pio2+0x508>
 800e6b2:	9b01      	ldr	r3, [sp, #4]
 800e6b4:	9a01      	ldr	r2, [sp, #4]
 800e6b6:	601f      	str	r7, [r3, #0]
 800e6b8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e6bc:	605c      	str	r4, [r3, #4]
 800e6be:	609d      	str	r5, [r3, #8]
 800e6c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e6c4:	60d3      	str	r3, [r2, #12]
 800e6c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6ca:	6110      	str	r0, [r2, #16]
 800e6cc:	6153      	str	r3, [r2, #20]
 800e6ce:	e78e      	b.n	800e5ee <__kernel_rem_pio2+0x596>
 800e6d0:	41700000 	.word	0x41700000
 800e6d4:	3e700000 	.word	0x3e700000

0800e6d8 <__kernel_sin>:
 800e6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6dc:	ec55 4b10 	vmov	r4, r5, d0
 800e6e0:	b085      	sub	sp, #20
 800e6e2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e6e6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e6ea:	ed8d 1b00 	vstr	d1, [sp]
 800e6ee:	9002      	str	r0, [sp, #8]
 800e6f0:	da06      	bge.n	800e700 <__kernel_sin+0x28>
 800e6f2:	ee10 0a10 	vmov	r0, s0
 800e6f6:	4629      	mov	r1, r5
 800e6f8:	f7f2 fa18 	bl	8000b2c <__aeabi_d2iz>
 800e6fc:	2800      	cmp	r0, #0
 800e6fe:	d051      	beq.n	800e7a4 <__kernel_sin+0xcc>
 800e700:	4622      	mov	r2, r4
 800e702:	462b      	mov	r3, r5
 800e704:	4620      	mov	r0, r4
 800e706:	4629      	mov	r1, r5
 800e708:	f7f1 ff76 	bl	80005f8 <__aeabi_dmul>
 800e70c:	4682      	mov	sl, r0
 800e70e:	468b      	mov	fp, r1
 800e710:	4602      	mov	r2, r0
 800e712:	460b      	mov	r3, r1
 800e714:	4620      	mov	r0, r4
 800e716:	4629      	mov	r1, r5
 800e718:	f7f1 ff6e 	bl	80005f8 <__aeabi_dmul>
 800e71c:	a341      	add	r3, pc, #260	; (adr r3, 800e824 <__kernel_sin+0x14c>)
 800e71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e722:	4680      	mov	r8, r0
 800e724:	4689      	mov	r9, r1
 800e726:	4650      	mov	r0, sl
 800e728:	4659      	mov	r1, fp
 800e72a:	f7f1 ff65 	bl	80005f8 <__aeabi_dmul>
 800e72e:	a33f      	add	r3, pc, #252	; (adr r3, 800e82c <__kernel_sin+0x154>)
 800e730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e734:	f7f1 fda8 	bl	8000288 <__aeabi_dsub>
 800e738:	4652      	mov	r2, sl
 800e73a:	465b      	mov	r3, fp
 800e73c:	f7f1 ff5c 	bl	80005f8 <__aeabi_dmul>
 800e740:	a33c      	add	r3, pc, #240	; (adr r3, 800e834 <__kernel_sin+0x15c>)
 800e742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e746:	f7f1 fda1 	bl	800028c <__adddf3>
 800e74a:	4652      	mov	r2, sl
 800e74c:	465b      	mov	r3, fp
 800e74e:	f7f1 ff53 	bl	80005f8 <__aeabi_dmul>
 800e752:	a33a      	add	r3, pc, #232	; (adr r3, 800e83c <__kernel_sin+0x164>)
 800e754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e758:	f7f1 fd96 	bl	8000288 <__aeabi_dsub>
 800e75c:	4652      	mov	r2, sl
 800e75e:	465b      	mov	r3, fp
 800e760:	f7f1 ff4a 	bl	80005f8 <__aeabi_dmul>
 800e764:	a337      	add	r3, pc, #220	; (adr r3, 800e844 <__kernel_sin+0x16c>)
 800e766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76a:	f7f1 fd8f 	bl	800028c <__adddf3>
 800e76e:	9b02      	ldr	r3, [sp, #8]
 800e770:	4606      	mov	r6, r0
 800e772:	460f      	mov	r7, r1
 800e774:	b9db      	cbnz	r3, 800e7ae <__kernel_sin+0xd6>
 800e776:	4602      	mov	r2, r0
 800e778:	460b      	mov	r3, r1
 800e77a:	4650      	mov	r0, sl
 800e77c:	4659      	mov	r1, fp
 800e77e:	f7f1 ff3b 	bl	80005f8 <__aeabi_dmul>
 800e782:	a325      	add	r3, pc, #148	; (adr r3, 800e818 <__kernel_sin+0x140>)
 800e784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e788:	f7f1 fd7e 	bl	8000288 <__aeabi_dsub>
 800e78c:	4642      	mov	r2, r8
 800e78e:	464b      	mov	r3, r9
 800e790:	f7f1 ff32 	bl	80005f8 <__aeabi_dmul>
 800e794:	4602      	mov	r2, r0
 800e796:	460b      	mov	r3, r1
 800e798:	4620      	mov	r0, r4
 800e79a:	4629      	mov	r1, r5
 800e79c:	f7f1 fd76 	bl	800028c <__adddf3>
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	460d      	mov	r5, r1
 800e7a4:	ec45 4b10 	vmov	d0, r4, r5
 800e7a8:	b005      	add	sp, #20
 800e7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	4b1b      	ldr	r3, [pc, #108]	; (800e820 <__kernel_sin+0x148>)
 800e7b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7b6:	f7f1 ff1f 	bl	80005f8 <__aeabi_dmul>
 800e7ba:	4632      	mov	r2, r6
 800e7bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7c0:	463b      	mov	r3, r7
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	4649      	mov	r1, r9
 800e7c6:	f7f1 ff17 	bl	80005f8 <__aeabi_dmul>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7d2:	f7f1 fd59 	bl	8000288 <__aeabi_dsub>
 800e7d6:	4652      	mov	r2, sl
 800e7d8:	465b      	mov	r3, fp
 800e7da:	f7f1 ff0d 	bl	80005f8 <__aeabi_dmul>
 800e7de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7e2:	f7f1 fd51 	bl	8000288 <__aeabi_dsub>
 800e7e6:	a30c      	add	r3, pc, #48	; (adr r3, 800e818 <__kernel_sin+0x140>)
 800e7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ec:	4606      	mov	r6, r0
 800e7ee:	460f      	mov	r7, r1
 800e7f0:	4640      	mov	r0, r8
 800e7f2:	4649      	mov	r1, r9
 800e7f4:	f7f1 ff00 	bl	80005f8 <__aeabi_dmul>
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	4630      	mov	r0, r6
 800e7fe:	4639      	mov	r1, r7
 800e800:	f7f1 fd44 	bl	800028c <__adddf3>
 800e804:	4602      	mov	r2, r0
 800e806:	460b      	mov	r3, r1
 800e808:	4620      	mov	r0, r4
 800e80a:	4629      	mov	r1, r5
 800e80c:	f7f1 fd3c 	bl	8000288 <__aeabi_dsub>
 800e810:	e7c6      	b.n	800e7a0 <__kernel_sin+0xc8>
 800e812:	bf00      	nop
 800e814:	f3af 8000 	nop.w
 800e818:	55555549 	.word	0x55555549
 800e81c:	3fc55555 	.word	0x3fc55555
 800e820:	3fe00000 	.word	0x3fe00000
 800e824:	5acfd57c 	.word	0x5acfd57c
 800e828:	3de5d93a 	.word	0x3de5d93a
 800e82c:	8a2b9ceb 	.word	0x8a2b9ceb
 800e830:	3e5ae5e6 	.word	0x3e5ae5e6
 800e834:	57b1fe7d 	.word	0x57b1fe7d
 800e838:	3ec71de3 	.word	0x3ec71de3
 800e83c:	19c161d5 	.word	0x19c161d5
 800e840:	3f2a01a0 	.word	0x3f2a01a0
 800e844:	1110f8a6 	.word	0x1110f8a6
 800e848:	3f811111 	.word	0x3f811111

0800e84c <fabs>:
 800e84c:	ec51 0b10 	vmov	r0, r1, d0
 800e850:	ee10 2a10 	vmov	r2, s0
 800e854:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e858:	ec43 2b10 	vmov	d0, r2, r3
 800e85c:	4770      	bx	lr
	...

0800e860 <floor>:
 800e860:	ec51 0b10 	vmov	r0, r1, d0
 800e864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e868:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e86c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e870:	2e13      	cmp	r6, #19
 800e872:	460c      	mov	r4, r1
 800e874:	ee10 5a10 	vmov	r5, s0
 800e878:	4680      	mov	r8, r0
 800e87a:	dc34      	bgt.n	800e8e6 <floor+0x86>
 800e87c:	2e00      	cmp	r6, #0
 800e87e:	da16      	bge.n	800e8ae <floor+0x4e>
 800e880:	a335      	add	r3, pc, #212	; (adr r3, 800e958 <floor+0xf8>)
 800e882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e886:	f7f1 fd01 	bl	800028c <__adddf3>
 800e88a:	2200      	movs	r2, #0
 800e88c:	2300      	movs	r3, #0
 800e88e:	f7f2 f943 	bl	8000b18 <__aeabi_dcmpgt>
 800e892:	b148      	cbz	r0, 800e8a8 <floor+0x48>
 800e894:	2c00      	cmp	r4, #0
 800e896:	da59      	bge.n	800e94c <floor+0xec>
 800e898:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e89c:	4a30      	ldr	r2, [pc, #192]	; (800e960 <floor+0x100>)
 800e89e:	432b      	orrs	r3, r5
 800e8a0:	2500      	movs	r5, #0
 800e8a2:	42ab      	cmp	r3, r5
 800e8a4:	bf18      	it	ne
 800e8a6:	4614      	movne	r4, r2
 800e8a8:	4621      	mov	r1, r4
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	e025      	b.n	800e8fa <floor+0x9a>
 800e8ae:	4f2d      	ldr	r7, [pc, #180]	; (800e964 <floor+0x104>)
 800e8b0:	4137      	asrs	r7, r6
 800e8b2:	ea01 0307 	and.w	r3, r1, r7
 800e8b6:	4303      	orrs	r3, r0
 800e8b8:	d01f      	beq.n	800e8fa <floor+0x9a>
 800e8ba:	a327      	add	r3, pc, #156	; (adr r3, 800e958 <floor+0xf8>)
 800e8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c0:	f7f1 fce4 	bl	800028c <__adddf3>
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	f7f2 f926 	bl	8000b18 <__aeabi_dcmpgt>
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	d0eb      	beq.n	800e8a8 <floor+0x48>
 800e8d0:	2c00      	cmp	r4, #0
 800e8d2:	bfbe      	ittt	lt
 800e8d4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e8d8:	fa43 f606 	asrlt.w	r6, r3, r6
 800e8dc:	19a4      	addlt	r4, r4, r6
 800e8de:	ea24 0407 	bic.w	r4, r4, r7
 800e8e2:	2500      	movs	r5, #0
 800e8e4:	e7e0      	b.n	800e8a8 <floor+0x48>
 800e8e6:	2e33      	cmp	r6, #51	; 0x33
 800e8e8:	dd0b      	ble.n	800e902 <floor+0xa2>
 800e8ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e8ee:	d104      	bne.n	800e8fa <floor+0x9a>
 800e8f0:	ee10 2a10 	vmov	r2, s0
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	f7f1 fcc9 	bl	800028c <__adddf3>
 800e8fa:	ec41 0b10 	vmov	d0, r0, r1
 800e8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e902:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e90a:	fa23 f707 	lsr.w	r7, r3, r7
 800e90e:	4207      	tst	r7, r0
 800e910:	d0f3      	beq.n	800e8fa <floor+0x9a>
 800e912:	a311      	add	r3, pc, #68	; (adr r3, 800e958 <floor+0xf8>)
 800e914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e918:	f7f1 fcb8 	bl	800028c <__adddf3>
 800e91c:	2200      	movs	r2, #0
 800e91e:	2300      	movs	r3, #0
 800e920:	f7f2 f8fa 	bl	8000b18 <__aeabi_dcmpgt>
 800e924:	2800      	cmp	r0, #0
 800e926:	d0bf      	beq.n	800e8a8 <floor+0x48>
 800e928:	2c00      	cmp	r4, #0
 800e92a:	da02      	bge.n	800e932 <floor+0xd2>
 800e92c:	2e14      	cmp	r6, #20
 800e92e:	d103      	bne.n	800e938 <floor+0xd8>
 800e930:	3401      	adds	r4, #1
 800e932:	ea25 0507 	bic.w	r5, r5, r7
 800e936:	e7b7      	b.n	800e8a8 <floor+0x48>
 800e938:	2301      	movs	r3, #1
 800e93a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e93e:	fa03 f606 	lsl.w	r6, r3, r6
 800e942:	4435      	add	r5, r6
 800e944:	4545      	cmp	r5, r8
 800e946:	bf38      	it	cc
 800e948:	18e4      	addcc	r4, r4, r3
 800e94a:	e7f2      	b.n	800e932 <floor+0xd2>
 800e94c:	2500      	movs	r5, #0
 800e94e:	462c      	mov	r4, r5
 800e950:	e7aa      	b.n	800e8a8 <floor+0x48>
 800e952:	bf00      	nop
 800e954:	f3af 8000 	nop.w
 800e958:	8800759c 	.word	0x8800759c
 800e95c:	7e37e43c 	.word	0x7e37e43c
 800e960:	bff00000 	.word	0xbff00000
 800e964:	000fffff 	.word	0x000fffff

0800e968 <scalbn>:
 800e968:	b570      	push	{r4, r5, r6, lr}
 800e96a:	ec55 4b10 	vmov	r4, r5, d0
 800e96e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e972:	4606      	mov	r6, r0
 800e974:	462b      	mov	r3, r5
 800e976:	b9aa      	cbnz	r2, 800e9a4 <scalbn+0x3c>
 800e978:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e97c:	4323      	orrs	r3, r4
 800e97e:	d03b      	beq.n	800e9f8 <scalbn+0x90>
 800e980:	4b31      	ldr	r3, [pc, #196]	; (800ea48 <scalbn+0xe0>)
 800e982:	4629      	mov	r1, r5
 800e984:	2200      	movs	r2, #0
 800e986:	ee10 0a10 	vmov	r0, s0
 800e98a:	f7f1 fe35 	bl	80005f8 <__aeabi_dmul>
 800e98e:	4b2f      	ldr	r3, [pc, #188]	; (800ea4c <scalbn+0xe4>)
 800e990:	429e      	cmp	r6, r3
 800e992:	4604      	mov	r4, r0
 800e994:	460d      	mov	r5, r1
 800e996:	da12      	bge.n	800e9be <scalbn+0x56>
 800e998:	a327      	add	r3, pc, #156	; (adr r3, 800ea38 <scalbn+0xd0>)
 800e99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99e:	f7f1 fe2b 	bl	80005f8 <__aeabi_dmul>
 800e9a2:	e009      	b.n	800e9b8 <scalbn+0x50>
 800e9a4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e9a8:	428a      	cmp	r2, r1
 800e9aa:	d10c      	bne.n	800e9c6 <scalbn+0x5e>
 800e9ac:	ee10 2a10 	vmov	r2, s0
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	4629      	mov	r1, r5
 800e9b4:	f7f1 fc6a 	bl	800028c <__adddf3>
 800e9b8:	4604      	mov	r4, r0
 800e9ba:	460d      	mov	r5, r1
 800e9bc:	e01c      	b.n	800e9f8 <scalbn+0x90>
 800e9be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	3a36      	subs	r2, #54	; 0x36
 800e9c6:	4432      	add	r2, r6
 800e9c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e9cc:	428a      	cmp	r2, r1
 800e9ce:	dd0b      	ble.n	800e9e8 <scalbn+0x80>
 800e9d0:	ec45 4b11 	vmov	d1, r4, r5
 800e9d4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800ea40 <scalbn+0xd8>
 800e9d8:	f000 f83c 	bl	800ea54 <copysign>
 800e9dc:	a318      	add	r3, pc, #96	; (adr r3, 800ea40 <scalbn+0xd8>)
 800e9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e2:	ec51 0b10 	vmov	r0, r1, d0
 800e9e6:	e7da      	b.n	800e99e <scalbn+0x36>
 800e9e8:	2a00      	cmp	r2, #0
 800e9ea:	dd08      	ble.n	800e9fe <scalbn+0x96>
 800e9ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e9f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e9f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e9f8:	ec45 4b10 	vmov	d0, r4, r5
 800e9fc:	bd70      	pop	{r4, r5, r6, pc}
 800e9fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ea02:	da0d      	bge.n	800ea20 <scalbn+0xb8>
 800ea04:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ea08:	429e      	cmp	r6, r3
 800ea0a:	ec45 4b11 	vmov	d1, r4, r5
 800ea0e:	dce1      	bgt.n	800e9d4 <scalbn+0x6c>
 800ea10:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800ea38 <scalbn+0xd0>
 800ea14:	f000 f81e 	bl	800ea54 <copysign>
 800ea18:	a307      	add	r3, pc, #28	; (adr r3, 800ea38 <scalbn+0xd0>)
 800ea1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1e:	e7e0      	b.n	800e9e2 <scalbn+0x7a>
 800ea20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ea24:	3236      	adds	r2, #54	; 0x36
 800ea26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ea2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ea2e:	4620      	mov	r0, r4
 800ea30:	4629      	mov	r1, r5
 800ea32:	2200      	movs	r2, #0
 800ea34:	4b06      	ldr	r3, [pc, #24]	; (800ea50 <scalbn+0xe8>)
 800ea36:	e7b2      	b.n	800e99e <scalbn+0x36>
 800ea38:	c2f8f359 	.word	0xc2f8f359
 800ea3c:	01a56e1f 	.word	0x01a56e1f
 800ea40:	8800759c 	.word	0x8800759c
 800ea44:	7e37e43c 	.word	0x7e37e43c
 800ea48:	43500000 	.word	0x43500000
 800ea4c:	ffff3cb0 	.word	0xffff3cb0
 800ea50:	3c900000 	.word	0x3c900000

0800ea54 <copysign>:
 800ea54:	ec51 0b10 	vmov	r0, r1, d0
 800ea58:	ee11 0a90 	vmov	r0, s3
 800ea5c:	ee10 2a10 	vmov	r2, s0
 800ea60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ea64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ea68:	ea41 0300 	orr.w	r3, r1, r0
 800ea6c:	ec43 2b10 	vmov	d0, r2, r3
 800ea70:	4770      	bx	lr
	...

0800ea74 <_init>:
 800ea74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea76:	bf00      	nop
 800ea78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea7a:	bc08      	pop	{r3}
 800ea7c:	469e      	mov	lr, r3
 800ea7e:	4770      	bx	lr

0800ea80 <_fini>:
 800ea80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea82:	bf00      	nop
 800ea84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea86:	bc08      	pop	{r3}
 800ea88:	469e      	mov	lr, r3
 800ea8a:	4770      	bx	lr
