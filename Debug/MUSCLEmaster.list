
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08008530  08008530  00018530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085d4  080085d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080085d4  080085d4  000185d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085dc  080085dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085dc  080085dc  000185dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085e0  080085e0  000185e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080085e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  20000070  08008654  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  08008654  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163ac  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028a5  00000000  00000000  0003644c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001608  00000000  00000000  00038cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014f0  00000000  00000000  0003a300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000218a0  00000000  00000000  0003b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fbf7  00000000  00000000  0005d090  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccc04  00000000  00000000  0006cc87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013988b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063f0  00000000  00000000  00139908  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008518 	.word	0x08008518

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008518 	.word	0x08008518

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 fcab 	bl	8000f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f006 fdfe 	bl	80071b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fcc3 	bl	8000f6e <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000600:	f000 fc8b 	bl	8000f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20000098 	.word	0x20000098

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000098 	.word	0x20000098

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d101      	bne.n	80006be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e033      	b.n	8000726 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d109      	bne.n	80006da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f006 fd9c 	bl	8007204 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d118      	bne.n	8000718 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006ee:	f023 0302 	bic.w	r3, r3, #2
 80006f2:	f043 0202 	orr.w	r2, r3, #2
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 f93a 	bl	8000974 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f023 0303 	bic.w	r3, r3, #3
 800070e:	f043 0201 	orr.w	r2, r3, #1
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	641a      	str	r2, [r3, #64]	; 0x40
 8000716:	e001      	b.n	800071c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000744:	2b01      	cmp	r3, #1
 8000746:	d101      	bne.n	800074c <HAL_ADC_ConfigChannel+0x1c>
 8000748:	2302      	movs	r3, #2
 800074a:	e105      	b.n	8000958 <HAL_ADC_ConfigChannel+0x228>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2201      	movs	r2, #1
 8000750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b09      	cmp	r3, #9
 800075a:	d925      	bls.n	80007a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	68d9      	ldr	r1, [r3, #12]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	b29b      	uxth	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	4613      	mov	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4413      	add	r3, r2
 8000770:	3b1e      	subs	r3, #30
 8000772:	2207      	movs	r2, #7
 8000774:	fa02 f303 	lsl.w	r3, r2, r3
 8000778:	43da      	mvns	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	400a      	ands	r2, r1
 8000780:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	68d9      	ldr	r1, [r3, #12]
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	689a      	ldr	r2, [r3, #8]
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	b29b      	uxth	r3, r3
 8000792:	4618      	mov	r0, r3
 8000794:	4603      	mov	r3, r0
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4403      	add	r3, r0
 800079a:	3b1e      	subs	r3, #30
 800079c:	409a      	lsls	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	430a      	orrs	r2, r1
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	e022      	b.n	80007ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6919      	ldr	r1, [r3, #16]
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	461a      	mov	r2, r3
 80007b6:	4613      	mov	r3, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	4413      	add	r3, r2
 80007bc:	2207      	movs	r2, #7
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
 80007c2:	43da      	mvns	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	400a      	ands	r2, r1
 80007ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6919      	ldr	r1, [r3, #16]
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	689a      	ldr	r2, [r3, #8]
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	4618      	mov	r0, r3
 80007de:	4603      	mov	r3, r0
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4403      	add	r3, r0
 80007e4:	409a      	lsls	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	430a      	orrs	r2, r1
 80007ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	2b06      	cmp	r3, #6
 80007f4:	d824      	bhi.n	8000840 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685a      	ldr	r2, [r3, #4]
 8000800:	4613      	mov	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4413      	add	r3, r2
 8000806:	3b05      	subs	r3, #5
 8000808:	221f      	movs	r2, #31
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43da      	mvns	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	400a      	ands	r2, r1
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	b29b      	uxth	r3, r3
 8000824:	4618      	mov	r0, r3
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	4613      	mov	r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	4413      	add	r3, r2
 8000830:	3b05      	subs	r3, #5
 8000832:	fa00 f203 	lsl.w	r2, r0, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	430a      	orrs	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
 800083e:	e04c      	b.n	80008da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b0c      	cmp	r3, #12
 8000846:	d824      	bhi.n	8000892 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685a      	ldr	r2, [r3, #4]
 8000852:	4613      	mov	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	3b23      	subs	r3, #35	; 0x23
 800085a:	221f      	movs	r2, #31
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	43da      	mvns	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	400a      	ands	r2, r1
 8000868:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	b29b      	uxth	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685a      	ldr	r2, [r3, #4]
 800087c:	4613      	mov	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	3b23      	subs	r3, #35	; 0x23
 8000884:	fa00 f203 	lsl.w	r2, r0, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	430a      	orrs	r2, r1
 800088e:	631a      	str	r2, [r3, #48]	; 0x30
 8000890:	e023      	b.n	80008da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	4613      	mov	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	3b41      	subs	r3, #65	; 0x41
 80008a4:	221f      	movs	r2, #31
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43da      	mvns	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	400a      	ands	r2, r1
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685a      	ldr	r2, [r3, #4]
 80008c6:	4613      	mov	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	3b41      	subs	r3, #65	; 0x41
 80008ce:	fa00 f203 	lsl.w	r2, r0, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	430a      	orrs	r2, r1
 80008d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <HAL_ADC_ConfigChannel+0x234>)
 80008dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a21      	ldr	r2, [pc, #132]	; (8000968 <HAL_ADC_ConfigChannel+0x238>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d109      	bne.n	80008fc <HAL_ADC_ConfigChannel+0x1cc>
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b12      	cmp	r3, #18
 80008ee:	d105      	bne.n	80008fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a19      	ldr	r2, [pc, #100]	; (8000968 <HAL_ADC_ConfigChannel+0x238>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d123      	bne.n	800094e <HAL_ADC_ConfigChannel+0x21e>
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b10      	cmp	r3, #16
 800090c:	d003      	beq.n	8000916 <HAL_ADC_ConfigChannel+0x1e6>
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b11      	cmp	r3, #17
 8000914:	d11b      	bne.n	800094e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b10      	cmp	r3, #16
 8000928:	d111      	bne.n	800094e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_ADC_ConfigChannel+0x23c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <HAL_ADC_ConfigChannel+0x240>)
 8000930:	fba2 2303 	umull	r2, r3, r2, r3
 8000934:	0c9a      	lsrs	r2, r3, #18
 8000936:	4613      	mov	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000940:	e002      	b.n	8000948 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	3b01      	subs	r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1f9      	bne.n	8000942 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40012300 	.word	0x40012300
 8000968:	40012000 	.word	0x40012000
 800096c:	20000008 	.word	0x20000008
 8000970:	431bde83 	.word	0x431bde83

08000974 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800097c:	4b79      	ldr	r3, [pc, #484]	; (8000b64 <ADC_Init+0x1f0>)
 800097e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	431a      	orrs	r2, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80009a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	6859      	ldr	r1, [r3, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	021a      	lsls	r2, r3, #8
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	430a      	orrs	r2, r1
 80009bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80009cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	6859      	ldr	r1, [r3, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	430a      	orrs	r2, r1
 80009de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	6899      	ldr	r1, [r3, #8]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68da      	ldr	r2, [r3, #12]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	430a      	orrs	r2, r1
 8000a00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a06:	4a58      	ldr	r2, [pc, #352]	; (8000b68 <ADC_Init+0x1f4>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d022      	beq.n	8000a52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6899      	ldr	r1, [r3, #8]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	6899      	ldr	r1, [r3, #8]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	e00f      	b.n	8000a72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	689a      	ldr	r2, [r3, #8]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	689a      	ldr	r2, [r3, #8]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 0202 	bic.w	r2, r2, #2
 8000a80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	6899      	ldr	r1, [r3, #8]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	7e1b      	ldrb	r3, [r3, #24]
 8000a8c:	005a      	lsls	r2, r3, #1
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	430a      	orrs	r2, r1
 8000a94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d01b      	beq.n	8000ad8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000aae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000abe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6859      	ldr	r1, [r3, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aca:	3b01      	subs	r3, #1
 8000acc:	035a      	lsls	r2, r3, #13
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	e007      	b.n	8000ae8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ae6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	051a      	lsls	r2, r3, #20
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6899      	ldr	r1, [r3, #8]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b2a:	025a      	lsls	r2, r3, #9
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	430a      	orrs	r2, r1
 8000b32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	6899      	ldr	r1, [r3, #8]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	029a      	lsls	r2, r3, #10
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	430a      	orrs	r2, r1
 8000b56:	609a      	str	r2, [r3, #8]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	40012300 	.word	0x40012300
 8000b68:	0f000001 	.word	0x0f000001

08000b6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e0ed      	b.n	8000d5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f006 fbe6 	bl	800735c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f022 0202 	bic.w	r2, r2, #2
 8000b9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ba0:	f7ff fd54 	bl	800064c <HAL_GetTick>
 8000ba4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ba6:	e012      	b.n	8000bce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ba8:	f7ff fd50 	bl	800064c <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	2b0a      	cmp	r3, #10
 8000bb4:	d90b      	bls.n	8000bce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2205      	movs	r2, #5
 8000bc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e0c5      	b.n	8000d5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1e5      	bne.n	8000ba8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f042 0201 	orr.w	r2, r2, #1
 8000bea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bec:	f7ff fd2e 	bl	800064c <HAL_GetTick>
 8000bf0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bf2:	e012      	b.n	8000c1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bf4:	f7ff fd2a 	bl	800064c <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	2b0a      	cmp	r3, #10
 8000c00:	d90b      	bls.n	8000c1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2205      	movs	r2, #5
 8000c12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e09f      	b.n	8000d5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0e5      	beq.n	8000bf4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7e1b      	ldrb	r3, [r3, #24]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d108      	bne.n	8000c42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	e007      	b.n	8000c52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7e5b      	ldrb	r3, [r3, #25]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d108      	bne.n	8000c6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e007      	b.n	8000c7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	7e9b      	ldrb	r3, [r3, #26]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d108      	bne.n	8000c96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f042 0220 	orr.w	r2, r2, #32
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	e007      	b.n	8000ca6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f022 0220 	bic.w	r2, r2, #32
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7edb      	ldrb	r3, [r3, #27]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d108      	bne.n	8000cc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0210 	bic.w	r2, r2, #16
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e007      	b.n	8000cd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f042 0210 	orr.w	r2, r2, #16
 8000cce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7f1b      	ldrb	r3, [r3, #28]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d108      	bne.n	8000cea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0208 	orr.w	r2, r2, #8
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	e007      	b.n	8000cfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 0208 	bic.w	r2, r2, #8
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7f5b      	ldrb	r3, [r3, #29]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d108      	bne.n	8000d14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f042 0204 	orr.w	r2, r2, #4
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	e007      	b.n	8000d24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 0204 	bic.w	r2, r2, #4
 8000d22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	ea42 0103 	orr.w	r1, r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	1e5a      	subs	r2, r3, #1
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2201      	movs	r2, #1
 8000d54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <__NVIC_EnableIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed0:	d301      	bcc.n	8000ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00f      	b.n	8000ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <SysTick_Config+0x40>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee4:	f7ff ff8e 	bl	8000e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SysTick_Config+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x40>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff29 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2c:	f7ff ff3e 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff ff8e 	bl	8000e58 <NVIC_EncodePriority>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5d 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff31 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ffa2 	bl	8000ec0 <SysTick_Config>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d004      	beq.n	8000fa4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e00c      	b.n	8000fbe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2205      	movs	r2, #5
 8000fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	e16b      	b.n	80012c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	f040 815a 	bne.w	80012ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d00b      	beq.n	8001026 <HAL_GPIO_Init+0x5a>
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d007      	beq.n	8001026 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101a:	2b11      	cmp	r3, #17
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b12      	cmp	r3, #18
 8001024:	d130      	bne.n	8001088 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	f003 0201 	and.w	r2, r3, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0xfc>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b12      	cmp	r3, #18
 80010c6:	d123      	bne.n	8001110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	69b9      	ldr	r1, [r7, #24]
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0203 	and.w	r2, r3, #3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80b4 	beq.w	80012ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <HAL_GPIO_Init+0x308>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a5e      	ldr	r2, [pc, #376]	; (80012d4 <HAL_GPIO_Init+0x308>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b5c      	ldr	r3, [pc, #368]	; (80012d4 <HAL_GPIO_Init+0x308>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116e:	4a5a      	ldr	r2, [pc, #360]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a51      	ldr	r2, [pc, #324]	; (80012dc <HAL_GPIO_Init+0x310>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d02b      	beq.n	80011f2 <HAL_GPIO_Init+0x226>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a50      	ldr	r2, [pc, #320]	; (80012e0 <HAL_GPIO_Init+0x314>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d025      	beq.n	80011ee <HAL_GPIO_Init+0x222>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4f      	ldr	r2, [pc, #316]	; (80012e4 <HAL_GPIO_Init+0x318>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d01f      	beq.n	80011ea <HAL_GPIO_Init+0x21e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4e      	ldr	r2, [pc, #312]	; (80012e8 <HAL_GPIO_Init+0x31c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d019      	beq.n	80011e6 <HAL_GPIO_Init+0x21a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4d      	ldr	r2, [pc, #308]	; (80012ec <HAL_GPIO_Init+0x320>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0x216>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4c      	ldr	r2, [pc, #304]	; (80012f0 <HAL_GPIO_Init+0x324>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00d      	beq.n	80011de <HAL_GPIO_Init+0x212>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4b      	ldr	r2, [pc, #300]	; (80012f4 <HAL_GPIO_Init+0x328>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x20e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4a      	ldr	r2, [pc, #296]	; (80012f8 <HAL_GPIO_Init+0x32c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_GPIO_Init+0x20a>
 80011d2:	2307      	movs	r3, #7
 80011d4:	e00e      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011d6:	2308      	movs	r3, #8
 80011d8:	e00c      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00a      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011de:	2305      	movs	r3, #5
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x228>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001204:	4934      	ldr	r1, [pc, #208]	; (80012d8 <HAL_GPIO_Init+0x30c>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001212:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <HAL_GPIO_Init+0x330>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001236:	4a31      	ldr	r2, [pc, #196]	; (80012fc <HAL_GPIO_Init+0x330>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <HAL_GPIO_Init+0x330>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001260:	4a26      	ldr	r2, [pc, #152]	; (80012fc <HAL_GPIO_Init+0x330>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <HAL_GPIO_Init+0x330>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128a:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <HAL_GPIO_Init+0x330>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HAL_GPIO_Init+0x330>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b4:	4a11      	ldr	r2, [pc, #68]	; (80012fc <HAL_GPIO_Init+0x330>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f ae90 	bls.w	8000fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	3724      	adds	r7, #36	; 0x24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40021400 	.word	0x40021400
 80012f4:	40021800 	.word	0x40021800
 80012f8:	40021c00 	.word	0x40021c00
 80012fc:	40013c00 	.word	0x40013c00

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800131c:	e003      	b.n	8001326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	041a      	lsls	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	460b      	mov	r3, r1
 800133c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	401a      	ands	r2, r3
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	429a      	cmp	r2, r3
 800134a:	d104      	bne.n	8001356 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800134c:	887b      	ldrh	r3, [r7, #2]
 800134e:	041a      	lsls	r2, r3, #16
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001354:	e002      	b.n	800135c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d006      	beq.n	800138c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	4618      	mov	r0, r3
 8001388:	f005 fef2 	bl	8007170 <HAL_GPIO_EXTI_Callback>
  }
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40013c00 	.word	0x40013c00

08001398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e11f      	b.n	80015ea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d106      	bne.n	80013c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f006 f814 	bl	80073ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2224      	movs	r2, #36	; 0x24
 80013c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0201 	bic.w	r2, r2, #1
 80013da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013fc:	f001 fc84 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8001400:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4a7b      	ldr	r2, [pc, #492]	; (80015f4 <HAL_I2C_Init+0x25c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d807      	bhi.n	800141c <HAL_I2C_Init+0x84>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4a7a      	ldr	r2, [pc, #488]	; (80015f8 <HAL_I2C_Init+0x260>)
 8001410:	4293      	cmp	r3, r2
 8001412:	bf94      	ite	ls
 8001414:	2301      	movls	r3, #1
 8001416:	2300      	movhi	r3, #0
 8001418:	b2db      	uxtb	r3, r3
 800141a:	e006      	b.n	800142a <HAL_I2C_Init+0x92>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4a77      	ldr	r2, [pc, #476]	; (80015fc <HAL_I2C_Init+0x264>)
 8001420:	4293      	cmp	r3, r2
 8001422:	bf94      	ite	ls
 8001424:	2301      	movls	r3, #1
 8001426:	2300      	movhi	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e0db      	b.n	80015ea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4a72      	ldr	r2, [pc, #456]	; (8001600 <HAL_I2C_Init+0x268>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	0c9b      	lsrs	r3, r3, #18
 800143c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	430a      	orrs	r2, r1
 8001450:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4a64      	ldr	r2, [pc, #400]	; (80015f4 <HAL_I2C_Init+0x25c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d802      	bhi.n	800146c <HAL_I2C_Init+0xd4>
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	3301      	adds	r3, #1
 800146a:	e009      	b.n	8001480 <HAL_I2C_Init+0xe8>
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	4a63      	ldr	r2, [pc, #396]	; (8001604 <HAL_I2C_Init+0x26c>)
 8001478:	fba2 2303 	umull	r2, r3, r2, r3
 800147c:	099b      	lsrs	r3, r3, #6
 800147e:	3301      	adds	r3, #1
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	430b      	orrs	r3, r1
 8001486:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001492:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4956      	ldr	r1, [pc, #344]	; (80015f4 <HAL_I2C_Init+0x25c>)
 800149c:	428b      	cmp	r3, r1
 800149e:	d80d      	bhi.n	80014bc <HAL_I2C_Init+0x124>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1e59      	subs	r1, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ae:	3301      	adds	r3, #1
 80014b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	bf38      	it	cc
 80014b8:	2304      	movcc	r3, #4
 80014ba:	e04f      	b.n	800155c <HAL_I2C_Init+0x1c4>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d111      	bne.n	80014e8 <HAL_I2C_Init+0x150>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1e58      	subs	r0, r3, #1
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6859      	ldr	r1, [r3, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	440b      	add	r3, r1
 80014d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf0c      	ite	eq
 80014e0:	2301      	moveq	r3, #1
 80014e2:	2300      	movne	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	e012      	b.n	800150e <HAL_I2C_Init+0x176>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1e58      	subs	r0, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6859      	ldr	r1, [r3, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	0099      	lsls	r1, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001504:	2b00      	cmp	r3, #0
 8001506:	bf0c      	ite	eq
 8001508:	2301      	moveq	r3, #1
 800150a:	2300      	movne	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_I2C_Init+0x17e>
 8001512:	2301      	movs	r3, #1
 8001514:	e022      	b.n	800155c <HAL_I2C_Init+0x1c4>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10e      	bne.n	800153c <HAL_I2C_Init+0x1a4>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1e58      	subs	r0, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6859      	ldr	r1, [r3, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	440b      	add	r3, r1
 800152c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001530:	3301      	adds	r3, #1
 8001532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153a:	e00f      	b.n	800155c <HAL_I2C_Init+0x1c4>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	1e58      	subs	r0, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	0099      	lsls	r1, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001552:	3301      	adds	r3, #1
 8001554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	6809      	ldr	r1, [r1, #0]
 8001560:	4313      	orrs	r3, r2
 8001562:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69da      	ldr	r2, [r3, #28]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800158a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6911      	ldr	r1, [r2, #16]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68d2      	ldr	r2, [r2, #12]
 8001596:	4311      	orrs	r1, r2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	430b      	orrs	r3, r1
 800159e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695a      	ldr	r2, [r3, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0201 	orr.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2220      	movs	r2, #32
 80015d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	000186a0 	.word	0x000186a0
 80015f8:	001e847f 	.word	0x001e847f
 80015fc:	003d08ff 	.word	0x003d08ff
 8001600:	431bde83 	.word	0x431bde83
 8001604:	10624dd3 	.word	0x10624dd3

08001608 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af02      	add	r7, sp, #8
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	461a      	mov	r2, r3
 8001614:	460b      	mov	r3, r1
 8001616:	817b      	strh	r3, [r7, #10]
 8001618:	4613      	mov	r3, r2
 800161a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff f816 	bl	800064c <HAL_GetTick>
 8001620:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b20      	cmp	r3, #32
 800162c:	f040 80e0 	bne.w	80017f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2319      	movs	r3, #25
 8001636:	2201      	movs	r2, #1
 8001638:	4970      	ldr	r1, [pc, #448]	; (80017fc <HAL_I2C_Master_Transmit+0x1f4>)
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 fc56 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001646:	2302      	movs	r3, #2
 8001648:	e0d3      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_I2C_Master_Transmit+0x50>
 8001654:	2302      	movs	r3, #2
 8001656:	e0cc      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x1ea>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b01      	cmp	r3, #1
 800166c:	d007      	beq.n	800167e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0201 	orr.w	r2, r2, #1
 800167c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800168c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2221      	movs	r2, #33	; 0x21
 8001692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2210      	movs	r2, #16
 800169a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	893a      	ldrh	r2, [r7, #8]
 80016ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4a50      	ldr	r2, [pc, #320]	; (8001800 <HAL_I2C_Master_Transmit+0x1f8>)
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016c0:	8979      	ldrh	r1, [r7, #10]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	6a3a      	ldr	r2, [r7, #32]
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 fac2 	bl	8001c50 <I2C_MasterRequestWrite>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e08d      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016ec:	e066      	b.n	80017bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	6a39      	ldr	r1, [r7, #32]
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 fcd0 	bl	8002098 <I2C_WaitOnTXEFlagUntilTimeout>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00d      	beq.n	800171a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	2b04      	cmp	r3, #4
 8001704:	d107      	bne.n	8001716 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001714:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e06b      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	781a      	ldrb	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001734:	b29b      	uxth	r3, r3
 8001736:	3b01      	subs	r3, #1
 8001738:	b29a      	uxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001742:	3b01      	subs	r3, #1
 8001744:	b29a      	uxth	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b04      	cmp	r3, #4
 8001756:	d11b      	bne.n	8001790 <HAL_I2C_Master_Transmit+0x188>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175c:	2b00      	cmp	r3, #0
 800175e:	d017      	beq.n	8001790 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	781a      	ldrb	r2, [r3, #0]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b01      	subs	r3, #1
 800177e:	b29a      	uxth	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001788:	3b01      	subs	r3, #1
 800178a:	b29a      	uxth	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	6a39      	ldr	r1, [r7, #32]
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 fcc0 	bl	800211a <I2C_WaitOnBTFFlagUntilTimeout>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00d      	beq.n	80017bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d107      	bne.n	80017b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e01a      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d194      	bne.n	80016ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	e000      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017f0:	2302      	movs	r3, #2
  }
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	00100002 	.word	0x00100002
 8001800:	ffff0000 	.word	0xffff0000

08001804 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08c      	sub	sp, #48	; 0x30
 8001808:	af02      	add	r7, sp, #8
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	461a      	mov	r2, r3
 8001810:	460b      	mov	r3, r1
 8001812:	817b      	strh	r3, [r7, #10]
 8001814:	4613      	mov	r3, r2
 8001816:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7fe ff18 	bl	800064c <HAL_GetTick>
 800181c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b20      	cmp	r3, #32
 8001828:	f040 820b 	bne.w	8001c42 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2319      	movs	r3, #25
 8001832:	2201      	movs	r2, #1
 8001834:	497c      	ldr	r1, [pc, #496]	; (8001a28 <HAL_I2C_Master_Receive+0x224>)
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 fb58 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001842:	2302      	movs	r3, #2
 8001844:	e1fe      	b.n	8001c44 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <HAL_I2C_Master_Receive+0x50>
 8001850:	2302      	movs	r3, #2
 8001852:	e1f7      	b.n	8001c44 <HAL_I2C_Master_Receive+0x440>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b01      	cmp	r3, #1
 8001868:	d007      	beq.n	800187a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 0201 	orr.w	r2, r2, #1
 8001878:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001888:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2222      	movs	r2, #34	; 0x22
 800188e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2210      	movs	r2, #16
 8001896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	893a      	ldrh	r2, [r7, #8]
 80018aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4a5c      	ldr	r2, [pc, #368]	; (8001a2c <HAL_I2C_Master_Receive+0x228>)
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018bc:	8979      	ldrh	r1, [r7, #10]
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 fa46 	bl	8001d54 <I2C_MasterRequestRead>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e1b8      	b.n	8001c44 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d113      	bne.n	8001902 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	623b      	str	r3, [r7, #32]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	623b      	str	r3, [r7, #32]
 80018ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e18c      	b.n	8001c1c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001906:	2b01      	cmp	r3, #1
 8001908:	d11b      	bne.n	8001942 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	e16c      	b.n	8001c1c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001946:	2b02      	cmp	r3, #2
 8001948:	d11b      	bne.n	8001982 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001958:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001968:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	e14c      	b.n	8001c1c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001990:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80019a8:	e138      	b.n	8001c1c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	f200 80f1 	bhi.w	8001b96 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d123      	bne.n	8001a04 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 fbeb 	bl	800219c <I2C_WaitOnRXNEFlagUntilTimeout>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e139      	b.n	8001c44 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a02:	e10b      	b.n	8001c1c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d14e      	bne.n	8001aaa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a12:	2200      	movs	r2, #0
 8001a14:	4906      	ldr	r1, [pc, #24]	; (8001a30 <HAL_I2C_Master_Receive+0x22c>)
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 fa68 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d008      	beq.n	8001a34 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e10e      	b.n	8001c44 <HAL_I2C_Master_Receive+0x440>
 8001a26:	bf00      	nop
 8001a28:	00100002 	.word	0x00100002
 8001a2c:	ffff0000 	.word	0xffff0000
 8001a30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	691a      	ldr	r2, [r3, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a92:	3b01      	subs	r3, #1
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001aa8:	e0b8      	b.n	8001c1c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4966      	ldr	r1, [pc, #408]	; (8001c4c <HAL_I2C_Master_Receive+0x448>)
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 fa19 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0bf      	b.n	8001c44 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	494f      	ldr	r1, [pc, #316]	; (8001c4c <HAL_I2C_Master_Receive+0x448>)
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 f9eb 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e091      	b.n	8001c44 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b94:	e042      	b.n	8001c1c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 fafe 	bl	800219c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e04c      	b.n	8001c44 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d118      	bne.n	8001c1c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f47f aec2 	bne.w	80019aa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c42:	2302      	movs	r3, #2
  }
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3728      	adds	r7, #40	; 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	00010004 	.word	0x00010004

08001c50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d006      	beq.n	8001c7a <I2C_MasterRequestWrite+0x2a>
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d003      	beq.n	8001c7a <I2C_MasterRequestWrite+0x2a>
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c78:	d108      	bne.n	8001c8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e00b      	b.n	8001ca4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	2b12      	cmp	r3, #18
 8001c92:	d107      	bne.n	8001ca4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f91b 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00c      	beq.n	8001cd6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e035      	b.n	8001d42 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cde:	d108      	bne.n	8001cf2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ce0:	897b      	ldrh	r3, [r7, #10]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cee:	611a      	str	r2, [r3, #16]
 8001cf0:	e01b      	b.n	8001d2a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cf2:	897b      	ldrh	r3, [r7, #10]
 8001cf4:	11db      	asrs	r3, r3, #7
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f003 0306 	and.w	r3, r3, #6
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f063 030f 	orn	r3, r3, #15
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	490f      	ldr	r1, [pc, #60]	; (8001d4c <I2C_MasterRequestWrite+0xfc>)
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f000 f942 	bl	8001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e010      	b.n	8001d42 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d20:	897b      	ldrh	r3, [r7, #10]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4908      	ldr	r1, [pc, #32]	; (8001d50 <I2C_MasterRequestWrite+0x100>)
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f932 	bl	8001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	00010008 	.word	0x00010008
 8001d50:	00010002 	.word	0x00010002

08001d54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	460b      	mov	r3, r1
 8001d62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d006      	beq.n	8001d8e <I2C_MasterRequestRead+0x3a>
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d003      	beq.n	8001d8e <I2C_MasterRequestRead+0x3a>
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d8c:	d108      	bne.n	8001da0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	e00b      	b.n	8001db8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	2b11      	cmp	r3, #17
 8001da6:	d107      	bne.n	8001db8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001db6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f891 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00c      	beq.n	8001dea <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e078      	b.n	8001edc <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df2:	d108      	bne.n	8001e06 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001df4:	897b      	ldrh	r3, [r7, #10]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	611a      	str	r2, [r3, #16]
 8001e04:	e05e      	b.n	8001ec4 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e06:	897b      	ldrh	r3, [r7, #10]
 8001e08:	11db      	asrs	r3, r3, #7
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f003 0306 	and.w	r3, r3, #6
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f063 030f 	orn	r3, r3, #15
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	4930      	ldr	r1, [pc, #192]	; (8001ee4 <I2C_MasterRequestRead+0x190>)
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 f8b8 	bl	8001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e053      	b.n	8001edc <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e34:	897b      	ldrh	r3, [r7, #10]
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4929      	ldr	r1, [pc, #164]	; (8001ee8 <I2C_MasterRequestRead+0x194>)
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 f8a8 	bl	8001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e043      	b.n	8001edc <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e78:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 f830 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00c      	beq.n	8001eac <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e017      	b.n	8001edc <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001eac:	897b      	ldrh	r3, [r7, #10]
 8001eae:	11db      	asrs	r3, r3, #7
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f003 0306 	and.w	r3, r3, #6
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f063 030e 	orn	r3, r3, #14
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <I2C_MasterRequestRead+0x194>)
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f865 	bl	8001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	00010008 	.word	0x00010008
 8001ee8:	00010002 	.word	0x00010002

08001eec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001efc:	e025      	b.n	8001f4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f04:	d021      	beq.n	8001f4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f06:	f7fe fba1 	bl	800064c <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d302      	bcc.n	8001f1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d116      	bne.n	8001f4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2220      	movs	r2, #32
 8001f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f043 0220 	orr.w	r2, r3, #32
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e023      	b.n	8001f92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	0c1b      	lsrs	r3, r3, #16
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d10d      	bne.n	8001f70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	bf0c      	ite	eq
 8001f66:	2301      	moveq	r3, #1
 8001f68:	2300      	movne	r3, #0
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	e00c      	b.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	bf0c      	ite	eq
 8001f82:	2301      	moveq	r3, #1
 8001f84:	2300      	movne	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d0b6      	beq.n	8001efe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fa8:	e051      	b.n	800204e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb8:	d123      	bne.n	8002002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f043 0204 	orr.w	r2, r3, #4
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e046      	b.n	8002090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002008:	d021      	beq.n	800204e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200a:	f7fe fb1f 	bl	800064c <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	429a      	cmp	r2, r3
 8002018:	d302      	bcc.n	8002020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d116      	bne.n	800204e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f043 0220 	orr.w	r2, r3, #32
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e020      	b.n	8002090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d10c      	bne.n	8002072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4013      	ands	r3, r2
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf14      	ite	ne
 800206a:	2301      	movne	r3, #1
 800206c:	2300      	moveq	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	e00b      	b.n	800208a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	43da      	mvns	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4013      	ands	r3, r2
 800207e:	b29b      	uxth	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf14      	ite	ne
 8002084:	2301      	movne	r3, #1
 8002086:	2300      	moveq	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d18d      	bne.n	8001faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020a4:	e02d      	b.n	8002102 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f8ce 	bl	8002248 <I2C_IsAcknowledgeFailed>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e02d      	b.n	8002112 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020bc:	d021      	beq.n	8002102 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020be:	f7fe fac5 	bl	800064c <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d302      	bcc.n	80020d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d116      	bne.n	8002102 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f043 0220 	orr.w	r2, r3, #32
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e007      	b.n	8002112 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210c:	2b80      	cmp	r3, #128	; 0x80
 800210e:	d1ca      	bne.n	80020a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002126:	e02d      	b.n	8002184 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 f88d 	bl	8002248 <I2C_IsAcknowledgeFailed>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e02d      	b.n	8002194 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800213e:	d021      	beq.n	8002184 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002140:	f7fe fa84 	bl	800064c <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	429a      	cmp	r2, r3
 800214e:	d302      	bcc.n	8002156 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d116      	bne.n	8002184 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f043 0220 	orr.w	r2, r3, #32
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e007      	b.n	8002194 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	2b04      	cmp	r3, #4
 8002190:	d1ca      	bne.n	8002128 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021a8:	e042      	b.n	8002230 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b10      	cmp	r3, #16
 80021b6:	d119      	bne.n	80021ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0210 	mvn.w	r2, #16
 80021c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e029      	b.n	8002240 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ec:	f7fe fa2e 	bl	800064c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d302      	bcc.n	8002202 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d116      	bne.n	8002230 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f043 0220 	orr.w	r2, r3, #32
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e007      	b.n	8002240 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223a:	2b40      	cmp	r3, #64	; 0x40
 800223c:	d1b5      	bne.n	80021aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225e:	d11b      	bne.n	8002298 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002268:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f043 0204 	orr.w	r2, r3, #4
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a8:	b08f      	sub	sp, #60	; 0x3c
 80022aa:	af0a      	add	r7, sp, #40	; 0x28
 80022ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e10f      	b.n	80024d8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f005 fb12 	bl	80078fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2203      	movs	r2, #3
 80022dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 fdb1 	bl	8005e5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	603b      	str	r3, [r7, #0]
 8002302:	687e      	ldr	r6, [r7, #4]
 8002304:	466d      	mov	r5, sp
 8002306:	f106 0410 	add.w	r4, r6, #16
 800230a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800230c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800230e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002312:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002316:	e885 0003 	stmia.w	r5, {r0, r1}
 800231a:	1d33      	adds	r3, r6, #4
 800231c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800231e:	6838      	ldr	r0, [r7, #0]
 8002320:	f003 fd3c 	bl	8005d9c <USB_CoreInit>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2202      	movs	r2, #2
 800232e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e0d0      	b.n	80024d8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f003 fd9f 	bl	8005e80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e04a      	b.n	80023de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	333d      	adds	r3, #61	; 0x3d
 8002358:	2201      	movs	r2, #1
 800235a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	333c      	adds	r3, #60	; 0x3c
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	b298      	uxth	r0, r3
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3342      	adds	r3, #66	; 0x42
 8002384:	4602      	mov	r2, r0
 8002386:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	333f      	adds	r3, #63	; 0x3f
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	3344      	adds	r3, #68	; 0x44
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	3348      	adds	r3, #72	; 0x48
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	3350      	adds	r3, #80	; 0x50
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	3301      	adds	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d3af      	bcc.n	8002348 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	e044      	b.n	8002478 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023ee:	7bfa      	ldrb	r2, [r7, #15]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002416:	7bfa      	ldrb	r2, [r7, #15]
 8002418:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002430:	7bfa      	ldrb	r2, [r7, #15]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800245c:	7bfa      	ldrb	r2, [r7, #15]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	3301      	adds	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	429a      	cmp	r2, r3
 8002480:	d3b5      	bcc.n	80023ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	687e      	ldr	r6, [r7, #4]
 800248a:	466d      	mov	r5, sp
 800248c:	f106 0410 	add.w	r4, r6, #16
 8002490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002498:	e894 0003 	ldmia.w	r4, {r0, r1}
 800249c:	e885 0003 	stmia.w	r5, {r0, r1}
 80024a0:	1d33      	adds	r3, r6, #4
 80024a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a4:	6838      	ldr	r0, [r7, #0]
 80024a6:	f003 fd15 	bl	8005ed4 <USB_DevInit>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e00d      	b.n	80024d8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f003 fed2 	bl	800627a <USB_DevDisconnect>

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e25b      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d075      	beq.n	80025ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fe:	4ba3      	ldr	r3, [pc, #652]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b04      	cmp	r3, #4
 8002508:	d00c      	beq.n	8002524 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250a:	4ba0      	ldr	r3, [pc, #640]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002512:	2b08      	cmp	r3, #8
 8002514:	d112      	bne.n	800253c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002516:	4b9d      	ldr	r3, [pc, #628]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002522:	d10b      	bne.n	800253c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	4b99      	ldr	r3, [pc, #612]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d05b      	beq.n	80025e8 <HAL_RCC_OscConfig+0x108>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d157      	bne.n	80025e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e236      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002544:	d106      	bne.n	8002554 <HAL_RCC_OscConfig+0x74>
 8002546:	4b91      	ldr	r3, [pc, #580]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a90      	ldr	r2, [pc, #576]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e01d      	b.n	8002590 <HAL_RCC_OscConfig+0xb0>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x98>
 800255e:	4b8b      	ldr	r3, [pc, #556]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a8a      	ldr	r2, [pc, #552]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b88      	ldr	r3, [pc, #544]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a87      	ldr	r2, [pc, #540]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e00b      	b.n	8002590 <HAL_RCC_OscConfig+0xb0>
 8002578:	4b84      	ldr	r3, [pc, #528]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a83      	ldr	r2, [pc, #524]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800257e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b81      	ldr	r3, [pc, #516]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a80      	ldr	r2, [pc, #512]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800258a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe f858 	bl	800064c <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a0:	f7fe f854 	bl	800064c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e1fb      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0xc0>
 80025be:	e014      	b.n	80025ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe f844 	bl	800064c <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c8:	f7fe f840 	bl	800064c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1e7      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	4b6c      	ldr	r3, [pc, #432]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0xe8>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d063      	beq.n	80026be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f6:	4b65      	ldr	r3, [pc, #404]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002602:	4b62      	ldr	r3, [pc, #392]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800260a:	2b08      	cmp	r3, #8
 800260c:	d11c      	bne.n	8002648 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260e:	4b5f      	ldr	r3, [pc, #380]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d116      	bne.n	8002648 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	4b5c      	ldr	r3, [pc, #368]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_RCC_OscConfig+0x152>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e1bb      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002632:	4b56      	ldr	r3, [pc, #344]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4952      	ldr	r1, [pc, #328]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	e03a      	b.n	80026be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002650:	4b4f      	ldr	r3, [pc, #316]	; (8002790 <HAL_RCC_OscConfig+0x2b0>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7fd fff9 	bl	800064c <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265e:	f7fd fff5 	bl	800064c <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e19c      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	4b46      	ldr	r3, [pc, #280]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267c:	4b43      	ldr	r3, [pc, #268]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4940      	ldr	r1, [pc, #256]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
 8002690:	e015      	b.n	80026be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002692:	4b3f      	ldr	r3, [pc, #252]	; (8002790 <HAL_RCC_OscConfig+0x2b0>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7fd ffd8 	bl	800064c <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a0:	f7fd ffd4 	bl	800064c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e17b      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	4b36      	ldr	r3, [pc, #216]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d030      	beq.n	800272c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d016      	beq.n	8002700 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d2:	4b30      	ldr	r3, [pc, #192]	; (8002794 <HAL_RCC_OscConfig+0x2b4>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7fd ffb8 	bl	800064c <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e0:	f7fd ffb4 	bl	800064c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e15b      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	4b26      	ldr	r3, [pc, #152]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x200>
 80026fe:	e015      	b.n	800272c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_RCC_OscConfig+0x2b4>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7fd ffa1 	bl	800064c <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800270e:	f7fd ff9d 	bl	800064c <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e144      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	4b1a      	ldr	r3, [pc, #104]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80a0 	beq.w	800287a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10f      	bne.n	800276a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	4a0e      	ldr	r2, [pc, #56]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <HAL_RCC_OscConfig+0x2ac>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_RCC_OscConfig+0x2b8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d121      	bne.n	80027ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <HAL_RCC_OscConfig+0x2b8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a07      	ldr	r2, [pc, #28]	; (8002798 <HAL_RCC_OscConfig+0x2b8>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002782:	f7fd ff63 	bl	800064c <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	e011      	b.n	80027ae <HAL_RCC_OscConfig+0x2ce>
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	42470000 	.word	0x42470000
 8002794:	42470e80 	.word	0x42470e80
 8002798:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279c:	f7fd ff56 	bl	800064c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e0fd      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ae:	4b81      	ldr	r3, [pc, #516]	; (80029b4 <HAL_RCC_OscConfig+0x4d4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d106      	bne.n	80027d0 <HAL_RCC_OscConfig+0x2f0>
 80027c2:	4b7d      	ldr	r3, [pc, #500]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c6:	4a7c      	ldr	r2, [pc, #496]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6713      	str	r3, [r2, #112]	; 0x70
 80027ce:	e01c      	b.n	800280a <HAL_RCC_OscConfig+0x32a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d10c      	bne.n	80027f2 <HAL_RCC_OscConfig+0x312>
 80027d8:	4b77      	ldr	r3, [pc, #476]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a76      	ldr	r2, [pc, #472]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
 80027e4:	4b74      	ldr	r3, [pc, #464]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	4a73      	ldr	r2, [pc, #460]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6713      	str	r3, [r2, #112]	; 0x70
 80027f0:	e00b      	b.n	800280a <HAL_RCC_OscConfig+0x32a>
 80027f2:	4b71      	ldr	r3, [pc, #452]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	4a70      	ldr	r2, [pc, #448]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6713      	str	r3, [r2, #112]	; 0x70
 80027fe:	4b6e      	ldr	r3, [pc, #440]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	4a6d      	ldr	r2, [pc, #436]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002812:	f7fd ff1b 	bl	800064c <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7fd ff17 	bl	800064c <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	; 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0bc      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	4b61      	ldr	r3, [pc, #388]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0ee      	beq.n	800281a <HAL_RCC_OscConfig+0x33a>
 800283c:	e014      	b.n	8002868 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7fd ff05 	bl	800064c <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7fd ff01 	bl	800064c <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	; 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e0a6      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285c:	4b56      	ldr	r3, [pc, #344]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ee      	bne.n	8002846 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002868:	7dfb      	ldrb	r3, [r7, #23]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d105      	bne.n	800287a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286e:	4b52      	ldr	r3, [pc, #328]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4a51      	ldr	r2, [pc, #324]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 8002874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002878:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8092 	beq.w	80029a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002884:	4b4c      	ldr	r3, [pc, #304]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b08      	cmp	r3, #8
 800288e:	d05c      	beq.n	800294a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d141      	bne.n	800291c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002898:	4b48      	ldr	r3, [pc, #288]	; (80029bc <HAL_RCC_OscConfig+0x4dc>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7fd fed5 	bl	800064c <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a6:	f7fd fed1 	bl	800064c <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e078      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b8:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	019b      	lsls	r3, r3, #6
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	3b01      	subs	r3, #1
 80028de:	041b      	lsls	r3, r3, #16
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	061b      	lsls	r3, r3, #24
 80028e8:	4933      	ldr	r1, [pc, #204]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ee:	4b33      	ldr	r3, [pc, #204]	; (80029bc <HAL_RCC_OscConfig+0x4dc>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fd feaa 	bl	800064c <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fd fea6 	bl	800064c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e04d      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290e:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0x41c>
 800291a:	e045      	b.n	80029a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291c:	4b27      	ldr	r3, [pc, #156]	; (80029bc <HAL_RCC_OscConfig+0x4dc>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002922:	f7fd fe93 	bl	800064c <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292a:	f7fd fe8f 	bl	800064c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e036      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293c:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f0      	bne.n	800292a <HAL_RCC_OscConfig+0x44a>
 8002948:	e02e      	b.n	80029a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e029      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002956:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <HAL_RCC_OscConfig+0x4d8>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	429a      	cmp	r2, r3
 8002968:	d11c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d115      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800297e:	4013      	ands	r3, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002984:	4293      	cmp	r3, r2
 8002986:	d10d      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d106      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40007000 	.word	0x40007000
 80029b8:	40023800 	.word	0x40023800
 80029bc:	42470060 	.word	0x42470060

080029c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0cc      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4b68      	ldr	r3, [pc, #416]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d90c      	bls.n	80029fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b65      	ldr	r3, [pc, #404]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b63      	ldr	r3, [pc, #396]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0b8      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a14:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a58      	ldr	r2, [pc, #352]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a2c:	4b53      	ldr	r3, [pc, #332]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a52      	ldr	r2, [pc, #328]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b50      	ldr	r3, [pc, #320]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	494d      	ldr	r1, [pc, #308]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d044      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b47      	ldr	r3, [pc, #284]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d119      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e07f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d003      	beq.n	8002a7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	4b3f      	ldr	r3, [pc, #252]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e067      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9e:	4b37      	ldr	r3, [pc, #220]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f023 0203 	bic.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4934      	ldr	r1, [pc, #208]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab0:	f7fd fdcc 	bl	800064c <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab8:	f7fd fdc8 	bl	800064c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e04f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 020c 	and.w	r2, r3, #12
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d1eb      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d20c      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e032      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b14:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4916      	ldr	r1, [pc, #88]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b32:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	490e      	ldr	r1, [pc, #56]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b46:	f000 f821 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002b4a:	4601      	mov	r1, r0
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	5cd3      	ldrb	r3, [r2, r3]
 8002b5a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b5e:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_RCC_ClockConfig+0x1c8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fd2c 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023c00 	.word	0x40023c00
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	08008564 	.word	0x08008564
 8002b84:	20000008 	.word	0x20000008
 8002b88:	20000000 	.word	0x20000000

08002b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba2:	4b50      	ldr	r3, [pc, #320]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d007      	beq.n	8002bbe <HAL_RCC_GetSysClockFreq+0x32>
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d008      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x38>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f040 808d 	bne.w	8002cd2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb8:	4b4b      	ldr	r3, [pc, #300]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002bba:	60bb      	str	r3, [r7, #8]
       break;
 8002bbc:	e08c      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bbe:	4b4b      	ldr	r3, [pc, #300]	; (8002cec <HAL_RCC_GetSysClockFreq+0x160>)
 8002bc0:	60bb      	str	r3, [r7, #8]
      break;
 8002bc2:	e089      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc4:	4b47      	ldr	r3, [pc, #284]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bcc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bce:	4b45      	ldr	r3, [pc, #276]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d023      	beq.n	8002c22 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bda:	4b42      	ldr	r3, [pc, #264]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	099b      	lsrs	r3, r3, #6
 8002be0:	f04f 0400 	mov.w	r4, #0
 8002be4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	ea03 0501 	and.w	r5, r3, r1
 8002bf0:	ea04 0602 	and.w	r6, r4, r2
 8002bf4:	4a3d      	ldr	r2, [pc, #244]	; (8002cec <HAL_RCC_GetSysClockFreq+0x160>)
 8002bf6:	fb02 f106 	mul.w	r1, r2, r6
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	fb02 f205 	mul.w	r2, r2, r5
 8002c00:	440a      	add	r2, r1
 8002c02:	493a      	ldr	r1, [pc, #232]	; (8002cec <HAL_RCC_GetSysClockFreq+0x160>)
 8002c04:	fba5 0101 	umull	r0, r1, r5, r1
 8002c08:	1853      	adds	r3, r2, r1
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f04f 0400 	mov.w	r4, #0
 8002c12:	461a      	mov	r2, r3
 8002c14:	4623      	mov	r3, r4
 8002c16:	f7fd fb33 	bl	8000280 <__aeabi_uldivmod>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e049      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c22:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	099b      	lsrs	r3, r3, #6
 8002c28:	f04f 0400 	mov.w	r4, #0
 8002c2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	ea03 0501 	and.w	r5, r3, r1
 8002c38:	ea04 0602 	and.w	r6, r4, r2
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	4632      	mov	r2, r6
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	f04f 0400 	mov.w	r4, #0
 8002c48:	0154      	lsls	r4, r2, #5
 8002c4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c4e:	014b      	lsls	r3, r1, #5
 8002c50:	4619      	mov	r1, r3
 8002c52:	4622      	mov	r2, r4
 8002c54:	1b49      	subs	r1, r1, r5
 8002c56:	eb62 0206 	sbc.w	r2, r2, r6
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	f04f 0400 	mov.w	r4, #0
 8002c62:	0194      	lsls	r4, r2, #6
 8002c64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c68:	018b      	lsls	r3, r1, #6
 8002c6a:	1a5b      	subs	r3, r3, r1
 8002c6c:	eb64 0402 	sbc.w	r4, r4, r2
 8002c70:	f04f 0100 	mov.w	r1, #0
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	00e2      	lsls	r2, r4, #3
 8002c7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c7e:	00d9      	lsls	r1, r3, #3
 8002c80:	460b      	mov	r3, r1
 8002c82:	4614      	mov	r4, r2
 8002c84:	195b      	adds	r3, r3, r5
 8002c86:	eb44 0406 	adc.w	r4, r4, r6
 8002c8a:	f04f 0100 	mov.w	r1, #0
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	02a2      	lsls	r2, r4, #10
 8002c94:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c98:	0299      	lsls	r1, r3, #10
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4614      	mov	r4, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f04f 0400 	mov.w	r4, #0
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4623      	mov	r3, r4
 8002cac:	f7fd fae8 	bl	8000280 <__aeabi_uldivmod>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	460c      	mov	r4, r1
 8002cb4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cce:	60bb      	str	r3, [r7, #8]
      break;
 8002cd0:	e002      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002cd4:	60bb      	str	r3, [r7, #8]
      break;
 8002cd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	00f42400 	.word	0x00f42400
 8002cec:	017d7840 	.word	0x017d7840

08002cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000008 	.word	0x20000008

08002d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d0c:	f7ff fff0 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d10:	4601      	mov	r1, r0
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0a9b      	lsrs	r3, r3, #10
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4a03      	ldr	r2, [pc, #12]	; (8002d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d1e:	5cd3      	ldrb	r3, [r2, r3]
 8002d20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	08008574 	.word	0x08008574

08002d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d34:	f7ff ffdc 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d38:	4601      	mov	r1, r0
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0b5b      	lsrs	r3, r3, #13
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4a03      	ldr	r2, [pc, #12]	; (8002d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d46:	5cd3      	ldrb	r3, [r2, r3]
 8002d48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40023800 	.word	0x40023800
 8002d54:	08008574 	.word	0x08008574

08002d58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e056      	b.n	8002e18 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d106      	bne.n	8002d8a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f004 fbad 	bl	80074e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	ea42 0103 	orr.w	r1, r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	0c1b      	lsrs	r3, r3, #16
 8002de8:	f003 0104 	and.w	r1, r3, #4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69da      	ldr	r2, [r3, #28]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_SPI_Transmit+0x22>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e11e      	b.n	8003080 <HAL_SPI_Transmit+0x260>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e4a:	f7fd fbff 	bl	800064c <HAL_GetTick>
 8002e4e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d002      	beq.n	8002e66 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e60:	2302      	movs	r3, #2
 8002e62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e64:	e103      	b.n	800306e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <HAL_SPI_Transmit+0x52>
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e76:	e0fa      	b.n	800306e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	88fa      	ldrh	r2, [r7, #6]
 8002e90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	88fa      	ldrh	r2, [r7, #6]
 8002e96:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ebe:	d107      	bne.n	8002ed0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ece:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eda:	2b40      	cmp	r3, #64	; 0x40
 8002edc:	d007      	beq.n	8002eee <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ef6:	d14b      	bne.n	8002f90 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_SPI_Transmit+0xe6>
 8002f00:	8afb      	ldrh	r3, [r7, #22]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d13e      	bne.n	8002f84 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	881a      	ldrh	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	1c9a      	adds	r2, r3, #2
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f2a:	e02b      	b.n	8002f84 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d112      	bne.n	8002f60 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	881a      	ldrh	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	1c9a      	adds	r2, r3, #2
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f5e:	e011      	b.n	8002f84 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f60:	f7fd fb74 	bl	800064c <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d803      	bhi.n	8002f78 <HAL_SPI_Transmit+0x158>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f76:	d102      	bne.n	8002f7e <HAL_SPI_Transmit+0x15e>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d102      	bne.n	8002f84 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f82:	e074      	b.n	800306e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1ce      	bne.n	8002f2c <HAL_SPI_Transmit+0x10c>
 8002f8e:	e04c      	b.n	800302a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_SPI_Transmit+0x17e>
 8002f98:	8afb      	ldrh	r3, [r7, #22]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d140      	bne.n	8003020 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	330c      	adds	r3, #12
 8002fa8:	7812      	ldrb	r2, [r2, #0]
 8002faa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002fc4:	e02c      	b.n	8003020 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d113      	bne.n	8002ffc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	330c      	adds	r3, #12
 8002fde:	7812      	ldrb	r2, [r2, #0]
 8002fe0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ffa:	e011      	b.n	8003020 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ffc:	f7fd fb26 	bl	800064c <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d803      	bhi.n	8003014 <HAL_SPI_Transmit+0x1f4>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003012:	d102      	bne.n	800301a <HAL_SPI_Transmit+0x1fa>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800301e:	e026      	b.n	800306e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1cd      	bne.n	8002fc6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	6839      	ldr	r1, [r7, #0]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fcc4 	bl	80039bc <SPI_EndRxTxTransaction>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10a      	bne.n	800305e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003048:	2300      	movs	r3, #0
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	77fb      	strb	r3, [r7, #31]
 800306a:	e000      	b.n	800306e <HAL_SPI_Transmit+0x24e>
  }

error:
 800306c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800307e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3720      	adds	r7, #32
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af02      	add	r7, sp, #8
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030a4:	d112      	bne.n	80030cc <HAL_SPI_Receive+0x44>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10e      	bne.n	80030cc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2204      	movs	r2, #4
 80030b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f8e9 	bl	800329a <HAL_SPI_TransmitReceive>
 80030c8:	4603      	mov	r3, r0
 80030ca:	e0e2      	b.n	8003292 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_SPI_Receive+0x52>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e0db      	b.n	8003292 <HAL_SPI_Receive+0x20a>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030e2:	f7fd fab3 	bl	800064c <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d002      	beq.n	80030fa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
 80030f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030f8:	e0c2      	b.n	8003280 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_SPI_Receive+0x7e>
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d102      	bne.n	800310c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	75fb      	strb	r3, [r7, #23]
    goto error;
 800310a:	e0b9      	b.n	8003280 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2204      	movs	r2, #4
 8003110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	88fa      	ldrh	r2, [r7, #6]
 8003124:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	88fa      	ldrh	r2, [r7, #6]
 800312a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003152:	d107      	bne.n	8003164 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003162:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b40      	cmp	r3, #64	; 0x40
 8003170:	d007      	beq.n	8003182 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003180:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d162      	bne.n	8003250 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800318a:	e02e      	b.n	80031ea <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b01      	cmp	r3, #1
 8003198:	d115      	bne.n	80031c6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f103 020c 	add.w	r2, r3, #12
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	7812      	ldrb	r2, [r2, #0]
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031c4:	e011      	b.n	80031ea <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031c6:	f7fd fa41 	bl	800064c <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d803      	bhi.n	80031de <HAL_SPI_Receive+0x156>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031dc:	d102      	bne.n	80031e4 <HAL_SPI_Receive+0x15c>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031e8:	e04a      	b.n	8003280 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1cb      	bne.n	800318c <HAL_SPI_Receive+0x104>
 80031f4:	e031      	b.n	800325a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b01      	cmp	r3, #1
 8003202:	d113      	bne.n	800322c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	b292      	uxth	r2, r2
 8003210:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	1c9a      	adds	r2, r3, #2
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	87da      	strh	r2, [r3, #62]	; 0x3e
 800322a:	e011      	b.n	8003250 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800322c:	f7fd fa0e 	bl	800064c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d803      	bhi.n	8003244 <HAL_SPI_Receive+0x1bc>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003242:	d102      	bne.n	800324a <HAL_SPI_Receive+0x1c2>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800324e:	e017      	b.n	8003280 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1cd      	bne.n	80031f6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	6839      	ldr	r1, [r7, #0]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 fb46 	bl	80038f0 <SPI_EndRxTransaction>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	75fb      	strb	r3, [r7, #23]
 800327c:	e000      	b.n	8003280 <HAL_SPI_Receive+0x1f8>
  }

error :
 800327e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003290:	7dfb      	ldrb	r3, [r7, #23]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b08c      	sub	sp, #48	; 0x30
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032a8:	2301      	movs	r3, #1
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_SPI_TransmitReceive+0x26>
 80032bc:	2302      	movs	r3, #2
 80032be:	e18a      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x33c>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032c8:	f7fd f9c0 	bl	800064c <HAL_GetTick>
 80032cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80032de:	887b      	ldrh	r3, [r7, #2]
 80032e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d00f      	beq.n	800330a <HAL_SPI_TransmitReceive+0x70>
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032f0:	d107      	bne.n	8003302 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d103      	bne.n	8003302 <HAL_SPI_TransmitReceive+0x68>
 80032fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d003      	beq.n	800330a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003302:	2302      	movs	r3, #2
 8003304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003308:	e15b      	b.n	80035c2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_SPI_TransmitReceive+0x82>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HAL_SPI_TransmitReceive+0x82>
 8003316:	887b      	ldrh	r3, [r7, #2]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d103      	bne.n	8003324 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003322:	e14e      	b.n	80035c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b04      	cmp	r3, #4
 800332e:	d003      	beq.n	8003338 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2205      	movs	r2, #5
 8003334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	887a      	ldrh	r2, [r7, #2]
 800334e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	887a      	ldrh	r2, [r7, #2]
 800335a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	887a      	ldrh	r2, [r7, #2]
 8003360:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	d007      	beq.n	800338c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800338a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003394:	d178      	bne.n	8003488 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_SPI_TransmitReceive+0x10a>
 800339e:	8b7b      	ldrh	r3, [r7, #26]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d166      	bne.n	8003472 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	881a      	ldrh	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	1c9a      	adds	r2, r3, #2
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033c8:	e053      	b.n	8003472 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d11b      	bne.n	8003410 <HAL_SPI_TransmitReceive+0x176>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d016      	beq.n	8003410 <HAL_SPI_TransmitReceive+0x176>
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d113      	bne.n	8003410 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	881a      	ldrh	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	1c9a      	adds	r2, r3, #2
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b01      	cmp	r3, #1
 800341c:	d119      	bne.n	8003452 <HAL_SPI_TransmitReceive+0x1b8>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d014      	beq.n	8003452 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	b292      	uxth	r2, r2
 8003434:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	1c9a      	adds	r2, r3, #2
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800344e:	2301      	movs	r3, #1
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003452:	f7fd f8fb 	bl	800064c <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800345e:	429a      	cmp	r2, r3
 8003460:	d807      	bhi.n	8003472 <HAL_SPI_TransmitReceive+0x1d8>
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003468:	d003      	beq.n	8003472 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003470:	e0a7      	b.n	80035c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1a6      	bne.n	80033ca <HAL_SPI_TransmitReceive+0x130>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1a1      	bne.n	80033ca <HAL_SPI_TransmitReceive+0x130>
 8003486:	e07c      	b.n	8003582 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_SPI_TransmitReceive+0x1fc>
 8003490:	8b7b      	ldrh	r3, [r7, #26]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d16b      	bne.n	800356e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	330c      	adds	r3, #12
 80034a0:	7812      	ldrb	r2, [r2, #0]
 80034a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034bc:	e057      	b.n	800356e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d11c      	bne.n	8003506 <HAL_SPI_TransmitReceive+0x26c>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d017      	beq.n	8003506 <HAL_SPI_TransmitReceive+0x26c>
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d114      	bne.n	8003506 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	330c      	adds	r3, #12
 80034e6:	7812      	ldrb	r2, [r2, #0]
 80034e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b01      	cmp	r3, #1
 8003512:	d119      	bne.n	8003548 <HAL_SPI_TransmitReceive+0x2ae>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d014      	beq.n	8003548 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003544:	2301      	movs	r3, #1
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003548:	f7fd f880 	bl	800064c <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003554:	429a      	cmp	r2, r3
 8003556:	d803      	bhi.n	8003560 <HAL_SPI_TransmitReceive+0x2c6>
 8003558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800355e:	d102      	bne.n	8003566 <HAL_SPI_TransmitReceive+0x2cc>
 8003560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800356c:	e029      	b.n	80035c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1a2      	bne.n	80034be <HAL_SPI_TransmitReceive+0x224>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d19d      	bne.n	80034be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003584:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fa18 	bl	80039bc <SPI_EndRxTxTransaction>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800359e:	e010      	b.n	80035c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10b      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	e000      	b.n	80035c2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80035c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3730      	adds	r7, #48	; 0x30
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	099b      	lsrs	r3, r3, #6
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10f      	bne.n	8003624 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	099b      	lsrs	r3, r3, #6
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4798      	blx	r3
    return;
 8003622:	e0d8      	b.n	80037d6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	085b      	lsrs	r3, r3, #1
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_SPI_IRQHandler+0x66>
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	09db      	lsrs	r3, r3, #7
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d004      	beq.n	8003646 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
    return;
 8003644:	e0c7      	b.n	80037d6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10c      	bne.n	800366c <HAL_SPI_IRQHandler+0x8c>
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	099b      	lsrs	r3, r3, #6
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	0a1b      	lsrs	r3, r3, #8
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80b5 	beq.w	80037d6 <HAL_SPI_IRQHandler+0x1f6>
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80ae 	beq.w	80037d6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	099b      	lsrs	r3, r3, #6
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d023      	beq.n	80036ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b03      	cmp	r3, #3
 8003690:	d011      	beq.n	80036b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	f043 0204 	orr.w	r2, r3, #4
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	e00b      	b.n	80036ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	693b      	ldr	r3, [r7, #16]
        return;
 80036cc:	e083      	b.n	80037d6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d014      	beq.n	8003704 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	0a1b      	lsrs	r3, r3, #8
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00c      	beq.n	800372a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	f043 0208 	orr.w	r2, r3, #8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800371c:	2300      	movs	r3, #0
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372e:	2b00      	cmp	r3, #0
 8003730:	d050      	beq.n	80037d4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003740:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d104      	bne.n	800375e <HAL_SPI_IRQHandler+0x17e>
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d034      	beq.n	80037c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0203 	bic.w	r2, r2, #3
 800376c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d011      	beq.n	800379a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377a:	4a18      	ldr	r2, [pc, #96]	; (80037dc <HAL_SPI_IRQHandler+0x1fc>)
 800377c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003782:	4618      	mov	r0, r3
 8003784:	f7fd fbff 	bl	8000f86 <HAL_DMA_Abort_IT>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a6:	4a0d      	ldr	r2, [pc, #52]	; (80037dc <HAL_SPI_IRQHandler+0x1fc>)
 80037a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fd fbe9 	bl	8000f86 <HAL_DMA_Abort_IT>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80037c6:	e003      	b.n	80037d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f809 	bl	80037e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80037ce:	e000      	b.n	80037d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80037d0:	bf00      	nop
    return;
 80037d2:	bf00      	nop
 80037d4:	bf00      	nop
  }
}
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	080037f5 	.word	0x080037f5

080037e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003800:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f7ff ffe6 	bl	80037e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800382c:	e04c      	b.n	80038c8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003834:	d048      	beq.n	80038c8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003836:	f7fc ff09 	bl	800064c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d902      	bls.n	800384c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d13d      	bne.n	80038c8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800385a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003864:	d111      	bne.n	800388a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800386e:	d004      	beq.n	800387a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003878:	d107      	bne.n	800388a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003888:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003892:	d10f      	bne.n	80038b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e00f      	b.n	80038e8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4013      	ands	r3, r2
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d1a3      	bne.n	800382e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003904:	d111      	bne.n	800392a <SPI_EndRxTransaction+0x3a>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800390e:	d004      	beq.n	800391a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003918:	d107      	bne.n	800392a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003928:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003932:	d12a      	bne.n	800398a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393c:	d012      	beq.n	8003964 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2200      	movs	r2, #0
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f7ff ff67 	bl	800381c <SPI_WaitFlagStateUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d02d      	beq.n	80039b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003958:	f043 0220 	orr.w	r2, r3, #32
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e026      	b.n	80039b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2200      	movs	r2, #0
 800396c:	2101      	movs	r1, #1
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f7ff ff54 	bl	800381c <SPI_WaitFlagStateUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01a      	beq.n	80039b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	f043 0220 	orr.w	r2, r3, #32
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e013      	b.n	80039b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2200      	movs	r2, #0
 8003992:	2101      	movs	r1, #1
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f7ff ff41 	bl	800381c <SPI_WaitFlagStateUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	f043 0220 	orr.w	r2, r3, #32
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e000      	b.n	80039b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80039c8:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <SPI_EndRxTxTransaction+0x7c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1b      	ldr	r2, [pc, #108]	; (8003a3c <SPI_EndRxTxTransaction+0x80>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	0d5b      	lsrs	r3, r3, #21
 80039d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039d8:	fb02 f303 	mul.w	r3, r2, r3
 80039dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039e6:	d112      	bne.n	8003a0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2200      	movs	r2, #0
 80039f0:	2180      	movs	r1, #128	; 0x80
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f7ff ff12 	bl	800381c <SPI_WaitFlagStateUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e00f      	b.n	8003a2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a24:	2b80      	cmp	r3, #128	; 0x80
 8003a26:	d0f2      	beq.n	8003a0e <SPI_EndRxTxTransaction+0x52>
 8003a28:	e000      	b.n	8003a2c <SPI_EndRxTxTransaction+0x70>
        break;
 8003a2a:	bf00      	nop
  }

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000008 	.word	0x20000008
 8003a3c:	165e9f81 	.word	0x165e9f81

08003a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e01d      	b.n	8003a8e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f003 fd8c 	bl	8007584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	f000 fd2e 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	6839      	ldr	r1, [r7, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f001 f92c 	bl	8004d08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <HAL_TIM_OC_Start+0x74>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d004      	beq.n	8003ac4 <HAL_TIM_OC_Start+0x2c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <HAL_TIM_OC_Start+0x78>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d101      	bne.n	8003ac8 <HAL_TIM_OC_Start+0x30>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <HAL_TIM_OC_Start+0x32>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d007      	beq.n	8003ade <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003adc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2b06      	cmp	r3, #6
 8003aee:	d007      	beq.n	8003b00 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	40010400 	.word	0x40010400

08003b14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e01d      	b.n	8003b62 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f815 	bl	8003b6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	4619      	mov	r1, r3
 8003b52:	4610      	mov	r0, r2
 8003b54:	f000 fcc4 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	6839      	ldr	r1, [r7, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 f8b8 	bl	8004d08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a15      	ldr	r2, [pc, #84]	; (8003bf4 <HAL_TIM_PWM_Start+0x74>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <HAL_TIM_PWM_Start+0x2c>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <HAL_TIM_PWM_Start+0x78>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d101      	bne.n	8003bb0 <HAL_TIM_PWM_Start+0x30>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <HAL_TIM_PWM_Start+0x32>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d007      	beq.n	8003bc6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b06      	cmp	r3, #6
 8003bd6:	d007      	beq.n	8003be8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40010000 	.word	0x40010000
 8003bf8:	40010400 	.word	0x40010400

08003bfc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e01d      	b.n	8003c4a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f815 	bl	8003c52 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	f000 fc50 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b086      	sub	sp, #24
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e083      	b.n	8003d82 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f003 fd1c 	bl	80076cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003caa:	f023 0307 	bic.w	r3, r3, #7
 8003cae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 fc10 	bl	80044e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce8:	f023 0303 	bic.w	r3, r3, #3
 8003cec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d06:	f023 030c 	bic.w	r3, r3, #12
 8003d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	4313      	orrs	r3, r2
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	011a      	lsls	r2, r3, #4
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	031b      	lsls	r3, r3, #12
 8003d36:	4313      	orrs	r3, r2
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d44:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003d4c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_TIM_Encoder_Start_IT+0x16>
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d010      	beq.n	8003dc0 <HAL_TIM_Encoder_Start_IT+0x36>
 8003d9e:	e01f      	b.n	8003de0 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2201      	movs	r2, #1
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 ffad 	bl	8004d08 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0202 	orr.w	r2, r2, #2
 8003dbc:	60da      	str	r2, [r3, #12]
      break;
 8003dbe:	e02e      	b.n	8003e1e <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	2104      	movs	r1, #4
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 ff9d 	bl	8004d08 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0204 	orr.w	r2, r2, #4
 8003ddc:	60da      	str	r2, [r3, #12]
      break;
 8003dde:	e01e      	b.n	8003e1e <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2201      	movs	r2, #1
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 ff8d 	bl	8004d08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2201      	movs	r2, #1
 8003df4:	2104      	movs	r1, #4
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 ff86 	bl	8004d08 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0202 	orr.w	r2, r2, #2
 8003e0a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0204 	orr.w	r2, r2, #4
 8003e1a:	60da      	str	r2, [r3, #12]
      break;
 8003e1c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0201 	orr.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0202 	mvn.w	r2, #2
 8003e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fb11 	bl	80044a2 <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fb03 	bl	800448e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fb14 	bl	80044b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d122      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d11b      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0204 	mvn.w	r2, #4
 8003eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fae7 	bl	80044a2 <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fad9 	bl	800448e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 faea 	bl	80044b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d122      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d11b      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0208 	mvn.w	r2, #8
 8003f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2204      	movs	r2, #4
 8003f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fabd 	bl	80044a2 <HAL_TIM_IC_CaptureCallback>
 8003f28:	e005      	b.n	8003f36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 faaf 	bl	800448e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fac0 	bl	80044b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b10      	cmp	r3, #16
 8003f48:	d122      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d11b      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0210 	mvn.w	r2, #16
 8003f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2208      	movs	r2, #8
 8003f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fa93 	bl	80044a2 <HAL_TIM_IC_CaptureCallback>
 8003f7c:	e005      	b.n	8003f8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fa85 	bl	800448e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fa96 	bl	80044b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d10e      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d107      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0201 	mvn.w	r2, #1
 8003fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fa5f 	bl	800447a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc6:	2b80      	cmp	r3, #128	; 0x80
 8003fc8:	d10e      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd4:	2b80      	cmp	r3, #128	; 0x80
 8003fd6:	d107      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 ff8e 	bl	8004f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff2:	2b40      	cmp	r3, #64	; 0x40
 8003ff4:	d10e      	bne.n	8004014 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004000:	2b40      	cmp	r3, #64	; 0x40
 8004002:	d107      	bne.n	8004014 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800400c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fa5b 	bl	80044ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b20      	cmp	r3, #32
 8004020:	d10e      	bne.n	8004040 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b20      	cmp	r3, #32
 800402e:	d107      	bne.n	8004040 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0220 	mvn.w	r2, #32
 8004038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 ff58 	bl	8004ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_TIM_IC_ConfigChannel+0x1a>
 800405e:	2302      	movs	r3, #2
 8004060:	e08a      	b.n	8004178 <HAL_TIM_IC_ConfigChannel+0x130>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2202      	movs	r2, #2
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d11b      	bne.n	80040b0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	6819      	ldr	r1, [r3, #0]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f000 fc7a 	bl	8004980 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 020c 	bic.w	r2, r2, #12
 800409a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6999      	ldr	r1, [r3, #24]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	619a      	str	r2, [r3, #24]
 80040ae:	e05a      	b.n	8004166 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d11c      	bne.n	80040f0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	6819      	ldr	r1, [r3, #0]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f000 fcfe 	bl	8004ac6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699a      	ldr	r2, [r3, #24]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6999      	ldr	r1, [r3, #24]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	021a      	lsls	r2, r3, #8
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	619a      	str	r2, [r3, #24]
 80040ee:	e03a      	b.n	8004166 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d11b      	bne.n	800412e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6819      	ldr	r1, [r3, #0]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f000 fd4b 	bl	8004ba0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69da      	ldr	r2, [r3, #28]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 020c 	bic.w	r2, r2, #12
 8004118:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69d9      	ldr	r1, [r3, #28]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	61da      	str	r2, [r3, #28]
 800412c:	e01b      	b.n	8004166 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6819      	ldr	r1, [r3, #0]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f000 fd6b 	bl	8004c18 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004150:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69d9      	ldr	r1, [r3, #28]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	021a      	lsls	r2, r3, #8
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004196:	2302      	movs	r3, #2
 8004198:	e0b4      	b.n	8004304 <HAL_TIM_PWM_ConfigChannel+0x184>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2202      	movs	r2, #2
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b0c      	cmp	r3, #12
 80041ae:	f200 809f 	bhi.w	80042f0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80041b2:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	080041ed 	.word	0x080041ed
 80041bc:	080042f1 	.word	0x080042f1
 80041c0:	080042f1 	.word	0x080042f1
 80041c4:	080042f1 	.word	0x080042f1
 80041c8:	0800422d 	.word	0x0800422d
 80041cc:	080042f1 	.word	0x080042f1
 80041d0:	080042f1 	.word	0x080042f1
 80041d4:	080042f1 	.word	0x080042f1
 80041d8:	0800426f 	.word	0x0800426f
 80041dc:	080042f1 	.word	0x080042f1
 80041e0:	080042f1 	.word	0x080042f1
 80041e4:	080042f1 	.word	0x080042f1
 80041e8:	080042af 	.word	0x080042af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fa14 	bl	8004620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0208 	orr.w	r2, r2, #8
 8004206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0204 	bic.w	r2, r2, #4
 8004216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6999      	ldr	r1, [r3, #24]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	619a      	str	r2, [r3, #24]
      break;
 800422a:	e062      	b.n	80042f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fa64 	bl	8004700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699a      	ldr	r2, [r3, #24]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6999      	ldr	r1, [r3, #24]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	021a      	lsls	r2, r3, #8
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	619a      	str	r2, [r3, #24]
      break;
 800426c:	e041      	b.n	80042f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fab9 	bl	80047ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0208 	orr.w	r2, r2, #8
 8004288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0204 	bic.w	r2, r2, #4
 8004298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69d9      	ldr	r1, [r3, #28]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	61da      	str	r2, [r3, #28]
      break;
 80042ac:	e021      	b.n	80042f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fb0d 	bl	80048d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69da      	ldr	r2, [r3, #28]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69d9      	ldr	r1, [r3, #28]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	021a      	lsls	r2, r3, #8
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	61da      	str	r2, [r3, #28]
      break;
 80042ee:	e000      	b.n	80042f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80042f0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_TIM_ConfigClockSource+0x18>
 8004320:	2302      	movs	r3, #2
 8004322:	e0a6      	b.n	8004472 <HAL_TIM_ConfigClockSource+0x166>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004342:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800434a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	d067      	beq.n	800442c <HAL_TIM_ConfigClockSource+0x120>
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	d80b      	bhi.n	8004378 <HAL_TIM_ConfigClockSource+0x6c>
 8004360:	2b10      	cmp	r3, #16
 8004362:	d073      	beq.n	800444c <HAL_TIM_ConfigClockSource+0x140>
 8004364:	2b10      	cmp	r3, #16
 8004366:	d802      	bhi.n	800436e <HAL_TIM_ConfigClockSource+0x62>
 8004368:	2b00      	cmp	r3, #0
 800436a:	d06f      	beq.n	800444c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800436c:	e078      	b.n	8004460 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800436e:	2b20      	cmp	r3, #32
 8004370:	d06c      	beq.n	800444c <HAL_TIM_ConfigClockSource+0x140>
 8004372:	2b30      	cmp	r3, #48	; 0x30
 8004374:	d06a      	beq.n	800444c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004376:	e073      	b.n	8004460 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004378:	2b70      	cmp	r3, #112	; 0x70
 800437a:	d00d      	beq.n	8004398 <HAL_TIM_ConfigClockSource+0x8c>
 800437c:	2b70      	cmp	r3, #112	; 0x70
 800437e:	d804      	bhi.n	800438a <HAL_TIM_ConfigClockSource+0x7e>
 8004380:	2b50      	cmp	r3, #80	; 0x50
 8004382:	d033      	beq.n	80043ec <HAL_TIM_ConfigClockSource+0xe0>
 8004384:	2b60      	cmp	r3, #96	; 0x60
 8004386:	d041      	beq.n	800440c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004388:	e06a      	b.n	8004460 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800438a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438e:	d066      	beq.n	800445e <HAL_TIM_ConfigClockSource+0x152>
 8004390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004394:	d017      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004396:	e063      	b.n	8004460 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6899      	ldr	r1, [r3, #8]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f000 fc8e 	bl	8004cc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	609a      	str	r2, [r3, #8]
      break;
 80043c4:	e04c      	b.n	8004460 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6899      	ldr	r1, [r3, #8]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f000 fc77 	bl	8004cc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043e8:	609a      	str	r2, [r3, #8]
      break;
 80043ea:	e039      	b.n	8004460 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	6859      	ldr	r1, [r3, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	461a      	mov	r2, r3
 80043fa:	f000 fb35 	bl	8004a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2150      	movs	r1, #80	; 0x50
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fc44 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 800440a:	e029      	b.n	8004460 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	461a      	mov	r2, r3
 800441a:	f000 fb91 	bl	8004b40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2160      	movs	r1, #96	; 0x60
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fc34 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 800442a:	e019      	b.n	8004460 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	461a      	mov	r2, r3
 800443a:	f000 fb15 	bl	8004a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2140      	movs	r1, #64	; 0x40
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fc24 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 800444a:	e009      	b.n	8004460 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4619      	mov	r1, r3
 8004456:	4610      	mov	r0, r2
 8004458:	f000 fc1b 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 800445c:	e000      	b.n	8004460 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800445e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a40      	ldr	r2, [pc, #256]	; (80045f4 <TIM_Base_SetConfig+0x114>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d013      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fe:	d00f      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a3d      	ldr	r2, [pc, #244]	; (80045f8 <TIM_Base_SetConfig+0x118>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00b      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a3c      	ldr	r2, [pc, #240]	; (80045fc <TIM_Base_SetConfig+0x11c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d007      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a3b      	ldr	r2, [pc, #236]	; (8004600 <TIM_Base_SetConfig+0x120>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d003      	beq.n	8004520 <TIM_Base_SetConfig+0x40>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a3a      	ldr	r2, [pc, #232]	; (8004604 <TIM_Base_SetConfig+0x124>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d108      	bne.n	8004532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a2f      	ldr	r2, [pc, #188]	; (80045f4 <TIM_Base_SetConfig+0x114>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d02b      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004540:	d027      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a2c      	ldr	r2, [pc, #176]	; (80045f8 <TIM_Base_SetConfig+0x118>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d023      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2b      	ldr	r2, [pc, #172]	; (80045fc <TIM_Base_SetConfig+0x11c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d01f      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a2a      	ldr	r2, [pc, #168]	; (8004600 <TIM_Base_SetConfig+0x120>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d01b      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a29      	ldr	r2, [pc, #164]	; (8004604 <TIM_Base_SetConfig+0x124>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d017      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a28      	ldr	r2, [pc, #160]	; (8004608 <TIM_Base_SetConfig+0x128>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d013      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a27      	ldr	r2, [pc, #156]	; (800460c <TIM_Base_SetConfig+0x12c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00f      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a26      	ldr	r2, [pc, #152]	; (8004610 <TIM_Base_SetConfig+0x130>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00b      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a25      	ldr	r2, [pc, #148]	; (8004614 <TIM_Base_SetConfig+0x134>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d007      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a24      	ldr	r2, [pc, #144]	; (8004618 <TIM_Base_SetConfig+0x138>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d003      	beq.n	8004592 <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a23      	ldr	r2, [pc, #140]	; (800461c <TIM_Base_SetConfig+0x13c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d108      	bne.n	80045a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a0a      	ldr	r2, [pc, #40]	; (80045f4 <TIM_Base_SetConfig+0x114>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d003      	beq.n	80045d8 <TIM_Base_SetConfig+0xf8>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <TIM_Base_SetConfig+0x124>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d103      	bne.n	80045e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	615a      	str	r2, [r3, #20]
}
 80045e6:	bf00      	nop
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40010000 	.word	0x40010000
 80045f8:	40000400 	.word	0x40000400
 80045fc:	40000800 	.word	0x40000800
 8004600:	40000c00 	.word	0x40000c00
 8004604:	40010400 	.word	0x40010400
 8004608:	40014000 	.word	0x40014000
 800460c:	40014400 	.word	0x40014400
 8004610:	40014800 	.word	0x40014800
 8004614:	40001800 	.word	0x40001800
 8004618:	40001c00 	.word	0x40001c00
 800461c:	40002000 	.word	0x40002000

08004620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f023 0201 	bic.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f023 0302 	bic.w	r3, r3, #2
 8004668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a20      	ldr	r2, [pc, #128]	; (80046f8 <TIM_OC1_SetConfig+0xd8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <TIM_OC1_SetConfig+0x64>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a1f      	ldr	r2, [pc, #124]	; (80046fc <TIM_OC1_SetConfig+0xdc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d10c      	bne.n	800469e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f023 0308 	bic.w	r3, r3, #8
 800468a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f023 0304 	bic.w	r3, r3, #4
 800469c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <TIM_OC1_SetConfig+0xd8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d003      	beq.n	80046ae <TIM_OC1_SetConfig+0x8e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a14      	ldr	r2, [pc, #80]	; (80046fc <TIM_OC1_SetConfig+0xdc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d111      	bne.n	80046d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	621a      	str	r2, [r3, #32]
}
 80046ec:	bf00      	nop
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	40010000 	.word	0x40010000
 80046fc:	40010400 	.word	0x40010400

08004700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f023 0210 	bic.w	r2, r3, #16
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f023 0320 	bic.w	r3, r3, #32
 800474a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a22      	ldr	r2, [pc, #136]	; (80047e4 <TIM_OC2_SetConfig+0xe4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d003      	beq.n	8004768 <TIM_OC2_SetConfig+0x68>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a21      	ldr	r2, [pc, #132]	; (80047e8 <TIM_OC2_SetConfig+0xe8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d10d      	bne.n	8004784 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800476e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004782:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a17      	ldr	r2, [pc, #92]	; (80047e4 <TIM_OC2_SetConfig+0xe4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d003      	beq.n	8004794 <TIM_OC2_SetConfig+0x94>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a16      	ldr	r2, [pc, #88]	; (80047e8 <TIM_OC2_SetConfig+0xe8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d113      	bne.n	80047bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800479a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	621a      	str	r2, [r3, #32]
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40010000 	.word	0x40010000
 80047e8:	40010400 	.word	0x40010400

080047ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0303 	bic.w	r3, r3, #3
 8004822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a21      	ldr	r2, [pc, #132]	; (80048cc <TIM_OC3_SetConfig+0xe0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d003      	beq.n	8004852 <TIM_OC3_SetConfig+0x66>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a20      	ldr	r2, [pc, #128]	; (80048d0 <TIM_OC3_SetConfig+0xe4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d10d      	bne.n	800486e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800486c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a16      	ldr	r2, [pc, #88]	; (80048cc <TIM_OC3_SetConfig+0xe0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d003      	beq.n	800487e <TIM_OC3_SetConfig+0x92>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a15      	ldr	r2, [pc, #84]	; (80048d0 <TIM_OC3_SetConfig+0xe4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d113      	bne.n	80048a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800488c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	621a      	str	r2, [r3, #32]
}
 80048c0:	bf00      	nop
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	40010000 	.word	0x40010000
 80048d0:	40010400 	.word	0x40010400

080048d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800491e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	031b      	lsls	r3, r3, #12
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a12      	ldr	r2, [pc, #72]	; (8004978 <TIM_OC4_SetConfig+0xa4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d003      	beq.n	800493c <TIM_OC4_SetConfig+0x68>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a11      	ldr	r2, [pc, #68]	; (800497c <TIM_OC4_SetConfig+0xa8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d109      	bne.n	8004950 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004942:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	019b      	lsls	r3, r3, #6
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	621a      	str	r2, [r3, #32]
}
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40010000 	.word	0x40010000
 800497c:	40010400 	.word	0x40010400

08004980 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	f023 0201 	bic.w	r2, r3, #1
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4a28      	ldr	r2, [pc, #160]	; (8004a4c <TIM_TI1_SetConfig+0xcc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d01b      	beq.n	80049e6 <TIM_TI1_SetConfig+0x66>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b4:	d017      	beq.n	80049e6 <TIM_TI1_SetConfig+0x66>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4a25      	ldr	r2, [pc, #148]	; (8004a50 <TIM_TI1_SetConfig+0xd0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <TIM_TI1_SetConfig+0x66>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4a24      	ldr	r2, [pc, #144]	; (8004a54 <TIM_TI1_SetConfig+0xd4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00f      	beq.n	80049e6 <TIM_TI1_SetConfig+0x66>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4a23      	ldr	r2, [pc, #140]	; (8004a58 <TIM_TI1_SetConfig+0xd8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00b      	beq.n	80049e6 <TIM_TI1_SetConfig+0x66>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4a22      	ldr	r2, [pc, #136]	; (8004a5c <TIM_TI1_SetConfig+0xdc>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d007      	beq.n	80049e6 <TIM_TI1_SetConfig+0x66>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4a21      	ldr	r2, [pc, #132]	; (8004a60 <TIM_TI1_SetConfig+0xe0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d003      	beq.n	80049e6 <TIM_TI1_SetConfig+0x66>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4a20      	ldr	r2, [pc, #128]	; (8004a64 <TIM_TI1_SetConfig+0xe4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d101      	bne.n	80049ea <TIM_TI1_SetConfig+0x6a>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <TIM_TI1_SetConfig+0x6c>
 80049ea:	2300      	movs	r3, #0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f023 0303 	bic.w	r3, r3, #3
 80049f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	e003      	b.n	8004a0a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f023 030a 	bic.w	r3, r3, #10
 8004a24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f003 030a 	and.w	r3, r3, #10
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	621a      	str	r2, [r3, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40010000 	.word	0x40010000
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40000800 	.word	0x40000800
 8004a58:	40000c00 	.word	0x40000c00
 8004a5c:	40010400 	.word	0x40010400
 8004a60:	40014000 	.word	0x40014000
 8004a64:	40001800 	.word	0x40001800

08004a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	f023 0201 	bic.w	r2, r3, #1
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f023 030a 	bic.w	r3, r3, #10
 8004aa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b087      	sub	sp, #28
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
 8004ad2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f023 0210 	bic.w	r2, r3, #16
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	031b      	lsls	r3, r3, #12
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b18:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	621a      	str	r2, [r3, #32]
}
 8004b34:	bf00      	nop
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f023 0210 	bic.w	r2, r3, #16
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	031b      	lsls	r3, r3, #12
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	621a      	str	r2, [r3, #32]
}
 8004b94:	bf00      	nop
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f023 0303 	bic.w	r3, r3, #3
 8004bcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004bf0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	621a      	str	r2, [r3, #32]
}
 8004c0c:	bf00      	nop
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	021b      	lsls	r3, r3, #8
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c56:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	031b      	lsls	r3, r3, #12
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004c6a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	031b      	lsls	r3, r3, #12
 8004c70:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	621a      	str	r2, [r3, #32]
}
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b085      	sub	sp, #20
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f043 0307 	orr.w	r3, r3, #7
 8004cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	609a      	str	r2, [r3, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	021a      	lsls	r2, r3, #8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	609a      	str	r2, [r3, #8]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1a      	ldr	r2, [r3, #32]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a1a      	ldr	r2, [r3, #32]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f003 031f 	and.w	r3, r3, #31
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d40:	431a      	orrs	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	621a      	str	r2, [r3, #32]
}
 8004d46:	bf00      	nop
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e05a      	b.n	8004e22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a21      	ldr	r2, [pc, #132]	; (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d022      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db8:	d01d      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1d      	ldr	r2, [pc, #116]	; (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d018      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1b      	ldr	r2, [pc, #108]	; (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d013      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1a      	ldr	r2, [pc, #104]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00e      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a18      	ldr	r2, [pc, #96]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d009      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a17      	ldr	r2, [pc, #92]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d004      	beq.n	8004df6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a15      	ldr	r2, [pc, #84]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d10c      	bne.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40000400 	.word	0x40000400
 8004e38:	40000800 	.word	0x40000800
 8004e3c:	40000c00 	.word	0x40000c00
 8004e40:	40010400 	.word	0x40010400
 8004e44:	40014000 	.word	0x40014000
 8004e48:	40001800 	.word	0x40001800

08004e4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e03d      	b.n	8004ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e03f      	b.n	8004faa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f002 fc8c 	bl	800785c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2224      	movs	r2, #36	; 0x24
 8004f48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fba1 	bl	80056a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695a      	ldr	r2, [r3, #20]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b088      	sub	sp, #32
 8004fb6:	af02      	add	r7, sp, #8
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	f040 8083 	bne.w	80050da <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <HAL_UART_Transmit+0x2e>
 8004fda:	88fb      	ldrh	r3, [r7, #6]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e07b      	b.n	80050dc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <HAL_UART_Transmit+0x40>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e074      	b.n	80050dc <HAL_UART_Transmit+0x12a>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2221      	movs	r2, #33	; 0x21
 8005004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005008:	f7fb fb20 	bl	800064c <HAL_GetTick>
 800500c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	88fa      	ldrh	r2, [r7, #6]
 8005012:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	88fa      	ldrh	r2, [r7, #6]
 8005018:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005022:	e042      	b.n	80050aa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503a:	d122      	bne.n	8005082 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2200      	movs	r2, #0
 8005044:	2180      	movs	r1, #128	; 0x80
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f9c0 	bl	80053cc <UART_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e042      	b.n	80050dc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005068:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d103      	bne.n	800507a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	3302      	adds	r3, #2
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	e017      	b.n	80050aa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	3301      	adds	r3, #1
 800507e:	60bb      	str	r3, [r7, #8]
 8005080:	e013      	b.n	80050aa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2200      	movs	r2, #0
 800508a:	2180      	movs	r1, #128	; 0x80
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 f99d 	bl	80053cc <UART_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e01f      	b.n	80050dc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	60ba      	str	r2, [r7, #8]
 80050a2:	781a      	ldrb	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1b7      	bne.n	8005024 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2200      	movs	r2, #0
 80050bc:	2140      	movs	r1, #64	; 0x40
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 f984 	bl	80053cc <UART_WaitOnFlagUntilTimeout>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e006      	b.n	80050dc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e000      	b.n	80050dc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80050da:	2302      	movs	r3, #2
  }
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	4613      	mov	r3, r2
 80050f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b20      	cmp	r3, #32
 80050fc:	d140      	bne.n	8005180 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <HAL_UART_Receive_IT+0x26>
 8005104:	88fb      	ldrh	r3, [r7, #6]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e039      	b.n	8005182 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_UART_Receive_IT+0x38>
 8005118:	2302      	movs	r3, #2
 800511a:	e032      	b.n	8005182 <HAL_UART_Receive_IT+0x9e>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	88fa      	ldrh	r2, [r7, #6]
 800512e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	88fa      	ldrh	r2, [r7, #6]
 8005134:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2222      	movs	r2, #34	; 0x22
 8005140:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800515a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695a      	ldr	r2, [r3, #20]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0220 	orr.w	r2, r2, #32
 800517a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	e000      	b.n	8005182 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005180:	2302      	movs	r3, #2
  }
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10d      	bne.n	80051e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d008      	beq.n	80051e2 <HAL_UART_IRQHandler+0x52>
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f9e0 	bl	80055a0 <UART_Receive_IT>
      return;
 80051e0:	e0d1      	b.n	8005386 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80b0 	beq.w	800534a <HAL_UART_IRQHandler+0x1ba>
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d105      	bne.n	8005200 <HAL_UART_IRQHandler+0x70>
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 80a5 	beq.w	800534a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <HAL_UART_IRQHandler+0x90>
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d005      	beq.n	8005220 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005218:	f043 0201 	orr.w	r2, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <HAL_UART_IRQHandler+0xb0>
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005238:	f043 0202 	orr.w	r2, r3, #2
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <HAL_UART_IRQHandler+0xd0>
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005258:	f043 0204 	orr.w	r2, r3, #4
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00f      	beq.n	800528a <HAL_UART_IRQHandler+0xfa>
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b00      	cmp	r3, #0
 8005272:	d104      	bne.n	800527e <HAL_UART_IRQHandler+0xee>
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d005      	beq.n	800528a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	f043 0208 	orr.w	r2, r3, #8
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d078      	beq.n	8005384 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b00      	cmp	r3, #0
 800529a:	d007      	beq.n	80052ac <HAL_UART_IRQHandler+0x11c>
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f003 0320 	and.w	r3, r3, #32
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f97a 	bl	80055a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	bf0c      	ite	eq
 80052ba:	2301      	moveq	r3, #1
 80052bc:	2300      	movne	r3, #0
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d102      	bne.n	80052d4 <HAL_UART_IRQHandler+0x144>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d031      	beq.n	8005338 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f8c3 	bl	8005460 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e4:	2b40      	cmp	r3, #64	; 0x40
 80052e6:	d123      	bne.n	8005330 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d013      	beq.n	8005328 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005304:	4a21      	ldr	r2, [pc, #132]	; (800538c <HAL_UART_IRQHandler+0x1fc>)
 8005306:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530c:	4618      	mov	r0, r3
 800530e:	f7fb fe3a 	bl	8000f86 <HAL_DMA_Abort_IT>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d016      	beq.n	8005346 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005322:	4610      	mov	r0, r2
 8005324:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005326:	e00e      	b.n	8005346 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f845 	bl	80053b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800532e:	e00a      	b.n	8005346 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f841 	bl	80053b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005336:	e006      	b.n	8005346 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f83d 	bl	80053b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005344:	e01e      	b.n	8005384 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005346:	bf00      	nop
    return;
 8005348:	e01c      	b.n	8005384 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_UART_IRQHandler+0x1d6>
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f8b0 	bl	80054c4 <UART_Transmit_IT>
    return;
 8005364:	e00f      	b.n	8005386 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <HAL_UART_IRQHandler+0x1f6>
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f8f8 	bl	8005570 <UART_EndTransmit_IT>
    return;
 8005380:	bf00      	nop
 8005382:	e000      	b.n	8005386 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005384:	bf00      	nop
  }
}
 8005386:	3720      	adds	r7, #32
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	0800549d 	.word	0x0800549d

08005390 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	4613      	mov	r3, r2
 80053da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053dc:	e02c      	b.n	8005438 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053e4:	d028      	beq.n	8005438 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d007      	beq.n	80053fc <UART_WaitOnFlagUntilTimeout+0x30>
 80053ec:	f7fb f92e 	bl	800064c <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d21d      	bcs.n	8005438 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800540a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e00f      	b.n	8005458 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	4013      	ands	r3, r2
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	429a      	cmp	r2, r3
 8005446:	bf0c      	ite	eq
 8005448:	2301      	moveq	r3, #1
 800544a:	2300      	movne	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	461a      	mov	r2, r3
 8005450:	79fb      	ldrb	r3, [r7, #7]
 8005452:	429a      	cmp	r2, r3
 8005454:	d0c3      	beq.n	80053de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005476:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0201 	bic.w	r2, r2, #1
 8005486:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f7ff ff7e 	bl	80053b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054bc:	bf00      	nop
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b21      	cmp	r3, #33	; 0x21
 80054d6:	d144      	bne.n	8005562 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e0:	d11a      	bne.n	8005518 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054f6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d105      	bne.n	800550c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	1c9a      	adds	r2, r3, #2
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	621a      	str	r2, [r3, #32]
 800550a:	e00e      	b.n	800552a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	621a      	str	r2, [r3, #32]
 8005516:	e008      	b.n	800552a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	1c59      	adds	r1, r3, #1
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6211      	str	r1, [r2, #32]
 8005522:	781a      	ldrb	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800552e:	b29b      	uxth	r3, r3
 8005530:	3b01      	subs	r3, #1
 8005532:	b29b      	uxth	r3, r3
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	4619      	mov	r1, r3
 8005538:	84d1      	strh	r1, [r2, #38]	; 0x26
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10f      	bne.n	800555e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800554c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800555c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	e000      	b.n	8005564 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005562:	2302      	movs	r3, #2
  }
}
 8005564:	4618      	mov	r0, r3
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005586:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff fefd 	bl	8005390 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b22      	cmp	r3, #34	; 0x22
 80055b2:	d171      	bne.n	8005698 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055bc:	d123      	bne.n	8005606 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10e      	bne.n	80055ea <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	1c9a      	adds	r2, r3, #2
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	629a      	str	r2, [r3, #40]	; 0x28
 80055e8:	e029      	b.n	800563e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	629a      	str	r2, [r3, #40]	; 0x28
 8005604:	e01b      	b.n	800563e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10a      	bne.n	8005624 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6858      	ldr	r0, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	1c59      	adds	r1, r3, #1
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6291      	str	r1, [r2, #40]	; 0x28
 800561e:	b2c2      	uxtb	r2, r0
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	e00c      	b.n	800563e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	b2da      	uxtb	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	1c58      	adds	r0, r3, #1
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	6288      	str	r0, [r1, #40]	; 0x28
 8005636:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b01      	subs	r3, #1
 8005646:	b29b      	uxth	r3, r3
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	4619      	mov	r1, r3
 800564c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800564e:	2b00      	cmp	r3, #0
 8005650:	d120      	bne.n	8005694 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0220 	bic.w	r2, r2, #32
 8005660:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005670:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695a      	ldr	r2, [r3, #20]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0201 	bic.w	r2, r2, #1
 8005680:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff fe8a 	bl	80053a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	e002      	b.n	800569a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	e000      	b.n	800569a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005698:	2302      	movs	r3, #2
  }
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80056e6:	f023 030c 	bic.w	r3, r3, #12
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6812      	ldr	r2, [r2, #0]
 80056ee:	68f9      	ldr	r1, [r7, #12]
 80056f0:	430b      	orrs	r3, r1
 80056f2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005712:	f040 818b 	bne.w	8005a2c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4ac1      	ldr	r2, [pc, #772]	; (8005a20 <UART_SetConfig+0x37c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d005      	beq.n	800572c <UART_SetConfig+0x88>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4abf      	ldr	r2, [pc, #764]	; (8005a24 <UART_SetConfig+0x380>)
 8005726:	4293      	cmp	r3, r2
 8005728:	f040 80bd 	bne.w	80058a6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800572c:	f7fd fb00 	bl	8002d30 <HAL_RCC_GetPCLK2Freq>
 8005730:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	461d      	mov	r5, r3
 8005736:	f04f 0600 	mov.w	r6, #0
 800573a:	46a8      	mov	r8, r5
 800573c:	46b1      	mov	r9, r6
 800573e:	eb18 0308 	adds.w	r3, r8, r8
 8005742:	eb49 0409 	adc.w	r4, r9, r9
 8005746:	4698      	mov	r8, r3
 8005748:	46a1      	mov	r9, r4
 800574a:	eb18 0805 	adds.w	r8, r8, r5
 800574e:	eb49 0906 	adc.w	r9, r9, r6
 8005752:	f04f 0100 	mov.w	r1, #0
 8005756:	f04f 0200 	mov.w	r2, #0
 800575a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800575e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005762:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005766:	4688      	mov	r8, r1
 8005768:	4691      	mov	r9, r2
 800576a:	eb18 0005 	adds.w	r0, r8, r5
 800576e:	eb49 0106 	adc.w	r1, r9, r6
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	461d      	mov	r5, r3
 8005778:	f04f 0600 	mov.w	r6, #0
 800577c:	196b      	adds	r3, r5, r5
 800577e:	eb46 0406 	adc.w	r4, r6, r6
 8005782:	461a      	mov	r2, r3
 8005784:	4623      	mov	r3, r4
 8005786:	f7fa fd7b 	bl	8000280 <__aeabi_uldivmod>
 800578a:	4603      	mov	r3, r0
 800578c:	460c      	mov	r4, r1
 800578e:	461a      	mov	r2, r3
 8005790:	4ba5      	ldr	r3, [pc, #660]	; (8005a28 <UART_SetConfig+0x384>)
 8005792:	fba3 2302 	umull	r2, r3, r3, r2
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	461d      	mov	r5, r3
 80057a0:	f04f 0600 	mov.w	r6, #0
 80057a4:	46a9      	mov	r9, r5
 80057a6:	46b2      	mov	sl, r6
 80057a8:	eb19 0309 	adds.w	r3, r9, r9
 80057ac:	eb4a 040a 	adc.w	r4, sl, sl
 80057b0:	4699      	mov	r9, r3
 80057b2:	46a2      	mov	sl, r4
 80057b4:	eb19 0905 	adds.w	r9, r9, r5
 80057b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80057bc:	f04f 0100 	mov.w	r1, #0
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057d0:	4689      	mov	r9, r1
 80057d2:	4692      	mov	sl, r2
 80057d4:	eb19 0005 	adds.w	r0, r9, r5
 80057d8:	eb4a 0106 	adc.w	r1, sl, r6
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	461d      	mov	r5, r3
 80057e2:	f04f 0600 	mov.w	r6, #0
 80057e6:	196b      	adds	r3, r5, r5
 80057e8:	eb46 0406 	adc.w	r4, r6, r6
 80057ec:	461a      	mov	r2, r3
 80057ee:	4623      	mov	r3, r4
 80057f0:	f7fa fd46 	bl	8000280 <__aeabi_uldivmod>
 80057f4:	4603      	mov	r3, r0
 80057f6:	460c      	mov	r4, r1
 80057f8:	461a      	mov	r2, r3
 80057fa:	4b8b      	ldr	r3, [pc, #556]	; (8005a28 <UART_SetConfig+0x384>)
 80057fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	2164      	movs	r1, #100	; 0x64
 8005804:	fb01 f303 	mul.w	r3, r1, r3
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	3332      	adds	r3, #50	; 0x32
 800580e:	4a86      	ldr	r2, [pc, #536]	; (8005a28 <UART_SetConfig+0x384>)
 8005810:	fba2 2303 	umull	r2, r3, r2, r3
 8005814:	095b      	lsrs	r3, r3, #5
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800581c:	4498      	add	r8, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	461d      	mov	r5, r3
 8005822:	f04f 0600 	mov.w	r6, #0
 8005826:	46a9      	mov	r9, r5
 8005828:	46b2      	mov	sl, r6
 800582a:	eb19 0309 	adds.w	r3, r9, r9
 800582e:	eb4a 040a 	adc.w	r4, sl, sl
 8005832:	4699      	mov	r9, r3
 8005834:	46a2      	mov	sl, r4
 8005836:	eb19 0905 	adds.w	r9, r9, r5
 800583a:	eb4a 0a06 	adc.w	sl, sl, r6
 800583e:	f04f 0100 	mov.w	r1, #0
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800584a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800584e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005852:	4689      	mov	r9, r1
 8005854:	4692      	mov	sl, r2
 8005856:	eb19 0005 	adds.w	r0, r9, r5
 800585a:	eb4a 0106 	adc.w	r1, sl, r6
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	461d      	mov	r5, r3
 8005864:	f04f 0600 	mov.w	r6, #0
 8005868:	196b      	adds	r3, r5, r5
 800586a:	eb46 0406 	adc.w	r4, r6, r6
 800586e:	461a      	mov	r2, r3
 8005870:	4623      	mov	r3, r4
 8005872:	f7fa fd05 	bl	8000280 <__aeabi_uldivmod>
 8005876:	4603      	mov	r3, r0
 8005878:	460c      	mov	r4, r1
 800587a:	461a      	mov	r2, r3
 800587c:	4b6a      	ldr	r3, [pc, #424]	; (8005a28 <UART_SetConfig+0x384>)
 800587e:	fba3 1302 	umull	r1, r3, r3, r2
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	2164      	movs	r1, #100	; 0x64
 8005886:	fb01 f303 	mul.w	r3, r1, r3
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	3332      	adds	r3, #50	; 0x32
 8005890:	4a65      	ldr	r2, [pc, #404]	; (8005a28 <UART_SetConfig+0x384>)
 8005892:	fba2 2303 	umull	r2, r3, r2, r3
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	f003 0207 	and.w	r2, r3, #7
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4442      	add	r2, r8
 80058a2:	609a      	str	r2, [r3, #8]
 80058a4:	e26f      	b.n	8005d86 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058a6:	f7fd fa2f 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 80058aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	461d      	mov	r5, r3
 80058b0:	f04f 0600 	mov.w	r6, #0
 80058b4:	46a8      	mov	r8, r5
 80058b6:	46b1      	mov	r9, r6
 80058b8:	eb18 0308 	adds.w	r3, r8, r8
 80058bc:	eb49 0409 	adc.w	r4, r9, r9
 80058c0:	4698      	mov	r8, r3
 80058c2:	46a1      	mov	r9, r4
 80058c4:	eb18 0805 	adds.w	r8, r8, r5
 80058c8:	eb49 0906 	adc.w	r9, r9, r6
 80058cc:	f04f 0100 	mov.w	r1, #0
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058e0:	4688      	mov	r8, r1
 80058e2:	4691      	mov	r9, r2
 80058e4:	eb18 0005 	adds.w	r0, r8, r5
 80058e8:	eb49 0106 	adc.w	r1, r9, r6
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	461d      	mov	r5, r3
 80058f2:	f04f 0600 	mov.w	r6, #0
 80058f6:	196b      	adds	r3, r5, r5
 80058f8:	eb46 0406 	adc.w	r4, r6, r6
 80058fc:	461a      	mov	r2, r3
 80058fe:	4623      	mov	r3, r4
 8005900:	f7fa fcbe 	bl	8000280 <__aeabi_uldivmod>
 8005904:	4603      	mov	r3, r0
 8005906:	460c      	mov	r4, r1
 8005908:	461a      	mov	r2, r3
 800590a:	4b47      	ldr	r3, [pc, #284]	; (8005a28 <UART_SetConfig+0x384>)
 800590c:	fba3 2302 	umull	r2, r3, r3, r2
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	461d      	mov	r5, r3
 800591a:	f04f 0600 	mov.w	r6, #0
 800591e:	46a9      	mov	r9, r5
 8005920:	46b2      	mov	sl, r6
 8005922:	eb19 0309 	adds.w	r3, r9, r9
 8005926:	eb4a 040a 	adc.w	r4, sl, sl
 800592a:	4699      	mov	r9, r3
 800592c:	46a2      	mov	sl, r4
 800592e:	eb19 0905 	adds.w	r9, r9, r5
 8005932:	eb4a 0a06 	adc.w	sl, sl, r6
 8005936:	f04f 0100 	mov.w	r1, #0
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005942:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005946:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800594a:	4689      	mov	r9, r1
 800594c:	4692      	mov	sl, r2
 800594e:	eb19 0005 	adds.w	r0, r9, r5
 8005952:	eb4a 0106 	adc.w	r1, sl, r6
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	461d      	mov	r5, r3
 800595c:	f04f 0600 	mov.w	r6, #0
 8005960:	196b      	adds	r3, r5, r5
 8005962:	eb46 0406 	adc.w	r4, r6, r6
 8005966:	461a      	mov	r2, r3
 8005968:	4623      	mov	r3, r4
 800596a:	f7fa fc89 	bl	8000280 <__aeabi_uldivmod>
 800596e:	4603      	mov	r3, r0
 8005970:	460c      	mov	r4, r1
 8005972:	461a      	mov	r2, r3
 8005974:	4b2c      	ldr	r3, [pc, #176]	; (8005a28 <UART_SetConfig+0x384>)
 8005976:	fba3 1302 	umull	r1, r3, r3, r2
 800597a:	095b      	lsrs	r3, r3, #5
 800597c:	2164      	movs	r1, #100	; 0x64
 800597e:	fb01 f303 	mul.w	r3, r1, r3
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	3332      	adds	r3, #50	; 0x32
 8005988:	4a27      	ldr	r2, [pc, #156]	; (8005a28 <UART_SetConfig+0x384>)
 800598a:	fba2 2303 	umull	r2, r3, r2, r3
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005996:	4498      	add	r8, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	461d      	mov	r5, r3
 800599c:	f04f 0600 	mov.w	r6, #0
 80059a0:	46a9      	mov	r9, r5
 80059a2:	46b2      	mov	sl, r6
 80059a4:	eb19 0309 	adds.w	r3, r9, r9
 80059a8:	eb4a 040a 	adc.w	r4, sl, sl
 80059ac:	4699      	mov	r9, r3
 80059ae:	46a2      	mov	sl, r4
 80059b0:	eb19 0905 	adds.w	r9, r9, r5
 80059b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80059b8:	f04f 0100 	mov.w	r1, #0
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059cc:	4689      	mov	r9, r1
 80059ce:	4692      	mov	sl, r2
 80059d0:	eb19 0005 	adds.w	r0, r9, r5
 80059d4:	eb4a 0106 	adc.w	r1, sl, r6
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	461d      	mov	r5, r3
 80059de:	f04f 0600 	mov.w	r6, #0
 80059e2:	196b      	adds	r3, r5, r5
 80059e4:	eb46 0406 	adc.w	r4, r6, r6
 80059e8:	461a      	mov	r2, r3
 80059ea:	4623      	mov	r3, r4
 80059ec:	f7fa fc48 	bl	8000280 <__aeabi_uldivmod>
 80059f0:	4603      	mov	r3, r0
 80059f2:	460c      	mov	r4, r1
 80059f4:	461a      	mov	r2, r3
 80059f6:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <UART_SetConfig+0x384>)
 80059f8:	fba3 1302 	umull	r1, r3, r3, r2
 80059fc:	095b      	lsrs	r3, r3, #5
 80059fe:	2164      	movs	r1, #100	; 0x64
 8005a00:	fb01 f303 	mul.w	r3, r1, r3
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	3332      	adds	r3, #50	; 0x32
 8005a0a:	4a07      	ldr	r2, [pc, #28]	; (8005a28 <UART_SetConfig+0x384>)
 8005a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	f003 0207 	and.w	r2, r3, #7
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4442      	add	r2, r8
 8005a1c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005a1e:	e1b2      	b.n	8005d86 <UART_SetConfig+0x6e2>
 8005a20:	40011000 	.word	0x40011000
 8005a24:	40011400 	.word	0x40011400
 8005a28:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4ad7      	ldr	r2, [pc, #860]	; (8005d90 <UART_SetConfig+0x6ec>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d005      	beq.n	8005a42 <UART_SetConfig+0x39e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4ad6      	ldr	r2, [pc, #856]	; (8005d94 <UART_SetConfig+0x6f0>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	f040 80d1 	bne.w	8005be4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a42:	f7fd f975 	bl	8002d30 <HAL_RCC_GetPCLK2Freq>
 8005a46:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	469a      	mov	sl, r3
 8005a4c:	f04f 0b00 	mov.w	fp, #0
 8005a50:	46d0      	mov	r8, sl
 8005a52:	46d9      	mov	r9, fp
 8005a54:	eb18 0308 	adds.w	r3, r8, r8
 8005a58:	eb49 0409 	adc.w	r4, r9, r9
 8005a5c:	4698      	mov	r8, r3
 8005a5e:	46a1      	mov	r9, r4
 8005a60:	eb18 080a 	adds.w	r8, r8, sl
 8005a64:	eb49 090b 	adc.w	r9, r9, fp
 8005a68:	f04f 0100 	mov.w	r1, #0
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a74:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a78:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a7c:	4688      	mov	r8, r1
 8005a7e:	4691      	mov	r9, r2
 8005a80:	eb1a 0508 	adds.w	r5, sl, r8
 8005a84:	eb4b 0609 	adc.w	r6, fp, r9
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	f04f 0400 	mov.w	r4, #0
 8005a9a:	0094      	lsls	r4, r2, #2
 8005a9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005aa0:	008b      	lsls	r3, r1, #2
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	4623      	mov	r3, r4
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	f7fa fbe9 	bl	8000280 <__aeabi_uldivmod>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	4bb8      	ldr	r3, [pc, #736]	; (8005d98 <UART_SetConfig+0x6f4>)
 8005ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8005aba:	095b      	lsrs	r3, r3, #5
 8005abc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	469b      	mov	fp, r3
 8005ac4:	f04f 0c00 	mov.w	ip, #0
 8005ac8:	46d9      	mov	r9, fp
 8005aca:	46e2      	mov	sl, ip
 8005acc:	eb19 0309 	adds.w	r3, r9, r9
 8005ad0:	eb4a 040a 	adc.w	r4, sl, sl
 8005ad4:	4699      	mov	r9, r3
 8005ad6:	46a2      	mov	sl, r4
 8005ad8:	eb19 090b 	adds.w	r9, r9, fp
 8005adc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ae0:	f04f 0100 	mov.w	r1, #0
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005af0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005af4:	4689      	mov	r9, r1
 8005af6:	4692      	mov	sl, r2
 8005af8:	eb1b 0509 	adds.w	r5, fp, r9
 8005afc:	eb4c 060a 	adc.w	r6, ip, sl
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	4619      	mov	r1, r3
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	f04f 0400 	mov.w	r4, #0
 8005b12:	0094      	lsls	r4, r2, #2
 8005b14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b18:	008b      	lsls	r3, r1, #2
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	4623      	mov	r3, r4
 8005b1e:	4628      	mov	r0, r5
 8005b20:	4631      	mov	r1, r6
 8005b22:	f7fa fbad 	bl	8000280 <__aeabi_uldivmod>
 8005b26:	4603      	mov	r3, r0
 8005b28:	460c      	mov	r4, r1
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	4b9a      	ldr	r3, [pc, #616]	; (8005d98 <UART_SetConfig+0x6f4>)
 8005b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	2164      	movs	r1, #100	; 0x64
 8005b36:	fb01 f303 	mul.w	r3, r1, r3
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	011b      	lsls	r3, r3, #4
 8005b3e:	3332      	adds	r3, #50	; 0x32
 8005b40:	4a95      	ldr	r2, [pc, #596]	; (8005d98 <UART_SetConfig+0x6f4>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b4c:	4498      	add	r8, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	469b      	mov	fp, r3
 8005b52:	f04f 0c00 	mov.w	ip, #0
 8005b56:	46d9      	mov	r9, fp
 8005b58:	46e2      	mov	sl, ip
 8005b5a:	eb19 0309 	adds.w	r3, r9, r9
 8005b5e:	eb4a 040a 	adc.w	r4, sl, sl
 8005b62:	4699      	mov	r9, r3
 8005b64:	46a2      	mov	sl, r4
 8005b66:	eb19 090b 	adds.w	r9, r9, fp
 8005b6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b6e:	f04f 0100 	mov.w	r1, #0
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b82:	4689      	mov	r9, r1
 8005b84:	4692      	mov	sl, r2
 8005b86:	eb1b 0509 	adds.w	r5, fp, r9
 8005b8a:	eb4c 060a 	adc.w	r6, ip, sl
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	4619      	mov	r1, r3
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	f04f 0400 	mov.w	r4, #0
 8005ba0:	0094      	lsls	r4, r2, #2
 8005ba2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ba6:	008b      	lsls	r3, r1, #2
 8005ba8:	461a      	mov	r2, r3
 8005baa:	4623      	mov	r3, r4
 8005bac:	4628      	mov	r0, r5
 8005bae:	4631      	mov	r1, r6
 8005bb0:	f7fa fb66 	bl	8000280 <__aeabi_uldivmod>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4b77      	ldr	r3, [pc, #476]	; (8005d98 <UART_SetConfig+0x6f4>)
 8005bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc0:	095b      	lsrs	r3, r3, #5
 8005bc2:	2164      	movs	r1, #100	; 0x64
 8005bc4:	fb01 f303 	mul.w	r3, r1, r3
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	3332      	adds	r3, #50	; 0x32
 8005bce:	4a72      	ldr	r2, [pc, #456]	; (8005d98 <UART_SetConfig+0x6f4>)
 8005bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	f003 020f 	and.w	r2, r3, #15
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4442      	add	r2, r8
 8005be0:	609a      	str	r2, [r3, #8]
 8005be2:	e0d0      	b.n	8005d86 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005be4:	f7fd f890 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8005be8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	469a      	mov	sl, r3
 8005bee:	f04f 0b00 	mov.w	fp, #0
 8005bf2:	46d0      	mov	r8, sl
 8005bf4:	46d9      	mov	r9, fp
 8005bf6:	eb18 0308 	adds.w	r3, r8, r8
 8005bfa:	eb49 0409 	adc.w	r4, r9, r9
 8005bfe:	4698      	mov	r8, r3
 8005c00:	46a1      	mov	r9, r4
 8005c02:	eb18 080a 	adds.w	r8, r8, sl
 8005c06:	eb49 090b 	adc.w	r9, r9, fp
 8005c0a:	f04f 0100 	mov.w	r1, #0
 8005c0e:	f04f 0200 	mov.w	r2, #0
 8005c12:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c16:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c1a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c1e:	4688      	mov	r8, r1
 8005c20:	4691      	mov	r9, r2
 8005c22:	eb1a 0508 	adds.w	r5, sl, r8
 8005c26:	eb4b 0609 	adc.w	r6, fp, r9
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	f04f 0300 	mov.w	r3, #0
 8005c38:	f04f 0400 	mov.w	r4, #0
 8005c3c:	0094      	lsls	r4, r2, #2
 8005c3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c42:	008b      	lsls	r3, r1, #2
 8005c44:	461a      	mov	r2, r3
 8005c46:	4623      	mov	r3, r4
 8005c48:	4628      	mov	r0, r5
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	f7fa fb18 	bl	8000280 <__aeabi_uldivmod>
 8005c50:	4603      	mov	r3, r0
 8005c52:	460c      	mov	r4, r1
 8005c54:	461a      	mov	r2, r3
 8005c56:	4b50      	ldr	r3, [pc, #320]	; (8005d98 <UART_SetConfig+0x6f4>)
 8005c58:	fba3 2302 	umull	r2, r3, r3, r2
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	469b      	mov	fp, r3
 8005c66:	f04f 0c00 	mov.w	ip, #0
 8005c6a:	46d9      	mov	r9, fp
 8005c6c:	46e2      	mov	sl, ip
 8005c6e:	eb19 0309 	adds.w	r3, r9, r9
 8005c72:	eb4a 040a 	adc.w	r4, sl, sl
 8005c76:	4699      	mov	r9, r3
 8005c78:	46a2      	mov	sl, r4
 8005c7a:	eb19 090b 	adds.w	r9, r9, fp
 8005c7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c82:	f04f 0100 	mov.w	r1, #0
 8005c86:	f04f 0200 	mov.w	r2, #0
 8005c8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c96:	4689      	mov	r9, r1
 8005c98:	4692      	mov	sl, r2
 8005c9a:	eb1b 0509 	adds.w	r5, fp, r9
 8005c9e:	eb4c 060a 	adc.w	r6, ip, sl
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	f04f 0400 	mov.w	r4, #0
 8005cb4:	0094      	lsls	r4, r2, #2
 8005cb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cba:	008b      	lsls	r3, r1, #2
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4623      	mov	r3, r4
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	f7fa fadc 	bl	8000280 <__aeabi_uldivmod>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	460c      	mov	r4, r1
 8005ccc:	461a      	mov	r2, r3
 8005cce:	4b32      	ldr	r3, [pc, #200]	; (8005d98 <UART_SetConfig+0x6f4>)
 8005cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cd4:	095b      	lsrs	r3, r3, #5
 8005cd6:	2164      	movs	r1, #100	; 0x64
 8005cd8:	fb01 f303 	mul.w	r3, r1, r3
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	3332      	adds	r3, #50	; 0x32
 8005ce2:	4a2d      	ldr	r2, [pc, #180]	; (8005d98 <UART_SetConfig+0x6f4>)
 8005ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cee:	4498      	add	r8, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	469b      	mov	fp, r3
 8005cf4:	f04f 0c00 	mov.w	ip, #0
 8005cf8:	46d9      	mov	r9, fp
 8005cfa:	46e2      	mov	sl, ip
 8005cfc:	eb19 0309 	adds.w	r3, r9, r9
 8005d00:	eb4a 040a 	adc.w	r4, sl, sl
 8005d04:	4699      	mov	r9, r3
 8005d06:	46a2      	mov	sl, r4
 8005d08:	eb19 090b 	adds.w	r9, r9, fp
 8005d0c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d10:	f04f 0100 	mov.w	r1, #0
 8005d14:	f04f 0200 	mov.w	r2, #0
 8005d18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d24:	4689      	mov	r9, r1
 8005d26:	4692      	mov	sl, r2
 8005d28:	eb1b 0509 	adds.w	r5, fp, r9
 8005d2c:	eb4c 060a 	adc.w	r6, ip, sl
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	4619      	mov	r1, r3
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	f04f 0400 	mov.w	r4, #0
 8005d42:	0094      	lsls	r4, r2, #2
 8005d44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d48:	008b      	lsls	r3, r1, #2
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	4623      	mov	r3, r4
 8005d4e:	4628      	mov	r0, r5
 8005d50:	4631      	mov	r1, r6
 8005d52:	f7fa fa95 	bl	8000280 <__aeabi_uldivmod>
 8005d56:	4603      	mov	r3, r0
 8005d58:	460c      	mov	r4, r1
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	4b0e      	ldr	r3, [pc, #56]	; (8005d98 <UART_SetConfig+0x6f4>)
 8005d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	2164      	movs	r1, #100	; 0x64
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	011b      	lsls	r3, r3, #4
 8005d6e:	3332      	adds	r3, #50	; 0x32
 8005d70:	4a09      	ldr	r2, [pc, #36]	; (8005d98 <UART_SetConfig+0x6f4>)
 8005d72:	fba2 2303 	umull	r2, r3, r2, r3
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	f003 020f 	and.w	r2, r3, #15
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4442      	add	r2, r8
 8005d82:	609a      	str	r2, [r3, #8]
}
 8005d84:	e7ff      	b.n	8005d86 <UART_SetConfig+0x6e2>
 8005d86:	bf00      	nop
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d90:	40011000 	.word	0x40011000
 8005d94:	40011400 	.word	0x40011400
 8005d98:	51eb851f 	.word	0x51eb851f

08005d9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	f107 001c 	add.w	r0, r7, #28
 8005daa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d122      	bne.n	8005dfa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d105      	bne.n	8005dee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa5c 	bl	80062ac <USB_CoreReset>
 8005df4:	4603      	mov	r3, r0
 8005df6:	73fb      	strb	r3, [r7, #15]
 8005df8:	e01a      	b.n	8005e30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa50 	bl	80062ac <USB_CoreReset>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	639a      	str	r2, [r3, #56]	; 0x38
 8005e22:	e005      	b.n	8005e30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d10b      	bne.n	8005e4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f043 0206 	orr.w	r2, r3, #6
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f043 0220 	orr.w	r2, r3, #32
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e5a:	b004      	add	sp, #16
 8005e5c:	4770      	bx	lr

08005e5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f023 0201 	bic.w	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d106      	bne.n	8005eac <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	60da      	str	r2, [r3, #12]
 8005eaa:	e00b      	b.n	8005ec4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d106      	bne.n	8005ec0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60da      	str	r2, [r3, #12]
 8005ebe:	e001      	b.n	8005ec4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e003      	b.n	8005ecc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005ec4:	2032      	movs	r0, #50	; 0x32
 8005ec6:	f7fa fbcd 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b086      	sub	sp, #24
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005eee:	2300      	movs	r3, #0
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	e009      	b.n	8005f08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	3340      	adds	r3, #64	; 0x40
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	2200      	movs	r2, #0
 8005f00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	3301      	adds	r3, #1
 8005f06:	613b      	str	r3, [r7, #16]
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	2b0e      	cmp	r3, #14
 8005f0c:	d9f2      	bls.n	8005ef4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d112      	bne.n	8005f3a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	639a      	str	r2, [r3, #56]	; 0x38
 8005f38:	e00b      	b.n	8005f52 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f58:	461a      	mov	r2, r3
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f64:	4619      	mov	r1, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	680b      	ldr	r3, [r1, #0]
 8005f70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d10c      	bne.n	8005f92 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d104      	bne.n	8005f88 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f7e:	2100      	movs	r1, #0
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f961 	bl	8006248 <USB_SetDevSpeed>
 8005f86:	e008      	b.n	8005f9a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f88:	2101      	movs	r1, #1
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f95c 	bl	8006248 <USB_SetDevSpeed>
 8005f90:	e003      	b.n	8005f9a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f92:	2103      	movs	r1, #3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f957 	bl	8006248 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f9a:	2110      	movs	r1, #16
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f90b 	bl	80061b8 <USB_FlushTxFifo>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f929 	bl	8006204 <USB_FlushRxFifo>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fce:	461a      	mov	r2, r3
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fda:	461a      	mov	r2, r3
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	613b      	str	r3, [r7, #16]
 8005fe4:	e043      	b.n	800606e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ffc:	d118      	bne.n	8006030 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006010:	461a      	mov	r2, r3
 8006012:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	e013      	b.n	8006042 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006026:	461a      	mov	r2, r3
 8006028:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	e008      	b.n	8006042 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603c:	461a      	mov	r2, r3
 800603e:	2300      	movs	r3, #0
 8006040:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604e:	461a      	mov	r2, r3
 8006050:	2300      	movs	r3, #0
 8006052:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	461a      	mov	r2, r3
 8006062:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006066:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	3301      	adds	r3, #1
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	429a      	cmp	r2, r3
 8006074:	d3b7      	bcc.n	8005fe6 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006076:	2300      	movs	r3, #0
 8006078:	613b      	str	r3, [r7, #16]
 800607a:	e043      	b.n	8006104 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800608e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006092:	d118      	bne.n	80060c6 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a6:	461a      	mov	r2, r3
 80060a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	e013      	b.n	80060d8 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060bc:	461a      	mov	r2, r3
 80060be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	e008      	b.n	80060d8 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d2:	461a      	mov	r2, r3
 80060d4:	2300      	movs	r3, #0
 80060d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e4:	461a      	mov	r2, r3
 80060e6:	2300      	movs	r3, #0
 80060e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f6:	461a      	mov	r2, r3
 80060f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	3301      	adds	r3, #1
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	429a      	cmp	r2, r3
 800610a:	d3b7      	bcc.n	800607c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800611a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800611e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	2b01      	cmp	r3, #1
 8006124:	d111      	bne.n	800614a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612c:	461a      	mov	r2, r3
 800612e:	4b20      	ldr	r3, [pc, #128]	; (80061b0 <USB_DevInit+0x2dc>)
 8006130:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006144:	f043 0303 	orr.w	r3, r3, #3
 8006148:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006156:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615a:	2b00      	cmp	r3, #0
 800615c:	d105      	bne.n	800616a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	f043 0210 	orr.w	r2, r3, #16
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	4b11      	ldr	r3, [pc, #68]	; (80061b4 <USB_DevInit+0x2e0>)
 8006170:	4313      	orrs	r3, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	f043 0208 	orr.w	r2, r3, #8
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800618a:	2b01      	cmp	r3, #1
 800618c:	d107      	bne.n	800619e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006196:	f043 0304 	orr.w	r3, r3, #4
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800619e:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061aa:	b004      	add	sp, #16
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	00800100 	.word	0x00800100
 80061b4:	803c3800 	.word	0x803c3800

080061b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	019b      	lsls	r3, r3, #6
 80061ca:	f043 0220 	orr.w	r2, r3, #32
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3301      	adds	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4a09      	ldr	r2, [pc, #36]	; (8006200 <USB_FlushTxFifo+0x48>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d901      	bls.n	80061e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e006      	b.n	80061f2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	f003 0320 	and.w	r3, r3, #32
 80061ec:	2b20      	cmp	r3, #32
 80061ee:	d0f0      	beq.n	80061d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	00030d40 	.word	0x00030d40

08006204 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2210      	movs	r2, #16
 8006214:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3301      	adds	r3, #1
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4a09      	ldr	r2, [pc, #36]	; (8006244 <USB_FlushRxFifo+0x40>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d901      	bls.n	8006228 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e006      	b.n	8006236 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b10      	cmp	r3, #16
 8006232:	d0f0      	beq.n	8006216 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	00030d40 	.word	0x00030d40

08006248 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	68f9      	ldr	r1, [r7, #12]
 8006264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006268:	4313      	orrs	r3, r2
 800626a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006294:	f043 0302 	orr.w	r3, r3, #2
 8006298:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800629a:	2003      	movs	r0, #3
 800629c:	f7fa f9e2 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3301      	adds	r3, #1
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4a13      	ldr	r2, [pc, #76]	; (8006310 <USB_CoreReset+0x64>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d901      	bls.n	80062ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e01b      	b.n	8006302 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	daf2      	bge.n	80062b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f043 0201 	orr.w	r2, r3, #1
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3301      	adds	r3, #1
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4a09      	ldr	r2, [pc, #36]	; (8006310 <USB_CoreReset+0x64>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d901      	bls.n	80062f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e006      	b.n	8006302 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d0f0      	beq.n	80062e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	00030d40 	.word	0x00030d40

08006314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006314:	b590      	push	{r4, r7, lr}
 8006316:	b09d      	sub	sp, #116	; 0x74
 8006318:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800631a:	f7fa f931 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800631e:	f000 fa77 	bl	8006810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006322:	f000 fe6d 	bl	8007000 <MX_GPIO_Init>
  MX_TIM9_Init();
 8006326:	f000 fd5b 	bl	8006de0 <MX_TIM9_Init>
  MX_SPI2_Init();
 800632a:	f000 fc11 	bl	8006b50 <MX_SPI2_Init>
  MX_ADC1_Init();
 800632e:	f000 fadb 	bl	80068e8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8006332:	f000 fb2b 	bl	800698c <MX_ADC2_Init>
  MX_CAN1_Init();
 8006336:	f000 fb7b 	bl	8006a30 <MX_CAN1_Init>
  MX_I2C1_Init();
 800633a:	f000 fbad 	bl	8006a98 <MX_I2C1_Init>
  MX_I2C2_Init();
 800633e:	f000 fbd9 	bl	8006af4 <MX_I2C2_Init>
  MX_USB_OTG_FS_PCD_Init();
 8006342:	f000 fe2f 	bl	8006fa4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8006346:	f000 fc3b 	bl	8006bc0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800634a:	f000 fe01 	bl	8006f50 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 800634e:	f000 fcef 	bl	8006d30 <MX_TIM8_Init>
  MX_TIM13_Init();
 8006352:	f000 fdb7 	bl	8006ec4 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8006356:	2100      	movs	r1, #0
 8006358:	4884      	ldr	r0, [pc, #528]	; (800656c <main+0x258>)
 800635a:	f7fd fc11 	bl	8003b80 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2);
 800635e:	2104      	movs	r1, #4
 8006360:	4882      	ldr	r0, [pc, #520]	; (800656c <main+0x258>)
 8006362:	f7fd fb99 	bl	8003a98 <HAL_TIM_OC_Start>

  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 8006366:	2201      	movs	r2, #1
 8006368:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800636c:	4880      	ldr	r0, [pc, #512]	; (8006570 <main+0x25c>)
 800636e:	f7fa ffc7 	bl	8001300 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8006372:	2200      	movs	r2, #0
 8006374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006378:	487d      	ldr	r0, [pc, #500]	; (8006570 <main+0x25c>)
 800637a:	f7fa ffc1 	bl	8001300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 800637e:	2200      	movs	r2, #0
 8006380:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006384:	487a      	ldr	r0, [pc, #488]	; (8006570 <main+0x25c>)
 8006386:	f7fa ffbb 	bl	8001300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 800638a:	2201      	movs	r2, #1
 800638c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006390:	4877      	ldr	r0, [pc, #476]	; (8006570 <main+0x25c>)
 8006392:	f7fa ffb5 	bl	8001300 <HAL_GPIO_WritePin>
//  for(;;)
//   {
//   HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
//   HAL_Delay(600);
//   }
  int i=0;
 8006396:	2300      	movs	r3, #0
 8006398:	667b      	str	r3, [r7, #100]	; 0x64
  //strcpy((char*)buf, "YUUP");
  sprintf((char*)buf, "START");
 800639a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800639e:	4a75      	ldr	r2, [pc, #468]	; (8006574 <main+0x260>)
 80063a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80063a4:	6018      	str	r0, [r3, #0]
 80063a6:	3304      	adds	r3, #4
 80063a8:	8019      	strh	r1, [r3, #0]
  ch='t';
 80063aa:	2374      	movs	r3, #116	; 0x74
 80063ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  int blink_duration = 100;
 80063b0:	2364      	movs	r3, #100	; 0x64
 80063b2:	663b      	str	r3, [r7, #96]	; 0x60

  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL );
 80063b4:	213c      	movs	r1, #60	; 0x3c
 80063b6:	4870      	ldr	r0, [pc, #448]	; (8006578 <main+0x264>)
 80063b8:	f7fd fce7 	bl	8003d8a <HAL_TIM_Encoder_Start_IT>
  	// ---I2C2 IMU ------------------------------------------------
  	//see: https://www.youtube.com/watch?v=isOekyygpR8
  	//b1101000
  	char accel_char[20];

  	buf[0] = 0x6B;
 80063bc:	236b      	movs	r3, #107	; 0x6b
 80063be:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  	buf[1] = 0x00;
 80063c2:	2300      	movs	r3, #0
 80063c4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
		ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 2, HAL_MAX_DELAY);
 80063c8:	23d0      	movs	r3, #208	; 0xd0
 80063ca:	b299      	uxth	r1, r3
 80063cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80063d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	2302      	movs	r3, #2
 80063d8:	4868      	ldr	r0, [pc, #416]	; (800657c <main+0x268>)
 80063da:	f7fb f915 	bl	8001608 <HAL_I2C_Master_Transmit>
 80063de:	4603      	mov	r3, r0
 80063e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (ret != HAL_OK){
 80063e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d008      	beq.n	80063fe <main+0xea>
			strcpy((char*)buf, "Error IMU T\r\n");
 80063ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80063f0:	4a63      	ldr	r2, [pc, #396]	; (8006580 <main+0x26c>)
 80063f2:	461c      	mov	r4, r3
 80063f4:	4613      	mov	r3, r2
 80063f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063f8:	c407      	stmia	r4!, {r0, r1, r2}
 80063fa:	8023      	strh	r3, [r4, #0]
 80063fc:	e002      	b.n	8006404 <main+0xf0>
		} else {
			buf[0] = 0x00;
 80063fe:	2300      	movs	r3, #0
 8006400:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		}

  	buf[0] = 0x41;
 8006404:	2341      	movs	r3, #65	; 0x41
 8006406:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 800640a:	23d0      	movs	r3, #208	; 0xd0
 800640c:	b299      	uxth	r1, r3
 800640e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	2301      	movs	r3, #1
 800641a:	4858      	ldr	r0, [pc, #352]	; (800657c <main+0x268>)
 800641c:	f7fb f8f4 	bl	8001608 <HAL_I2C_Master_Transmit>
 8006420:	4603      	mov	r3, r0
 8006422:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  	if (ret != HAL_OK){
 8006426:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800642a:	2b00      	cmp	r3, #0
 800642c:	d008      	beq.n	8006440 <main+0x12c>
  		strcpy((char*)buf, "Error IMU T\r\n");
 800642e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006432:	4a53      	ldr	r2, [pc, #332]	; (8006580 <main+0x26c>)
 8006434:	461c      	mov	r4, r3
 8006436:	4613      	mov	r3, r2
 8006438:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800643a:	c407      	stmia	r4!, {r0, r1, r2}
 800643c:	8023      	strh	r3, [r4, #0]
 800643e:	e01e      	b.n	800647e <main+0x16a>
  	} else {
  		ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8006440:	23d0      	movs	r3, #208	; 0xd0
 8006442:	b299      	uxth	r1, r3
 8006444:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	2301      	movs	r3, #1
 8006450:	484a      	ldr	r0, [pc, #296]	; (800657c <main+0x268>)
 8006452:	f7fb f9d7 	bl	8001804 <HAL_I2C_Master_Receive>
 8006456:	4603      	mov	r3, r0
 8006458:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (ret != HAL_OK){
 800645c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006460:	2b00      	cmp	r3, #0
 8006462:	d008      	beq.n	8006476 <main+0x162>
				strcpy((char*)buf, "Error IMU R\r\n");
 8006464:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006468:	4a46      	ldr	r2, [pc, #280]	; (8006584 <main+0x270>)
 800646a:	461c      	mov	r4, r3
 800646c:	4613      	mov	r3, r2
 800646e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006470:	c407      	stmia	r4!, {r0, r1, r2}
 8006472:	8023      	strh	r3, [r4, #0]
 8006474:	e003      	b.n	800647e <main+0x16a>
			} else {
				accel8l = (int8_t)buf[0];
 8006476:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800647a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
				//itoa(buf[0], accel_char, 10);
			}

  	}

  	buf[0] = 0x42;
 800647e:	2342      	movs	r3, #66	; 0x42
 8006480:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8006484:	23d0      	movs	r3, #208	; 0xd0
 8006486:	b299      	uxth	r1, r3
 8006488:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800648c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	2301      	movs	r3, #1
 8006494:	4839      	ldr	r0, [pc, #228]	; (800657c <main+0x268>)
 8006496:	f7fb f8b7 	bl	8001608 <HAL_I2C_Master_Transmit>
 800649a:	4603      	mov	r3, r0
 800649c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (ret != HAL_OK){
 80064a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d008      	beq.n	80064ba <main+0x1a6>
			strcpy((char*)buf, "Error IMU T\r\n");
 80064a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80064ac:	4a34      	ldr	r2, [pc, #208]	; (8006580 <main+0x26c>)
 80064ae:	461c      	mov	r4, r3
 80064b0:	4613      	mov	r3, r2
 80064b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064b4:	c407      	stmia	r4!, {r0, r1, r2}
 80064b6:	8023      	strh	r3, [r4, #0]
 80064b8:	e01e      	b.n	80064f8 <main+0x1e4>
		} else {
			ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 80064ba:	23d0      	movs	r3, #208	; 0xd0
 80064bc:	b299      	uxth	r1, r3
 80064be:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80064c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	2301      	movs	r3, #1
 80064ca:	482c      	ldr	r0, [pc, #176]	; (800657c <main+0x268>)
 80064cc:	f7fb f99a 	bl	8001804 <HAL_I2C_Master_Receive>
 80064d0:	4603      	mov	r3, r0
 80064d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (ret != HAL_OK){
 80064d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d008      	beq.n	80064f0 <main+0x1dc>
				strcpy((char*)buf, "Error IMU R\r\n");
 80064de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80064e2:	4a28      	ldr	r2, [pc, #160]	; (8006584 <main+0x270>)
 80064e4:	461c      	mov	r4, r3
 80064e6:	4613      	mov	r3, r2
 80064e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064ea:	c407      	stmia	r4!, {r0, r1, r2}
 80064ec:	8023      	strh	r3, [r4, #0]
 80064ee:	e003      	b.n	80064f8 <main+0x1e4>
			} else {
				accel8l = (int8_t)buf[0];
 80064f0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80064f4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

		}

		//who am i WORKS

		buf[0] = 0x75;
 80064f8:	2375      	movs	r3, #117	; 0x75
 80064fa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 80064fe:	23d0      	movs	r3, #208	; 0xd0
 8006500:	b299      	uxth	r1, r3
 8006502:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	2301      	movs	r3, #1
 800650e:	481b      	ldr	r0, [pc, #108]	; (800657c <main+0x268>)
 8006510:	f7fb f87a 	bl	8001608 <HAL_I2C_Master_Transmit>
 8006514:	4603      	mov	r3, r0
 8006516:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if (ret != HAL_OK){
 800651a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800651e:	2b00      	cmp	r3, #0
 8006520:	d008      	beq.n	8006534 <main+0x220>
					strcpy((char*)buf, "Error IMU T\r\n");
 8006522:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006526:	4a16      	ldr	r2, [pc, #88]	; (8006580 <main+0x26c>)
 8006528:	461c      	mov	r4, r3
 800652a:	4613      	mov	r3, r2
 800652c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800652e:	c407      	stmia	r4!, {r0, r1, r2}
 8006530:	8023      	strh	r3, [r4, #0]
 8006532:	e02d      	b.n	8006590 <main+0x27c>
				} else {
					ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8006534:	23d0      	movs	r3, #208	; 0xd0
 8006536:	b299      	uxth	r1, r3
 8006538:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800653c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	2301      	movs	r3, #1
 8006544:	480d      	ldr	r0, [pc, #52]	; (800657c <main+0x268>)
 8006546:	f7fb f95d 	bl	8001804 <HAL_I2C_Master_Receive>
 800654a:	4603      	mov	r3, r0
 800654c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (ret != HAL_OK){
 8006550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006554:	2b00      	cmp	r3, #0
 8006556:	d017      	beq.n	8006588 <main+0x274>
						strcpy((char*)buf, "Error IMU R\r\n");
 8006558:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800655c:	4a09      	ldr	r2, [pc, #36]	; (8006584 <main+0x270>)
 800655e:	461c      	mov	r4, r3
 8006560:	4613      	mov	r3, r2
 8006562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006564:	c407      	stmia	r4!, {r0, r1, r2}
 8006566:	8023      	strh	r3, [r4, #0]
 8006568:	e012      	b.n	8006590 <main+0x27c>
 800656a:	bf00      	nop
 800656c:	20000738 	.word	0x20000738
 8006570:	40021000 	.word	0x40021000
 8006574:	08008530 	.word	0x08008530
 8006578:	200000f4 	.word	0x200000f4
 800657c:	20000618 	.word	0x20000618
 8006580:	08008538 	.word	0x08008538
 8006584:	08008548 	.word	0x08008548
					} else {
						accel8l = (int8_t)buf[0];
 8006588:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800658c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e


  	// --- SPI ----------------------------------------------------
  	//ROT0_nCS_GPIO_Port->BSRR = (uint32_t)ROT0_nCS_Pin << 16U;

  	uint16_t address = 0x0000;
 8006590:	2300      	movs	r3, #0
 8006592:	85fb      	strh	r3, [r7, #46]	; 0x2e
  	uint16_t value = 0x0000;
 8006594:	2300      	movs	r3, #0
 8006596:	85bb      	strh	r3, [r7, #44]	; 0x2c

  	// --- set ABI and enable PWM
  	//TODO: Error handling
  	address = AS_ADDR_SETTINGS1 | AS_WRITE ;
 8006598:	2318      	movs	r3, #24
 800659a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  	value = 0x0080 | AS_ODD;
 800659c:	f248 0380 	movw	r3, #32896	; 0x8080
 80065a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
  	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80065a2:	2200      	movs	r2, #0
 80065a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065a8:	488f      	ldr	r0, [pc, #572]	; (80067e8 <main+0x4d4>)
 80065aa:	f7fa fea9 	bl	8001300 <HAL_GPIO_WritePin>
  	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);
 80065ae:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 80065b2:	2301      	movs	r3, #1
 80065b4:	2201      	movs	r2, #1
 80065b6:	488d      	ldr	r0, [pc, #564]	; (80067ec <main+0x4d8>)
 80065b8:	f7fc fc32 	bl	8002e20 <HAL_SPI_Transmit>
  	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80065bc:	2201      	movs	r2, #1
 80065be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065c2:	4889      	ldr	r0, [pc, #548]	; (80067e8 <main+0x4d4>)
 80065c4:	f7fa fe9c 	bl	8001300 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80065c8:	2200      	movs	r2, #0
 80065ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065ce:	4886      	ldr	r0, [pc, #536]	; (80067e8 <main+0x4d4>)
 80065d0:	f7fa fe96 	bl	8001300 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint16_t *)&value, 1, 1);
 80065d4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80065d8:	2301      	movs	r3, #1
 80065da:	2201      	movs	r2, #1
 80065dc:	4883      	ldr	r0, [pc, #524]	; (80067ec <main+0x4d8>)
 80065de:	f7fc fc1f 	bl	8002e20 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80065e2:	2201      	movs	r2, #1
 80065e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065e8:	487f      	ldr	r0, [pc, #508]	; (80067e8 <main+0x4d4>)
 80065ea:	f7fa fe89 	bl	8001300 <HAL_GPIO_WritePin>

		// --- set steps 2000steps 500 pulses
		address = AS_ADDR_SETTINGS2 | AS_WRITE ;
 80065ee:	f248 0319 	movw	r3, #32793	; 0x8019
 80065f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		value = 0x0020 | AS_ODD;
 80065f4:	f248 0320 	movw	r3, #32800	; 0x8020
 80065f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80065fa:	2200      	movs	r2, #0
 80065fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006600:	4879      	ldr	r0, [pc, #484]	; (80067e8 <main+0x4d4>)
 8006602:	f7fa fe7d 	bl	8001300 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);
 8006606:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 800660a:	2301      	movs	r3, #1
 800660c:	2201      	movs	r2, #1
 800660e:	4877      	ldr	r0, [pc, #476]	; (80067ec <main+0x4d8>)
 8006610:	f7fc fc06 	bl	8002e20 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006614:	2201      	movs	r2, #1
 8006616:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800661a:	4873      	ldr	r0, [pc, #460]	; (80067e8 <main+0x4d4>)
 800661c:	f7fa fe70 	bl	8001300 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006620:	2200      	movs	r2, #0
 8006622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006626:	4870      	ldr	r0, [pc, #448]	; (80067e8 <main+0x4d4>)
 8006628:	f7fa fe6a 	bl	8001300 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint16_t *)&value, 1, 1);
 800662c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8006630:	2301      	movs	r3, #1
 8006632:	2201      	movs	r2, #1
 8006634:	486d      	ldr	r0, [pc, #436]	; (80067ec <main+0x4d8>)
 8006636:	f7fc fbf3 	bl	8002e20 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 800663a:	2201      	movs	r2, #1
 800663c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006640:	4869      	ldr	r0, [pc, #420]	; (80067e8 <main+0x4d4>)
 8006642:	f7fa fe5d 	bl	8001300 <HAL_GPIO_WritePin>

		// --- read angle
		address = 0x3FFE | AS_READ ;
 8006646:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800664a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint16_t angle = 0x0000;
 800664c:	2300      	movs	r3, #0
 800664e:	857b      	strh	r3, [r7, #42]	; 0x2a
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006650:	2200      	movs	r2, #0
 8006652:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006656:	4864      	ldr	r0, [pc, #400]	; (80067e8 <main+0x4d4>)
 8006658:	f7fa fe52 	bl	8001300 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);//this is the value
 800665c:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8006660:	2301      	movs	r3, #1
 8006662:	2201      	movs	r2, #1
 8006664:	4861      	ldr	r0, [pc, #388]	; (80067ec <main+0x4d8>)
 8006666:	f7fc fbdb 	bl	8002e20 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 800666a:	2201      	movs	r2, #1
 800666c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006670:	485d      	ldr	r0, [pc, #372]	; (80067e8 <main+0x4d4>)
 8006672:	f7fa fe45 	bl	8001300 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006676:	2200      	movs	r2, #0
 8006678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800667c:	485a      	ldr	r0, [pc, #360]	; (80067e8 <main+0x4d4>)
 800667e:	f7fa fe3f 	bl	8001300 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi2, (uint16_t *)&angle, 1, 1);
 8006682:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8006686:	2301      	movs	r3, #1
 8006688:	2201      	movs	r2, #1
 800668a:	4858      	ldr	r0, [pc, #352]	; (80067ec <main+0x4d8>)
 800668c:	f7fc fcfc 	bl	8003088 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006690:	2201      	movs	r2, #1
 8006692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006696:	4854      	ldr	r0, [pc, #336]	; (80067e8 <main+0x4d4>)
 8006698:	f7fa fe32 	bl	8001300 <HAL_GPIO_WritePin>

		// --- ENCODER --------------------------------------------------------------
		//Follow: http://www.emcu.eu/how-to-interface-the-rotary-encoder-to-stm32-cube-mx-atollic/
		//I think for encoder mode, you should be using HAL_TIM_IC_CaptureCallback and HAL_TIM_Encoder_Start_IT.
		//code? https://stm32f4-discovery.net/2014/08/library-26-rotary-encoder-stm32f4/
		EncVal = TIM8->CNT;
 800669c:	4b54      	ldr	r3, [pc, #336]	; (80067f0 <main+0x4dc>)
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	b21a      	sxth	r2, r3
 80066a2:	4b54      	ldr	r3, [pc, #336]	; (80067f4 <main+0x4e0>)
 80066a4:	801a      	strh	r2, [r3, #0]


  	// --- GPIO ----------------------------------------------------
  	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 80066a6:	2108      	movs	r1, #8
 80066a8:	4853      	ldr	r0, [pc, #332]	; (80067f8 <main+0x4e4>)
 80066aa:	f7fa fe42 	bl	8001332 <HAL_GPIO_TogglePin>
	  //HAL_GPIO_TogglePin(GENERATOR_GPIO_Port, GENERATOR_Pin);

  	//ROT0_nCS_GPIO_Port->BSRR = (uint32_t)ROT0_nCS_Pin << 16U;

	  GPIOE->BSRR = GPIO_PIN_4; //switches LD2
 80066ae:	4b52      	ldr	r3, [pc, #328]	; (80067f8 <main+0x4e4>)
 80066b0:	2210      	movs	r2, #16
 80066b2:	619a      	str	r2, [r3, #24]
//			TIM1->CCR2 = 0;
//			//GPIOE->BSRR = (uint32_t)GPIO_PIN_8 << 16U;
//		}

	  // --- TIMERS ----------------------------------------------------
	  TIM9->CCR1 = blink_duration;
 80066b4:	4a51      	ldr	r2, [pc, #324]	; (80067fc <main+0x4e8>)
 80066b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066b8:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM9->CCR2 = blink_duration;
 80066ba:	4a50      	ldr	r2, [pc, #320]	; (80067fc <main+0x4e8>)
 80066bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066be:	6393      	str	r3, [r2, #56]	; 0x38



	  i++;
 80066c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066c2:	3301      	adds	r3, #1
 80066c4:	667b      	str	r3, [r7, #100]	; 0x64

	  // --- UART ----------------------------------------------------
	  char buffer[20];
	  char buffer0[20];
	  //sprintf(buffer, "%f", Tval);
	  angle &= AS_DATA_MASK;
 80066c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80066c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	857b      	strh	r3, [r7, #42]	; 0x2a
	  itoa(EncVal, buffer0, 10);
 80066d0:	4b48      	ldr	r3, [pc, #288]	; (80067f4 <main+0x4e0>)
 80066d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066d6:	4618      	mov	r0, r3
 80066d8:	463b      	mov	r3, r7
 80066da:	220a      	movs	r2, #10
 80066dc:	4619      	mov	r1, r3
 80066de:	f001 faa9 	bl	8007c34 <itoa>
	  itoa(angle, buffer, 10);
 80066e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80066e4:	4618      	mov	r0, r3
 80066e6:	f107 0314 	add.w	r3, r7, #20
 80066ea:	220a      	movs	r2, #10
 80066ec:	4619      	mov	r1, r3
 80066ee:	f001 faa1 	bl	8007c34 <itoa>

	  HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 80066f2:	f107 0347 	add.w	r3, r7, #71	; 0x47
 80066f6:	2201      	movs	r2, #1
 80066f8:	4619      	mov	r1, r3
 80066fa:	4841      	ldr	r0, [pc, #260]	; (8006800 <main+0x4ec>)
 80066fc:	f7fe fcf2 	bl	80050e4 <HAL_UART_Receive_IT>

	  sprintf((char*)buf, strcat(strcat(strcat(strcat(buffer0, "_"), strncat(buffer, &ch, 1)),"#"), strcat(accel_char, "_\r\n")  ) );
 8006700:	463b      	mov	r3, r7
 8006702:	4618      	mov	r0, r3
 8006704:	f7f9 fd64 	bl	80001d0 <strlen>
 8006708:	4603      	mov	r3, r0
 800670a:	461a      	mov	r2, r3
 800670c:	463b      	mov	r3, r7
 800670e:	4413      	add	r3, r2
 8006710:	493c      	ldr	r1, [pc, #240]	; (8006804 <main+0x4f0>)
 8006712:	461a      	mov	r2, r3
 8006714:	460b      	mov	r3, r1
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	8013      	strh	r3, [r2, #0]
 800671a:	463c      	mov	r4, r7
 800671c:	f107 0147 	add.w	r1, r7, #71	; 0x47
 8006720:	f107 0314 	add.w	r3, r7, #20
 8006724:	2201      	movs	r2, #1
 8006726:	4618      	mov	r0, r3
 8006728:	f001 fabd 	bl	8007ca6 <strncat>
 800672c:	4603      	mov	r3, r0
 800672e:	4619      	mov	r1, r3
 8006730:	4620      	mov	r0, r4
 8006732:	f001 faa9 	bl	8007c88 <strcat>
 8006736:	4604      	mov	r4, r0
 8006738:	4620      	mov	r0, r4
 800673a:	f7f9 fd49 	bl	80001d0 <strlen>
 800673e:	4603      	mov	r3, r0
 8006740:	4423      	add	r3, r4
 8006742:	4931      	ldr	r1, [pc, #196]	; (8006808 <main+0x4f4>)
 8006744:	461a      	mov	r2, r3
 8006746:	460b      	mov	r3, r1
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	8013      	strh	r3, [r2, #0]
 800674c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006750:	4618      	mov	r0, r3
 8006752:	f7f9 fd3d 	bl	80001d0 <strlen>
 8006756:	4603      	mov	r3, r0
 8006758:	461a      	mov	r2, r3
 800675a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800675e:	4413      	add	r3, r2
 8006760:	4a2a      	ldr	r2, [pc, #168]	; (800680c <main+0x4f8>)
 8006762:	6810      	ldr	r0, [r2, #0]
 8006764:	6018      	str	r0, [r3, #0]
 8006766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800676a:	4619      	mov	r1, r3
 800676c:	4620      	mov	r0, r4
 800676e:	f001 fa8b 	bl	8007c88 <strcat>
 8006772:	4602      	mov	r2, r0
 8006774:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006778:	4611      	mov	r1, r2
 800677a:	4618      	mov	r0, r3
 800677c:	f001 fa64 	bl	8007c48 <siprintf>
	  HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), 1000);
 8006780:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006784:	4618      	mov	r0, r3
 8006786:	f7f9 fd23 	bl	80001d0 <strlen>
 800678a:	4603      	mov	r3, r0
 800678c:	b29a      	uxth	r2, r3
 800678e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006796:	481a      	ldr	r0, [pc, #104]	; (8006800 <main+0x4ec>)
 8006798:	f7fe fc0b 	bl	8004fb2 <HAL_UART_Transmit>

	  //HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);

	  switch(ch){
 800679c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80067a0:	2b73      	cmp	r3, #115	; 0x73
 80067a2:	d00c      	beq.n	80067be <main+0x4aa>
 80067a4:	2b77      	cmp	r3, #119	; 0x77
 80067a6:	d116      	bne.n	80067d6 <main+0x4c2>
			case 'w':
				ch='t';
 80067a8:	2374      	movs	r3, #116	; 0x74
 80067aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				blink_duration *= 2;
 80067ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	663b      	str	r3, [r7, #96]	; 0x60
				//HAL_GPIO_TogglePin(GENERATOR_GPIO_Port, GENERATOR_Pin);
				HAL_Delay(2000);
 80067b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80067b8:	f7f9 ff54 	bl	8000664 <HAL_Delay>
				break;
 80067bc:	e012      	b.n	80067e4 <main+0x4d0>
			case 's':
				ch='t';
 80067be:	2374      	movs	r3, #116	; 0x74
 80067c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				blink_duration /= 2;
 80067c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067c6:	0fda      	lsrs	r2, r3, #31
 80067c8:	4413      	add	r3, r2
 80067ca:	105b      	asrs	r3, r3, #1
 80067cc:	663b      	str	r3, [r7, #96]	; 0x60
				HAL_Delay(100);
 80067ce:	2064      	movs	r0, #100	; 0x64
 80067d0:	f7f9 ff48 	bl	8000664 <HAL_Delay>
				break;
 80067d4:	e006      	b.n	80067e4 <main+0x4d0>
			default:
				ch='t';
 80067d6:	2374      	movs	r3, #116	; 0x74
 80067d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				HAL_Delay(500);
 80067dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80067e0:	f7f9 ff40 	bl	8000664 <HAL_Delay>
  {
 80067e4:	e5ea      	b.n	80063bc <main+0xa8>
 80067e6:	bf00      	nop
 80067e8:	40020c00 	.word	0x40020c00
 80067ec:	2000009c 	.word	0x2000009c
 80067f0:	40010400 	.word	0x40010400
 80067f4:	200006f4 	.word	0x200006f4
 80067f8:	40021000 	.word	0x40021000
 80067fc:	40014000 	.word	0x40014000
 8006800:	20000134 	.word	0x20000134
 8006804:	08008558 	.word	0x08008558
 8006808:	0800855c 	.word	0x0800855c
 800680c:	08008560 	.word	0x08008560

08006810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b094      	sub	sp, #80	; 0x50
 8006814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006816:	f107 0320 	add.w	r3, r7, #32
 800681a:	2230      	movs	r2, #48	; 0x30
 800681c:	2100      	movs	r1, #0
 800681e:	4618      	mov	r0, r3
 8006820:	f001 fa0a 	bl	8007c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006824:	f107 030c 	add.w	r3, r7, #12
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	605a      	str	r2, [r3, #4]
 800682e:	609a      	str	r2, [r3, #8]
 8006830:	60da      	str	r2, [r3, #12]
 8006832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006834:	2300      	movs	r3, #0
 8006836:	60bb      	str	r3, [r7, #8]
 8006838:	4b29      	ldr	r3, [pc, #164]	; (80068e0 <SystemClock_Config+0xd0>)
 800683a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683c:	4a28      	ldr	r2, [pc, #160]	; (80068e0 <SystemClock_Config+0xd0>)
 800683e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006842:	6413      	str	r3, [r2, #64]	; 0x40
 8006844:	4b26      	ldr	r3, [pc, #152]	; (80068e0 <SystemClock_Config+0xd0>)
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800684c:	60bb      	str	r3, [r7, #8]
 800684e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006850:	2300      	movs	r3, #0
 8006852:	607b      	str	r3, [r7, #4]
 8006854:	4b23      	ldr	r3, [pc, #140]	; (80068e4 <SystemClock_Config+0xd4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a22      	ldr	r2, [pc, #136]	; (80068e4 <SystemClock_Config+0xd4>)
 800685a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	4b20      	ldr	r3, [pc, #128]	; (80068e4 <SystemClock_Config+0xd4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006868:	607b      	str	r3, [r7, #4]
 800686a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800686c:	2303      	movs	r3, #3
 800686e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006870:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006876:	2301      	movs	r3, #1
 8006878:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800687a:	2310      	movs	r3, #16
 800687c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800687e:	2302      	movs	r3, #2
 8006880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8006888:	230f      	movs	r3, #15
 800688a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800688c:	2390      	movs	r3, #144	; 0x90
 800688e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006890:	2302      	movs	r3, #2
 8006892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8006894:	2305      	movs	r3, #5
 8006896:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006898:	f107 0320 	add.w	r3, r7, #32
 800689c:	4618      	mov	r0, r3
 800689e:	f7fb fe1f 	bl	80024e0 <HAL_RCC_OscConfig>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80068a8:	f000 fc7c 	bl	80071a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80068ac:	230f      	movs	r3, #15
 80068ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80068b0:	2300      	movs	r3, #0
 80068b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80068b8:	2300      	movs	r3, #0
 80068ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80068bc:	2300      	movs	r3, #0
 80068be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80068c0:	f107 030c 	add.w	r3, r7, #12
 80068c4:	2100      	movs	r1, #0
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fc f87a 	bl	80029c0 <HAL_RCC_ClockConfig>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80068d2:	f000 fc67 	bl	80071a4 <Error_Handler>
  }
}
 80068d6:	bf00      	nop
 80068d8:	3750      	adds	r7, #80	; 0x50
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	40023800 	.word	0x40023800
 80068e4:	40007000 	.word	0x40007000

080068e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80068ee:	463b      	mov	r3, r7
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	605a      	str	r2, [r3, #4]
 80068f6:	609a      	str	r2, [r3, #8]
 80068f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80068fa:	4b21      	ldr	r3, [pc, #132]	; (8006980 <MX_ADC1_Init+0x98>)
 80068fc:	4a21      	ldr	r2, [pc, #132]	; (8006984 <MX_ADC1_Init+0x9c>)
 80068fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8006900:	4b1f      	ldr	r3, [pc, #124]	; (8006980 <MX_ADC1_Init+0x98>)
 8006902:	2200      	movs	r2, #0
 8006904:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006906:	4b1e      	ldr	r3, [pc, #120]	; (8006980 <MX_ADC1_Init+0x98>)
 8006908:	2200      	movs	r2, #0
 800690a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800690c:	4b1c      	ldr	r3, [pc, #112]	; (8006980 <MX_ADC1_Init+0x98>)
 800690e:	2200      	movs	r2, #0
 8006910:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006912:	4b1b      	ldr	r3, [pc, #108]	; (8006980 <MX_ADC1_Init+0x98>)
 8006914:	2200      	movs	r2, #0
 8006916:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006918:	4b19      	ldr	r3, [pc, #100]	; (8006980 <MX_ADC1_Init+0x98>)
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006920:	4b17      	ldr	r3, [pc, #92]	; (8006980 <MX_ADC1_Init+0x98>)
 8006922:	2200      	movs	r2, #0
 8006924:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006926:	4b16      	ldr	r3, [pc, #88]	; (8006980 <MX_ADC1_Init+0x98>)
 8006928:	4a17      	ldr	r2, [pc, #92]	; (8006988 <MX_ADC1_Init+0xa0>)
 800692a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800692c:	4b14      	ldr	r3, [pc, #80]	; (8006980 <MX_ADC1_Init+0x98>)
 800692e:	2200      	movs	r2, #0
 8006930:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8006932:	4b13      	ldr	r3, [pc, #76]	; (8006980 <MX_ADC1_Init+0x98>)
 8006934:	2201      	movs	r2, #1
 8006936:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006938:	4b11      	ldr	r3, [pc, #68]	; (8006980 <MX_ADC1_Init+0x98>)
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006940:	4b0f      	ldr	r3, [pc, #60]	; (8006980 <MX_ADC1_Init+0x98>)
 8006942:	2201      	movs	r2, #1
 8006944:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006946:	480e      	ldr	r0, [pc, #56]	; (8006980 <MX_ADC1_Init+0x98>)
 8006948:	f7f9 feae 	bl	80006a8 <HAL_ADC_Init>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8006952:	f000 fc27 	bl	80071a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006956:	2302      	movs	r3, #2
 8006958:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800695a:	2301      	movs	r3, #1
 800695c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800695e:	2300      	movs	r3, #0
 8006960:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006962:	463b      	mov	r3, r7
 8006964:	4619      	mov	r1, r3
 8006966:	4806      	ldr	r0, [pc, #24]	; (8006980 <MX_ADC1_Init+0x98>)
 8006968:	f7f9 fee2 	bl	8000730 <HAL_ADC_ConfigChannel>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8006972:	f000 fc17 	bl	80071a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006976:	bf00      	nop
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	2000066c 	.word	0x2000066c
 8006984:	40012000 	.word	0x40012000
 8006988:	0f000001 	.word	0x0f000001

0800698c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006992:	463b      	mov	r3, r7
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	605a      	str	r2, [r3, #4]
 800699a:	609a      	str	r2, [r3, #8]
 800699c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800699e:	4b21      	ldr	r3, [pc, #132]	; (8006a24 <MX_ADC2_Init+0x98>)
 80069a0:	4a21      	ldr	r2, [pc, #132]	; (8006a28 <MX_ADC2_Init+0x9c>)
 80069a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80069a4:	4b1f      	ldr	r3, [pc, #124]	; (8006a24 <MX_ADC2_Init+0x98>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80069aa:	4b1e      	ldr	r3, [pc, #120]	; (8006a24 <MX_ADC2_Init+0x98>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80069b0:	4b1c      	ldr	r3, [pc, #112]	; (8006a24 <MX_ADC2_Init+0x98>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80069b6:	4b1b      	ldr	r3, [pc, #108]	; (8006a24 <MX_ADC2_Init+0x98>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80069bc:	4b19      	ldr	r3, [pc, #100]	; (8006a24 <MX_ADC2_Init+0x98>)
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80069c4:	4b17      	ldr	r3, [pc, #92]	; (8006a24 <MX_ADC2_Init+0x98>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80069ca:	4b16      	ldr	r3, [pc, #88]	; (8006a24 <MX_ADC2_Init+0x98>)
 80069cc:	4a17      	ldr	r2, [pc, #92]	; (8006a2c <MX_ADC2_Init+0xa0>)
 80069ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80069d0:	4b14      	ldr	r3, [pc, #80]	; (8006a24 <MX_ADC2_Init+0x98>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80069d6:	4b13      	ldr	r3, [pc, #76]	; (8006a24 <MX_ADC2_Init+0x98>)
 80069d8:	2201      	movs	r2, #1
 80069da:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80069dc:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <MX_ADC2_Init+0x98>)
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80069e4:	4b0f      	ldr	r3, [pc, #60]	; (8006a24 <MX_ADC2_Init+0x98>)
 80069e6:	2201      	movs	r2, #1
 80069e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80069ea:	480e      	ldr	r0, [pc, #56]	; (8006a24 <MX_ADC2_Init+0x98>)
 80069ec:	f7f9 fe5c 	bl	80006a8 <HAL_ADC_Init>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80069f6:	f000 fbd5 	bl	80071a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80069fa:	230e      	movs	r3, #14
 80069fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80069fe:	2301      	movs	r3, #1
 8006a00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006a06:	463b      	mov	r3, r7
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4806      	ldr	r0, [pc, #24]	; (8006a24 <MX_ADC2_Init+0x98>)
 8006a0c:	f7f9 fe90 	bl	8000730 <HAL_ADC_ConfigChannel>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8006a16:	f000 fbc5 	bl	80071a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006a1a:	bf00      	nop
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20000174 	.word	0x20000174
 8006a28:	40012100 	.word	0x40012100
 8006a2c:	0f000001 	.word	0x0f000001

08006a30 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006a34:	4b16      	ldr	r3, [pc, #88]	; (8006a90 <MX_CAN1_Init+0x60>)
 8006a36:	4a17      	ldr	r2, [pc, #92]	; (8006a94 <MX_CAN1_Init+0x64>)
 8006a38:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8006a3a:	4b15      	ldr	r3, [pc, #84]	; (8006a90 <MX_CAN1_Init+0x60>)
 8006a3c:	2210      	movs	r2, #16
 8006a3e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006a40:	4b13      	ldr	r3, [pc, #76]	; (8006a90 <MX_CAN1_Init+0x60>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006a46:	4b12      	ldr	r3, [pc, #72]	; (8006a90 <MX_CAN1_Init+0x60>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8006a4c:	4b10      	ldr	r3, [pc, #64]	; (8006a90 <MX_CAN1_Init+0x60>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8006a52:	4b0f      	ldr	r3, [pc, #60]	; (8006a90 <MX_CAN1_Init+0x60>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006a58:	4b0d      	ldr	r3, [pc, #52]	; (8006a90 <MX_CAN1_Init+0x60>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <MX_CAN1_Init+0x60>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <MX_CAN1_Init+0x60>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006a6a:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <MX_CAN1_Init+0x60>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006a70:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <MX_CAN1_Init+0x60>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006a76:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <MX_CAN1_Init+0x60>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006a7c:	4804      	ldr	r0, [pc, #16]	; (8006a90 <MX_CAN1_Init+0x60>)
 8006a7e:	f7fa f875 	bl	8000b6c <HAL_CAN_Init>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8006a88:	f000 fb8c 	bl	80071a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8006a8c:	bf00      	nop
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	20000778 	.word	0x20000778
 8006a94:	40006400 	.word	0x40006400

08006a98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006a9c:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <MX_I2C1_Init+0x50>)
 8006a9e:	4a13      	ldr	r2, [pc, #76]	; (8006aec <MX_I2C1_Init+0x54>)
 8006aa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006aa2:	4b11      	ldr	r3, [pc, #68]	; (8006ae8 <MX_I2C1_Init+0x50>)
 8006aa4:	4a12      	ldr	r2, [pc, #72]	; (8006af0 <MX_I2C1_Init+0x58>)
 8006aa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006aa8:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <MX_I2C1_Init+0x50>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006aae:	4b0e      	ldr	r3, [pc, #56]	; (8006ae8 <MX_I2C1_Init+0x50>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006ab4:	4b0c      	ldr	r3, [pc, #48]	; (8006ae8 <MX_I2C1_Init+0x50>)
 8006ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006aba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006abc:	4b0a      	ldr	r3, [pc, #40]	; (8006ae8 <MX_I2C1_Init+0x50>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006ac2:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <MX_I2C1_Init+0x50>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006ac8:	4b07      	ldr	r3, [pc, #28]	; (8006ae8 <MX_I2C1_Init+0x50>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006ace:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <MX_I2C1_Init+0x50>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006ad4:	4804      	ldr	r0, [pc, #16]	; (8006ae8 <MX_I2C1_Init+0x50>)
 8006ad6:	f7fa fc5f 	bl	8001398 <HAL_I2C_Init>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006ae0:	f000 fb60 	bl	80071a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006ae4:	bf00      	nop
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	200001bc 	.word	0x200001bc
 8006aec:	40005400 	.word	0x40005400
 8006af0:	000186a0 	.word	0x000186a0

08006af4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006af8:	4b12      	ldr	r3, [pc, #72]	; (8006b44 <MX_I2C2_Init+0x50>)
 8006afa:	4a13      	ldr	r2, [pc, #76]	; (8006b48 <MX_I2C2_Init+0x54>)
 8006afc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006afe:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <MX_I2C2_Init+0x50>)
 8006b00:	4a12      	ldr	r2, [pc, #72]	; (8006b4c <MX_I2C2_Init+0x58>)
 8006b02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006b04:	4b0f      	ldr	r3, [pc, #60]	; (8006b44 <MX_I2C2_Init+0x50>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006b0a:	4b0e      	ldr	r3, [pc, #56]	; (8006b44 <MX_I2C2_Init+0x50>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006b10:	4b0c      	ldr	r3, [pc, #48]	; (8006b44 <MX_I2C2_Init+0x50>)
 8006b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006b18:	4b0a      	ldr	r3, [pc, #40]	; (8006b44 <MX_I2C2_Init+0x50>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006b1e:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <MX_I2C2_Init+0x50>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006b24:	4b07      	ldr	r3, [pc, #28]	; (8006b44 <MX_I2C2_Init+0x50>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006b2a:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <MX_I2C2_Init+0x50>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006b30:	4804      	ldr	r0, [pc, #16]	; (8006b44 <MX_I2C2_Init+0x50>)
 8006b32:	f7fa fc31 	bl	8001398 <HAL_I2C_Init>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006b3c:	f000 fb32 	bl	80071a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006b40:	bf00      	nop
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	20000618 	.word	0x20000618
 8006b48:	40005800 	.word	0x40005800
 8006b4c:	000186a0 	.word	0x000186a0

08006b50 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006b54:	4b18      	ldr	r3, [pc, #96]	; (8006bb8 <MX_SPI2_Init+0x68>)
 8006b56:	4a19      	ldr	r2, [pc, #100]	; (8006bbc <MX_SPI2_Init+0x6c>)
 8006b58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006b5a:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <MX_SPI2_Init+0x68>)
 8006b5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006b60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006b62:	4b15      	ldr	r3, [pc, #84]	; (8006bb8 <MX_SPI2_Init+0x68>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8006b68:	4b13      	ldr	r3, [pc, #76]	; (8006bb8 <MX_SPI2_Init+0x68>)
 8006b6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b6e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b70:	4b11      	ldr	r3, [pc, #68]	; (8006bb8 <MX_SPI2_Init+0x68>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006b76:	4b10      	ldr	r3, [pc, #64]	; (8006bb8 <MX_SPI2_Init+0x68>)
 8006b78:	2201      	movs	r2, #1
 8006b7a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8006b7c:	4b0e      	ldr	r3, [pc, #56]	; (8006bb8 <MX_SPI2_Init+0x68>)
 8006b7e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006b82:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006b84:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <MX_SPI2_Init+0x68>)
 8006b86:	2218      	movs	r2, #24
 8006b88:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006b8a:	4b0b      	ldr	r3, [pc, #44]	; (8006bb8 <MX_SPI2_Init+0x68>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006b90:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <MX_SPI2_Init+0x68>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b96:	4b08      	ldr	r3, [pc, #32]	; (8006bb8 <MX_SPI2_Init+0x68>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006b9c:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <MX_SPI2_Init+0x68>)
 8006b9e:	220a      	movs	r2, #10
 8006ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006ba2:	4805      	ldr	r0, [pc, #20]	; (8006bb8 <MX_SPI2_Init+0x68>)
 8006ba4:	f7fc f8d8 	bl	8002d58 <HAL_SPI_Init>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8006bae:	f000 faf9 	bl	80071a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006bb2:	bf00      	nop
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	2000009c 	.word	0x2000009c
 8006bbc:	40003800 	.word	0x40003800

08006bc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b096      	sub	sp, #88	; 0x58
 8006bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006bc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	605a      	str	r2, [r3, #4]
 8006bd0:	609a      	str	r2, [r3, #8]
 8006bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006bd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	605a      	str	r2, [r3, #4]
 8006be8:	609a      	str	r2, [r3, #8]
 8006bea:	60da      	str	r2, [r3, #12]
 8006bec:	611a      	str	r2, [r3, #16]
 8006bee:	615a      	str	r2, [r3, #20]
 8006bf0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006bf2:	1d3b      	adds	r3, r7, #4
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f001 f81d 	bl	8007c38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006bfe:	4b4a      	ldr	r3, [pc, #296]	; (8006d28 <MX_TIM1_Init+0x168>)
 8006c00:	4a4a      	ldr	r2, [pc, #296]	; (8006d2c <MX_TIM1_Init+0x16c>)
 8006c02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 8006c04:	4b48      	ldr	r3, [pc, #288]	; (8006d28 <MX_TIM1_Init+0x168>)
 8006c06:	2202      	movs	r2, #2
 8006c08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c0a:	4b47      	ldr	r3, [pc, #284]	; (8006d28 <MX_TIM1_Init+0x168>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 8006c10:	4b45      	ldr	r3, [pc, #276]	; (8006d28 <MX_TIM1_Init+0x168>)
 8006c12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c18:	4b43      	ldr	r3, [pc, #268]	; (8006d28 <MX_TIM1_Init+0x168>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006c1e:	4b42      	ldr	r3, [pc, #264]	; (8006d28 <MX_TIM1_Init+0x168>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c24:	4b40      	ldr	r3, [pc, #256]	; (8006d28 <MX_TIM1_Init+0x168>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006c2a:	483f      	ldr	r0, [pc, #252]	; (8006d28 <MX_TIM1_Init+0x168>)
 8006c2c:	f7fc ff08 	bl	8003a40 <HAL_TIM_Base_Init>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006c36:	f000 fab5 	bl	80071a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c3e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006c40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c44:	4619      	mov	r1, r3
 8006c46:	4838      	ldr	r0, [pc, #224]	; (8006d28 <MX_TIM1_Init+0x168>)
 8006c48:	f7fd fb60 	bl	800430c <HAL_TIM_ConfigClockSource>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8006c52:	f000 faa7 	bl	80071a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006c56:	4834      	ldr	r0, [pc, #208]	; (8006d28 <MX_TIM1_Init+0x168>)
 8006c58:	f7fc ff5c 	bl	8003b14 <HAL_TIM_PWM_Init>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8006c62:	f000 fa9f 	bl	80071a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c66:	2300      	movs	r3, #0
 8006c68:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006c6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c72:	4619      	mov	r1, r3
 8006c74:	482c      	ldr	r0, [pc, #176]	; (8006d28 <MX_TIM1_Init+0x168>)
 8006c76:	f7fe f86d 	bl	8004d54 <HAL_TIMEx_MasterConfigSynchronization>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8006c80:	f000 fa90 	bl	80071a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006c84:	2360      	movs	r3, #96	; 0x60
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006c90:	2300      	movs	r3, #0
 8006c92:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c94:	2300      	movs	r3, #0
 8006c96:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	481f      	ldr	r0, [pc, #124]	; (8006d28 <MX_TIM1_Init+0x168>)
 8006caa:	f7fd fa69 	bl	8004180 <HAL_TIM_PWM_ConfigChannel>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8006cb4:	f000 fa76 	bl	80071a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cbc:	2204      	movs	r2, #4
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4819      	ldr	r0, [pc, #100]	; (8006d28 <MX_TIM1_Init+0x168>)
 8006cc2:	f7fd fa5d 	bl	8004180 <HAL_TIM_PWM_ConfigChannel>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8006ccc:	f000 fa6a 	bl	80071a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cd4:	2208      	movs	r2, #8
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4813      	ldr	r0, [pc, #76]	; (8006d28 <MX_TIM1_Init+0x168>)
 8006cda:	f7fd fa51 	bl	8004180 <HAL_TIM_PWM_ConfigChannel>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8006ce4:	f000 fa5e 	bl	80071a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006d02:	2300      	movs	r3, #0
 8006d04:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006d06:	1d3b      	adds	r3, r7, #4
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4807      	ldr	r0, [pc, #28]	; (8006d28 <MX_TIM1_Init+0x168>)
 8006d0c:	f7fe f89e 	bl	8004e4c <HAL_TIMEx_ConfigBreakDeadTime>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8006d16:	f000 fa45 	bl	80071a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006d1a:	4803      	ldr	r0, [pc, #12]	; (8006d28 <MX_TIM1_Init+0x168>)
 8006d1c:	f000 fd3e 	bl	800779c <HAL_TIM_MspPostInit>

}
 8006d20:	bf00      	nop
 8006d22:	3758      	adds	r7, #88	; 0x58
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	200006f8 	.word	0x200006f8
 8006d2c:	40010000 	.word	0x40010000

08006d30 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08c      	sub	sp, #48	; 0x30
 8006d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006d36:	f107 030c 	add.w	r3, r7, #12
 8006d3a:	2224      	movs	r2, #36	; 0x24
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 ff7a 	bl	8007c38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d44:	1d3b      	adds	r3, r7, #4
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006d4c:	4b22      	ldr	r3, [pc, #136]	; (8006dd8 <MX_TIM8_Init+0xa8>)
 8006d4e:	4a23      	ldr	r2, [pc, #140]	; (8006ddc <MX_TIM8_Init+0xac>)
 8006d50:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006d52:	4b21      	ldr	r3, [pc, #132]	; (8006dd8 <MX_TIM8_Init+0xa8>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d58:	4b1f      	ldr	r3, [pc, #124]	; (8006dd8 <MX_TIM8_Init+0xa8>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006d5e:	4b1e      	ldr	r3, [pc, #120]	; (8006dd8 <MX_TIM8_Init+0xa8>)
 8006d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d64:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d66:	4b1c      	ldr	r3, [pc, #112]	; (8006dd8 <MX_TIM8_Init+0xa8>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006d6c:	4b1a      	ldr	r3, [pc, #104]	; (8006dd8 <MX_TIM8_Init+0xa8>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d72:	4b19      	ldr	r3, [pc, #100]	; (8006dd8 <MX_TIM8_Init+0xa8>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006d80:	2301      	movs	r3, #1
 8006d82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006d84:	2300      	movs	r3, #0
 8006d86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006d90:	2301      	movs	r3, #1
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006d94:	2300      	movs	r3, #0
 8006d96:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006d9c:	f107 030c 	add.w	r3, r7, #12
 8006da0:	4619      	mov	r1, r3
 8006da2:	480d      	ldr	r0, [pc, #52]	; (8006dd8 <MX_TIM8_Init+0xa8>)
 8006da4:	f7fc ff5f 	bl	8003c66 <HAL_TIM_Encoder_Init>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006dae:	f000 f9f9 	bl	80071a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006db2:	2300      	movs	r3, #0
 8006db4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006dba:	1d3b      	adds	r3, r7, #4
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4806      	ldr	r0, [pc, #24]	; (8006dd8 <MX_TIM8_Init+0xa8>)
 8006dc0:	f7fd ffc8 	bl	8004d54 <HAL_TIMEx_MasterConfigSynchronization>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006dca:	f000 f9eb 	bl	80071a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006dce:	bf00      	nop
 8006dd0:	3730      	adds	r7, #48	; 0x30
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	200000f4 	.word	0x200000f4
 8006ddc:	40010400 	.word	0x40010400

08006de0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08c      	sub	sp, #48	; 0x30
 8006de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006de6:	f107 0320 	add.w	r3, r7, #32
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	605a      	str	r2, [r3, #4]
 8006df0:	609a      	str	r2, [r3, #8]
 8006df2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006df4:	1d3b      	adds	r3, r7, #4
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	605a      	str	r2, [r3, #4]
 8006dfc:	609a      	str	r2, [r3, #8]
 8006dfe:	60da      	str	r2, [r3, #12]
 8006e00:	611a      	str	r2, [r3, #16]
 8006e02:	615a      	str	r2, [r3, #20]
 8006e04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8006e06:	4b2d      	ldr	r3, [pc, #180]	; (8006ebc <MX_TIM9_Init+0xdc>)
 8006e08:	4a2d      	ldr	r2, [pc, #180]	; (8006ec0 <MX_TIM9_Init+0xe0>)
 8006e0a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2;
 8006e0c:	4b2b      	ldr	r3, [pc, #172]	; (8006ebc <MX_TIM9_Init+0xdc>)
 8006e0e:	2202      	movs	r2, #2
 8006e10:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e12:	4b2a      	ldr	r3, [pc, #168]	; (8006ebc <MX_TIM9_Init+0xdc>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096;
 8006e18:	4b28      	ldr	r3, [pc, #160]	; (8006ebc <MX_TIM9_Init+0xdc>)
 8006e1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e1e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006e20:	4b26      	ldr	r3, [pc, #152]	; (8006ebc <MX_TIM9_Init+0xdc>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e26:	4b25      	ldr	r3, [pc, #148]	; (8006ebc <MX_TIM9_Init+0xdc>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8006e2c:	4823      	ldr	r0, [pc, #140]	; (8006ebc <MX_TIM9_Init+0xdc>)
 8006e2e:	f7fc fe07 	bl	8003a40 <HAL_TIM_Base_Init>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8006e38:	f000 f9b4 	bl	80071a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e40:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8006e42:	f107 0320 	add.w	r3, r7, #32
 8006e46:	4619      	mov	r1, r3
 8006e48:	481c      	ldr	r0, [pc, #112]	; (8006ebc <MX_TIM9_Init+0xdc>)
 8006e4a:	f7fd fa5f 	bl	800430c <HAL_TIM_ConfigClockSource>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8006e54:	f000 f9a6 	bl	80071a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8006e58:	4818      	ldr	r0, [pc, #96]	; (8006ebc <MX_TIM9_Init+0xdc>)
 8006e5a:	f7fc fe5b 	bl	8003b14 <HAL_TIM_PWM_Init>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8006e64:	f000 f99e 	bl	80071a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006e68:	2360      	movs	r3, #96	; 0x60
 8006e6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8006e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006e76:	2300      	movs	r3, #0
 8006e78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006e7a:	1d3b      	adds	r3, r7, #4
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	4619      	mov	r1, r3
 8006e80:	480e      	ldr	r0, [pc, #56]	; (8006ebc <MX_TIM9_Init+0xdc>)
 8006e82:	f7fd f97d 	bl	8004180 <HAL_TIM_PWM_ConfigChannel>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8006e8c:	f000 f98a 	bl	80071a4 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8006e90:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006e94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006e96:	1d3b      	adds	r3, r7, #4
 8006e98:	2204      	movs	r2, #4
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4807      	ldr	r0, [pc, #28]	; (8006ebc <MX_TIM9_Init+0xdc>)
 8006e9e:	f7fd f96f 	bl	8004180 <HAL_TIM_PWM_ConfigChannel>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <MX_TIM9_Init+0xcc>
  {
    Error_Handler();
 8006ea8:	f000 f97c 	bl	80071a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8006eac:	4803      	ldr	r0, [pc, #12]	; (8006ebc <MX_TIM9_Init+0xdc>)
 8006eae:	f000 fc75 	bl	800779c <HAL_TIM_MspPostInit>

}
 8006eb2:	bf00      	nop
 8006eb4:	3730      	adds	r7, #48	; 0x30
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000738 	.word	0x20000738
 8006ec0:	40014000 	.word	0x40014000

08006ec4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8006eca:	463b      	mov	r3, r7
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	605a      	str	r2, [r3, #4]
 8006ed2:	609a      	str	r2, [r3, #8]
 8006ed4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006ed6:	4b1c      	ldr	r3, [pc, #112]	; (8006f48 <MX_TIM13_Init+0x84>)
 8006ed8:	4a1c      	ldr	r2, [pc, #112]	; (8006f4c <MX_TIM13_Init+0x88>)
 8006eda:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8006edc:	4b1a      	ldr	r3, [pc, #104]	; (8006f48 <MX_TIM13_Init+0x84>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ee2:	4b19      	ldr	r3, [pc, #100]	; (8006f48 <MX_TIM13_Init+0x84>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8006ee8:	4b17      	ldr	r3, [pc, #92]	; (8006f48 <MX_TIM13_Init+0x84>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006eee:	4b16      	ldr	r3, [pc, #88]	; (8006f48 <MX_TIM13_Init+0x84>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ef4:	4b14      	ldr	r3, [pc, #80]	; (8006f48 <MX_TIM13_Init+0x84>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006efa:	4813      	ldr	r0, [pc, #76]	; (8006f48 <MX_TIM13_Init+0x84>)
 8006efc:	f7fc fda0 	bl	8003a40 <HAL_TIM_Base_Init>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <MX_TIM13_Init+0x46>
  {
    Error_Handler();
 8006f06:	f000 f94d 	bl	80071a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8006f0a:	480f      	ldr	r0, [pc, #60]	; (8006f48 <MX_TIM13_Init+0x84>)
 8006f0c:	f7fc fe76 	bl	8003bfc <HAL_TIM_IC_Init>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <MX_TIM13_Init+0x56>
  {
    Error_Handler();
 8006f16:	f000 f945 	bl	80071a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4805      	ldr	r0, [pc, #20]	; (8006f48 <MX_TIM13_Init+0x84>)
 8006f32:	f7fd f889 	bl	8004048 <HAL_TIM_IC_ConfigChannel>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <MX_TIM13_Init+0x7c>
  {
    Error_Handler();
 8006f3c:	f000 f932 	bl	80071a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006f40:	bf00      	nop
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	200006b4 	.word	0x200006b4
 8006f4c:	40001c00 	.word	0x40001c00

08006f50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006f54:	4b11      	ldr	r3, [pc, #68]	; (8006f9c <MX_USART3_UART_Init+0x4c>)
 8006f56:	4a12      	ldr	r2, [pc, #72]	; (8006fa0 <MX_USART3_UART_Init+0x50>)
 8006f58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006f5a:	4b10      	ldr	r3, [pc, #64]	; (8006f9c <MX_USART3_UART_Init+0x4c>)
 8006f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006f60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006f62:	4b0e      	ldr	r3, [pc, #56]	; (8006f9c <MX_USART3_UART_Init+0x4c>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006f68:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <MX_USART3_UART_Init+0x4c>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006f6e:	4b0b      	ldr	r3, [pc, #44]	; (8006f9c <MX_USART3_UART_Init+0x4c>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006f74:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <MX_USART3_UART_Init+0x4c>)
 8006f76:	220c      	movs	r2, #12
 8006f78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f7a:	4b08      	ldr	r3, [pc, #32]	; (8006f9c <MX_USART3_UART_Init+0x4c>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f80:	4b06      	ldr	r3, [pc, #24]	; (8006f9c <MX_USART3_UART_Init+0x4c>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006f86:	4805      	ldr	r0, [pc, #20]	; (8006f9c <MX_USART3_UART_Init+0x4c>)
 8006f88:	f7fd ffc6 	bl	8004f18 <HAL_UART_Init>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006f92:	f000 f907 	bl	80071a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006f96:	bf00      	nop
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000134 	.word	0x20000134
 8006fa0:	40004800 	.word	0x40004800

08006fa4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006fa8:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006faa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006fae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006fb0:	4b12      	ldr	r3, [pc, #72]	; (8006ffc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006fb2:	2204      	movs	r2, #4
 8006fb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006fb6:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006fb8:	2202      	movs	r2, #2
 8006fba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006fbc:	4b0f      	ldr	r3, [pc, #60]	; (8006ffc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006fc2:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006fc8:	4b0c      	ldr	r3, [pc, #48]	; (8006ffc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006fce:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006fd4:	4b09      	ldr	r3, [pc, #36]	; (8006ffc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006fda:	4b08      	ldr	r3, [pc, #32]	; (8006ffc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006fe0:	4b06      	ldr	r3, [pc, #24]	; (8006ffc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006fe6:	4805      	ldr	r0, [pc, #20]	; (8006ffc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006fe8:	f7fb f95d 	bl	80022a6 <HAL_PCD_Init>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8006ff2:	f000 f8d7 	bl	80071a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8006ff6:	bf00      	nop
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000210 	.word	0x20000210

08007000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08c      	sub	sp, #48	; 0x30
 8007004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007006:	f107 031c 	add.w	r3, r7, #28
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	605a      	str	r2, [r3, #4]
 8007010:	609a      	str	r2, [r3, #8]
 8007012:	60da      	str	r2, [r3, #12]
 8007014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007016:	2300      	movs	r3, #0
 8007018:	61bb      	str	r3, [r7, #24]
 800701a:	4b50      	ldr	r3, [pc, #320]	; (800715c <MX_GPIO_Init+0x15c>)
 800701c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701e:	4a4f      	ldr	r2, [pc, #316]	; (800715c <MX_GPIO_Init+0x15c>)
 8007020:	f043 0310 	orr.w	r3, r3, #16
 8007024:	6313      	str	r3, [r2, #48]	; 0x30
 8007026:	4b4d      	ldr	r3, [pc, #308]	; (800715c <MX_GPIO_Init+0x15c>)
 8007028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702a:	f003 0310 	and.w	r3, r3, #16
 800702e:	61bb      	str	r3, [r7, #24]
 8007030:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007032:	2300      	movs	r3, #0
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	4b49      	ldr	r3, [pc, #292]	; (800715c <MX_GPIO_Init+0x15c>)
 8007038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703a:	4a48      	ldr	r2, [pc, #288]	; (800715c <MX_GPIO_Init+0x15c>)
 800703c:	f043 0304 	orr.w	r3, r3, #4
 8007040:	6313      	str	r3, [r2, #48]	; 0x30
 8007042:	4b46      	ldr	r3, [pc, #280]	; (800715c <MX_GPIO_Init+0x15c>)
 8007044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800704e:	2300      	movs	r3, #0
 8007050:	613b      	str	r3, [r7, #16]
 8007052:	4b42      	ldr	r3, [pc, #264]	; (800715c <MX_GPIO_Init+0x15c>)
 8007054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007056:	4a41      	ldr	r2, [pc, #260]	; (800715c <MX_GPIO_Init+0x15c>)
 8007058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800705c:	6313      	str	r3, [r2, #48]	; 0x30
 800705e:	4b3f      	ldr	r3, [pc, #252]	; (800715c <MX_GPIO_Init+0x15c>)
 8007060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800706a:	2300      	movs	r3, #0
 800706c:	60fb      	str	r3, [r7, #12]
 800706e:	4b3b      	ldr	r3, [pc, #236]	; (800715c <MX_GPIO_Init+0x15c>)
 8007070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007072:	4a3a      	ldr	r2, [pc, #232]	; (800715c <MX_GPIO_Init+0x15c>)
 8007074:	f043 0301 	orr.w	r3, r3, #1
 8007078:	6313      	str	r3, [r2, #48]	; 0x30
 800707a:	4b38      	ldr	r3, [pc, #224]	; (800715c <MX_GPIO_Init+0x15c>)
 800707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007086:	2300      	movs	r3, #0
 8007088:	60bb      	str	r3, [r7, #8]
 800708a:	4b34      	ldr	r3, [pc, #208]	; (800715c <MX_GPIO_Init+0x15c>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	4a33      	ldr	r2, [pc, #204]	; (800715c <MX_GPIO_Init+0x15c>)
 8007090:	f043 0302 	orr.w	r3, r3, #2
 8007094:	6313      	str	r3, [r2, #48]	; 0x30
 8007096:	4b31      	ldr	r3, [pc, #196]	; (800715c <MX_GPIO_Init+0x15c>)
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	60bb      	str	r3, [r7, #8]
 80070a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80070a2:	2300      	movs	r3, #0
 80070a4:	607b      	str	r3, [r7, #4]
 80070a6:	4b2d      	ldr	r3, [pc, #180]	; (800715c <MX_GPIO_Init+0x15c>)
 80070a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070aa:	4a2c      	ldr	r2, [pc, #176]	; (800715c <MX_GPIO_Init+0x15c>)
 80070ac:	f043 0308 	orr.w	r3, r3, #8
 80070b0:	6313      	str	r3, [r2, #48]	; 0x30
 80070b2:	4b2a      	ldr	r3, [pc, #168]	; (800715c <MX_GPIO_Init+0x15c>)
 80070b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	607b      	str	r3, [r7, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin, GPIO_PIN_RESET);
 80070be:	2200      	movs	r2, #0
 80070c0:	f24c 0118 	movw	r1, #49176	; 0xc018
 80070c4:	4826      	ldr	r0, [pc, #152]	; (8007160 <MX_GPIO_Init+0x160>)
 80070c6:	f7fa f91b 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROT0_nCS_Pin|nSCS_Pin, GPIO_PIN_RESET);
 80070ca:	2200      	movs	r2, #0
 80070cc:	f248 0180 	movw	r1, #32896	; 0x8080
 80070d0:	4824      	ldr	r0, [pc, #144]	; (8007164 <MX_GPIO_Init+0x164>)
 80070d2:	f7fa f915 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin EN_GATE_Pin M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin;
 80070d6:	f24c 0318 	movw	r3, #49176	; 0xc018
 80070da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070dc:	2301      	movs	r3, #1
 80070de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e0:	2300      	movs	r3, #0
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070e4:	2300      	movs	r3, #0
 80070e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80070e8:	f107 031c 	add.w	r3, r7, #28
 80070ec:	4619      	mov	r1, r3
 80070ee:	481c      	ldr	r0, [pc, #112]	; (8007160 <MX_GPIO_Init+0x160>)
 80070f0:	f7f9 ff6c 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT0_nCS_Pin nSCS_Pin */
  GPIO_InitStruct.Pin = ROT0_nCS_Pin|nSCS_Pin;
 80070f4:	f248 0380 	movw	r3, #32896	; 0x8080
 80070f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070fa:	2301      	movs	r3, #1
 80070fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007102:	2300      	movs	r3, #0
 8007104:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007106:	f107 031c 	add.w	r3, r7, #28
 800710a:	4619      	mov	r1, r3
 800710c:	4815      	ldr	r0, [pc, #84]	; (8007164 <MX_GPIO_Init+0x164>)
 800710e:	f7f9 ff5d 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT0_I_W_Pin */
  GPIO_InitStruct.Pin = ROT0_I_W_Pin;
 8007112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007118:	4b13      	ldr	r3, [pc, #76]	; (8007168 <MX_GPIO_Init+0x168>)
 800711a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800711c:	2300      	movs	r3, #0
 800711e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ROT0_I_W_GPIO_Port, &GPIO_InitStruct);
 8007120:	f107 031c 	add.w	r3, r7, #28
 8007124:	4619      	mov	r1, r3
 8007126:	4811      	ldr	r0, [pc, #68]	; (800716c <MX_GPIO_Init+0x16c>)
 8007128:	f7f9 ff50 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 800712c:	2370      	movs	r3, #112	; 0x70
 800712e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007130:	2300      	movs	r3, #0
 8007132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007134:	2301      	movs	r3, #1
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007138:	f107 031c 	add.w	r3, r7, #28
 800713c:	4619      	mov	r1, r3
 800713e:	4809      	ldr	r0, [pc, #36]	; (8007164 <MX_GPIO_Init+0x164>)
 8007140:	f7f9 ff44 	bl	8000fcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8007144:	2200      	movs	r2, #0
 8007146:	2100      	movs	r1, #0
 8007148:	2017      	movs	r0, #23
 800714a:	f7f9 fee6 	bl	8000f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800714e:	2017      	movs	r0, #23
 8007150:	f7f9 feff 	bl	8000f52 <HAL_NVIC_EnableIRQ>

}
 8007154:	bf00      	nop
 8007156:	3730      	adds	r7, #48	; 0x30
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	40023800 	.word	0x40023800
 8007160:	40021000 	.word	0x40021000
 8007164:	40020c00 	.word	0x40020c00
 8007168:	10110000 	.word	0x10110000
 800716c:	40020800 	.word	0x40020800

08007170 <HAL_GPIO_EXTI_Callback>:
//	else{
//		__NOP();
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	4603      	mov	r3, r0
 8007178:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT0_I_W_Pin){
 800717a:	88fb      	ldrh	r3, [r7, #6]
 800717c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007180:	d107      	bne.n	8007192 <HAL_GPIO_EXTI_Callback+0x22>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8007182:	2108      	movs	r1, #8
 8007184:	4805      	ldr	r0, [pc, #20]	; (800719c <HAL_GPIO_EXTI_Callback+0x2c>)
 8007186:	f7fa f8d4 	bl	8001332 <HAL_GPIO_TogglePin>
		TIM8->CNT = 0;     //TODO: there is acually some stepping happening under the I pulse so we have to distinguish between step from right and step from left
 800718a:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <HAL_GPIO_EXTI_Callback+0x30>)
 800718c:	2200      	movs	r2, #0
 800718e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	else{
		__NOP();
	}
}
 8007190:	e000      	b.n	8007194 <HAL_GPIO_EXTI_Callback+0x24>
		__NOP();
 8007192:	bf00      	nop
}
 8007194:	bf00      	nop
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	40021000 	.word	0x40021000
 80071a0:	40010400 	.word	0x40010400

080071a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80071a8:	bf00      	nop
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
	...

080071b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071ba:	2300      	movs	r3, #0
 80071bc:	607b      	str	r3, [r7, #4]
 80071be:	4b10      	ldr	r3, [pc, #64]	; (8007200 <HAL_MspInit+0x4c>)
 80071c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c2:	4a0f      	ldr	r2, [pc, #60]	; (8007200 <HAL_MspInit+0x4c>)
 80071c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071c8:	6453      	str	r3, [r2, #68]	; 0x44
 80071ca:	4b0d      	ldr	r3, [pc, #52]	; (8007200 <HAL_MspInit+0x4c>)
 80071cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071d2:	607b      	str	r3, [r7, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80071d6:	2300      	movs	r3, #0
 80071d8:	603b      	str	r3, [r7, #0]
 80071da:	4b09      	ldr	r3, [pc, #36]	; (8007200 <HAL_MspInit+0x4c>)
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	4a08      	ldr	r2, [pc, #32]	; (8007200 <HAL_MspInit+0x4c>)
 80071e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e4:	6413      	str	r3, [r2, #64]	; 0x40
 80071e6:	4b06      	ldr	r3, [pc, #24]	; (8007200 <HAL_MspInit+0x4c>)
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	40023800 	.word	0x40023800

08007204 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08e      	sub	sp, #56	; 0x38
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800720c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	609a      	str	r2, [r3, #8]
 8007218:	60da      	str	r2, [r3, #12]
 800721a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a48      	ldr	r2, [pc, #288]	; (8007344 <HAL_ADC_MspInit+0x140>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d142      	bne.n	80072ac <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007226:	2300      	movs	r3, #0
 8007228:	623b      	str	r3, [r7, #32]
 800722a:	4b47      	ldr	r3, [pc, #284]	; (8007348 <HAL_ADC_MspInit+0x144>)
 800722c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722e:	4a46      	ldr	r2, [pc, #280]	; (8007348 <HAL_ADC_MspInit+0x144>)
 8007230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007234:	6453      	str	r3, [r2, #68]	; 0x44
 8007236:	4b44      	ldr	r3, [pc, #272]	; (8007348 <HAL_ADC_MspInit+0x144>)
 8007238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723e:	623b      	str	r3, [r7, #32]
 8007240:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007242:	2300      	movs	r3, #0
 8007244:	61fb      	str	r3, [r7, #28]
 8007246:	4b40      	ldr	r3, [pc, #256]	; (8007348 <HAL_ADC_MspInit+0x144>)
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	4a3f      	ldr	r2, [pc, #252]	; (8007348 <HAL_ADC_MspInit+0x144>)
 800724c:	f043 0304 	orr.w	r3, r3, #4
 8007250:	6313      	str	r3, [r2, #48]	; 0x30
 8007252:	4b3d      	ldr	r3, [pc, #244]	; (8007348 <HAL_ADC_MspInit+0x144>)
 8007254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007256:	f003 0304 	and.w	r3, r3, #4
 800725a:	61fb      	str	r3, [r7, #28]
 800725c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800725e:	2300      	movs	r3, #0
 8007260:	61bb      	str	r3, [r7, #24]
 8007262:	4b39      	ldr	r3, [pc, #228]	; (8007348 <HAL_ADC_MspInit+0x144>)
 8007264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007266:	4a38      	ldr	r2, [pc, #224]	; (8007348 <HAL_ADC_MspInit+0x144>)
 8007268:	f043 0301 	orr.w	r3, r3, #1
 800726c:	6313      	str	r3, [r2, #48]	; 0x30
 800726e:	4b36      	ldr	r3, [pc, #216]	; (8007348 <HAL_ADC_MspInit+0x144>)
 8007270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	61bb      	str	r3, [r7, #24]
 8007278:	69bb      	ldr	r3, [r7, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = ASENSE_Pin|BSENSE_Pin|CSENSE_Pin;
 800727a:	230e      	movs	r3, #14
 800727c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800727e:	2303      	movs	r3, #3
 8007280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007282:	2300      	movs	r3, #0
 8007284:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800728a:	4619      	mov	r1, r3
 800728c:	482f      	ldr	r0, [pc, #188]	; (800734c <HAL_ADC_MspInit+0x148>)
 800728e:	f7f9 fe9d 	bl	8000fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_Pin|M0_SO1_Pin|M0_SO2_Pin|TEMP_Pin 
 8007292:	233e      	movs	r3, #62	; 0x3e
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007296:	2303      	movs	r3, #3
 8007298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800729a:	2300      	movs	r3, #0
 800729c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800729e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072a2:	4619      	mov	r1, r3
 80072a4:	482a      	ldr	r0, [pc, #168]	; (8007350 <HAL_ADC_MspInit+0x14c>)
 80072a6:	f7f9 fe91 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80072aa:	e046      	b.n	800733a <HAL_ADC_MspInit+0x136>
  else if(hadc->Instance==ADC2)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a28      	ldr	r2, [pc, #160]	; (8007354 <HAL_ADC_MspInit+0x150>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d141      	bne.n	800733a <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80072b6:	2300      	movs	r3, #0
 80072b8:	617b      	str	r3, [r7, #20]
 80072ba:	4b23      	ldr	r3, [pc, #140]	; (8007348 <HAL_ADC_MspInit+0x144>)
 80072bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072be:	4a22      	ldr	r2, [pc, #136]	; (8007348 <HAL_ADC_MspInit+0x144>)
 80072c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072c4:	6453      	str	r3, [r2, #68]	; 0x44
 80072c6:	4b20      	ldr	r3, [pc, #128]	; (8007348 <HAL_ADC_MspInit+0x144>)
 80072c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ce:	617b      	str	r3, [r7, #20]
 80072d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80072d2:	2300      	movs	r3, #0
 80072d4:	613b      	str	r3, [r7, #16]
 80072d6:	4b1c      	ldr	r3, [pc, #112]	; (8007348 <HAL_ADC_MspInit+0x144>)
 80072d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072da:	4a1b      	ldr	r2, [pc, #108]	; (8007348 <HAL_ADC_MspInit+0x144>)
 80072dc:	f043 0304 	orr.w	r3, r3, #4
 80072e0:	6313      	str	r3, [r2, #48]	; 0x30
 80072e2:	4b19      	ldr	r3, [pc, #100]	; (8007348 <HAL_ADC_MspInit+0x144>)
 80072e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	613b      	str	r3, [r7, #16]
 80072ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072ee:	2300      	movs	r3, #0
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	4b15      	ldr	r3, [pc, #84]	; (8007348 <HAL_ADC_MspInit+0x144>)
 80072f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f6:	4a14      	ldr	r2, [pc, #80]	; (8007348 <HAL_ADC_MspInit+0x144>)
 80072f8:	f043 0302 	orr.w	r3, r3, #2
 80072fc:	6313      	str	r3, [r2, #48]	; 0x30
 80072fe:	4b12      	ldr	r3, [pc, #72]	; (8007348 <HAL_ADC_MspInit+0x144>)
 8007300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STRAIN0_Pin|STRAIN1_Pin;
 800730a:	2330      	movs	r3, #48	; 0x30
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800730e:	2303      	movs	r3, #3
 8007310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007312:	2300      	movs	r3, #0
 8007314:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800731a:	4619      	mov	r1, r3
 800731c:	480b      	ldr	r0, [pc, #44]	; (800734c <HAL_ADC_MspInit+0x148>)
 800731e:	f7f9 fe55 	bl	8000fcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBUS_S_Pin;
 8007322:	2301      	movs	r3, #1
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007326:	2303      	movs	r3, #3
 8007328:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800732a:	2300      	movs	r3, #0
 800732c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VBUS_S_GPIO_Port, &GPIO_InitStruct);
 800732e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007332:	4619      	mov	r1, r3
 8007334:	4808      	ldr	r0, [pc, #32]	; (8007358 <HAL_ADC_MspInit+0x154>)
 8007336:	f7f9 fe49 	bl	8000fcc <HAL_GPIO_Init>
}
 800733a:	bf00      	nop
 800733c:	3738      	adds	r7, #56	; 0x38
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	40012000 	.word	0x40012000
 8007348:	40023800 	.word	0x40023800
 800734c:	40020800 	.word	0x40020800
 8007350:	40020000 	.word	0x40020000
 8007354:	40012100 	.word	0x40012100
 8007358:	40020400 	.word	0x40020400

0800735c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08a      	sub	sp, #40	; 0x28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007364:	f107 0314 	add.w	r3, r7, #20
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	605a      	str	r2, [r3, #4]
 800736e:	609a      	str	r2, [r3, #8]
 8007370:	60da      	str	r2, [r3, #12]
 8007372:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a19      	ldr	r2, [pc, #100]	; (80073e0 <HAL_CAN_MspInit+0x84>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d12b      	bne.n	80073d6 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800737e:	2300      	movs	r3, #0
 8007380:	613b      	str	r3, [r7, #16]
 8007382:	4b18      	ldr	r3, [pc, #96]	; (80073e4 <HAL_CAN_MspInit+0x88>)
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	4a17      	ldr	r2, [pc, #92]	; (80073e4 <HAL_CAN_MspInit+0x88>)
 8007388:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800738c:	6413      	str	r3, [r2, #64]	; 0x40
 800738e:	4b15      	ldr	r3, [pc, #84]	; (80073e4 <HAL_CAN_MspInit+0x88>)
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007396:	613b      	str	r3, [r7, #16]
 8007398:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	4b11      	ldr	r3, [pc, #68]	; (80073e4 <HAL_CAN_MspInit+0x88>)
 80073a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a2:	4a10      	ldr	r2, [pc, #64]	; (80073e4 <HAL_CAN_MspInit+0x88>)
 80073a4:	f043 0308 	orr.w	r3, r3, #8
 80073a8:	6313      	str	r3, [r2, #48]	; 0x30
 80073aa:	4b0e      	ldr	r3, [pc, #56]	; (80073e4 <HAL_CAN_MspInit+0x88>)
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	f003 0308 	and.w	r3, r3, #8
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80073b6:	2303      	movs	r3, #3
 80073b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ba:	2302      	movs	r3, #2
 80073bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073be:	2300      	movs	r3, #0
 80073c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073c2:	2303      	movs	r3, #3
 80073c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80073c6:	2309      	movs	r3, #9
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80073ca:	f107 0314 	add.w	r3, r7, #20
 80073ce:	4619      	mov	r1, r3
 80073d0:	4805      	ldr	r0, [pc, #20]	; (80073e8 <HAL_CAN_MspInit+0x8c>)
 80073d2:	f7f9 fdfb 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80073d6:	bf00      	nop
 80073d8:	3728      	adds	r7, #40	; 0x28
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	40006400 	.word	0x40006400
 80073e4:	40023800 	.word	0x40023800
 80073e8:	40020c00 	.word	0x40020c00

080073ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08c      	sub	sp, #48	; 0x30
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073f4:	f107 031c 	add.w	r3, r7, #28
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	605a      	str	r2, [r3, #4]
 80073fe:	609a      	str	r2, [r3, #8]
 8007400:	60da      	str	r2, [r3, #12]
 8007402:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a32      	ldr	r2, [pc, #200]	; (80074d4 <HAL_I2C_MspInit+0xe8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d12c      	bne.n	8007468 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800740e:	2300      	movs	r3, #0
 8007410:	61bb      	str	r3, [r7, #24]
 8007412:	4b31      	ldr	r3, [pc, #196]	; (80074d8 <HAL_I2C_MspInit+0xec>)
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	4a30      	ldr	r2, [pc, #192]	; (80074d8 <HAL_I2C_MspInit+0xec>)
 8007418:	f043 0302 	orr.w	r3, r3, #2
 800741c:	6313      	str	r3, [r2, #48]	; 0x30
 800741e:	4b2e      	ldr	r3, [pc, #184]	; (80074d8 <HAL_I2C_MspInit+0xec>)
 8007420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	61bb      	str	r3, [r7, #24]
 8007428:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800742a:	23c0      	movs	r3, #192	; 0xc0
 800742c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800742e:	2312      	movs	r3, #18
 8007430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007432:	2301      	movs	r3, #1
 8007434:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007436:	2303      	movs	r3, #3
 8007438:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800743a:	2304      	movs	r3, #4
 800743c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800743e:	f107 031c 	add.w	r3, r7, #28
 8007442:	4619      	mov	r1, r3
 8007444:	4825      	ldr	r0, [pc, #148]	; (80074dc <HAL_I2C_MspInit+0xf0>)
 8007446:	f7f9 fdc1 	bl	8000fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800744a:	2300      	movs	r3, #0
 800744c:	617b      	str	r3, [r7, #20]
 800744e:	4b22      	ldr	r3, [pc, #136]	; (80074d8 <HAL_I2C_MspInit+0xec>)
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	4a21      	ldr	r2, [pc, #132]	; (80074d8 <HAL_I2C_MspInit+0xec>)
 8007454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007458:	6413      	str	r3, [r2, #64]	; 0x40
 800745a:	4b1f      	ldr	r3, [pc, #124]	; (80074d8 <HAL_I2C_MspInit+0xec>)
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007466:	e031      	b.n	80074cc <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a1c      	ldr	r2, [pc, #112]	; (80074e0 <HAL_I2C_MspInit+0xf4>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d12c      	bne.n	80074cc <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007472:	2300      	movs	r3, #0
 8007474:	613b      	str	r3, [r7, #16]
 8007476:	4b18      	ldr	r3, [pc, #96]	; (80074d8 <HAL_I2C_MspInit+0xec>)
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	4a17      	ldr	r2, [pc, #92]	; (80074d8 <HAL_I2C_MspInit+0xec>)
 800747c:	f043 0302 	orr.w	r3, r3, #2
 8007480:	6313      	str	r3, [r2, #48]	; 0x30
 8007482:	4b15      	ldr	r3, [pc, #84]	; (80074d8 <HAL_I2C_MspInit+0xec>)
 8007484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	613b      	str	r3, [r7, #16]
 800748c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800748e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007494:	2312      	movs	r3, #18
 8007496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007498:	2301      	movs	r3, #1
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800749c:	2303      	movs	r3, #3
 800749e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80074a0:	2304      	movs	r3, #4
 80074a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074a4:	f107 031c 	add.w	r3, r7, #28
 80074a8:	4619      	mov	r1, r3
 80074aa:	480c      	ldr	r0, [pc, #48]	; (80074dc <HAL_I2C_MspInit+0xf0>)
 80074ac:	f7f9 fd8e 	bl	8000fcc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	4b08      	ldr	r3, [pc, #32]	; (80074d8 <HAL_I2C_MspInit+0xec>)
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	4a07      	ldr	r2, [pc, #28]	; (80074d8 <HAL_I2C_MspInit+0xec>)
 80074ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074be:	6413      	str	r3, [r2, #64]	; 0x40
 80074c0:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <HAL_I2C_MspInit+0xec>)
 80074c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	68fb      	ldr	r3, [r7, #12]
}
 80074cc:	bf00      	nop
 80074ce:	3730      	adds	r7, #48	; 0x30
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	40005400 	.word	0x40005400
 80074d8:	40023800 	.word	0x40023800
 80074dc:	40020400 	.word	0x40020400
 80074e0:	40005800 	.word	0x40005800

080074e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08a      	sub	sp, #40	; 0x28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074ec:	f107 0314 	add.w	r3, r7, #20
 80074f0:	2200      	movs	r2, #0
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	605a      	str	r2, [r3, #4]
 80074f6:	609a      	str	r2, [r3, #8]
 80074f8:	60da      	str	r2, [r3, #12]
 80074fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a1d      	ldr	r2, [pc, #116]	; (8007578 <HAL_SPI_MspInit+0x94>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d134      	bne.n	8007570 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007506:	2300      	movs	r3, #0
 8007508:	613b      	str	r3, [r7, #16]
 800750a:	4b1c      	ldr	r3, [pc, #112]	; (800757c <HAL_SPI_MspInit+0x98>)
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	4a1b      	ldr	r2, [pc, #108]	; (800757c <HAL_SPI_MspInit+0x98>)
 8007510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007514:	6413      	str	r3, [r2, #64]	; 0x40
 8007516:	4b19      	ldr	r3, [pc, #100]	; (800757c <HAL_SPI_MspInit+0x98>)
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	4b15      	ldr	r3, [pc, #84]	; (800757c <HAL_SPI_MspInit+0x98>)
 8007528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752a:	4a14      	ldr	r2, [pc, #80]	; (800757c <HAL_SPI_MspInit+0x98>)
 800752c:	f043 0302 	orr.w	r3, r3, #2
 8007530:	6313      	str	r3, [r2, #48]	; 0x30
 8007532:	4b12      	ldr	r3, [pc, #72]	; (800757c <HAL_SPI_MspInit+0x98>)
 8007534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800753e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007544:	2302      	movs	r3, #2
 8007546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007548:	2300      	movs	r3, #0
 800754a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800754c:	2303      	movs	r3, #3
 800754e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007550:	2305      	movs	r3, #5
 8007552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007554:	f107 0314 	add.w	r3, r7, #20
 8007558:	4619      	mov	r1, r3
 800755a:	4809      	ldr	r0, [pc, #36]	; (8007580 <HAL_SPI_MspInit+0x9c>)
 800755c:	f7f9 fd36 	bl	8000fcc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007560:	2200      	movs	r2, #0
 8007562:	2100      	movs	r1, #0
 8007564:	2024      	movs	r0, #36	; 0x24
 8007566:	f7f9 fcd8 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800756a:	2024      	movs	r0, #36	; 0x24
 800756c:	f7f9 fcf1 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007570:	bf00      	nop
 8007572:	3728      	adds	r7, #40	; 0x28
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	40003800 	.word	0x40003800
 800757c:	40023800 	.word	0x40023800
 8007580:	40020400 	.word	0x40020400

08007584 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08c      	sub	sp, #48	; 0x30
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800758c:	f107 031c 	add.w	r3, r7, #28
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	605a      	str	r2, [r3, #4]
 8007596:	609a      	str	r2, [r3, #8]
 8007598:	60da      	str	r2, [r3, #12]
 800759a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a45      	ldr	r2, [pc, #276]	; (80076b8 <HAL_TIM_Base_MspInit+0x134>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d12e      	bne.n	8007604 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80075a6:	2300      	movs	r3, #0
 80075a8:	61bb      	str	r3, [r7, #24]
 80075aa:	4b44      	ldr	r3, [pc, #272]	; (80076bc <HAL_TIM_Base_MspInit+0x138>)
 80075ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ae:	4a43      	ldr	r2, [pc, #268]	; (80076bc <HAL_TIM_Base_MspInit+0x138>)
 80075b0:	f043 0301 	orr.w	r3, r3, #1
 80075b4:	6453      	str	r3, [r2, #68]	; 0x44
 80075b6:	4b41      	ldr	r3, [pc, #260]	; (80076bc <HAL_TIM_Base_MspInit+0x138>)
 80075b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	61bb      	str	r3, [r7, #24]
 80075c0:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80075c2:	2200      	movs	r2, #0
 80075c4:	2100      	movs	r1, #0
 80075c6:	2018      	movs	r0, #24
 80075c8:	f7f9 fca7 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80075cc:	2018      	movs	r0, #24
 80075ce:	f7f9 fcc0 	bl	8000f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80075d2:	2200      	movs	r2, #0
 80075d4:	2100      	movs	r1, #0
 80075d6:	2019      	movs	r0, #25
 80075d8:	f7f9 fc9f 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80075dc:	2019      	movs	r0, #25
 80075de:	f7f9 fcb8 	bl	8000f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80075e2:	2200      	movs	r2, #0
 80075e4:	2100      	movs	r1, #0
 80075e6:	201a      	movs	r0, #26
 80075e8:	f7f9 fc97 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80075ec:	201a      	movs	r0, #26
 80075ee:	f7f9 fcb0 	bl	8000f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80075f2:	2200      	movs	r2, #0
 80075f4:	2100      	movs	r1, #0
 80075f6:	201b      	movs	r0, #27
 80075f8:	f7f9 fc8f 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80075fc:	201b      	movs	r0, #27
 80075fe:	f7f9 fca8 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8007602:	e054      	b.n	80076ae <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM9)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a2d      	ldr	r2, [pc, #180]	; (80076c0 <HAL_TIM_Base_MspInit+0x13c>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d116      	bne.n	800763c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800760e:	2300      	movs	r3, #0
 8007610:	617b      	str	r3, [r7, #20]
 8007612:	4b2a      	ldr	r3, [pc, #168]	; (80076bc <HAL_TIM_Base_MspInit+0x138>)
 8007614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007616:	4a29      	ldr	r2, [pc, #164]	; (80076bc <HAL_TIM_Base_MspInit+0x138>)
 8007618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800761c:	6453      	str	r3, [r2, #68]	; 0x44
 800761e:	4b27      	ldr	r3, [pc, #156]	; (80076bc <HAL_TIM_Base_MspInit+0x138>)
 8007620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007626:	617b      	str	r3, [r7, #20]
 8007628:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800762a:	2200      	movs	r2, #0
 800762c:	2100      	movs	r1, #0
 800762e:	2018      	movs	r0, #24
 8007630:	f7f9 fc73 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8007634:	2018      	movs	r0, #24
 8007636:	f7f9 fc8c 	bl	8000f52 <HAL_NVIC_EnableIRQ>
}
 800763a:	e038      	b.n	80076ae <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM13)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a20      	ldr	r2, [pc, #128]	; (80076c4 <HAL_TIM_Base_MspInit+0x140>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d133      	bne.n	80076ae <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007646:	2300      	movs	r3, #0
 8007648:	613b      	str	r3, [r7, #16]
 800764a:	4b1c      	ldr	r3, [pc, #112]	; (80076bc <HAL_TIM_Base_MspInit+0x138>)
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	4a1b      	ldr	r2, [pc, #108]	; (80076bc <HAL_TIM_Base_MspInit+0x138>)
 8007650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007654:	6413      	str	r3, [r2, #64]	; 0x40
 8007656:	4b19      	ldr	r3, [pc, #100]	; (80076bc <HAL_TIM_Base_MspInit+0x138>)
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765e:	613b      	str	r3, [r7, #16]
 8007660:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007662:	2300      	movs	r3, #0
 8007664:	60fb      	str	r3, [r7, #12]
 8007666:	4b15      	ldr	r3, [pc, #84]	; (80076bc <HAL_TIM_Base_MspInit+0x138>)
 8007668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766a:	4a14      	ldr	r2, [pc, #80]	; (80076bc <HAL_TIM_Base_MspInit+0x138>)
 800766c:	f043 0301 	orr.w	r3, r3, #1
 8007670:	6313      	str	r3, [r2, #48]	; 0x30
 8007672:	4b12      	ldr	r3, [pc, #72]	; (80076bc <HAL_TIM_Base_MspInit+0x138>)
 8007674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800767e:	2340      	movs	r3, #64	; 0x40
 8007680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007682:	2302      	movs	r3, #2
 8007684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007686:	2300      	movs	r3, #0
 8007688:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800768a:	2300      	movs	r3, #0
 800768c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800768e:	2309      	movs	r3, #9
 8007690:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007692:	f107 031c 	add.w	r3, r7, #28
 8007696:	4619      	mov	r1, r3
 8007698:	480b      	ldr	r0, [pc, #44]	; (80076c8 <HAL_TIM_Base_MspInit+0x144>)
 800769a:	f7f9 fc97 	bl	8000fcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800769e:	2200      	movs	r2, #0
 80076a0:	2100      	movs	r1, #0
 80076a2:	202c      	movs	r0, #44	; 0x2c
 80076a4:	f7f9 fc39 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80076a8:	202c      	movs	r0, #44	; 0x2c
 80076aa:	f7f9 fc52 	bl	8000f52 <HAL_NVIC_EnableIRQ>
}
 80076ae:	bf00      	nop
 80076b0:	3730      	adds	r7, #48	; 0x30
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	40010000 	.word	0x40010000
 80076bc:	40023800 	.word	0x40023800
 80076c0:	40014000 	.word	0x40014000
 80076c4:	40001c00 	.word	0x40001c00
 80076c8:	40020000 	.word	0x40020000

080076cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08a      	sub	sp, #40	; 0x28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076d4:	f107 0314 	add.w	r3, r7, #20
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	605a      	str	r2, [r3, #4]
 80076de:	609a      	str	r2, [r3, #8]
 80076e0:	60da      	str	r2, [r3, #12]
 80076e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a29      	ldr	r2, [pc, #164]	; (8007790 <HAL_TIM_Encoder_MspInit+0xc4>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d14b      	bne.n	8007786 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80076ee:	2300      	movs	r3, #0
 80076f0:	613b      	str	r3, [r7, #16]
 80076f2:	4b28      	ldr	r3, [pc, #160]	; (8007794 <HAL_TIM_Encoder_MspInit+0xc8>)
 80076f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f6:	4a27      	ldr	r2, [pc, #156]	; (8007794 <HAL_TIM_Encoder_MspInit+0xc8>)
 80076f8:	f043 0302 	orr.w	r3, r3, #2
 80076fc:	6453      	str	r3, [r2, #68]	; 0x44
 80076fe:	4b25      	ldr	r3, [pc, #148]	; (8007794 <HAL_TIM_Encoder_MspInit+0xc8>)
 8007700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	613b      	str	r3, [r7, #16]
 8007708:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800770a:	2300      	movs	r3, #0
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	4b21      	ldr	r3, [pc, #132]	; (8007794 <HAL_TIM_Encoder_MspInit+0xc8>)
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	4a20      	ldr	r2, [pc, #128]	; (8007794 <HAL_TIM_Encoder_MspInit+0xc8>)
 8007714:	f043 0304 	orr.w	r3, r3, #4
 8007718:	6313      	str	r3, [r2, #48]	; 0x30
 800771a:	4b1e      	ldr	r3, [pc, #120]	; (8007794 <HAL_TIM_Encoder_MspInit+0xc8>)
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007726:	23c0      	movs	r3, #192	; 0xc0
 8007728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800772a:	2302      	movs	r3, #2
 800772c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800772e:	2300      	movs	r3, #0
 8007730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007732:	2300      	movs	r3, #0
 8007734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007736:	2303      	movs	r3, #3
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800773a:	f107 0314 	add.w	r3, r7, #20
 800773e:	4619      	mov	r1, r3
 8007740:	4815      	ldr	r0, [pc, #84]	; (8007798 <HAL_TIM_Encoder_MspInit+0xcc>)
 8007742:	f7f9 fc43 	bl	8000fcc <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8007746:	2200      	movs	r2, #0
 8007748:	2100      	movs	r1, #0
 800774a:	202b      	movs	r0, #43	; 0x2b
 800774c:	f7f9 fbe5 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8007750:	202b      	movs	r0, #43	; 0x2b
 8007752:	f7f9 fbfe 	bl	8000f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007756:	2200      	movs	r2, #0
 8007758:	2100      	movs	r1, #0
 800775a:	202c      	movs	r0, #44	; 0x2c
 800775c:	f7f9 fbdd 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007760:	202c      	movs	r0, #44	; 0x2c
 8007762:	f7f9 fbf6 	bl	8000f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8007766:	2200      	movs	r2, #0
 8007768:	2100      	movs	r1, #0
 800776a:	202d      	movs	r0, #45	; 0x2d
 800776c:	f7f9 fbd5 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8007770:	202d      	movs	r0, #45	; 0x2d
 8007772:	f7f9 fbee 	bl	8000f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8007776:	2200      	movs	r2, #0
 8007778:	2100      	movs	r1, #0
 800777a:	202e      	movs	r0, #46	; 0x2e
 800777c:	f7f9 fbcd 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8007780:	202e      	movs	r0, #46	; 0x2e
 8007782:	f7f9 fbe6 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007786:	bf00      	nop
 8007788:	3728      	adds	r7, #40	; 0x28
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	40010400 	.word	0x40010400
 8007794:	40023800 	.word	0x40023800
 8007798:	40020800 	.word	0x40020800

0800779c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08a      	sub	sp, #40	; 0x28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077a4:	f107 0314 	add.w	r3, r7, #20
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	605a      	str	r2, [r3, #4]
 80077ae:	609a      	str	r2, [r3, #8]
 80077b0:	60da      	str	r2, [r3, #12]
 80077b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a24      	ldr	r2, [pc, #144]	; (800784c <HAL_TIM_MspPostInit+0xb0>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d11f      	bne.n	80077fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80077be:	2300      	movs	r3, #0
 80077c0:	613b      	str	r3, [r7, #16]
 80077c2:	4b23      	ldr	r3, [pc, #140]	; (8007850 <HAL_TIM_MspPostInit+0xb4>)
 80077c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c6:	4a22      	ldr	r2, [pc, #136]	; (8007850 <HAL_TIM_MspPostInit+0xb4>)
 80077c8:	f043 0310 	orr.w	r3, r3, #16
 80077cc:	6313      	str	r3, [r2, #48]	; 0x30
 80077ce:	4b20      	ldr	r3, [pc, #128]	; (8007850 <HAL_TIM_MspPostInit+0xb4>)
 80077d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d2:	f003 0310 	and.w	r3, r3, #16
 80077d6:	613b      	str	r3, [r7, #16]
 80077d8:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80077da:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 80077de:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077e0:	2302      	movs	r3, #2
 80077e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077e8:	2300      	movs	r3, #0
 80077ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80077ec:	2301      	movs	r3, #1
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80077f0:	f107 0314 	add.w	r3, r7, #20
 80077f4:	4619      	mov	r1, r3
 80077f6:	4817      	ldr	r0, [pc, #92]	; (8007854 <HAL_TIM_MspPostInit+0xb8>)
 80077f8:	f7f9 fbe8 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80077fc:	e022      	b.n	8007844 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a15      	ldr	r2, [pc, #84]	; (8007858 <HAL_TIM_MspPostInit+0xbc>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d11d      	bne.n	8007844 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007808:	2300      	movs	r3, #0
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	4b10      	ldr	r3, [pc, #64]	; (8007850 <HAL_TIM_MspPostInit+0xb4>)
 800780e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007810:	4a0f      	ldr	r2, [pc, #60]	; (8007850 <HAL_TIM_MspPostInit+0xb4>)
 8007812:	f043 0310 	orr.w	r3, r3, #16
 8007816:	6313      	str	r3, [r2, #48]	; 0x30
 8007818:	4b0d      	ldr	r3, [pc, #52]	; (8007850 <HAL_TIM_MspPostInit+0xb4>)
 800781a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781c:	f003 0310 	and.w	r3, r3, #16
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007824:	2360      	movs	r3, #96	; 0x60
 8007826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007828:	2302      	movs	r3, #2
 800782a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800782c:	2300      	movs	r3, #0
 800782e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007830:	2300      	movs	r3, #0
 8007832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8007834:	2303      	movs	r3, #3
 8007836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007838:	f107 0314 	add.w	r3, r7, #20
 800783c:	4619      	mov	r1, r3
 800783e:	4805      	ldr	r0, [pc, #20]	; (8007854 <HAL_TIM_MspPostInit+0xb8>)
 8007840:	f7f9 fbc4 	bl	8000fcc <HAL_GPIO_Init>
}
 8007844:	bf00      	nop
 8007846:	3728      	adds	r7, #40	; 0x28
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	40010000 	.word	0x40010000
 8007850:	40023800 	.word	0x40023800
 8007854:	40021000 	.word	0x40021000
 8007858:	40014000 	.word	0x40014000

0800785c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08a      	sub	sp, #40	; 0x28
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007864:	f107 0314 	add.w	r3, r7, #20
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	605a      	str	r2, [r3, #4]
 800786e:	609a      	str	r2, [r3, #8]
 8007870:	60da      	str	r2, [r3, #12]
 8007872:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a1d      	ldr	r2, [pc, #116]	; (80078f0 <HAL_UART_MspInit+0x94>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d134      	bne.n	80078e8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800787e:	2300      	movs	r3, #0
 8007880:	613b      	str	r3, [r7, #16]
 8007882:	4b1c      	ldr	r3, [pc, #112]	; (80078f4 <HAL_UART_MspInit+0x98>)
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	4a1b      	ldr	r2, [pc, #108]	; (80078f4 <HAL_UART_MspInit+0x98>)
 8007888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800788c:	6413      	str	r3, [r2, #64]	; 0x40
 800788e:	4b19      	ldr	r3, [pc, #100]	; (80078f4 <HAL_UART_MspInit+0x98>)
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007896:	613b      	str	r3, [r7, #16]
 8007898:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	4b15      	ldr	r3, [pc, #84]	; (80078f4 <HAL_UART_MspInit+0x98>)
 80078a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a2:	4a14      	ldr	r2, [pc, #80]	; (80078f4 <HAL_UART_MspInit+0x98>)
 80078a4:	f043 0308 	orr.w	r3, r3, #8
 80078a8:	6313      	str	r3, [r2, #48]	; 0x30
 80078aa:	4b12      	ldr	r3, [pc, #72]	; (80078f4 <HAL_UART_MspInit+0x98>)
 80078ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ae:	f003 0308 	and.w	r3, r3, #8
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80078b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80078ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078bc:	2302      	movs	r3, #2
 80078be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80078c0:	2301      	movs	r3, #1
 80078c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078c4:	2303      	movs	r3, #3
 80078c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80078c8:	2307      	movs	r3, #7
 80078ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80078cc:	f107 0314 	add.w	r3, r7, #20
 80078d0:	4619      	mov	r1, r3
 80078d2:	4809      	ldr	r0, [pc, #36]	; (80078f8 <HAL_UART_MspInit+0x9c>)
 80078d4:	f7f9 fb7a 	bl	8000fcc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80078d8:	2200      	movs	r2, #0
 80078da:	2100      	movs	r1, #0
 80078dc:	2027      	movs	r0, #39	; 0x27
 80078de:	f7f9 fb1c 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80078e2:	2027      	movs	r0, #39	; 0x27
 80078e4:	f7f9 fb35 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80078e8:	bf00      	nop
 80078ea:	3728      	adds	r7, #40	; 0x28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	40004800 	.word	0x40004800
 80078f4:	40023800 	.word	0x40023800
 80078f8:	40020c00 	.word	0x40020c00

080078fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08a      	sub	sp, #40	; 0x28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007904:	f107 0314 	add.w	r3, r7, #20
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	605a      	str	r2, [r3, #4]
 800790e:	609a      	str	r2, [r3, #8]
 8007910:	60da      	str	r2, [r3, #12]
 8007912:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800791c:	d132      	bne.n	8007984 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800791e:	2300      	movs	r3, #0
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	4b1a      	ldr	r3, [pc, #104]	; (800798c <HAL_PCD_MspInit+0x90>)
 8007924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007926:	4a19      	ldr	r2, [pc, #100]	; (800798c <HAL_PCD_MspInit+0x90>)
 8007928:	f043 0301 	orr.w	r3, r3, #1
 800792c:	6313      	str	r3, [r2, #48]	; 0x30
 800792e:	4b17      	ldr	r3, [pc, #92]	; (800798c <HAL_PCD_MspInit+0x90>)
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	613b      	str	r3, [r7, #16]
 8007938:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800793a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800793e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007940:	2302      	movs	r3, #2
 8007942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007944:	2300      	movs	r3, #0
 8007946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007948:	2303      	movs	r3, #3
 800794a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800794c:	230a      	movs	r3, #10
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007950:	f107 0314 	add.w	r3, r7, #20
 8007954:	4619      	mov	r1, r3
 8007956:	480e      	ldr	r0, [pc, #56]	; (8007990 <HAL_PCD_MspInit+0x94>)
 8007958:	f7f9 fb38 	bl	8000fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800795c:	4b0b      	ldr	r3, [pc, #44]	; (800798c <HAL_PCD_MspInit+0x90>)
 800795e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007960:	4a0a      	ldr	r2, [pc, #40]	; (800798c <HAL_PCD_MspInit+0x90>)
 8007962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007966:	6353      	str	r3, [r2, #52]	; 0x34
 8007968:	2300      	movs	r3, #0
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	4b07      	ldr	r3, [pc, #28]	; (800798c <HAL_PCD_MspInit+0x90>)
 800796e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007970:	4a06      	ldr	r2, [pc, #24]	; (800798c <HAL_PCD_MspInit+0x90>)
 8007972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007976:	6453      	str	r3, [r2, #68]	; 0x44
 8007978:	4b04      	ldr	r3, [pc, #16]	; (800798c <HAL_PCD_MspInit+0x90>)
 800797a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8007984:	bf00      	nop
 8007986:	3728      	adds	r7, #40	; 0x28
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40023800 	.word	0x40023800
 8007990:	40020000 	.word	0x40020000

08007994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007998:	bf00      	nop
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079a2:	b480      	push	{r7}
 80079a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80079a6:	e7fe      	b.n	80079a6 <HardFault_Handler+0x4>

080079a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80079ac:	e7fe      	b.n	80079ac <MemManage_Handler+0x4>

080079ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079ae:	b480      	push	{r7}
 80079b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80079b2:	e7fe      	b.n	80079b2 <BusFault_Handler+0x4>

080079b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079b8:	e7fe      	b.n	80079b8 <UsageFault_Handler+0x4>

080079ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079ba:	b480      	push	{r7}
 80079bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079be:	bf00      	nop
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079cc:	bf00      	nop
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079d6:	b480      	push	{r7}
 80079d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079da:	bf00      	nop
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079e8:	f7f8 fe1c 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80079ec:	bf00      	nop
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80079f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80079f8:	f7f9 fcb6 	bl	8001368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80079fc:	bf00      	nop
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007a04:	4803      	ldr	r0, [pc, #12]	; (8007a14 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8007a06:	f7fc fa17 	bl	8003e38 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8007a0a:	4803      	ldr	r0, [pc, #12]	; (8007a18 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8007a0c:	f7fc fa14 	bl	8003e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8007a10:	bf00      	nop
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	200006f8 	.word	0x200006f8
 8007a18:	20000738 	.word	0x20000738

08007a1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007a20:	4802      	ldr	r0, [pc, #8]	; (8007a2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007a22:	f7fc fa09 	bl	8003e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007a26:	bf00      	nop
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	200006f8 	.word	0x200006f8

08007a30 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007a34:	4802      	ldr	r0, [pc, #8]	; (8007a40 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8007a36:	f7fc f9ff 	bl	8003e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8007a3a:	bf00      	nop
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	200006f8 	.word	0x200006f8

08007a44 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007a48:	4802      	ldr	r0, [pc, #8]	; (8007a54 <TIM1_CC_IRQHandler+0x10>)
 8007a4a:	f7fc f9f5 	bl	8003e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8007a4e:	bf00      	nop
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	200006f8 	.word	0x200006f8

08007a58 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8007a5c:	4802      	ldr	r0, [pc, #8]	; (8007a68 <SPI2_IRQHandler+0x10>)
 8007a5e:	f7fb fdbf 	bl	80035e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8007a62:	bf00      	nop
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	2000009c 	.word	0x2000009c

08007a6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007a70:	4802      	ldr	r0, [pc, #8]	; (8007a7c <USART3_IRQHandler+0x10>)
 8007a72:	f7fd fb8d 	bl	8005190 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007a76:	bf00      	nop
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000134 	.word	0x20000134

08007a80 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007a84:	4802      	ldr	r0, [pc, #8]	; (8007a90 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8007a86:	f7fc f9d7 	bl	8003e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8007a8a:	bf00      	nop
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	200000f4 	.word	0x200000f4

08007a94 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007a98:	4803      	ldr	r0, [pc, #12]	; (8007aa8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007a9a:	f7fc f9cd 	bl	8003e38 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007a9e:	4803      	ldr	r0, [pc, #12]	; (8007aac <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007aa0:	f7fc f9ca 	bl	8003e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007aa4:	bf00      	nop
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	200000f4 	.word	0x200000f4
 8007aac:	200006b4 	.word	0x200006b4

08007ab0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007ab4:	4802      	ldr	r0, [pc, #8]	; (8007ac0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8007ab6:	f7fc f9bf 	bl	8003e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8007aba:	bf00      	nop
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	200000f4 	.word	0x200000f4

08007ac4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007ac8:	4802      	ldr	r0, [pc, #8]	; (8007ad4 <TIM8_CC_IRQHandler+0x10>)
 8007aca:	f7fc f9b5 	bl	8003e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8007ace:	bf00      	nop
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	200000f4 	.word	0x200000f4

08007ad8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007ae0:	4b11      	ldr	r3, [pc, #68]	; (8007b28 <_sbrk+0x50>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d102      	bne.n	8007aee <_sbrk+0x16>
		heap_end = &end;
 8007ae8:	4b0f      	ldr	r3, [pc, #60]	; (8007b28 <_sbrk+0x50>)
 8007aea:	4a10      	ldr	r2, [pc, #64]	; (8007b2c <_sbrk+0x54>)
 8007aec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007aee:	4b0e      	ldr	r3, [pc, #56]	; (8007b28 <_sbrk+0x50>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007af4:	4b0c      	ldr	r3, [pc, #48]	; (8007b28 <_sbrk+0x50>)
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4413      	add	r3, r2
 8007afc:	466a      	mov	r2, sp
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d907      	bls.n	8007b12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007b02:	f000 f855 	bl	8007bb0 <__errno>
 8007b06:	4602      	mov	r2, r0
 8007b08:	230c      	movs	r3, #12
 8007b0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b10:	e006      	b.n	8007b20 <_sbrk+0x48>
	}

	heap_end += incr;
 8007b12:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <_sbrk+0x50>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4413      	add	r3, r2
 8007b1a:	4a03      	ldr	r2, [pc, #12]	; (8007b28 <_sbrk+0x50>)
 8007b1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	2000008c 	.word	0x2000008c
 8007b2c:	200007a8 	.word	0x200007a8

08007b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007b34:	4b08      	ldr	r3, [pc, #32]	; (8007b58 <SystemInit+0x28>)
 8007b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b3a:	4a07      	ldr	r2, [pc, #28]	; (8007b58 <SystemInit+0x28>)
 8007b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007b44:	4b04      	ldr	r3, [pc, #16]	; (8007b58 <SystemInit+0x28>)
 8007b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007b4a:	609a      	str	r2, [r3, #8]
#endif
}
 8007b4c:	bf00      	nop
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	e000ed00 	.word	0xe000ed00

08007b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007b60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007b62:	e003      	b.n	8007b6c <LoopCopyDataInit>

08007b64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007b64:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007b66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007b68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007b6a:	3104      	adds	r1, #4

08007b6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007b6c:	480b      	ldr	r0, [pc, #44]	; (8007b9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007b6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007b70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007b72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007b74:	d3f6      	bcc.n	8007b64 <CopyDataInit>
  ldr  r2, =_sbss
 8007b76:	4a0b      	ldr	r2, [pc, #44]	; (8007ba4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007b78:	e002      	b.n	8007b80 <LoopFillZerobss>

08007b7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007b7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007b7c:	f842 3b04 	str.w	r3, [r2], #4

08007b80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007b80:	4b09      	ldr	r3, [pc, #36]	; (8007ba8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007b82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007b84:	d3f9      	bcc.n	8007b7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007b86:	f7ff ffd3 	bl	8007b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b8a:	f000 f817 	bl	8007bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007b8e:	f7fe fbc1 	bl	8006314 <main>
  bx  lr    
 8007b92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007b94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007b98:	080085e4 	.word	0x080085e4
  ldr  r0, =_sdata
 8007b9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007ba0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8007ba4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8007ba8:	200007a4 	.word	0x200007a4

08007bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007bac:	e7fe      	b.n	8007bac <ADC_IRQHandler>
	...

08007bb0 <__errno>:
 8007bb0:	4b01      	ldr	r3, [pc, #4]	; (8007bb8 <__errno+0x8>)
 8007bb2:	6818      	ldr	r0, [r3, #0]
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	2000000c 	.word	0x2000000c

08007bbc <__libc_init_array>:
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	4e0d      	ldr	r6, [pc, #52]	; (8007bf4 <__libc_init_array+0x38>)
 8007bc0:	4c0d      	ldr	r4, [pc, #52]	; (8007bf8 <__libc_init_array+0x3c>)
 8007bc2:	1ba4      	subs	r4, r4, r6
 8007bc4:	10a4      	asrs	r4, r4, #2
 8007bc6:	2500      	movs	r5, #0
 8007bc8:	42a5      	cmp	r5, r4
 8007bca:	d109      	bne.n	8007be0 <__libc_init_array+0x24>
 8007bcc:	4e0b      	ldr	r6, [pc, #44]	; (8007bfc <__libc_init_array+0x40>)
 8007bce:	4c0c      	ldr	r4, [pc, #48]	; (8007c00 <__libc_init_array+0x44>)
 8007bd0:	f000 fca2 	bl	8008518 <_init>
 8007bd4:	1ba4      	subs	r4, r4, r6
 8007bd6:	10a4      	asrs	r4, r4, #2
 8007bd8:	2500      	movs	r5, #0
 8007bda:	42a5      	cmp	r5, r4
 8007bdc:	d105      	bne.n	8007bea <__libc_init_array+0x2e>
 8007bde:	bd70      	pop	{r4, r5, r6, pc}
 8007be0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007be4:	4798      	blx	r3
 8007be6:	3501      	adds	r5, #1
 8007be8:	e7ee      	b.n	8007bc8 <__libc_init_array+0xc>
 8007bea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bee:	4798      	blx	r3
 8007bf0:	3501      	adds	r5, #1
 8007bf2:	e7f2      	b.n	8007bda <__libc_init_array+0x1e>
 8007bf4:	080085dc 	.word	0x080085dc
 8007bf8:	080085dc 	.word	0x080085dc
 8007bfc:	080085dc 	.word	0x080085dc
 8007c00:	080085e0 	.word	0x080085e0

08007c04 <__itoa>:
 8007c04:	1e93      	subs	r3, r2, #2
 8007c06:	2b22      	cmp	r3, #34	; 0x22
 8007c08:	b510      	push	{r4, lr}
 8007c0a:	460c      	mov	r4, r1
 8007c0c:	d904      	bls.n	8007c18 <__itoa+0x14>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	700b      	strb	r3, [r1, #0]
 8007c12:	461c      	mov	r4, r3
 8007c14:	4620      	mov	r0, r4
 8007c16:	bd10      	pop	{r4, pc}
 8007c18:	2a0a      	cmp	r2, #10
 8007c1a:	d109      	bne.n	8007c30 <__itoa+0x2c>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	da07      	bge.n	8007c30 <__itoa+0x2c>
 8007c20:	232d      	movs	r3, #45	; 0x2d
 8007c22:	700b      	strb	r3, [r1, #0]
 8007c24:	4240      	negs	r0, r0
 8007c26:	2101      	movs	r1, #1
 8007c28:	4421      	add	r1, r4
 8007c2a:	f000 f851 	bl	8007cd0 <__utoa>
 8007c2e:	e7f1      	b.n	8007c14 <__itoa+0x10>
 8007c30:	2100      	movs	r1, #0
 8007c32:	e7f9      	b.n	8007c28 <__itoa+0x24>

08007c34 <itoa>:
 8007c34:	f7ff bfe6 	b.w	8007c04 <__itoa>

08007c38 <memset>:
 8007c38:	4402      	add	r2, r0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d100      	bne.n	8007c42 <memset+0xa>
 8007c40:	4770      	bx	lr
 8007c42:	f803 1b01 	strb.w	r1, [r3], #1
 8007c46:	e7f9      	b.n	8007c3c <memset+0x4>

08007c48 <siprintf>:
 8007c48:	b40e      	push	{r1, r2, r3}
 8007c4a:	b500      	push	{lr}
 8007c4c:	b09c      	sub	sp, #112	; 0x70
 8007c4e:	ab1d      	add	r3, sp, #116	; 0x74
 8007c50:	9002      	str	r0, [sp, #8]
 8007c52:	9006      	str	r0, [sp, #24]
 8007c54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c58:	4809      	ldr	r0, [pc, #36]	; (8007c80 <siprintf+0x38>)
 8007c5a:	9107      	str	r1, [sp, #28]
 8007c5c:	9104      	str	r1, [sp, #16]
 8007c5e:	4909      	ldr	r1, [pc, #36]	; (8007c84 <siprintf+0x3c>)
 8007c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c64:	9105      	str	r1, [sp, #20]
 8007c66:	6800      	ldr	r0, [r0, #0]
 8007c68:	9301      	str	r3, [sp, #4]
 8007c6a:	a902      	add	r1, sp, #8
 8007c6c:	f000 f8c8 	bl	8007e00 <_svfiprintf_r>
 8007c70:	9b02      	ldr	r3, [sp, #8]
 8007c72:	2200      	movs	r2, #0
 8007c74:	701a      	strb	r2, [r3, #0]
 8007c76:	b01c      	add	sp, #112	; 0x70
 8007c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c7c:	b003      	add	sp, #12
 8007c7e:	4770      	bx	lr
 8007c80:	2000000c 	.word	0x2000000c
 8007c84:	ffff0208 	.word	0xffff0208

08007c88 <strcat>:
 8007c88:	b510      	push	{r4, lr}
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	781a      	ldrb	r2, [r3, #0]
 8007c8e:	1c5c      	adds	r4, r3, #1
 8007c90:	b93a      	cbnz	r2, 8007ca2 <strcat+0x1a>
 8007c92:	3b01      	subs	r3, #1
 8007c94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c98:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c9c:	2a00      	cmp	r2, #0
 8007c9e:	d1f9      	bne.n	8007c94 <strcat+0xc>
 8007ca0:	bd10      	pop	{r4, pc}
 8007ca2:	4623      	mov	r3, r4
 8007ca4:	e7f2      	b.n	8007c8c <strcat+0x4>

08007ca6 <strncat>:
 8007ca6:	b530      	push	{r4, r5, lr}
 8007ca8:	4603      	mov	r3, r0
 8007caa:	781c      	ldrb	r4, [r3, #0]
 8007cac:	1c5d      	adds	r5, r3, #1
 8007cae:	b944      	cbnz	r4, 8007cc2 <strncat+0x1c>
 8007cb0:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8007cb4:	d304      	bcc.n	8007cc0 <strncat+0x1a>
 8007cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cba:	f803 4b01 	strb.w	r4, [r3], #1
 8007cbe:	b914      	cbnz	r4, 8007cc6 <strncat+0x20>
 8007cc0:	bd30      	pop	{r4, r5, pc}
 8007cc2:	462b      	mov	r3, r5
 8007cc4:	e7f1      	b.n	8007caa <strncat+0x4>
 8007cc6:	2a00      	cmp	r2, #0
 8007cc8:	d1f2      	bne.n	8007cb0 <strncat+0xa>
 8007cca:	701a      	strb	r2, [r3, #0]
 8007ccc:	e7f0      	b.n	8007cb0 <strncat+0xa>
	...

08007cd0 <__utoa>:
 8007cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cd2:	4b1d      	ldr	r3, [pc, #116]	; (8007d48 <__utoa+0x78>)
 8007cd4:	b08b      	sub	sp, #44	; 0x2c
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	460c      	mov	r4, r1
 8007cda:	466e      	mov	r6, sp
 8007cdc:	f103 0c20 	add.w	ip, r3, #32
 8007ce0:	6818      	ldr	r0, [r3, #0]
 8007ce2:	6859      	ldr	r1, [r3, #4]
 8007ce4:	4637      	mov	r7, r6
 8007ce6:	c703      	stmia	r7!, {r0, r1}
 8007ce8:	3308      	adds	r3, #8
 8007cea:	4563      	cmp	r3, ip
 8007cec:	463e      	mov	r6, r7
 8007cee:	d1f7      	bne.n	8007ce0 <__utoa+0x10>
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	791b      	ldrb	r3, [r3, #4]
 8007cf4:	713b      	strb	r3, [r7, #4]
 8007cf6:	1e93      	subs	r3, r2, #2
 8007cf8:	2b22      	cmp	r3, #34	; 0x22
 8007cfa:	6038      	str	r0, [r7, #0]
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	d904      	bls.n	8007d0c <__utoa+0x3c>
 8007d02:	7023      	strb	r3, [r4, #0]
 8007d04:	461c      	mov	r4, r3
 8007d06:	4620      	mov	r0, r4
 8007d08:	b00b      	add	sp, #44	; 0x2c
 8007d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d0c:	1e66      	subs	r6, r4, #1
 8007d0e:	fbb5 f0f2 	udiv	r0, r5, r2
 8007d12:	af0a      	add	r7, sp, #40	; 0x28
 8007d14:	fb02 5510 	mls	r5, r2, r0, r5
 8007d18:	443d      	add	r5, r7
 8007d1a:	1c59      	adds	r1, r3, #1
 8007d1c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8007d20:	f806 5f01 	strb.w	r5, [r6, #1]!
 8007d24:	4605      	mov	r5, r0
 8007d26:	b968      	cbnz	r0, 8007d44 <__utoa+0x74>
 8007d28:	5460      	strb	r0, [r4, r1]
 8007d2a:	4423      	add	r3, r4
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	1b19      	subs	r1, r3, r4
 8007d30:	1b10      	subs	r0, r2, r4
 8007d32:	4281      	cmp	r1, r0
 8007d34:	dde7      	ble.n	8007d06 <__utoa+0x36>
 8007d36:	7811      	ldrb	r1, [r2, #0]
 8007d38:	7818      	ldrb	r0, [r3, #0]
 8007d3a:	f802 0b01 	strb.w	r0, [r2], #1
 8007d3e:	f803 1901 	strb.w	r1, [r3], #-1
 8007d42:	e7f4      	b.n	8007d2e <__utoa+0x5e>
 8007d44:	460b      	mov	r3, r1
 8007d46:	e7e2      	b.n	8007d0e <__utoa+0x3e>
 8007d48:	0800857c 	.word	0x0800857c

08007d4c <__ssputs_r>:
 8007d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d50:	688e      	ldr	r6, [r1, #8]
 8007d52:	429e      	cmp	r6, r3
 8007d54:	4682      	mov	sl, r0
 8007d56:	460c      	mov	r4, r1
 8007d58:	4690      	mov	r8, r2
 8007d5a:	4699      	mov	r9, r3
 8007d5c:	d837      	bhi.n	8007dce <__ssputs_r+0x82>
 8007d5e:	898a      	ldrh	r2, [r1, #12]
 8007d60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d64:	d031      	beq.n	8007dca <__ssputs_r+0x7e>
 8007d66:	6825      	ldr	r5, [r4, #0]
 8007d68:	6909      	ldr	r1, [r1, #16]
 8007d6a:	1a6f      	subs	r7, r5, r1
 8007d6c:	6965      	ldr	r5, [r4, #20]
 8007d6e:	2302      	movs	r3, #2
 8007d70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d74:	fb95 f5f3 	sdiv	r5, r5, r3
 8007d78:	f109 0301 	add.w	r3, r9, #1
 8007d7c:	443b      	add	r3, r7
 8007d7e:	429d      	cmp	r5, r3
 8007d80:	bf38      	it	cc
 8007d82:	461d      	movcc	r5, r3
 8007d84:	0553      	lsls	r3, r2, #21
 8007d86:	d530      	bpl.n	8007dea <__ssputs_r+0x9e>
 8007d88:	4629      	mov	r1, r5
 8007d8a:	f000 fb2b 	bl	80083e4 <_malloc_r>
 8007d8e:	4606      	mov	r6, r0
 8007d90:	b950      	cbnz	r0, 8007da8 <__ssputs_r+0x5c>
 8007d92:	230c      	movs	r3, #12
 8007d94:	f8ca 3000 	str.w	r3, [sl]
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d9e:	81a3      	strh	r3, [r4, #12]
 8007da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da8:	463a      	mov	r2, r7
 8007daa:	6921      	ldr	r1, [r4, #16]
 8007dac:	f000 faa8 	bl	8008300 <memcpy>
 8007db0:	89a3      	ldrh	r3, [r4, #12]
 8007db2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dba:	81a3      	strh	r3, [r4, #12]
 8007dbc:	6126      	str	r6, [r4, #16]
 8007dbe:	6165      	str	r5, [r4, #20]
 8007dc0:	443e      	add	r6, r7
 8007dc2:	1bed      	subs	r5, r5, r7
 8007dc4:	6026      	str	r6, [r4, #0]
 8007dc6:	60a5      	str	r5, [r4, #8]
 8007dc8:	464e      	mov	r6, r9
 8007dca:	454e      	cmp	r6, r9
 8007dcc:	d900      	bls.n	8007dd0 <__ssputs_r+0x84>
 8007dce:	464e      	mov	r6, r9
 8007dd0:	4632      	mov	r2, r6
 8007dd2:	4641      	mov	r1, r8
 8007dd4:	6820      	ldr	r0, [r4, #0]
 8007dd6:	f000 fa9e 	bl	8008316 <memmove>
 8007dda:	68a3      	ldr	r3, [r4, #8]
 8007ddc:	1b9b      	subs	r3, r3, r6
 8007dde:	60a3      	str	r3, [r4, #8]
 8007de0:	6823      	ldr	r3, [r4, #0]
 8007de2:	441e      	add	r6, r3
 8007de4:	6026      	str	r6, [r4, #0]
 8007de6:	2000      	movs	r0, #0
 8007de8:	e7dc      	b.n	8007da4 <__ssputs_r+0x58>
 8007dea:	462a      	mov	r2, r5
 8007dec:	f000 fb54 	bl	8008498 <_realloc_r>
 8007df0:	4606      	mov	r6, r0
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d1e2      	bne.n	8007dbc <__ssputs_r+0x70>
 8007df6:	6921      	ldr	r1, [r4, #16]
 8007df8:	4650      	mov	r0, sl
 8007dfa:	f000 faa5 	bl	8008348 <_free_r>
 8007dfe:	e7c8      	b.n	8007d92 <__ssputs_r+0x46>

08007e00 <_svfiprintf_r>:
 8007e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e04:	461d      	mov	r5, r3
 8007e06:	898b      	ldrh	r3, [r1, #12]
 8007e08:	061f      	lsls	r7, r3, #24
 8007e0a:	b09d      	sub	sp, #116	; 0x74
 8007e0c:	4680      	mov	r8, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	4616      	mov	r6, r2
 8007e12:	d50f      	bpl.n	8007e34 <_svfiprintf_r+0x34>
 8007e14:	690b      	ldr	r3, [r1, #16]
 8007e16:	b96b      	cbnz	r3, 8007e34 <_svfiprintf_r+0x34>
 8007e18:	2140      	movs	r1, #64	; 0x40
 8007e1a:	f000 fae3 	bl	80083e4 <_malloc_r>
 8007e1e:	6020      	str	r0, [r4, #0]
 8007e20:	6120      	str	r0, [r4, #16]
 8007e22:	b928      	cbnz	r0, 8007e30 <_svfiprintf_r+0x30>
 8007e24:	230c      	movs	r3, #12
 8007e26:	f8c8 3000 	str.w	r3, [r8]
 8007e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e2e:	e0c8      	b.n	8007fc2 <_svfiprintf_r+0x1c2>
 8007e30:	2340      	movs	r3, #64	; 0x40
 8007e32:	6163      	str	r3, [r4, #20]
 8007e34:	2300      	movs	r3, #0
 8007e36:	9309      	str	r3, [sp, #36]	; 0x24
 8007e38:	2320      	movs	r3, #32
 8007e3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e3e:	2330      	movs	r3, #48	; 0x30
 8007e40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e44:	9503      	str	r5, [sp, #12]
 8007e46:	f04f 0b01 	mov.w	fp, #1
 8007e4a:	4637      	mov	r7, r6
 8007e4c:	463d      	mov	r5, r7
 8007e4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007e52:	b10b      	cbz	r3, 8007e58 <_svfiprintf_r+0x58>
 8007e54:	2b25      	cmp	r3, #37	; 0x25
 8007e56:	d13e      	bne.n	8007ed6 <_svfiprintf_r+0xd6>
 8007e58:	ebb7 0a06 	subs.w	sl, r7, r6
 8007e5c:	d00b      	beq.n	8007e76 <_svfiprintf_r+0x76>
 8007e5e:	4653      	mov	r3, sl
 8007e60:	4632      	mov	r2, r6
 8007e62:	4621      	mov	r1, r4
 8007e64:	4640      	mov	r0, r8
 8007e66:	f7ff ff71 	bl	8007d4c <__ssputs_r>
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	f000 80a4 	beq.w	8007fb8 <_svfiprintf_r+0x1b8>
 8007e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e72:	4453      	add	r3, sl
 8007e74:	9309      	str	r3, [sp, #36]	; 0x24
 8007e76:	783b      	ldrb	r3, [r7, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 809d 	beq.w	8007fb8 <_svfiprintf_r+0x1b8>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e88:	9304      	str	r3, [sp, #16]
 8007e8a:	9307      	str	r3, [sp, #28]
 8007e8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e90:	931a      	str	r3, [sp, #104]	; 0x68
 8007e92:	462f      	mov	r7, r5
 8007e94:	2205      	movs	r2, #5
 8007e96:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007e9a:	4850      	ldr	r0, [pc, #320]	; (8007fdc <_svfiprintf_r+0x1dc>)
 8007e9c:	f7f8 f9a0 	bl	80001e0 <memchr>
 8007ea0:	9b04      	ldr	r3, [sp, #16]
 8007ea2:	b9d0      	cbnz	r0, 8007eda <_svfiprintf_r+0xda>
 8007ea4:	06d9      	lsls	r1, r3, #27
 8007ea6:	bf44      	itt	mi
 8007ea8:	2220      	movmi	r2, #32
 8007eaa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007eae:	071a      	lsls	r2, r3, #28
 8007eb0:	bf44      	itt	mi
 8007eb2:	222b      	movmi	r2, #43	; 0x2b
 8007eb4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007eb8:	782a      	ldrb	r2, [r5, #0]
 8007eba:	2a2a      	cmp	r2, #42	; 0x2a
 8007ebc:	d015      	beq.n	8007eea <_svfiprintf_r+0xea>
 8007ebe:	9a07      	ldr	r2, [sp, #28]
 8007ec0:	462f      	mov	r7, r5
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	250a      	movs	r5, #10
 8007ec6:	4639      	mov	r1, r7
 8007ec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ecc:	3b30      	subs	r3, #48	; 0x30
 8007ece:	2b09      	cmp	r3, #9
 8007ed0:	d94d      	bls.n	8007f6e <_svfiprintf_r+0x16e>
 8007ed2:	b1b8      	cbz	r0, 8007f04 <_svfiprintf_r+0x104>
 8007ed4:	e00f      	b.n	8007ef6 <_svfiprintf_r+0xf6>
 8007ed6:	462f      	mov	r7, r5
 8007ed8:	e7b8      	b.n	8007e4c <_svfiprintf_r+0x4c>
 8007eda:	4a40      	ldr	r2, [pc, #256]	; (8007fdc <_svfiprintf_r+0x1dc>)
 8007edc:	1a80      	subs	r0, r0, r2
 8007ede:	fa0b f000 	lsl.w	r0, fp, r0
 8007ee2:	4318      	orrs	r0, r3
 8007ee4:	9004      	str	r0, [sp, #16]
 8007ee6:	463d      	mov	r5, r7
 8007ee8:	e7d3      	b.n	8007e92 <_svfiprintf_r+0x92>
 8007eea:	9a03      	ldr	r2, [sp, #12]
 8007eec:	1d11      	adds	r1, r2, #4
 8007eee:	6812      	ldr	r2, [r2, #0]
 8007ef0:	9103      	str	r1, [sp, #12]
 8007ef2:	2a00      	cmp	r2, #0
 8007ef4:	db01      	blt.n	8007efa <_svfiprintf_r+0xfa>
 8007ef6:	9207      	str	r2, [sp, #28]
 8007ef8:	e004      	b.n	8007f04 <_svfiprintf_r+0x104>
 8007efa:	4252      	negs	r2, r2
 8007efc:	f043 0302 	orr.w	r3, r3, #2
 8007f00:	9207      	str	r2, [sp, #28]
 8007f02:	9304      	str	r3, [sp, #16]
 8007f04:	783b      	ldrb	r3, [r7, #0]
 8007f06:	2b2e      	cmp	r3, #46	; 0x2e
 8007f08:	d10c      	bne.n	8007f24 <_svfiprintf_r+0x124>
 8007f0a:	787b      	ldrb	r3, [r7, #1]
 8007f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f0e:	d133      	bne.n	8007f78 <_svfiprintf_r+0x178>
 8007f10:	9b03      	ldr	r3, [sp, #12]
 8007f12:	1d1a      	adds	r2, r3, #4
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	9203      	str	r2, [sp, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	bfb8      	it	lt
 8007f1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007f20:	3702      	adds	r7, #2
 8007f22:	9305      	str	r3, [sp, #20]
 8007f24:	4d2e      	ldr	r5, [pc, #184]	; (8007fe0 <_svfiprintf_r+0x1e0>)
 8007f26:	7839      	ldrb	r1, [r7, #0]
 8007f28:	2203      	movs	r2, #3
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f7f8 f958 	bl	80001e0 <memchr>
 8007f30:	b138      	cbz	r0, 8007f42 <_svfiprintf_r+0x142>
 8007f32:	2340      	movs	r3, #64	; 0x40
 8007f34:	1b40      	subs	r0, r0, r5
 8007f36:	fa03 f000 	lsl.w	r0, r3, r0
 8007f3a:	9b04      	ldr	r3, [sp, #16]
 8007f3c:	4303      	orrs	r3, r0
 8007f3e:	3701      	adds	r7, #1
 8007f40:	9304      	str	r3, [sp, #16]
 8007f42:	7839      	ldrb	r1, [r7, #0]
 8007f44:	4827      	ldr	r0, [pc, #156]	; (8007fe4 <_svfiprintf_r+0x1e4>)
 8007f46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f4a:	2206      	movs	r2, #6
 8007f4c:	1c7e      	adds	r6, r7, #1
 8007f4e:	f7f8 f947 	bl	80001e0 <memchr>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	d038      	beq.n	8007fc8 <_svfiprintf_r+0x1c8>
 8007f56:	4b24      	ldr	r3, [pc, #144]	; (8007fe8 <_svfiprintf_r+0x1e8>)
 8007f58:	bb13      	cbnz	r3, 8007fa0 <_svfiprintf_r+0x1a0>
 8007f5a:	9b03      	ldr	r3, [sp, #12]
 8007f5c:	3307      	adds	r3, #7
 8007f5e:	f023 0307 	bic.w	r3, r3, #7
 8007f62:	3308      	adds	r3, #8
 8007f64:	9303      	str	r3, [sp, #12]
 8007f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f68:	444b      	add	r3, r9
 8007f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f6c:	e76d      	b.n	8007e4a <_svfiprintf_r+0x4a>
 8007f6e:	fb05 3202 	mla	r2, r5, r2, r3
 8007f72:	2001      	movs	r0, #1
 8007f74:	460f      	mov	r7, r1
 8007f76:	e7a6      	b.n	8007ec6 <_svfiprintf_r+0xc6>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	3701      	adds	r7, #1
 8007f7c:	9305      	str	r3, [sp, #20]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	250a      	movs	r5, #10
 8007f82:	4638      	mov	r0, r7
 8007f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f88:	3a30      	subs	r2, #48	; 0x30
 8007f8a:	2a09      	cmp	r2, #9
 8007f8c:	d903      	bls.n	8007f96 <_svfiprintf_r+0x196>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0c8      	beq.n	8007f24 <_svfiprintf_r+0x124>
 8007f92:	9105      	str	r1, [sp, #20]
 8007f94:	e7c6      	b.n	8007f24 <_svfiprintf_r+0x124>
 8007f96:	fb05 2101 	mla	r1, r5, r1, r2
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4607      	mov	r7, r0
 8007f9e:	e7f0      	b.n	8007f82 <_svfiprintf_r+0x182>
 8007fa0:	ab03      	add	r3, sp, #12
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	4622      	mov	r2, r4
 8007fa6:	4b11      	ldr	r3, [pc, #68]	; (8007fec <_svfiprintf_r+0x1ec>)
 8007fa8:	a904      	add	r1, sp, #16
 8007faa:	4640      	mov	r0, r8
 8007fac:	f3af 8000 	nop.w
 8007fb0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007fb4:	4681      	mov	r9, r0
 8007fb6:	d1d6      	bne.n	8007f66 <_svfiprintf_r+0x166>
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	065b      	lsls	r3, r3, #25
 8007fbc:	f53f af35 	bmi.w	8007e2a <_svfiprintf_r+0x2a>
 8007fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fc2:	b01d      	add	sp, #116	; 0x74
 8007fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc8:	ab03      	add	r3, sp, #12
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	4622      	mov	r2, r4
 8007fce:	4b07      	ldr	r3, [pc, #28]	; (8007fec <_svfiprintf_r+0x1ec>)
 8007fd0:	a904      	add	r1, sp, #16
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	f000 f882 	bl	80080dc <_printf_i>
 8007fd8:	e7ea      	b.n	8007fb0 <_svfiprintf_r+0x1b0>
 8007fda:	bf00      	nop
 8007fdc:	080085a1 	.word	0x080085a1
 8007fe0:	080085a7 	.word	0x080085a7
 8007fe4:	080085ab 	.word	0x080085ab
 8007fe8:	00000000 	.word	0x00000000
 8007fec:	08007d4d 	.word	0x08007d4d

08007ff0 <_printf_common>:
 8007ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff4:	4691      	mov	r9, r2
 8007ff6:	461f      	mov	r7, r3
 8007ff8:	688a      	ldr	r2, [r1, #8]
 8007ffa:	690b      	ldr	r3, [r1, #16]
 8007ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008000:	4293      	cmp	r3, r2
 8008002:	bfb8      	it	lt
 8008004:	4613      	movlt	r3, r2
 8008006:	f8c9 3000 	str.w	r3, [r9]
 800800a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800800e:	4606      	mov	r6, r0
 8008010:	460c      	mov	r4, r1
 8008012:	b112      	cbz	r2, 800801a <_printf_common+0x2a>
 8008014:	3301      	adds	r3, #1
 8008016:	f8c9 3000 	str.w	r3, [r9]
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	0699      	lsls	r1, r3, #26
 800801e:	bf42      	ittt	mi
 8008020:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008024:	3302      	addmi	r3, #2
 8008026:	f8c9 3000 	strmi.w	r3, [r9]
 800802a:	6825      	ldr	r5, [r4, #0]
 800802c:	f015 0506 	ands.w	r5, r5, #6
 8008030:	d107      	bne.n	8008042 <_printf_common+0x52>
 8008032:	f104 0a19 	add.w	sl, r4, #25
 8008036:	68e3      	ldr	r3, [r4, #12]
 8008038:	f8d9 2000 	ldr.w	r2, [r9]
 800803c:	1a9b      	subs	r3, r3, r2
 800803e:	42ab      	cmp	r3, r5
 8008040:	dc28      	bgt.n	8008094 <_printf_common+0xa4>
 8008042:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008046:	6822      	ldr	r2, [r4, #0]
 8008048:	3300      	adds	r3, #0
 800804a:	bf18      	it	ne
 800804c:	2301      	movne	r3, #1
 800804e:	0692      	lsls	r2, r2, #26
 8008050:	d42d      	bmi.n	80080ae <_printf_common+0xbe>
 8008052:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008056:	4639      	mov	r1, r7
 8008058:	4630      	mov	r0, r6
 800805a:	47c0      	blx	r8
 800805c:	3001      	adds	r0, #1
 800805e:	d020      	beq.n	80080a2 <_printf_common+0xb2>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	68e5      	ldr	r5, [r4, #12]
 8008064:	f8d9 2000 	ldr.w	r2, [r9]
 8008068:	f003 0306 	and.w	r3, r3, #6
 800806c:	2b04      	cmp	r3, #4
 800806e:	bf08      	it	eq
 8008070:	1aad      	subeq	r5, r5, r2
 8008072:	68a3      	ldr	r3, [r4, #8]
 8008074:	6922      	ldr	r2, [r4, #16]
 8008076:	bf0c      	ite	eq
 8008078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800807c:	2500      	movne	r5, #0
 800807e:	4293      	cmp	r3, r2
 8008080:	bfc4      	itt	gt
 8008082:	1a9b      	subgt	r3, r3, r2
 8008084:	18ed      	addgt	r5, r5, r3
 8008086:	f04f 0900 	mov.w	r9, #0
 800808a:	341a      	adds	r4, #26
 800808c:	454d      	cmp	r5, r9
 800808e:	d11a      	bne.n	80080c6 <_printf_common+0xd6>
 8008090:	2000      	movs	r0, #0
 8008092:	e008      	b.n	80080a6 <_printf_common+0xb6>
 8008094:	2301      	movs	r3, #1
 8008096:	4652      	mov	r2, sl
 8008098:	4639      	mov	r1, r7
 800809a:	4630      	mov	r0, r6
 800809c:	47c0      	blx	r8
 800809e:	3001      	adds	r0, #1
 80080a0:	d103      	bne.n	80080aa <_printf_common+0xba>
 80080a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080aa:	3501      	adds	r5, #1
 80080ac:	e7c3      	b.n	8008036 <_printf_common+0x46>
 80080ae:	18e1      	adds	r1, r4, r3
 80080b0:	1c5a      	adds	r2, r3, #1
 80080b2:	2030      	movs	r0, #48	; 0x30
 80080b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080b8:	4422      	add	r2, r4
 80080ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080c2:	3302      	adds	r3, #2
 80080c4:	e7c5      	b.n	8008052 <_printf_common+0x62>
 80080c6:	2301      	movs	r3, #1
 80080c8:	4622      	mov	r2, r4
 80080ca:	4639      	mov	r1, r7
 80080cc:	4630      	mov	r0, r6
 80080ce:	47c0      	blx	r8
 80080d0:	3001      	adds	r0, #1
 80080d2:	d0e6      	beq.n	80080a2 <_printf_common+0xb2>
 80080d4:	f109 0901 	add.w	r9, r9, #1
 80080d8:	e7d8      	b.n	800808c <_printf_common+0x9c>
	...

080080dc <_printf_i>:
 80080dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80080e4:	460c      	mov	r4, r1
 80080e6:	7e09      	ldrb	r1, [r1, #24]
 80080e8:	b085      	sub	sp, #20
 80080ea:	296e      	cmp	r1, #110	; 0x6e
 80080ec:	4617      	mov	r7, r2
 80080ee:	4606      	mov	r6, r0
 80080f0:	4698      	mov	r8, r3
 80080f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080f4:	f000 80b3 	beq.w	800825e <_printf_i+0x182>
 80080f8:	d822      	bhi.n	8008140 <_printf_i+0x64>
 80080fa:	2963      	cmp	r1, #99	; 0x63
 80080fc:	d036      	beq.n	800816c <_printf_i+0x90>
 80080fe:	d80a      	bhi.n	8008116 <_printf_i+0x3a>
 8008100:	2900      	cmp	r1, #0
 8008102:	f000 80b9 	beq.w	8008278 <_printf_i+0x19c>
 8008106:	2958      	cmp	r1, #88	; 0x58
 8008108:	f000 8083 	beq.w	8008212 <_printf_i+0x136>
 800810c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008110:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008114:	e032      	b.n	800817c <_printf_i+0xa0>
 8008116:	2964      	cmp	r1, #100	; 0x64
 8008118:	d001      	beq.n	800811e <_printf_i+0x42>
 800811a:	2969      	cmp	r1, #105	; 0x69
 800811c:	d1f6      	bne.n	800810c <_printf_i+0x30>
 800811e:	6820      	ldr	r0, [r4, #0]
 8008120:	6813      	ldr	r3, [r2, #0]
 8008122:	0605      	lsls	r5, r0, #24
 8008124:	f103 0104 	add.w	r1, r3, #4
 8008128:	d52a      	bpl.n	8008180 <_printf_i+0xa4>
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6011      	str	r1, [r2, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	da03      	bge.n	800813a <_printf_i+0x5e>
 8008132:	222d      	movs	r2, #45	; 0x2d
 8008134:	425b      	negs	r3, r3
 8008136:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800813a:	486f      	ldr	r0, [pc, #444]	; (80082f8 <_printf_i+0x21c>)
 800813c:	220a      	movs	r2, #10
 800813e:	e039      	b.n	80081b4 <_printf_i+0xd8>
 8008140:	2973      	cmp	r1, #115	; 0x73
 8008142:	f000 809d 	beq.w	8008280 <_printf_i+0x1a4>
 8008146:	d808      	bhi.n	800815a <_printf_i+0x7e>
 8008148:	296f      	cmp	r1, #111	; 0x6f
 800814a:	d020      	beq.n	800818e <_printf_i+0xb2>
 800814c:	2970      	cmp	r1, #112	; 0x70
 800814e:	d1dd      	bne.n	800810c <_printf_i+0x30>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	f043 0320 	orr.w	r3, r3, #32
 8008156:	6023      	str	r3, [r4, #0]
 8008158:	e003      	b.n	8008162 <_printf_i+0x86>
 800815a:	2975      	cmp	r1, #117	; 0x75
 800815c:	d017      	beq.n	800818e <_printf_i+0xb2>
 800815e:	2978      	cmp	r1, #120	; 0x78
 8008160:	d1d4      	bne.n	800810c <_printf_i+0x30>
 8008162:	2378      	movs	r3, #120	; 0x78
 8008164:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008168:	4864      	ldr	r0, [pc, #400]	; (80082fc <_printf_i+0x220>)
 800816a:	e055      	b.n	8008218 <_printf_i+0x13c>
 800816c:	6813      	ldr	r3, [r2, #0]
 800816e:	1d19      	adds	r1, r3, #4
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6011      	str	r1, [r2, #0]
 8008174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800817c:	2301      	movs	r3, #1
 800817e:	e08c      	b.n	800829a <_printf_i+0x1be>
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6011      	str	r1, [r2, #0]
 8008184:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008188:	bf18      	it	ne
 800818a:	b21b      	sxthne	r3, r3
 800818c:	e7cf      	b.n	800812e <_printf_i+0x52>
 800818e:	6813      	ldr	r3, [r2, #0]
 8008190:	6825      	ldr	r5, [r4, #0]
 8008192:	1d18      	adds	r0, r3, #4
 8008194:	6010      	str	r0, [r2, #0]
 8008196:	0628      	lsls	r0, r5, #24
 8008198:	d501      	bpl.n	800819e <_printf_i+0xc2>
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	e002      	b.n	80081a4 <_printf_i+0xc8>
 800819e:	0668      	lsls	r0, r5, #25
 80081a0:	d5fb      	bpl.n	800819a <_printf_i+0xbe>
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	4854      	ldr	r0, [pc, #336]	; (80082f8 <_printf_i+0x21c>)
 80081a6:	296f      	cmp	r1, #111	; 0x6f
 80081a8:	bf14      	ite	ne
 80081aa:	220a      	movne	r2, #10
 80081ac:	2208      	moveq	r2, #8
 80081ae:	2100      	movs	r1, #0
 80081b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081b4:	6865      	ldr	r5, [r4, #4]
 80081b6:	60a5      	str	r5, [r4, #8]
 80081b8:	2d00      	cmp	r5, #0
 80081ba:	f2c0 8095 	blt.w	80082e8 <_printf_i+0x20c>
 80081be:	6821      	ldr	r1, [r4, #0]
 80081c0:	f021 0104 	bic.w	r1, r1, #4
 80081c4:	6021      	str	r1, [r4, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d13d      	bne.n	8008246 <_printf_i+0x16a>
 80081ca:	2d00      	cmp	r5, #0
 80081cc:	f040 808e 	bne.w	80082ec <_printf_i+0x210>
 80081d0:	4665      	mov	r5, ip
 80081d2:	2a08      	cmp	r2, #8
 80081d4:	d10b      	bne.n	80081ee <_printf_i+0x112>
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	07db      	lsls	r3, r3, #31
 80081da:	d508      	bpl.n	80081ee <_printf_i+0x112>
 80081dc:	6923      	ldr	r3, [r4, #16]
 80081de:	6862      	ldr	r2, [r4, #4]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	bfde      	ittt	le
 80081e4:	2330      	movle	r3, #48	; 0x30
 80081e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081ea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80081ee:	ebac 0305 	sub.w	r3, ip, r5
 80081f2:	6123      	str	r3, [r4, #16]
 80081f4:	f8cd 8000 	str.w	r8, [sp]
 80081f8:	463b      	mov	r3, r7
 80081fa:	aa03      	add	r2, sp, #12
 80081fc:	4621      	mov	r1, r4
 80081fe:	4630      	mov	r0, r6
 8008200:	f7ff fef6 	bl	8007ff0 <_printf_common>
 8008204:	3001      	adds	r0, #1
 8008206:	d14d      	bne.n	80082a4 <_printf_i+0x1c8>
 8008208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800820c:	b005      	add	sp, #20
 800820e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008212:	4839      	ldr	r0, [pc, #228]	; (80082f8 <_printf_i+0x21c>)
 8008214:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008218:	6813      	ldr	r3, [r2, #0]
 800821a:	6821      	ldr	r1, [r4, #0]
 800821c:	1d1d      	adds	r5, r3, #4
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6015      	str	r5, [r2, #0]
 8008222:	060a      	lsls	r2, r1, #24
 8008224:	d50b      	bpl.n	800823e <_printf_i+0x162>
 8008226:	07ca      	lsls	r2, r1, #31
 8008228:	bf44      	itt	mi
 800822a:	f041 0120 	orrmi.w	r1, r1, #32
 800822e:	6021      	strmi	r1, [r4, #0]
 8008230:	b91b      	cbnz	r3, 800823a <_printf_i+0x15e>
 8008232:	6822      	ldr	r2, [r4, #0]
 8008234:	f022 0220 	bic.w	r2, r2, #32
 8008238:	6022      	str	r2, [r4, #0]
 800823a:	2210      	movs	r2, #16
 800823c:	e7b7      	b.n	80081ae <_printf_i+0xd2>
 800823e:	064d      	lsls	r5, r1, #25
 8008240:	bf48      	it	mi
 8008242:	b29b      	uxthmi	r3, r3
 8008244:	e7ef      	b.n	8008226 <_printf_i+0x14a>
 8008246:	4665      	mov	r5, ip
 8008248:	fbb3 f1f2 	udiv	r1, r3, r2
 800824c:	fb02 3311 	mls	r3, r2, r1, r3
 8008250:	5cc3      	ldrb	r3, [r0, r3]
 8008252:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008256:	460b      	mov	r3, r1
 8008258:	2900      	cmp	r1, #0
 800825a:	d1f5      	bne.n	8008248 <_printf_i+0x16c>
 800825c:	e7b9      	b.n	80081d2 <_printf_i+0xf6>
 800825e:	6813      	ldr	r3, [r2, #0]
 8008260:	6825      	ldr	r5, [r4, #0]
 8008262:	6961      	ldr	r1, [r4, #20]
 8008264:	1d18      	adds	r0, r3, #4
 8008266:	6010      	str	r0, [r2, #0]
 8008268:	0628      	lsls	r0, r5, #24
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	d501      	bpl.n	8008272 <_printf_i+0x196>
 800826e:	6019      	str	r1, [r3, #0]
 8008270:	e002      	b.n	8008278 <_printf_i+0x19c>
 8008272:	066a      	lsls	r2, r5, #25
 8008274:	d5fb      	bpl.n	800826e <_printf_i+0x192>
 8008276:	8019      	strh	r1, [r3, #0]
 8008278:	2300      	movs	r3, #0
 800827a:	6123      	str	r3, [r4, #16]
 800827c:	4665      	mov	r5, ip
 800827e:	e7b9      	b.n	80081f4 <_printf_i+0x118>
 8008280:	6813      	ldr	r3, [r2, #0]
 8008282:	1d19      	adds	r1, r3, #4
 8008284:	6011      	str	r1, [r2, #0]
 8008286:	681d      	ldr	r5, [r3, #0]
 8008288:	6862      	ldr	r2, [r4, #4]
 800828a:	2100      	movs	r1, #0
 800828c:	4628      	mov	r0, r5
 800828e:	f7f7 ffa7 	bl	80001e0 <memchr>
 8008292:	b108      	cbz	r0, 8008298 <_printf_i+0x1bc>
 8008294:	1b40      	subs	r0, r0, r5
 8008296:	6060      	str	r0, [r4, #4]
 8008298:	6863      	ldr	r3, [r4, #4]
 800829a:	6123      	str	r3, [r4, #16]
 800829c:	2300      	movs	r3, #0
 800829e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082a2:	e7a7      	b.n	80081f4 <_printf_i+0x118>
 80082a4:	6923      	ldr	r3, [r4, #16]
 80082a6:	462a      	mov	r2, r5
 80082a8:	4639      	mov	r1, r7
 80082aa:	4630      	mov	r0, r6
 80082ac:	47c0      	blx	r8
 80082ae:	3001      	adds	r0, #1
 80082b0:	d0aa      	beq.n	8008208 <_printf_i+0x12c>
 80082b2:	6823      	ldr	r3, [r4, #0]
 80082b4:	079b      	lsls	r3, r3, #30
 80082b6:	d413      	bmi.n	80082e0 <_printf_i+0x204>
 80082b8:	68e0      	ldr	r0, [r4, #12]
 80082ba:	9b03      	ldr	r3, [sp, #12]
 80082bc:	4298      	cmp	r0, r3
 80082be:	bfb8      	it	lt
 80082c0:	4618      	movlt	r0, r3
 80082c2:	e7a3      	b.n	800820c <_printf_i+0x130>
 80082c4:	2301      	movs	r3, #1
 80082c6:	464a      	mov	r2, r9
 80082c8:	4639      	mov	r1, r7
 80082ca:	4630      	mov	r0, r6
 80082cc:	47c0      	blx	r8
 80082ce:	3001      	adds	r0, #1
 80082d0:	d09a      	beq.n	8008208 <_printf_i+0x12c>
 80082d2:	3501      	adds	r5, #1
 80082d4:	68e3      	ldr	r3, [r4, #12]
 80082d6:	9a03      	ldr	r2, [sp, #12]
 80082d8:	1a9b      	subs	r3, r3, r2
 80082da:	42ab      	cmp	r3, r5
 80082dc:	dcf2      	bgt.n	80082c4 <_printf_i+0x1e8>
 80082de:	e7eb      	b.n	80082b8 <_printf_i+0x1dc>
 80082e0:	2500      	movs	r5, #0
 80082e2:	f104 0919 	add.w	r9, r4, #25
 80082e6:	e7f5      	b.n	80082d4 <_printf_i+0x1f8>
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1ac      	bne.n	8008246 <_printf_i+0x16a>
 80082ec:	7803      	ldrb	r3, [r0, #0]
 80082ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082f6:	e76c      	b.n	80081d2 <_printf_i+0xf6>
 80082f8:	080085b2 	.word	0x080085b2
 80082fc:	080085c3 	.word	0x080085c3

08008300 <memcpy>:
 8008300:	b510      	push	{r4, lr}
 8008302:	1e43      	subs	r3, r0, #1
 8008304:	440a      	add	r2, r1
 8008306:	4291      	cmp	r1, r2
 8008308:	d100      	bne.n	800830c <memcpy+0xc>
 800830a:	bd10      	pop	{r4, pc}
 800830c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008310:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008314:	e7f7      	b.n	8008306 <memcpy+0x6>

08008316 <memmove>:
 8008316:	4288      	cmp	r0, r1
 8008318:	b510      	push	{r4, lr}
 800831a:	eb01 0302 	add.w	r3, r1, r2
 800831e:	d807      	bhi.n	8008330 <memmove+0x1a>
 8008320:	1e42      	subs	r2, r0, #1
 8008322:	4299      	cmp	r1, r3
 8008324:	d00a      	beq.n	800833c <memmove+0x26>
 8008326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800832a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800832e:	e7f8      	b.n	8008322 <memmove+0xc>
 8008330:	4283      	cmp	r3, r0
 8008332:	d9f5      	bls.n	8008320 <memmove+0xa>
 8008334:	1881      	adds	r1, r0, r2
 8008336:	1ad2      	subs	r2, r2, r3
 8008338:	42d3      	cmn	r3, r2
 800833a:	d100      	bne.n	800833e <memmove+0x28>
 800833c:	bd10      	pop	{r4, pc}
 800833e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008342:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008346:	e7f7      	b.n	8008338 <memmove+0x22>

08008348 <_free_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4605      	mov	r5, r0
 800834c:	2900      	cmp	r1, #0
 800834e:	d045      	beq.n	80083dc <_free_r+0x94>
 8008350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008354:	1f0c      	subs	r4, r1, #4
 8008356:	2b00      	cmp	r3, #0
 8008358:	bfb8      	it	lt
 800835a:	18e4      	addlt	r4, r4, r3
 800835c:	f000 f8d2 	bl	8008504 <__malloc_lock>
 8008360:	4a1f      	ldr	r2, [pc, #124]	; (80083e0 <_free_r+0x98>)
 8008362:	6813      	ldr	r3, [r2, #0]
 8008364:	4610      	mov	r0, r2
 8008366:	b933      	cbnz	r3, 8008376 <_free_r+0x2e>
 8008368:	6063      	str	r3, [r4, #4]
 800836a:	6014      	str	r4, [r2, #0]
 800836c:	4628      	mov	r0, r5
 800836e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008372:	f000 b8c8 	b.w	8008506 <__malloc_unlock>
 8008376:	42a3      	cmp	r3, r4
 8008378:	d90c      	bls.n	8008394 <_free_r+0x4c>
 800837a:	6821      	ldr	r1, [r4, #0]
 800837c:	1862      	adds	r2, r4, r1
 800837e:	4293      	cmp	r3, r2
 8008380:	bf04      	itt	eq
 8008382:	681a      	ldreq	r2, [r3, #0]
 8008384:	685b      	ldreq	r3, [r3, #4]
 8008386:	6063      	str	r3, [r4, #4]
 8008388:	bf04      	itt	eq
 800838a:	1852      	addeq	r2, r2, r1
 800838c:	6022      	streq	r2, [r4, #0]
 800838e:	6004      	str	r4, [r0, #0]
 8008390:	e7ec      	b.n	800836c <_free_r+0x24>
 8008392:	4613      	mov	r3, r2
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	b10a      	cbz	r2, 800839c <_free_r+0x54>
 8008398:	42a2      	cmp	r2, r4
 800839a:	d9fa      	bls.n	8008392 <_free_r+0x4a>
 800839c:	6819      	ldr	r1, [r3, #0]
 800839e:	1858      	adds	r0, r3, r1
 80083a0:	42a0      	cmp	r0, r4
 80083a2:	d10b      	bne.n	80083bc <_free_r+0x74>
 80083a4:	6820      	ldr	r0, [r4, #0]
 80083a6:	4401      	add	r1, r0
 80083a8:	1858      	adds	r0, r3, r1
 80083aa:	4282      	cmp	r2, r0
 80083ac:	6019      	str	r1, [r3, #0]
 80083ae:	d1dd      	bne.n	800836c <_free_r+0x24>
 80083b0:	6810      	ldr	r0, [r2, #0]
 80083b2:	6852      	ldr	r2, [r2, #4]
 80083b4:	605a      	str	r2, [r3, #4]
 80083b6:	4401      	add	r1, r0
 80083b8:	6019      	str	r1, [r3, #0]
 80083ba:	e7d7      	b.n	800836c <_free_r+0x24>
 80083bc:	d902      	bls.n	80083c4 <_free_r+0x7c>
 80083be:	230c      	movs	r3, #12
 80083c0:	602b      	str	r3, [r5, #0]
 80083c2:	e7d3      	b.n	800836c <_free_r+0x24>
 80083c4:	6820      	ldr	r0, [r4, #0]
 80083c6:	1821      	adds	r1, r4, r0
 80083c8:	428a      	cmp	r2, r1
 80083ca:	bf04      	itt	eq
 80083cc:	6811      	ldreq	r1, [r2, #0]
 80083ce:	6852      	ldreq	r2, [r2, #4]
 80083d0:	6062      	str	r2, [r4, #4]
 80083d2:	bf04      	itt	eq
 80083d4:	1809      	addeq	r1, r1, r0
 80083d6:	6021      	streq	r1, [r4, #0]
 80083d8:	605c      	str	r4, [r3, #4]
 80083da:	e7c7      	b.n	800836c <_free_r+0x24>
 80083dc:	bd38      	pop	{r3, r4, r5, pc}
 80083de:	bf00      	nop
 80083e0:	20000090 	.word	0x20000090

080083e4 <_malloc_r>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	1ccd      	adds	r5, r1, #3
 80083e8:	f025 0503 	bic.w	r5, r5, #3
 80083ec:	3508      	adds	r5, #8
 80083ee:	2d0c      	cmp	r5, #12
 80083f0:	bf38      	it	cc
 80083f2:	250c      	movcc	r5, #12
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	4606      	mov	r6, r0
 80083f8:	db01      	blt.n	80083fe <_malloc_r+0x1a>
 80083fa:	42a9      	cmp	r1, r5
 80083fc:	d903      	bls.n	8008406 <_malloc_r+0x22>
 80083fe:	230c      	movs	r3, #12
 8008400:	6033      	str	r3, [r6, #0]
 8008402:	2000      	movs	r0, #0
 8008404:	bd70      	pop	{r4, r5, r6, pc}
 8008406:	f000 f87d 	bl	8008504 <__malloc_lock>
 800840a:	4a21      	ldr	r2, [pc, #132]	; (8008490 <_malloc_r+0xac>)
 800840c:	6814      	ldr	r4, [r2, #0]
 800840e:	4621      	mov	r1, r4
 8008410:	b991      	cbnz	r1, 8008438 <_malloc_r+0x54>
 8008412:	4c20      	ldr	r4, [pc, #128]	; (8008494 <_malloc_r+0xb0>)
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	b91b      	cbnz	r3, 8008420 <_malloc_r+0x3c>
 8008418:	4630      	mov	r0, r6
 800841a:	f000 f863 	bl	80084e4 <_sbrk_r>
 800841e:	6020      	str	r0, [r4, #0]
 8008420:	4629      	mov	r1, r5
 8008422:	4630      	mov	r0, r6
 8008424:	f000 f85e 	bl	80084e4 <_sbrk_r>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	d124      	bne.n	8008476 <_malloc_r+0x92>
 800842c:	230c      	movs	r3, #12
 800842e:	6033      	str	r3, [r6, #0]
 8008430:	4630      	mov	r0, r6
 8008432:	f000 f868 	bl	8008506 <__malloc_unlock>
 8008436:	e7e4      	b.n	8008402 <_malloc_r+0x1e>
 8008438:	680b      	ldr	r3, [r1, #0]
 800843a:	1b5b      	subs	r3, r3, r5
 800843c:	d418      	bmi.n	8008470 <_malloc_r+0x8c>
 800843e:	2b0b      	cmp	r3, #11
 8008440:	d90f      	bls.n	8008462 <_malloc_r+0x7e>
 8008442:	600b      	str	r3, [r1, #0]
 8008444:	50cd      	str	r5, [r1, r3]
 8008446:	18cc      	adds	r4, r1, r3
 8008448:	4630      	mov	r0, r6
 800844a:	f000 f85c 	bl	8008506 <__malloc_unlock>
 800844e:	f104 000b 	add.w	r0, r4, #11
 8008452:	1d23      	adds	r3, r4, #4
 8008454:	f020 0007 	bic.w	r0, r0, #7
 8008458:	1ac3      	subs	r3, r0, r3
 800845a:	d0d3      	beq.n	8008404 <_malloc_r+0x20>
 800845c:	425a      	negs	r2, r3
 800845e:	50e2      	str	r2, [r4, r3]
 8008460:	e7d0      	b.n	8008404 <_malloc_r+0x20>
 8008462:	428c      	cmp	r4, r1
 8008464:	684b      	ldr	r3, [r1, #4]
 8008466:	bf16      	itet	ne
 8008468:	6063      	strne	r3, [r4, #4]
 800846a:	6013      	streq	r3, [r2, #0]
 800846c:	460c      	movne	r4, r1
 800846e:	e7eb      	b.n	8008448 <_malloc_r+0x64>
 8008470:	460c      	mov	r4, r1
 8008472:	6849      	ldr	r1, [r1, #4]
 8008474:	e7cc      	b.n	8008410 <_malloc_r+0x2c>
 8008476:	1cc4      	adds	r4, r0, #3
 8008478:	f024 0403 	bic.w	r4, r4, #3
 800847c:	42a0      	cmp	r0, r4
 800847e:	d005      	beq.n	800848c <_malloc_r+0xa8>
 8008480:	1a21      	subs	r1, r4, r0
 8008482:	4630      	mov	r0, r6
 8008484:	f000 f82e 	bl	80084e4 <_sbrk_r>
 8008488:	3001      	adds	r0, #1
 800848a:	d0cf      	beq.n	800842c <_malloc_r+0x48>
 800848c:	6025      	str	r5, [r4, #0]
 800848e:	e7db      	b.n	8008448 <_malloc_r+0x64>
 8008490:	20000090 	.word	0x20000090
 8008494:	20000094 	.word	0x20000094

08008498 <_realloc_r>:
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849a:	4607      	mov	r7, r0
 800849c:	4614      	mov	r4, r2
 800849e:	460e      	mov	r6, r1
 80084a0:	b921      	cbnz	r1, 80084ac <_realloc_r+0x14>
 80084a2:	4611      	mov	r1, r2
 80084a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80084a8:	f7ff bf9c 	b.w	80083e4 <_malloc_r>
 80084ac:	b922      	cbnz	r2, 80084b8 <_realloc_r+0x20>
 80084ae:	f7ff ff4b 	bl	8008348 <_free_r>
 80084b2:	4625      	mov	r5, r4
 80084b4:	4628      	mov	r0, r5
 80084b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084b8:	f000 f826 	bl	8008508 <_malloc_usable_size_r>
 80084bc:	42a0      	cmp	r0, r4
 80084be:	d20f      	bcs.n	80084e0 <_realloc_r+0x48>
 80084c0:	4621      	mov	r1, r4
 80084c2:	4638      	mov	r0, r7
 80084c4:	f7ff ff8e 	bl	80083e4 <_malloc_r>
 80084c8:	4605      	mov	r5, r0
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d0f2      	beq.n	80084b4 <_realloc_r+0x1c>
 80084ce:	4631      	mov	r1, r6
 80084d0:	4622      	mov	r2, r4
 80084d2:	f7ff ff15 	bl	8008300 <memcpy>
 80084d6:	4631      	mov	r1, r6
 80084d8:	4638      	mov	r0, r7
 80084da:	f7ff ff35 	bl	8008348 <_free_r>
 80084de:	e7e9      	b.n	80084b4 <_realloc_r+0x1c>
 80084e0:	4635      	mov	r5, r6
 80084e2:	e7e7      	b.n	80084b4 <_realloc_r+0x1c>

080084e4 <_sbrk_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4c06      	ldr	r4, [pc, #24]	; (8008500 <_sbrk_r+0x1c>)
 80084e8:	2300      	movs	r3, #0
 80084ea:	4605      	mov	r5, r0
 80084ec:	4608      	mov	r0, r1
 80084ee:	6023      	str	r3, [r4, #0]
 80084f0:	f7ff faf2 	bl	8007ad8 <_sbrk>
 80084f4:	1c43      	adds	r3, r0, #1
 80084f6:	d102      	bne.n	80084fe <_sbrk_r+0x1a>
 80084f8:	6823      	ldr	r3, [r4, #0]
 80084fa:	b103      	cbz	r3, 80084fe <_sbrk_r+0x1a>
 80084fc:	602b      	str	r3, [r5, #0]
 80084fe:	bd38      	pop	{r3, r4, r5, pc}
 8008500:	200007a0 	.word	0x200007a0

08008504 <__malloc_lock>:
 8008504:	4770      	bx	lr

08008506 <__malloc_unlock>:
 8008506:	4770      	bx	lr

08008508 <_malloc_usable_size_r>:
 8008508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800850c:	1f18      	subs	r0, r3, #4
 800850e:	2b00      	cmp	r3, #0
 8008510:	bfbc      	itt	lt
 8008512:	580b      	ldrlt	r3, [r1, r0]
 8008514:	18c0      	addlt	r0, r0, r3
 8008516:	4770      	bx	lr

08008518 <_init>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	bf00      	nop
 800851c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851e:	bc08      	pop	{r3}
 8008520:	469e      	mov	lr, r3
 8008522:	4770      	bx	lr

08008524 <_fini>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr
