
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbfc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800fd90  0800fd90  0001fd90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080102d0  080102d0  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  080102d0  080102d0  000202d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080102d8  080102d8  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080102d8  080102d8  000202d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080102dc  080102dc  000202dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080102e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001338  200000a8  08010388  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013e0  08010388  000313e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a29c  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e85  00000000  00000000  0004a374  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018a0  00000000  00000000  0004d200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001770  00000000  00000000  0004eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022b9c  00000000  00000000  00050210  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000126af  00000000  00000000  00072dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3888  00000000  00000000  0008545b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00158ce3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000746c  00000000  00000000  00158d60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fd74 	.word	0x0800fd74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800fd74 	.word	0x0800fd74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f001 fdcb 	bl	8002b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f00b fa96 	bl	800c4ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fde3 	bl	8002bb6 <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001008:	f001 fdab 	bl	8002b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000003c 	.word	0x2000003c
 8001024:	20000004 	.word	0x20000004
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004
 8001050:	2000012c 	.word	0x2000012c

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	2000012c 	.word	0x2000012c

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_Delay+0x40>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e033      	b.n	800112e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f00b fa34 	bl	800c53c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d118      	bne.n	8001120 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010f6:	f023 0302 	bic.w	r3, r3, #2
 80010fa:	f043 0202 	orr.w	r2, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 fb80 	bl	8001808 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f023 0303 	bic.w	r3, r3, #3
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	641a      	str	r2, [r3, #64]	; 0x40
 800111e:	e001      	b.n	8001124 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b02      	cmp	r3, #2
 8001152:	bf0c      	ite	eq
 8001154:	2301      	moveq	r3, #1
 8001156:	2300      	movne	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	2b20      	cmp	r3, #32
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d049      	beq.n	800120c <HAL_ADC_IRQHandler+0xd6>
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d046      	beq.n	800120c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	2b00      	cmp	r3, #0
 8001188:	d105      	bne.n	8001196 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d12b      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d127      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d006      	beq.n	80011c8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d119      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0220 	bic.w	r2, r2, #32
 80011d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f043 0201 	orr.w	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f00a fa9f 	bl	800b740 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f06f 0212 	mvn.w	r2, #18
 800120a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf0c      	ite	eq
 800121a:	2301      	moveq	r3, #1
 800121c:	2300      	movne	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122c:	2b80      	cmp	r3, #128	; 0x80
 800122e:	bf0c      	ite	eq
 8001230:	2301      	moveq	r3, #1
 8001232:	2300      	movne	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d057      	beq.n	80012ee <HAL_ADC_IRQHandler+0x1b8>
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d054      	beq.n	80012ee <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d139      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001270:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001274:	2b00      	cmp	r3, #0
 8001276:	d006      	beq.n	8001286 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001282:	2b00      	cmp	r3, #0
 8001284:	d12b      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001290:	2b00      	cmp	r3, #0
 8001292:	d124      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d11d      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d119      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d105      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f043 0201 	orr.w	r2, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fd06 	bl	8001cf0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f06f 020c 	mvn.w	r2, #12
 80012ec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	bf0c      	ite	eq
 80012fc:	2301      	moveq	r3, #1
 80012fe:	2300      	movne	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130e:	2b40      	cmp	r3, #64	; 0x40
 8001310:	bf0c      	ite	eq
 8001312:	2301      	moveq	r3, #1
 8001314:	2300      	movne	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d017      	beq.n	8001350 <HAL_ADC_IRQHandler+0x21a>
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d014      	beq.n	8001350 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b01      	cmp	r3, #1
 8001332:	d10d      	bne.n	8001350 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f92b 	bl	800159c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f06f 0201 	mvn.w	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0320 	and.w	r3, r3, #32
 800135a:	2b20      	cmp	r3, #32
 800135c:	bf0c      	ite	eq
 800135e:	2301      	moveq	r3, #1
 8001360:	2300      	movne	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001374:	bf0c      	ite	eq
 8001376:	2301      	moveq	r3, #1
 8001378:	2300      	movne	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d015      	beq.n	80013b0 <HAL_ADC_IRQHandler+0x27a>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d012      	beq.n	80013b0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f043 0202 	orr.w	r2, r3, #2
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f06f 0220 	mvn.w	r2, #32
 800139e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f905 	bl	80015b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f06f 0220 	mvn.w	r2, #32
 80013ae:	601a      	str	r2, [r3, #0]
  }
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d101      	bne.n	80013d6 <HAL_ADC_Start_DMA+0x1e>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e0cc      	b.n	8001570 <HAL_ADC_Start_DMA+0x1b8>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d018      	beq.n	800141e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0201 	orr.w	r2, r2, #1
 80013fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013fc:	4b5e      	ldr	r3, [pc, #376]	; (8001578 <HAL_ADC_Start_DMA+0x1c0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a5e      	ldr	r2, [pc, #376]	; (800157c <HAL_ADC_Start_DMA+0x1c4>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	0c9a      	lsrs	r2, r3, #18
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001410:	e002      	b.n	8001418 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	3b01      	subs	r3, #1
 8001416:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f9      	bne.n	8001412 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	f040 80a0 	bne.w	800156e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d007      	beq.n	8001460 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001458:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800146c:	d106      	bne.n	800147c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f023 0206 	bic.w	r2, r3, #6
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	645a      	str	r2, [r3, #68]	; 0x44
 800147a:	e002      	b.n	8001482 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <HAL_ADC_Start_DMA+0x1c8>)
 800148c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001492:	4a3c      	ldr	r2, [pc, #240]	; (8001584 <HAL_ADC_Start_DMA+0x1cc>)
 8001494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	4a3b      	ldr	r2, [pc, #236]	; (8001588 <HAL_ADC_Start_DMA+0x1d0>)
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	4a3a      	ldr	r2, [pc, #232]	; (800158c <HAL_ADC_Start_DMA+0x1d4>)
 80014a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	334c      	adds	r3, #76	; 0x4c
 80014da:	4619      	mov	r1, r3
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f001 fc24 	bl	8002d2c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d12a      	bne.n	8001546 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a26      	ldr	r2, [pc, #152]	; (8001590 <HAL_ADC_Start_DMA+0x1d8>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d015      	beq.n	8001526 <HAL_ADC_Start_DMA+0x16e>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a25      	ldr	r2, [pc, #148]	; (8001594 <HAL_ADC_Start_DMA+0x1dc>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d105      	bne.n	8001510 <HAL_ADC_Start_DMA+0x158>
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_ADC_Start_DMA+0x1c8>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00a      	beq.n	8001526 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a20      	ldr	r2, [pc, #128]	; (8001598 <HAL_ADC_Start_DMA+0x1e0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d129      	bne.n	800156e <HAL_ADC_Start_DMA+0x1b6>
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_ADC_Start_DMA+0x1c8>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 031f 	and.w	r3, r3, #31
 8001522:	2b0f      	cmp	r3, #15
 8001524:	d823      	bhi.n	800156e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d11c      	bne.n	800156e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	e013      	b.n	800156e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a11      	ldr	r2, [pc, #68]	; (8001590 <HAL_ADC_Start_DMA+0x1d8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d10e      	bne.n	800156e <HAL_ADC_Start_DMA+0x1b6>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d107      	bne.n	800156e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800156c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000003c 	.word	0x2000003c
 800157c:	431bde83 	.word	0x431bde83
 8001580:	40012300 	.word	0x40012300
 8001584:	08001a01 	.word	0x08001a01
 8001588:	08001abb 	.word	0x08001abb
 800158c:	08001ad7 	.word	0x08001ad7
 8001590:	40012000 	.word	0x40012000
 8001594:	40012100 	.word	0x40012100
 8001598:	40012200 	.word	0x40012200

0800159c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x1c>
 80015dc:	2302      	movs	r3, #2
 80015de:	e105      	b.n	80017ec <HAL_ADC_ConfigChannel+0x228>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b09      	cmp	r3, #9
 80015ee:	d925      	bls.n	800163c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68d9      	ldr	r1, [r3, #12]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	3b1e      	subs	r3, #30
 8001606:	2207      	movs	r2, #7
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43da      	mvns	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	400a      	ands	r2, r1
 8001614:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68d9      	ldr	r1, [r3, #12]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	4603      	mov	r3, r0
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4403      	add	r3, r0
 800162e:	3b1e      	subs	r3, #30
 8001630:	409a      	lsls	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	e022      	b.n	8001682 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6919      	ldr	r1, [r3, #16]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	b29b      	uxth	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	2207      	movs	r2, #7
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	400a      	ands	r2, r1
 800165e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6919      	ldr	r1, [r3, #16]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	4603      	mov	r3, r0
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4403      	add	r3, r0
 8001678:	409a      	lsls	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b06      	cmp	r3, #6
 8001688:	d824      	bhi.n	80016d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	3b05      	subs	r3, #5
 800169c:	221f      	movs	r2, #31
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	400a      	ands	r2, r1
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	3b05      	subs	r3, #5
 80016c6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	635a      	str	r2, [r3, #52]	; 0x34
 80016d2:	e04c      	b.n	800176e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b0c      	cmp	r3, #12
 80016da:	d824      	bhi.n	8001726 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	3b23      	subs	r3, #35	; 0x23
 80016ee:	221f      	movs	r2, #31
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43da      	mvns	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	400a      	ands	r2, r1
 80016fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	b29b      	uxth	r3, r3
 800170a:	4618      	mov	r0, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	3b23      	subs	r3, #35	; 0x23
 8001718:	fa00 f203 	lsl.w	r2, r0, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	631a      	str	r2, [r3, #48]	; 0x30
 8001724:	e023      	b.n	800176e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	3b41      	subs	r3, #65	; 0x41
 8001738:	221f      	movs	r2, #31
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	400a      	ands	r2, r1
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	4618      	mov	r0, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	3b41      	subs	r3, #65	; 0x41
 8001762:	fa00 f203 	lsl.w	r2, r0, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_ADC_ConfigChannel+0x234>)
 8001770:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a21      	ldr	r2, [pc, #132]	; (80017fc <HAL_ADC_ConfigChannel+0x238>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d109      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x1cc>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b12      	cmp	r3, #18
 8001782:	d105      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a19      	ldr	r2, [pc, #100]	; (80017fc <HAL_ADC_ConfigChannel+0x238>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d123      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x21e>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d003      	beq.n	80017aa <HAL_ADC_ConfigChannel+0x1e6>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b11      	cmp	r3, #17
 80017a8:	d11b      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b10      	cmp	r3, #16
 80017bc:	d111      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_ADC_ConfigChannel+0x23c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <HAL_ADC_ConfigChannel+0x240>)
 80017c4:	fba2 2303 	umull	r2, r3, r2, r3
 80017c8:	0c9a      	lsrs	r2, r3, #18
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017d4:	e002      	b.n	80017dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	3b01      	subs	r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f9      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	40012300 	.word	0x40012300
 80017fc:	40012000 	.word	0x40012000
 8001800:	2000003c 	.word	0x2000003c
 8001804:	431bde83 	.word	0x431bde83

08001808 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001810:	4b79      	ldr	r3, [pc, #484]	; (80019f8 <ADC_Init+0x1f0>)
 8001812:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	431a      	orrs	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800183c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	021a      	lsls	r2, r3, #8
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6899      	ldr	r1, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	4a58      	ldr	r2, [pc, #352]	; (80019fc <ADC_Init+0x1f4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d022      	beq.n	80018e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6899      	ldr	r1, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6899      	ldr	r1, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	e00f      	b.n	8001906 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001904:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0202 	bic.w	r2, r2, #2
 8001914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6899      	ldr	r1, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7e1b      	ldrb	r3, [r3, #24]
 8001920:	005a      	lsls	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01b      	beq.n	800196c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001942:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001952:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6859      	ldr	r1, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	3b01      	subs	r3, #1
 8001960:	035a      	lsls	r2, r3, #13
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	e007      	b.n	800197c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	3b01      	subs	r3, #1
 8001998:	051a      	lsls	r2, r3, #20
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6899      	ldr	r1, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019be:	025a      	lsls	r2, r3, #9
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6899      	ldr	r1, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	029a      	lsls	r2, r3, #10
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	40012300 	.word	0x40012300
 80019fc:	0f000001 	.word	0x0f000001

08001a00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d13c      	bne.n	8001a94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d12b      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d127      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d119      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0220 	bic.w	r2, r2, #32
 8001a66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f009 fe57 	bl	800b740 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a92:	e00e      	b.n	8001ab2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f7ff fd85 	bl	80015b0 <HAL_ADC_ErrorCallback>
}
 8001aa6:	e004      	b.n	8001ab2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	4798      	blx	r3
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f009 fe29 	bl	800b720 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2240      	movs	r2, #64	; 0x40
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f043 0204 	orr.w	r2, r3, #4
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f7ff fd5a 	bl	80015b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_ADCEx_InjectedStart+0x22>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e09d      	b.n	8001c62 <HAL_ADCEx_InjectedStart+0x15e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d018      	beq.n	8001b6e <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b4c:	4b48      	ldr	r3, [pc, #288]	; (8001c70 <HAL_ADCEx_InjectedStart+0x16c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a48      	ldr	r2, [pc, #288]	; (8001c74 <HAL_ADCEx_InjectedStart+0x170>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	0c9a      	lsrs	r2, r3, #18
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b60:	e002      	b.n	8001b68 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f9      	bne.n	8001b62 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d171      	bne.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f06f 0204 	mvn.w	r2, #4
 8001bb2:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bb4:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <HAL_ADCEx_InjectedStart+0x174>)
 8001bb6:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d124      	bne.n	8001c0e <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf0c      	ite	eq
 8001bd2:	2301      	moveq	r3, #1
 8001bd4:	2300      	movne	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d034      	beq.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d031      	beq.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	e028      	b.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf0c      	ite	eq
 8001c1c:	2301      	moveq	r3, #1
 8001c1e:	2300      	movne	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	bf0c      	ite	eq
 8001c32:	2301      	moveq	r3, #1
 8001c34:	2300      	movne	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a0f      	ldr	r2, [pc, #60]	; (8001c7c <HAL_ADCEx_InjectedStart+0x178>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d10d      	bne.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00a      	beq.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c5e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	371c      	adds	r7, #28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	2000003c 	.word	0x2000003c
 8001c74:	431bde83 	.word	0x431bde83
 8001c78:	40012300 	.word	0x40012300
 8001c7c:	40012000 	.word	0x40012000

08001c80 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f06f 0204 	mvn.w	r2, #4
 8001c96:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d81f      	bhi.n	8001ce0 <HAL_ADCEx_InjectedGetValue+0x60>
 8001ca0:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <HAL_ADCEx_InjectedGetValue+0x28>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	08001cd7 	.word	0x08001cd7
 8001cac:	08001ccd 	.word	0x08001ccd
 8001cb0:	08001cc3 	.word	0x08001cc3
 8001cb4:	08001cb9 	.word	0x08001cb9
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cbe:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001cc0:	e00f      	b.n	8001ce2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc8:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001cca:	e00a      	b.n	8001ce2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001cd4:	e005      	b.n	8001ce2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cdc:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001cde:	e000      	b.n	8001ce2 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8001ce0:	bf00      	nop
  }
  return tmp;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e17a      	b.n	8002012 <HAL_ADCEx_InjectedConfigChannel+0x30e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b09      	cmp	r3, #9
 8001d2a:	d925      	bls.n	8001d78 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68d9      	ldr	r1, [r3, #12]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b1e      	subs	r3, #30
 8001d42:	2207      	movs	r2, #7
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43da      	mvns	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	400a      	ands	r2, r1
 8001d50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68d9      	ldr	r1, [r3, #12]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	4603      	mov	r3, r0
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4403      	add	r3, r0
 8001d6a:	3b1e      	subs	r3, #30
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	e022      	b.n	8001dbe <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6919      	ldr	r1, [r3, #16]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	400a      	ands	r2, r1
 8001d9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6919      	ldr	r1, [r3, #16]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4618      	mov	r0, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4403      	add	r3, r0
 8001db4:	409a      	lsls	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	051a      	lsls	r2, r3, #20
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	3303      	adds	r3, #3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	221f      	movs	r2, #31
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43da      	mvns	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	400a      	ands	r2, r1
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	3303      	adds	r3, #3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	fa00 f203 	lsl.w	r2, r0, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a73      	ldr	r2, [pc, #460]	; (8002020 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d022      	beq.n	8001e9c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001e64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6899      	ldr	r1, [r3, #8]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6899      	ldr	r1, [r3, #8]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	69da      	ldr	r2, [r3, #28]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	e00f      	b.n	8001ebc <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001eaa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001eba:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	7d5b      	ldrb	r3, [r3, #21]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	e007      	b.n	8001ee6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee4:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	7d1b      	ldrb	r3, [r3, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d008      	beq.n	8001f00 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	e007      	b.n	8001f10 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f0e:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d017      	beq.n	8001f48 <HAL_ADCEx_InjectedConfigChannel+0x244>
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d029      	beq.n	8001f70 <HAL_ADCEx_InjectedConfigChannel+0x26c>
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d13b      	bne.n	8001f98 <HAL_ADCEx_InjectedConfigChannel+0x294>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f2e:	f023 030f 	bic.w	r3, r3, #15
 8001f32:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6959      	ldr	r1, [r3, #20]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	615a      	str	r2, [r3, #20]
      break;
 8001f46:	e03b      	b.n	8001fc0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f56:	f023 030f 	bic.w	r3, r3, #15
 8001f5a:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6999      	ldr	r1, [r3, #24]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	619a      	str	r2, [r3, #24]
      break;
 8001f6e:	e027      	b.n	8001fc0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f7e:	f023 030f 	bic.w	r3, r3, #15
 8001f82:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	69d9      	ldr	r1, [r3, #28]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	61da      	str	r2, [r3, #28]
      break;
 8001f96:	e013      	b.n	8001fc0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001fa6:	f023 030f 	bic.w	r3, r3, #15
 8001faa:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6a19      	ldr	r1, [r3, #32]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	621a      	str	r2, [r3, #32]
      break;
 8001fbe:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a17      	ldr	r2, [pc, #92]	; (8002028 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d109      	bne.n	8001fe2 <HAL_ADCEx_InjectedConfigChannel+0x2de>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b12      	cmp	r3, #18
 8001fd4:	d105      	bne.n	8001fe2 <HAL_ADCEx_InjectedConfigChannel+0x2de>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a10      	ldr	r2, [pc, #64]	; (8002028 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d10d      	bne.n	8002008 <HAL_ADCEx_InjectedConfigChannel+0x304>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d003      	beq.n	8001ffc <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b11      	cmp	r3, #17
 8001ffa:	d105      	bne.n	8002008 <HAL_ADCEx_InjectedConfigChannel+0x304>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	000f0001 	.word	0x000f0001
 8002024:	40012300 	.word	0x40012300
 8002028:	40012000 	.word	0x40012000

0800202c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8002040:	2302      	movs	r3, #2
 8002042:	e031      	b.n	80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 800204e:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f023 021f 	bic.w	r2, r3, #31
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	431a      	orrs	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	431a      	orrs	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	431a      	orrs	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	40012300 	.word	0x40012300

080020b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0ed      	b.n	80022a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d102      	bne.n	80020dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f00a fc1c 	bl	800c914 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0202 	bic.w	r2, r2, #2
 80020ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ec:	f7fe ffb2 	bl	8001054 <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020f2:	e012      	b.n	800211a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020f4:	f7fe ffae 	bl	8001054 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b0a      	cmp	r3, #10
 8002100:	d90b      	bls.n	800211a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2205      	movs	r2, #5
 8002112:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e0c5      	b.n	80022a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1e5      	bne.n	80020f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002138:	f7fe ff8c 	bl	8001054 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800213e:	e012      	b.n	8002166 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002140:	f7fe ff88 	bl	8001054 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b0a      	cmp	r3, #10
 800214c:	d90b      	bls.n	8002166 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2205      	movs	r2, #5
 800215e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e09f      	b.n	80022a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0e5      	beq.n	8002140 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7e1b      	ldrb	r3, [r3, #24]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d108      	bne.n	800218e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e007      	b.n	800219e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800219c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7e5b      	ldrb	r3, [r3, #25]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d108      	bne.n	80021b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e007      	b.n	80021c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7e9b      	ldrb	r3, [r3, #26]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d108      	bne.n	80021e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0220 	orr.w	r2, r2, #32
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e007      	b.n	80021f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0220 	bic.w	r2, r2, #32
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7edb      	ldrb	r3, [r3, #27]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d108      	bne.n	800220c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0210 	bic.w	r2, r2, #16
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	e007      	b.n	800221c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0210 	orr.w	r2, r2, #16
 800221a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7f1b      	ldrb	r3, [r3, #28]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d108      	bne.n	8002236 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0208 	orr.w	r2, r2, #8
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	e007      	b.n	8002246 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0208 	bic.w	r2, r2, #8
 8002244:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7f5b      	ldrb	r3, [r3, #29]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d108      	bne.n	8002260 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0204 	orr.w	r2, r2, #4
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e007      	b.n	8002270 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0204 	bic.w	r2, r2, #4
 800226e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	ea42 0103 	orr.w	r1, r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	1e5a      	subs	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022c8:	7cfb      	ldrb	r3, [r7, #19]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d003      	beq.n	80022d6 <HAL_CAN_ConfigFilter+0x26>
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	f040 80be 	bne.w	8002452 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80022d6:	4b65      	ldr	r3, [pc, #404]	; (800246c <HAL_CAN_ConfigFilter+0x1bc>)
 80022d8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022e0:	f043 0201 	orr.w	r2, r3, #1
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	431a      	orrs	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2201      	movs	r2, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	43db      	mvns	r3, r3
 8002328:	401a      	ands	r2, r3
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d123      	bne.n	8002380 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	43db      	mvns	r3, r3
 8002342:	401a      	ands	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800235a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3248      	adds	r2, #72	; 0x48
 8002360:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002374:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002376:	6979      	ldr	r1, [r7, #20]
 8002378:	3348      	adds	r3, #72	; 0x48
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d122      	bne.n	80023ce <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	431a      	orrs	r2, r3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	3248      	adds	r2, #72	; 0x48
 80023ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023c4:	6979      	ldr	r1, [r7, #20]
 80023c6:	3348      	adds	r3, #72	; 0x48
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	440b      	add	r3, r1
 80023cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	43db      	mvns	r3, r3
 80023e0:	401a      	ands	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80023e8:	e007      	b.n	80023fa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	43db      	mvns	r3, r3
 800240c:	401a      	ands	r2, r3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002414:	e007      	b.n	8002426 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	431a      	orrs	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	431a      	orrs	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002444:	f023 0201 	bic.w	r2, r3, #1
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e006      	b.n	8002460 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
  }
}
 8002460:	4618      	mov	r0, r3
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40006400 	.word	0x40006400

08002470 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d12e      	bne.n	80024e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800249c:	f7fe fdda 	bl	8001054 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024a2:	e012      	b.n	80024ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024a4:	f7fe fdd6 	bl	8001054 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b0a      	cmp	r3, #10
 80024b0:	d90b      	bls.n	80024ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2205      	movs	r2, #5
 80024c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e012      	b.n	80024f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1e5      	bne.n	80024a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e006      	b.n	80024f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
  }
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002508:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d002      	beq.n	8002516 <HAL_CAN_ActivateNotification+0x1e>
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d109      	bne.n	800252a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6959      	ldr	r1, [r3, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e006      	b.n	8002538 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
  }
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800254c:	2300      	movs	r3, #0
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d07c      	beq.n	8002684 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d023      	beq.n	80025dc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2201      	movs	r2, #1
 800259a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f97d 	bl	80028a6 <HAL_CAN_TxMailbox0CompleteCallback>
 80025ac:	e016      	b.n	80025dc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
 80025c0:	e00c      	b.n	80025dc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	e002      	b.n	80025dc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f983 	bl	80028e2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d024      	beq.n	8002630 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f95d 	bl	80028ba <HAL_CAN_TxMailbox1CompleteCallback>
 8002600:	e016      	b.n	8002630 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
 8002614:	e00c      	b.n	8002630 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
 8002628:	e002      	b.n	8002630 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f963 	bl	80028f6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d024      	beq.n	8002684 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002642:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f93d 	bl	80028ce <HAL_CAN_TxMailbox2CompleteCallback>
 8002654:	e016      	b.n	8002684 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
 8002668:	e00c      	b.n	8002684 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
 800267c:	e002      	b.n	8002684 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f943 	bl	800290a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00c      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800269e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2210      	movs	r2, #16
 80026a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d006      	beq.n	80026ca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2208      	movs	r2, #8
 80026c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f934 	bl	8002932 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d009      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f91b 	bl	800291e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00c      	beq.n	800270c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002702:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2210      	movs	r2, #16
 800270a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d006      	beq.n	800272e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2208      	movs	r2, #8
 8002726:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f916 	bl	800295a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b00      	cmp	r3, #0
 8002736:	d009      	beq.n	800274c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f8fd 	bl	8002946 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2210      	movs	r2, #16
 8002766:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f900 	bl	800296e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00b      	beq.n	8002790 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d006      	beq.n	8002790 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2208      	movs	r2, #8
 8002788:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f8f9 	bl	8002982 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d075      	beq.n	8002886 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d06c      	beq.n	800287e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d008      	beq.n	80027dc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	f043 0302 	orr.w	r3, r3, #2
 80027da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	f043 0304 	orr.w	r3, r3, #4
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d03d      	beq.n	800287e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002808:	2b00      	cmp	r3, #0
 800280a:	d038      	beq.n	800287e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002812:	2b30      	cmp	r3, #48	; 0x30
 8002814:	d017      	beq.n	8002846 <HAL_CAN_IRQHandler+0x302>
 8002816:	2b30      	cmp	r3, #48	; 0x30
 8002818:	d804      	bhi.n	8002824 <HAL_CAN_IRQHandler+0x2e0>
 800281a:	2b10      	cmp	r3, #16
 800281c:	d009      	beq.n	8002832 <HAL_CAN_IRQHandler+0x2ee>
 800281e:	2b20      	cmp	r3, #32
 8002820:	d00c      	beq.n	800283c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002822:	e024      	b.n	800286e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002824:	2b50      	cmp	r3, #80	; 0x50
 8002826:	d018      	beq.n	800285a <HAL_CAN_IRQHandler+0x316>
 8002828:	2b60      	cmp	r3, #96	; 0x60
 800282a:	d01b      	beq.n	8002864 <HAL_CAN_IRQHandler+0x320>
 800282c:	2b40      	cmp	r3, #64	; 0x40
 800282e:	d00f      	beq.n	8002850 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002830:	e01d      	b.n	800286e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	f043 0308 	orr.w	r3, r3, #8
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800283a:	e018      	b.n	800286e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	f043 0310 	orr.w	r3, r3, #16
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002844:	e013      	b.n	800286e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	f043 0320 	orr.w	r3, r3, #32
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800284e:	e00e      	b.n	800286e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002858:	e009      	b.n	800286e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002862:	e004      	b.n	800286e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800286c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699a      	ldr	r2, [r3, #24]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800287c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2204      	movs	r2, #4
 8002884:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f87c 	bl	8002996 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800289e:	bf00      	nop
 80028a0:	3728      	adds	r7, #40	; 0x28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <__NVIC_SetPriorityGrouping+0x44>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c8:	4013      	ands	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029de:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <__NVIC_SetPriorityGrouping+0x44>)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	60d3      	str	r3, [r2, #12]
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <__NVIC_GetPriorityGrouping+0x18>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	0a1b      	lsrs	r3, r3, #8
 80029fe:	f003 0307 	and.w	r3, r3, #7
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	db0b      	blt.n	8002a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	f003 021f 	and.w	r2, r3, #31
 8002a28:	4907      	ldr	r1, [pc, #28]	; (8002a48 <__NVIC_EnableIRQ+0x38>)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	2001      	movs	r0, #1
 8002a32:	fa00 f202 	lsl.w	r2, r0, r2
 8002a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000e100 	.word	0xe000e100

08002a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	6039      	str	r1, [r7, #0]
 8002a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	db0a      	blt.n	8002a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	490c      	ldr	r1, [pc, #48]	; (8002a98 <__NVIC_SetPriority+0x4c>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	0112      	lsls	r2, r2, #4
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a74:	e00a      	b.n	8002a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4908      	ldr	r1, [pc, #32]	; (8002a9c <__NVIC_SetPriority+0x50>)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	3b04      	subs	r3, #4
 8002a84:	0112      	lsls	r2, r2, #4
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	440b      	add	r3, r1
 8002a8a:	761a      	strb	r2, [r3, #24]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000e100 	.word	0xe000e100
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b089      	sub	sp, #36	; 0x24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f1c3 0307 	rsb	r3, r3, #7
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	bf28      	it	cs
 8002abe:	2304      	movcs	r3, #4
 8002ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	2b06      	cmp	r3, #6
 8002ac8:	d902      	bls.n	8002ad0 <NVIC_EncodePriority+0x30>
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3b03      	subs	r3, #3
 8002ace:	e000      	b.n	8002ad2 <NVIC_EncodePriority+0x32>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	43d9      	mvns	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	4313      	orrs	r3, r2
         );
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3724      	adds	r7, #36	; 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b18:	d301      	bcc.n	8002b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00f      	b.n	8002b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <SysTick_Config+0x40>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b26:	210f      	movs	r1, #15
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b2c:	f7ff ff8e 	bl	8002a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <SysTick_Config+0x40>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b36:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <SysTick_Config+0x40>)
 8002b38:	2207      	movs	r2, #7
 8002b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	e000e010 	.word	0xe000e010

08002b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ff29 	bl	80029ac <__NVIC_SetPriorityGrouping>
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b086      	sub	sp, #24
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	4603      	mov	r3, r0
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b74:	f7ff ff3e 	bl	80029f4 <__NVIC_GetPriorityGrouping>
 8002b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	6978      	ldr	r0, [r7, #20]
 8002b80:	f7ff ff8e 	bl	8002aa0 <NVIC_EncodePriority>
 8002b84:	4602      	mov	r2, r0
 8002b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff5d 	bl	8002a4c <__NVIC_SetPriority>
}
 8002b92:	bf00      	nop
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff31 	bl	8002a10 <__NVIC_EnableIRQ>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff ffa2 	bl	8002b08 <SysTick_Config>
 8002bc4:	4603      	mov	r3, r0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bdc:	f7fe fa3a 	bl	8001054 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e099      	b.n	8002d20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c0c:	e00f      	b.n	8002c2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c0e:	f7fe fa21 	bl	8001054 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d908      	bls.n	8002c2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2203      	movs	r2, #3
 8002c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e078      	b.n	8002d20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e8      	bne.n	8002c0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4b38      	ldr	r3, [pc, #224]	; (8002d28 <HAL_DMA_Init+0x158>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d107      	bne.n	8002c98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	4313      	orrs	r3, r2
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f023 0307 	bic.w	r3, r3, #7
 8002cae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d117      	bne.n	8002cf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00e      	beq.n	8002cf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fae5 	bl	80032a4 <DMA_CheckFifoParam>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2240      	movs	r2, #64	; 0x40
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e016      	b.n	8002d20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fa9c 	bl	8003238 <DMA_CalcBaseAndBitshift>
 8002d00:	4603      	mov	r3, r0
 8002d02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	223f      	movs	r2, #63	; 0x3f
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	f010803f 	.word	0xf010803f

08002d2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_DMA_Start_IT+0x26>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e040      	b.n	8002dd4 <HAL_DMA_Start_IT+0xa8>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d12f      	bne.n	8002dc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fa2e 	bl	80031dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	223f      	movs	r2, #63	; 0x3f
 8002d86:	409a      	lsls	r2, r3
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0216 	orr.w	r2, r2, #22
 8002d9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d007      	beq.n	8002db4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0208 	orr.w	r2, r2, #8
 8002db2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	e005      	b.n	8002dd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d004      	beq.n	8002dfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2280      	movs	r2, #128	; 0x80
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e00c      	b.n	8002e14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2205      	movs	r2, #5
 8002dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e2c:	4b92      	ldr	r3, [pc, #584]	; (8003078 <HAL_DMA_IRQHandler+0x258>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a92      	ldr	r2, [pc, #584]	; (800307c <HAL_DMA_IRQHandler+0x25c>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0a9b      	lsrs	r3, r3, #10
 8002e38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01a      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0204 	bic.w	r2, r2, #4
 8002e72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	2208      	movs	r2, #8
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e84:	f043 0201 	orr.w	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	2201      	movs	r2, #1
 8002e92:	409a      	lsls	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d012      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eae:	2201      	movs	r2, #1
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f043 0202 	orr.w	r2, r3, #2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d012      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00b      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	f043 0204 	orr.w	r2, r3, #4
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	2210      	movs	r2, #16
 8002efe:	409a      	lsls	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d043      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d03c      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d018      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d108      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d024      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	4798      	blx	r3
 8002f4e:	e01f      	b.n	8002f90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01b      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
 8002f60:	e016      	b.n	8002f90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0208 	bic.w	r2, r2, #8
 8002f7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	2220      	movs	r2, #32
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 808e 	beq.w	80030be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8086 	beq.w	80030be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b05      	cmp	r3, #5
 8002fc8:	d136      	bne.n	8003038 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0216 	bic.w	r2, r2, #22
 8002fd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d103      	bne.n	8002ffa <HAL_DMA_IRQHandler+0x1da>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d007      	beq.n	800300a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0208 	bic.w	r2, r2, #8
 8003008:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	223f      	movs	r2, #63	; 0x3f
 8003010:	409a      	lsls	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302a:	2b00      	cmp	r3, #0
 800302c:	d07d      	beq.n	800312a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4798      	blx	r3
        }
        return;
 8003036:	e078      	b.n	800312a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01c      	beq.n	8003080 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d108      	bne.n	8003066 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003058:	2b00      	cmp	r3, #0
 800305a:	d030      	beq.n	80030be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
 8003064:	e02b      	b.n	80030be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d027      	beq.n	80030be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	4798      	blx	r3
 8003076:	e022      	b.n	80030be <HAL_DMA_IRQHandler+0x29e>
 8003078:	2000003c 	.word	0x2000003c
 800307c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10f      	bne.n	80030ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0210 	bic.w	r2, r2, #16
 800309c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d032      	beq.n	800312c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d022      	beq.n	8003118 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2205      	movs	r2, #5
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0201 	bic.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	3301      	adds	r3, #1
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d307      	bcc.n	8003106 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f2      	bne.n	80030ea <HAL_DMA_IRQHandler+0x2ca>
 8003104:	e000      	b.n	8003108 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003106:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
 8003128:	e000      	b.n	800312c <HAL_DMA_IRQHandler+0x30c>
        return;
 800312a:	bf00      	nop
    }
  }
}
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop

08003134 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	460b      	mov	r3, r1
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_DMA_RegisterCallback+0x20>
 8003150:	2302      	movs	r3, #2
 8003152:	e03c      	b.n	80031ce <HAL_DMA_RegisterCallback+0x9a>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d129      	bne.n	80031bc <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8003168:	7afb      	ldrb	r3, [r7, #11]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d829      	bhi.n	80031c2 <HAL_DMA_RegisterCallback+0x8e>
 800316e:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <HAL_DMA_RegisterCallback+0x40>)
 8003170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003174:	0800318d 	.word	0x0800318d
 8003178:	08003195 	.word	0x08003195
 800317c:	0800319d 	.word	0x0800319d
 8003180:	080031a5 	.word	0x080031a5
 8003184:	080031ad 	.word	0x080031ad
 8003188:	080031b5 	.word	0x080031b5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8003192:	e017      	b.n	80031c4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800319a:	e013      	b.n	80031c4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80031a2:	e00f      	b.n	80031c4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80031aa:	e00b      	b.n	80031c4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80031b2:	e007      	b.n	80031c4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80031ba:	e003      	b.n	80031c4 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	75fb      	strb	r3, [r7, #23]
 80031c0:	e000      	b.n	80031c4 <HAL_DMA_RegisterCallback+0x90>
      break;
 80031c2:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop

080031dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d108      	bne.n	800321c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800321a:	e007      	b.n	800322c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	60da      	str	r2, [r3, #12]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	3b10      	subs	r3, #16
 8003248:	4a14      	ldr	r2, [pc, #80]	; (800329c <DMA_CalcBaseAndBitshift+0x64>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003252:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <DMA_CalcBaseAndBitshift+0x68>)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4413      	add	r3, r2
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d909      	bls.n	800327a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800326e:	f023 0303 	bic.w	r3, r3, #3
 8003272:	1d1a      	adds	r2, r3, #4
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	659a      	str	r2, [r3, #88]	; 0x58
 8003278:	e007      	b.n	800328a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003282:	f023 0303 	bic.w	r3, r3, #3
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	aaaaaaab 	.word	0xaaaaaaab
 80032a0:	0801005c 	.word	0x0801005c

080032a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d11f      	bne.n	80032fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d855      	bhi.n	8003370 <DMA_CheckFifoParam+0xcc>
 80032c4:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <DMA_CheckFifoParam+0x28>)
 80032c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ca:	bf00      	nop
 80032cc:	080032dd 	.word	0x080032dd
 80032d0:	080032ef 	.word	0x080032ef
 80032d4:	080032dd 	.word	0x080032dd
 80032d8:	08003371 	.word	0x08003371
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d045      	beq.n	8003374 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ec:	e042      	b.n	8003374 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032f6:	d13f      	bne.n	8003378 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032fc:	e03c      	b.n	8003378 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003306:	d121      	bne.n	800334c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b03      	cmp	r3, #3
 800330c:	d836      	bhi.n	800337c <DMA_CheckFifoParam+0xd8>
 800330e:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <DMA_CheckFifoParam+0x70>)
 8003310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003314:	08003325 	.word	0x08003325
 8003318:	0800332b 	.word	0x0800332b
 800331c:	08003325 	.word	0x08003325
 8003320:	0800333d 	.word	0x0800333d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
      break;
 8003328:	e02f      	b.n	800338a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d024      	beq.n	8003380 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800333a:	e021      	b.n	8003380 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003344:	d11e      	bne.n	8003384 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800334a:	e01b      	b.n	8003384 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d902      	bls.n	8003358 <DMA_CheckFifoParam+0xb4>
 8003352:	2b03      	cmp	r3, #3
 8003354:	d003      	beq.n	800335e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003356:	e018      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
      break;
 800335c:	e015      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00e      	beq.n	8003388 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
      break;
 800336e:	e00b      	b.n	8003388 <DMA_CheckFifoParam+0xe4>
      break;
 8003370:	bf00      	nop
 8003372:	e00a      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      break;
 8003374:	bf00      	nop
 8003376:	e008      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      break;
 8003378:	bf00      	nop
 800337a:	e006      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      break;
 800337c:	bf00      	nop
 800337e:	e004      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      break;
 8003380:	bf00      	nop
 8003382:	e002      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      break;   
 8003384:	bf00      	nop
 8003386:	e000      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      break;
 8003388:	bf00      	nop
    }
  } 
  
  return status; 
 800338a:	7bfb      	ldrb	r3, [r7, #15]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	; 0x24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	e16b      	b.n	800368c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033b4:	2201      	movs	r2, #1
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	f040 815a 	bne.w	8003686 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d00b      	beq.n	80033f2 <HAL_GPIO_Init+0x5a>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d007      	beq.n	80033f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033e6:	2b11      	cmp	r3, #17
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b12      	cmp	r3, #18
 80033f0:	d130      	bne.n	8003454 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	2203      	movs	r2, #3
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003428:	2201      	movs	r2, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f003 0201 	and.w	r2, r3, #1
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0xfc>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b12      	cmp	r3, #18
 8003492:	d123      	bne.n	80034dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	08da      	lsrs	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3208      	adds	r2, #8
 800349c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	220f      	movs	r2, #15
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	08da      	lsrs	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3208      	adds	r2, #8
 80034d6:	69b9      	ldr	r1, [r7, #24]
 80034d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0203 	and.w	r2, r3, #3
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80b4 	beq.w	8003686 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	4b5f      	ldr	r3, [pc, #380]	; (80036a0 <HAL_GPIO_Init+0x308>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	4a5e      	ldr	r2, [pc, #376]	; (80036a0 <HAL_GPIO_Init+0x308>)
 8003528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800352c:	6453      	str	r3, [r2, #68]	; 0x44
 800352e:	4b5c      	ldr	r3, [pc, #368]	; (80036a0 <HAL_GPIO_Init+0x308>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800353a:	4a5a      	ldr	r2, [pc, #360]	; (80036a4 <HAL_GPIO_Init+0x30c>)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	3302      	adds	r3, #2
 8003542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	220f      	movs	r2, #15
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a51      	ldr	r2, [pc, #324]	; (80036a8 <HAL_GPIO_Init+0x310>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d02b      	beq.n	80035be <HAL_GPIO_Init+0x226>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a50      	ldr	r2, [pc, #320]	; (80036ac <HAL_GPIO_Init+0x314>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d025      	beq.n	80035ba <HAL_GPIO_Init+0x222>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4f      	ldr	r2, [pc, #316]	; (80036b0 <HAL_GPIO_Init+0x318>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d01f      	beq.n	80035b6 <HAL_GPIO_Init+0x21e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4e      	ldr	r2, [pc, #312]	; (80036b4 <HAL_GPIO_Init+0x31c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d019      	beq.n	80035b2 <HAL_GPIO_Init+0x21a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4d      	ldr	r2, [pc, #308]	; (80036b8 <HAL_GPIO_Init+0x320>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <HAL_GPIO_Init+0x216>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4c      	ldr	r2, [pc, #304]	; (80036bc <HAL_GPIO_Init+0x324>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00d      	beq.n	80035aa <HAL_GPIO_Init+0x212>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a4b      	ldr	r2, [pc, #300]	; (80036c0 <HAL_GPIO_Init+0x328>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d007      	beq.n	80035a6 <HAL_GPIO_Init+0x20e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a4a      	ldr	r2, [pc, #296]	; (80036c4 <HAL_GPIO_Init+0x32c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d101      	bne.n	80035a2 <HAL_GPIO_Init+0x20a>
 800359e:	2307      	movs	r3, #7
 80035a0:	e00e      	b.n	80035c0 <HAL_GPIO_Init+0x228>
 80035a2:	2308      	movs	r3, #8
 80035a4:	e00c      	b.n	80035c0 <HAL_GPIO_Init+0x228>
 80035a6:	2306      	movs	r3, #6
 80035a8:	e00a      	b.n	80035c0 <HAL_GPIO_Init+0x228>
 80035aa:	2305      	movs	r3, #5
 80035ac:	e008      	b.n	80035c0 <HAL_GPIO_Init+0x228>
 80035ae:	2304      	movs	r3, #4
 80035b0:	e006      	b.n	80035c0 <HAL_GPIO_Init+0x228>
 80035b2:	2303      	movs	r3, #3
 80035b4:	e004      	b.n	80035c0 <HAL_GPIO_Init+0x228>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e002      	b.n	80035c0 <HAL_GPIO_Init+0x228>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <HAL_GPIO_Init+0x228>
 80035be:	2300      	movs	r3, #0
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	f002 0203 	and.w	r2, r2, #3
 80035c6:	0092      	lsls	r2, r2, #2
 80035c8:	4093      	lsls	r3, r2
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035d0:	4934      	ldr	r1, [pc, #208]	; (80036a4 <HAL_GPIO_Init+0x30c>)
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	089b      	lsrs	r3, r3, #2
 80035d6:	3302      	adds	r3, #2
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035de:	4b3a      	ldr	r3, [pc, #232]	; (80036c8 <HAL_GPIO_Init+0x330>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003602:	4a31      	ldr	r2, [pc, #196]	; (80036c8 <HAL_GPIO_Init+0x330>)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003608:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_GPIO_Init+0x330>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800362c:	4a26      	ldr	r2, [pc, #152]	; (80036c8 <HAL_GPIO_Init+0x330>)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003632:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <HAL_GPIO_Init+0x330>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	43db      	mvns	r3, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4013      	ands	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003656:	4a1c      	ldr	r2, [pc, #112]	; (80036c8 <HAL_GPIO_Init+0x330>)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <HAL_GPIO_Init+0x330>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003680:	4a11      	ldr	r2, [pc, #68]	; (80036c8 <HAL_GPIO_Init+0x330>)
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3301      	adds	r3, #1
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	2b0f      	cmp	r3, #15
 8003690:	f67f ae90 	bls.w	80033b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003694:	bf00      	nop
 8003696:	3724      	adds	r7, #36	; 0x24
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40013800 	.word	0x40013800
 80036a8:	40020000 	.word	0x40020000
 80036ac:	40020400 	.word	0x40020400
 80036b0:	40020800 	.word	0x40020800
 80036b4:	40020c00 	.word	0x40020c00
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40021400 	.word	0x40021400
 80036c0:	40021800 	.word	0x40021800
 80036c4:	40021c00 	.word	0x40021c00
 80036c8:	40013c00 	.word	0x40013c00

080036cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
 80036d8:	4613      	mov	r3, r2
 80036da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036dc:	787b      	ldrb	r3, [r7, #1]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036e8:	e003      	b.n	80036f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ea:	887b      	ldrh	r3, [r7, #2]
 80036ec:	041a      	lsls	r2, r3, #16
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	619a      	str	r2, [r3, #24]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	460b      	mov	r3, r1
 8003708:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	887b      	ldrh	r3, [r7, #2]
 8003710:	401a      	ands	r2, r3
 8003712:	887b      	ldrh	r3, [r7, #2]
 8003714:	429a      	cmp	r2, r3
 8003716:	d104      	bne.n	8003722 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003718:	887b      	ldrh	r3, [r7, #2]
 800371a:	041a      	lsls	r2, r3, #16
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003720:	e002      	b.n	8003728 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003722:	887a      	ldrh	r2, [r7, #2]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	619a      	str	r2, [r3, #24]
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800373e:	4b08      	ldr	r3, [pc, #32]	; (8003760 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	4013      	ands	r3, r2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d006      	beq.n	8003758 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800374a:	4a05      	ldr	r2, [pc, #20]	; (8003760 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	4618      	mov	r0, r3
 8003754:	f008 f952 	bl	800b9fc <HAL_GPIO_EXTI_Callback>
  }
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40013c00 	.word	0x40013c00

08003764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e11f      	b.n	80039b6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f009 f912 	bl	800c9b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	; 0x24
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037c8:	f001 fcb6 	bl	8005138 <HAL_RCC_GetPCLK1Freq>
 80037cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4a7b      	ldr	r2, [pc, #492]	; (80039c0 <HAL_I2C_Init+0x25c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d807      	bhi.n	80037e8 <HAL_I2C_Init+0x84>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a7a      	ldr	r2, [pc, #488]	; (80039c4 <HAL_I2C_Init+0x260>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	bf94      	ite	ls
 80037e0:	2301      	movls	r3, #1
 80037e2:	2300      	movhi	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e006      	b.n	80037f6 <HAL_I2C_Init+0x92>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4a77      	ldr	r2, [pc, #476]	; (80039c8 <HAL_I2C_Init+0x264>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	bf94      	ite	ls
 80037f0:	2301      	movls	r3, #1
 80037f2:	2300      	movhi	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e0db      	b.n	80039b6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4a72      	ldr	r2, [pc, #456]	; (80039cc <HAL_I2C_Init+0x268>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0c9b      	lsrs	r3, r3, #18
 8003808:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a64      	ldr	r2, [pc, #400]	; (80039c0 <HAL_I2C_Init+0x25c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d802      	bhi.n	8003838 <HAL_I2C_Init+0xd4>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	3301      	adds	r3, #1
 8003836:	e009      	b.n	800384c <HAL_I2C_Init+0xe8>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	4a63      	ldr	r2, [pc, #396]	; (80039d0 <HAL_I2C_Init+0x26c>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	099b      	lsrs	r3, r3, #6
 800384a:	3301      	adds	r3, #1
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	430b      	orrs	r3, r1
 8003852:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800385e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4956      	ldr	r1, [pc, #344]	; (80039c0 <HAL_I2C_Init+0x25c>)
 8003868:	428b      	cmp	r3, r1
 800386a:	d80d      	bhi.n	8003888 <HAL_I2C_Init+0x124>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	1e59      	subs	r1, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	fbb1 f3f3 	udiv	r3, r1, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003880:	2b04      	cmp	r3, #4
 8003882:	bf38      	it	cc
 8003884:	2304      	movcc	r3, #4
 8003886:	e04f      	b.n	8003928 <HAL_I2C_Init+0x1c4>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d111      	bne.n	80038b4 <HAL_I2C_Init+0x150>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1e58      	subs	r0, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6859      	ldr	r1, [r3, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	440b      	add	r3, r1
 800389e:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	e012      	b.n	80038da <HAL_I2C_Init+0x176>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1e58      	subs	r0, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	0099      	lsls	r1, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Init+0x17e>
 80038de:	2301      	movs	r3, #1
 80038e0:	e022      	b.n	8003928 <HAL_I2C_Init+0x1c4>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10e      	bne.n	8003908 <HAL_I2C_Init+0x1a4>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1e58      	subs	r0, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6859      	ldr	r1, [r3, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	440b      	add	r3, r1
 80038f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fc:	3301      	adds	r3, #1
 80038fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003906:	e00f      	b.n	8003928 <HAL_I2C_Init+0x1c4>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1e58      	subs	r0, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6859      	ldr	r1, [r3, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	0099      	lsls	r1, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	fbb0 f3f3 	udiv	r3, r0, r3
 800391e:	3301      	adds	r3, #1
 8003920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	6809      	ldr	r1, [r1, #0]
 800392c:	4313      	orrs	r3, r2
 800392e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69da      	ldr	r2, [r3, #28]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003956:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6911      	ldr	r1, [r2, #16]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68d2      	ldr	r2, [r2, #12]
 8003962:	4311      	orrs	r1, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	430b      	orrs	r3, r1
 800396a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	000186a0 	.word	0x000186a0
 80039c4:	001e847f 	.word	0x001e847f
 80039c8:	003d08ff 	.word	0x003d08ff
 80039cc:	431bde83 	.word	0x431bde83
 80039d0:	10624dd3 	.word	0x10624dd3

080039d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	461a      	mov	r2, r3
 80039e0:	460b      	mov	r3, r1
 80039e2:	817b      	strh	r3, [r7, #10]
 80039e4:	4613      	mov	r3, r2
 80039e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039e8:	f7fd fb34 	bl	8001054 <HAL_GetTick>
 80039ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	f040 80e0 	bne.w	8003bbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	2319      	movs	r3, #25
 8003a02:	2201      	movs	r2, #1
 8003a04:	4970      	ldr	r1, [pc, #448]	; (8003bc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fc56 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
 8003a14:	e0d3      	b.n	8003bbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_I2C_Master_Transmit+0x50>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e0cc      	b.n	8003bbe <HAL_I2C_Master_Transmit+0x1ea>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d007      	beq.n	8003a4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0201 	orr.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2221      	movs	r2, #33	; 0x21
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2210      	movs	r2, #16
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	893a      	ldrh	r2, [r7, #8]
 8003a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4a50      	ldr	r2, [pc, #320]	; (8003bcc <HAL_I2C_Master_Transmit+0x1f8>)
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a8c:	8979      	ldrh	r1, [r7, #10]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	6a3a      	ldr	r2, [r7, #32]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fac2 	bl	800401c <I2C_MasterRequestWrite>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e08d      	b.n	8003bbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ab8:	e066      	b.n	8003b88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	6a39      	ldr	r1, [r7, #32]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fcd0 	bl	8004464 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00d      	beq.n	8003ae6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d107      	bne.n	8003ae2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e06b      	b.n	8003bbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	781a      	ldrb	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d11b      	bne.n	8003b5c <HAL_I2C_Master_Transmit+0x188>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d017      	beq.n	8003b5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	781a      	ldrb	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	6a39      	ldr	r1, [r7, #32]
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 fcc0 	bl	80044e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00d      	beq.n	8003b88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d107      	bne.n	8003b84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e01a      	b.n	8003bbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d194      	bne.n	8003aba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e000      	b.n	8003bbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	00100002 	.word	0x00100002
 8003bcc:	ffff0000 	.word	0xffff0000

08003bd0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08c      	sub	sp, #48	; 0x30
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	460b      	mov	r3, r1
 8003bde:	817b      	strh	r3, [r7, #10]
 8003be0:	4613      	mov	r3, r2
 8003be2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003be4:	f7fd fa36 	bl	8001054 <HAL_GetTick>
 8003be8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	f040 820b 	bne.w	800400e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	2319      	movs	r3, #25
 8003bfe:	2201      	movs	r2, #1
 8003c00:	497c      	ldr	r1, [pc, #496]	; (8003df4 <HAL_I2C_Master_Receive+0x224>)
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fb58 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e1fe      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_I2C_Master_Receive+0x50>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e1f7      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d007      	beq.n	8003c46 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0201 	orr.w	r2, r2, #1
 8003c44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2222      	movs	r2, #34	; 0x22
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2210      	movs	r2, #16
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	893a      	ldrh	r2, [r7, #8]
 8003c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4a5c      	ldr	r2, [pc, #368]	; (8003df8 <HAL_I2C_Master_Receive+0x228>)
 8003c86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c88:	8979      	ldrh	r1, [r7, #10]
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fa46 	bl	8004120 <I2C_MasterRequestRead>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e1b8      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d113      	bne.n	8003cce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	623b      	str	r3, [r7, #32]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	623b      	str	r3, [r7, #32]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	623b      	str	r3, [r7, #32]
 8003cba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e18c      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d11b      	bne.n	8003d0e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e16c      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d11b      	bne.n	8003d4e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	e14c      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d74:	e138      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	f200 80f1 	bhi.w	8003f62 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d123      	bne.n	8003dd0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fbeb 	bl	8004568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e139      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dce:	e10b      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d14e      	bne.n	8003e76 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	2200      	movs	r2, #0
 8003de0:	4906      	ldr	r1, [pc, #24]	; (8003dfc <HAL_I2C_Master_Receive+0x22c>)
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fa68 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e10e      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
 8003df2:	bf00      	nop
 8003df4:	00100002 	.word	0x00100002
 8003df8:	ffff0000 	.word	0xffff0000
 8003dfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691a      	ldr	r2, [r3, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e74:	e0b8      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	4966      	ldr	r1, [pc, #408]	; (8004018 <HAL_I2C_Master_Receive+0x448>)
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 fa19 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0bf      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	2200      	movs	r2, #0
 8003eda:	494f      	ldr	r1, [pc, #316]	; (8004018 <HAL_I2C_Master_Receive+0x448>)
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f9eb 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e091      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f60:	e042      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fafe 	bl	8004568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e04c      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d118      	bne.n	8003fe8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f47f aec2 	bne.w	8003d76 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e000      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800400e:	2302      	movs	r3, #2
  }
}
 8004010:	4618      	mov	r0, r3
 8004012:	3728      	adds	r7, #40	; 0x28
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	00010004 	.word	0x00010004

0800401c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	607a      	str	r2, [r7, #4]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	460b      	mov	r3, r1
 800402a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b08      	cmp	r3, #8
 8004036:	d006      	beq.n	8004046 <I2C_MasterRequestWrite+0x2a>
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d003      	beq.n	8004046 <I2C_MasterRequestWrite+0x2a>
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004044:	d108      	bne.n	8004058 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e00b      	b.n	8004070 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	2b12      	cmp	r3, #18
 800405e:	d107      	bne.n	8004070 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800406e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f91b 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00c      	beq.n	80040a2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800409c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e035      	b.n	800410e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040aa:	d108      	bne.n	80040be <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ac:	897b      	ldrh	r3, [r7, #10]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040ba:	611a      	str	r2, [r3, #16]
 80040bc:	e01b      	b.n	80040f6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040be:	897b      	ldrh	r3, [r7, #10]
 80040c0:	11db      	asrs	r3, r3, #7
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f003 0306 	and.w	r3, r3, #6
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	f063 030f 	orn	r3, r3, #15
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	490f      	ldr	r1, [pc, #60]	; (8004118 <I2C_MasterRequestWrite+0xfc>)
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f942 	bl	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e010      	b.n	800410e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040ec:	897b      	ldrh	r3, [r7, #10]
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	4908      	ldr	r1, [pc, #32]	; (800411c <I2C_MasterRequestWrite+0x100>)
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f932 	bl	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	00010008 	.word	0x00010008
 800411c:	00010002 	.word	0x00010002

08004120 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	460b      	mov	r3, r1
 800412e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004144:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b08      	cmp	r3, #8
 800414a:	d006      	beq.n	800415a <I2C_MasterRequestRead+0x3a>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d003      	beq.n	800415a <I2C_MasterRequestRead+0x3a>
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004158:	d108      	bne.n	800416c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	e00b      	b.n	8004184 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	2b11      	cmp	r3, #17
 8004172:	d107      	bne.n	8004184 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004182:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f891 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00c      	beq.n	80041b6 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e078      	b.n	80042a8 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041be:	d108      	bne.n	80041d2 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041c0:	897b      	ldrh	r3, [r7, #10]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	611a      	str	r2, [r3, #16]
 80041d0:	e05e      	b.n	8004290 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041d2:	897b      	ldrh	r3, [r7, #10]
 80041d4:	11db      	asrs	r3, r3, #7
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f003 0306 	and.w	r3, r3, #6
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f063 030f 	orn	r3, r3, #15
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	4930      	ldr	r1, [pc, #192]	; (80042b0 <I2C_MasterRequestRead+0x190>)
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f8b8 	bl	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e053      	b.n	80042a8 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004200:	897b      	ldrh	r3, [r7, #10]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	4929      	ldr	r1, [pc, #164]	; (80042b4 <I2C_MasterRequestRead+0x194>)
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f8a8 	bl	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e043      	b.n	80042a8 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004220:	2300      	movs	r3, #0
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004244:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f830 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004272:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e017      	b.n	80042a8 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004278:	897b      	ldrh	r3, [r7, #10]
 800427a:	11db      	asrs	r3, r3, #7
 800427c:	b2db      	uxtb	r3, r3
 800427e:	f003 0306 	and.w	r3, r3, #6
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f063 030e 	orn	r3, r3, #14
 8004288:	b2da      	uxtb	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4907      	ldr	r1, [pc, #28]	; (80042b4 <I2C_MasterRequestRead+0x194>)
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f865 	bl	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	00010008 	.word	0x00010008
 80042b4:	00010002 	.word	0x00010002

080042b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c8:	e025      	b.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d0:	d021      	beq.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d2:	f7fc febf 	bl	8001054 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d302      	bcc.n	80042e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d116      	bne.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f043 0220 	orr.w	r2, r3, #32
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e023      	b.n	800435e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	d10d      	bne.n	800433c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	43da      	mvns	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4013      	ands	r3, r2
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	bf0c      	ite	eq
 8004332:	2301      	moveq	r3, #1
 8004334:	2300      	movne	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	461a      	mov	r2, r3
 800433a:	e00c      	b.n	8004356 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	43da      	mvns	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4013      	ands	r3, r2
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	bf0c      	ite	eq
 800434e:	2301      	moveq	r3, #1
 8004350:	2300      	movne	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	429a      	cmp	r2, r3
 800435a:	d0b6      	beq.n	80042ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004374:	e051      	b.n	800441a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004384:	d123      	bne.n	80043ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004394:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800439e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f043 0204 	orr.w	r2, r3, #4
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e046      	b.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d4:	d021      	beq.n	800441a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d6:	f7fc fe3d 	bl	8001054 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d302      	bcc.n	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d116      	bne.n	800441a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f043 0220 	orr.w	r2, r3, #32
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e020      	b.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	0c1b      	lsrs	r3, r3, #16
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b01      	cmp	r3, #1
 8004422:	d10c      	bne.n	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	43da      	mvns	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4013      	ands	r3, r2
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	bf14      	ite	ne
 8004436:	2301      	movne	r3, #1
 8004438:	2300      	moveq	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	e00b      	b.n	8004456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	43da      	mvns	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4013      	ands	r3, r2
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	bf14      	ite	ne
 8004450:	2301      	movne	r3, #1
 8004452:	2300      	moveq	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d18d      	bne.n	8004376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004470:	e02d      	b.n	80044ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f8ce 	bl	8004614 <I2C_IsAcknowledgeFailed>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e02d      	b.n	80044de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004488:	d021      	beq.n	80044ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448a:	f7fc fde3 	bl	8001054 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	429a      	cmp	r2, r3
 8004498:	d302      	bcc.n	80044a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d116      	bne.n	80044ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f043 0220 	orr.w	r2, r3, #32
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e007      	b.n	80044de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d8:	2b80      	cmp	r3, #128	; 0x80
 80044da:	d1ca      	bne.n	8004472 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044f2:	e02d      	b.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f88d 	bl	8004614 <I2C_IsAcknowledgeFailed>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e02d      	b.n	8004560 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800450a:	d021      	beq.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450c:	f7fc fda2 	bl	8001054 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	429a      	cmp	r2, r3
 800451a:	d302      	bcc.n	8004522 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d116      	bne.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e007      	b.n	8004560 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b04      	cmp	r3, #4
 800455c:	d1ca      	bne.n	80044f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004574:	e042      	b.n	80045fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b10      	cmp	r3, #16
 8004582:	d119      	bne.n	80045b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0210 	mvn.w	r2, #16
 800458c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e029      	b.n	800460c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b8:	f7fc fd4c 	bl	8001054 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d302      	bcc.n	80045ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d116      	bne.n	80045fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	f043 0220 	orr.w	r2, r3, #32
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e007      	b.n	800460c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004606:	2b40      	cmp	r3, #64	; 0x40
 8004608:	d1b5      	bne.n	8004576 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800462a:	d11b      	bne.n	8004664 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004634:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	f043 0204 	orr.w	r2, r3, #4
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004674:	b08f      	sub	sp, #60	; 0x3c
 8004676:	af0a      	add	r7, sp, #40	; 0x28
 8004678:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e10f      	b.n	80048a4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f008 fce4 	bl	800d06c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2203      	movs	r2, #3
 80046a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d102      	bne.n	80046be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f003 ffdd 	bl	8008682 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	687e      	ldr	r6, [r7, #4]
 80046d0:	466d      	mov	r5, sp
 80046d2:	f106 0410 	add.w	r4, r6, #16
 80046d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80046e6:	1d33      	adds	r3, r6, #4
 80046e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046ea:	6838      	ldr	r0, [r7, #0]
 80046ec:	f003 ff68 	bl	80085c0 <USB_CoreInit>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0d0      	b.n	80048a4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f003 ffcb 	bl	80086a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]
 8004712:	e04a      	b.n	80047aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004714:	7bfa      	ldrb	r2, [r7, #15]
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	333d      	adds	r3, #61	; 0x3d
 8004724:	2201      	movs	r2, #1
 8004726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004728:	7bfa      	ldrb	r2, [r7, #15]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	333c      	adds	r3, #60	; 0x3c
 8004738:	7bfa      	ldrb	r2, [r7, #15]
 800473a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800473c:	7bfa      	ldrb	r2, [r7, #15]
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	b298      	uxth	r0, r3
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	3342      	adds	r3, #66	; 0x42
 8004750:	4602      	mov	r2, r0
 8004752:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004754:	7bfa      	ldrb	r2, [r7, #15]
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	333f      	adds	r3, #63	; 0x3f
 8004764:	2200      	movs	r2, #0
 8004766:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004768:	7bfa      	ldrb	r2, [r7, #15]
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	3344      	adds	r3, #68	; 0x44
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800477c:	7bfa      	ldrb	r2, [r7, #15]
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	3348      	adds	r3, #72	; 0x48
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004790:	7bfa      	ldrb	r2, [r7, #15]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	3350      	adds	r3, #80	; 0x50
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	3301      	adds	r3, #1
 80047a8:	73fb      	strb	r3, [r7, #15]
 80047aa:	7bfa      	ldrb	r2, [r7, #15]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d3af      	bcc.n	8004714 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047b4:	2300      	movs	r3, #0
 80047b6:	73fb      	strb	r3, [r7, #15]
 80047b8:	e044      	b.n	8004844 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047ba:	7bfa      	ldrb	r2, [r7, #15]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047d0:	7bfa      	ldrb	r2, [r7, #15]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80047e2:	7bfa      	ldrb	r2, [r7, #15]
 80047e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047e6:	7bfa      	ldrb	r2, [r7, #15]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047fc:	7bfa      	ldrb	r2, [r7, #15]
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004812:	7bfa      	ldrb	r2, [r7, #15]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004828:	7bfa      	ldrb	r2, [r7, #15]
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	3301      	adds	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
 8004844:	7bfa      	ldrb	r2, [r7, #15]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	429a      	cmp	r2, r3
 800484c:	d3b5      	bcc.n	80047ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	687e      	ldr	r6, [r7, #4]
 8004856:	466d      	mov	r5, sp
 8004858:	f106 0410 	add.w	r4, r6, #16
 800485c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800485e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004864:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004868:	e885 0003 	stmia.w	r5, {r0, r1}
 800486c:	1d33      	adds	r3, r6, #4
 800486e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004870:	6838      	ldr	r0, [r7, #0]
 8004872:	f003 ff41 	bl	80086f8 <USB_DevInit>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e00d      	b.n	80048a4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f004 f8fe 	bl	8008a9e <USB_DevDisconnect>

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e25b      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d075      	beq.n	80049b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ca:	4ba3      	ldr	r3, [pc, #652]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d00c      	beq.n	80048f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d6:	4ba0      	ldr	r3, [pc, #640]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d112      	bne.n	8004908 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048e2:	4b9d      	ldr	r3, [pc, #628]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ee:	d10b      	bne.n	8004908 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f0:	4b99      	ldr	r3, [pc, #612]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d05b      	beq.n	80049b4 <HAL_RCC_OscConfig+0x108>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d157      	bne.n	80049b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e236      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004910:	d106      	bne.n	8004920 <HAL_RCC_OscConfig+0x74>
 8004912:	4b91      	ldr	r3, [pc, #580]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a90      	ldr	r2, [pc, #576]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e01d      	b.n	800495c <HAL_RCC_OscConfig+0xb0>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004928:	d10c      	bne.n	8004944 <HAL_RCC_OscConfig+0x98>
 800492a:	4b8b      	ldr	r3, [pc, #556]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a8a      	ldr	r2, [pc, #552]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	4b88      	ldr	r3, [pc, #544]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a87      	ldr	r2, [pc, #540]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 800493c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	e00b      	b.n	800495c <HAL_RCC_OscConfig+0xb0>
 8004944:	4b84      	ldr	r3, [pc, #528]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a83      	ldr	r2, [pc, #524]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 800494a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	4b81      	ldr	r3, [pc, #516]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a80      	ldr	r2, [pc, #512]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800495a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d013      	beq.n	800498c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fc fb76 	bl	8001054 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800496c:	f7fc fb72 	bl	8001054 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b64      	cmp	r3, #100	; 0x64
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e1fb      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	4b76      	ldr	r3, [pc, #472]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCC_OscConfig+0xc0>
 800498a:	e014      	b.n	80049b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498c:	f7fc fb62 	bl	8001054 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004994:	f7fc fb5e 	bl	8001054 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b64      	cmp	r3, #100	; 0x64
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e1e7      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a6:	4b6c      	ldr	r3, [pc, #432]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0xe8>
 80049b2:	e000      	b.n	80049b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d063      	beq.n	8004a8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049c2:	4b65      	ldr	r3, [pc, #404]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ce:	4b62      	ldr	r3, [pc, #392]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d11c      	bne.n	8004a14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049da:	4b5f      	ldr	r3, [pc, #380]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d116      	bne.n	8004a14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e6:	4b5c      	ldr	r3, [pc, #368]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d005      	beq.n	80049fe <HAL_RCC_OscConfig+0x152>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d001      	beq.n	80049fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e1bb      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fe:	4b56      	ldr	r3, [pc, #344]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	4952      	ldr	r1, [pc, #328]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a12:	e03a      	b.n	8004a8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d020      	beq.n	8004a5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a1c:	4b4f      	ldr	r3, [pc, #316]	; (8004b5c <HAL_RCC_OscConfig+0x2b0>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a22:	f7fc fb17 	bl	8001054 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a2a:	f7fc fb13 	bl	8001054 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e19c      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3c:	4b46      	ldr	r3, [pc, #280]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a48:	4b43      	ldr	r3, [pc, #268]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	4940      	ldr	r1, [pc, #256]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]
 8004a5c:	e015      	b.n	8004a8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a5e:	4b3f      	ldr	r3, [pc, #252]	; (8004b5c <HAL_RCC_OscConfig+0x2b0>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a64:	f7fc faf6 	bl	8001054 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a6c:	f7fc faf2 	bl	8001054 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e17b      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7e:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d030      	beq.n	8004af8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d016      	beq.n	8004acc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a9e:	4b30      	ldr	r3, [pc, #192]	; (8004b60 <HAL_RCC_OscConfig+0x2b4>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa4:	f7fc fad6 	bl	8001054 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aac:	f7fc fad2 	bl	8001054 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e15b      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004abe:	4b26      	ldr	r3, [pc, #152]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x200>
 8004aca:	e015      	b.n	8004af8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004acc:	4b24      	ldr	r3, [pc, #144]	; (8004b60 <HAL_RCC_OscConfig+0x2b4>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad2:	f7fc fabf 	bl	8001054 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ada:	f7fc fabb 	bl	8001054 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e144      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aec:	4b1a      	ldr	r3, [pc, #104]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f0      	bne.n	8004ada <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80a0 	beq.w	8004c46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b06:	2300      	movs	r3, #0
 8004b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b0a:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10f      	bne.n	8004b36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	4a0e      	ldr	r2, [pc, #56]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b24:	6413      	str	r3, [r2, #64]	; 0x40
 8004b26:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	60bb      	str	r3, [r7, #8]
 8004b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b32:	2301      	movs	r3, #1
 8004b34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b36:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCC_OscConfig+0x2b8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d121      	bne.n	8004b86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b42:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <HAL_RCC_OscConfig+0x2b8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a07      	ldr	r2, [pc, #28]	; (8004b64 <HAL_RCC_OscConfig+0x2b8>)
 8004b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4e:	f7fc fa81 	bl	8001054 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b54:	e011      	b.n	8004b7a <HAL_RCC_OscConfig+0x2ce>
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	42470000 	.word	0x42470000
 8004b60:	42470e80 	.word	0x42470e80
 8004b64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b68:	f7fc fa74 	bl	8001054 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e0fd      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7a:	4b81      	ldr	r3, [pc, #516]	; (8004d80 <HAL_RCC_OscConfig+0x4d4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d106      	bne.n	8004b9c <HAL_RCC_OscConfig+0x2f0>
 8004b8e:	4b7d      	ldr	r3, [pc, #500]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b92:	4a7c      	ldr	r2, [pc, #496]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9a:	e01c      	b.n	8004bd6 <HAL_RCC_OscConfig+0x32a>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b05      	cmp	r3, #5
 8004ba2:	d10c      	bne.n	8004bbe <HAL_RCC_OscConfig+0x312>
 8004ba4:	4b77      	ldr	r3, [pc, #476]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	4a76      	ldr	r2, [pc, #472]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004baa:	f043 0304 	orr.w	r3, r3, #4
 8004bae:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb0:	4b74      	ldr	r3, [pc, #464]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb4:	4a73      	ldr	r2, [pc, #460]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	6713      	str	r3, [r2, #112]	; 0x70
 8004bbc:	e00b      	b.n	8004bd6 <HAL_RCC_OscConfig+0x32a>
 8004bbe:	4b71      	ldr	r3, [pc, #452]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc2:	4a70      	ldr	r2, [pc, #448]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bca:	4b6e      	ldr	r3, [pc, #440]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	4a6d      	ldr	r2, [pc, #436]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004bd0:	f023 0304 	bic.w	r3, r3, #4
 8004bd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d015      	beq.n	8004c0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bde:	f7fc fa39 	bl	8001054 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be4:	e00a      	b.n	8004bfc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be6:	f7fc fa35 	bl	8001054 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e0bc      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfc:	4b61      	ldr	r3, [pc, #388]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0ee      	beq.n	8004be6 <HAL_RCC_OscConfig+0x33a>
 8004c08:	e014      	b.n	8004c34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0a:	f7fc fa23 	bl	8001054 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c10:	e00a      	b.n	8004c28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c12:	f7fc fa1f 	bl	8001054 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e0a6      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c28:	4b56      	ldr	r3, [pc, #344]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1ee      	bne.n	8004c12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d105      	bne.n	8004c46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3a:	4b52      	ldr	r3, [pc, #328]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	4a51      	ldr	r2, [pc, #324]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8092 	beq.w	8004d74 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c50:	4b4c      	ldr	r3, [pc, #304]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d05c      	beq.n	8004d16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d141      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c64:	4b48      	ldr	r3, [pc, #288]	; (8004d88 <HAL_RCC_OscConfig+0x4dc>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6a:	f7fc f9f3 	bl	8001054 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c72:	f7fc f9ef 	bl	8001054 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e078      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c84:	4b3f      	ldr	r3, [pc, #252]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1f0      	bne.n	8004c72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69da      	ldr	r2, [r3, #28]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	019b      	lsls	r3, r3, #6
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	061b      	lsls	r3, r3, #24
 8004cb4:	4933      	ldr	r1, [pc, #204]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cba:	4b33      	ldr	r3, [pc, #204]	; (8004d88 <HAL_RCC_OscConfig+0x4dc>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc0:	f7fc f9c8 	bl	8001054 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc8:	f7fc f9c4 	bl	8001054 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e04d      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cda:	4b2a      	ldr	r3, [pc, #168]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x41c>
 8004ce6:	e045      	b.n	8004d74 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce8:	4b27      	ldr	r3, [pc, #156]	; (8004d88 <HAL_RCC_OscConfig+0x4dc>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cee:	f7fc f9b1 	bl	8001054 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf6:	f7fc f9ad 	bl	8001054 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e036      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d08:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f0      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x44a>
 8004d14:	e02e      	b.n	8004d74 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e029      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d22:	4b18      	ldr	r3, [pc, #96]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d11c      	bne.n	8004d70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d115      	bne.n	8004d70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d10d      	bne.n	8004d70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d106      	bne.n	8004d70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e000      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40007000 	.word	0x40007000
 8004d84:	40023800 	.word	0x40023800
 8004d88:	42470060 	.word	0x42470060

08004d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0cc      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004da0:	4b68      	ldr	r3, [pc, #416]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d90c      	bls.n	8004dc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dae:	4b65      	ldr	r3, [pc, #404]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db6:	4b63      	ldr	r3, [pc, #396]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0b8      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d020      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004de0:	4b59      	ldr	r3, [pc, #356]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4a58      	ldr	r2, [pc, #352]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004df8:	4b53      	ldr	r3, [pc, #332]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4a52      	ldr	r2, [pc, #328]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e04:	4b50      	ldr	r3, [pc, #320]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	494d      	ldr	r1, [pc, #308]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d044      	beq.n	8004eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d107      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2a:	4b47      	ldr	r3, [pc, #284]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d119      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e07f      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d003      	beq.n	8004e4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4a:	4b3f      	ldr	r3, [pc, #252]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e06f      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5a:	4b3b      	ldr	r3, [pc, #236]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e067      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e6a:	4b37      	ldr	r3, [pc, #220]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 0203 	bic.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4934      	ldr	r1, [pc, #208]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e7c:	f7fc f8ea 	bl	8001054 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e84:	f7fc f8e6 	bl	8001054 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e04f      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	4b2b      	ldr	r3, [pc, #172]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 020c 	and.w	r2, r3, #12
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d1eb      	bne.n	8004e84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eac:	4b25      	ldr	r3, [pc, #148]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d20c      	bcs.n	8004ed4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b22      	ldr	r3, [pc, #136]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec2:	4b20      	ldr	r3, [pc, #128]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e032      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee0:	4b19      	ldr	r3, [pc, #100]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4916      	ldr	r1, [pc, #88]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d009      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004efe:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	490e      	ldr	r1, [pc, #56]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f12:	f000 f82d 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8004f16:	4601      	mov	r1, r0
 8004f18:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	091b      	lsrs	r3, r3, #4
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004f24:	5cd3      	ldrb	r3, [r2, r3]
 8004f26:	fa21 f303 	lsr.w	r3, r1, r3
 8004f2a:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f2e:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fc f84a 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40023c00 	.word	0x40023c00
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	08010064 	.word	0x08010064
 8004f50:	2000003c 	.word	0x2000003c
 8004f54:	20000000 	.word	0x20000000

08004f58 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004f5c:	4b03      	ldr	r3, [pc, #12]	; (8004f6c <HAL_RCC_EnableCSS+0x14>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
}
 8004f62:	bf00      	nop
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	4247004c 	.word	0x4247004c

08004f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	607b      	str	r3, [r7, #4]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f86:	4b63      	ldr	r3, [pc, #396]	; (8005114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d007      	beq.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x32>
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d008      	beq.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x38>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f040 80b4 	bne.w	8005104 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f9c:	4b5e      	ldr	r3, [pc, #376]	; (8005118 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f9e:	60bb      	str	r3, [r7, #8]
       break;
 8004fa0:	e0b3      	b.n	800510a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fa2:	4b5e      	ldr	r3, [pc, #376]	; (800511c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004fa4:	60bb      	str	r3, [r7, #8]
      break;
 8004fa6:	e0b0      	b.n	800510a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fa8:	4b5a      	ldr	r3, [pc, #360]	; (8005114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fb2:	4b58      	ldr	r3, [pc, #352]	; (8005114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d04a      	beq.n	8005054 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fbe:	4b55      	ldr	r3, [pc, #340]	; (8005114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	099b      	lsrs	r3, r3, #6
 8004fc4:	f04f 0400 	mov.w	r4, #0
 8004fc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	ea03 0501 	and.w	r5, r3, r1
 8004fd4:	ea04 0602 	and.w	r6, r4, r2
 8004fd8:	4629      	mov	r1, r5
 8004fda:	4632      	mov	r2, r6
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	f04f 0400 	mov.w	r4, #0
 8004fe4:	0154      	lsls	r4, r2, #5
 8004fe6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fea:	014b      	lsls	r3, r1, #5
 8004fec:	4619      	mov	r1, r3
 8004fee:	4622      	mov	r2, r4
 8004ff0:	1b49      	subs	r1, r1, r5
 8004ff2:	eb62 0206 	sbc.w	r2, r2, r6
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	f04f 0400 	mov.w	r4, #0
 8004ffe:	0194      	lsls	r4, r2, #6
 8005000:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005004:	018b      	lsls	r3, r1, #6
 8005006:	1a5b      	subs	r3, r3, r1
 8005008:	eb64 0402 	sbc.w	r4, r4, r2
 800500c:	f04f 0100 	mov.w	r1, #0
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	00e2      	lsls	r2, r4, #3
 8005016:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800501a:	00d9      	lsls	r1, r3, #3
 800501c:	460b      	mov	r3, r1
 800501e:	4614      	mov	r4, r2
 8005020:	195b      	adds	r3, r3, r5
 8005022:	eb44 0406 	adc.w	r4, r4, r6
 8005026:	f04f 0100 	mov.w	r1, #0
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	0262      	lsls	r2, r4, #9
 8005030:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005034:	0259      	lsls	r1, r3, #9
 8005036:	460b      	mov	r3, r1
 8005038:	4614      	mov	r4, r2
 800503a:	4618      	mov	r0, r3
 800503c:	4621      	mov	r1, r4
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f04f 0400 	mov.w	r4, #0
 8005044:	461a      	mov	r2, r3
 8005046:	4623      	mov	r3, r4
 8005048:	f7fb fe1e 	bl	8000c88 <__aeabi_uldivmod>
 800504c:	4603      	mov	r3, r0
 800504e:	460c      	mov	r4, r1
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e049      	b.n	80050e8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005054:	4b2f      	ldr	r3, [pc, #188]	; (8005114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	099b      	lsrs	r3, r3, #6
 800505a:	f04f 0400 	mov.w	r4, #0
 800505e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	ea03 0501 	and.w	r5, r3, r1
 800506a:	ea04 0602 	and.w	r6, r4, r2
 800506e:	4629      	mov	r1, r5
 8005070:	4632      	mov	r2, r6
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	f04f 0400 	mov.w	r4, #0
 800507a:	0154      	lsls	r4, r2, #5
 800507c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005080:	014b      	lsls	r3, r1, #5
 8005082:	4619      	mov	r1, r3
 8005084:	4622      	mov	r2, r4
 8005086:	1b49      	subs	r1, r1, r5
 8005088:	eb62 0206 	sbc.w	r2, r2, r6
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	f04f 0400 	mov.w	r4, #0
 8005094:	0194      	lsls	r4, r2, #6
 8005096:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800509a:	018b      	lsls	r3, r1, #6
 800509c:	1a5b      	subs	r3, r3, r1
 800509e:	eb64 0402 	sbc.w	r4, r4, r2
 80050a2:	f04f 0100 	mov.w	r1, #0
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	00e2      	lsls	r2, r4, #3
 80050ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050b0:	00d9      	lsls	r1, r3, #3
 80050b2:	460b      	mov	r3, r1
 80050b4:	4614      	mov	r4, r2
 80050b6:	195b      	adds	r3, r3, r5
 80050b8:	eb44 0406 	adc.w	r4, r4, r6
 80050bc:	f04f 0100 	mov.w	r1, #0
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	02a2      	lsls	r2, r4, #10
 80050c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80050ca:	0299      	lsls	r1, r3, #10
 80050cc:	460b      	mov	r3, r1
 80050ce:	4614      	mov	r4, r2
 80050d0:	4618      	mov	r0, r3
 80050d2:	4621      	mov	r1, r4
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f04f 0400 	mov.w	r4, #0
 80050da:	461a      	mov	r2, r3
 80050dc:	4623      	mov	r3, r4
 80050de:	f7fb fdd3 	bl	8000c88 <__aeabi_uldivmod>
 80050e2:	4603      	mov	r3, r0
 80050e4:	460c      	mov	r4, r1
 80050e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050e8:	4b0a      	ldr	r3, [pc, #40]	; (8005114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	0c1b      	lsrs	r3, r3, #16
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	3301      	adds	r3, #1
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005100:	60bb      	str	r3, [r7, #8]
      break;
 8005102:	e002      	b.n	800510a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005104:	4b04      	ldr	r3, [pc, #16]	; (8005118 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005106:	60bb      	str	r3, [r7, #8]
      break;
 8005108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800510a:	68bb      	ldr	r3, [r7, #8]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005114:	40023800 	.word	0x40023800
 8005118:	00f42400 	.word	0x00f42400
 800511c:	007a1200 	.word	0x007a1200

08005120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005124:	4b03      	ldr	r3, [pc, #12]	; (8005134 <HAL_RCC_GetHCLKFreq+0x14>)
 8005126:	681b      	ldr	r3, [r3, #0]
}
 8005128:	4618      	mov	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	2000003c 	.word	0x2000003c

08005138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800513c:	f7ff fff0 	bl	8005120 <HAL_RCC_GetHCLKFreq>
 8005140:	4601      	mov	r1, r0
 8005142:	4b05      	ldr	r3, [pc, #20]	; (8005158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	0a9b      	lsrs	r3, r3, #10
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	4a03      	ldr	r2, [pc, #12]	; (800515c <HAL_RCC_GetPCLK1Freq+0x24>)
 800514e:	5cd3      	ldrb	r3, [r2, r3]
 8005150:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005154:	4618      	mov	r0, r3
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40023800 	.word	0x40023800
 800515c:	08010074 	.word	0x08010074

08005160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005164:	f7ff ffdc 	bl	8005120 <HAL_RCC_GetHCLKFreq>
 8005168:	4601      	mov	r1, r0
 800516a:	4b05      	ldr	r3, [pc, #20]	; (8005180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	0b5b      	lsrs	r3, r3, #13
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	4a03      	ldr	r2, [pc, #12]	; (8005184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005176:	5cd3      	ldrb	r3, [r2, r3]
 8005178:	fa21 f303 	lsr.w	r3, r1, r3
}
 800517c:	4618      	mov	r0, r3
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40023800 	.word	0x40023800
 8005184:	08010074 	.word	0x08010074

08005188 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d105      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d035      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051b0:	4b62      	ldr	r3, [pc, #392]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051b6:	f7fb ff4d 	bl	8001054 <HAL_GetTick>
 80051ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051bc:	e008      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051be:	f7fb ff49 	bl	8001054 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e0b0      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051d0:	4b5b      	ldr	r3, [pc, #364]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f0      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	019a      	lsls	r2, r3, #6
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	071b      	lsls	r3, r3, #28
 80051e8:	4955      	ldr	r1, [pc, #340]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051f0:	4b52      	ldr	r3, [pc, #328]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051f2:	2201      	movs	r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051f6:	f7fb ff2d 	bl	8001054 <HAL_GetTick>
 80051fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051fc:	e008      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051fe:	f7fb ff29 	bl	8001054 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e090      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005210:	4b4b      	ldr	r3, [pc, #300]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0f0      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8083 	beq.w	8005330 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	4b44      	ldr	r3, [pc, #272]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	4a43      	ldr	r2, [pc, #268]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005238:	6413      	str	r3, [r2, #64]	; 0x40
 800523a:	4b41      	ldr	r3, [pc, #260]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005246:	4b3f      	ldr	r3, [pc, #252]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a3e      	ldr	r2, [pc, #248]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800524c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005250:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005252:	f7fb feff 	bl	8001054 <HAL_GetTick>
 8005256:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005258:	e008      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800525a:	f7fb fefb 	bl	8001054 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e062      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800526c:	4b35      	ldr	r3, [pc, #212]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005278:	4b31      	ldr	r3, [pc, #196]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800527a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005280:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d02f      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	429a      	cmp	r2, r3
 8005294:	d028      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005296:	4b2a      	ldr	r3, [pc, #168]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800529e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052a0:	4b29      	ldr	r3, [pc, #164]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052a6:	4b28      	ldr	r3, [pc, #160]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052ac:	4a24      	ldr	r2, [pc, #144]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052b2:	4b23      	ldr	r3, [pc, #140]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d114      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052be:	f7fb fec9 	bl	8001054 <HAL_GetTick>
 80052c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c4:	e00a      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052c6:	f7fb fec5 	bl	8001054 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d901      	bls.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e02a      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052dc:	4b18      	ldr	r3, [pc, #96]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0ee      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052f4:	d10d      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80052f6:	4b12      	ldr	r3, [pc, #72]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800530a:	490d      	ldr	r1, [pc, #52]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800530c:	4313      	orrs	r3, r2
 800530e:	608b      	str	r3, [r1, #8]
 8005310:	e005      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005312:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	4a0a      	ldr	r2, [pc, #40]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005318:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800531c:	6093      	str	r3, [r2, #8]
 800531e:	4b08      	ldr	r3, [pc, #32]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005320:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800532a:	4905      	ldr	r1, [pc, #20]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800532c:	4313      	orrs	r3, r2
 800532e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	42470068 	.word	0x42470068
 8005340:	40023800 	.word	0x40023800
 8005344:	40007000 	.word	0x40007000
 8005348:	42470e40 	.word	0x42470e40

0800534c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e083      	b.n	8005466 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	7f5b      	ldrb	r3, [r3, #29]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d105      	bne.n	8005374 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f007 fb9c 	bl	800caac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	22ca      	movs	r2, #202	; 0xca
 8005380:	625a      	str	r2, [r3, #36]	; 0x24
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2253      	movs	r2, #83	; 0x53
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f897 	bl	80054be <RTC_EnterInitMode>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	22ff      	movs	r2, #255	; 0xff
 800539c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2204      	movs	r2, #4
 80053a2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e05e      	b.n	8005466 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ba:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6899      	ldr	r1, [r3, #8]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	68d2      	ldr	r2, [r2, #12]
 80053e2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6919      	ldr	r1, [r3, #16]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	041a      	lsls	r2, r3, #16
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005406:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10e      	bne.n	8005434 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f829 	bl	800546e <HAL_RTC_WaitForSynchro>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	22ff      	movs	r2, #255	; 0xff
 8005428:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2204      	movs	r2, #4
 800542e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e018      	b.n	8005466 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005442:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	22ff      	movs	r2, #255	; 0xff
 800545c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005464:	2300      	movs	r3, #0
  }
}
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005488:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800548a:	f7fb fde3 	bl	8001054 <HAL_GetTick>
 800548e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005490:	e009      	b.n	80054a6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005492:	f7fb fddf 	bl	8001054 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054a0:	d901      	bls.n	80054a6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e007      	b.n	80054b6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0ee      	beq.n	8005492 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d119      	bne.n	800550c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054e0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054e2:	f7fb fdb7 	bl	8001054 <HAL_GetTick>
 80054e6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054e8:	e009      	b.n	80054fe <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054ea:	f7fb fdb3 	bl	8001054 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054f8:	d901      	bls.n	80054fe <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e007      	b.n	800550e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0ee      	beq.n	80054ea <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b082      	sub	sp, #8
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e056      	b.n	80055d6 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f007 fac8 	bl	800cad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800555e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	ea42 0103 	orr.w	r1, r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	0c1b      	lsrs	r3, r3, #16
 80055a6:	f003 0104 	and.w	r1, r3, #4
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69da      	ldr	r2, [r3, #28]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b088      	sub	sp, #32
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	4613      	mov	r3, r2
 80055ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_SPI_Transmit+0x22>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e11e      	b.n	800583e <HAL_SPI_Transmit+0x260>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005608:	f7fb fd24 	bl	8001054 <HAL_GetTick>
 800560c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800560e:	88fb      	ldrh	r3, [r7, #6]
 8005610:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	d002      	beq.n	8005624 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800561e:	2302      	movs	r3, #2
 8005620:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005622:	e103      	b.n	800582c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_SPI_Transmit+0x52>
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d102      	bne.n	8005636 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005634:	e0fa      	b.n	800582c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2203      	movs	r2, #3
 800563a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	88fa      	ldrh	r2, [r7, #6]
 800564e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800567c:	d107      	bne.n	800568e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800568c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005698:	2b40      	cmp	r3, #64	; 0x40
 800569a:	d007      	beq.n	80056ac <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b4:	d14b      	bne.n	800574e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <HAL_SPI_Transmit+0xe6>
 80056be:	8afb      	ldrh	r3, [r7, #22]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d13e      	bne.n	8005742 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	881a      	ldrh	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	1c9a      	adds	r2, r3, #2
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056e8:	e02b      	b.n	8005742 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d112      	bne.n	800571e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	881a      	ldrh	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	1c9a      	adds	r2, r3, #2
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	86da      	strh	r2, [r3, #54]	; 0x36
 800571c:	e011      	b.n	8005742 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800571e:	f7fb fc99 	bl	8001054 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d803      	bhi.n	8005736 <HAL_SPI_Transmit+0x158>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005734:	d102      	bne.n	800573c <HAL_SPI_Transmit+0x15e>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d102      	bne.n	8005742 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005740:	e074      	b.n	800582c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1ce      	bne.n	80056ea <HAL_SPI_Transmit+0x10c>
 800574c:	e04c      	b.n	80057e8 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <HAL_SPI_Transmit+0x17e>
 8005756:	8afb      	ldrh	r3, [r7, #22]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d140      	bne.n	80057de <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	330c      	adds	r3, #12
 8005766:	7812      	ldrb	r2, [r2, #0]
 8005768:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005782:	e02c      	b.n	80057de <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b02      	cmp	r3, #2
 8005790:	d113      	bne.n	80057ba <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	330c      	adds	r3, #12
 800579c:	7812      	ldrb	r2, [r2, #0]
 800579e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80057b8:	e011      	b.n	80057de <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ba:	f7fb fc4b 	bl	8001054 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d803      	bhi.n	80057d2 <HAL_SPI_Transmit+0x1f4>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057d0:	d102      	bne.n	80057d8 <HAL_SPI_Transmit+0x1fa>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057dc:	e026      	b.n	800582c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1cd      	bne.n	8005784 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 fcc3 	bl	8006178 <SPI_EndRxTxTransaction>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005806:	2300      	movs	r3, #0
 8005808:	613b      	str	r3, [r7, #16]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	613b      	str	r3, [r7, #16]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	77fb      	strb	r3, [r7, #31]
 8005828:	e000      	b.n	800582c <HAL_SPI_Transmit+0x24e>
  }

error:
 800582a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800583c:	7ffb      	ldrb	r3, [r7, #31]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3720      	adds	r7, #32
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b088      	sub	sp, #32
 800584a:	af02      	add	r7, sp, #8
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	4613      	mov	r3, r2
 8005854:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005862:	d112      	bne.n	800588a <HAL_SPI_Receive+0x44>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10e      	bne.n	800588a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2204      	movs	r2, #4
 8005870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005874:	88fa      	ldrh	r2, [r7, #6]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	4613      	mov	r3, r2
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	68b9      	ldr	r1, [r7, #8]
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f8e9 	bl	8005a58 <HAL_SPI_TransmitReceive>
 8005886:	4603      	mov	r3, r0
 8005888:	e0e2      	b.n	8005a50 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_SPI_Receive+0x52>
 8005894:	2302      	movs	r3, #2
 8005896:	e0db      	b.n	8005a50 <HAL_SPI_Receive+0x20a>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058a0:	f7fb fbd8 	bl	8001054 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d002      	beq.n	80058b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80058b2:	2302      	movs	r3, #2
 80058b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058b6:	e0c2      	b.n	8005a3e <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_SPI_Receive+0x7e>
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d102      	bne.n	80058ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058c8:	e0b9      	b.n	8005a3e <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2204      	movs	r2, #4
 80058ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	88fa      	ldrh	r2, [r7, #6]
 80058e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	88fa      	ldrh	r2, [r7, #6]
 80058e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005910:	d107      	bne.n	8005922 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005920:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d007      	beq.n	8005940 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800593e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d162      	bne.n	8005a0e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005948:	e02e      	b.n	80059a8 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b01      	cmp	r3, #1
 8005956:	d115      	bne.n	8005984 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f103 020c 	add.w	r2, r3, #12
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005982:	e011      	b.n	80059a8 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005984:	f7fb fb66 	bl	8001054 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d803      	bhi.n	800599c <HAL_SPI_Receive+0x156>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800599a:	d102      	bne.n	80059a2 <HAL_SPI_Receive+0x15c>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d102      	bne.n	80059a8 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059a6:	e04a      	b.n	8005a3e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1cb      	bne.n	800594a <HAL_SPI_Receive+0x104>
 80059b2:	e031      	b.n	8005a18 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d113      	bne.n	80059ea <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	b292      	uxth	r2, r2
 80059ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	1c9a      	adds	r2, r3, #2
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059e8:	e011      	b.n	8005a0e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ea:	f7fb fb33 	bl	8001054 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d803      	bhi.n	8005a02 <HAL_SPI_Receive+0x1bc>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a00:	d102      	bne.n	8005a08 <HAL_SPI_Receive+0x1c2>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a0c:	e017      	b.n	8005a3e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1cd      	bne.n	80059b4 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fb45 	bl	80060ac <SPI_EndRxTransaction>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	75fb      	strb	r3, [r7, #23]
 8005a3a:	e000      	b.n	8005a3e <HAL_SPI_Receive+0x1f8>
  }

error :
 8005a3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08c      	sub	sp, #48	; 0x30
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a66:	2301      	movs	r3, #1
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_SPI_TransmitReceive+0x26>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e18a      	b.n	8005d94 <HAL_SPI_TransmitReceive+0x33c>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a86:	f7fb fae5 	bl	8001054 <HAL_GetTick>
 8005a8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a9c:	887b      	ldrh	r3, [r7, #2]
 8005a9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005aa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d00f      	beq.n	8005ac8 <HAL_SPI_TransmitReceive+0x70>
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aae:	d107      	bne.n	8005ac0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <HAL_SPI_TransmitReceive+0x68>
 8005ab8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d003      	beq.n	8005ac8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ac6:	e15b      	b.n	8005d80 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d005      	beq.n	8005ada <HAL_SPI_TransmitReceive+0x82>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <HAL_SPI_TransmitReceive+0x82>
 8005ad4:	887b      	ldrh	r3, [r7, #2]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d103      	bne.n	8005ae2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ae0:	e14e      	b.n	8005d80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d003      	beq.n	8005af6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2205      	movs	r2, #5
 8005af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	887a      	ldrh	r2, [r7, #2]
 8005b06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	887a      	ldrh	r2, [r7, #2]
 8005b0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	887a      	ldrh	r2, [r7, #2]
 8005b18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	887a      	ldrh	r2, [r7, #2]
 8005b1e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b36:	2b40      	cmp	r3, #64	; 0x40
 8005b38:	d007      	beq.n	8005b4a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b52:	d178      	bne.n	8005c46 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_SPI_TransmitReceive+0x10a>
 8005b5c:	8b7b      	ldrh	r3, [r7, #26]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d166      	bne.n	8005c30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	881a      	ldrh	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	1c9a      	adds	r2, r3, #2
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b86:	e053      	b.n	8005c30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d11b      	bne.n	8005bce <HAL_SPI_TransmitReceive+0x176>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d016      	beq.n	8005bce <HAL_SPI_TransmitReceive+0x176>
 8005ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d113      	bne.n	8005bce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	881a      	ldrh	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb6:	1c9a      	adds	r2, r3, #2
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d119      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x1b8>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d014      	beq.n	8005c10 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	b292      	uxth	r2, r2
 8005bf2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	1c9a      	adds	r2, r3, #2
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c10:	f7fb fa20 	bl	8001054 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d807      	bhi.n	8005c30 <HAL_SPI_TransmitReceive+0x1d8>
 8005c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c26:	d003      	beq.n	8005c30 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c2e:	e0a7      	b.n	8005d80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1a6      	bne.n	8005b88 <HAL_SPI_TransmitReceive+0x130>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1a1      	bne.n	8005b88 <HAL_SPI_TransmitReceive+0x130>
 8005c44:	e07c      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <HAL_SPI_TransmitReceive+0x1fc>
 8005c4e:	8b7b      	ldrh	r3, [r7, #26]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d16b      	bne.n	8005d2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	330c      	adds	r3, #12
 8005c5e:	7812      	ldrb	r2, [r2, #0]
 8005c60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c66:	1c5a      	adds	r2, r3, #1
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c7a:	e057      	b.n	8005d2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d11c      	bne.n	8005cc4 <HAL_SPI_TransmitReceive+0x26c>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d017      	beq.n	8005cc4 <HAL_SPI_TransmitReceive+0x26c>
 8005c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d114      	bne.n	8005cc4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	330c      	adds	r3, #12
 8005ca4:	7812      	ldrb	r2, [r2, #0]
 8005ca6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d119      	bne.n	8005d06 <HAL_SPI_TransmitReceive+0x2ae>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d014      	beq.n	8005d06 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d02:	2301      	movs	r3, #1
 8005d04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d06:	f7fb f9a5 	bl	8001054 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d803      	bhi.n	8005d1e <HAL_SPI_TransmitReceive+0x2c6>
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d1c:	d102      	bne.n	8005d24 <HAL_SPI_TransmitReceive+0x2cc>
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d2a:	e029      	b.n	8005d80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1a2      	bne.n	8005c7c <HAL_SPI_TransmitReceive+0x224>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d19d      	bne.n	8005c7c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 fa17 	bl	8006178 <SPI_EndRxTxTransaction>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d006      	beq.n	8005d5e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d5c:	e010      	b.n	8005d80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10b      	bne.n	8005d7e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	617b      	str	r3, [r7, #20]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	e000      	b.n	8005d80 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3730      	adds	r7, #48	; 0x30
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	099b      	lsrs	r3, r3, #6
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10f      	bne.n	8005de0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	099b      	lsrs	r3, r3, #6
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d004      	beq.n	8005de0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
    return;
 8005dde:	e0d8      	b.n	8005f92 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <HAL_SPI_IRQHandler+0x66>
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	09db      	lsrs	r3, r3, #7
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d004      	beq.n	8005e02 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	4798      	blx	r3
    return;
 8005e00:	e0c7      	b.n	8005f92 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	095b      	lsrs	r3, r3, #5
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10c      	bne.n	8005e28 <HAL_SPI_IRQHandler+0x8c>
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	099b      	lsrs	r3, r3, #6
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	0a1b      	lsrs	r3, r3, #8
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 80b5 	beq.w	8005f92 <HAL_SPI_IRQHandler+0x1f6>
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 80ae 	beq.w	8005f92 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	099b      	lsrs	r3, r3, #6
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d023      	beq.n	8005e8a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d011      	beq.n	8005e72 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e52:	f043 0204 	orr.w	r2, r3, #4
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	e00b      	b.n	8005e8a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e72:	2300      	movs	r3, #0
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	693b      	ldr	r3, [r7, #16]
        return;
 8005e88:	e083      	b.n	8005f92 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d014      	beq.n	8005ec0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9a:	f043 0201 	orr.w	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	0a1b      	lsrs	r3, r3, #8
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00c      	beq.n	8005ee6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed0:	f043 0208 	orr.w	r2, r3, #8
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60bb      	str	r3, [r7, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	60bb      	str	r3, [r7, #8]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d050      	beq.n	8005f90 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005efc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d104      	bne.n	8005f1a <HAL_SPI_IRQHandler+0x17e>
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d034      	beq.n	8005f84 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0203 	bic.w	r2, r2, #3
 8005f28:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d011      	beq.n	8005f56 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f36:	4a18      	ldr	r2, [pc, #96]	; (8005f98 <HAL_SPI_IRQHandler+0x1fc>)
 8005f38:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fc ff4c 	bl	8002ddc <HAL_DMA_Abort_IT>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d016      	beq.n	8005f8c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f62:	4a0d      	ldr	r2, [pc, #52]	; (8005f98 <HAL_SPI_IRQHandler+0x1fc>)
 8005f64:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fc ff36 	bl	8002ddc <HAL_DMA_Abort_IT>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005f82:	e003      	b.n	8005f8c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f809 	bl	8005f9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f8a:	e000      	b.n	8005f8e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005f8c:	bf00      	nop
    return;
 8005f8e:	bf00      	nop
 8005f90:	bf00      	nop
  }
}
 8005f92:	3720      	adds	r7, #32
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	08005fb1 	.word	0x08005fb1

08005f9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f7ff ffe6 	bl	8005f9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fd0:	bf00      	nop
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	603b      	str	r3, [r7, #0]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fe8:	e04c      	b.n	8006084 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff0:	d048      	beq.n	8006084 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ff2:	f7fb f82f 	bl	8001054 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d902      	bls.n	8006008 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d13d      	bne.n	8006084 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006016:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006020:	d111      	bne.n	8006046 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800602a:	d004      	beq.n	8006036 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006034:	d107      	bne.n	8006046 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006044:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604e:	d10f      	bne.n	8006070 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800606e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e00f      	b.n	80060a4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4013      	ands	r3, r2
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	429a      	cmp	r2, r3
 8006092:	bf0c      	ite	eq
 8006094:	2301      	moveq	r3, #1
 8006096:	2300      	movne	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d1a3      	bne.n	8005fea <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060c0:	d111      	bne.n	80060e6 <SPI_EndRxTransaction+0x3a>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ca:	d004      	beq.n	80060d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d4:	d107      	bne.n	80060e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ee:	d12a      	bne.n	8006146 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f8:	d012      	beq.n	8006120 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2200      	movs	r2, #0
 8006102:	2180      	movs	r1, #128	; 0x80
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7ff ff67 	bl	8005fd8 <SPI_WaitFlagStateUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d02d      	beq.n	800616c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006114:	f043 0220 	orr.w	r2, r3, #32
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e026      	b.n	800616e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2200      	movs	r2, #0
 8006128:	2101      	movs	r1, #1
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7ff ff54 	bl	8005fd8 <SPI_WaitFlagStateUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d01a      	beq.n	800616c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613a:	f043 0220 	orr.w	r2, r3, #32
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e013      	b.n	800616e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2200      	movs	r2, #0
 800614e:	2101      	movs	r1, #1
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7ff ff41 	bl	8005fd8 <SPI_WaitFlagStateUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	f043 0220 	orr.w	r2, r3, #32
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e000      	b.n	800616e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af02      	add	r7, sp, #8
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006184:	4b1b      	ldr	r3, [pc, #108]	; (80061f4 <SPI_EndRxTxTransaction+0x7c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1b      	ldr	r2, [pc, #108]	; (80061f8 <SPI_EndRxTxTransaction+0x80>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	0d5b      	lsrs	r3, r3, #21
 8006190:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006194:	fb02 f303 	mul.w	r3, r2, r3
 8006198:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061a2:	d112      	bne.n	80061ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2200      	movs	r2, #0
 80061ac:	2180      	movs	r1, #128	; 0x80
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f7ff ff12 	bl	8005fd8 <SPI_WaitFlagStateUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d016      	beq.n	80061e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061be:	f043 0220 	orr.w	r2, r3, #32
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e00f      	b.n	80061ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e0:	2b80      	cmp	r3, #128	; 0x80
 80061e2:	d0f2      	beq.n	80061ca <SPI_EndRxTxTransaction+0x52>
 80061e4:	e000      	b.n	80061e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80061e6:	bf00      	nop
  }

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	2000003c 	.word	0x2000003c
 80061f8:	165e9f81 	.word	0x165e9f81

080061fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e01d      	b.n	800624a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d106      	bne.n	8006228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f006 fca8 	bl	800cb78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3304      	adds	r3, #4
 8006238:	4619      	mov	r1, r3
 800623a:	4610      	mov	r0, r2
 800623c:	f000 fdf6 	bl	8006e2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006252:	b480      	push	{r7}
 8006254:	b085      	sub	sp, #20
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2202      	movs	r2, #2
 800625e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b06      	cmp	r3, #6
 8006272:	d007      	beq.n	8006284 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800629a:	b480      	push	{r7}
 800629c:	b085      	sub	sp, #20
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 0201 	orr.w	r2, r2, #1
 80062b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b06      	cmp	r3, #6
 80062c2:	d007      	beq.n	80062d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b082      	sub	sp, #8
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e01d      	b.n	8006330 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d106      	bne.n	800630e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f815 	bl	8006338 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2202      	movs	r2, #2
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3304      	adds	r3, #4
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f000 fd83 	bl	8006e2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2201      	movs	r2, #1
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	4618      	mov	r0, r3
 8006360:	f001 f978 	bl	8007654 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a15      	ldr	r2, [pc, #84]	; (80063c0 <HAL_TIM_OC_Start+0x74>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d004      	beq.n	8006378 <HAL_TIM_OC_Start+0x2c>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a14      	ldr	r2, [pc, #80]	; (80063c4 <HAL_TIM_OC_Start+0x78>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d101      	bne.n	800637c <HAL_TIM_OC_Start+0x30>
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <HAL_TIM_OC_Start+0x32>
 800637c:	2300      	movs	r3, #0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d007      	beq.n	8006392 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006390:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f003 0307 	and.w	r3, r3, #7
 800639c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b06      	cmp	r3, #6
 80063a2:	d007      	beq.n	80063b4 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40010400 	.word	0x40010400

080063c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e01d      	b.n	8006416 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f815 	bl	800641e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3304      	adds	r3, #4
 8006404:	4619      	mov	r1, r3
 8006406:	4610      	mov	r0, r2
 8006408:	f000 fd10 	bl	8006e2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
	...

08006434 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2201      	movs	r2, #1
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f001 f904 	bl	8007654 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <HAL_TIM_PWM_Start+0x74>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_TIM_PWM_Start+0x2c>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a14      	ldr	r2, [pc, #80]	; (80064ac <HAL_TIM_PWM_Start+0x78>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d101      	bne.n	8006464 <HAL_TIM_PWM_Start+0x30>
 8006460:	2301      	movs	r3, #1
 8006462:	e000      	b.n	8006466 <HAL_TIM_PWM_Start+0x32>
 8006464:	2300      	movs	r3, #0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d007      	beq.n	800647a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006478:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b06      	cmp	r3, #6
 800648a:	d007      	beq.n	800649c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	40010000 	.word	0x40010000
 80064ac:	40010400 	.word	0x40010400

080064b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e01d      	b.n	80064fe <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f815 	bl	8006506 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4619      	mov	r1, r3
 80064ee:	4610      	mov	r0, r2
 80064f0:	f000 fc9c 	bl	8006e2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b086      	sub	sp, #24
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e083      	b.n	8006636 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f006 fc48 	bl	800cdd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6812      	ldr	r2, [r2, #0]
 800655a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800655e:	f023 0307 	bic.w	r3, r3, #7
 8006562:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3304      	adds	r3, #4
 800656c:	4619      	mov	r1, r3
 800656e:	4610      	mov	r0, r2
 8006570:	f000 fc5c 	bl	8006e2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	4313      	orrs	r3, r2
 8006594:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659c:	f023 0303 	bic.w	r3, r3, #3
 80065a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	021b      	lsls	r3, r3, #8
 80065ac:	4313      	orrs	r3, r2
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80065ba:	f023 030c 	bic.w	r3, r3, #12
 80065be:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	4313      	orrs	r3, r2
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	011a      	lsls	r2, r3, #4
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	031b      	lsls	r3, r3, #12
 80065ea:	4313      	orrs	r3, r2
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80065f8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006600:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	4313      	orrs	r3, r2
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4313      	orrs	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b082      	sub	sp, #8
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <HAL_TIM_Encoder_Start_IT+0x16>
 800664e:	2b04      	cmp	r3, #4
 8006650:	d010      	beq.n	8006674 <HAL_TIM_Encoder_Start_IT+0x36>
 8006652:	e01f      	b.n	8006694 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2201      	movs	r2, #1
 800665a:	2100      	movs	r1, #0
 800665c:	4618      	mov	r0, r3
 800665e:	f000 fff9 	bl	8007654 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f042 0202 	orr.w	r2, r2, #2
 8006670:	60da      	str	r2, [r3, #12]
      break;
 8006672:	e02e      	b.n	80066d2 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2201      	movs	r2, #1
 800667a:	2104      	movs	r1, #4
 800667c:	4618      	mov	r0, r3
 800667e:	f000 ffe9 	bl	8007654 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f042 0204 	orr.w	r2, r2, #4
 8006690:	60da      	str	r2, [r3, #12]
      break;
 8006692:	e01e      	b.n	80066d2 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2201      	movs	r2, #1
 800669a:	2100      	movs	r1, #0
 800669c:	4618      	mov	r0, r3
 800669e:	f000 ffd9 	bl	8007654 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2201      	movs	r2, #1
 80066a8:	2104      	movs	r1, #4
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 ffd2 	bl	8007654 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0202 	orr.w	r2, r2, #2
 80066be:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0204 	orr.w	r2, r2, #4
 80066ce:	60da      	str	r2, [r3, #12]
      break;
 80066d0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0201 	orr.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d122      	bne.n	8006748 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b02      	cmp	r3, #2
 800670e:	d11b      	bne.n	8006748 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f06f 0202 	mvn.w	r2, #2
 8006718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f005 f9ce 	bl	800bad0 <HAL_TIM_IC_CaptureCallback>
 8006734:	e005      	b.n	8006742 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fb59 	bl	8006dee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fb60 	bl	8006e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b04      	cmp	r3, #4
 8006754:	d122      	bne.n	800679c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b04      	cmp	r3, #4
 8006762:	d11b      	bne.n	800679c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f06f 0204 	mvn.w	r2, #4
 800676c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2202      	movs	r2, #2
 8006772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f005 f9a4 	bl	800bad0 <HAL_TIM_IC_CaptureCallback>
 8006788:	e005      	b.n	8006796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fb2f 	bl	8006dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fb36 	bl	8006e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b08      	cmp	r3, #8
 80067a8:	d122      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f003 0308 	and.w	r3, r3, #8
 80067b4:	2b08      	cmp	r3, #8
 80067b6:	d11b      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0208 	mvn.w	r2, #8
 80067c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2204      	movs	r2, #4
 80067c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f005 f97a 	bl	800bad0 <HAL_TIM_IC_CaptureCallback>
 80067dc:	e005      	b.n	80067ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fb05 	bl	8006dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fb0c 	bl	8006e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0310 	and.w	r3, r3, #16
 80067fa:	2b10      	cmp	r3, #16
 80067fc:	d122      	bne.n	8006844 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f003 0310 	and.w	r3, r3, #16
 8006808:	2b10      	cmp	r3, #16
 800680a:	d11b      	bne.n	8006844 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0210 	mvn.w	r2, #16
 8006814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2208      	movs	r2, #8
 800681a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f005 f950 	bl	800bad0 <HAL_TIM_IC_CaptureCallback>
 8006830:	e005      	b.n	800683e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fadb 	bl	8006dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fae2 	bl	8006e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b01      	cmp	r3, #1
 8006850:	d10e      	bne.n	8006870 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b01      	cmp	r3, #1
 800685e:	d107      	bne.n	8006870 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f06f 0201 	mvn.w	r2, #1
 8006868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f004 ff78 	bl	800b760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687a:	2b80      	cmp	r3, #128	; 0x80
 800687c:	d10e      	bne.n	800689c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006888:	2b80      	cmp	r3, #128	; 0x80
 800688a:	d107      	bne.n	800689c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f001 f804 	bl	80078a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a6:	2b40      	cmp	r3, #64	; 0x40
 80068a8:	d10e      	bne.n	80068c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b4:	2b40      	cmp	r3, #64	; 0x40
 80068b6:	d107      	bne.n	80068c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 faa7 	bl	8006e16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	d10e      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f003 0320 	and.w	r3, r3, #32
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	d107      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f06f 0220 	mvn.w	r2, #32
 80068ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 ffce 	bl	8007890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068f4:	bf00      	nop
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <HAL_TIM_OC_ConfigChannel+0x1a>
 8006912:	2302      	movs	r3, #2
 8006914:	e04e      	b.n	80069b4 <HAL_TIM_OC_ConfigChannel+0xb8>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2202      	movs	r2, #2
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b0c      	cmp	r3, #12
 800692a:	d839      	bhi.n	80069a0 <HAL_TIM_OC_ConfigChannel+0xa4>
 800692c:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <HAL_TIM_OC_ConfigChannel+0x38>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006969 	.word	0x08006969
 8006938:	080069a1 	.word	0x080069a1
 800693c:	080069a1 	.word	0x080069a1
 8006940:	080069a1 	.word	0x080069a1
 8006944:	08006977 	.word	0x08006977
 8006948:	080069a1 	.word	0x080069a1
 800694c:	080069a1 	.word	0x080069a1
 8006950:	080069a1 	.word	0x080069a1
 8006954:	08006985 	.word	0x08006985
 8006958:	080069a1 	.word	0x080069a1
 800695c:	080069a1 	.word	0x080069a1
 8006960:	080069a1 	.word	0x080069a1
 8006964:	08006993 	.word	0x08006993
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fafc 	bl	8006f6c <TIM_OC1_SetConfig>
      break;
 8006974:	e015      	b.n	80069a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68b9      	ldr	r1, [r7, #8]
 800697c:	4618      	mov	r0, r3
 800697e:	f000 fb65 	bl	800704c <TIM_OC2_SetConfig>
      break;
 8006982:	e00e      	b.n	80069a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68b9      	ldr	r1, [r7, #8]
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fbd4 	bl	8007138 <TIM_OC3_SetConfig>
      break;
 8006990:	e007      	b.n	80069a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	4618      	mov	r0, r3
 800699a:	f000 fc41 	bl	8007220 <TIM_OC4_SetConfig>
      break;
 800699e:	e000      	b.n	80069a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80069a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d101      	bne.n	80069d6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80069d2:	2302      	movs	r3, #2
 80069d4:	e08a      	b.n	8006aec <HAL_TIM_IC_ConfigChannel+0x130>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2202      	movs	r2, #2
 80069e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d11b      	bne.n	8006a24 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	6819      	ldr	r1, [r3, #0]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f000 fc66 	bl	80072cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699a      	ldr	r2, [r3, #24]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 020c 	bic.w	r2, r2, #12
 8006a0e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6999      	ldr	r1, [r3, #24]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	689a      	ldr	r2, [r3, #8]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	619a      	str	r2, [r3, #24]
 8006a22:	e05a      	b.n	8006ada <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	d11c      	bne.n	8006a64 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6819      	ldr	r1, [r3, #0]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f000 fcea 	bl	8007412 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	699a      	ldr	r2, [r3, #24]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a4c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6999      	ldr	r1, [r3, #24]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	021a      	lsls	r2, r3, #8
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	619a      	str	r2, [r3, #24]
 8006a62:	e03a      	b.n	8006ada <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b08      	cmp	r3, #8
 8006a68:	d11b      	bne.n	8006aa2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6819      	ldr	r1, [r3, #0]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f000 fd37 	bl	80074ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69da      	ldr	r2, [r3, #28]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f022 020c 	bic.w	r2, r2, #12
 8006a8c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69d9      	ldr	r1, [r3, #28]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	61da      	str	r2, [r3, #28]
 8006aa0:	e01b      	b.n	8006ada <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6818      	ldr	r0, [r3, #0]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	6819      	ldr	r1, [r3, #0]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	f000 fd57 	bl	8007564 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69da      	ldr	r2, [r3, #28]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ac4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69d9      	ldr	r1, [r3, #28]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	021a      	lsls	r2, r3, #8
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e0b4      	b.n	8006c78 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b0c      	cmp	r3, #12
 8006b22:	f200 809f 	bhi.w	8006c64 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006b26:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006b61 	.word	0x08006b61
 8006b30:	08006c65 	.word	0x08006c65
 8006b34:	08006c65 	.word	0x08006c65
 8006b38:	08006c65 	.word	0x08006c65
 8006b3c:	08006ba1 	.word	0x08006ba1
 8006b40:	08006c65 	.word	0x08006c65
 8006b44:	08006c65 	.word	0x08006c65
 8006b48:	08006c65 	.word	0x08006c65
 8006b4c:	08006be3 	.word	0x08006be3
 8006b50:	08006c65 	.word	0x08006c65
 8006b54:	08006c65 	.word	0x08006c65
 8006b58:	08006c65 	.word	0x08006c65
 8006b5c:	08006c23 	.word	0x08006c23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fa00 	bl	8006f6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0208 	orr.w	r2, r2, #8
 8006b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699a      	ldr	r2, [r3, #24]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0204 	bic.w	r2, r2, #4
 8006b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6999      	ldr	r1, [r3, #24]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	691a      	ldr	r2, [r3, #16]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	619a      	str	r2, [r3, #24]
      break;
 8006b9e:	e062      	b.n	8006c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68b9      	ldr	r1, [r7, #8]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 fa50 	bl	800704c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6999      	ldr	r1, [r3, #24]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	021a      	lsls	r2, r3, #8
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	619a      	str	r2, [r3, #24]
      break;
 8006be0:	e041      	b.n	8006c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68b9      	ldr	r1, [r7, #8]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 faa5 	bl	8007138 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f042 0208 	orr.w	r2, r2, #8
 8006bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69da      	ldr	r2, [r3, #28]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 0204 	bic.w	r2, r2, #4
 8006c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	69d9      	ldr	r1, [r3, #28]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	61da      	str	r2, [r3, #28]
      break;
 8006c20:	e021      	b.n	8006c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 faf9 	bl	8007220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69da      	ldr	r2, [r3, #28]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69d9      	ldr	r1, [r3, #28]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	021a      	lsls	r2, r3, #8
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	61da      	str	r2, [r3, #28]
      break;
 8006c62:	e000      	b.n	8006c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006c64:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_TIM_ConfigClockSource+0x18>
 8006c94:	2302      	movs	r3, #2
 8006c96:	e0a6      	b.n	8006de6 <HAL_TIM_ConfigClockSource+0x166>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cbe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b40      	cmp	r3, #64	; 0x40
 8006cce:	d067      	beq.n	8006da0 <HAL_TIM_ConfigClockSource+0x120>
 8006cd0:	2b40      	cmp	r3, #64	; 0x40
 8006cd2:	d80b      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x6c>
 8006cd4:	2b10      	cmp	r3, #16
 8006cd6:	d073      	beq.n	8006dc0 <HAL_TIM_ConfigClockSource+0x140>
 8006cd8:	2b10      	cmp	r3, #16
 8006cda:	d802      	bhi.n	8006ce2 <HAL_TIM_ConfigClockSource+0x62>
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d06f      	beq.n	8006dc0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006ce0:	e078      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006ce2:	2b20      	cmp	r3, #32
 8006ce4:	d06c      	beq.n	8006dc0 <HAL_TIM_ConfigClockSource+0x140>
 8006ce6:	2b30      	cmp	r3, #48	; 0x30
 8006ce8:	d06a      	beq.n	8006dc0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006cea:	e073      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006cec:	2b70      	cmp	r3, #112	; 0x70
 8006cee:	d00d      	beq.n	8006d0c <HAL_TIM_ConfigClockSource+0x8c>
 8006cf0:	2b70      	cmp	r3, #112	; 0x70
 8006cf2:	d804      	bhi.n	8006cfe <HAL_TIM_ConfigClockSource+0x7e>
 8006cf4:	2b50      	cmp	r3, #80	; 0x50
 8006cf6:	d033      	beq.n	8006d60 <HAL_TIM_ConfigClockSource+0xe0>
 8006cf8:	2b60      	cmp	r3, #96	; 0x60
 8006cfa:	d041      	beq.n	8006d80 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006cfc:	e06a      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d02:	d066      	beq.n	8006dd2 <HAL_TIM_ConfigClockSource+0x152>
 8006d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d08:	d017      	beq.n	8006d3a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006d0a:	e063      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6818      	ldr	r0, [r3, #0]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	6899      	ldr	r1, [r3, #8]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f000 fc7a 	bl	8007614 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d2e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	609a      	str	r2, [r3, #8]
      break;
 8006d38:	e04c      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6818      	ldr	r0, [r3, #0]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	6899      	ldr	r1, [r3, #8]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f000 fc63 	bl	8007614 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d5c:	609a      	str	r2, [r3, #8]
      break;
 8006d5e:	e039      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	6859      	ldr	r1, [r3, #4]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f000 fb21 	bl	80073b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2150      	movs	r1, #80	; 0x50
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fc30 	bl	80075de <TIM_ITRx_SetConfig>
      break;
 8006d7e:	e029      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6818      	ldr	r0, [r3, #0]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	6859      	ldr	r1, [r3, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	f000 fb7d 	bl	800748c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2160      	movs	r1, #96	; 0x60
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fc20 	bl	80075de <TIM_ITRx_SetConfig>
      break;
 8006d9e:	e019      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6818      	ldr	r0, [r3, #0]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	6859      	ldr	r1, [r3, #4]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	461a      	mov	r2, r3
 8006dae:	f000 fb01 	bl	80073b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2140      	movs	r1, #64	; 0x40
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 fc10 	bl	80075de <TIM_ITRx_SetConfig>
      break;
 8006dbe:	e009      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4610      	mov	r0, r2
 8006dcc:	f000 fc07 	bl	80075de <TIM_ITRx_SetConfig>
      break;
 8006dd0:	e000      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e0a:	bf00      	nop
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
	...

08006e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a40      	ldr	r2, [pc, #256]	; (8006f40 <TIM_Base_SetConfig+0x114>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d013      	beq.n	8006e6c <TIM_Base_SetConfig+0x40>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e4a:	d00f      	beq.n	8006e6c <TIM_Base_SetConfig+0x40>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a3d      	ldr	r2, [pc, #244]	; (8006f44 <TIM_Base_SetConfig+0x118>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00b      	beq.n	8006e6c <TIM_Base_SetConfig+0x40>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a3c      	ldr	r2, [pc, #240]	; (8006f48 <TIM_Base_SetConfig+0x11c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d007      	beq.n	8006e6c <TIM_Base_SetConfig+0x40>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a3b      	ldr	r2, [pc, #236]	; (8006f4c <TIM_Base_SetConfig+0x120>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d003      	beq.n	8006e6c <TIM_Base_SetConfig+0x40>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a3a      	ldr	r2, [pc, #232]	; (8006f50 <TIM_Base_SetConfig+0x124>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d108      	bne.n	8006e7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a2f      	ldr	r2, [pc, #188]	; (8006f40 <TIM_Base_SetConfig+0x114>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d02b      	beq.n	8006ede <TIM_Base_SetConfig+0xb2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e8c:	d027      	beq.n	8006ede <TIM_Base_SetConfig+0xb2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a2c      	ldr	r2, [pc, #176]	; (8006f44 <TIM_Base_SetConfig+0x118>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d023      	beq.n	8006ede <TIM_Base_SetConfig+0xb2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a2b      	ldr	r2, [pc, #172]	; (8006f48 <TIM_Base_SetConfig+0x11c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d01f      	beq.n	8006ede <TIM_Base_SetConfig+0xb2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a2a      	ldr	r2, [pc, #168]	; (8006f4c <TIM_Base_SetConfig+0x120>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d01b      	beq.n	8006ede <TIM_Base_SetConfig+0xb2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a29      	ldr	r2, [pc, #164]	; (8006f50 <TIM_Base_SetConfig+0x124>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d017      	beq.n	8006ede <TIM_Base_SetConfig+0xb2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a28      	ldr	r2, [pc, #160]	; (8006f54 <TIM_Base_SetConfig+0x128>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d013      	beq.n	8006ede <TIM_Base_SetConfig+0xb2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a27      	ldr	r2, [pc, #156]	; (8006f58 <TIM_Base_SetConfig+0x12c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d00f      	beq.n	8006ede <TIM_Base_SetConfig+0xb2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a26      	ldr	r2, [pc, #152]	; (8006f5c <TIM_Base_SetConfig+0x130>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d00b      	beq.n	8006ede <TIM_Base_SetConfig+0xb2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a25      	ldr	r2, [pc, #148]	; (8006f60 <TIM_Base_SetConfig+0x134>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d007      	beq.n	8006ede <TIM_Base_SetConfig+0xb2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a24      	ldr	r2, [pc, #144]	; (8006f64 <TIM_Base_SetConfig+0x138>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d003      	beq.n	8006ede <TIM_Base_SetConfig+0xb2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a23      	ldr	r2, [pc, #140]	; (8006f68 <TIM_Base_SetConfig+0x13c>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d108      	bne.n	8006ef0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a0a      	ldr	r2, [pc, #40]	; (8006f40 <TIM_Base_SetConfig+0x114>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d003      	beq.n	8006f24 <TIM_Base_SetConfig+0xf8>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a0c      	ldr	r2, [pc, #48]	; (8006f50 <TIM_Base_SetConfig+0x124>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d103      	bne.n	8006f2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	615a      	str	r2, [r3, #20]
}
 8006f32:	bf00      	nop
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40010000 	.word	0x40010000
 8006f44:	40000400 	.word	0x40000400
 8006f48:	40000800 	.word	0x40000800
 8006f4c:	40000c00 	.word	0x40000c00
 8006f50:	40010400 	.word	0x40010400
 8006f54:	40014000 	.word	0x40014000
 8006f58:	40014400 	.word	0x40014400
 8006f5c:	40014800 	.word	0x40014800
 8006f60:	40001800 	.word	0x40001800
 8006f64:	40001c00 	.word	0x40001c00
 8006f68:	40002000 	.word	0x40002000

08006f6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	f023 0201 	bic.w	r2, r3, #1
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0303 	bic.w	r3, r3, #3
 8006fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f023 0302 	bic.w	r3, r3, #2
 8006fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a20      	ldr	r2, [pc, #128]	; (8007044 <TIM_OC1_SetConfig+0xd8>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d003      	beq.n	8006fd0 <TIM_OC1_SetConfig+0x64>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a1f      	ldr	r2, [pc, #124]	; (8007048 <TIM_OC1_SetConfig+0xdc>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d10c      	bne.n	8006fea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f023 0308 	bic.w	r3, r3, #8
 8006fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f023 0304 	bic.w	r3, r3, #4
 8006fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a15      	ldr	r2, [pc, #84]	; (8007044 <TIM_OC1_SetConfig+0xd8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d003      	beq.n	8006ffa <TIM_OC1_SetConfig+0x8e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a14      	ldr	r2, [pc, #80]	; (8007048 <TIM_OC1_SetConfig+0xdc>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d111      	bne.n	800701e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	4313      	orrs	r3, r2
 8007012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	4313      	orrs	r3, r2
 800701c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	621a      	str	r2, [r3, #32]
}
 8007038:	bf00      	nop
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	40010000 	.word	0x40010000
 8007048:	40010400 	.word	0x40010400

0800704c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f023 0210 	bic.w	r2, r3, #16
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	021b      	lsls	r3, r3, #8
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	4313      	orrs	r3, r2
 800708e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f023 0320 	bic.w	r3, r3, #32
 8007096:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	011b      	lsls	r3, r3, #4
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a22      	ldr	r2, [pc, #136]	; (8007130 <TIM_OC2_SetConfig+0xe4>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d003      	beq.n	80070b4 <TIM_OC2_SetConfig+0x68>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a21      	ldr	r2, [pc, #132]	; (8007134 <TIM_OC2_SetConfig+0xe8>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d10d      	bne.n	80070d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a17      	ldr	r2, [pc, #92]	; (8007130 <TIM_OC2_SetConfig+0xe4>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d003      	beq.n	80070e0 <TIM_OC2_SetConfig+0x94>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a16      	ldr	r2, [pc, #88]	; (8007134 <TIM_OC2_SetConfig+0xe8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d113      	bne.n	8007108 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	4313      	orrs	r3, r2
 8007106:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	621a      	str	r2, [r3, #32]
}
 8007122:	bf00      	nop
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	40010000 	.word	0x40010000
 8007134:	40010400 	.word	0x40010400

08007138 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0303 	bic.w	r3, r3, #3
 800716e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	021b      	lsls	r3, r3, #8
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a21      	ldr	r2, [pc, #132]	; (8007218 <TIM_OC3_SetConfig+0xe0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d003      	beq.n	800719e <TIM_OC3_SetConfig+0x66>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a20      	ldr	r2, [pc, #128]	; (800721c <TIM_OC3_SetConfig+0xe4>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d10d      	bne.n	80071ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	021b      	lsls	r3, r3, #8
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a16      	ldr	r2, [pc, #88]	; (8007218 <TIM_OC3_SetConfig+0xe0>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d003      	beq.n	80071ca <TIM_OC3_SetConfig+0x92>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a15      	ldr	r2, [pc, #84]	; (800721c <TIM_OC3_SetConfig+0xe4>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d113      	bne.n	80071f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	011b      	lsls	r3, r3, #4
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	621a      	str	r2, [r3, #32]
}
 800720c:	bf00      	nop
 800720e:	371c      	adds	r7, #28
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	40010000 	.word	0x40010000
 800721c:	40010400 	.word	0x40010400

08007220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800724e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	021b      	lsls	r3, r3, #8
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4313      	orrs	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800726a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	031b      	lsls	r3, r3, #12
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a12      	ldr	r2, [pc, #72]	; (80072c4 <TIM_OC4_SetConfig+0xa4>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d003      	beq.n	8007288 <TIM_OC4_SetConfig+0x68>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a11      	ldr	r2, [pc, #68]	; (80072c8 <TIM_OC4_SetConfig+0xa8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d109      	bne.n	800729c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800728e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	019b      	lsls	r3, r3, #6
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	4313      	orrs	r3, r2
 800729a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	621a      	str	r2, [r3, #32]
}
 80072b6:	bf00      	nop
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	40010000 	.word	0x40010000
 80072c8:	40010400 	.word	0x40010400

080072cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	f023 0201 	bic.w	r2, r3, #1
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4a28      	ldr	r2, [pc, #160]	; (8007398 <TIM_TI1_SetConfig+0xcc>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d01b      	beq.n	8007332 <TIM_TI1_SetConfig+0x66>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007300:	d017      	beq.n	8007332 <TIM_TI1_SetConfig+0x66>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4a25      	ldr	r2, [pc, #148]	; (800739c <TIM_TI1_SetConfig+0xd0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d013      	beq.n	8007332 <TIM_TI1_SetConfig+0x66>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	4a24      	ldr	r2, [pc, #144]	; (80073a0 <TIM_TI1_SetConfig+0xd4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00f      	beq.n	8007332 <TIM_TI1_SetConfig+0x66>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	4a23      	ldr	r2, [pc, #140]	; (80073a4 <TIM_TI1_SetConfig+0xd8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d00b      	beq.n	8007332 <TIM_TI1_SetConfig+0x66>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	4a22      	ldr	r2, [pc, #136]	; (80073a8 <TIM_TI1_SetConfig+0xdc>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d007      	beq.n	8007332 <TIM_TI1_SetConfig+0x66>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4a21      	ldr	r2, [pc, #132]	; (80073ac <TIM_TI1_SetConfig+0xe0>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d003      	beq.n	8007332 <TIM_TI1_SetConfig+0x66>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4a20      	ldr	r2, [pc, #128]	; (80073b0 <TIM_TI1_SetConfig+0xe4>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d101      	bne.n	8007336 <TIM_TI1_SetConfig+0x6a>
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <TIM_TI1_SetConfig+0x6c>
 8007336:	2300      	movs	r3, #0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d008      	beq.n	800734e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f023 0303 	bic.w	r3, r3, #3
 8007342:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4313      	orrs	r3, r2
 800734a:	617b      	str	r3, [r7, #20]
 800734c:	e003      	b.n	8007356 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f043 0301 	orr.w	r3, r3, #1
 8007354:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800735c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	011b      	lsls	r3, r3, #4
 8007362:	b2db      	uxtb	r3, r3
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f023 030a 	bic.w	r3, r3, #10
 8007370:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f003 030a 	and.w	r3, r3, #10
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	4313      	orrs	r3, r2
 800737c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	621a      	str	r2, [r3, #32]
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	40010000 	.word	0x40010000
 800739c:	40000400 	.word	0x40000400
 80073a0:	40000800 	.word	0x40000800
 80073a4:	40000c00 	.word	0x40000c00
 80073a8:	40010400 	.word	0x40010400
 80073ac:	40014000 	.word	0x40014000
 80073b0:	40001800 	.word	0x40001800

080073b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6a1b      	ldr	r3, [r3, #32]
 80073c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	f023 0201 	bic.w	r2, r3, #1
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	011b      	lsls	r3, r3, #4
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f023 030a 	bic.w	r3, r3, #10
 80073f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	621a      	str	r2, [r3, #32]
}
 8007406:	bf00      	nop
 8007408:	371c      	adds	r7, #28
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007412:	b480      	push	{r7}
 8007414:	b087      	sub	sp, #28
 8007416:	af00      	add	r7, sp, #0
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	60b9      	str	r1, [r7, #8]
 800741c:	607a      	str	r2, [r7, #4]
 800741e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	f023 0210 	bic.w	r2, r3, #16
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800743e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	021b      	lsls	r3, r3, #8
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	031b      	lsls	r3, r3, #12
 8007456:	b29b      	uxth	r3, r3
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	4313      	orrs	r3, r2
 800745c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007464:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	621a      	str	r2, [r3, #32]
}
 8007480:	bf00      	nop
 8007482:	371c      	adds	r7, #28
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	f023 0210 	bic.w	r2, r3, #16
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	031b      	lsls	r3, r3, #12
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4313      	orrs	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	011b      	lsls	r3, r3, #4
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	621a      	str	r2, [r3, #32]
}
 80074e0:	bf00      	nop
 80074e2:	371c      	adds	r7, #28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f023 0303 	bic.w	r3, r3, #3
 8007518:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4313      	orrs	r3, r2
 8007520:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007528:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	b2db      	uxtb	r3, r3
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	4313      	orrs	r3, r2
 8007534:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800753c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	021b      	lsls	r3, r3, #8
 8007542:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	4313      	orrs	r3, r2
 800754a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	621a      	str	r2, [r3, #32]
}
 8007558:	bf00      	nop
 800755a:	371c      	adds	r7, #28
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007590:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	021b      	lsls	r3, r3, #8
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4313      	orrs	r3, r2
 800759a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	031b      	lsls	r3, r3, #12
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80075b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	031b      	lsls	r3, r3, #12
 80075bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	621a      	str	r2, [r3, #32]
}
 80075d2:	bf00      	nop
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	f043 0307 	orr.w	r3, r3, #7
 8007600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	609a      	str	r2, [r3, #8]
}
 8007608:	bf00      	nop
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800762e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	021a      	lsls	r2, r3, #8
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	431a      	orrs	r2, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	4313      	orrs	r3, r2
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	4313      	orrs	r3, r2
 8007640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	609a      	str	r2, [r3, #8]
}
 8007648:	bf00      	nop
 800764a:	371c      	adds	r7, #28
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f003 031f 	and.w	r3, r3, #31
 8007666:	2201      	movs	r2, #1
 8007668:	fa02 f303 	lsl.w	r3, r2, r3
 800766c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6a1a      	ldr	r2, [r3, #32]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	43db      	mvns	r3, r3
 8007676:	401a      	ands	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6a1a      	ldr	r2, [r3, #32]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f003 031f 	and.w	r3, r3, #31
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	fa01 f303 	lsl.w	r3, r1, r3
 800768c:	431a      	orrs	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	621a      	str	r2, [r3, #32]
}
 8007692:	bf00      	nop
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2204      	movs	r2, #4
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 f901 	bl	80078b8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076c4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f003 0307 	and.w	r3, r3, #7
 80076d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b06      	cmp	r3, #6
 80076d6:	d007      	beq.n	80076e8 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0201 	orr.w	r2, r2, #1
 80076e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007708:	2302      	movs	r3, #2
 800770a:	e05a      	b.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	4313      	orrs	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a21      	ldr	r2, [pc, #132]	; (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d022      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007758:	d01d      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a1d      	ldr	r2, [pc, #116]	; (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d018      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a1b      	ldr	r2, [pc, #108]	; (80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d013      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a1a      	ldr	r2, [pc, #104]	; (80077dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d00e      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a18      	ldr	r2, [pc, #96]	; (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d009      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a17      	ldr	r2, [pc, #92]	; (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d004      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a15      	ldr	r2, [pc, #84]	; (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d10c      	bne.n	80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800779c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	40010000 	.word	0x40010000
 80077d4:	40000400 	.word	0x40000400
 80077d8:	40000800 	.word	0x40000800
 80077dc:	40000c00 	.word	0x40000c00
 80077e0:	40010400 	.word	0x40010400
 80077e4:	40014000 	.word	0x40014000
 80077e8:	40001800 	.word	0x40001800

080077ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007804:	2302      	movs	r3, #2
 8007806:	e03d      	b.n	8007884 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	4313      	orrs	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	4313      	orrs	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4313      	orrs	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	4313      	orrs	r3, r2
 8007862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	4313      	orrs	r3, r2
 8007870:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f003 031f 	and.w	r3, r3, #31
 80078ca:	2204      	movs	r2, #4
 80078cc:	fa02 f303 	lsl.w	r3, r2, r3
 80078d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6a1a      	ldr	r2, [r3, #32]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	43db      	mvns	r3, r3
 80078da:	401a      	ands	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6a1a      	ldr	r2, [r3, #32]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f003 031f 	and.w	r3, r3, #31
 80078ea:	6879      	ldr	r1, [r7, #4]
 80078ec:	fa01 f303 	lsl.w	r3, r1, r3
 80078f0:	431a      	orrs	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	621a      	str	r2, [r3, #32]
}
 80078f6:	bf00      	nop
 80078f8:	371c      	adds	r7, #28
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b082      	sub	sp, #8
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e03f      	b.n	8007994 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d106      	bne.n	800792e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f005 fb1d 	bl	800cf68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2224      	movs	r2, #36	; 0x24
 8007932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007944:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fabe 	bl	8007ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691a      	ldr	r2, [r3, #16]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800795a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	695a      	ldr	r2, [r3, #20]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800796a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800797a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2220      	movs	r2, #32
 8007986:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2220      	movs	r2, #32
 800798e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	4613      	mov	r3, r2
 80079a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b20      	cmp	r3, #32
 80079b4:	d140      	bne.n	8007a38 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d002      	beq.n	80079c2 <HAL_UART_Receive_IT+0x26>
 80079bc:	88fb      	ldrh	r3, [r7, #6]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e039      	b.n	8007a3a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d101      	bne.n	80079d4 <HAL_UART_Receive_IT+0x38>
 80079d0:	2302      	movs	r3, #2
 80079d2:	e032      	b.n	8007a3a <HAL_UART_Receive_IT+0x9e>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	88fa      	ldrh	r2, [r7, #6]
 80079e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	88fa      	ldrh	r2, [r7, #6]
 80079ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2222      	movs	r2, #34	; 0x22
 80079f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68da      	ldr	r2, [r3, #12]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a12:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	695a      	ldr	r2, [r3, #20]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f042 0220 	orr.w	r2, r2, #32
 8007a32:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	e000      	b.n	8007a3a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007a38:	2302      	movs	r3, #2
  }
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
	...

08007a48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b088      	sub	sp, #32
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	f003 030f 	and.w	r3, r3, #15
 8007a76:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10d      	bne.n	8007a9a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d008      	beq.n	8007a9a <HAL_UART_IRQHandler+0x52>
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f996 	bl	8007dc4 <UART_Receive_IT>
      return;
 8007a98:	e0d1      	b.n	8007c3e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 80b0 	beq.w	8007c02 <HAL_UART_IRQHandler+0x1ba>
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d105      	bne.n	8007ab8 <HAL_UART_IRQHandler+0x70>
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 80a5 	beq.w	8007c02 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00a      	beq.n	8007ad8 <HAL_UART_IRQHandler+0x90>
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad0:	f043 0201 	orr.w	r2, r3, #1
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	f003 0304 	and.w	r3, r3, #4
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <HAL_UART_IRQHandler+0xb0>
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af0:	f043 0202 	orr.w	r2, r3, #2
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <HAL_UART_IRQHandler+0xd0>
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d005      	beq.n	8007b18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b10:	f043 0204 	orr.w	r2, r3, #4
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	f003 0308 	and.w	r3, r3, #8
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00f      	beq.n	8007b42 <HAL_UART_IRQHandler+0xfa>
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	f003 0320 	and.w	r3, r3, #32
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d104      	bne.n	8007b36 <HAL_UART_IRQHandler+0xee>
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d005      	beq.n	8007b42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3a:	f043 0208 	orr.w	r2, r3, #8
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d078      	beq.n	8007c3c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	f003 0320 	and.w	r3, r3, #32
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d007      	beq.n	8007b64 <HAL_UART_IRQHandler+0x11c>
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	f003 0320 	and.w	r3, r3, #32
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d002      	beq.n	8007b64 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f930 	bl	8007dc4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6e:	2b40      	cmp	r3, #64	; 0x40
 8007b70:	bf0c      	ite	eq
 8007b72:	2301      	moveq	r3, #1
 8007b74:	2300      	movne	r3, #0
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b7e:	f003 0308 	and.w	r3, r3, #8
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d102      	bne.n	8007b8c <HAL_UART_IRQHandler+0x144>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d031      	beq.n	8007bf0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f879 	bl	8007c84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9c:	2b40      	cmp	r3, #64	; 0x40
 8007b9e:	d123      	bne.n	8007be8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695a      	ldr	r2, [r3, #20]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bae:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d013      	beq.n	8007be0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bbc:	4a21      	ldr	r2, [pc, #132]	; (8007c44 <HAL_UART_IRQHandler+0x1fc>)
 8007bbe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fb f909 	bl	8002ddc <HAL_DMA_Abort_IT>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d016      	beq.n	8007bfe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007bda:	4610      	mov	r0, r2
 8007bdc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bde:	e00e      	b.n	8007bfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f845 	bl	8007c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be6:	e00a      	b.n	8007bfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f841 	bl	8007c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bee:	e006      	b.n	8007bfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f83d 	bl	8007c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007bfc:	e01e      	b.n	8007c3c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bfe:	bf00      	nop
    return;
 8007c00:	e01c      	b.n	8007c3c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d008      	beq.n	8007c1e <HAL_UART_IRQHandler+0x1d6>
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f866 	bl	8007ce8 <UART_Transmit_IT>
    return;
 8007c1c:	e00f      	b.n	8007c3e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00a      	beq.n	8007c3e <HAL_UART_IRQHandler+0x1f6>
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d005      	beq.n	8007c3e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f8ae 	bl	8007d94 <UART_EndTransmit_IT>
    return;
 8007c38:	bf00      	nop
 8007c3a:	e000      	b.n	8007c3e <HAL_UART_IRQHandler+0x1f6>
    return;
 8007c3c:	bf00      	nop
  }
}
 8007c3e:	3720      	adds	r7, #32
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	08007cc1 	.word	0x08007cc1

08007c48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c9a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	695a      	ldr	r2, [r3, #20]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f022 0201 	bic.w	r2, r2, #1
 8007caa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ccc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff ffc8 	bl	8007c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b21      	cmp	r3, #33	; 0x21
 8007cfa:	d144      	bne.n	8007d86 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d04:	d11a      	bne.n	8007d3c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	881b      	ldrh	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d1a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d105      	bne.n	8007d30 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	1c9a      	adds	r2, r3, #2
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	621a      	str	r2, [r3, #32]
 8007d2e:	e00e      	b.n	8007d4e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a1b      	ldr	r3, [r3, #32]
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	621a      	str	r2, [r3, #32]
 8007d3a:	e008      	b.n	8007d4e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	1c59      	adds	r1, r3, #1
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	6211      	str	r1, [r2, #32]
 8007d46:	781a      	ldrb	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10f      	bne.n	8007d82 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68da      	ldr	r2, [r3, #12]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d70:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68da      	ldr	r2, [r3, #12]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d80:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	e000      	b.n	8007d88 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007d86:	2302      	movs	r3, #2
  }
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3714      	adds	r7, #20
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68da      	ldr	r2, [r3, #12]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007daa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2220      	movs	r2, #32
 8007db0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff ff47 	bl	8007c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b22      	cmp	r3, #34	; 0x22
 8007dd6:	d171      	bne.n	8007ebc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de0:	d123      	bne.n	8007e2a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10e      	bne.n	8007e0e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e06:	1c9a      	adds	r2, r3, #2
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	629a      	str	r2, [r3, #40]	; 0x28
 8007e0c:	e029      	b.n	8007e62 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e22:	1c5a      	adds	r2, r3, #1
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	629a      	str	r2, [r3, #40]	; 0x28
 8007e28:	e01b      	b.n	8007e62 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10a      	bne.n	8007e48 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6858      	ldr	r0, [r3, #4]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3c:	1c59      	adds	r1, r3, #1
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6291      	str	r1, [r2, #40]	; 0x28
 8007e42:	b2c2      	uxtb	r2, r0
 8007e44:	701a      	strb	r2, [r3, #0]
 8007e46:	e00c      	b.n	8007e62 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e54:	1c58      	adds	r0, r3, #1
 8007e56:	6879      	ldr	r1, [r7, #4]
 8007e58:	6288      	str	r0, [r1, #40]	; 0x28
 8007e5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d120      	bne.n	8007eb8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68da      	ldr	r2, [r3, #12]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0220 	bic.w	r2, r2, #32
 8007e84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	695a      	ldr	r2, [r3, #20]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f022 0201 	bic.w	r2, r2, #1
 8007ea4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff fed4 	bl	8007c5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	e002      	b.n	8007ebe <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	e000      	b.n	8007ebe <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007ebc:	2302      	movs	r3, #2
  }
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ecc:	b085      	sub	sp, #20
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68da      	ldr	r2, [r3, #12]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007f0a:	f023 030c 	bic.w	r3, r3, #12
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	6812      	ldr	r2, [r2, #0]
 8007f12:	68f9      	ldr	r1, [r7, #12]
 8007f14:	430b      	orrs	r3, r1
 8007f16:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	699a      	ldr	r2, [r3, #24]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f36:	f040 818b 	bne.w	8008250 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4ac1      	ldr	r2, [pc, #772]	; (8008244 <UART_SetConfig+0x37c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d005      	beq.n	8007f50 <UART_SetConfig+0x88>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4abf      	ldr	r2, [pc, #764]	; (8008248 <UART_SetConfig+0x380>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	f040 80bd 	bne.w	80080ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f50:	f7fd f906 	bl	8005160 <HAL_RCC_GetPCLK2Freq>
 8007f54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	461d      	mov	r5, r3
 8007f5a:	f04f 0600 	mov.w	r6, #0
 8007f5e:	46a8      	mov	r8, r5
 8007f60:	46b1      	mov	r9, r6
 8007f62:	eb18 0308 	adds.w	r3, r8, r8
 8007f66:	eb49 0409 	adc.w	r4, r9, r9
 8007f6a:	4698      	mov	r8, r3
 8007f6c:	46a1      	mov	r9, r4
 8007f6e:	eb18 0805 	adds.w	r8, r8, r5
 8007f72:	eb49 0906 	adc.w	r9, r9, r6
 8007f76:	f04f 0100 	mov.w	r1, #0
 8007f7a:	f04f 0200 	mov.w	r2, #0
 8007f7e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007f82:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007f86:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007f8a:	4688      	mov	r8, r1
 8007f8c:	4691      	mov	r9, r2
 8007f8e:	eb18 0005 	adds.w	r0, r8, r5
 8007f92:	eb49 0106 	adc.w	r1, r9, r6
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	461d      	mov	r5, r3
 8007f9c:	f04f 0600 	mov.w	r6, #0
 8007fa0:	196b      	adds	r3, r5, r5
 8007fa2:	eb46 0406 	adc.w	r4, r6, r6
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	4623      	mov	r3, r4
 8007faa:	f7f8 fe6d 	bl	8000c88 <__aeabi_uldivmod>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	4ba5      	ldr	r3, [pc, #660]	; (800824c <UART_SetConfig+0x384>)
 8007fb6:	fba3 2302 	umull	r2, r3, r3, r2
 8007fba:	095b      	lsrs	r3, r3, #5
 8007fbc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	461d      	mov	r5, r3
 8007fc4:	f04f 0600 	mov.w	r6, #0
 8007fc8:	46a9      	mov	r9, r5
 8007fca:	46b2      	mov	sl, r6
 8007fcc:	eb19 0309 	adds.w	r3, r9, r9
 8007fd0:	eb4a 040a 	adc.w	r4, sl, sl
 8007fd4:	4699      	mov	r9, r3
 8007fd6:	46a2      	mov	sl, r4
 8007fd8:	eb19 0905 	adds.w	r9, r9, r5
 8007fdc:	eb4a 0a06 	adc.w	sl, sl, r6
 8007fe0:	f04f 0100 	mov.w	r1, #0
 8007fe4:	f04f 0200 	mov.w	r2, #0
 8007fe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ff0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ff4:	4689      	mov	r9, r1
 8007ff6:	4692      	mov	sl, r2
 8007ff8:	eb19 0005 	adds.w	r0, r9, r5
 8007ffc:	eb4a 0106 	adc.w	r1, sl, r6
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	461d      	mov	r5, r3
 8008006:	f04f 0600 	mov.w	r6, #0
 800800a:	196b      	adds	r3, r5, r5
 800800c:	eb46 0406 	adc.w	r4, r6, r6
 8008010:	461a      	mov	r2, r3
 8008012:	4623      	mov	r3, r4
 8008014:	f7f8 fe38 	bl	8000c88 <__aeabi_uldivmod>
 8008018:	4603      	mov	r3, r0
 800801a:	460c      	mov	r4, r1
 800801c:	461a      	mov	r2, r3
 800801e:	4b8b      	ldr	r3, [pc, #556]	; (800824c <UART_SetConfig+0x384>)
 8008020:	fba3 1302 	umull	r1, r3, r3, r2
 8008024:	095b      	lsrs	r3, r3, #5
 8008026:	2164      	movs	r1, #100	; 0x64
 8008028:	fb01 f303 	mul.w	r3, r1, r3
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	00db      	lsls	r3, r3, #3
 8008030:	3332      	adds	r3, #50	; 0x32
 8008032:	4a86      	ldr	r2, [pc, #536]	; (800824c <UART_SetConfig+0x384>)
 8008034:	fba2 2303 	umull	r2, r3, r2, r3
 8008038:	095b      	lsrs	r3, r3, #5
 800803a:	005b      	lsls	r3, r3, #1
 800803c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008040:	4498      	add	r8, r3
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	461d      	mov	r5, r3
 8008046:	f04f 0600 	mov.w	r6, #0
 800804a:	46a9      	mov	r9, r5
 800804c:	46b2      	mov	sl, r6
 800804e:	eb19 0309 	adds.w	r3, r9, r9
 8008052:	eb4a 040a 	adc.w	r4, sl, sl
 8008056:	4699      	mov	r9, r3
 8008058:	46a2      	mov	sl, r4
 800805a:	eb19 0905 	adds.w	r9, r9, r5
 800805e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008062:	f04f 0100 	mov.w	r1, #0
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800806e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008072:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008076:	4689      	mov	r9, r1
 8008078:	4692      	mov	sl, r2
 800807a:	eb19 0005 	adds.w	r0, r9, r5
 800807e:	eb4a 0106 	adc.w	r1, sl, r6
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	461d      	mov	r5, r3
 8008088:	f04f 0600 	mov.w	r6, #0
 800808c:	196b      	adds	r3, r5, r5
 800808e:	eb46 0406 	adc.w	r4, r6, r6
 8008092:	461a      	mov	r2, r3
 8008094:	4623      	mov	r3, r4
 8008096:	f7f8 fdf7 	bl	8000c88 <__aeabi_uldivmod>
 800809a:	4603      	mov	r3, r0
 800809c:	460c      	mov	r4, r1
 800809e:	461a      	mov	r2, r3
 80080a0:	4b6a      	ldr	r3, [pc, #424]	; (800824c <UART_SetConfig+0x384>)
 80080a2:	fba3 1302 	umull	r1, r3, r3, r2
 80080a6:	095b      	lsrs	r3, r3, #5
 80080a8:	2164      	movs	r1, #100	; 0x64
 80080aa:	fb01 f303 	mul.w	r3, r1, r3
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	00db      	lsls	r3, r3, #3
 80080b2:	3332      	adds	r3, #50	; 0x32
 80080b4:	4a65      	ldr	r2, [pc, #404]	; (800824c <UART_SetConfig+0x384>)
 80080b6:	fba2 2303 	umull	r2, r3, r2, r3
 80080ba:	095b      	lsrs	r3, r3, #5
 80080bc:	f003 0207 	and.w	r2, r3, #7
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4442      	add	r2, r8
 80080c6:	609a      	str	r2, [r3, #8]
 80080c8:	e26f      	b.n	80085aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080ca:	f7fd f835 	bl	8005138 <HAL_RCC_GetPCLK1Freq>
 80080ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	461d      	mov	r5, r3
 80080d4:	f04f 0600 	mov.w	r6, #0
 80080d8:	46a8      	mov	r8, r5
 80080da:	46b1      	mov	r9, r6
 80080dc:	eb18 0308 	adds.w	r3, r8, r8
 80080e0:	eb49 0409 	adc.w	r4, r9, r9
 80080e4:	4698      	mov	r8, r3
 80080e6:	46a1      	mov	r9, r4
 80080e8:	eb18 0805 	adds.w	r8, r8, r5
 80080ec:	eb49 0906 	adc.w	r9, r9, r6
 80080f0:	f04f 0100 	mov.w	r1, #0
 80080f4:	f04f 0200 	mov.w	r2, #0
 80080f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80080fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008100:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008104:	4688      	mov	r8, r1
 8008106:	4691      	mov	r9, r2
 8008108:	eb18 0005 	adds.w	r0, r8, r5
 800810c:	eb49 0106 	adc.w	r1, r9, r6
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	461d      	mov	r5, r3
 8008116:	f04f 0600 	mov.w	r6, #0
 800811a:	196b      	adds	r3, r5, r5
 800811c:	eb46 0406 	adc.w	r4, r6, r6
 8008120:	461a      	mov	r2, r3
 8008122:	4623      	mov	r3, r4
 8008124:	f7f8 fdb0 	bl	8000c88 <__aeabi_uldivmod>
 8008128:	4603      	mov	r3, r0
 800812a:	460c      	mov	r4, r1
 800812c:	461a      	mov	r2, r3
 800812e:	4b47      	ldr	r3, [pc, #284]	; (800824c <UART_SetConfig+0x384>)
 8008130:	fba3 2302 	umull	r2, r3, r3, r2
 8008134:	095b      	lsrs	r3, r3, #5
 8008136:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	461d      	mov	r5, r3
 800813e:	f04f 0600 	mov.w	r6, #0
 8008142:	46a9      	mov	r9, r5
 8008144:	46b2      	mov	sl, r6
 8008146:	eb19 0309 	adds.w	r3, r9, r9
 800814a:	eb4a 040a 	adc.w	r4, sl, sl
 800814e:	4699      	mov	r9, r3
 8008150:	46a2      	mov	sl, r4
 8008152:	eb19 0905 	adds.w	r9, r9, r5
 8008156:	eb4a 0a06 	adc.w	sl, sl, r6
 800815a:	f04f 0100 	mov.w	r1, #0
 800815e:	f04f 0200 	mov.w	r2, #0
 8008162:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008166:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800816a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800816e:	4689      	mov	r9, r1
 8008170:	4692      	mov	sl, r2
 8008172:	eb19 0005 	adds.w	r0, r9, r5
 8008176:	eb4a 0106 	adc.w	r1, sl, r6
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	461d      	mov	r5, r3
 8008180:	f04f 0600 	mov.w	r6, #0
 8008184:	196b      	adds	r3, r5, r5
 8008186:	eb46 0406 	adc.w	r4, r6, r6
 800818a:	461a      	mov	r2, r3
 800818c:	4623      	mov	r3, r4
 800818e:	f7f8 fd7b 	bl	8000c88 <__aeabi_uldivmod>
 8008192:	4603      	mov	r3, r0
 8008194:	460c      	mov	r4, r1
 8008196:	461a      	mov	r2, r3
 8008198:	4b2c      	ldr	r3, [pc, #176]	; (800824c <UART_SetConfig+0x384>)
 800819a:	fba3 1302 	umull	r1, r3, r3, r2
 800819e:	095b      	lsrs	r3, r3, #5
 80081a0:	2164      	movs	r1, #100	; 0x64
 80081a2:	fb01 f303 	mul.w	r3, r1, r3
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	00db      	lsls	r3, r3, #3
 80081aa:	3332      	adds	r3, #50	; 0x32
 80081ac:	4a27      	ldr	r2, [pc, #156]	; (800824c <UART_SetConfig+0x384>)
 80081ae:	fba2 2303 	umull	r2, r3, r2, r3
 80081b2:	095b      	lsrs	r3, r3, #5
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081ba:	4498      	add	r8, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	461d      	mov	r5, r3
 80081c0:	f04f 0600 	mov.w	r6, #0
 80081c4:	46a9      	mov	r9, r5
 80081c6:	46b2      	mov	sl, r6
 80081c8:	eb19 0309 	adds.w	r3, r9, r9
 80081cc:	eb4a 040a 	adc.w	r4, sl, sl
 80081d0:	4699      	mov	r9, r3
 80081d2:	46a2      	mov	sl, r4
 80081d4:	eb19 0905 	adds.w	r9, r9, r5
 80081d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80081dc:	f04f 0100 	mov.w	r1, #0
 80081e0:	f04f 0200 	mov.w	r2, #0
 80081e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80081ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80081f0:	4689      	mov	r9, r1
 80081f2:	4692      	mov	sl, r2
 80081f4:	eb19 0005 	adds.w	r0, r9, r5
 80081f8:	eb4a 0106 	adc.w	r1, sl, r6
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	461d      	mov	r5, r3
 8008202:	f04f 0600 	mov.w	r6, #0
 8008206:	196b      	adds	r3, r5, r5
 8008208:	eb46 0406 	adc.w	r4, r6, r6
 800820c:	461a      	mov	r2, r3
 800820e:	4623      	mov	r3, r4
 8008210:	f7f8 fd3a 	bl	8000c88 <__aeabi_uldivmod>
 8008214:	4603      	mov	r3, r0
 8008216:	460c      	mov	r4, r1
 8008218:	461a      	mov	r2, r3
 800821a:	4b0c      	ldr	r3, [pc, #48]	; (800824c <UART_SetConfig+0x384>)
 800821c:	fba3 1302 	umull	r1, r3, r3, r2
 8008220:	095b      	lsrs	r3, r3, #5
 8008222:	2164      	movs	r1, #100	; 0x64
 8008224:	fb01 f303 	mul.w	r3, r1, r3
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	00db      	lsls	r3, r3, #3
 800822c:	3332      	adds	r3, #50	; 0x32
 800822e:	4a07      	ldr	r2, [pc, #28]	; (800824c <UART_SetConfig+0x384>)
 8008230:	fba2 2303 	umull	r2, r3, r2, r3
 8008234:	095b      	lsrs	r3, r3, #5
 8008236:	f003 0207 	and.w	r2, r3, #7
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4442      	add	r2, r8
 8008240:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008242:	e1b2      	b.n	80085aa <UART_SetConfig+0x6e2>
 8008244:	40011000 	.word	0x40011000
 8008248:	40011400 	.word	0x40011400
 800824c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4ad7      	ldr	r2, [pc, #860]	; (80085b4 <UART_SetConfig+0x6ec>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d005      	beq.n	8008266 <UART_SetConfig+0x39e>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4ad6      	ldr	r2, [pc, #856]	; (80085b8 <UART_SetConfig+0x6f0>)
 8008260:	4293      	cmp	r3, r2
 8008262:	f040 80d1 	bne.w	8008408 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008266:	f7fc ff7b 	bl	8005160 <HAL_RCC_GetPCLK2Freq>
 800826a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	469a      	mov	sl, r3
 8008270:	f04f 0b00 	mov.w	fp, #0
 8008274:	46d0      	mov	r8, sl
 8008276:	46d9      	mov	r9, fp
 8008278:	eb18 0308 	adds.w	r3, r8, r8
 800827c:	eb49 0409 	adc.w	r4, r9, r9
 8008280:	4698      	mov	r8, r3
 8008282:	46a1      	mov	r9, r4
 8008284:	eb18 080a 	adds.w	r8, r8, sl
 8008288:	eb49 090b 	adc.w	r9, r9, fp
 800828c:	f04f 0100 	mov.w	r1, #0
 8008290:	f04f 0200 	mov.w	r2, #0
 8008294:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008298:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800829c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80082a0:	4688      	mov	r8, r1
 80082a2:	4691      	mov	r9, r2
 80082a4:	eb1a 0508 	adds.w	r5, sl, r8
 80082a8:	eb4b 0609 	adc.w	r6, fp, r9
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	4619      	mov	r1, r3
 80082b2:	f04f 0200 	mov.w	r2, #0
 80082b6:	f04f 0300 	mov.w	r3, #0
 80082ba:	f04f 0400 	mov.w	r4, #0
 80082be:	0094      	lsls	r4, r2, #2
 80082c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80082c4:	008b      	lsls	r3, r1, #2
 80082c6:	461a      	mov	r2, r3
 80082c8:	4623      	mov	r3, r4
 80082ca:	4628      	mov	r0, r5
 80082cc:	4631      	mov	r1, r6
 80082ce:	f7f8 fcdb 	bl	8000c88 <__aeabi_uldivmod>
 80082d2:	4603      	mov	r3, r0
 80082d4:	460c      	mov	r4, r1
 80082d6:	461a      	mov	r2, r3
 80082d8:	4bb8      	ldr	r3, [pc, #736]	; (80085bc <UART_SetConfig+0x6f4>)
 80082da:	fba3 2302 	umull	r2, r3, r3, r2
 80082de:	095b      	lsrs	r3, r3, #5
 80082e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	469b      	mov	fp, r3
 80082e8:	f04f 0c00 	mov.w	ip, #0
 80082ec:	46d9      	mov	r9, fp
 80082ee:	46e2      	mov	sl, ip
 80082f0:	eb19 0309 	adds.w	r3, r9, r9
 80082f4:	eb4a 040a 	adc.w	r4, sl, sl
 80082f8:	4699      	mov	r9, r3
 80082fa:	46a2      	mov	sl, r4
 80082fc:	eb19 090b 	adds.w	r9, r9, fp
 8008300:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008304:	f04f 0100 	mov.w	r1, #0
 8008308:	f04f 0200 	mov.w	r2, #0
 800830c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008310:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008314:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008318:	4689      	mov	r9, r1
 800831a:	4692      	mov	sl, r2
 800831c:	eb1b 0509 	adds.w	r5, fp, r9
 8008320:	eb4c 060a 	adc.w	r6, ip, sl
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	4619      	mov	r1, r3
 800832a:	f04f 0200 	mov.w	r2, #0
 800832e:	f04f 0300 	mov.w	r3, #0
 8008332:	f04f 0400 	mov.w	r4, #0
 8008336:	0094      	lsls	r4, r2, #2
 8008338:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800833c:	008b      	lsls	r3, r1, #2
 800833e:	461a      	mov	r2, r3
 8008340:	4623      	mov	r3, r4
 8008342:	4628      	mov	r0, r5
 8008344:	4631      	mov	r1, r6
 8008346:	f7f8 fc9f 	bl	8000c88 <__aeabi_uldivmod>
 800834a:	4603      	mov	r3, r0
 800834c:	460c      	mov	r4, r1
 800834e:	461a      	mov	r2, r3
 8008350:	4b9a      	ldr	r3, [pc, #616]	; (80085bc <UART_SetConfig+0x6f4>)
 8008352:	fba3 1302 	umull	r1, r3, r3, r2
 8008356:	095b      	lsrs	r3, r3, #5
 8008358:	2164      	movs	r1, #100	; 0x64
 800835a:	fb01 f303 	mul.w	r3, r1, r3
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	011b      	lsls	r3, r3, #4
 8008362:	3332      	adds	r3, #50	; 0x32
 8008364:	4a95      	ldr	r2, [pc, #596]	; (80085bc <UART_SetConfig+0x6f4>)
 8008366:	fba2 2303 	umull	r2, r3, r2, r3
 800836a:	095b      	lsrs	r3, r3, #5
 800836c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008370:	4498      	add	r8, r3
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	469b      	mov	fp, r3
 8008376:	f04f 0c00 	mov.w	ip, #0
 800837a:	46d9      	mov	r9, fp
 800837c:	46e2      	mov	sl, ip
 800837e:	eb19 0309 	adds.w	r3, r9, r9
 8008382:	eb4a 040a 	adc.w	r4, sl, sl
 8008386:	4699      	mov	r9, r3
 8008388:	46a2      	mov	sl, r4
 800838a:	eb19 090b 	adds.w	r9, r9, fp
 800838e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008392:	f04f 0100 	mov.w	r1, #0
 8008396:	f04f 0200 	mov.w	r2, #0
 800839a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800839e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083a6:	4689      	mov	r9, r1
 80083a8:	4692      	mov	sl, r2
 80083aa:	eb1b 0509 	adds.w	r5, fp, r9
 80083ae:	eb4c 060a 	adc.w	r6, ip, sl
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	4619      	mov	r1, r3
 80083b8:	f04f 0200 	mov.w	r2, #0
 80083bc:	f04f 0300 	mov.w	r3, #0
 80083c0:	f04f 0400 	mov.w	r4, #0
 80083c4:	0094      	lsls	r4, r2, #2
 80083c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80083ca:	008b      	lsls	r3, r1, #2
 80083cc:	461a      	mov	r2, r3
 80083ce:	4623      	mov	r3, r4
 80083d0:	4628      	mov	r0, r5
 80083d2:	4631      	mov	r1, r6
 80083d4:	f7f8 fc58 	bl	8000c88 <__aeabi_uldivmod>
 80083d8:	4603      	mov	r3, r0
 80083da:	460c      	mov	r4, r1
 80083dc:	461a      	mov	r2, r3
 80083de:	4b77      	ldr	r3, [pc, #476]	; (80085bc <UART_SetConfig+0x6f4>)
 80083e0:	fba3 1302 	umull	r1, r3, r3, r2
 80083e4:	095b      	lsrs	r3, r3, #5
 80083e6:	2164      	movs	r1, #100	; 0x64
 80083e8:	fb01 f303 	mul.w	r3, r1, r3
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	011b      	lsls	r3, r3, #4
 80083f0:	3332      	adds	r3, #50	; 0x32
 80083f2:	4a72      	ldr	r2, [pc, #456]	; (80085bc <UART_SetConfig+0x6f4>)
 80083f4:	fba2 2303 	umull	r2, r3, r2, r3
 80083f8:	095b      	lsrs	r3, r3, #5
 80083fa:	f003 020f 	and.w	r2, r3, #15
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4442      	add	r2, r8
 8008404:	609a      	str	r2, [r3, #8]
 8008406:	e0d0      	b.n	80085aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008408:	f7fc fe96 	bl	8005138 <HAL_RCC_GetPCLK1Freq>
 800840c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	469a      	mov	sl, r3
 8008412:	f04f 0b00 	mov.w	fp, #0
 8008416:	46d0      	mov	r8, sl
 8008418:	46d9      	mov	r9, fp
 800841a:	eb18 0308 	adds.w	r3, r8, r8
 800841e:	eb49 0409 	adc.w	r4, r9, r9
 8008422:	4698      	mov	r8, r3
 8008424:	46a1      	mov	r9, r4
 8008426:	eb18 080a 	adds.w	r8, r8, sl
 800842a:	eb49 090b 	adc.w	r9, r9, fp
 800842e:	f04f 0100 	mov.w	r1, #0
 8008432:	f04f 0200 	mov.w	r2, #0
 8008436:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800843a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800843e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008442:	4688      	mov	r8, r1
 8008444:	4691      	mov	r9, r2
 8008446:	eb1a 0508 	adds.w	r5, sl, r8
 800844a:	eb4b 0609 	adc.w	r6, fp, r9
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	4619      	mov	r1, r3
 8008454:	f04f 0200 	mov.w	r2, #0
 8008458:	f04f 0300 	mov.w	r3, #0
 800845c:	f04f 0400 	mov.w	r4, #0
 8008460:	0094      	lsls	r4, r2, #2
 8008462:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008466:	008b      	lsls	r3, r1, #2
 8008468:	461a      	mov	r2, r3
 800846a:	4623      	mov	r3, r4
 800846c:	4628      	mov	r0, r5
 800846e:	4631      	mov	r1, r6
 8008470:	f7f8 fc0a 	bl	8000c88 <__aeabi_uldivmod>
 8008474:	4603      	mov	r3, r0
 8008476:	460c      	mov	r4, r1
 8008478:	461a      	mov	r2, r3
 800847a:	4b50      	ldr	r3, [pc, #320]	; (80085bc <UART_SetConfig+0x6f4>)
 800847c:	fba3 2302 	umull	r2, r3, r3, r2
 8008480:	095b      	lsrs	r3, r3, #5
 8008482:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	469b      	mov	fp, r3
 800848a:	f04f 0c00 	mov.w	ip, #0
 800848e:	46d9      	mov	r9, fp
 8008490:	46e2      	mov	sl, ip
 8008492:	eb19 0309 	adds.w	r3, r9, r9
 8008496:	eb4a 040a 	adc.w	r4, sl, sl
 800849a:	4699      	mov	r9, r3
 800849c:	46a2      	mov	sl, r4
 800849e:	eb19 090b 	adds.w	r9, r9, fp
 80084a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80084a6:	f04f 0100 	mov.w	r1, #0
 80084aa:	f04f 0200 	mov.w	r2, #0
 80084ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084ba:	4689      	mov	r9, r1
 80084bc:	4692      	mov	sl, r2
 80084be:	eb1b 0509 	adds.w	r5, fp, r9
 80084c2:	eb4c 060a 	adc.w	r6, ip, sl
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	4619      	mov	r1, r3
 80084cc:	f04f 0200 	mov.w	r2, #0
 80084d0:	f04f 0300 	mov.w	r3, #0
 80084d4:	f04f 0400 	mov.w	r4, #0
 80084d8:	0094      	lsls	r4, r2, #2
 80084da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80084de:	008b      	lsls	r3, r1, #2
 80084e0:	461a      	mov	r2, r3
 80084e2:	4623      	mov	r3, r4
 80084e4:	4628      	mov	r0, r5
 80084e6:	4631      	mov	r1, r6
 80084e8:	f7f8 fbce 	bl	8000c88 <__aeabi_uldivmod>
 80084ec:	4603      	mov	r3, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	461a      	mov	r2, r3
 80084f2:	4b32      	ldr	r3, [pc, #200]	; (80085bc <UART_SetConfig+0x6f4>)
 80084f4:	fba3 1302 	umull	r1, r3, r3, r2
 80084f8:	095b      	lsrs	r3, r3, #5
 80084fa:	2164      	movs	r1, #100	; 0x64
 80084fc:	fb01 f303 	mul.w	r3, r1, r3
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	3332      	adds	r3, #50	; 0x32
 8008506:	4a2d      	ldr	r2, [pc, #180]	; (80085bc <UART_SetConfig+0x6f4>)
 8008508:	fba2 2303 	umull	r2, r3, r2, r3
 800850c:	095b      	lsrs	r3, r3, #5
 800850e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008512:	4498      	add	r8, r3
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	469b      	mov	fp, r3
 8008518:	f04f 0c00 	mov.w	ip, #0
 800851c:	46d9      	mov	r9, fp
 800851e:	46e2      	mov	sl, ip
 8008520:	eb19 0309 	adds.w	r3, r9, r9
 8008524:	eb4a 040a 	adc.w	r4, sl, sl
 8008528:	4699      	mov	r9, r3
 800852a:	46a2      	mov	sl, r4
 800852c:	eb19 090b 	adds.w	r9, r9, fp
 8008530:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008534:	f04f 0100 	mov.w	r1, #0
 8008538:	f04f 0200 	mov.w	r2, #0
 800853c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008540:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008544:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008548:	4689      	mov	r9, r1
 800854a:	4692      	mov	sl, r2
 800854c:	eb1b 0509 	adds.w	r5, fp, r9
 8008550:	eb4c 060a 	adc.w	r6, ip, sl
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	4619      	mov	r1, r3
 800855a:	f04f 0200 	mov.w	r2, #0
 800855e:	f04f 0300 	mov.w	r3, #0
 8008562:	f04f 0400 	mov.w	r4, #0
 8008566:	0094      	lsls	r4, r2, #2
 8008568:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800856c:	008b      	lsls	r3, r1, #2
 800856e:	461a      	mov	r2, r3
 8008570:	4623      	mov	r3, r4
 8008572:	4628      	mov	r0, r5
 8008574:	4631      	mov	r1, r6
 8008576:	f7f8 fb87 	bl	8000c88 <__aeabi_uldivmod>
 800857a:	4603      	mov	r3, r0
 800857c:	460c      	mov	r4, r1
 800857e:	461a      	mov	r2, r3
 8008580:	4b0e      	ldr	r3, [pc, #56]	; (80085bc <UART_SetConfig+0x6f4>)
 8008582:	fba3 1302 	umull	r1, r3, r3, r2
 8008586:	095b      	lsrs	r3, r3, #5
 8008588:	2164      	movs	r1, #100	; 0x64
 800858a:	fb01 f303 	mul.w	r3, r1, r3
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	011b      	lsls	r3, r3, #4
 8008592:	3332      	adds	r3, #50	; 0x32
 8008594:	4a09      	ldr	r2, [pc, #36]	; (80085bc <UART_SetConfig+0x6f4>)
 8008596:	fba2 2303 	umull	r2, r3, r2, r3
 800859a:	095b      	lsrs	r3, r3, #5
 800859c:	f003 020f 	and.w	r2, r3, #15
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4442      	add	r2, r8
 80085a6:	609a      	str	r2, [r3, #8]
}
 80085a8:	e7ff      	b.n	80085aa <UART_SetConfig+0x6e2>
 80085aa:	bf00      	nop
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b4:	40011000 	.word	0x40011000
 80085b8:	40011400 	.word	0x40011400
 80085bc:	51eb851f 	.word	0x51eb851f

080085c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085c0:	b084      	sub	sp, #16
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	f107 001c 	add.w	r0, r7, #28
 80085ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d122      	bne.n	800861e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80085ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008602:	2b01      	cmp	r3, #1
 8008604:	d105      	bne.n	8008612 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa5c 	bl	8008ad0 <USB_CoreReset>
 8008618:	4603      	mov	r3, r0
 800861a:	73fb      	strb	r3, [r7, #15]
 800861c:	e01a      	b.n	8008654 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fa50 	bl	8008ad0 <USB_CoreReset>
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008636:	2b00      	cmp	r3, #0
 8008638:	d106      	bne.n	8008648 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	639a      	str	r2, [r3, #56]	; 0x38
 8008646:	e005      	b.n	8008654 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	2b01      	cmp	r3, #1
 8008658:	d10b      	bne.n	8008672 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f043 0206 	orr.w	r2, r3, #6
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f043 0220 	orr.w	r2, r3, #32
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008672:	7bfb      	ldrb	r3, [r7, #15]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800867e:	b004      	add	sp, #16
 8008680:	4770      	bx	lr

08008682 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008682:	b480      	push	{r7}
 8008684:	b083      	sub	sp, #12
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f023 0201 	bic.w	r2, r3, #1
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086bc:	78fb      	ldrb	r3, [r7, #3]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d106      	bne.n	80086d0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	60da      	str	r2, [r3, #12]
 80086ce:	e00b      	b.n	80086e8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d106      	bne.n	80086e4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	60da      	str	r2, [r3, #12]
 80086e2:	e001      	b.n	80086e8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e003      	b.n	80086f0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80086e8:	2032      	movs	r0, #50	; 0x32
 80086ea:	f7f8 fcbf 	bl	800106c <HAL_Delay>

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086f8:	b084      	sub	sp, #16
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b086      	sub	sp, #24
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008712:	2300      	movs	r3, #0
 8008714:	613b      	str	r3, [r7, #16]
 8008716:	e009      	b.n	800872c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	3340      	adds	r3, #64	; 0x40
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	2200      	movs	r2, #0
 8008724:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	3301      	adds	r3, #1
 800872a:	613b      	str	r3, [r7, #16]
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	2b0e      	cmp	r3, #14
 8008730:	d9f2      	bls.n	8008718 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008734:	2b00      	cmp	r3, #0
 8008736:	d112      	bne.n	800875e <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008754:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	639a      	str	r2, [r3, #56]	; 0x38
 800875c:	e00b      	b.n	8008776 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800877c:	461a      	mov	r2, r3
 800877e:	2300      	movs	r3, #0
 8008780:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008788:	4619      	mov	r1, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008790:	461a      	mov	r2, r3
 8008792:	680b      	ldr	r3, [r1, #0]
 8008794:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	2b01      	cmp	r3, #1
 800879a:	d10c      	bne.n	80087b6 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800879c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d104      	bne.n	80087ac <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087a2:	2100      	movs	r1, #0
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f961 	bl	8008a6c <USB_SetDevSpeed>
 80087aa:	e008      	b.n	80087be <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80087ac:	2101      	movs	r1, #1
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f95c 	bl	8008a6c <USB_SetDevSpeed>
 80087b4:	e003      	b.n	80087be <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087b6:	2103      	movs	r1, #3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f957 	bl	8008a6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087be:	2110      	movs	r1, #16
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f90b 	bl	80089dc <USB_FlushTxFifo>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d001      	beq.n	80087d0 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f929 	bl	8008a28 <USB_FlushRxFifo>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e6:	461a      	mov	r2, r3
 80087e8:	2300      	movs	r3, #0
 80087ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f2:	461a      	mov	r2, r3
 80087f4:	2300      	movs	r3, #0
 80087f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087fe:	461a      	mov	r2, r3
 8008800:	2300      	movs	r3, #0
 8008802:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008804:	2300      	movs	r3, #0
 8008806:	613b      	str	r3, [r7, #16]
 8008808:	e043      	b.n	8008892 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	015a      	lsls	r2, r3, #5
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	4413      	add	r3, r2
 8008812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800881c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008820:	d118      	bne.n	8008854 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10a      	bne.n	800883e <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008834:	461a      	mov	r2, r3
 8008836:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	e013      	b.n	8008866 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4413      	add	r3, r2
 8008846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884a:	461a      	mov	r2, r3
 800884c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008850:	6013      	str	r3, [r2, #0]
 8008852:	e008      	b.n	8008866 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4413      	add	r3, r2
 800885c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008860:	461a      	mov	r2, r3
 8008862:	2300      	movs	r3, #0
 8008864:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	4413      	add	r3, r2
 800886e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008872:	461a      	mov	r2, r3
 8008874:	2300      	movs	r3, #0
 8008876:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4413      	add	r3, r2
 8008880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008884:	461a      	mov	r2, r3
 8008886:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800888a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	3301      	adds	r3, #1
 8008890:	613b      	str	r3, [r7, #16]
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	429a      	cmp	r2, r3
 8008898:	d3b7      	bcc.n	800880a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800889a:	2300      	movs	r3, #0
 800889c:	613b      	str	r3, [r7, #16]
 800889e:	e043      	b.n	8008928 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	015a      	lsls	r2, r3, #5
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4413      	add	r3, r2
 80088a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088b6:	d118      	bne.n	80088ea <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10a      	bne.n	80088d4 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ca:	461a      	mov	r2, r3
 80088cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088d0:	6013      	str	r3, [r2, #0]
 80088d2:	e013      	b.n	80088fc <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e0:	461a      	mov	r2, r3
 80088e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	e008      	b.n	80088fc <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f6:	461a      	mov	r2, r3
 80088f8:	2300      	movs	r3, #0
 80088fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008908:	461a      	mov	r2, r3
 800890a:	2300      	movs	r3, #0
 800890c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891a:	461a      	mov	r2, r3
 800891c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008920:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	3301      	adds	r3, #1
 8008926:	613b      	str	r3, [r7, #16]
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	429a      	cmp	r2, r3
 800892e:	d3b7      	bcc.n	80088a0 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800893e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008942:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8008944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008946:	2b01      	cmp	r3, #1
 8008948:	d111      	bne.n	800896e <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008950:	461a      	mov	r2, r3
 8008952:	4b20      	ldr	r3, [pc, #128]	; (80089d4 <USB_DevInit+0x2dc>)
 8008954:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800895c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008968:	f043 0303 	orr.w	r3, r3, #3
 800896c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800897a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	2b00      	cmp	r3, #0
 8008980:	d105      	bne.n	800898e <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	f043 0210 	orr.w	r2, r3, #16
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	699a      	ldr	r2, [r3, #24]
 8008992:	4b11      	ldr	r3, [pc, #68]	; (80089d8 <USB_DevInit+0x2e0>)
 8008994:	4313      	orrs	r3, r2
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800899a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800899c:	2b00      	cmp	r3, #0
 800899e:	d005      	beq.n	80089ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	f043 0208 	orr.w	r2, r3, #8
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80089ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d107      	bne.n	80089c2 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089ba:	f043 0304 	orr.w	r3, r3, #4
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80089c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3718      	adds	r7, #24
 80089c8:	46bd      	mov	sp, r7
 80089ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089ce:	b004      	add	sp, #16
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	00800100 	.word	0x00800100
 80089d8:	803c3800 	.word	0x803c3800

080089dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	019b      	lsls	r3, r3, #6
 80089ee:	f043 0220 	orr.w	r2, r3, #32
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3301      	adds	r3, #1
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4a09      	ldr	r2, [pc, #36]	; (8008a24 <USB_FlushTxFifo+0x48>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d901      	bls.n	8008a08 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e006      	b.n	8008a16 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	f003 0320 	and.w	r3, r3, #32
 8008a10:	2b20      	cmp	r3, #32
 8008a12:	d0f0      	beq.n	80089f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	00030d40 	.word	0x00030d40

08008a28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008a30:	2300      	movs	r3, #0
 8008a32:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2210      	movs	r2, #16
 8008a38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	4a09      	ldr	r2, [pc, #36]	; (8008a68 <USB_FlushRxFifo+0x40>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d901      	bls.n	8008a4c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e006      	b.n	8008a5a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	f003 0310 	and.w	r3, r3, #16
 8008a54:	2b10      	cmp	r3, #16
 8008a56:	d0f0      	beq.n	8008a3a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	00030d40 	.word	0x00030d40

08008a6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	78fb      	ldrb	r3, [r7, #3]
 8008a86:	68f9      	ldr	r1, [r7, #12]
 8008a88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ab8:	f043 0302 	orr.w	r3, r3, #2
 8008abc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008abe:	2003      	movs	r0, #3
 8008ac0:	f7f8 fad4 	bl	800106c <HAL_Delay>

  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
	...

08008ad0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	60fb      	str	r3, [r7, #12]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	4a13      	ldr	r2, [pc, #76]	; (8008b34 <USB_CoreReset+0x64>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d901      	bls.n	8008aee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e01b      	b.n	8008b26 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	daf2      	bge.n	8008adc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008af6:	2300      	movs	r3, #0
 8008af8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	f043 0201 	orr.w	r2, r3, #1
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	60fb      	str	r3, [r7, #12]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4a09      	ldr	r2, [pc, #36]	; (8008b34 <USB_CoreReset+0x64>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d901      	bls.n	8008b18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e006      	b.n	8008b26 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d0f0      	beq.n	8008b06 <USB_CoreReset+0x36>

  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	00030d40 	.word	0x00030d40

08008b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b3c:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
 8008b40:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008b42:	f7f8 fa21 	bl	8000f88 <HAL_Init>
  // todo transfer init part of code here

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008b46:	f001 f9f9 	bl	8009f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008b4a:	f002 fa0b 	bl	800af64 <MX_GPIO_Init>
  MX_DMA_Init();
 8008b4e:	f002 f9c3 	bl	800aed8 <MX_DMA_Init>
  MX_TIM9_Init();
 8008b52:	f002 f851 	bl	800abf8 <MX_TIM9_Init>
  MX_SPI2_Init();
 8008b56:	f001 fd83 	bl	800a660 <MX_SPI2_Init>
  MX_ADC1_Init();
 8008b5a:	f001 fa73 	bl	800a044 <MX_ADC1_Init>
  MX_ADC2_Init();
 8008b5e:	f001 fb27 	bl	800a1b0 <MX_ADC2_Init>
  MX_CAN1_Init();
 8008b62:	f001 fcc5 	bl	800a4f0 <MX_CAN1_Init>
  MX_I2C1_Init();
 8008b66:	f001 fcf9 	bl	800a55c <MX_I2C1_Init>
  MX_I2C2_Init();
 8008b6a:	f001 fd25 	bl	800a5b8 <MX_I2C2_Init>
  MX_TIM1_Init();
 8008b6e:	f001 fdaf 	bl	800a6d0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8008b72:	f002 f959 	bl	800ae28 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 8008b76:	f001 ffe7 	bl	800ab48 <MX_TIM8_Init>
  MX_TIM13_Init();
 8008b7a:	f002 f90f 	bl	800ad9c <MX_TIM13_Init>
  MX_TIM12_Init();
 8008b7e:	f002 f8ad 	bl	800acdc <MX_TIM12_Init>
  MX_TIM2_Init();
 8008b82:	f001 fe77 	bl	800a874 <MX_TIM2_Init>
  MX_ADC3_Init();
 8008b86:	f001 fbe3 	bl	800a350 <MX_ADC3_Init>
  MX_USB_OTG_FS_PCD_Init();
 8008b8a:	f002 f977 	bl	800ae7c <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8008b8e:	f001 fd41 	bl	800a614 <MX_RTC_Init>
  MX_TIM6_Init();
 8008b92:	f001 ffa3 	bl	800aadc <MX_TIM6_Init>
  MX_TIM3_Init();
 8008b96:	f001 fedf 	bl	800a958 <MX_TIM3_Init>
  MX_TIM5_Init();
 8008b9a:	f001 ff51 	bl	800aa40 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  calc_lookup(lookup);
 8008b9e:	4861      	ldr	r0, [pc, #388]	; (8008d24 <main+0x1ec>)
 8008ba0:	f002 fd12 	bl	800b5c8 <calc_lookup>

	uint8_t buf[400];
	uint8_t buf_add[200];
	//uint8_t plot[300];

	char ch='.';
 8008ba4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008ba8:	222e      	movs	r2, #46	; 0x2e
 8008baa:	701a      	strb	r2, [r3, #0]
	int16_t accel16;
	uint8_t accel8l;
	uint8_t accel8h;

  // --- SET STATUS LEDS
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8008bac:	2100      	movs	r1, #0
 8008bae:	485e      	ldr	r0, [pc, #376]	; (8008d28 <main+0x1f0>)
 8008bb0:	f7fd fc40 	bl	8006434 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2);
 8008bb4:	2104      	movs	r1, #4
 8008bb6:	485c      	ldr	r0, [pc, #368]	; (8008d28 <main+0x1f0>)
 8008bb8:	f7fd fbc8 	bl	800634c <HAL_TIM_OC_Start>

  HAL_TIM_OC_Start(&htim12, TIM_CHANNEL_1);
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	485b      	ldr	r0, [pc, #364]	; (8008d2c <main+0x1f4>)
 8008bc0:	f7fd fbc4 	bl	800634c <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	485a      	ldr	r0, [pc, #360]	; (8008d30 <main+0x1f8>)
 8008bc8:	f7fd fbc0 	bl	800634c <HAL_TIM_OC_Start>

  // --- ENABLE DRV
  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1); //todo maybe redundant since its also done below
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008bd2:	4858      	ldr	r0, [pc, #352]	; (8008d34 <main+0x1fc>)
 8008bd4:	f7fa fd7a 	bl	80036cc <HAL_GPIO_WritePin>


  SCB->CPACR |= 0xf00000;
 8008bd8:	4b57      	ldr	r3, [pc, #348]	; (8008d38 <main+0x200>)
 8008bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bde:	4a56      	ldr	r2, [pc, #344]	; (8008d38 <main+0x200>)
 8008be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  int i=0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
	uint32_t i_fast = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
	uint32_t i_slow = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
	uint32_t fast2slow = 100;
 8008bfa:	2364      	movs	r3, #100	; 0x64
 8008bfc:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0

	int blink_duration = 100;
 8008c00:	2364      	movs	r3, #100	; 0x64
 8008c02:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
  //  HAL_Delay(2);


	// --- MOTOR DRIVER ----------------------------------------------------
	//EN_GATE
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008c06:	2100      	movs	r1, #0
 8008c08:	484c      	ldr	r0, [pc, #304]	; (8008d3c <main+0x204>)
 8008c0a:	f7fd fc13 	bl	8006434 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8008c0e:	2100      	movs	r1, #0
 8008c10:	484a      	ldr	r0, [pc, #296]	; (8008d3c <main+0x204>)
 8008c12:	f7fe fd44 	bl	800769e <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8008c16:	2104      	movs	r1, #4
 8008c18:	4848      	ldr	r0, [pc, #288]	; (8008d3c <main+0x204>)
 8008c1a:	f7fd fc0b 	bl	8006434 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8008c1e:	2104      	movs	r1, #4
 8008c20:	4846      	ldr	r0, [pc, #280]	; (8008d3c <main+0x204>)
 8008c22:	f7fe fd3c 	bl	800769e <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8008c26:	2108      	movs	r1, #8
 8008c28:	4844      	ldr	r0, [pc, #272]	; (8008d3c <main+0x204>)
 8008c2a:	f7fd fc03 	bl	8006434 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8008c2e:	2108      	movs	r1, #8
 8008c30:	4842      	ldr	r0, [pc, #264]	; (8008d3c <main+0x204>)
 8008c32:	f7fe fd34 	bl	800769e <HAL_TIMEx_PWMN_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8008c36:	210c      	movs	r1, #12
 8008c38:	4840      	ldr	r0, [pc, #256]	; (8008d3c <main+0x204>)
 8008c3a:	f7fd fb87 	bl	800634c <HAL_TIM_OC_Start>

	playSound( 3, 100, 20);
 8008c3e:	2214      	movs	r2, #20
 8008c40:	2164      	movs	r1, #100	; 0x64
 8008c42:	2003      	movs	r0, #3
 8008c44:	f002 fc82 	bl	800b54c <playSound>

	HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008c4e:	4839      	ldr	r0, [pc, #228]	; (8008d34 <main+0x1fc>)
 8008c50:	f7fa fd3c 	bl	80036cc <HAL_GPIO_WritePin>


	// --- used for heartbeat of microcontroller
	HAL_TIM_Base_Start_IT(&htim3);
 8008c54:	483a      	ldr	r0, [pc, #232]	; (8008d40 <main+0x208>)
 8008c56:	f7fd fb20 	bl	800629a <HAL_TIM_Base_Start_IT>

	// --- 32bit timer used to measure time in10mus
	HAL_TIM_Base_Start(&htim5);
 8008c5a:	483a      	ldr	r0, [pc, #232]	; (8008d44 <main+0x20c>)
 8008c5c:	f7fd faf9 	bl	8006252 <HAL_TIM_Base_Start>
	// --- I2C2 IMU ------------------------------------------------
	//see: https://www.youtube.com/watch?v=isOekyygpR8
	//b1101000
	char accel_char[20];

	buf[0] = 0x6B; //power register
 8008c60:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008c64:	226b      	movs	r2, #107	; 0x6b
 8008c66:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x00; //switch on
 8008c68:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 2, HAL_MAX_DELAY);
 8008c70:	23d0      	movs	r3, #208	; 0xd0
 8008c72:	b299      	uxth	r1, r3
 8008c74:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8008c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	2302      	movs	r3, #2
 8008c80:	4831      	ldr	r0, [pc, #196]	; (8008d48 <main+0x210>)
 8008c82:	f7fa fea7 	bl	80039d4 <HAL_I2C_Master_Transmit>
 8008c86:	4603      	mov	r3, r0
 8008c88:	f887 32db 	strb.w	r3, [r7, #731]	; 0x2db
	if (ret != HAL_OK){
 8008c8c:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d008      	beq.n	8008ca6 <main+0x16e>
		strcpy((char*)buf, "Error IMU T\r\n");
 8008c94:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008c98:	4a2c      	ldr	r2, [pc, #176]	; (8008d4c <main+0x214>)
 8008c9a:	461c      	mov	r4, r3
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ca0:	c407      	stmia	r4!, {r0, r1, r2}
 8008ca2:	8023      	strh	r3, [r4, #0]
 8008ca4:	e003      	b.n	8008cae <main+0x176>
	} else {
		buf[0] = 0x00;
 8008ca6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008caa:	2200      	movs	r2, #0
 8008cac:	701a      	strb	r2, [r3, #0]
	}

	buf[0] = 0x3B;
 8008cae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008cb2:	223b      	movs	r2, #59	; 0x3b
 8008cb4:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8008cb6:	23d0      	movs	r3, #208	; 0xd0
 8008cb8:	b299      	uxth	r1, r3
 8008cba:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8008cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	4820      	ldr	r0, [pc, #128]	; (8008d48 <main+0x210>)
 8008cc8:	f7fa fe84 	bl	80039d4 <HAL_I2C_Master_Transmit>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	f887 32db 	strb.w	r3, [r7, #731]	; 0x2db
	if (ret != HAL_OK){
 8008cd2:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d008      	beq.n	8008cec <main+0x1b4>
		strcpy((char*)buf, "Error IMU T\r\n");
 8008cda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008cde:	4a1b      	ldr	r2, [pc, #108]	; (8008d4c <main+0x214>)
 8008ce0:	461c      	mov	r4, r3
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ce6:	c407      	stmia	r4!, {r0, r1, r2}
 8008ce8:	8023      	strh	r3, [r4, #0]
 8008cea:	e040      	b.n	8008d6e <main+0x236>
	} else {
		ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8008cec:	23d0      	movs	r3, #208	; 0xd0
 8008cee:	b299      	uxth	r1, r3
 8008cf0:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8008cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	4812      	ldr	r0, [pc, #72]	; (8008d48 <main+0x210>)
 8008cfe:	f7fa ff67 	bl	8003bd0 <HAL_I2C_Master_Receive>
 8008d02:	4603      	mov	r3, r0
 8008d04:	f887 32db 	strb.w	r3, [r7, #731]	; 0x2db
		if (ret != HAL_OK){
 8008d08:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d021      	beq.n	8008d54 <main+0x21c>
			strcpy((char*)buf, "Error IMU R\r\n");
 8008d10:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008d14:	4a0e      	ldr	r2, [pc, #56]	; (8008d50 <main+0x218>)
 8008d16:	461c      	mov	r4, r3
 8008d18:	4613      	mov	r3, r2
 8008d1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d1c:	c407      	stmia	r4!, {r0, r1, r2}
 8008d1e:	8023      	strh	r3, [r4, #0]
 8008d20:	e025      	b.n	8008d6e <main+0x236>
 8008d22:	bf00      	nop
 8008d24:	200001dc 	.word	0x200001dc
 8008d28:	20000e68 	.word	0x20000e68
 8008d2c:	20001030 	.word	0x20001030
 8008d30:	20000f4c 	.word	0x20000f4c
 8008d34:	40021000 	.word	0x40021000
 8008d38:	e000ed00 	.word	0xe000ed00
 8008d3c:	20000dc0 	.word	0x20000dc0
 8008d40:	20000bac 	.word	0x20000bac
 8008d44:	20000b68 	.word	0x20000b68
 8008d48:	20000a48 	.word	0x20000a48
 8008d4c:	0800fd90 	.word	0x0800fd90
 8008d50:	0800fda0 	.word	0x0800fda0
		} else {
			accel8l = (int8_t)buf[0];
 8008d54:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	f887 32da 	strb.w	r3, [r7, #730]	; 0x2da
			sprintf((char*)accel_char, "%u m\r\n", (int)accel8l);
 8008d5e:	f897 22da 	ldrb.w	r2, [r7, #730]	; 0x2da
 8008d62:	f107 0310 	add.w	r3, r7, #16
 8008d66:	49d8      	ldr	r1, [pc, #864]	; (80090c8 <main+0x590>)
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f004 fb73 	bl	800d454 <siprintf>
  //					}
  //
  //				}

	// --- TIMERS ----------------------------------------------------
	TIM9->CCR1 = blink_duration;
 8008d6e:	4ad7      	ldr	r2, [pc, #860]	; (80090cc <main+0x594>)
 8008d70:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8008d74:	6353      	str	r3, [r2, #52]	; 0x34
	TIM9->CCR2 = blink_duration;
 8008d76:	4ad5      	ldr	r2, [pc, #852]	; (80090cc <main+0x594>)
 8008d78:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8008d7c:	6393      	str	r3, [r2, #56]	; 0x38

	// --- GPIO ----------------------------------------------------

	GPIOE->BSRR = GPIO_PIN_4; //switches LD2
 8008d7e:	4bd4      	ldr	r3, [pc, #848]	; (80090d0 <main+0x598>)
 8008d80:	2210      	movs	r2, #16
 8008d82:	619a      	str	r2, [r3, #24]




	playSound( 2, 100, 40);
 8008d84:	2228      	movs	r2, #40	; 0x28
 8008d86:	2164      	movs	r1, #100	; 0x64
 8008d88:	2002      	movs	r0, #2
 8008d8a:	f002 fbdf 	bl	800b54c <playSound>
	playSound( 1, 100, 80);
 8008d8e:	2250      	movs	r2, #80	; 0x50
 8008d90:	2164      	movs	r1, #100	; 0x64
 8008d92:	2001      	movs	r0, #1
 8008d94:	f002 fbda 	bl	800b54c <playSound>
	HAL_Delay(100); // So the system stops vibrating
 8008d98:	2064      	movs	r0, #100	; 0x64
 8008d9a:	f7f8 f967 	bl	800106c <HAL_Delay>




	// --- ROTATION SENSOR INIT ----------------------------------------------------
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL );
 8008d9e:	213c      	movs	r1, #60	; 0x3c
 8008da0:	48cc      	ldr	r0, [pc, #816]	; (80090d4 <main+0x59c>)
 8008da2:	f7fd fc4c 	bl	800663e <HAL_TIM_Encoder_Start_IT>
	uint8_t spi_value_8[2];

	//todo UGLY BUG - Ugly FIX: now i just send the init below twice because somehow the communication of the first transaction does not seem to work-- i sse on the MISO signal the lines just pulls up to 0.5V instead of 3V but it works fine for the next transmission so it gets initialized correctly if i sent it twice

	// --- set ABI and enable PWM
	spi_address_8[1]= 0x00;//
 8008da6:	f107 030c 	add.w	r3, r7, #12
 8008daa:	2200      	movs	r2, #0
 8008dac:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0x18;//00000000 00011000
 8008dae:	f107 030c 	add.w	r3, r7, #12
 8008db2:	2218      	movs	r2, #24
 8008db4:	701a      	strb	r2, [r3, #0]
	spi_value_8[1]= 0x80;
 8008db6:	f107 0308 	add.w	r3, r7, #8
 8008dba:	2280      	movs	r2, #128	; 0x80
 8008dbc:	705a      	strb	r2, [r3, #1]
	spi_value_8[0]= 0x80;  //10000000 10000000
 8008dbe:	f107 0308 	add.w	r3, r7, #8
 8008dc2:	2280      	movs	r2, #128	; 0x80
 8008dc4:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 8008dc6:	f002 fba9 	bl	800b51c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008dd0:	48c1      	ldr	r0, [pc, #772]	; (80090d8 <main+0x5a0>)
 8008dd2:	f7fa fc7b 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008dd6:	f107 010c 	add.w	r1, r7, #12
 8008dda:	2301      	movs	r3, #1
 8008ddc:	2201      	movs	r2, #1
 8008dde:	48bf      	ldr	r0, [pc, #764]	; (80090dc <main+0x5a4>)
 8008de0:	f7fc fbfd 	bl	80055de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008de4:	2201      	movs	r2, #1
 8008de6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008dea:	48bb      	ldr	r0, [pc, #748]	; (80090d8 <main+0x5a0>)
 8008dec:	f7fa fc6e 	bl	80036cc <HAL_GPIO_WritePin>
	delay_SPI();
 8008df0:	f002 fb94 	bl	800b51c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008df4:	2200      	movs	r2, #0
 8008df6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008dfa:	48b7      	ldr	r0, [pc, #732]	; (80090d8 <main+0x5a0>)
 8008dfc:	f7fa fc66 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008e00:	f107 0108 	add.w	r1, r7, #8
 8008e04:	2301      	movs	r3, #1
 8008e06:	2201      	movs	r2, #1
 8008e08:	48b4      	ldr	r0, [pc, #720]	; (80090dc <main+0x5a4>)
 8008e0a:	f7fc fbe8 	bl	80055de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e14:	48b0      	ldr	r0, [pc, #704]	; (80090d8 <main+0x5a0>)
 8008e16:	f7fa fc59 	bl	80036cc <HAL_GPIO_WritePin>

	// --- set ABI and enable PWM
		spi_address_8[1]= 0x00;//
 8008e1a:	f107 030c 	add.w	r3, r7, #12
 8008e1e:	2200      	movs	r2, #0
 8008e20:	705a      	strb	r2, [r3, #1]
		spi_address_8[0]= 0x18;//00000000 00011000
 8008e22:	f107 030c 	add.w	r3, r7, #12
 8008e26:	2218      	movs	r2, #24
 8008e28:	701a      	strb	r2, [r3, #0]
		spi_value_8[1]= 0x80;
 8008e2a:	f107 0308 	add.w	r3, r7, #8
 8008e2e:	2280      	movs	r2, #128	; 0x80
 8008e30:	705a      	strb	r2, [r3, #1]
		spi_value_8[0]= 0x80;  //10000000 10000000
 8008e32:	f107 0308 	add.w	r3, r7, #8
 8008e36:	2280      	movs	r2, #128	; 0x80
 8008e38:	701a      	strb	r2, [r3, #0]
		delay_SPI();
 8008e3a:	f002 fb6f 	bl	800b51c <delay_SPI>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e44:	48a4      	ldr	r0, [pc, #656]	; (80090d8 <main+0x5a0>)
 8008e46:	f7fa fc41 	bl	80036cc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008e4a:	f107 010c 	add.w	r1, r7, #12
 8008e4e:	2301      	movs	r3, #1
 8008e50:	2201      	movs	r2, #1
 8008e52:	48a2      	ldr	r0, [pc, #648]	; (80090dc <main+0x5a4>)
 8008e54:	f7fc fbc3 	bl	80055de <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e5e:	489e      	ldr	r0, [pc, #632]	; (80090d8 <main+0x5a0>)
 8008e60:	f7fa fc34 	bl	80036cc <HAL_GPIO_WritePin>
		delay_SPI();
 8008e64:	f002 fb5a 	bl	800b51c <delay_SPI>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e6e:	489a      	ldr	r0, [pc, #616]	; (80090d8 <main+0x5a0>)
 8008e70:	f7fa fc2c 	bl	80036cc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008e74:	f107 0108 	add.w	r1, r7, #8
 8008e78:	2301      	movs	r3, #1
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	4897      	ldr	r0, [pc, #604]	; (80090dc <main+0x5a4>)
 8008e7e:	f7fc fbae 	bl	80055de <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008e82:	2201      	movs	r2, #1
 8008e84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e88:	4893      	ldr	r0, [pc, #588]	; (80090d8 <main+0x5a0>)
 8008e8a:	f7fa fc1f 	bl	80036cc <HAL_GPIO_WritePin>



	// --- set ABI and enable PWM
	spi_address_8[1]= 0x00;//
 8008e8e:	f107 030c 	add.w	r3, r7, #12
 8008e92:	2200      	movs	r2, #0
 8008e94:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0x18;//00000000 00011000
 8008e96:	f107 030c 	add.w	r3, r7, #12
 8008e9a:	2218      	movs	r2, #24
 8008e9c:	701a      	strb	r2, [r3, #0]
	spi_value_8[1]= 0x80;
 8008e9e:	f107 0308 	add.w	r3, r7, #8
 8008ea2:	2280      	movs	r2, #128	; 0x80
 8008ea4:	705a      	strb	r2, [r3, #1]
	spi_value_8[0]= 0x80;  //10000000 10000000
 8008ea6:	f107 0308 	add.w	r3, r7, #8
 8008eaa:	2280      	movs	r2, #128	; 0x80
 8008eac:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 8008eae:	f002 fb35 	bl	800b51c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008eb8:	4887      	ldr	r0, [pc, #540]	; (80090d8 <main+0x5a0>)
 8008eba:	f7fa fc07 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008ebe:	f107 010c 	add.w	r1, r7, #12
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	4885      	ldr	r0, [pc, #532]	; (80090dc <main+0x5a4>)
 8008ec8:	f7fc fb89 	bl	80055de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008ed2:	4881      	ldr	r0, [pc, #516]	; (80090d8 <main+0x5a0>)
 8008ed4:	f7fa fbfa 	bl	80036cc <HAL_GPIO_WritePin>
	delay_SPI();
 8008ed8:	f002 fb20 	bl	800b51c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008edc:	2200      	movs	r2, #0
 8008ede:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008ee2:	487d      	ldr	r0, [pc, #500]	; (80090d8 <main+0x5a0>)
 8008ee4:	f7fa fbf2 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008ee8:	f107 0108 	add.w	r1, r7, #8
 8008eec:	2301      	movs	r3, #1
 8008eee:	2201      	movs	r2, #1
 8008ef0:	487a      	ldr	r0, [pc, #488]	; (80090dc <main+0x5a4>)
 8008ef2:	f7fc fb74 	bl	80055de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008efc:	4876      	ldr	r0, [pc, #472]	; (80090d8 <main+0x5a0>)
 8008efe:	f7fa fbe5 	bl	80036cc <HAL_GPIO_WritePin>

	// --- set steps 2000steps 500 pulses //todo this seems not to work as I get 4000 steps
	spi_address_8[1]= 0x80;
 8008f02:	f107 030c 	add.w	r3, r7, #12
 8008f06:	2280      	movs	r2, #128	; 0x80
 8008f08:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0x19; //00001000 00011001
 8008f0a:	f107 030c 	add.w	r3, r7, #12
 8008f0e:	2219      	movs	r2, #25
 8008f10:	701a      	strb	r2, [r3, #0]
	//address = AS_ADDR_SETTINGS2 | AS_WRITE ; // 0x8019
	//value = 0x0020 | AS_ODD; // 0x8020
	//value = 0x00E0 | AS_ODD;
	spi_value_8[1]= 0x80;
 8008f12:	f107 0308 	add.w	r3, r7, #8
 8008f16:	2280      	movs	r2, #128	; 0x80
 8008f18:	705a      	strb	r2, [r3, #1]
	spi_value_8[0]= 0x20;  // 10000000 00100000
 8008f1a:	f107 0308 	add.w	r3, r7, #8
 8008f1e:	2220      	movs	r2, #32
 8008f20:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 8008f22:	f002 fafb 	bl	800b51c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008f26:	2200      	movs	r2, #0
 8008f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f2c:	486a      	ldr	r0, [pc, #424]	; (80090d8 <main+0x5a0>)
 8008f2e:	f7fa fbcd 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008f32:	f107 010c 	add.w	r1, r7, #12
 8008f36:	2301      	movs	r3, #1
 8008f38:	2201      	movs	r2, #1
 8008f3a:	4868      	ldr	r0, [pc, #416]	; (80090dc <main+0x5a4>)
 8008f3c:	f7fc fb4f 	bl	80055de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008f40:	2201      	movs	r2, #1
 8008f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f46:	4864      	ldr	r0, [pc, #400]	; (80090d8 <main+0x5a0>)
 8008f48:	f7fa fbc0 	bl	80036cc <HAL_GPIO_WritePin>
	delay_SPI();
 8008f4c:	f002 fae6 	bl	800b51c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008f50:	2200      	movs	r2, #0
 8008f52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f56:	4860      	ldr	r0, [pc, #384]	; (80090d8 <main+0x5a0>)
 8008f58:	f7fa fbb8 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008f5c:	f107 0108 	add.w	r1, r7, #8
 8008f60:	2301      	movs	r3, #1
 8008f62:	2201      	movs	r2, #1
 8008f64:	485d      	ldr	r0, [pc, #372]	; (80090dc <main+0x5a4>)
 8008f66:	f7fc fb3a 	bl	80055de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f70:	4859      	ldr	r0, [pc, #356]	; (80090d8 <main+0x5a0>)
 8008f72:	f7fa fbab 	bl	80036cc <HAL_GPIO_WritePin>

	// --- read angle
	HAL_Delay(1);
 8008f76:	2001      	movs	r0, #1
 8008f78:	f7f8 f878 	bl	800106c <HAL_Delay>

	uint8_t angle8[2];
	uint16_t angle;

	//for (int i=0; i<4; i++)
	spi_address_8[1]= 0x7F;
 8008f7c:	f107 030c 	add.w	r3, r7, #12
 8008f80:	227f      	movs	r2, #127	; 0x7f
 8008f82:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0xFE;
 8008f84:	f107 030c 	add.w	r3, r7, #12
 8008f88:	22fe      	movs	r2, #254	; 0xfe
 8008f8a:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 8008f8c:	f002 fac6 	bl	800b51c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008f90:	2200      	movs	r2, #0
 8008f92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f96:	4850      	ldr	r0, [pc, #320]	; (80090d8 <main+0x5a0>)
 8008f98:	f7fa fb98 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008f9c:	f107 010c 	add.w	r1, r7, #12
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	484d      	ldr	r0, [pc, #308]	; (80090dc <main+0x5a4>)
 8008fa6:	f7fc fb1a 	bl	80055de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008faa:	2201      	movs	r2, #1
 8008fac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fb0:	4849      	ldr	r0, [pc, #292]	; (80090d8 <main+0x5a0>)
 8008fb2:	f7fa fb8b 	bl	80036cc <HAL_GPIO_WritePin>
	delay_SPI();
 8008fb6:	f002 fab1 	bl	800b51c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fc0:	4845      	ldr	r0, [pc, #276]	; (80090d8 <main+0x5a0>)
 8008fc2:	f7fa fb83 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, (uint8_t *)&angle8, 1, 1);
 8008fc6:	1d39      	adds	r1, r7, #4
 8008fc8:	2301      	movs	r3, #1
 8008fca:	2201      	movs	r2, #1
 8008fcc:	4843      	ldr	r0, [pc, #268]	; (80090dc <main+0x5a4>)
 8008fce:	f7fc fc3a 	bl	8005846 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fd8:	483f      	ldr	r0, [pc, #252]	; (80090d8 <main+0x5a0>)
 8008fda:	f7fa fb77 	bl	80036cc <HAL_GPIO_WritePin>

	angle = (uint16_t) angle8[0] | (uint16_t) angle8[1] << 8U;
 8008fde:	1d3b      	adds	r3, r7, #4
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	b21a      	sxth	r2, r3
 8008fe4:	1d3b      	adds	r3, r7, #4
 8008fe6:	785b      	ldrb	r3, [r3, #1]
 8008fe8:	021b      	lsls	r3, r3, #8
 8008fea:	b21b      	sxth	r3, r3
 8008fec:	4313      	orrs	r3, r2
 8008fee:	b21b      	sxth	r3, r3
 8008ff0:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
	angle &= AS_DATA_MASK;
 8008ff4:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8008ff8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008ffc:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


	// --- ROTATION SENSOR 0 POINT SETTING ----------------------------------------------------
	//angle &= AS_DATA_MASK;
	EncVal = (uint16_t) ((float)angle /16384.0 * ENC_STEPS);
 8009000:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009004:	ee07 3a90 	vmov	s15, r3
 8009008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900c:	ee17 0a90 	vmov	r0, s15
 8009010:	f7f7 fa9a 	bl	8000548 <__aeabi_f2d>
 8009014:	f04f 0200 	mov.w	r2, #0
 8009018:	4b31      	ldr	r3, [pc, #196]	; (80090e0 <main+0x5a8>)
 800901a:	f7f7 fc17 	bl	800084c <__aeabi_ddiv>
 800901e:	4603      	mov	r3, r0
 8009020:	460c      	mov	r4, r1
 8009022:	4618      	mov	r0, r3
 8009024:	4621      	mov	r1, r4
 8009026:	f04f 0200 	mov.w	r2, #0
 800902a:	4b2e      	ldr	r3, [pc, #184]	; (80090e4 <main+0x5ac>)
 800902c:	f7f7 fae4 	bl	80005f8 <__aeabi_dmul>
 8009030:	4603      	mov	r3, r0
 8009032:	460c      	mov	r4, r1
 8009034:	4618      	mov	r0, r3
 8009036:	4621      	mov	r1, r4
 8009038:	f7f7 fdb6 	bl	8000ba8 <__aeabi_d2uiz>
 800903c:	4603      	mov	r3, r0
 800903e:	b29b      	uxth	r3, r3
 8009040:	b21a      	sxth	r2, r3
 8009042:	4b29      	ldr	r3, [pc, #164]	; (80090e8 <main+0x5b0>)
 8009044:	801a      	strh	r2, [r3, #0]
	last_EncVal = EncVal;
 8009046:	4b28      	ldr	r3, [pc, #160]	; (80090e8 <main+0x5b0>)
 8009048:	f9b3 2000 	ldrsh.w	r2, [r3]
 800904c:	4b27      	ldr	r3, [pc, #156]	; (80090ec <main+0x5b4>)
 800904e:	801a      	strh	r2, [r3, #0]
	last_EncVal_v = EncVal;
 8009050:	4b25      	ldr	r3, [pc, #148]	; (80090e8 <main+0x5b0>)
 8009052:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009056:	4b26      	ldr	r3, [pc, #152]	; (80090f0 <main+0x5b8>)
 8009058:	801a      	strh	r2, [r3, #0]
	TIM8->CNT = EncVal;
 800905a:	4b23      	ldr	r3, [pc, #140]	; (80090e8 <main+0x5b0>)
 800905c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009060:	4b24      	ldr	r3, [pc, #144]	; (80090f4 <main+0x5bc>)
 8009062:	625a      	str	r2, [r3, #36]	; 0x24
//	EncVal = TIM8->CNT;//takes 200ns
//	TIM1->CCR1 = 0;
//	phase = (float) EncVal * 0.02199 ;

	// --- UART DMA
	HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMAUSARTTransferComplete);
 8009064:	4a24      	ldr	r2, [pc, #144]	; (80090f8 <main+0x5c0>)
 8009066:	2100      	movs	r1, #0
 8009068:	4824      	ldr	r0, [pc, #144]	; (80090fc <main+0x5c4>)
 800906a:	f7fa f863 	bl	8003134 <HAL_DMA_RegisterCallback>


	//HAL_TIM_RegisterCallback(&htim8, HAL_TIM_IC_CAPTURE_CB_ID, &EncoderStepCallback );

	// --- ADC DMA
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, 30); // this is the only one working // the length must be multiple of channels otherwise I observed mess in order - even like 2 of one and lots of mess
 800906e:	221e      	movs	r2, #30
 8009070:	4923      	ldr	r1, [pc, #140]	; (8009100 <main+0x5c8>)
 8009072:	4824      	ldr	r0, [pc, #144]	; (8009104 <main+0x5cc>)
 8009074:	f7f8 f9a0 	bl	80013b8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, 30); // TODO enabling this only leads to no change all values stay zero
 8009078:	221e      	movs	r2, #30
 800907a:	4923      	ldr	r1, [pc, #140]	; (8009108 <main+0x5d0>)
 800907c:	4823      	ldr	r0, [pc, #140]	; (800910c <main+0x5d4>)
 800907e:	f7f8 f99b 	bl	80013b8 <HAL_ADC_Start_DMA>
 	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, 30); // TODO enabling this breaks transmission entirely
 8009082:	221e      	movs	r2, #30
 8009084:	4922      	ldr	r1, [pc, #136]	; (8009110 <main+0x5d8>)
 8009086:	4823      	ldr	r0, [pc, #140]	; (8009114 <main+0x5dc>)
 8009088:	f7f8 f996 	bl	80013b8 <HAL_ADC_Start_DMA>


	HAL_ADCEx_InjectedStart (&hadc1);
 800908c:	481d      	ldr	r0, [pc, #116]	; (8009104 <main+0x5cc>)
 800908e:	f7f8 fd39 	bl	8001b04 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc2);
 8009092:	481e      	ldr	r0, [pc, #120]	; (800910c <main+0x5d4>)
 8009094:	f7f8 fd36 	bl	8001b04 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc3); // again this seems to break  the full loop
 8009098:	481e      	ldr	r0, [pc, #120]	; (8009114 <main+0x5dc>)
 800909a:	f7f8 fd33 	bl	8001b04 <HAL_ADCEx_InjectedStart>
//
//


	sprintf((char*)buf, "\r\n\r\nWELCOME TO MUSCLEmaster \r\n\r\nangle: %d EncVal %d \r\nangle: %u EncVal %u \r\n\r\n",
 800909e:	f8b7 12d8 	ldrh.w	r1, [r7, #728]	; 0x2d8
 80090a2:	4b11      	ldr	r3, [pc, #68]	; (80090e8 <main+0x5b0>)
 80090a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090a8:	461c      	mov	r4, r3
 80090aa:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80090ae:	4a0e      	ldr	r2, [pc, #56]	; (80090e8 <main+0x5b0>)
 80090b0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80090b4:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80090b8:	9201      	str	r2, [sp, #4]
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	4623      	mov	r3, r4
 80090be:	460a      	mov	r2, r1
 80090c0:	4915      	ldr	r1, [pc, #84]	; (8009118 <main+0x5e0>)
 80090c2:	f004 f9c7 	bl	800d454 <siprintf>
 80090c6:	e029      	b.n	800911c <main+0x5e4>
 80090c8:	0800fdb0 	.word	0x0800fdb0
 80090cc:	40014000 	.word	0x40014000
 80090d0:	40021000 	.word	0x40021000
 80090d4:	20000524 	.word	0x20000524
 80090d8:	40020c00 	.word	0x40020c00
 80090dc:	20000184 	.word	0x20000184
 80090e0:	40d00000 	.word	0x40d00000
 80090e4:	409f4000 	.word	0x409f4000
 80090e8:	20000cfc 	.word	0x20000cfc
 80090ec:	20000a9c 	.word	0x20000a9c
 80090f0:	20000ba8 	.word	0x20000ba8
 80090f4:	40010400 	.word	0x40010400
 80090f8:	0800b6f9 	.word	0x0800b6f9
 80090fc:	20000b08 	.word	0x20000b08
 8009100:	20000bf0 	.word	0x20000bf0
 8009104:	20000c2c 	.word	0x20000c2c
 8009108:	20000f10 	.word	0x20000f10
 800910c:	200005a4 	.word	0x200005a4
 8009110:	20000e2c 	.word	0x20000e2c
 8009114:	20000c74 	.word	0x20000c74
 8009118:	0800fdb8 	.word	0x0800fdb8
			angle, EncVal ,
			angle, EncVal );
	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 800911c:	4bc2      	ldr	r3, [pc, #776]	; (8009428 <main+0x8f0>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	695a      	ldr	r2, [r3, #20]
 8009122:	4bc1      	ldr	r3, [pc, #772]	; (8009428 <main+0x8f0>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800912a:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 800912c:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8009130:	4bbd      	ldr	r3, [pc, #756]	; (8009428 <main+0x8f0>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3304      	adds	r3, #4
 8009136:	461d      	mov	r5, r3
 8009138:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800913c:	4618      	mov	r0, r3
 800913e:	f7f7 f847 	bl	80001d0 <strlen>
 8009142:	4603      	mov	r3, r0
 8009144:	462a      	mov	r2, r5
 8009146:	4621      	mov	r1, r4
 8009148:	48b8      	ldr	r0, [pc, #736]	; (800942c <main+0x8f4>)
 800914a:	f7f9 fdef 	bl	8002d2c <HAL_DMA_Start_IT>

	HAL_Delay(10); //some delay needed othwise the first print statement in while will overwrite
 800914e:	200a      	movs	r0, #10
 8009150:	f7f7 ff8c 	bl	800106c <HAL_Delay>
	//HAL_TIM_Base_Start(&htim3);


	//HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);

	mode_of_operation = 1;
 8009154:	4bb6      	ldr	r3, [pc, #728]	; (8009430 <main+0x8f8>)
 8009156:	2201      	movs	r2, #1
 8009158:	701a      	strb	r2, [r3, #0]


	pHeader.DLC =6;
 800915a:	4bb6      	ldr	r3, [pc, #728]	; (8009434 <main+0x8fc>)
 800915c:	2206      	movs	r2, #6
 800915e:	611a      	str	r2, [r3, #16]
	pHeader.IDE = CAN_ID_STD;
 8009160:	4bb4      	ldr	r3, [pc, #720]	; (8009434 <main+0x8fc>)
 8009162:	2200      	movs	r2, #0
 8009164:	609a      	str	r2, [r3, #8]
	pHeader.RTR = CAN_RTR_DATA;
 8009166:	4bb3      	ldr	r3, [pc, #716]	; (8009434 <main+0x8fc>)
 8009168:	2200      	movs	r2, #0
 800916a:	60da      	str	r2, [r3, #12]
	pHeader.StdId = 0x001;
 800916c:	4bb1      	ldr	r3, [pc, #708]	; (8009434 <main+0x8fc>)
 800916e:	2201      	movs	r2, #1
 8009170:	601a      	str	r2, [r3, #0]

	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8009172:	4bb1      	ldr	r3, [pc, #708]	; (8009438 <main+0x900>)
 8009174:	2200      	movs	r2, #0
 8009176:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = CAN_ID<<5;
 8009178:	4baf      	ldr	r3, [pc, #700]	; (8009438 <main+0x900>)
 800917a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800917e:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8009180:	4bad      	ldr	r3, [pc, #692]	; (8009438 <main+0x900>)
 8009182:	2200      	movs	r2, #0
 8009184:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF;
 8009186:	4bac      	ldr	r3, [pc, #688]	; (8009438 <main+0x900>)
 8009188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800918c:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0xFFFF;
 800918e:	4baa      	ldr	r3, [pc, #680]	; (8009438 <main+0x900>)
 8009190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009194:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8009196:	4ba8      	ldr	r3, [pc, #672]	; (8009438 <main+0x900>)
 8009198:	2200      	movs	r2, #0
 800919a:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 800919c:	4ba6      	ldr	r3, [pc, #664]	; (8009438 <main+0x900>)
 800919e:	2201      	movs	r2, #1
 80091a0:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80091a2:	49a5      	ldr	r1, [pc, #660]	; (8009438 <main+0x900>)
 80091a4:	48a5      	ldr	r0, [pc, #660]	; (800943c <main+0x904>)
 80091a6:	f7f9 f883 	bl	80022b0 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 80091aa:	48a4      	ldr	r0, [pc, #656]	; (800943c <main+0x904>)
 80091ac:	f7f9 f960 	bl	8002470 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80091b0:	2102      	movs	r1, #2
 80091b2:	48a2      	ldr	r0, [pc, #648]	; (800943c <main+0x904>)
 80091b4:	f7f9 f9a0 	bl	80024f8 <HAL_CAN_ActivateNotification>
  {
  	// -------------------------------------------------------------
		// --- FAST PROCESS ----------------------------------------------------
		// -------------------------------------------------------------

  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 80091b8:	4ba1      	ldr	r3, [pc, #644]	; (8009440 <main+0x908>)
 80091ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80091be:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 80091c0:	4b9f      	ldr	r3, [pc, #636]	; (8009440 <main+0x908>)
 80091c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c6:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 80091c8:	4b9d      	ldr	r3, [pc, #628]	; (8009440 <main+0x908>)
 80091ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80091ce:	619a      	str	r2, [r3, #24]
		debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 80091d0:	4b9b      	ldr	r3, [pc, #620]	; (8009440 <main+0x908>)
 80091d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d6:	619a      	str	r2, [r3, #24]

	  // -------------------------------------------------------------
	  // --- SLOW PROCESS ----------------------------------------------------
	  // -------------------------------------------------------------

	  if (i_fast%fast2slow == 0){
 80091d8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80091dc:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80091e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80091e4:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 80091e8:	fb01 f202 	mul.w	r2, r1, r2
 80091ec:	1a9b      	subs	r3, r3, r2
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f040 8681 	bne.w	8009ef6 <main+0x13be>
	  	//a++;
	  	//HAL_CAN_AddTxMessage(&hcan1, &pHeader, &a, &TxMailbox);

	  	// --- GPIO ----------------------------------------------------
	  	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 80091f4:	2110      	movs	r1, #16
 80091f6:	4893      	ldr	r0, [pc, #588]	; (8009444 <main+0x90c>)
 80091f8:	f7fa fa81 	bl	80036fe <HAL_GPIO_TogglePin>

			// --- UART ----------------------------------------------------


			HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 80091fc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009200:	2201      	movs	r2, #1
 8009202:	4619      	mov	r1, r3
 8009204:	4888      	ldr	r0, [pc, #544]	; (8009428 <main+0x8f0>)
 8009206:	f7fe fbc9 	bl	800799c <HAL_UART_Receive_IT>

			if (rx_character_buffered != '.'){
 800920a:	4b8f      	ldr	r3, [pc, #572]	; (8009448 <main+0x910>)
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	2b2e      	cmp	r3, #46	; 0x2e
 8009210:	d007      	beq.n	8009222 <main+0x6ea>
				ch = rx_character_buffered;
 8009212:	4b8d      	ldr	r3, [pc, #564]	; (8009448 <main+0x910>)
 8009214:	781a      	ldrb	r2, [r3, #0]
 8009216:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800921a:	701a      	strb	r2, [r3, #0]
				//rx_character_armed = 0;
				rx_character_buffered = '.';
 800921c:	4b8a      	ldr	r3, [pc, #552]	; (8009448 <main+0x910>)
 800921e:	222e      	movs	r2, #46	; 0x2e
 8009220:	701a      	strb	r2, [r3, #0]
			}



			switch(ch){
 8009222:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	3b41      	subs	r3, #65	; 0x41
 800922a:	2b39      	cmp	r3, #57	; 0x39
 800922c:	f200 8248 	bhi.w	80096c0 <main+0xb88>
 8009230:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <main+0x700>)
 8009232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009236:	bf00      	nop
 8009238:	0800958d 	.word	0x0800958d
 800923c:	08009631 	.word	0x08009631
 8009240:	080095a3 	.word	0x080095a3
 8009244:	0800957b 	.word	0x0800957b
 8009248:	080095e1 	.word	0x080095e1
 800924c:	080095cd 	.word	0x080095cd
 8009250:	08009629 	.word	0x08009629
 8009254:	080096c1 	.word	0x080096c1
 8009258:	0800963f 	.word	0x0800963f
 800925c:	080096c1 	.word	0x080096c1
 8009260:	0800965b 	.word	0x0800965b
 8009264:	08009639 	.word	0x08009639
 8009268:	080096c1 	.word	0x080096c1
 800926c:	080096c1 	.word	0x080096c1
 8009270:	080096c1 	.word	0x080096c1
 8009274:	08009537 	.word	0x08009537
 8009278:	080095ed 	.word	0x080095ed
 800927c:	080095bb 	.word	0x080095bb
 8009280:	08009565 	.word	0x08009565
 8009284:	08009621 	.word	0x08009621
 8009288:	080096c1 	.word	0x080096c1
 800928c:	080096c1 	.word	0x080096c1
 8009290:	08009553 	.word	0x08009553
 8009294:	08009531 	.word	0x08009531
 8009298:	080096c1 	.word	0x080096c1
 800929c:	080096c1 	.word	0x080096c1
 80092a0:	080096c1 	.word	0x080096c1
 80092a4:	080096c1 	.word	0x080096c1
 80092a8:	080096c1 	.word	0x080096c1
 80092ac:	080096c1 	.word	0x080096c1
 80092b0:	080096c1 	.word	0x080096c1
 80092b4:	080096c1 	.word	0x080096c1
 80092b8:	08009349 	.word	0x08009349
 80092bc:	080096c1 	.word	0x080096c1
 80092c0:	080096c1 	.word	0x080096c1
 80092c4:	08009371 	.word	0x08009371
 80092c8:	080093c1 	.word	0x080093c1
 80092cc:	0800945d 	.word	0x0800945d
 80092d0:	080093f1 	.word	0x080093f1
 80092d4:	080093f9 	.word	0x080093f9
 80092d8:	0800953d 	.word	0x0800953d
 80092dc:	080094c9 	.word	0x080094c9
 80092e0:	08009545 	.word	0x08009545
 80092e4:	0800951b 	.word	0x0800951b
 80092e8:	080095f9 	.word	0x080095f9
 80092ec:	0800960b 	.word	0x0800960b
 80092f0:	08009511 	.word	0x08009511
 80092f4:	080094f1 	.word	0x080094f1
 80092f8:	08009399 	.word	0x08009399
 80092fc:	08009483 	.word	0x08009483
 8009300:	08009333 	.word	0x08009333
 8009304:	080093e9 	.word	0x080093e9
 8009308:	080094a1 	.word	0x080094a1
 800930c:	080096c1 	.word	0x080096c1
 8009310:	08009321 	.word	0x08009321
 8009314:	080096c1 	.word	0x080096c1
 8009318:	080096c1 	.word	0x080096c1
 800931c:	08009495 	.word	0x08009495
				case 'w':
					amp *= 2;
 8009320:	4b4a      	ldr	r3, [pc, #296]	; (800944c <main+0x914>)
 8009322:	edd3 7a00 	vldr	s15, [r3]
 8009326:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800932a:	4b48      	ldr	r3, [pc, #288]	; (800944c <main+0x914>)
 800932c:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009330:	e1ca      	b.n	80096c8 <main+0xb90>
				case 's':
					amp /= 2;
 8009332:	4b46      	ldr	r3, [pc, #280]	; (800944c <main+0x914>)
 8009334:	ed93 7a00 	vldr	s14, [r3]
 8009338:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800933c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009340:	4b42      	ldr	r3, [pc, #264]	; (800944c <main+0x914>)
 8009342:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009346:	e1bf      	b.n	80096c8 <main+0xb90>
				case 'a':
					phase_shift -= 0.05;
 8009348:	4b41      	ldr	r3, [pc, #260]	; (8009450 <main+0x918>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4618      	mov	r0, r3
 800934e:	f7f7 f8fb 	bl	8000548 <__aeabi_f2d>
 8009352:	a333      	add	r3, pc, #204	; (adr r3, 8009420 <main+0x8e8>)
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	f7f6 ff96 	bl	8000288 <__aeabi_dsub>
 800935c:	4603      	mov	r3, r0
 800935e:	460c      	mov	r4, r1
 8009360:	4618      	mov	r0, r3
 8009362:	4621      	mov	r1, r4
 8009364:	f7f7 fc40 	bl	8000be8 <__aeabi_d2f>
 8009368:	4602      	mov	r2, r0
 800936a:	4b39      	ldr	r3, [pc, #228]	; (8009450 <main+0x918>)
 800936c:	601a      	str	r2, [r3, #0]
					break;
 800936e:	e1ab      	b.n	80096c8 <main+0xb90>
				case 'd':
					phase_shift += 0.05;
 8009370:	4b37      	ldr	r3, [pc, #220]	; (8009450 <main+0x918>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4618      	mov	r0, r3
 8009376:	f7f7 f8e7 	bl	8000548 <__aeabi_f2d>
 800937a:	a329      	add	r3, pc, #164	; (adr r3, 8009420 <main+0x8e8>)
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	f7f6 ff84 	bl	800028c <__adddf3>
 8009384:	4603      	mov	r3, r0
 8009386:	460c      	mov	r4, r1
 8009388:	4618      	mov	r0, r3
 800938a:	4621      	mov	r1, r4
 800938c:	f7f7 fc2c 	bl	8000be8 <__aeabi_d2f>
 8009390:	4602      	mov	r2, r0
 8009392:	4b2f      	ldr	r3, [pc, #188]	; (8009450 <main+0x918>)
 8009394:	601a      	str	r2, [r3, #0]
					break;
 8009396:	e197      	b.n	80096c8 <main+0xb90>
				case 'q':
					phase0 -= 0.05;
 8009398:	4b2e      	ldr	r3, [pc, #184]	; (8009454 <main+0x91c>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4618      	mov	r0, r3
 800939e:	f7f7 f8d3 	bl	8000548 <__aeabi_f2d>
 80093a2:	a31f      	add	r3, pc, #124	; (adr r3, 8009420 <main+0x8e8>)
 80093a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a8:	f7f6 ff6e 	bl	8000288 <__aeabi_dsub>
 80093ac:	4603      	mov	r3, r0
 80093ae:	460c      	mov	r4, r1
 80093b0:	4618      	mov	r0, r3
 80093b2:	4621      	mov	r1, r4
 80093b4:	f7f7 fc18 	bl	8000be8 <__aeabi_d2f>
 80093b8:	4602      	mov	r2, r0
 80093ba:	4b26      	ldr	r3, [pc, #152]	; (8009454 <main+0x91c>)
 80093bc:	601a      	str	r2, [r3, #0]
					break;
 80093be:	e183      	b.n	80096c8 <main+0xb90>
				case 'e':
					phase0 += 0.05;
 80093c0:	4b24      	ldr	r3, [pc, #144]	; (8009454 <main+0x91c>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7f7 f8bf 	bl	8000548 <__aeabi_f2d>
 80093ca:	a315      	add	r3, pc, #84	; (adr r3, 8009420 <main+0x8e8>)
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	f7f6 ff5c 	bl	800028c <__adddf3>
 80093d4:	4603      	mov	r3, r0
 80093d6:	460c      	mov	r4, r1
 80093d8:	4618      	mov	r0, r3
 80093da:	4621      	mov	r1, r4
 80093dc:	f7f7 fc04 	bl	8000be8 <__aeabi_d2f>
 80093e0:	4602      	mov	r2, r0
 80093e2:	4b1c      	ldr	r3, [pc, #112]	; (8009454 <main+0x91c>)
 80093e4:	601a      	str	r2, [r3, #0]
					break;
 80093e6:	e16f      	b.n	80096c8 <main+0xb90>
				case 't':
					run_motor = 1;
 80093e8:	4b1b      	ldr	r3, [pc, #108]	; (8009458 <main+0x920>)
 80093ea:	2201      	movs	r2, #1
 80093ec:	601a      	str	r2, [r3, #0]
					break;
 80093ee:	e16b      	b.n	80096c8 <main+0xb90>
				case 'g':
					run_motor = 0;
 80093f0:	4b19      	ldr	r3, [pc, #100]	; (8009458 <main+0x920>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]
					break;
 80093f6:	e167      	b.n	80096c8 <main+0xb90>
				case 'h':
					amp = abs(amp); //positive should be clockwise == EncVal increases positive :)
 80093f8:	4b14      	ldr	r3, [pc, #80]	; (800944c <main+0x914>)
 80093fa:	edd3 7a00 	vldr	s15, [r3]
 80093fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009402:	ee17 3a90 	vmov	r3, s15
 8009406:	2b00      	cmp	r3, #0
 8009408:	bfb8      	it	lt
 800940a:	425b      	neglt	r3, r3
 800940c:	ee07 3a90 	vmov	s15, r3
 8009410:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009414:	4b0d      	ldr	r3, [pc, #52]	; (800944c <main+0x914>)
 8009416:	edc3 7a00 	vstr	s15, [r3]
					break;
 800941a:	e155      	b.n	80096c8 <main+0xb90>
 800941c:	f3af 8000 	nop.w
 8009420:	9999999a 	.word	0x9999999a
 8009424:	3fa99999 	.word	0x3fa99999
 8009428:	20000564 	.word	0x20000564
 800942c:	20000b08 	.word	0x20000b08
 8009430:	2000010d 	.word	0x2000010d
 8009434:	20001070 	.word	0x20001070
 8009438:	20000130 	.word	0x20000130
 800943c:	20001008 	.word	0x20001008
 8009440:	40020c00 	.word	0x40020c00
 8009444:	40021000 	.word	0x40021000
 8009448:	20000005 	.word	0x20000005
 800944c:	20000010 	.word	0x20000010
 8009450:	20000018 	.word	0x20000018
 8009454:	20000008 	.word	0x20000008
 8009458:	20000014 	.word	0x20000014
				case 'f':
					amp = -abs(amp);
 800945c:	4b88      	ldr	r3, [pc, #544]	; (8009680 <main+0xb48>)
 800945e:	edd3 7a00 	vldr	s15, [r3]
 8009462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009466:	ee17 3a90 	vmov	r3, s15
 800946a:	2b00      	cmp	r3, #0
 800946c:	bfb8      	it	lt
 800946e:	425b      	neglt	r3, r3
 8009470:	425b      	negs	r3, r3
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800947a:	4b81      	ldr	r3, [pc, #516]	; (8009680 <main+0xb48>)
 800947c:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009480:	e122      	b.n	80096c8 <main+0xb90>
				case 'r':
					amp = -amp;
 8009482:	4b7f      	ldr	r3, [pc, #508]	; (8009680 <main+0xb48>)
 8009484:	edd3 7a00 	vldr	s15, [r3]
 8009488:	eef1 7a67 	vneg.f32	s15, s15
 800948c:	4b7c      	ldr	r3, [pc, #496]	; (8009680 <main+0xb48>)
 800948e:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009492:	e119      	b.n	80096c8 <main+0xb90>
				case 'z':
					playSound( 1, 20, 100);
 8009494:	2264      	movs	r2, #100	; 0x64
 8009496:	2114      	movs	r1, #20
 8009498:	2001      	movs	r0, #1
 800949a:	f002 f857 	bl	800b54c <playSound>
					break;
 800949e:	e113      	b.n	80096c8 <main+0xb90>
				case 'u':
					stiffness += 0.001;
 80094a0:	4b78      	ldr	r3, [pc, #480]	; (8009684 <main+0xb4c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7f7 f84f 	bl	8000548 <__aeabi_f2d>
 80094aa:	a373      	add	r3, pc, #460	; (adr r3, 8009678 <main+0xb40>)
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	f7f6 feec 	bl	800028c <__adddf3>
 80094b4:	4603      	mov	r3, r0
 80094b6:	460c      	mov	r4, r1
 80094b8:	4618      	mov	r0, r3
 80094ba:	4621      	mov	r1, r4
 80094bc:	f7f7 fb94 	bl	8000be8 <__aeabi_d2f>
 80094c0:	4602      	mov	r2, r0
 80094c2:	4b70      	ldr	r3, [pc, #448]	; (8009684 <main+0xb4c>)
 80094c4:	601a      	str	r2, [r3, #0]
					break;
 80094c6:	e0ff      	b.n	80096c8 <main+0xb90>
				case 'j':
					stiffness -= 0.001;
 80094c8:	4b6e      	ldr	r3, [pc, #440]	; (8009684 <main+0xb4c>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7f7 f83b 	bl	8000548 <__aeabi_f2d>
 80094d2:	a369      	add	r3, pc, #420	; (adr r3, 8009678 <main+0xb40>)
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	f7f6 fed6 	bl	8000288 <__aeabi_dsub>
 80094dc:	4603      	mov	r3, r0
 80094de:	460c      	mov	r4, r1
 80094e0:	4618      	mov	r0, r3
 80094e2:	4621      	mov	r1, r4
 80094e4:	f7f7 fb80 	bl	8000be8 <__aeabi_d2f>
 80094e8:	4602      	mov	r2, r0
 80094ea:	4b66      	ldr	r3, [pc, #408]	; (8009684 <main+0xb4c>)
 80094ec:	601a      	str	r2, [r3, #0]
					break;
 80094ee:	e0eb      	b.n	80096c8 <main+0xb90>
				case 'p':
					//print2uart = false;
					print2uart = !print2uart;
 80094f0:	4b65      	ldr	r3, [pc, #404]	; (8009688 <main+0xb50>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	bf14      	ite	ne
 80094f8:	2301      	movne	r3, #1
 80094fa:	2300      	moveq	r3, #0
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	f083 0301 	eor.w	r3, r3, #1
 8009502:	b2db      	uxtb	r3, r3
 8009504:	f003 0301 	and.w	r3, r3, #1
 8009508:	b2da      	uxtb	r2, r3
 800950a:	4b5f      	ldr	r3, [pc, #380]	; (8009688 <main+0xb50>)
 800950c:	701a      	strb	r2, [r3, #0]
					break;
 800950e:	e0db      	b.n	80096c8 <main+0xb90>
				case 'o':
					//HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
					EN_GATE_GPIO_Port->BSRR = (uint32_t)EN_GATE_Pin << 16U;
 8009510:	4b5e      	ldr	r3, [pc, #376]	; (800968c <main+0xb54>)
 8009512:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009516:	619a      	str	r2, [r3, #24]
					break;
 8009518:	e0d6      	b.n	80096c8 <main+0xb90>
				case 'l':
					HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 800951a:	2201      	movs	r2, #1
 800951c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009520:	485a      	ldr	r0, [pc, #360]	; (800968c <main+0xb54>)
 8009522:	f7fa f8d3 	bl	80036cc <HAL_GPIO_WritePin>
					EN_GATE_GPIO_Port->BSRR = EN_GATE_Pin ;
 8009526:	4b59      	ldr	r3, [pc, #356]	; (800968c <main+0xb54>)
 8009528:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800952c:	619a      	str	r2, [r3, #24]
					break;
 800952e:	e0cb      	b.n	80096c8 <main+0xb90>
				case 'X':
					step_through_pole_angles();
 8009530:	f001 fe04 	bl	800b13c <step_through_pole_angles>
					break;
 8009534:	e0c8      	b.n	80096c8 <main+0xb90>
				case 'P':
					step_through_pwm_percent();
 8009536:	f001 ff29 	bl	800b38c <step_through_pwm_percent>
					break;
 800953a:	e0c5      	b.n	80096c8 <main+0xb90>
				case 'i':
					mode_of_control = 1;
 800953c:	4b54      	ldr	r3, [pc, #336]	; (8009690 <main+0xb58>)
 800953e:	2201      	movs	r2, #1
 8009540:	701a      	strb	r2, [r3, #0]
					break;
 8009542:	e0c1      	b.n	80096c8 <main+0xb90>
				case 'k':
					mode_of_control = 0;
 8009544:	4b52      	ldr	r3, [pc, #328]	; (8009690 <main+0xb58>)
 8009546:	2200      	movs	r2, #0
 8009548:	701a      	strb	r2, [r3, #0]
					amp = 0.05;
 800954a:	4b4d      	ldr	r3, [pc, #308]	; (8009680 <main+0xb48>)
 800954c:	4a51      	ldr	r2, [pc, #324]	; (8009694 <main+0xb5c>)
 800954e:	601a      	str	r2, [r3, #0]
					break;
 8009550:	e0ba      	b.n	80096c8 <main+0xb90>

				// pos control
				case 'W':
					pos_amp *= 2;
 8009552:	4b51      	ldr	r3, [pc, #324]	; (8009698 <main+0xb60>)
 8009554:	edd3 7a00 	vldr	s15, [r3]
 8009558:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800955c:	4b4e      	ldr	r3, [pc, #312]	; (8009698 <main+0xb60>)
 800955e:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009562:	e0b1      	b.n	80096c8 <main+0xb90>
				case 'S':
					pos_amp *= 0.5;
 8009564:	4b4c      	ldr	r3, [pc, #304]	; (8009698 <main+0xb60>)
 8009566:	edd3 7a00 	vldr	s15, [r3]
 800956a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800956e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009572:	4b49      	ldr	r3, [pc, #292]	; (8009698 <main+0xb60>)
 8009574:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009578:	e0a6      	b.n	80096c8 <main+0xb90>
				case 'D':
					pos_freq *= 2;
 800957a:	4b48      	ldr	r3, [pc, #288]	; (800969c <main+0xb64>)
 800957c:	edd3 7a00 	vldr	s15, [r3]
 8009580:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009584:	4b45      	ldr	r3, [pc, #276]	; (800969c <main+0xb64>)
 8009586:	edc3 7a00 	vstr	s15, [r3]
					break;
 800958a:	e09d      	b.n	80096c8 <main+0xb90>
				case 'A':
					pos_freq *= 0.5;
 800958c:	4b43      	ldr	r3, [pc, #268]	; (800969c <main+0xb64>)
 800958e:	edd3 7a00 	vldr	s15, [r3]
 8009592:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800959a:	4b40      	ldr	r3, [pc, #256]	; (800969c <main+0xb64>)
 800959c:	edc3 7a00 	vstr	s15, [r3]
					break;
 80095a0:	e092      	b.n	80096c8 <main+0xb90>
				case 'C':
					if (CONVERT){
 80095a2:	4b3f      	ldr	r3, [pc, #252]	; (80096a0 <main+0xb68>)
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <main+0xa7a>
						CONVERT = 0;
 80095aa:	4b3d      	ldr	r3, [pc, #244]	; (80096a0 <main+0xb68>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	701a      	strb	r2, [r3, #0]
					}
					else {
						CONVERT = 1;
					}
					break;
 80095b0:	e08a      	b.n	80096c8 <main+0xb90>
						CONVERT = 1;
 80095b2:	4b3b      	ldr	r3, [pc, #236]	; (80096a0 <main+0xb68>)
 80095b4:	2201      	movs	r2, #1
 80095b6:	701a      	strb	r2, [r3, #0]
					break;
 80095b8:	e086      	b.n	80096c8 <main+0xb90>
				case 'R':
					pos_amp_limit *= 2;
 80095ba:	4b3a      	ldr	r3, [pc, #232]	; (80096a4 <main+0xb6c>)
 80095bc:	edd3 7a00 	vldr	s15, [r3]
 80095c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80095c4:	4b37      	ldr	r3, [pc, #220]	; (80096a4 <main+0xb6c>)
 80095c6:	edc3 7a00 	vstr	s15, [r3]
					break;
 80095ca:	e07d      	b.n	80096c8 <main+0xb90>
				case 'F':
					pos_amp_limit *= 0.5;
 80095cc:	4b35      	ldr	r3, [pc, #212]	; (80096a4 <main+0xb6c>)
 80095ce:	edd3 7a00 	vldr	s15, [r3]
 80095d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80095d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095da:	4b32      	ldr	r3, [pc, #200]	; (80096a4 <main+0xb6c>)
 80095dc:	edc3 7a00 	vstr	s15, [r3]
				case 'E':
					pos_offset += 200;
 80095e0:	4b31      	ldr	r3, [pc, #196]	; (80096a8 <main+0xb70>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	33c8      	adds	r3, #200	; 0xc8
 80095e6:	4a30      	ldr	r2, [pc, #192]	; (80096a8 <main+0xb70>)
 80095e8:	6013      	str	r3, [r2, #0]
					break;
 80095ea:	e06d      	b.n	80096c8 <main+0xb90>
				case 'Q':
					pos_offset -= 200;
 80095ec:	4b2e      	ldr	r3, [pc, #184]	; (80096a8 <main+0xb70>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3bc8      	subs	r3, #200	; 0xc8
 80095f2:	4a2d      	ldr	r2, [pc, #180]	; (80096a8 <main+0xb70>)
 80095f4:	6013      	str	r3, [r2, #0]
					break;
 80095f6:	e067      	b.n	80096c8 <main+0xb90>
				case 'm':
					P_gain *= 2;
 80095f8:	4b2c      	ldr	r3, [pc, #176]	; (80096ac <main+0xb74>)
 80095fa:	edd3 7a00 	vldr	s15, [r3]
 80095fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009602:	4b2a      	ldr	r3, [pc, #168]	; (80096ac <main+0xb74>)
 8009604:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009608:	e05e      	b.n	80096c8 <main+0xb90>
				case 'n':
					P_gain *= 0.5;
 800960a:	4b28      	ldr	r3, [pc, #160]	; (80096ac <main+0xb74>)
 800960c:	edd3 7a00 	vldr	s15, [r3]
 8009610:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009618:	4b24      	ldr	r3, [pc, #144]	; (80096ac <main+0xb74>)
 800961a:	edc3 7a00 	vstr	s15, [r3]
					break;
 800961e:	e053      	b.n	80096c8 <main+0xb90>
				case 'T':
					wave_mode = 0;
 8009620:	4b23      	ldr	r3, [pc, #140]	; (80096b0 <main+0xb78>)
 8009622:	2200      	movs	r2, #0
 8009624:	701a      	strb	r2, [r3, #0]
					break;
 8009626:	e04f      	b.n	80096c8 <main+0xb90>
				case 'G':
					wave_mode = 1;
 8009628:	4b21      	ldr	r3, [pc, #132]	; (80096b0 <main+0xb78>)
 800962a:	2201      	movs	r2, #1
 800962c:	701a      	strb	r2, [r3, #0]
					break;
 800962e:	e04b      	b.n	80096c8 <main+0xb90>
				case 'B':
					wave_mode = 2;
 8009630:	4b1f      	ldr	r3, [pc, #124]	; (80096b0 <main+0xb78>)
 8009632:	2202      	movs	r2, #2
 8009634:	701a      	strb	r2, [r3, #0]
					break;
 8009636:	e047      	b.n	80096c8 <main+0xb90>
				case 'L':
					explore_limits();
 8009638:	f001 fee2 	bl	800b400 <explore_limits>
					break;
 800963c:	e044      	b.n	80096c8 <main+0xb90>
				case 'I':
					amp_harmonic += 0.1f;
 800963e:	4b1d      	ldr	r3, [pc, #116]	; (80096b4 <main+0xb7c>)
 8009640:	edd3 7a00 	vldr	s15, [r3]
 8009644:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80096b8 <main+0xb80>
 8009648:	ee77 7a87 	vadd.f32	s15, s15, s14
 800964c:	4b19      	ldr	r3, [pc, #100]	; (80096b4 <main+0xb7c>)
 800964e:	edc3 7a00 	vstr	s15, [r3]
					calc_lookup(lookup);
 8009652:	481a      	ldr	r0, [pc, #104]	; (80096bc <main+0xb84>)
 8009654:	f001 ffb8 	bl	800b5c8 <calc_lookup>
					break;
 8009658:	e036      	b.n	80096c8 <main+0xb90>
				case 'K':
					amp_harmonic -= 0.1f;
 800965a:	4b16      	ldr	r3, [pc, #88]	; (80096b4 <main+0xb7c>)
 800965c:	edd3 7a00 	vldr	s15, [r3]
 8009660:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80096b8 <main+0xb80>
 8009664:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009668:	4b12      	ldr	r3, [pc, #72]	; (80096b4 <main+0xb7c>)
 800966a:	edc3 7a00 	vstr	s15, [r3]
					calc_lookup(lookup);
 800966e:	4813      	ldr	r0, [pc, #76]	; (80096bc <main+0xb84>)
 8009670:	f001 ffaa 	bl	800b5c8 <calc_lookup>
					break;
 8009674:	e028      	b.n	80096c8 <main+0xb90>
 8009676:	bf00      	nop
 8009678:	d2f1a9fc 	.word	0xd2f1a9fc
 800967c:	3f50624d 	.word	0x3f50624d
 8009680:	20000010 	.word	0x20000010
 8009684:	200000cc 	.word	0x200000cc
 8009688:	20000034 	.word	0x20000034
 800968c:	40021000 	.word	0x40021000
 8009690:	2000010e 	.word	0x2000010e
 8009694:	3d4ccccd 	.word	0x3d4ccccd
 8009698:	2000001c 	.word	0x2000001c
 800969c:	20000020 	.word	0x20000020
 80096a0:	200000cb 	.word	0x200000cb
 80096a4:	20000024 	.word	0x20000024
 80096a8:	200000d0 	.word	0x200000d0
 80096ac:	20000028 	.word	0x20000028
 80096b0:	2000010c 	.word	0x2000010c
 80096b4:	20000038 	.word	0x20000038
 80096b8:	3dcccccd 	.word	0x3dcccccd
 80096bc:	200001dc 	.word	0x200001dc

				default:
					ch='.';
 80096c0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80096c4:	222e      	movs	r2, #46	; 0x2e
 80096c6:	701a      	strb	r2, [r3, #0]
			}

			//HAL_ADCEx_InjectedStart (&hadc1);
			//HAL_ADCEx_InjectedPollForConversion (&hadc1, 1); //this command is not necessary to get values - it was in for a long time

			uint32_t val_I = HAL_ADCEx_InjectedGetValue (&hadc1, 1);
 80096c8:	2101      	movs	r1, #1
 80096ca:	48ce      	ldr	r0, [pc, #824]	; (8009a04 <main+0xecc>)
 80096cc:	f7f8 fad8 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 80096d0:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
			uint32_t val_ASENSE = HAL_ADCEx_InjectedGetValue (&hadc1, 2);
 80096d4:	2102      	movs	r1, #2
 80096d6:	48cb      	ldr	r0, [pc, #812]	; (8009a04 <main+0xecc>)
 80096d8:	f7f8 fad2 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 80096dc:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
			uint32_t val_STRAIN0 = HAL_ADCEx_InjectedGetValue (&hadc1, 3); //last number refers to rank
 80096e0:	2103      	movs	r1, #3
 80096e2:	48c8      	ldr	r0, [pc, #800]	; (8009a04 <main+0xecc>)
 80096e4:	f7f8 facc 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 80096e8:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
			uint32_t val_M0_TEMP = HAL_ADCEx_InjectedGetValue (&hadc1, 4);
 80096ec:	2104      	movs	r1, #4
 80096ee:	48c5      	ldr	r0, [pc, #788]	; (8009a04 <main+0xecc>)
 80096f0:	f7f8 fac6 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 80096f4:	f8c7 02c8 	str.w	r0, [r7, #712]	; 0x2c8

			uint32_t val_SO1 = HAL_ADCEx_InjectedGetValue (&hadc2, 1);
 80096f8:	2101      	movs	r1, #1
 80096fa:	48c3      	ldr	r0, [pc, #780]	; (8009a08 <main+0xed0>)
 80096fc:	f7f8 fac0 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 8009700:	f8c7 02c4 	str.w	r0, [r7, #708]	; 0x2c4
			uint32_t val_BSENSE = HAL_ADCEx_InjectedGetValue (&hadc2, 2);
 8009704:	2102      	movs	r1, #2
 8009706:	48c0      	ldr	r0, [pc, #768]	; (8009a08 <main+0xed0>)
 8009708:	f7f8 faba 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 800970c:	f8c7 02c0 	str.w	r0, [r7, #704]	; 0x2c0
			uint32_t val_STRAIN1 = HAL_ADCEx_InjectedGetValue (&hadc2, 3);
 8009710:	2103      	movs	r1, #3
 8009712:	48bd      	ldr	r0, [pc, #756]	; (8009a08 <main+0xed0>)
 8009714:	f7f8 fab4 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 8009718:	f8c7 02bc 	str.w	r0, [r7, #700]	; 0x2bc
			uint32_t val_TEMP = HAL_ADCEx_InjectedGetValue (&hadc2, 4);
 800971c:	2104      	movs	r1, #4
 800971e:	48ba      	ldr	r0, [pc, #744]	; (8009a08 <main+0xed0>)
 8009720:	f7f8 faae 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 8009724:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
			uint32_t val_VBUS = HAL_ADCEx_InjectedGetValue (&hadc2, 5); //TODO this value is not read out correctly - always comes as 0
 8009728:	2105      	movs	r1, #5
 800972a:	48b7      	ldr	r0, [pc, #732]	; (8009a08 <main+0xed0>)
 800972c:	f7f8 faa8 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 8009730:	f8c7 02b4 	str.w	r0, [r7, #692]	; 0x2b4

			uint32_t val_SO2 = HAL_ADCEx_InjectedGetValue (&hadc3, 1);
 8009734:	2101      	movs	r1, #1
 8009736:	48b5      	ldr	r0, [pc, #724]	; (8009a0c <main+0xed4>)
 8009738:	f7f8 faa2 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 800973c:	f8c7 02b0 	str.w	r0, [r7, #688]	; 0x2b0
			uint32_t val_CSENSE = HAL_ADCEx_InjectedGetValue (&hadc3, 2);
 8009740:	2102      	movs	r1, #2
 8009742:	48b2      	ldr	r0, [pc, #712]	; (8009a0c <main+0xed4>)
 8009744:	f7f8 fa9c 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 8009748:	f8c7 02ac 	str.w	r0, [r7, #684]	; 0x2ac

//			// --- read angle
				//uint8_t spi_address_8[2];
				//uint8_t angle8[2];
				spi_address_8[1]= 0x7F;
 800974c:	f107 030c 	add.w	r3, r7, #12
 8009750:	227f      	movs	r2, #127	; 0x7f
 8009752:	705a      	strb	r2, [r3, #1]
				spi_address_8[0]= 0xFE;
 8009754:	f107 030c 	add.w	r3, r7, #12
 8009758:	22fe      	movs	r2, #254	; 0xfe
 800975a:	701a      	strb	r2, [r3, #0]
				//address8 = {0xFE, 0x7F};
				//address = 0x3FFE | AS_READ ;
				delay_SPI();
 800975c:	f001 fede 	bl	800b51c <delay_SPI>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8009760:	2200      	movs	r2, #0
 8009762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009766:	48aa      	ldr	r0, [pc, #680]	; (8009a10 <main+0xed8>)
 8009768:	f7f9 ffb0 	bl	80036cc <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 800976c:	f107 010c 	add.w	r1, r7, #12
 8009770:	2301      	movs	r3, #1
 8009772:	2201      	movs	r2, #1
 8009774:	48a7      	ldr	r0, [pc, #668]	; (8009a14 <main+0xedc>)
 8009776:	f7fb ff32 	bl	80055de <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 800977a:	2201      	movs	r2, #1
 800977c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009780:	48a3      	ldr	r0, [pc, #652]	; (8009a10 <main+0xed8>)
 8009782:	f7f9 ffa3 	bl	80036cc <HAL_GPIO_WritePin>
				delay_SPI();
 8009786:	f001 fec9 	bl	800b51c <delay_SPI>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 800978a:	2200      	movs	r2, #0
 800978c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009790:	489f      	ldr	r0, [pc, #636]	; (8009a10 <main+0xed8>)
 8009792:	f7f9 ff9b 	bl	80036cc <HAL_GPIO_WritePin>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&angle8, 1, 1);
 8009796:	1d39      	adds	r1, r7, #4
 8009798:	2301      	movs	r3, #1
 800979a:	2201      	movs	r2, #1
 800979c:	489d      	ldr	r0, [pc, #628]	; (8009a14 <main+0xedc>)
 800979e:	f7fc f852 	bl	8005846 <HAL_SPI_Receive>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80097a2:	2201      	movs	r2, #1
 80097a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80097a8:	4899      	ldr	r0, [pc, #612]	; (8009a10 <main+0xed8>)
 80097aa:	f7f9 ff8f 	bl	80036cc <HAL_GPIO_WritePin>
				angle = (uint16_t) angle8[0] | (uint16_t) angle8[1] << 8U;
 80097ae:	1d3b      	adds	r3, r7, #4
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	b21a      	sxth	r2, r3
 80097b4:	1d3b      	adds	r3, r7, #4
 80097b6:	785b      	ldrb	r3, [r3, #1]
 80097b8:	021b      	lsls	r3, r3, #8
 80097ba:	b21b      	sxth	r3, r3
 80097bc:	4313      	orrs	r3, r2
 80097be:	b21b      	sxth	r3, r3
 80097c0:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
				angle &= AS_DATA_MASK;
 80097c4:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80097c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80097cc:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

				uint32_t time10mus = TIM5->CNT;
 80097d0:	4b91      	ldr	r3, [pc, #580]	; (8009a18 <main+0xee0>)
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8

				if (print2uart){
 80097d8:	4b90      	ldr	r3, [pc, #576]	; (8009a1c <main+0xee4>)
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f000 8381 	beq.w	8009ee4 <main+0x13ac>


						//                   0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5


						sprintf((char*)buf, "tx: %c %4d %4d %4d %4d ", ch, tx_msg[0],rx_msg[1],rx_msg[2],rx_msg[3]);
 80097e2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	461c      	mov	r4, r3
 80097ea:	4b8d      	ldr	r3, [pc, #564]	; (8009a20 <main+0xee8>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	461d      	mov	r5, r3
 80097f0:	4b8c      	ldr	r3, [pc, #560]	; (8009a24 <main+0xeec>)
 80097f2:	785b      	ldrb	r3, [r3, #1]
 80097f4:	461a      	mov	r2, r3
 80097f6:	4b8b      	ldr	r3, [pc, #556]	; (8009a24 <main+0xeec>)
 80097f8:	789b      	ldrb	r3, [r3, #2]
 80097fa:	4619      	mov	r1, r3
 80097fc:	4b89      	ldr	r3, [pc, #548]	; (8009a24 <main+0xeec>)
 80097fe:	78db      	ldrb	r3, [r3, #3]
 8009800:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8009804:	9302      	str	r3, [sp, #8]
 8009806:	9101      	str	r1, [sp, #4]
 8009808:	9200      	str	r2, [sp, #0]
 800980a:	462b      	mov	r3, r5
 800980c:	4622      	mov	r2, r4
 800980e:	4986      	ldr	r1, [pc, #536]	; (8009a28 <main+0xef0>)
 8009810:	f003 fe20 	bl	800d454 <siprintf>

						sprintf((char*)buf_add, " rx:%c %4d %4d %4d %4d %4d", rx_character, rx_control_0, rx_control_1, rx_mode_0, rx_mode_1, rx_intent); strcat(buf, buf_add);
 8009814:	4b85      	ldr	r3, [pc, #532]	; (8009a2c <main+0xef4>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	461d      	mov	r5, r3
 800981a:	4b85      	ldr	r3, [pc, #532]	; (8009a30 <main+0xef8>)
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	461e      	mov	r6, r3
 8009820:	4b84      	ldr	r3, [pc, #528]	; (8009a34 <main+0xefc>)
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	461a      	mov	r2, r3
 8009826:	4b84      	ldr	r3, [pc, #528]	; (8009a38 <main+0xf00>)
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	4619      	mov	r1, r3
 800982c:	4b83      	ldr	r3, [pc, #524]	; (8009a3c <main+0xf04>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	461c      	mov	r4, r3
 8009832:	4b83      	ldr	r3, [pc, #524]	; (8009a40 <main+0xf08>)
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800983a:	9303      	str	r3, [sp, #12]
 800983c:	9402      	str	r4, [sp, #8]
 800983e:	9101      	str	r1, [sp, #4]
 8009840:	9200      	str	r2, [sp, #0]
 8009842:	4633      	mov	r3, r6
 8009844:	462a      	mov	r2, r5
 8009846:	497f      	ldr	r1, [pc, #508]	; (8009a44 <main+0xf0c>)
 8009848:	f003 fe04 	bl	800d454 <siprintf>
 800984c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009850:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009854:	4611      	mov	r1, r2
 8009856:	4618      	mov	r0, r3
 8009858:	f003 fe1c 	bl	800d494 <strcat>

						sprintf((char*)buf_add, " p0:%4.2f", phase0); strcat(buf, buf_add);
 800985c:	4b7a      	ldr	r3, [pc, #488]	; (8009a48 <main+0xf10>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4618      	mov	r0, r3
 8009862:	f7f6 fe71 	bl	8000548 <__aeabi_f2d>
 8009866:	4603      	mov	r3, r0
 8009868:	460c      	mov	r4, r1
 800986a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800986e:	461a      	mov	r2, r3
 8009870:	4623      	mov	r3, r4
 8009872:	4976      	ldr	r1, [pc, #472]	; (8009a4c <main+0xf14>)
 8009874:	f003 fdee 	bl	800d454 <siprintf>
 8009878:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800987c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009880:	4611      	mov	r1, r2
 8009882:	4618      	mov	r0, r3
 8009884:	f003 fe06 	bl	800d494 <strcat>

						sprintf((char*)buf_add, " ps:%4.2f", phase_shift); strcat(buf, buf_add);
 8009888:	4b71      	ldr	r3, [pc, #452]	; (8009a50 <main+0xf18>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4618      	mov	r0, r3
 800988e:	f7f6 fe5b 	bl	8000548 <__aeabi_f2d>
 8009892:	4603      	mov	r3, r0
 8009894:	460c      	mov	r4, r1
 8009896:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800989a:	461a      	mov	r2, r3
 800989c:	4623      	mov	r3, r4
 800989e:	496d      	ldr	r1, [pc, #436]	; (8009a54 <main+0xf1c>)
 80098a0:	f003 fdd8 	bl	800d454 <siprintf>
 80098a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80098a8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80098ac:	4611      	mov	r1, r2
 80098ae:	4618      	mov	r0, r3
 80098b0:	f003 fdf0 	bl	800d494 <strcat>

						sprintf((char*)buf_add, " amp:%3.2f", amp); strcat(buf, buf_add);
 80098b4:	4b68      	ldr	r3, [pc, #416]	; (8009a58 <main+0xf20>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7f6 fe45 	bl	8000548 <__aeabi_f2d>
 80098be:	4603      	mov	r3, r0
 80098c0:	460c      	mov	r4, r1
 80098c2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80098c6:	461a      	mov	r2, r3
 80098c8:	4623      	mov	r3, r4
 80098ca:	4964      	ldr	r1, [pc, #400]	; (8009a5c <main+0xf24>)
 80098cc:	f003 fdc2 	bl	800d454 <siprintf>
 80098d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80098d4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80098d8:	4611      	mov	r1, r2
 80098da:	4618      	mov	r0, r3
 80098dc:	f003 fdda 	bl	800d494 <strcat>

						sprintf((char*)buf_add, " av:%5.2f", av_start_angle); strcat(buf, buf_add);
 80098e0:	4b5f      	ldr	r3, [pc, #380]	; (8009a60 <main+0xf28>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7f6 fe2f 	bl	8000548 <__aeabi_f2d>
 80098ea:	4603      	mov	r3, r0
 80098ec:	460c      	mov	r4, r1
 80098ee:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80098f2:	461a      	mov	r2, r3
 80098f4:	4623      	mov	r3, r4
 80098f6:	495b      	ldr	r1, [pc, #364]	; (8009a64 <main+0xf2c>)
 80098f8:	f003 fdac 	bl	800d454 <siprintf>
 80098fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009900:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009904:	4611      	mov	r1, r2
 8009906:	4618      	mov	r0, r3
 8009908:	f003 fdc4 	bl	800d494 <strcat>

						sprintf((char*)buf_add, " a:%5d", angle); strcat(buf, buf_add);
 800990c:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009910:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009914:	4954      	ldr	r1, [pc, #336]	; (8009a68 <main+0xf30>)
 8009916:	4618      	mov	r0, r3
 8009918:	f003 fd9c 	bl	800d454 <siprintf>
 800991c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009920:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009924:	4611      	mov	r1, r2
 8009926:	4618      	mov	r0, r3
 8009928:	f003 fdb4 	bl	800d494 <strcat>

						sprintf((char*)buf_add, " E:%5d", EncVal); strcat(buf, buf_add);
 800992c:	4b4f      	ldr	r3, [pc, #316]	; (8009a6c <main+0xf34>)
 800992e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009932:	461a      	mov	r2, r3
 8009934:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009938:	494d      	ldr	r1, [pc, #308]	; (8009a70 <main+0xf38>)
 800993a:	4618      	mov	r0, r3
 800993c:	f003 fd8a 	bl	800d454 <siprintf>
 8009940:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009944:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009948:	4611      	mov	r1, r2
 800994a:	4618      	mov	r0, r3
 800994c:	f003 fda2 	bl	800d494 <strcat>

						sprintf((char*)buf_add, " c:%5d", rotation_counter); strcat(buf, buf_add);
 8009950:	4b48      	ldr	r3, [pc, #288]	; (8009a74 <main+0xf3c>)
 8009952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009956:	461a      	mov	r2, r3
 8009958:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800995c:	4946      	ldr	r1, [pc, #280]	; (8009a78 <main+0xf40>)
 800995e:	4618      	mov	r0, r3
 8009960:	f003 fd78 	bl	800d454 <siprintf>
 8009964:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009968:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800996c:	4611      	mov	r1, r2
 800996e:	4618      	mov	r0, r3
 8009970:	f003 fd90 	bl	800d494 <strcat>

						sprintf((char*)buf_add, " v:%6.2f", av_velocity); strcat(buf, buf_add);
 8009974:	4b41      	ldr	r3, [pc, #260]	; (8009a7c <main+0xf44>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4618      	mov	r0, r3
 800997a:	f7f6 fde5 	bl	8000548 <__aeabi_f2d>
 800997e:	4603      	mov	r3, r0
 8009980:	460c      	mov	r4, r1
 8009982:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009986:	461a      	mov	r2, r3
 8009988:	4623      	mov	r3, r4
 800998a:	493d      	ldr	r1, [pc, #244]	; (8009a80 <main+0xf48>)
 800998c:	f003 fd62 	bl	800d454 <siprintf>
 8009990:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009994:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009998:	4611      	mov	r1, r2
 800999a:	4618      	mov	r0, r3
 800999c:	f003 fd7a 	bl	800d494 <strcat>

						sprintf((char*)buf_add, " s:%4.3f", stiffness); strcat(buf, buf_add);
 80099a0:	4b38      	ldr	r3, [pc, #224]	; (8009a84 <main+0xf4c>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7f6 fdcf 	bl	8000548 <__aeabi_f2d>
 80099aa:	4603      	mov	r3, r0
 80099ac:	460c      	mov	r4, r1
 80099ae:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80099b2:	461a      	mov	r2, r3
 80099b4:	4623      	mov	r3, r4
 80099b6:	4934      	ldr	r1, [pc, #208]	; (8009a88 <main+0xf50>)
 80099b8:	f003 fd4c 	bl	800d454 <siprintf>
 80099bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80099c0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80099c4:	4611      	mov	r1, r2
 80099c6:	4618      	mov	r0, r3
 80099c8:	f003 fd64 	bl	800d494 <strcat>

						sprintf((char*)buf_add, " h:%4.3f", amp_harmonic); strcat(buf, buf_add);
 80099cc:	4b2f      	ldr	r3, [pc, #188]	; (8009a8c <main+0xf54>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7f6 fdb9 	bl	8000548 <__aeabi_f2d>
 80099d6:	4603      	mov	r3, r0
 80099d8:	460c      	mov	r4, r1
 80099da:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80099de:	461a      	mov	r2, r3
 80099e0:	4623      	mov	r3, r4
 80099e2:	492b      	ldr	r1, [pc, #172]	; (8009a90 <main+0xf58>)
 80099e4:	f003 fd36 	bl	800d454 <siprintf>
 80099e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80099ec:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80099f0:	4611      	mov	r1, r2
 80099f2:	4618      	mov	r0, r3
 80099f4:	f003 fd4e 	bl	800d494 <strcat>

						//sprintf((char*)buf_add, " d:%2d", direction); strcat(buf, buf_add);

						if (CONVERT){
 80099f8:	4b26      	ldr	r3, [pc, #152]	; (8009a94 <main+0xf5c>)
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 811b 	beq.w	8009c38 <main+0x1100>
 8009a02:	e049      	b.n	8009a98 <main+0xf60>
 8009a04:	20000c2c 	.word	0x20000c2c
 8009a08:	200005a4 	.word	0x200005a4
 8009a0c:	20000c74 	.word	0x20000c74
 8009a10:	40020c00 	.word	0x40020c00
 8009a14:	20000184 	.word	0x20000184
 8009a18:	40000c00 	.word	0x40000c00
 8009a1c:	20000034 	.word	0x20000034
 8009a20:	20000aa0 	.word	0x20000aa0
 8009a24:	20000bec 	.word	0x20000bec
 8009a28:	0800fe08 	.word	0x0800fe08
 8009a2c:	20000006 	.word	0x20000006
 8009a30:	200000c4 	.word	0x200000c4
 8009a34:	200000c6 	.word	0x200000c6
 8009a38:	200000c8 	.word	0x200000c8
 8009a3c:	200000c9 	.word	0x200000c9
 8009a40:	200000ca 	.word	0x200000ca
 8009a44:	0800fe20 	.word	0x0800fe20
 8009a48:	20000008 	.word	0x20000008
 8009a4c:	0800fe3c 	.word	0x0800fe3c
 8009a50:	20000018 	.word	0x20000018
 8009a54:	0800fe48 	.word	0x0800fe48
 8009a58:	20000010 	.word	0x20000010
 8009a5c:	0800fe54 	.word	0x0800fe54
 8009a60:	20000e28 	.word	0x20000e28
 8009a64:	0800fe60 	.word	0x0800fe60
 8009a68:	0800fe6c 	.word	0x0800fe6c
 8009a6c:	20000cfc 	.word	0x20000cfc
 8009a70:	0800fe74 	.word	0x0800fe74
 8009a74:	200000d4 	.word	0x200000d4
 8009a78:	0800fe7c 	.word	0x0800fe7c
 8009a7c:	200000e4 	.word	0x200000e4
 8009a80:	0800fe84 	.word	0x0800fe84
 8009a84:	200000cc 	.word	0x200000cc
 8009a88:	0800fe90 	.word	0x0800fe90
 8009a8c:	20000038 	.word	0x20000038
 8009a90:	0800fe9c 	.word	0x0800fe9c
 8009a94:	200000cb 	.word	0x200000cb
							float SO0 = ((float)val_I - 2040.0) * 0.134; // 3.3[V]/4095[ticks] /20[gain]/0.0003[ohm] = 0.134
 8009a98:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8009a9c:	ee07 3a90 	vmov	s15, r3
 8009aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa4:	ee17 0a90 	vmov	r0, s15
 8009aa8:	f7f6 fd4e 	bl	8000548 <__aeabi_f2d>
 8009aac:	f04f 0200 	mov.w	r2, #0
 8009ab0:	4baf      	ldr	r3, [pc, #700]	; (8009d70 <main+0x1238>)
 8009ab2:	f7f6 fbe9 	bl	8000288 <__aeabi_dsub>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	460c      	mov	r4, r1
 8009aba:	4618      	mov	r0, r3
 8009abc:	4621      	mov	r1, r4
 8009abe:	a3a2      	add	r3, pc, #648	; (adr r3, 8009d48 <main+0x1210>)
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	f7f6 fd98 	bl	80005f8 <__aeabi_dmul>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	460c      	mov	r4, r1
 8009acc:	4618      	mov	r0, r3
 8009ace:	4621      	mov	r1, r4
 8009ad0:	f7f7 f88a 	bl	8000be8 <__aeabi_d2f>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
							float SO1 = ((float)val_SO1 - 2002.0) * 0.189; // 3.3[V]/4095[ticks] /20[gain]/0.0003[ohm] = 0.134 //TODO verify SPI setting in DRV8301 the factor sqrt(2) comes out of thin air
 8009ada:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8009ade:	ee07 3a90 	vmov	s15, r3
 8009ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae6:	ee17 0a90 	vmov	r0, s15
 8009aea:	f7f6 fd2d 	bl	8000548 <__aeabi_f2d>
 8009aee:	a398      	add	r3, pc, #608	; (adr r3, 8009d50 <main+0x1218>)
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	f7f6 fbc8 	bl	8000288 <__aeabi_dsub>
 8009af8:	4603      	mov	r3, r0
 8009afa:	460c      	mov	r4, r1
 8009afc:	4618      	mov	r0, r3
 8009afe:	4621      	mov	r1, r4
 8009b00:	a395      	add	r3, pc, #596	; (adr r3, 8009d58 <main+0x1220>)
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	f7f6 fd77 	bl	80005f8 <__aeabi_dmul>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	4618      	mov	r0, r3
 8009b10:	4621      	mov	r1, r4
 8009b12:	f7f7 f869 	bl	8000be8 <__aeabi_d2f>
 8009b16:	4603      	mov	r3, r0
 8009b18:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
							float SO2 = ((float)val_SO2 - 2002.0) * 0.189; // 3.3[V]/4095[ticks] /20[gain]/0.0003[ohm] = 0.134
 8009b1c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8009b20:	ee07 3a90 	vmov	s15, r3
 8009b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b28:	ee17 0a90 	vmov	r0, s15
 8009b2c:	f7f6 fd0c 	bl	8000548 <__aeabi_f2d>
 8009b30:	a387      	add	r3, pc, #540	; (adr r3, 8009d50 <main+0x1218>)
 8009b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b36:	f7f6 fba7 	bl	8000288 <__aeabi_dsub>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	460c      	mov	r4, r1
 8009b3e:	4618      	mov	r0, r3
 8009b40:	4621      	mov	r1, r4
 8009b42:	a385      	add	r3, pc, #532	; (adr r3, 8009d58 <main+0x1220>)
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	f7f6 fd56 	bl	80005f8 <__aeabi_dmul>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	460c      	mov	r4, r1
 8009b50:	4618      	mov	r0, r3
 8009b52:	4621      	mov	r1, r4
 8009b54:	f7f7 f848 	bl	8000be8 <__aeabi_d2f>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
							sprintf((char*)buf_add, " I:%5.2fA SO1:%5.2fA SO2:%5.2fA", SO0, SO1, SO2); strcat(buf, buf_add);
 8009b5e:	f8d7 02a4 	ldr.w	r0, [r7, #676]	; 0x2a4
 8009b62:	f7f6 fcf1 	bl	8000548 <__aeabi_f2d>
 8009b66:	4680      	mov	r8, r0
 8009b68:	4689      	mov	r9, r1
 8009b6a:	f8d7 02a0 	ldr.w	r0, [r7, #672]	; 0x2a0
 8009b6e:	f7f6 fceb 	bl	8000548 <__aeabi_f2d>
 8009b72:	4604      	mov	r4, r0
 8009b74:	460d      	mov	r5, r1
 8009b76:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 8009b7a:	f7f6 fce5 	bl	8000548 <__aeabi_f2d>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009b86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b8a:	e9cd 4500 	strd	r4, r5, [sp]
 8009b8e:	4642      	mov	r2, r8
 8009b90:	464b      	mov	r3, r9
 8009b92:	4978      	ldr	r1, [pc, #480]	; (8009d74 <main+0x123c>)
 8009b94:	f003 fc5e 	bl	800d454 <siprintf>
 8009b98:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009b9c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f003 fc76 	bl	800d494 <strcat>

							float I_tot = sqrt((SO0*SO0 + SO1*SO1 + SO2*SO2)/1.5); //see colab - the factor 1.5 allows to extract the distance from center of triangle to tip
 8009ba8:	ed97 7aa9 	vldr	s14, [r7, #676]	; 0x2a4
 8009bac:	edd7 7aa9 	vldr	s15, [r7, #676]	; 0x2a4
 8009bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bb4:	edd7 6aa8 	vldr	s13, [r7, #672]	; 0x2a0
 8009bb8:	edd7 7aa8 	vldr	s15, [r7, #672]	; 0x2a0
 8009bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009bc4:	edd7 6aa7 	vldr	s13, [r7, #668]	; 0x29c
 8009bc8:	edd7 7aa7 	vldr	s15, [r7, #668]	; 0x29c
 8009bcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bd4:	ee17 0a90 	vmov	r0, s15
 8009bd8:	f7f6 fcb6 	bl	8000548 <__aeabi_f2d>
 8009bdc:	f04f 0200 	mov.w	r2, #0
 8009be0:	4b65      	ldr	r3, [pc, #404]	; (8009d78 <main+0x1240>)
 8009be2:	f7f6 fe33 	bl	800084c <__aeabi_ddiv>
 8009be6:	4603      	mov	r3, r0
 8009be8:	460c      	mov	r4, r1
 8009bea:	ec44 3b17 	vmov	d7, r3, r4
 8009bee:	eeb0 0a47 	vmov.f32	s0, s14
 8009bf2:	eef0 0a67 	vmov.f32	s1, s15
 8009bf6:	f004 fa3f 	bl	800e078 <sqrt>
 8009bfa:	ec54 3b10 	vmov	r3, r4, d0
 8009bfe:	4618      	mov	r0, r3
 8009c00:	4621      	mov	r1, r4
 8009c02:	f7f6 fff1 	bl	8000be8 <__aeabi_d2f>
 8009c06:	4603      	mov	r3, r0
 8009c08:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
							sprintf((char*)buf_add, " It:%5.2fA", I_tot); strcat(buf, buf_add);
 8009c0c:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8009c10:	f7f6 fc9a 	bl	8000548 <__aeabi_f2d>
 8009c14:	4603      	mov	r3, r0
 8009c16:	460c      	mov	r4, r1
 8009c18:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	4623      	mov	r3, r4
 8009c20:	4956      	ldr	r1, [pc, #344]	; (8009d7c <main+0x1244>)
 8009c22:	f003 fc17 	bl	800d454 <siprintf>
 8009c26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009c2a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009c2e:	4611      	mov	r1, r2
 8009c30:	4618      	mov	r0, r3
 8009c32:	f003 fc2f 	bl	800d494 <strcat>
 8009c36:	e013      	b.n	8009c60 <main+0x1128>
						}
						else{
							sprintf((char*)buf_add, " I:%4d SO1:%4d SO2:%4d", val_I, val_SO1, val_SO2); strcat(buf, buf_add);
 8009c38:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009c3c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8009c46:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 8009c4a:	494d      	ldr	r1, [pc, #308]	; (8009d80 <main+0x1248>)
 8009c4c:	f003 fc02 	bl	800d454 <siprintf>
 8009c50:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009c54:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009c58:	4611      	mov	r1, r2
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f003 fc1a 	bl	800d494 <strcat>
						}

						sprintf((char*)buf_add, " A:%4d B:%4d C:%4d", val_ASENSE, val_BSENSE, val_CSENSE); strcat(buf, buf_add);
 8009c60:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009c64:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8009c6e:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8009c72:	4944      	ldr	r1, [pc, #272]	; (8009d84 <main+0x124c>)
 8009c74:	f003 fbee 	bl	800d454 <siprintf>
 8009c78:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009c7c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009c80:	4611      	mov	r1, r2
 8009c82:	4618      	mov	r0, r3
 8009c84:	f003 fc06 	bl	800d494 <strcat>

						if (CONVERT){
 8009c88:	4b3f      	ldr	r3, [pc, #252]	; (8009d88 <main+0x1250>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d07f      	beq.n	8009d90 <main+0x1258>
							float STRAIN0 = ((float)val_STRAIN0 - 2235.0) * 1.678; // 3.3/4095/0.00048[gain see page 114] = 1.678
 8009c90:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8009c94:	ee07 3a90 	vmov	s15, r3
 8009c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9c:	ee17 0a90 	vmov	r0, s15
 8009ca0:	f7f6 fc52 	bl	8000548 <__aeabi_f2d>
 8009ca4:	a32e      	add	r3, pc, #184	; (adr r3, 8009d60 <main+0x1228>)
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	f7f6 faed 	bl	8000288 <__aeabi_dsub>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	a32c      	add	r3, pc, #176	; (adr r3, 8009d68 <main+0x1230>)
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	f7f6 fc9c 	bl	80005f8 <__aeabi_dmul>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	f7f6 ff8e 	bl	8000be8 <__aeabi_d2f>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
							float STRAIN1 = ((float)val_STRAIN1 - 2235.0) * 1.678;
 8009cd2:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8009cd6:	ee07 3a90 	vmov	s15, r3
 8009cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cde:	ee17 0a90 	vmov	r0, s15
 8009ce2:	f7f6 fc31 	bl	8000548 <__aeabi_f2d>
 8009ce6:	a31e      	add	r3, pc, #120	; (adr r3, 8009d60 <main+0x1228>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f7f6 facc 	bl	8000288 <__aeabi_dsub>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	a31b      	add	r3, pc, #108	; (adr r3, 8009d68 <main+0x1230>)
 8009cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfe:	f7f6 fc7b 	bl	80005f8 <__aeabi_dmul>
 8009d02:	4603      	mov	r3, r0
 8009d04:	460c      	mov	r4, r1
 8009d06:	4618      	mov	r0, r3
 8009d08:	4621      	mov	r1, r4
 8009d0a:	f7f6 ff6d 	bl	8000be8 <__aeabi_d2f>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
							sprintf((char*)buf_add, " S0:%5.1fN S1:%4dN", STRAIN0, val_STRAIN1); strcat(buf, buf_add);
 8009d14:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 8009d18:	f7f6 fc16 	bl	8000548 <__aeabi_f2d>
 8009d1c:	460a      	mov	r2, r1
 8009d1e:	4601      	mov	r1, r0
 8009d20:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009d24:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	460a      	mov	r2, r1
 8009d2e:	4917      	ldr	r1, [pc, #92]	; (8009d8c <main+0x1254>)
 8009d30:	f003 fb90 	bl	800d454 <siprintf>
 8009d34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009d38:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f003 fba8 	bl	800d494 <strcat>
 8009d44:	e035      	b.n	8009db2 <main+0x127a>
 8009d46:	bf00      	nop
 8009d48:	78d4fdf4 	.word	0x78d4fdf4
 8009d4c:	3fc126e9 	.word	0x3fc126e9
 8009d50:	00000000 	.word	0x00000000
 8009d54:	409f4800 	.word	0x409f4800
 8009d58:	e978d4fe 	.word	0xe978d4fe
 8009d5c:	3fc83126 	.word	0x3fc83126
 8009d60:	00000000 	.word	0x00000000
 8009d64:	40a17600 	.word	0x40a17600
 8009d68:	872b020c 	.word	0x872b020c
 8009d6c:	3ffad916 	.word	0x3ffad916
 8009d70:	409fe000 	.word	0x409fe000
 8009d74:	0800fea8 	.word	0x0800fea8
 8009d78:	3ff80000 	.word	0x3ff80000
 8009d7c:	0800fec8 	.word	0x0800fec8
 8009d80:	0800fed4 	.word	0x0800fed4
 8009d84:	0800feec 	.word	0x0800feec
 8009d88:	200000cb 	.word	0x200000cb
 8009d8c:	0800ff00 	.word	0x0800ff00
						}
						else{
							sprintf((char*)buf_add, " S0:%4d S1:%4d", val_STRAIN0, val_STRAIN1); strcat(buf, buf_add);
 8009d90:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009d94:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8009d98:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 8009d9c:	495b      	ldr	r1, [pc, #364]	; (8009f0c <main+0x13d4>)
 8009d9e:	f003 fb59 	bl	800d454 <siprintf>
 8009da2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009da6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009daa:	4611      	mov	r1, r2
 8009dac:	4618      	mov	r0, r3
 8009dae:	f003 fb71 	bl	800d494 <strcat>
						}

						sprintf((char*)buf_add, " TM:%4d TC:%4d V:%4d", val_TEMP, val_M0_TEMP, val_VBUS); strcat(buf, buf_add);
 8009db2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009db6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8009dc0:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8009dc4:	4952      	ldr	r1, [pc, #328]	; (8009f10 <main+0x13d8>)
 8009dc6:	f003 fb45 	bl	800d454 <siprintf>
 8009dca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009dce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f003 fb5d 	bl	800d494 <strcat>

						//sprintf((char*)buf_add, " ADC: %4d %4d %4d %4d %4d", adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4]); strcat(buf, buf_add);

						if (val_TEMP > 1900){
 8009dda:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8009dde:	f240 726c 	movw	r2, #1900	; 0x76c
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d90f      	bls.n	8009e06 <main+0x12ce>
							sprintf((char*)buf_add, "* >50C on ESC"); strcat(buf, buf_add);
 8009de6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009dea:	4a4a      	ldr	r2, [pc, #296]	; (8009f14 <main+0x13dc>)
 8009dec:	461c      	mov	r4, r3
 8009dee:	4613      	mov	r3, r2
 8009df0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009df2:	c407      	stmia	r4!, {r0, r1, r2}
 8009df4:	8023      	strh	r3, [r4, #0]
 8009df6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009dfa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009dfe:	4611      	mov	r1, r2
 8009e00:	4618      	mov	r0, r3
 8009e02:	f003 fb47 	bl	800d494 <strcat>
						}

						if (val_M0_TEMP > 1900){
 8009e06:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8009e0a:	f240 726c 	movw	r2, #1900	; 0x76c
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d90f      	bls.n	8009e32 <main+0x12fa>
							sprintf((char*)buf_add, "* >50C on MOTOR"); strcat(buf, buf_add);
 8009e12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009e16:	4a40      	ldr	r2, [pc, #256]	; (8009f18 <main+0x13e0>)
 8009e18:	461c      	mov	r4, r3
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009e22:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009e26:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009e2a:	4611      	mov	r1, r2
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f003 fb31 	bl	800d494 <strcat>
						}

						if (val_STRAIN0 < 2170){
 8009e32:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8009e36:	f640 0279 	movw	r2, #2169	; 0x879
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d80f      	bhi.n	8009e5e <main+0x1326>
							sprintf((char*)buf_add, "* -100N force"); strcat(buf, buf_add);
 8009e3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009e42:	4a36      	ldr	r2, [pc, #216]	; (8009f1c <main+0x13e4>)
 8009e44:	461c      	mov	r4, r3
 8009e46:	4613      	mov	r3, r2
 8009e48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e4a:	c407      	stmia	r4!, {r0, r1, r2}
 8009e4c:	8023      	strh	r3, [r4, #0]
 8009e4e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009e52:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009e56:	4611      	mov	r1, r2
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f003 fb1b 	bl	800d494 <strcat>
						}

						sprintf((char*)buf_add, " p:%5d m:%5d", Enc_Val_total_lim_p, Enc_Val_total_lim_m); strcat(buf, buf_add);
 8009e5e:	4b30      	ldr	r3, [pc, #192]	; (8009f20 <main+0x13e8>)
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	4b30      	ldr	r3, [pc, #192]	; (8009f24 <main+0x13ec>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009e6a:	492f      	ldr	r1, [pc, #188]	; (8009f28 <main+0x13f0>)
 8009e6c:	f003 faf2 	bl	800d454 <siprintf>
 8009e70:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009e74:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009e78:	4611      	mov	r1, r2
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f003 fb0a 	bl	800d494 <strcat>

						sprintf((char*)buf_add, " \r\n"); strcat(buf, buf_add);
 8009e80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009e84:	4a29      	ldr	r2, [pc, #164]	; (8009f2c <main+0x13f4>)
 8009e86:	601a      	str	r2, [r3, #0]
 8009e88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009e8c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009e90:	4611      	mov	r1, r2
 8009e92:	4618      	mov	r0, r3
 8009e94:	f003 fafe 	bl	800d494 <strcat>
			//			buf[50] = '|';
			//			buf[100 + max(-50, min(50, (int)av_velocity))] = 'v';



						if (buf_msgs[0] != '\0'){
 8009e98:	4b25      	ldr	r3, [pc, #148]	; (8009f30 <main+0x13f8>)
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d008      	beq.n	8009eb2 <main+0x137a>
							strcat(buf, buf_msgs);
 8009ea0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009ea4:	4922      	ldr	r1, [pc, #136]	; (8009f30 <main+0x13f8>)
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f003 faf4 	bl	800d494 <strcat>
							buf_msgs[0] = '\0';
 8009eac:	4b20      	ldr	r3, [pc, #128]	; (8009f30 <main+0x13f8>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	701a      	strb	r2, [r3, #0]
						}



						//HAL_UART_Transmit_IT(&huart3, buf, strlen((char*)buf)); //WORKS but replaced by DMA below
						huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 8009eb2:	4b20      	ldr	r3, [pc, #128]	; (8009f34 <main+0x13fc>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	695a      	ldr	r2, [r3, #20]
 8009eb8:	4b1e      	ldr	r3, [pc, #120]	; (8009f34 <main+0x13fc>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ec0:	615a      	str	r2, [r3, #20]
						HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 8009ec2:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8009ec6:	4b1b      	ldr	r3, [pc, #108]	; (8009f34 <main+0x13fc>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	3304      	adds	r3, #4
 8009ecc:	461d      	mov	r5, r3
 8009ece:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7f6 f97c 	bl	80001d0 <strlen>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	462a      	mov	r2, r5
 8009edc:	4621      	mov	r1, r4
 8009ede:	4816      	ldr	r0, [pc, #88]	; (8009f38 <main+0x1400>)
 8009ee0:	f7f8 ff24 	bl	8002d2c <HAL_DMA_Start_IT>
				}
			ch='.';
 8009ee4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009ee8:	222e      	movs	r2, #46	; 0x2e
 8009eea:	701a      	strb	r2, [r3, #0]

			i_slow++;
 8009eec:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
	  }

	  i_fast++;
 8009ef6:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8009efa:	3301      	adds	r3, #1
 8009efc:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
	  HAL_Delay(1);
 8009f00:	2001      	movs	r0, #1
 8009f02:	f7f7 f8b3 	bl	800106c <HAL_Delay>
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8009f06:	f7ff b957 	b.w	80091b8 <main+0x680>
 8009f0a:	bf00      	nop
 8009f0c:	0800ff14 	.word	0x0800ff14
 8009f10:	0800ff24 	.word	0x0800ff24
 8009f14:	0800ff3c 	.word	0x0800ff3c
 8009f18:	0800ff4c 	.word	0x0800ff4c
 8009f1c:	0800ff5c 	.word	0x0800ff5c
 8009f20:	20000114 	.word	0x20000114
 8009f24:	20000110 	.word	0x20000110
 8009f28:	0800ff6c 	.word	0x0800ff6c
 8009f2c:	000a0d20 	.word	0x000a0d20
 8009f30:	20000eac 	.word	0x20000eac
 8009f34:	20000564 	.word	0x20000564
 8009f38:	20000b08 	.word	0x20000b08

08009f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b098      	sub	sp, #96	; 0x60
 8009f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009f42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f46:	2230      	movs	r2, #48	; 0x30
 8009f48:	2100      	movs	r1, #0
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f003 fa7a 	bl	800d444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009f50:	f107 031c 	add.w	r3, r7, #28
 8009f54:	2200      	movs	r2, #0
 8009f56:	601a      	str	r2, [r3, #0]
 8009f58:	605a      	str	r2, [r3, #4]
 8009f5a:	609a      	str	r2, [r3, #8]
 8009f5c:	60da      	str	r2, [r3, #12]
 8009f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009f60:	f107 030c 	add.w	r3, r7, #12
 8009f64:	2200      	movs	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	605a      	str	r2, [r3, #4]
 8009f6a:	609a      	str	r2, [r3, #8]
 8009f6c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009f6e:	2300      	movs	r3, #0
 8009f70:	60bb      	str	r3, [r7, #8]
 8009f72:	4b32      	ldr	r3, [pc, #200]	; (800a03c <SystemClock_Config+0x100>)
 8009f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f76:	4a31      	ldr	r2, [pc, #196]	; (800a03c <SystemClock_Config+0x100>)
 8009f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8009f7e:	4b2f      	ldr	r3, [pc, #188]	; (800a03c <SystemClock_Config+0x100>)
 8009f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f86:	60bb      	str	r3, [r7, #8]
 8009f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	607b      	str	r3, [r7, #4]
 8009f8e:	4b2c      	ldr	r3, [pc, #176]	; (800a040 <SystemClock_Config+0x104>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a2b      	ldr	r2, [pc, #172]	; (800a040 <SystemClock_Config+0x104>)
 8009f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f98:	6013      	str	r3, [r2, #0]
 8009f9a:	4b29      	ldr	r3, [pc, #164]	; (800a040 <SystemClock_Config+0x104>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fa2:	607b      	str	r3, [r7, #4]
 8009fa4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8009fa6:	2309      	movs	r3, #9
 8009fa8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009fae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009fb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009fbe:	2304      	movs	r3, #4
 8009fc0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009fc2:	23a8      	movs	r3, #168	; 0xa8
 8009fc4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009fc6:	2302      	movs	r3, #2
 8009fc8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009fca:	2307      	movs	r3, #7
 8009fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009fce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fa fc6a 	bl	80048ac <HAL_RCC_OscConfig>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d001      	beq.n	8009fe2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8009fde:	f002 fa7d 	bl	800c4dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009fe2:	230f      	movs	r3, #15
 8009fe4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009fea:	2300      	movs	r3, #0
 8009fec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009fee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ff8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009ffa:	f107 031c 	add.w	r3, r7, #28
 8009ffe:	2105      	movs	r1, #5
 800a000:	4618      	mov	r0, r3
 800a002:	f7fa fec3 	bl	8004d8c <HAL_RCC_ClockConfig>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800a00c:	f002 fa66 	bl	800c4dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a010:	2302      	movs	r3, #2
 800a012:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a014:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a018:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a01a:	f107 030c 	add.w	r3, r7, #12
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fb f8b2 	bl	8005188 <HAL_RCCEx_PeriphCLKConfig>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800a02a:	f002 fa57 	bl	800c4dc <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 800a02e:	f7fa ff93 	bl	8004f58 <HAL_RCC_EnableCSS>
}
 800a032:	bf00      	nop
 800a034:	3760      	adds	r7, #96	; 0x60
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	40023800 	.word	0x40023800
 800a040:	40007000 	.word	0x40007000

0800a044 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b090      	sub	sp, #64	; 0x40
 800a048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800a04a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a04e:	2200      	movs	r2, #0
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	605a      	str	r2, [r3, #4]
 800a054:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800a056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a05a:	2200      	movs	r2, #0
 800a05c:	601a      	str	r2, [r3, #0]
 800a05e:	605a      	str	r2, [r3, #4]
 800a060:	609a      	str	r2, [r3, #8]
 800a062:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800a064:	1d3b      	adds	r3, r7, #4
 800a066:	2220      	movs	r2, #32
 800a068:	2100      	movs	r1, #0
 800a06a:	4618      	mov	r0, r3
 800a06c:	f003 f9ea 	bl	800d444 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800a070:	4b4c      	ldr	r3, [pc, #304]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a072:	4a4d      	ldr	r2, [pc, #308]	; (800a1a8 <MX_ADC1_Init+0x164>)
 800a074:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800a076:	4b4b      	ldr	r3, [pc, #300]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a078:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a07c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a07e:	4b49      	ldr	r3, [pc, #292]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a080:	2200      	movs	r2, #0
 800a082:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800a084:	4b47      	ldr	r3, [pc, #284]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a086:	2201      	movs	r2, #1
 800a088:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a08a:	4b46      	ldr	r3, [pc, #280]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a08c:	2200      	movs	r2, #0
 800a08e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a090:	4b44      	ldr	r3, [pc, #272]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a098:	4b42      	ldr	r3, [pc, #264]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a09e:	4b41      	ldr	r3, [pc, #260]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a0a0:	4a42      	ldr	r2, [pc, #264]	; (800a1ac <MX_ADC1_Init+0x168>)
 800a0a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a0a4:	4b3f      	ldr	r3, [pc, #252]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800a0aa:	4b3e      	ldr	r3, [pc, #248]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800a0b0:	4b3c      	ldr	r3, [pc, #240]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a0b8:	4b3a      	ldr	r3, [pc, #232]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a0be:	4839      	ldr	r0, [pc, #228]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a0c0:	f7f6 fff6 	bl	80010b0 <HAL_ADC_Init>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d001      	beq.n	800a0ce <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800a0ca:	f002 fa07 	bl	800c4dc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_TRIPLEMODE_INJECSIMULT;
 800a0ce:	2315      	movs	r3, #21
 800a0d0:	637b      	str	r3, [r7, #52]	; 0x34
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800a0d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a0da:	4619      	mov	r1, r3
 800a0dc:	4831      	ldr	r0, [pc, #196]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a0de:	f7f7 ffa5 	bl	800202c <HAL_ADCEx_MultiModeConfigChannel>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800a0e8:	f002 f9f8 	bl	800c4dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 1;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a0f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	4829      	ldr	r0, [pc, #164]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a100:	f7f7 fa60 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d001      	beq.n	800a10e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800a10a:	f002 f9e7 	bl	800c4dc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800a10e:	2301      	movs	r3, #1
 800a110:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 1;
 800a112:	2301      	movs	r3, #1
 800a114:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800a116:	2304      	movs	r3, #4
 800a118:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a11a:	2300      	movs	r3, #0
 800a11c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 800a11e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800a122:	623b      	str	r3, [r7, #32]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800a124:	2300      	movs	r3, #0
 800a126:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800a128:	2300      	movs	r3, #0
 800a12a:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800a12c:	2300      	movs	r3, #0
 800a12e:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 800a130:	2300      	movs	r3, #0
 800a132:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800a134:	1d3b      	adds	r3, r7, #4
 800a136:	4619      	mov	r1, r3
 800a138:	481a      	ldr	r0, [pc, #104]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a13a:	f7f7 fde3 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d001      	beq.n	800a148 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 800a144:	f002 f9ca 	bl	800c4dc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 800a148:	230b      	movs	r3, #11
 800a14a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 2;
 800a14c:	2302      	movs	r3, #2
 800a14e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800a150:	1d3b      	adds	r3, r7, #4
 800a152:	4619      	mov	r1, r3
 800a154:	4813      	ldr	r0, [pc, #76]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a156:	f7f7 fdd5 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 800a160:	f002 f9bc 	bl	800c4dc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 800a164:	230e      	movs	r3, #14
 800a166:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 3;
 800a168:	2303      	movs	r3, #3
 800a16a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800a16c:	1d3b      	adds	r3, r7, #4
 800a16e:	4619      	mov	r1, r3
 800a170:	480c      	ldr	r0, [pc, #48]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a172:	f7f7 fdc7 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 800a17c:	f002 f9ae 	bl	800c4dc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 800a180:	2305      	movs	r3, #5
 800a182:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 4;
 800a184:	2304      	movs	r3, #4
 800a186:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800a188:	1d3b      	adds	r3, r7, #4
 800a18a:	4619      	mov	r1, r3
 800a18c:	4805      	ldr	r0, [pc, #20]	; (800a1a4 <MX_ADC1_Init+0x160>)
 800a18e:	f7f7 fdb9 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 800a198:	f002 f9a0 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a19c:	bf00      	nop
 800a19e:	3740      	adds	r7, #64	; 0x40
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	20000c2c 	.word	0x20000c2c
 800a1a8:	40012000 	.word	0x40012000
 800a1ac:	0f000001 	.word	0x0f000001

0800a1b0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b08c      	sub	sp, #48	; 0x30
 800a1b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a1b6:	f107 0320 	add.w	r3, r7, #32
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	605a      	str	r2, [r3, #4]
 800a1c0:	609a      	str	r2, [r3, #8]
 800a1c2:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800a1c4:	463b      	mov	r3, r7
 800a1c6:	2220      	movs	r2, #32
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f003 f93a 	bl	800d444 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800a1d0:	4b5d      	ldr	r3, [pc, #372]	; (800a348 <MX_ADC2_Init+0x198>)
 800a1d2:	4a5e      	ldr	r2, [pc, #376]	; (800a34c <MX_ADC2_Init+0x19c>)
 800a1d4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800a1d6:	4b5c      	ldr	r3, [pc, #368]	; (800a348 <MX_ADC2_Init+0x198>)
 800a1d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a1dc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800a1de:	4b5a      	ldr	r3, [pc, #360]	; (800a348 <MX_ADC2_Init+0x198>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800a1e4:	4b58      	ldr	r3, [pc, #352]	; (800a348 <MX_ADC2_Init+0x198>)
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800a1ea:	4b57      	ldr	r3, [pc, #348]	; (800a348 <MX_ADC2_Init+0x198>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800a1f0:	4b55      	ldr	r3, [pc, #340]	; (800a348 <MX_ADC2_Init+0x198>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a1f8:	4b53      	ldr	r3, [pc, #332]	; (800a348 <MX_ADC2_Init+0x198>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 800a1fe:	4b52      	ldr	r3, [pc, #328]	; (800a348 <MX_ADC2_Init+0x198>)
 800a200:	2205      	movs	r2, #5
 800a202:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800a204:	4b50      	ldr	r3, [pc, #320]	; (800a348 <MX_ADC2_Init+0x198>)
 800a206:	2201      	movs	r2, #1
 800a208:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a20c:	4b4e      	ldr	r3, [pc, #312]	; (800a348 <MX_ADC2_Init+0x198>)
 800a20e:	2200      	movs	r2, #0
 800a210:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800a212:	484d      	ldr	r0, [pc, #308]	; (800a348 <MX_ADC2_Init+0x198>)
 800a214:	f7f6 ff4c 	bl	80010b0 <HAL_ADC_Init>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 800a21e:	f002 f95d 	bl	800c4dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800a222:	2302      	movs	r3, #2
 800a224:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800a226:	2301      	movs	r3, #1
 800a228:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800a22a:	2301      	movs	r3, #1
 800a22c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a22e:	f107 0320 	add.w	r3, r7, #32
 800a232:	4619      	mov	r1, r3
 800a234:	4844      	ldr	r0, [pc, #272]	; (800a348 <MX_ADC2_Init+0x198>)
 800a236:	f7f7 f9c5 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800a240:	f002 f94c 	bl	800c4dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800a244:	230c      	movs	r3, #12
 800a246:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 800a248:	2302      	movs	r3, #2
 800a24a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a24c:	f107 0320 	add.w	r3, r7, #32
 800a250:	4619      	mov	r1, r3
 800a252:	483d      	ldr	r0, [pc, #244]	; (800a348 <MX_ADC2_Init+0x198>)
 800a254:	f7f7 f9b6 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800a25e:	f002 f93d 	bl	800c4dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800a262:	230f      	movs	r3, #15
 800a264:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 800a266:	2303      	movs	r3, #3
 800a268:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a26a:	f107 0320 	add.w	r3, r7, #32
 800a26e:	4619      	mov	r1, r3
 800a270:	4835      	ldr	r0, [pc, #212]	; (800a348 <MX_ADC2_Init+0x198>)
 800a272:	f7f7 f9a7 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d001      	beq.n	800a280 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 800a27c:	f002 f92e 	bl	800c4dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800a280:	2304      	movs	r3, #4
 800a282:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 800a284:	2304      	movs	r3, #4
 800a286:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a288:	f107 0320 	add.w	r3, r7, #32
 800a28c:	4619      	mov	r1, r3
 800a28e:	482e      	ldr	r0, [pc, #184]	; (800a348 <MX_ADC2_Init+0x198>)
 800a290:	f7f7 f998 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d001      	beq.n	800a29e <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 800a29a:	f002 f91f 	bl	800c4dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800a29e:	2308      	movs	r3, #8
 800a2a0:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 800a2a2:	2305      	movs	r3, #5
 800a2a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a2a6:	f107 0320 	add.w	r3, r7, #32
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	4826      	ldr	r0, [pc, #152]	; (800a348 <MX_ADC2_Init+0x198>)
 800a2ae:	f7f7 f989 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d001      	beq.n	800a2bc <MX_ADC2_Init+0x10c>
  {
    Error_Handler();
 800a2b8:	f002 f910 	bl	800c4dc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800a2bc:	2302      	movs	r3, #2
 800a2be:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800a2c4:	2304      	movs	r3, #4
 800a2c6:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	60bb      	str	r3, [r7, #8]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800a2d8:	463b      	mov	r3, r7
 800a2da:	4619      	mov	r1, r3
 800a2dc:	481a      	ldr	r0, [pc, #104]	; (800a348 <MX_ADC2_Init+0x198>)
 800a2de:	f7f7 fd11 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d001      	beq.n	800a2ec <MX_ADC2_Init+0x13c>
  {
    Error_Handler();
 800a2e8:	f002 f8f8 	bl	800c4dc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 800a2ec:	230c      	movs	r3, #12
 800a2ee:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800a2f4:	463b      	mov	r3, r7
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	4813      	ldr	r0, [pc, #76]	; (800a348 <MX_ADC2_Init+0x198>)
 800a2fa:	f7f7 fd03 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d001      	beq.n	800a308 <MX_ADC2_Init+0x158>
  {
    Error_Handler();
 800a304:	f002 f8ea 	bl	800c4dc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 800a308:	230f      	movs	r3, #15
 800a30a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800a30c:	2303      	movs	r3, #3
 800a30e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800a310:	463b      	mov	r3, r7
 800a312:	4619      	mov	r1, r3
 800a314:	480c      	ldr	r0, [pc, #48]	; (800a348 <MX_ADC2_Init+0x198>)
 800a316:	f7f7 fcf5 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d001      	beq.n	800a324 <MX_ADC2_Init+0x174>
  {
    Error_Handler();
 800a320:	f002 f8dc 	bl	800c4dc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800a324:	2304      	movs	r3, #4
 800a326:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 800a328:	2304      	movs	r3, #4
 800a32a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800a32c:	463b      	mov	r3, r7
 800a32e:	4619      	mov	r1, r3
 800a330:	4805      	ldr	r0, [pc, #20]	; (800a348 <MX_ADC2_Init+0x198>)
 800a332:	f7f7 fce7 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d001      	beq.n	800a340 <MX_ADC2_Init+0x190>
  {
    Error_Handler();
 800a33c:	f002 f8ce 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800a340:	bf00      	nop
 800a342:	3730      	adds	r7, #48	; 0x30
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	200005a4 	.word	0x200005a4
 800a34c:	40012100 	.word	0x40012100

0800a350 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b08c      	sub	sp, #48	; 0x30
 800a354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a356:	f107 0320 	add.w	r3, r7, #32
 800a35a:	2200      	movs	r2, #0
 800a35c:	601a      	str	r2, [r3, #0]
 800a35e:	605a      	str	r2, [r3, #4]
 800a360:	609a      	str	r2, [r3, #8]
 800a362:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800a364:	463b      	mov	r3, r7
 800a366:	2220      	movs	r2, #32
 800a368:	2100      	movs	r1, #0
 800a36a:	4618      	mov	r0, r3
 800a36c:	f003 f86a 	bl	800d444 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800a370:	4b5d      	ldr	r3, [pc, #372]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a372:	4a5e      	ldr	r2, [pc, #376]	; (800a4ec <MX_ADC3_Init+0x19c>)
 800a374:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800a376:	4b5c      	ldr	r3, [pc, #368]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a378:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a37c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800a37e:	4b5a      	ldr	r3, [pc, #360]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a380:	2200      	movs	r2, #0
 800a382:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800a384:	4b58      	ldr	r3, [pc, #352]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a386:	2201      	movs	r2, #1
 800a388:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800a38a:	4b57      	ldr	r3, [pc, #348]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800a390:	4b55      	ldr	r3, [pc, #340]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a392:	2200      	movs	r2, #0
 800a394:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a398:	4b53      	ldr	r3, [pc, #332]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 5;
 800a39e:	4b52      	ldr	r3, [pc, #328]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a3a0:	2205      	movs	r2, #5
 800a3a2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800a3a4:	4b50      	ldr	r3, [pc, #320]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a3ac:	4b4e      	ldr	r3, [pc, #312]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800a3b2:	484d      	ldr	r0, [pc, #308]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a3b4:	f7f6 fe7c 	bl	80010b0 <HAL_ADC_Init>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 800a3be:	f002 f88d 	bl	800c4dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a3ce:	f107 0320 	add.w	r3, r7, #32
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	4844      	ldr	r0, [pc, #272]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a3d6:	f7f7 f8f5 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d001      	beq.n	800a3e4 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800a3e0:	f002 f87c 	bl	800c4dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800a3e4:	230d      	movs	r3, #13
 800a3e6:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a3ec:	f107 0320 	add.w	r3, r7, #32
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	483d      	ldr	r0, [pc, #244]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a3f4:	f7f7 f8e6 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800a3fe:	f002 f86d 	bl	800c4dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800a402:	2303      	movs	r3, #3
 800a404:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 800a406:	2303      	movs	r3, #3
 800a408:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a40a:	f107 0320 	add.w	r3, r7, #32
 800a40e:	4619      	mov	r1, r3
 800a410:	4835      	ldr	r0, [pc, #212]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a412:	f7f7 f8d7 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d001      	beq.n	800a420 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 800a41c:	f002 f85e 	bl	800c4dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800a420:	230d      	movs	r3, #13
 800a422:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 800a424:	2304      	movs	r3, #4
 800a426:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a428:	f107 0320 	add.w	r3, r7, #32
 800a42c:	4619      	mov	r1, r3
 800a42e:	482e      	ldr	r0, [pc, #184]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a430:	f7f7 f8c8 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <MX_ADC3_Init+0xee>
  {
    Error_Handler();
 800a43a:	f002 f84f 	bl	800c4dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800a43e:	2303      	movs	r3, #3
 800a440:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 800a442:	2305      	movs	r3, #5
 800a444:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a446:	f107 0320 	add.w	r3, r7, #32
 800a44a:	4619      	mov	r1, r3
 800a44c:	4826      	ldr	r0, [pc, #152]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a44e:	f7f7 f8b9 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <MX_ADC3_Init+0x10c>
  {
    Error_Handler();
 800a458:	f002 f840 	bl	800c4dc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800a45c:	2303      	movs	r3, #3
 800a45e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800a460:	2301      	movs	r3, #1
 800a462:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800a464:	2304      	movs	r3, #4
 800a466:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a468:	2300      	movs	r3, #0
 800a46a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800a46c:	2300      	movs	r3, #0
 800a46e:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800a470:	2300      	movs	r3, #0
 800a472:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a478:	463b      	mov	r3, r7
 800a47a:	4619      	mov	r1, r3
 800a47c:	481a      	ldr	r0, [pc, #104]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a47e:	f7f7 fc41 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <MX_ADC3_Init+0x13c>
  {
    Error_Handler();
 800a488:	f002 f828 	bl	800c4dc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 800a48c:	230d      	movs	r3, #13
 800a48e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800a490:	2302      	movs	r3, #2
 800a492:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a494:	463b      	mov	r3, r7
 800a496:	4619      	mov	r1, r3
 800a498:	4813      	ldr	r0, [pc, #76]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a49a:	f7f7 fc33 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d001      	beq.n	800a4a8 <MX_ADC3_Init+0x158>
  {
    Error_Handler();
 800a4a4:	f002 f81a 	bl	800c4dc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a4b0:	463b      	mov	r3, r7
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	480c      	ldr	r0, [pc, #48]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a4b6:	f7f7 fc25 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 800a4c0:	f002 f80c 	bl	800c4dc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 800a4c4:	230d      	movs	r3, #13
 800a4c6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 800a4c8:	2304      	movs	r3, #4
 800a4ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a4cc:	463b      	mov	r3, r7
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	4805      	ldr	r0, [pc, #20]	; (800a4e8 <MX_ADC3_Init+0x198>)
 800a4d2:	f7f7 fc17 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <MX_ADC3_Init+0x190>
  {
    Error_Handler();
 800a4dc:	f001 fffe 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800a4e0:	bf00      	nop
 800a4e2:	3730      	adds	r7, #48	; 0x30
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	20000c74 	.word	0x20000c74
 800a4ec:	40012200 	.word	0x40012200

0800a4f0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800a4f4:	4b17      	ldr	r3, [pc, #92]	; (800a554 <MX_CAN1_Init+0x64>)
 800a4f6:	4a18      	ldr	r2, [pc, #96]	; (800a558 <MX_CAN1_Init+0x68>)
 800a4f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800a4fa:	4b16      	ldr	r3, [pc, #88]	; (800a554 <MX_CAN1_Init+0x64>)
 800a4fc:	2203      	movs	r2, #3
 800a4fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800a500:	4b14      	ldr	r3, [pc, #80]	; (800a554 <MX_CAN1_Init+0x64>)
 800a502:	2200      	movs	r2, #0
 800a504:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800a506:	4b13      	ldr	r3, [pc, #76]	; (800a554 <MX_CAN1_Init+0x64>)
 800a508:	2200      	movs	r2, #0
 800a50a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800a50c:	4b11      	ldr	r3, [pc, #68]	; (800a554 <MX_CAN1_Init+0x64>)
 800a50e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800a512:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800a514:	4b0f      	ldr	r3, [pc, #60]	; (800a554 <MX_CAN1_Init+0x64>)
 800a516:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a51a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800a51c:	4b0d      	ldr	r3, [pc, #52]	; (800a554 <MX_CAN1_Init+0x64>)
 800a51e:	2200      	movs	r2, #0
 800a520:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800a522:	4b0c      	ldr	r3, [pc, #48]	; (800a554 <MX_CAN1_Init+0x64>)
 800a524:	2200      	movs	r2, #0
 800a526:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800a528:	4b0a      	ldr	r3, [pc, #40]	; (800a554 <MX_CAN1_Init+0x64>)
 800a52a:	2200      	movs	r2, #0
 800a52c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800a52e:	4b09      	ldr	r3, [pc, #36]	; (800a554 <MX_CAN1_Init+0x64>)
 800a530:	2200      	movs	r2, #0
 800a532:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800a534:	4b07      	ldr	r3, [pc, #28]	; (800a554 <MX_CAN1_Init+0x64>)
 800a536:	2200      	movs	r2, #0
 800a538:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800a53a:	4b06      	ldr	r3, [pc, #24]	; (800a554 <MX_CAN1_Init+0x64>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800a540:	4804      	ldr	r0, [pc, #16]	; (800a554 <MX_CAN1_Init+0x64>)
 800a542:	f7f7 fdb9 	bl	80020b8 <HAL_CAN_Init>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d001      	beq.n	800a550 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800a54c:	f001 ffc6 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800a550:	bf00      	nop
 800a552:	bd80      	pop	{r7, pc}
 800a554:	20001008 	.word	0x20001008
 800a558:	40006400 	.word	0x40006400

0800a55c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a560:	4b12      	ldr	r3, [pc, #72]	; (800a5ac <MX_I2C1_Init+0x50>)
 800a562:	4a13      	ldr	r2, [pc, #76]	; (800a5b0 <MX_I2C1_Init+0x54>)
 800a564:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800a566:	4b11      	ldr	r3, [pc, #68]	; (800a5ac <MX_I2C1_Init+0x50>)
 800a568:	4a12      	ldr	r2, [pc, #72]	; (800a5b4 <MX_I2C1_Init+0x58>)
 800a56a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a56c:	4b0f      	ldr	r3, [pc, #60]	; (800a5ac <MX_I2C1_Init+0x50>)
 800a56e:	2200      	movs	r2, #0
 800a570:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a572:	4b0e      	ldr	r3, [pc, #56]	; (800a5ac <MX_I2C1_Init+0x50>)
 800a574:	2200      	movs	r2, #0
 800a576:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a578:	4b0c      	ldr	r3, [pc, #48]	; (800a5ac <MX_I2C1_Init+0x50>)
 800a57a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a57e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a580:	4b0a      	ldr	r3, [pc, #40]	; (800a5ac <MX_I2C1_Init+0x50>)
 800a582:	2200      	movs	r2, #0
 800a584:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a586:	4b09      	ldr	r3, [pc, #36]	; (800a5ac <MX_I2C1_Init+0x50>)
 800a588:	2200      	movs	r2, #0
 800a58a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a58c:	4b07      	ldr	r3, [pc, #28]	; (800a5ac <MX_I2C1_Init+0x50>)
 800a58e:	2200      	movs	r2, #0
 800a590:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a592:	4b06      	ldr	r3, [pc, #24]	; (800a5ac <MX_I2C1_Init+0x50>)
 800a594:	2200      	movs	r2, #0
 800a596:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a598:	4804      	ldr	r0, [pc, #16]	; (800a5ac <MX_I2C1_Init+0x50>)
 800a59a:	f7f9 f8e3 	bl	8003764 <HAL_I2C_Init>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a5a4:	f001 ff9a 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a5a8:	bf00      	nop
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	200005ec 	.word	0x200005ec
 800a5b0:	40005400 	.word	0x40005400
 800a5b4:	000186a0 	.word	0x000186a0

0800a5b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a5bc:	4b12      	ldr	r3, [pc, #72]	; (800a608 <MX_I2C2_Init+0x50>)
 800a5be:	4a13      	ldr	r2, [pc, #76]	; (800a60c <MX_I2C2_Init+0x54>)
 800a5c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800a5c2:	4b11      	ldr	r3, [pc, #68]	; (800a608 <MX_I2C2_Init+0x50>)
 800a5c4:	4a12      	ldr	r2, [pc, #72]	; (800a610 <MX_I2C2_Init+0x58>)
 800a5c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a5c8:	4b0f      	ldr	r3, [pc, #60]	; (800a608 <MX_I2C2_Init+0x50>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800a5ce:	4b0e      	ldr	r3, [pc, #56]	; (800a608 <MX_I2C2_Init+0x50>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a5d4:	4b0c      	ldr	r3, [pc, #48]	; (800a608 <MX_I2C2_Init+0x50>)
 800a5d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a5da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a5dc:	4b0a      	ldr	r3, [pc, #40]	; (800a608 <MX_I2C2_Init+0x50>)
 800a5de:	2200      	movs	r2, #0
 800a5e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800a5e2:	4b09      	ldr	r3, [pc, #36]	; (800a608 <MX_I2C2_Init+0x50>)
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a5e8:	4b07      	ldr	r3, [pc, #28]	; (800a608 <MX_I2C2_Init+0x50>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a5ee:	4b06      	ldr	r3, [pc, #24]	; (800a608 <MX_I2C2_Init+0x50>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a5f4:	4804      	ldr	r0, [pc, #16]	; (800a608 <MX_I2C2_Init+0x50>)
 800a5f6:	f7f9 f8b5 	bl	8003764 <HAL_I2C_Init>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800a600:	f001 ff6c 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a604:	bf00      	nop
 800a606:	bd80      	pop	{r7, pc}
 800a608:	20000a48 	.word	0x20000a48
 800a60c:	40005800 	.word	0x40005800
 800a610:	000186a0 	.word	0x000186a0

0800a614 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800a618:	4b0f      	ldr	r3, [pc, #60]	; (800a658 <MX_RTC_Init+0x44>)
 800a61a:	4a10      	ldr	r2, [pc, #64]	; (800a65c <MX_RTC_Init+0x48>)
 800a61c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a61e:	4b0e      	ldr	r3, [pc, #56]	; (800a658 <MX_RTC_Init+0x44>)
 800a620:	2200      	movs	r2, #0
 800a622:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a624:	4b0c      	ldr	r3, [pc, #48]	; (800a658 <MX_RTC_Init+0x44>)
 800a626:	227f      	movs	r2, #127	; 0x7f
 800a628:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a62a:	4b0b      	ldr	r3, [pc, #44]	; (800a658 <MX_RTC_Init+0x44>)
 800a62c:	22ff      	movs	r2, #255	; 0xff
 800a62e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a630:	4b09      	ldr	r3, [pc, #36]	; (800a658 <MX_RTC_Init+0x44>)
 800a632:	2200      	movs	r2, #0
 800a634:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a636:	4b08      	ldr	r3, [pc, #32]	; (800a658 <MX_RTC_Init+0x44>)
 800a638:	2200      	movs	r2, #0
 800a63a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a63c:	4b06      	ldr	r3, [pc, #24]	; (800a658 <MX_RTC_Init+0x44>)
 800a63e:	2200      	movs	r2, #0
 800a640:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a642:	4805      	ldr	r0, [pc, #20]	; (800a658 <MX_RTC_Init+0x44>)
 800a644:	f7fa fe82 	bl	800534c <HAL_RTC_Init>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d001      	beq.n	800a652 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800a64e:	f001 ff45 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a652:	bf00      	nop
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20000d60 	.word	0x20000d60
 800a65c:	40002800 	.word	0x40002800

0800a660 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800a664:	4b18      	ldr	r3, [pc, #96]	; (800a6c8 <MX_SPI2_Init+0x68>)
 800a666:	4a19      	ldr	r2, [pc, #100]	; (800a6cc <MX_SPI2_Init+0x6c>)
 800a668:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800a66a:	4b17      	ldr	r3, [pc, #92]	; (800a6c8 <MX_SPI2_Init+0x68>)
 800a66c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a670:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800a672:	4b15      	ldr	r3, [pc, #84]	; (800a6c8 <MX_SPI2_Init+0x68>)
 800a674:	2200      	movs	r2, #0
 800a676:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800a678:	4b13      	ldr	r3, [pc, #76]	; (800a6c8 <MX_SPI2_Init+0x68>)
 800a67a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a67e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a680:	4b11      	ldr	r3, [pc, #68]	; (800a6c8 <MX_SPI2_Init+0x68>)
 800a682:	2200      	movs	r2, #0
 800a684:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800a686:	4b10      	ldr	r3, [pc, #64]	; (800a6c8 <MX_SPI2_Init+0x68>)
 800a688:	2201      	movs	r2, #1
 800a68a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800a68c:	4b0e      	ldr	r3, [pc, #56]	; (800a6c8 <MX_SPI2_Init+0x68>)
 800a68e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a692:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800a694:	4b0c      	ldr	r3, [pc, #48]	; (800a6c8 <MX_SPI2_Init+0x68>)
 800a696:	2220      	movs	r2, #32
 800a698:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a69a:	4b0b      	ldr	r3, [pc, #44]	; (800a6c8 <MX_SPI2_Init+0x68>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800a6a0:	4b09      	ldr	r3, [pc, #36]	; (800a6c8 <MX_SPI2_Init+0x68>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6a6:	4b08      	ldr	r3, [pc, #32]	; (800a6c8 <MX_SPI2_Init+0x68>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800a6ac:	4b06      	ldr	r3, [pc, #24]	; (800a6c8 <MX_SPI2_Init+0x68>)
 800a6ae:	220a      	movs	r2, #10
 800a6b0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a6b2:	4805      	ldr	r0, [pc, #20]	; (800a6c8 <MX_SPI2_Init+0x68>)
 800a6b4:	f7fa ff2f 	bl	8005516 <HAL_SPI_Init>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800a6be:	f001 ff0d 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800a6c2:	bf00      	nop
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000184 	.word	0x20000184
 800a6cc:	40003800 	.word	0x40003800

0800a6d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b096      	sub	sp, #88	; 0x58
 800a6d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a6d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a6da:	2200      	movs	r2, #0
 800a6dc:	601a      	str	r2, [r3, #0]
 800a6de:	605a      	str	r2, [r3, #4]
 800a6e0:	609a      	str	r2, [r3, #8]
 800a6e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a6e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	601a      	str	r2, [r3, #0]
 800a6ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a6ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	601a      	str	r2, [r3, #0]
 800a6f6:	605a      	str	r2, [r3, #4]
 800a6f8:	609a      	str	r2, [r3, #8]
 800a6fa:	60da      	str	r2, [r3, #12]
 800a6fc:	611a      	str	r2, [r3, #16]
 800a6fe:	615a      	str	r2, [r3, #20]
 800a700:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a702:	1d3b      	adds	r3, r7, #4
 800a704:	2220      	movs	r2, #32
 800a706:	2100      	movs	r1, #0
 800a708:	4618      	mov	r0, r3
 800a70a:	f002 fe9b 	bl	800d444 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a70e:	4b57      	ldr	r3, [pc, #348]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a710:	4a57      	ldr	r2, [pc, #348]	; (800a870 <MX_TIM1_Init+0x1a0>)
 800a712:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a714:	4b55      	ldr	r3, [pc, #340]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a716:	2200      	movs	r2, #0
 800a718:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a71a:	4b54      	ldr	r3, [pc, #336]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 800a720:	4b52      	ldr	r3, [pc, #328]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a722:	f640 72ff 	movw	r2, #4095	; 0xfff
 800a726:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a728:	4b50      	ldr	r3, [pc, #320]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a72e:	4b4f      	ldr	r3, [pc, #316]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a730:	2200      	movs	r2, #0
 800a732:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a734:	4b4d      	ldr	r3, [pc, #308]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a736:	2200      	movs	r2, #0
 800a738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a73a:	484c      	ldr	r0, [pc, #304]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a73c:	f7fb fd5e 	bl	80061fc <HAL_TIM_Base_Init>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d001      	beq.n	800a74a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800a746:	f001 fec9 	bl	800c4dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a74a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a74e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a750:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a754:	4619      	mov	r1, r3
 800a756:	4845      	ldr	r0, [pc, #276]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a758:	f7fc fa92 	bl	8006c80 <HAL_TIM_ConfigClockSource>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800a762:	f001 febb 	bl	800c4dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a766:	4841      	ldr	r0, [pc, #260]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a768:	f7fb fe2e 	bl	80063c8 <HAL_TIM_PWM_Init>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d001      	beq.n	800a776 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800a772:	f001 feb3 	bl	800c4dc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800a776:	483d      	ldr	r0, [pc, #244]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a778:	f7fb fdb3 	bl	80062e2 <HAL_TIM_OC_Init>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d001      	beq.n	800a786 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800a782:	f001 feab 	bl	800c4dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a786:	2300      	movs	r3, #0
 800a788:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a78a:	2300      	movs	r3, #0
 800a78c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a78e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a792:	4619      	mov	r1, r3
 800a794:	4835      	ldr	r0, [pc, #212]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a796:	f7fc ffad 	bl	80076f4 <HAL_TIMEx_MasterConfigSynchronization>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800a7a0:	f001 fe9c 	bl	800c4dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a7a4:	2360      	movs	r3, #96	; 0x60
 800a7a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a7c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	4828      	ldr	r0, [pc, #160]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a7ca:	f7fc f993 	bl	8006af4 <HAL_TIM_PWM_ConfigChannel>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800a7d4:	f001 fe82 	bl	800c4dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a7d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7dc:	2204      	movs	r2, #4
 800a7de:	4619      	mov	r1, r3
 800a7e0:	4822      	ldr	r0, [pc, #136]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a7e2:	f7fc f987 	bl	8006af4 <HAL_TIM_PWM_ConfigChannel>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d001      	beq.n	800a7f0 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 800a7ec:	f001 fe76 	bl	800c4dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a7f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7f4:	2208      	movs	r2, #8
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	481c      	ldr	r0, [pc, #112]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a7fa:	f7fc f97b 	bl	8006af4 <HAL_TIM_PWM_ConfigChannel>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800a804:	f001 fe6a 	bl	800c4dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800a808:	2330      	movs	r3, #48	; 0x30
 800a80a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1900;
 800a80c:	f240 736c 	movw	r3, #1900	; 0x76c
 800a810:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a816:	220c      	movs	r2, #12
 800a818:	4619      	mov	r1, r3
 800a81a:	4814      	ldr	r0, [pc, #80]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a81c:	f7fc f86e 	bl	80068fc <HAL_TIM_OC_ConfigChannel>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800a826:	f001 fe59 	bl	800c4dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a82a:	2300      	movs	r3, #0
 800a82c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a82e:	2300      	movs	r3, #0
 800a830:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a832:	2300      	movs	r3, #0
 800a834:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a836:	2300      	movs	r3, #0
 800a838:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a83a:	2300      	movs	r3, #0
 800a83c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a83e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a842:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a844:	2300      	movs	r3, #0
 800a846:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a848:	1d3b      	adds	r3, r7, #4
 800a84a:	4619      	mov	r1, r3
 800a84c:	4807      	ldr	r0, [pc, #28]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a84e:	f7fc ffcd 	bl	80077ec <HAL_TIMEx_ConfigBreakDeadTime>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d001      	beq.n	800a85c <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 800a858:	f001 fe40 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800a85c:	4803      	ldr	r0, [pc, #12]	; (800a86c <MX_TIM1_Init+0x19c>)
 800a85e:	f002 fb23 	bl	800cea8 <HAL_TIM_MspPostInit>

}
 800a862:	bf00      	nop
 800a864:	3758      	adds	r7, #88	; 0x58
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	20000dc0 	.word	0x20000dc0
 800a870:	40010000 	.word	0x40010000

0800a874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b08e      	sub	sp, #56	; 0x38
 800a878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a87a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a87e:	2200      	movs	r2, #0
 800a880:	601a      	str	r2, [r3, #0]
 800a882:	605a      	str	r2, [r3, #4]
 800a884:	609a      	str	r2, [r3, #8]
 800a886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a888:	f107 0320 	add.w	r3, r7, #32
 800a88c:	2200      	movs	r2, #0
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a892:	1d3b      	adds	r3, r7, #4
 800a894:	2200      	movs	r2, #0
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	605a      	str	r2, [r3, #4]
 800a89a:	609a      	str	r2, [r3, #8]
 800a89c:	60da      	str	r2, [r3, #12]
 800a89e:	611a      	str	r2, [r3, #16]
 800a8a0:	615a      	str	r2, [r3, #20]
 800a8a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a8a4:	4b2b      	ldr	r3, [pc, #172]	; (800a954 <MX_TIM2_Init+0xe0>)
 800a8a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a8aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 800a8ac:	4b29      	ldr	r3, [pc, #164]	; (800a954 <MX_TIM2_Init+0xe0>)
 800a8ae:	2207      	movs	r2, #7
 800a8b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a8b2:	4b28      	ldr	r3, [pc, #160]	; (800a954 <MX_TIM2_Init+0xe0>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800a8b8:	4b26      	ldr	r3, [pc, #152]	; (800a954 <MX_TIM2_Init+0xe0>)
 800a8ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a8c0:	4b24      	ldr	r3, [pc, #144]	; (800a954 <MX_TIM2_Init+0xe0>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a8c6:	4b23      	ldr	r3, [pc, #140]	; (800a954 <MX_TIM2_Init+0xe0>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a8cc:	4821      	ldr	r0, [pc, #132]	; (800a954 <MX_TIM2_Init+0xe0>)
 800a8ce:	f7fb fc95 	bl	80061fc <HAL_TIM_Base_Init>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d001      	beq.n	800a8dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800a8d8:	f001 fe00 	bl	800c4dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a8dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a8e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	481a      	ldr	r0, [pc, #104]	; (800a954 <MX_TIM2_Init+0xe0>)
 800a8ea:	f7fc f9c9 	bl	8006c80 <HAL_TIM_ConfigClockSource>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d001      	beq.n	800a8f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800a8f4:	f001 fdf2 	bl	800c4dc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800a8f8:	4816      	ldr	r0, [pc, #88]	; (800a954 <MX_TIM2_Init+0xe0>)
 800a8fa:	f7fb fcf2 	bl	80062e2 <HAL_TIM_OC_Init>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d001      	beq.n	800a908 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800a904:	f001 fdea 	bl	800c4dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a908:	2300      	movs	r3, #0
 800a90a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a90c:	2300      	movs	r3, #0
 800a90e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a910:	f107 0320 	add.w	r3, r7, #32
 800a914:	4619      	mov	r1, r3
 800a916:	480f      	ldr	r0, [pc, #60]	; (800a954 <MX_TIM2_Init+0xe0>)
 800a918:	f7fc feec 	bl	80076f4 <HAL_TIMEx_MasterConfigSynchronization>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d001      	beq.n	800a926 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800a922:	f001 fddb 	bl	800c4dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800a926:	2300      	movs	r3, #0
 800a928:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a92e:	2300      	movs	r3, #0
 800a930:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a932:	2300      	movs	r3, #0
 800a934:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a936:	1d3b      	adds	r3, r7, #4
 800a938:	2200      	movs	r2, #0
 800a93a:	4619      	mov	r1, r3
 800a93c:	4805      	ldr	r0, [pc, #20]	; (800a954 <MX_TIM2_Init+0xe0>)
 800a93e:	f7fb ffdd 	bl	80068fc <HAL_TIM_OC_ConfigChannel>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d001      	beq.n	800a94c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800a948:	f001 fdc8 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a94c:	bf00      	nop
 800a94e:	3738      	adds	r7, #56	; 0x38
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	20000f4c 	.word	0x20000f4c

0800a958 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b08e      	sub	sp, #56	; 0x38
 800a95c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a95e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a962:	2200      	movs	r2, #0
 800a964:	601a      	str	r2, [r3, #0]
 800a966:	605a      	str	r2, [r3, #4]
 800a968:	609a      	str	r2, [r3, #8]
 800a96a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a96c:	f107 0320 	add.w	r3, r7, #32
 800a970:	2200      	movs	r2, #0
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a976:	1d3b      	adds	r3, r7, #4
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]
 800a97c:	605a      	str	r2, [r3, #4]
 800a97e:	609a      	str	r2, [r3, #8]
 800a980:	60da      	str	r2, [r3, #12]
 800a982:	611a      	str	r2, [r3, #16]
 800a984:	615a      	str	r2, [r3, #20]
 800a986:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a988:	4b2b      	ldr	r3, [pc, #172]	; (800aa38 <MX_TIM3_Init+0xe0>)
 800a98a:	4a2c      	ldr	r2, [pc, #176]	; (800aa3c <MX_TIM3_Init+0xe4>)
 800a98c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800a98e:	4b2a      	ldr	r3, [pc, #168]	; (800aa38 <MX_TIM3_Init+0xe0>)
 800a990:	2253      	movs	r2, #83	; 0x53
 800a992:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a994:	4b28      	ldr	r3, [pc, #160]	; (800aa38 <MX_TIM3_Init+0xe0>)
 800a996:	2200      	movs	r2, #0
 800a998:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800a99a:	4b27      	ldr	r3, [pc, #156]	; (800aa38 <MX_TIM3_Init+0xe0>)
 800a99c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a9a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a9a2:	4b25      	ldr	r3, [pc, #148]	; (800aa38 <MX_TIM3_Init+0xe0>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a9a8:	4b23      	ldr	r3, [pc, #140]	; (800aa38 <MX_TIM3_Init+0xe0>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a9ae:	4822      	ldr	r0, [pc, #136]	; (800aa38 <MX_TIM3_Init+0xe0>)
 800a9b0:	f7fb fc24 	bl	80061fc <HAL_TIM_Base_Init>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800a9ba:	f001 fd8f 	bl	800c4dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a9be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a9c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	481b      	ldr	r0, [pc, #108]	; (800aa38 <MX_TIM3_Init+0xe0>)
 800a9cc:	f7fc f958 	bl	8006c80 <HAL_TIM_ConfigClockSource>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d001      	beq.n	800a9da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800a9d6:	f001 fd81 	bl	800c4dc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800a9da:	4817      	ldr	r0, [pc, #92]	; (800aa38 <MX_TIM3_Init+0xe0>)
 800a9dc:	f7fb fc81 	bl	80062e2 <HAL_TIM_OC_Init>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d001      	beq.n	800a9ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800a9e6:	f001 fd79 	bl	800c4dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a9f2:	f107 0320 	add.w	r3, r7, #32
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	480f      	ldr	r0, [pc, #60]	; (800aa38 <MX_TIM3_Init+0xe0>)
 800a9fa:	f7fc fe7b 	bl	80076f4 <HAL_TIMEx_MasterConfigSynchronization>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800aa04:	f001 fd6a 	bl	800c4dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800aa08:	2330      	movs	r3, #48	; 0x30
 800aa0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800aa10:	2300      	movs	r3, #0
 800aa12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800aa14:	2300      	movs	r3, #0
 800aa16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800aa18:	1d3b      	adds	r3, r7, #4
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4806      	ldr	r0, [pc, #24]	; (800aa38 <MX_TIM3_Init+0xe0>)
 800aa20:	f7fb ff6c 	bl	80068fc <HAL_TIM_OC_ConfigChannel>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d001      	beq.n	800aa2e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800aa2a:	f001 fd57 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800aa2e:	bf00      	nop
 800aa30:	3738      	adds	r7, #56	; 0x38
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	20000bac 	.word	0x20000bac
 800aa3c:	40000400 	.word	0x40000400

0800aa40 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800aa46:	f107 0308 	add.w	r3, r7, #8
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	601a      	str	r2, [r3, #0]
 800aa4e:	605a      	str	r2, [r3, #4]
 800aa50:	609a      	str	r2, [r3, #8]
 800aa52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aa54:	463b      	mov	r3, r7
 800aa56:	2200      	movs	r2, #0
 800aa58:	601a      	str	r2, [r3, #0]
 800aa5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800aa5c:	4b1d      	ldr	r3, [pc, #116]	; (800aad4 <MX_TIM5_Init+0x94>)
 800aa5e:	4a1e      	ldr	r2, [pc, #120]	; (800aad8 <MX_TIM5_Init+0x98>)
 800aa60:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 839;
 800aa62:	4b1c      	ldr	r3, [pc, #112]	; (800aad4 <MX_TIM5_Init+0x94>)
 800aa64:	f240 3247 	movw	r2, #839	; 0x347
 800aa68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aa6a:	4b1a      	ldr	r3, [pc, #104]	; (800aad4 <MX_TIM5_Init+0x94>)
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800aa70:	4b18      	ldr	r3, [pc, #96]	; (800aad4 <MX_TIM5_Init+0x94>)
 800aa72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa76:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aa78:	4b16      	ldr	r3, [pc, #88]	; (800aad4 <MX_TIM5_Init+0x94>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aa7e:	4b15      	ldr	r3, [pc, #84]	; (800aad4 <MX_TIM5_Init+0x94>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800aa84:	4813      	ldr	r0, [pc, #76]	; (800aad4 <MX_TIM5_Init+0x94>)
 800aa86:	f7fb fbb9 	bl	80061fc <HAL_TIM_Base_Init>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d001      	beq.n	800aa94 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800aa90:	f001 fd24 	bl	800c4dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800aa94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800aa9a:	f107 0308 	add.w	r3, r7, #8
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	480c      	ldr	r0, [pc, #48]	; (800aad4 <MX_TIM5_Init+0x94>)
 800aaa2:	f7fc f8ed 	bl	8006c80 <HAL_TIM_ConfigClockSource>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d001      	beq.n	800aab0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800aaac:	f001 fd16 	bl	800c4dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aab0:	2300      	movs	r3, #0
 800aab2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aab4:	2300      	movs	r3, #0
 800aab6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800aab8:	463b      	mov	r3, r7
 800aaba:	4619      	mov	r1, r3
 800aabc:	4805      	ldr	r0, [pc, #20]	; (800aad4 <MX_TIM5_Init+0x94>)
 800aabe:	f7fc fe19 	bl	80076f4 <HAL_TIMEx_MasterConfigSynchronization>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800aac8:	f001 fd08 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800aacc:	bf00      	nop
 800aace:	3718      	adds	r7, #24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	20000b68 	.word	0x20000b68
 800aad8:	40000c00 	.word	0x40000c00

0800aadc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aae2:	463b      	mov	r3, r7
 800aae4:	2200      	movs	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]
 800aae8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800aaea:	4b15      	ldr	r3, [pc, #84]	; (800ab40 <MX_TIM6_Init+0x64>)
 800aaec:	4a15      	ldr	r2, [pc, #84]	; (800ab44 <MX_TIM6_Init+0x68>)
 800aaee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 800aaf0:	4b13      	ldr	r3, [pc, #76]	; (800ab40 <MX_TIM6_Init+0x64>)
 800aaf2:	2253      	movs	r2, #83	; 0x53
 800aaf4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aaf6:	4b12      	ldr	r3, [pc, #72]	; (800ab40 <MX_TIM6_Init+0x64>)
 800aaf8:	2200      	movs	r2, #0
 800aafa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800aafc:	4b10      	ldr	r3, [pc, #64]	; (800ab40 <MX_TIM6_Init+0x64>)
 800aafe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab02:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab04:	4b0e      	ldr	r3, [pc, #56]	; (800ab40 <MX_TIM6_Init+0x64>)
 800ab06:	2200      	movs	r2, #0
 800ab08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800ab0a:	480d      	ldr	r0, [pc, #52]	; (800ab40 <MX_TIM6_Init+0x64>)
 800ab0c:	f7fb fb76 	bl	80061fc <HAL_TIM_Base_Init>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d001      	beq.n	800ab1a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800ab16:	f001 fce1 	bl	800c4dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800ab22:	463b      	mov	r3, r7
 800ab24:	4619      	mov	r1, r3
 800ab26:	4806      	ldr	r0, [pc, #24]	; (800ab40 <MX_TIM6_Init+0x64>)
 800ab28:	f7fc fde4 	bl	80076f4 <HAL_TIMEx_MasterConfigSynchronization>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d001      	beq.n	800ab36 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800ab32:	f001 fcd3 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800ab36:	bf00      	nop
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	20000d80 	.word	0x20000d80
 800ab44:	40001000 	.word	0x40001000

0800ab48 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b08c      	sub	sp, #48	; 0x30
 800ab4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ab4e:	f107 030c 	add.w	r3, r7, #12
 800ab52:	2224      	movs	r2, #36	; 0x24
 800ab54:	2100      	movs	r1, #0
 800ab56:	4618      	mov	r0, r3
 800ab58:	f002 fc74 	bl	800d444 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ab5c:	1d3b      	adds	r3, r7, #4
 800ab5e:	2200      	movs	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800ab64:	4b22      	ldr	r3, [pc, #136]	; (800abf0 <MX_TIM8_Init+0xa8>)
 800ab66:	4a23      	ldr	r2, [pc, #140]	; (800abf4 <MX_TIM8_Init+0xac>)
 800ab68:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800ab6a:	4b21      	ldr	r3, [pc, #132]	; (800abf0 <MX_TIM8_Init+0xa8>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab70:	4b1f      	ldr	r3, [pc, #124]	; (800abf0 <MX_TIM8_Init+0xa8>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1999;
 800ab76:	4b1e      	ldr	r3, [pc, #120]	; (800abf0 <MX_TIM8_Init+0xa8>)
 800ab78:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800ab7c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ab7e:	4b1c      	ldr	r3, [pc, #112]	; (800abf0 <MX_TIM8_Init+0xa8>)
 800ab80:	2200      	movs	r2, #0
 800ab82:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800ab84:	4b1a      	ldr	r3, [pc, #104]	; (800abf0 <MX_TIM8_Init+0xa8>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab8a:	4b19      	ldr	r3, [pc, #100]	; (800abf0 <MX_TIM8_Init+0xa8>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800ab90:	2303      	movs	r3, #3
 800ab92:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800ab94:	2300      	movs	r3, #0
 800ab96:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800aba4:	2300      	movs	r3, #0
 800aba6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800aba8:	2301      	movs	r3, #1
 800abaa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800abac:	2300      	movs	r3, #0
 800abae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800abb0:	2300      	movs	r3, #0
 800abb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800abb4:	f107 030c 	add.w	r3, r7, #12
 800abb8:	4619      	mov	r1, r3
 800abba:	480d      	ldr	r0, [pc, #52]	; (800abf0 <MX_TIM8_Init+0xa8>)
 800abbc:	f7fb fcad 	bl	800651a <HAL_TIM_Encoder_Init>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d001      	beq.n	800abca <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800abc6:	f001 fc89 	bl	800c4dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800abca:	2320      	movs	r3, #32
 800abcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800abce:	2300      	movs	r3, #0
 800abd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800abd2:	1d3b      	adds	r3, r7, #4
 800abd4:	4619      	mov	r1, r3
 800abd6:	4806      	ldr	r0, [pc, #24]	; (800abf0 <MX_TIM8_Init+0xa8>)
 800abd8:	f7fc fd8c 	bl	80076f4 <HAL_TIMEx_MasterConfigSynchronization>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800abe2:	f001 fc7b 	bl	800c4dc <Error_Handler>
  //HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); // this didn't seem to be necessary


  /* USER CODE END TIM8_Init 2 */

}
 800abe6:	bf00      	nop
 800abe8:	3730      	adds	r7, #48	; 0x30
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	20000524 	.word	0x20000524
 800abf4:	40010400 	.word	0x40010400

0800abf8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b08c      	sub	sp, #48	; 0x30
 800abfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800abfe:	f107 0320 	add.w	r3, r7, #32
 800ac02:	2200      	movs	r2, #0
 800ac04:	601a      	str	r2, [r3, #0]
 800ac06:	605a      	str	r2, [r3, #4]
 800ac08:	609a      	str	r2, [r3, #8]
 800ac0a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ac0c:	1d3b      	adds	r3, r7, #4
 800ac0e:	2200      	movs	r2, #0
 800ac10:	601a      	str	r2, [r3, #0]
 800ac12:	605a      	str	r2, [r3, #4]
 800ac14:	609a      	str	r2, [r3, #8]
 800ac16:	60da      	str	r2, [r3, #12]
 800ac18:	611a      	str	r2, [r3, #16]
 800ac1a:	615a      	str	r2, [r3, #20]
 800ac1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800ac1e:	4b2d      	ldr	r3, [pc, #180]	; (800acd4 <MX_TIM9_Init+0xdc>)
 800ac20:	4a2d      	ldr	r2, [pc, #180]	; (800acd8 <MX_TIM9_Init+0xe0>)
 800ac22:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 800ac24:	4b2b      	ldr	r3, [pc, #172]	; (800acd4 <MX_TIM9_Init+0xdc>)
 800ac26:	22a7      	movs	r2, #167	; 0xa7
 800ac28:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac2a:	4b2a      	ldr	r3, [pc, #168]	; (800acd4 <MX_TIM9_Init+0xdc>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 800ac30:	4b28      	ldr	r3, [pc, #160]	; (800acd4 <MX_TIM9_Init+0xdc>)
 800ac32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ac36:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac38:	4b26      	ldr	r3, [pc, #152]	; (800acd4 <MX_TIM9_Init+0xdc>)
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac3e:	4b25      	ldr	r3, [pc, #148]	; (800acd4 <MX_TIM9_Init+0xdc>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800ac44:	4823      	ldr	r0, [pc, #140]	; (800acd4 <MX_TIM9_Init+0xdc>)
 800ac46:	f7fb fad9 	bl	80061fc <HAL_TIM_Base_Init>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d001      	beq.n	800ac54 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800ac50:	f001 fc44 	bl	800c4dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ac54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac58:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800ac5a:	f107 0320 	add.w	r3, r7, #32
 800ac5e:	4619      	mov	r1, r3
 800ac60:	481c      	ldr	r0, [pc, #112]	; (800acd4 <MX_TIM9_Init+0xdc>)
 800ac62:	f7fc f80d 	bl	8006c80 <HAL_TIM_ConfigClockSource>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d001      	beq.n	800ac70 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800ac6c:	f001 fc36 	bl	800c4dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800ac70:	4818      	ldr	r0, [pc, #96]	; (800acd4 <MX_TIM9_Init+0xdc>)
 800ac72:	f7fb fba9 	bl	80063c8 <HAL_TIM_PWM_Init>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d001      	beq.n	800ac80 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800ac7c:	f001 fc2e 	bl	800c4dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ac80:	2360      	movs	r3, #96	; 0x60
 800ac82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800ac84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ac88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ac92:	1d3b      	adds	r3, r7, #4
 800ac94:	2200      	movs	r2, #0
 800ac96:	4619      	mov	r1, r3
 800ac98:	480e      	ldr	r0, [pc, #56]	; (800acd4 <MX_TIM9_Init+0xdc>)
 800ac9a:	f7fb ff2b 	bl	8006af4 <HAL_TIM_PWM_ConfigChannel>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d001      	beq.n	800aca8 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 800aca4:	f001 fc1a 	bl	800c4dc <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 800aca8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800acac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800acae:	1d3b      	adds	r3, r7, #4
 800acb0:	2204      	movs	r2, #4
 800acb2:	4619      	mov	r1, r3
 800acb4:	4807      	ldr	r0, [pc, #28]	; (800acd4 <MX_TIM9_Init+0xdc>)
 800acb6:	f7fb ff1d 	bl	8006af4 <HAL_TIM_PWM_ConfigChannel>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d001      	beq.n	800acc4 <MX_TIM9_Init+0xcc>
  {
    Error_Handler();
 800acc0:	f001 fc0c 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800acc4:	4803      	ldr	r0, [pc, #12]	; (800acd4 <MX_TIM9_Init+0xdc>)
 800acc6:	f002 f8ef 	bl	800cea8 <HAL_TIM_MspPostInit>

}
 800acca:	bf00      	nop
 800accc:	3730      	adds	r7, #48	; 0x30
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	20000e68 	.word	0x20000e68
 800acd8:	40014000 	.word	0x40014000

0800acdc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b08c      	sub	sp, #48	; 0x30
 800ace0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ace2:	f107 0320 	add.w	r3, r7, #32
 800ace6:	2200      	movs	r2, #0
 800ace8:	601a      	str	r2, [r3, #0]
 800acea:	605a      	str	r2, [r3, #4]
 800acec:	609a      	str	r2, [r3, #8]
 800acee:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800acf0:	1d3b      	adds	r3, r7, #4
 800acf2:	2200      	movs	r2, #0
 800acf4:	601a      	str	r2, [r3, #0]
 800acf6:	605a      	str	r2, [r3, #4]
 800acf8:	609a      	str	r2, [r3, #8]
 800acfa:	60da      	str	r2, [r3, #12]
 800acfc:	611a      	str	r2, [r3, #16]
 800acfe:	615a      	str	r2, [r3, #20]
 800ad00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800ad02:	4b24      	ldr	r3, [pc, #144]	; (800ad94 <MX_TIM12_Init+0xb8>)
 800ad04:	4a24      	ldr	r2, [pc, #144]	; (800ad98 <MX_TIM12_Init+0xbc>)
 800ad06:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 7;
 800ad08:	4b22      	ldr	r3, [pc, #136]	; (800ad94 <MX_TIM12_Init+0xb8>)
 800ad0a:	2207      	movs	r2, #7
 800ad0c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad0e:	4b21      	ldr	r3, [pc, #132]	; (800ad94 <MX_TIM12_Init+0xb8>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800ad14:	4b1f      	ldr	r3, [pc, #124]	; (800ad94 <MX_TIM12_Init+0xb8>)
 800ad16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad1a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ad1c:	4b1d      	ldr	r3, [pc, #116]	; (800ad94 <MX_TIM12_Init+0xb8>)
 800ad1e:	2200      	movs	r2, #0
 800ad20:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ad22:	4b1c      	ldr	r3, [pc, #112]	; (800ad94 <MX_TIM12_Init+0xb8>)
 800ad24:	2200      	movs	r2, #0
 800ad26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800ad28:	481a      	ldr	r0, [pc, #104]	; (800ad94 <MX_TIM12_Init+0xb8>)
 800ad2a:	f7fb fa67 	bl	80061fc <HAL_TIM_Base_Init>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d001      	beq.n	800ad38 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800ad34:	f001 fbd2 	bl	800c4dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ad38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad3c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800ad3e:	f107 0320 	add.w	r3, r7, #32
 800ad42:	4619      	mov	r1, r3
 800ad44:	4813      	ldr	r0, [pc, #76]	; (800ad94 <MX_TIM12_Init+0xb8>)
 800ad46:	f7fb ff9b 	bl	8006c80 <HAL_TIM_ConfigClockSource>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d001      	beq.n	800ad54 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800ad50:	f001 fbc4 	bl	800c4dc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 800ad54:	480f      	ldr	r0, [pc, #60]	; (800ad94 <MX_TIM12_Init+0xb8>)
 800ad56:	f7fb fac4 	bl	80062e2 <HAL_TIM_OC_Init>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800ad60:	f001 fbbc 	bl	800c4dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800ad64:	2300      	movs	r3, #0
 800ad66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ad70:	2300      	movs	r3, #0
 800ad72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ad74:	1d3b      	adds	r3, r7, #4
 800ad76:	2200      	movs	r2, #0
 800ad78:	4619      	mov	r1, r3
 800ad7a:	4806      	ldr	r0, [pc, #24]	; (800ad94 <MX_TIM12_Init+0xb8>)
 800ad7c:	f7fb fdbe 	bl	80068fc <HAL_TIM_OC_ConfigChannel>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800ad86:	f001 fba9 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800ad8a:	bf00      	nop
 800ad8c:	3730      	adds	r7, #48	; 0x30
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	20001030 	.word	0x20001030
 800ad98:	40001800 	.word	0x40001800

0800ad9c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800ada2:	463b      	mov	r3, r7
 800ada4:	2200      	movs	r2, #0
 800ada6:	601a      	str	r2, [r3, #0]
 800ada8:	605a      	str	r2, [r3, #4]
 800adaa:	609a      	str	r2, [r3, #8]
 800adac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800adae:	4b1c      	ldr	r3, [pc, #112]	; (800ae20 <MX_TIM13_Init+0x84>)
 800adb0:	4a1c      	ldr	r2, [pc, #112]	; (800ae24 <MX_TIM13_Init+0x88>)
 800adb2:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800adb4:	4b1a      	ldr	r3, [pc, #104]	; (800ae20 <MX_TIM13_Init+0x84>)
 800adb6:	2200      	movs	r2, #0
 800adb8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800adba:	4b19      	ldr	r3, [pc, #100]	; (800ae20 <MX_TIM13_Init+0x84>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 800adc0:	4b17      	ldr	r3, [pc, #92]	; (800ae20 <MX_TIM13_Init+0x84>)
 800adc2:	2200      	movs	r2, #0
 800adc4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800adc6:	4b16      	ldr	r3, [pc, #88]	; (800ae20 <MX_TIM13_Init+0x84>)
 800adc8:	2200      	movs	r2, #0
 800adca:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800adcc:	4b14      	ldr	r3, [pc, #80]	; (800ae20 <MX_TIM13_Init+0x84>)
 800adce:	2200      	movs	r2, #0
 800add0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800add2:	4813      	ldr	r0, [pc, #76]	; (800ae20 <MX_TIM13_Init+0x84>)
 800add4:	f7fb fa12 	bl	80061fc <HAL_TIM_Base_Init>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d001      	beq.n	800ade2 <MX_TIM13_Init+0x46>
  {
    Error_Handler();
 800adde:	f001 fb7d 	bl	800c4dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 800ade2:	480f      	ldr	r0, [pc, #60]	; (800ae20 <MX_TIM13_Init+0x84>)
 800ade4:	f7fb fb64 	bl	80064b0 <HAL_TIM_IC_Init>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d001      	beq.n	800adf2 <MX_TIM13_Init+0x56>
  {
    Error_Handler();
 800adee:	f001 fb75 	bl	800c4dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800adf2:	2300      	movs	r3, #0
 800adf4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800adf6:	2301      	movs	r3, #1
 800adf8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800adfa:	2300      	movs	r3, #0
 800adfc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800adfe:	2300      	movs	r3, #0
 800ae00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ae02:	463b      	mov	r3, r7
 800ae04:	2200      	movs	r2, #0
 800ae06:	4619      	mov	r1, r3
 800ae08:	4805      	ldr	r0, [pc, #20]	; (800ae20 <MX_TIM13_Init+0x84>)
 800ae0a:	f7fb fdd7 	bl	80069bc <HAL_TIM_IC_ConfigChannel>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d001      	beq.n	800ae18 <MX_TIM13_Init+0x7c>
  {
    Error_Handler();
 800ae14:	f001 fb62 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800ae18:	bf00      	nop
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	20000cbc 	.word	0x20000cbc
 800ae24:	40001c00 	.word	0x40001c00

0800ae28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800ae2c:	4b11      	ldr	r3, [pc, #68]	; (800ae74 <MX_USART3_UART_Init+0x4c>)
 800ae2e:	4a12      	ldr	r2, [pc, #72]	; (800ae78 <MX_USART3_UART_Init+0x50>)
 800ae30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800ae32:	4b10      	ldr	r3, [pc, #64]	; (800ae74 <MX_USART3_UART_Init+0x4c>)
 800ae34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ae38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ae3a:	4b0e      	ldr	r3, [pc, #56]	; (800ae74 <MX_USART3_UART_Init+0x4c>)
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ae40:	4b0c      	ldr	r3, [pc, #48]	; (800ae74 <MX_USART3_UART_Init+0x4c>)
 800ae42:	2200      	movs	r2, #0
 800ae44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800ae46:	4b0b      	ldr	r3, [pc, #44]	; (800ae74 <MX_USART3_UART_Init+0x4c>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ae4c:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <MX_USART3_UART_Init+0x4c>)
 800ae4e:	220c      	movs	r2, #12
 800ae50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ae52:	4b08      	ldr	r3, [pc, #32]	; (800ae74 <MX_USART3_UART_Init+0x4c>)
 800ae54:	2200      	movs	r2, #0
 800ae56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ae58:	4b06      	ldr	r3, [pc, #24]	; (800ae74 <MX_USART3_UART_Init+0x4c>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ae5e:	4805      	ldr	r0, [pc, #20]	; (800ae74 <MX_USART3_UART_Init+0x4c>)
 800ae60:	f7fc fd4f 	bl	8007902 <HAL_UART_Init>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d001      	beq.n	800ae6e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800ae6a:	f001 fb37 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800ae6e:	bf00      	nop
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	20000564 	.word	0x20000564
 800ae78:	40004800 	.word	0x40004800

0800ae7c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae80:	4b14      	ldr	r3, [pc, #80]	; (800aed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800ae82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ae86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ae88:	4b12      	ldr	r3, [pc, #72]	; (800aed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800ae8a:	2204      	movs	r2, #4
 800ae8c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ae8e:	4b11      	ldr	r3, [pc, #68]	; (800aed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800ae90:	2202      	movs	r2, #2
 800ae92:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae94:	4b0f      	ldr	r3, [pc, #60]	; (800aed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800ae96:	2200      	movs	r2, #0
 800ae98:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ae9a:	4b0e      	ldr	r3, [pc, #56]	; (800aed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800ae9c:	2202      	movs	r2, #2
 800ae9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aea0:	4b0c      	ldr	r3, [pc, #48]	; (800aed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800aea2:	2200      	movs	r2, #0
 800aea4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aea6:	4b0b      	ldr	r3, [pc, #44]	; (800aed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800aea8:	2200      	movs	r2, #0
 800aeaa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aeac:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800aeae:	2200      	movs	r2, #0
 800aeb0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800aeb2:	4b08      	ldr	r3, [pc, #32]	; (800aed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aeb8:	4b06      	ldr	r3, [pc, #24]	; (800aed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800aeba:	2200      	movs	r2, #0
 800aebc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aebe:	4805      	ldr	r0, [pc, #20]	; (800aed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800aec0:	f7f9 fbd7 	bl	8004672 <HAL_PCD_Init>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d001      	beq.n	800aece <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800aeca:	f001 fb07 	bl	800c4dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800aece:	bf00      	nop
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	20000640 	.word	0x20000640

0800aed8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800aede:	2300      	movs	r3, #0
 800aee0:	607b      	str	r3, [r7, #4]
 800aee2:	4b1f      	ldr	r3, [pc, #124]	; (800af60 <MX_DMA_Init+0x88>)
 800aee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee6:	4a1e      	ldr	r2, [pc, #120]	; (800af60 <MX_DMA_Init+0x88>)
 800aee8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aeec:	6313      	str	r3, [r2, #48]	; 0x30
 800aeee:	4b1c      	ldr	r3, [pc, #112]	; (800af60 <MX_DMA_Init+0x88>)
 800aef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aef6:	607b      	str	r3, [r7, #4]
 800aef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800aefa:	2300      	movs	r3, #0
 800aefc:	603b      	str	r3, [r7, #0]
 800aefe:	4b18      	ldr	r3, [pc, #96]	; (800af60 <MX_DMA_Init+0x88>)
 800af00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af02:	4a17      	ldr	r2, [pc, #92]	; (800af60 <MX_DMA_Init+0x88>)
 800af04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800af08:	6313      	str	r3, [r2, #48]	; 0x30
 800af0a:	4b15      	ldr	r3, [pc, #84]	; (800af60 <MX_DMA_Init+0x88>)
 800af0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af12:	603b      	str	r3, [r7, #0]
 800af14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800af16:	2200      	movs	r2, #0
 800af18:	2100      	movs	r1, #0
 800af1a:	200e      	movs	r0, #14
 800af1c:	f7f7 fe21 	bl	8002b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800af20:	200e      	movs	r0, #14
 800af22:	f7f7 fe3a 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800af26:	2200      	movs	r2, #0
 800af28:	2100      	movs	r1, #0
 800af2a:	2038      	movs	r0, #56	; 0x38
 800af2c:	f7f7 fe19 	bl	8002b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800af30:	2038      	movs	r0, #56	; 0x38
 800af32:	f7f7 fe32 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800af36:	2200      	movs	r2, #0
 800af38:	2100      	movs	r1, #0
 800af3a:	2039      	movs	r0, #57	; 0x39
 800af3c:	f7f7 fe11 	bl	8002b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800af40:	2039      	movs	r0, #57	; 0x39
 800af42:	f7f7 fe2a 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800af46:	2200      	movs	r2, #0
 800af48:	2100      	movs	r1, #0
 800af4a:	203a      	movs	r0, #58	; 0x3a
 800af4c:	f7f7 fe09 	bl	8002b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800af50:	203a      	movs	r0, #58	; 0x3a
 800af52:	f7f7 fe22 	bl	8002b9a <HAL_NVIC_EnableIRQ>

}
 800af56:	bf00      	nop
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	40023800 	.word	0x40023800

0800af64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b08c      	sub	sp, #48	; 0x30
 800af68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af6a:	f107 031c 	add.w	r3, r7, #28
 800af6e:	2200      	movs	r2, #0
 800af70:	601a      	str	r2, [r3, #0]
 800af72:	605a      	str	r2, [r3, #4]
 800af74:	609a      	str	r2, [r3, #8]
 800af76:	60da      	str	r2, [r3, #12]
 800af78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800af7a:	2300      	movs	r3, #0
 800af7c:	61bb      	str	r3, [r7, #24]
 800af7e:	4b61      	ldr	r3, [pc, #388]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800af80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af82:	4a60      	ldr	r2, [pc, #384]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800af84:	f043 0310 	orr.w	r3, r3, #16
 800af88:	6313      	str	r3, [r2, #48]	; 0x30
 800af8a:	4b5e      	ldr	r3, [pc, #376]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800af8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af8e:	f003 0310 	and.w	r3, r3, #16
 800af92:	61bb      	str	r3, [r7, #24]
 800af94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800af96:	2300      	movs	r3, #0
 800af98:	617b      	str	r3, [r7, #20]
 800af9a:	4b5a      	ldr	r3, [pc, #360]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800af9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af9e:	4a59      	ldr	r2, [pc, #356]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800afa0:	f043 0304 	orr.w	r3, r3, #4
 800afa4:	6313      	str	r3, [r2, #48]	; 0x30
 800afa6:	4b57      	ldr	r3, [pc, #348]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800afa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afaa:	f003 0304 	and.w	r3, r3, #4
 800afae:	617b      	str	r3, [r7, #20]
 800afb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800afb2:	2300      	movs	r3, #0
 800afb4:	613b      	str	r3, [r7, #16]
 800afb6:	4b53      	ldr	r3, [pc, #332]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800afb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afba:	4a52      	ldr	r2, [pc, #328]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800afbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc0:	6313      	str	r3, [r2, #48]	; 0x30
 800afc2:	4b50      	ldr	r3, [pc, #320]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800afc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afca:	613b      	str	r3, [r7, #16]
 800afcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800afce:	2300      	movs	r3, #0
 800afd0:	60fb      	str	r3, [r7, #12]
 800afd2:	4b4c      	ldr	r3, [pc, #304]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800afd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd6:	4a4b      	ldr	r2, [pc, #300]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800afd8:	f043 0301 	orr.w	r3, r3, #1
 800afdc:	6313      	str	r3, [r2, #48]	; 0x30
 800afde:	4b49      	ldr	r3, [pc, #292]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800afe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe2:	f003 0301 	and.w	r3, r3, #1
 800afe6:	60fb      	str	r3, [r7, #12]
 800afe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800afea:	2300      	movs	r3, #0
 800afec:	60bb      	str	r3, [r7, #8]
 800afee:	4b45      	ldr	r3, [pc, #276]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800aff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff2:	4a44      	ldr	r2, [pc, #272]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800aff4:	f043 0302 	orr.w	r3, r3, #2
 800aff8:	6313      	str	r3, [r2, #48]	; 0x30
 800affa:	4b42      	ldr	r3, [pc, #264]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800affc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affe:	f003 0302 	and.w	r3, r3, #2
 800b002:	60bb      	str	r3, [r7, #8]
 800b004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b006:	2300      	movs	r3, #0
 800b008:	607b      	str	r3, [r7, #4]
 800b00a:	4b3e      	ldr	r3, [pc, #248]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800b00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b00e:	4a3d      	ldr	r2, [pc, #244]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800b010:	f043 0308 	orr.w	r3, r3, #8
 800b014:	6313      	str	r3, [r2, #48]	; 0x30
 800b016:	4b3b      	ldr	r3, [pc, #236]	; (800b104 <MX_GPIO_Init+0x1a0>)
 800b018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b01a:	f003 0308 	and.w	r3, r3, #8
 800b01e:	607b      	str	r3, [r7, #4]
 800b020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin, GPIO_PIN_RESET);
 800b022:	2200      	movs	r2, #0
 800b024:	f24c 0118 	movw	r1, #49176	; 0xc018
 800b028:	4837      	ldr	r0, [pc, #220]	; (800b108 <MX_GPIO_Init+0x1a4>)
 800b02a:	f7f8 fb4f 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800b02e:	2200      	movs	r2, #0
 800b030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b034:	4835      	ldr	r0, [pc, #212]	; (800b10c <MX_GPIO_Init+0x1a8>)
 800b036:	f7f8 fb49 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 800b03a:	2200      	movs	r2, #0
 800b03c:	f64b 0180 	movw	r1, #47232	; 0xb880
 800b040:	4833      	ldr	r0, [pc, #204]	; (800b110 <MX_GPIO_Init+0x1ac>)
 800b042:	f7f8 fb43 	bl	80036cc <HAL_GPIO_WritePin>
                          |nSCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin EN_GATE_Pin M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin;
 800b046:	f24c 0318 	movw	r3, #49176	; 0xc018
 800b04a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b04c:	2301      	movs	r3, #1
 800b04e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b050:	2300      	movs	r3, #0
 800b052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b054:	2300      	movs	r3, #0
 800b056:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b058:	f107 031c 	add.w	r3, r7, #28
 800b05c:	4619      	mov	r1, r3
 800b05e:	482a      	ldr	r0, [pc, #168]	; (800b108 <MX_GPIO_Init+0x1a4>)
 800b060:	f7f8 f99a 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b06a:	2301      	movs	r3, #1
 800b06c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b06e:	2300      	movs	r3, #0
 800b070:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b072:	2300      	movs	r3, #0
 800b074:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b076:	f107 031c 	add.w	r3, r7, #28
 800b07a:	4619      	mov	r1, r3
 800b07c:	4823      	ldr	r0, [pc, #140]	; (800b10c <MX_GPIO_Init+0x1a8>)
 800b07e:	f7f8 f98b 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 debug1_out_Pin debug2_out_Pin ROT0_nCS_Pin 
                           nSCS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 800b082:	f64b 0380 	movw	r3, #47232	; 0xb880
 800b086:	61fb      	str	r3, [r7, #28]
                          |nSCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b088:	2301      	movs	r3, #1
 800b08a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b08c:	2300      	movs	r3, #0
 800b08e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b090:	2300      	movs	r3, #0
 800b092:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b094:	f107 031c 	add.w	r3, r7, #28
 800b098:	4619      	mov	r1, r3
 800b09a:	481d      	ldr	r0, [pc, #116]	; (800b110 <MX_GPIO_Init+0x1ac>)
 800b09c:	f7f8 f97c 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : debug1_in_Pin */
  GPIO_InitStruct.Pin = debug1_in_Pin;
 800b0a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b0a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(debug1_in_GPIO_Port, &GPIO_InitStruct);
 800b0ae:	f107 031c 	add.w	r3, r7, #28
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	4816      	ldr	r0, [pc, #88]	; (800b110 <MX_GPIO_Init+0x1ac>)
 800b0b6:	f7f8 f96f 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT0_I_W_Pin */
  GPIO_InitStruct.Pin = ROT0_I_W_Pin;
 800b0ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b0c0:	4b14      	ldr	r3, [pc, #80]	; (800b114 <MX_GPIO_Init+0x1b0>)
 800b0c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ROT0_I_W_GPIO_Port, &GPIO_InitStruct);
 800b0c8:	f107 031c 	add.w	r3, r7, #28
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	480f      	ldr	r0, [pc, #60]	; (800b10c <MX_GPIO_Init+0x1a8>)
 800b0d0:	f7f8 f962 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 800b0d4:	2370      	movs	r3, #112	; 0x70
 800b0d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b0e0:	f107 031c 	add.w	r3, r7, #28
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	480a      	ldr	r0, [pc, #40]	; (800b110 <MX_GPIO_Init+0x1ac>)
 800b0e8:	f7f8 f956 	bl	8003398 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	2017      	movs	r0, #23
 800b0f2:	f7f7 fd36 	bl	8002b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800b0f6:	2017      	movs	r0, #23
 800b0f8:	f7f7 fd4f 	bl	8002b9a <HAL_NVIC_EnableIRQ>

}
 800b0fc:	bf00      	nop
 800b0fe:	3730      	adds	r7, #48	; 0x30
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	40023800 	.word	0x40023800
 800b108:	40021000 	.word	0x40021000
 800b10c:	40020800 	.word	0x40020800
 800b110:	40020c00 	.word	0x40020c00
 800b114:	10110000 	.word	0x10110000

0800b118 <set_pwm_off>:

/* USER CODE BEGIN 4 */

void set_pwm_off(void){
 800b118:	b480      	push	{r7}
 800b11a:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 800b11c:	4b06      	ldr	r3, [pc, #24]	; (800b138 <set_pwm_off+0x20>)
 800b11e:	2200      	movs	r2, #0
 800b120:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800b122:	4b05      	ldr	r3, [pc, #20]	; (800b138 <set_pwm_off+0x20>)
 800b124:	2200      	movs	r2, #0
 800b126:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800b128:	4b03      	ldr	r3, [pc, #12]	; (800b138 <set_pwm_off+0x20>)
 800b12a:	2200      	movs	r2, #0
 800b12c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b12e:	bf00      	nop
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr
 800b138:	40010000 	.word	0x40010000

0800b13c <step_through_pole_angles>:

void step_through_pole_angles(void){
 800b13c:	b5b0      	push	{r4, r5, r7, lr}
 800b13e:	b0d4      	sub	sp, #336	; 0x150
 800b140:	af02      	add	r7, sp, #8
	normal_operation_enabled = false;
 800b142:	4b84      	ldr	r3, [pc, #528]	; (800b354 <step_through_pole_angles+0x218>)
 800b144:	2200      	movs	r2, #0
 800b146:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800b148:	f7ff ffe6 	bl	800b118 <set_pwm_off>
	//run_motor = 0;
	HAL_Delay(100);
 800b14c:	2064      	movs	r0, #100	; 0x64
 800b14e:	f7f5 ff8d 	bl	800106c <HAL_Delay>
	uint16_t step_through_amp = 5 * PWM_1PERCENT;
 800b152:	23cd      	movs	r3, #205	; 0xcd
 800b154:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	for (uint8_t pole = 0; pole < N_POLES ; pole++){
 800b158:	2300      	movs	r3, #0
 800b15a:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
 800b15e:	e07f      	b.n	800b260 <step_through_pole_angles+0x124>
		for (uint8_t ABC = 0; ABC < N_PHASES ; ABC++){
 800b160:	2300      	movs	r3, #0
 800b162:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142
 800b166:	e072      	b.n	800b24e <step_through_pole_angles+0x112>
			set_pwm_off();
 800b168:	f7ff ffd6 	bl	800b118 <set_pwm_off>
			if (ABC==0){
 800b16c:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 800b170:	2b00      	cmp	r3, #0
 800b172:	d104      	bne.n	800b17e <step_through_pole_angles+0x42>
				TIM1->CCR1 = step_through_amp;
 800b174:	4a78      	ldr	r2, [pc, #480]	; (800b358 <step_through_pole_angles+0x21c>)
 800b176:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800b17a:	6353      	str	r3, [r2, #52]	; 0x34
 800b17c:	e00c      	b.n	800b198 <step_through_pole_angles+0x5c>
			}
			else if (ABC==1){
 800b17e:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 800b182:	2b01      	cmp	r3, #1
 800b184:	d104      	bne.n	800b190 <step_through_pole_angles+0x54>
				if (INVERT){
					TIM1->CCR3 = step_through_amp;
				}
				else{
					TIM1->CCR2 = step_through_amp;
 800b186:	4a74      	ldr	r2, [pc, #464]	; (800b358 <step_through_pole_angles+0x21c>)
 800b188:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800b18c:	6393      	str	r3, [r2, #56]	; 0x38
 800b18e:	e003      	b.n	800b198 <step_through_pole_angles+0x5c>
			else {
				if (INVERT){
					TIM1->CCR2 = step_through_amp;
				}
				else{
					TIM1->CCR3 = step_through_amp;
 800b190:	4a71      	ldr	r2, [pc, #452]	; (800b358 <step_through_pole_angles+0x21c>)
 800b192:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800b196:	63d3      	str	r3, [r2, #60]	; 0x3c
				}
			}
			HAL_Delay(200);
 800b198:	20c8      	movs	r0, #200	; 0xc8
 800b19a:	f7f5 ff67 	bl	800106c <HAL_Delay>
			pole_angles[pole * N_PHASES + ABC]=TIM8->CNT;
 800b19e:	4b6f      	ldr	r3, [pc, #444]	; (800b35c <step_through_pole_angles+0x220>)
 800b1a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b1a2:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	005b      	lsls	r3, r3, #1
 800b1aa:	441a      	add	r2, r3
 800b1ac:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 800b1b0:	4413      	add	r3, r2
 800b1b2:	b289      	uxth	r1, r1
 800b1b4:	4a6a      	ldr	r2, [pc, #424]	; (800b360 <step_through_pole_angles+0x224>)
 800b1b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]



			uint8_t buf[300];
			buf[0] = '\0';
 800b1ba:	1d3b      	adds	r3, r7, #4
 800b1bc:	2200      	movs	r2, #0
 800b1be:	701a      	strb	r2, [r3, #0]
			sprintf((char*)buf_msg, "[step_through_pole_angles] pole: %d ABC: %d angle: %d \r\n", pole, ABC, TIM8->CNT);
 800b1c0:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 800b1c4:	f897 1142 	ldrb.w	r1, [r7, #322]	; 0x142
 800b1c8:	4b64      	ldr	r3, [pc, #400]	; (800b35c <step_through_pole_angles+0x220>)
 800b1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	4964      	ldr	r1, [pc, #400]	; (800b364 <step_through_pole_angles+0x228>)
 800b1d2:	4865      	ldr	r0, [pc, #404]	; (800b368 <step_through_pole_angles+0x22c>)
 800b1d4:	f002 f93e 	bl	800d454 <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800b1d8:	4863      	ldr	r0, [pc, #396]	; (800b368 <step_through_pole_angles+0x22c>)
 800b1da:	f7f4 fff9 	bl	80001d0 <strlen>
 800b1de:	4604      	mov	r4, r0
 800b1e0:	4862      	ldr	r0, [pc, #392]	; (800b36c <step_through_pole_angles+0x230>)
 800b1e2:	f7f4 fff5 	bl	80001d0 <strlen>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	4423      	add	r3, r4
 800b1ea:	2b63      	cmp	r3, #99	; 0x63
 800b1ec:	d804      	bhi.n	800b1f8 <step_through_pole_angles+0xbc>
				strcat(buf_msgs, buf_msg);
 800b1ee:	495e      	ldr	r1, [pc, #376]	; (800b368 <step_through_pole_angles+0x22c>)
 800b1f0:	485e      	ldr	r0, [pc, #376]	; (800b36c <step_through_pole_angles+0x230>)
 800b1f2:	f002 f94f 	bl	800d494 <strcat>
 800b1f6:	e002      	b.n	800b1fe <step_through_pole_angles+0xc2>
			}
			else {
				buf_msgs[0] = '#';
 800b1f8:	4b5c      	ldr	r3, [pc, #368]	; (800b36c <step_through_pole_angles+0x230>)
 800b1fa:	2223      	movs	r2, #35	; 0x23
 800b1fc:	701a      	strb	r2, [r3, #0]
			}
			if (buf_msgs[0] != '\0'){
 800b1fe:	4b5b      	ldr	r3, [pc, #364]	; (800b36c <step_through_pole_angles+0x230>)
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d007      	beq.n	800b216 <step_through_pole_angles+0xda>
				strcat(buf, buf_msgs);
 800b206:	1d3b      	adds	r3, r7, #4
 800b208:	4958      	ldr	r1, [pc, #352]	; (800b36c <step_through_pole_angles+0x230>)
 800b20a:	4618      	mov	r0, r3
 800b20c:	f002 f942 	bl	800d494 <strcat>
				buf_msgs[0] = '\0';
 800b210:	4b56      	ldr	r3, [pc, #344]	; (800b36c <step_through_pole_angles+0x230>)
 800b212:	2200      	movs	r2, #0
 800b214:	701a      	strb	r2, [r3, #0]
			}
			//HAL_UART_Transmit_IT(&huart3, buf, strlen((char*)buf)); //WORKS but replaced by DMA below
			huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 800b216:	4b56      	ldr	r3, [pc, #344]	; (800b370 <step_through_pole_angles+0x234>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	695a      	ldr	r2, [r3, #20]
 800b21c:	4b54      	ldr	r3, [pc, #336]	; (800b370 <step_through_pole_angles+0x234>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b224:	615a      	str	r2, [r3, #20]
			HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 800b226:	1d3c      	adds	r4, r7, #4
 800b228:	4b51      	ldr	r3, [pc, #324]	; (800b370 <step_through_pole_angles+0x234>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	3304      	adds	r3, #4
 800b22e:	461d      	mov	r5, r3
 800b230:	1d3b      	adds	r3, r7, #4
 800b232:	4618      	mov	r0, r3
 800b234:	f7f4 ffcc 	bl	80001d0 <strlen>
 800b238:	4603      	mov	r3, r0
 800b23a:	462a      	mov	r2, r5
 800b23c:	4621      	mov	r1, r4
 800b23e:	484d      	ldr	r0, [pc, #308]	; (800b374 <step_through_pole_angles+0x238>)
 800b240:	f7f7 fd74 	bl	8002d2c <HAL_DMA_Start_IT>
		for (uint8_t ABC = 0; ABC < N_PHASES ; ABC++){
 800b244:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 800b248:	3301      	adds	r3, #1
 800b24a:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142
 800b24e:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 800b252:	2b02      	cmp	r3, #2
 800b254:	d988      	bls.n	800b168 <step_through_pole_angles+0x2c>
	for (uint8_t pole = 0; pole < N_POLES ; pole++){
 800b256:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 800b25a:	3301      	adds	r3, #1
 800b25c:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
 800b260:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 800b264:	2b06      	cmp	r3, #6
 800b266:	f67f af7b 	bls.w	800b160 <step_through_pole_angles+0x24>

		}
	}
	set_pwm_off();
 800b26a:	f7ff ff55 	bl	800b118 <set_pwm_off>
	normal_operation_enabled = true;
 800b26e:	4b39      	ldr	r3, [pc, #228]	; (800b354 <step_through_pole_angles+0x218>)
 800b270:	2201      	movs	r2, #1
 800b272:	701a      	strb	r2, [r3, #0]

	float sum = 0;
 800b274:	f04f 0300 	mov.w	r3, #0
 800b278:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	float enc_steps_per_A2B = (float)ENC_STEPS / (float)(N_POLES * N_PHASES);
 800b27c:	4b3e      	ldr	r3, [pc, #248]	; (800b378 <step_through_pole_angles+0x23c>)
 800b27e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	float enc_steps_per_A2A = (float)ENC_STEPS / (float)N_POLES;
 800b282:	4b3e      	ldr	r3, [pc, #248]	; (800b37c <step_through_pole_angles+0x240>)
 800b284:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	for (uint8_t i = 0; i < N_POLES * N_PHASES ; i++){
 800b288:	2300      	movs	r3, #0
 800b28a:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141
 800b28e:	e057      	b.n	800b340 <step_through_pole_angles+0x204>
		float reduced_pole_angle = pole_angles[i] - i * enc_steps_per_A2B ;//should be 95.238=ENC_STEPS/21 = ENC_STEPS/ (N_POLES * N_PHASES)
 800b290:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 800b294:	4a32      	ldr	r2, [pc, #200]	; (800b360 <step_through_pole_angles+0x224>)
 800b296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b29a:	ee07 3a90 	vmov	s15, r3
 800b29e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b2a2:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 800b2a6:	ee07 3a90 	vmov	s15, r3
 800b2aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b2ae:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 800b2b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b2b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2ba:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
		if (reduced_pole_angle > -ENC_STEPS_HALF){
 800b2be:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800b2c2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b380 <step_through_pole_angles+0x244>
 800b2c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ce:	dd08      	ble.n	800b2e2 <step_through_pole_angles+0x1a6>
			sum += reduced_pole_angle;
 800b2d0:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 800b2d4:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800b2d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2dc:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144
 800b2e0:	e00b      	b.n	800b2fa <step_through_pole_angles+0x1be>
		}
		else{
			sum += reduced_pole_angle + ENC_STEPS;
 800b2e2:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800b2e6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800b384 <step_through_pole_angles+0x248>
 800b2ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2ee:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 800b2f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2f6:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144
		}
		av_start_angle = sum / (float)(N_POLES * N_PHASES);
 800b2fa:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 800b2fe:	eef3 6a05 	vmov.f32	s13, #53	; 0x41a80000  21.0
 800b302:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b306:	4b20      	ldr	r3, [pc, #128]	; (800b388 <step_through_pole_angles+0x24c>)
 800b308:	edc3 7a00 	vstr	s15, [r3]
		while(av_start_angle > enc_steps_per_A2A){
 800b30c:	e009      	b.n	800b322 <step_through_pole_angles+0x1e6>
			av_start_angle -= enc_steps_per_A2A;
 800b30e:	4b1e      	ldr	r3, [pc, #120]	; (800b388 <step_through_pole_angles+0x24c>)
 800b310:	ed93 7a00 	vldr	s14, [r3]
 800b314:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 800b318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b31c:	4b1a      	ldr	r3, [pc, #104]	; (800b388 <step_through_pole_angles+0x24c>)
 800b31e:	edc3 7a00 	vstr	s15, [r3]
		while(av_start_angle > enc_steps_per_A2A){
 800b322:	4b19      	ldr	r3, [pc, #100]	; (800b388 <step_through_pole_angles+0x24c>)
 800b324:	edd3 7a00 	vldr	s15, [r3]
 800b328:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 800b32c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b334:	d4eb      	bmi.n	800b30e <step_through_pole_angles+0x1d2>
	for (uint8_t i = 0; i < N_POLES * N_PHASES ; i++){
 800b336:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 800b33a:	3301      	adds	r3, #1
 800b33c:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141
 800b340:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 800b344:	2b14      	cmp	r3, #20
 800b346:	d9a3      	bls.n	800b290 <step_through_pole_angles+0x154>
		//float av_angle_first_A =

	}


}
 800b348:	bf00      	nop
 800b34a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800b34e:	46bd      	mov	sp, r7
 800b350:	bdb0      	pop	{r4, r5, r7, pc}
 800b352:	bf00      	nop
 800b354:	20000035 	.word	0x20000035
 800b358:	40010000 	.word	0x40010000
 800b35c:	40010400 	.word	0x40010400
 800b360:	20000158 	.word	0x20000158
 800b364:	0800ff7c 	.word	0x0800ff7c
 800b368:	20001088 	.word	0x20001088
 800b36c:	20000eac 	.word	0x20000eac
 800b370:	20000564 	.word	0x20000564
 800b374:	20000b08 	.word	0x20000b08
 800b378:	42be79e8 	.word	0x42be79e8
 800b37c:	438edb6e 	.word	0x438edb6e
 800b380:	c47a0000 	.word	0xc47a0000
 800b384:	44fa0000 	.word	0x44fa0000
 800b388:	20000e28 	.word	0x20000e28

0800b38c <step_through_pwm_percent>:

void step_through_pwm_percent(void){
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
	normal_operation_enabled = false;
 800b392:	4b16      	ldr	r3, [pc, #88]	; (800b3ec <step_through_pwm_percent+0x60>)
 800b394:	2200      	movs	r2, #0
 800b396:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800b398:	f7ff febe 	bl	800b118 <set_pwm_off>
	HAL_Delay(100);
 800b39c:	2064      	movs	r0, #100	; 0x64
 800b39e:	f7f5 fe65 	bl	800106c <HAL_Delay>
	for (uint8_t percent = 0; percent < 10 ; percent++){
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	71fb      	strb	r3, [r7, #7]
 800b3a6:	e014      	b.n	800b3d2 <step_through_pwm_percent+0x46>
		TIM1->CCR1 = percent * PWM_1PERCENT;
 800b3a8:	79fa      	ldrb	r2, [r7, #7]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	4413      	add	r3, r2
 800b3b0:	00db      	lsls	r3, r3, #3
 800b3b2:	441a      	add	r2, r3
 800b3b4:	4b0e      	ldr	r3, [pc, #56]	; (800b3f0 <step_through_pwm_percent+0x64>)
 800b3b6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(200);
 800b3b8:	20c8      	movs	r0, #200	; 0xc8
 800b3ba:	f7f5 fe57 	bl	800106c <HAL_Delay>
		pole_angle_by_amp[percent]=TIM8->CNT;
 800b3be:	4b0d      	ldr	r3, [pc, #52]	; (800b3f4 <step_through_pwm_percent+0x68>)
 800b3c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3c2:	79fb      	ldrb	r3, [r7, #7]
 800b3c4:	b291      	uxth	r1, r2
 800b3c6:	4a0c      	ldr	r2, [pc, #48]	; (800b3f8 <step_through_pwm_percent+0x6c>)
 800b3c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t percent = 0; percent < 10 ; percent++){
 800b3cc:	79fb      	ldrb	r3, [r7, #7]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	71fb      	strb	r3, [r7, #7]
 800b3d2:	79fb      	ldrb	r3, [r7, #7]
 800b3d4:	2b09      	cmp	r3, #9
 800b3d6:	d9e7      	bls.n	800b3a8 <step_through_pwm_percent+0x1c>
	}
	set_pwm_off();
 800b3d8:	f7ff fe9e 	bl	800b118 <set_pwm_off>
	normal_operation_enabled = true;
 800b3dc:	4b03      	ldr	r3, [pc, #12]	; (800b3ec <step_through_pwm_percent+0x60>)
 800b3de:	2201      	movs	r2, #1
 800b3e0:	701a      	strb	r2, [r3, #0]
}
 800b3e2:	bf00      	nop
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	20000035 	.word	0x20000035
 800b3f0:	40010000 	.word	0x40010000
 800b3f4:	40010400 	.word	0x40010400
 800b3f8:	20000e00 	.word	0x20000e00
 800b3fc:	00000000 	.word	0x00000000

0800b400 <explore_limits>:

void explore_limits(void){
 800b400:	b590      	push	{r4, r7, lr}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
	amp = 0;
 800b406:	4b3e      	ldr	r3, [pc, #248]	; (800b500 <explore_limits+0x100>)
 800b408:	f04f 0200 	mov.w	r2, #0
 800b40c:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800b40e:	2064      	movs	r0, #100	; 0x64
 800b410:	f7f5 fe2c 	bl	800106c <HAL_Delay>
	for (int8_t dir=-1;dir<2; dir+=2){
 800b414:	23ff      	movs	r3, #255	; 0xff
 800b416:	73fb      	strb	r3, [r7, #15]
 800b418:	e063      	b.n	800b4e2 <explore_limits+0xe2>
		HAL_Delay(500);
 800b41a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b41e:	f7f5 fe25 	bl	800106c <HAL_Delay>
		amp= dir * 0.1;
 800b422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b426:	4618      	mov	r0, r3
 800b428:	f7f5 f87c 	bl	8000524 <__aeabi_i2d>
 800b42c:	a332      	add	r3, pc, #200	; (adr r3, 800b4f8 <explore_limits+0xf8>)
 800b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b432:	f7f5 f8e1 	bl	80005f8 <__aeabi_dmul>
 800b436:	4603      	mov	r3, r0
 800b438:	460c      	mov	r4, r1
 800b43a:	4618      	mov	r0, r3
 800b43c:	4621      	mov	r1, r4
 800b43e:	f7f5 fbd3 	bl	8000be8 <__aeabi_d2f>
 800b442:	4602      	mov	r2, r0
 800b444:	4b2e      	ldr	r3, [pc, #184]	; (800b500 <explore_limits+0x100>)
 800b446:	601a      	str	r2, [r3, #0]
		for (int16_t i = 0; i<50; i++){
 800b448:	2300      	movs	r3, #0
 800b44a:	81bb      	strh	r3, [r7, #12]
 800b44c:	e041      	b.n	800b4d2 <explore_limits+0xd2>
			HAL_Delay(100);
 800b44e:	2064      	movs	r0, #100	; 0x64
 800b450:	f7f5 fe0c 	bl	800106c <HAL_Delay>
			uint32_t val_I = HAL_ADCEx_InjectedGetValue (&hadc1, 1);
 800b454:	2101      	movs	r1, #1
 800b456:	482b      	ldr	r0, [pc, #172]	; (800b504 <explore_limits+0x104>)
 800b458:	f7f6 fc12 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 800b45c:	60b8      	str	r0, [r7, #8]
			if (val_I > 2100 || val_I < 1980){
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	f640 0234 	movw	r2, #2100	; 0x834
 800b464:	4293      	cmp	r3, r2
 800b466:	d804      	bhi.n	800b472 <explore_limits+0x72>
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	f240 72bb 	movw	r2, #1979	; 0x7bb
 800b46e:	4293      	cmp	r3, r2
 800b470:	d829      	bhi.n	800b4c6 <explore_limits+0xc6>
				amp=0;
 800b472:	4b23      	ldr	r3, [pc, #140]	; (800b500 <explore_limits+0x100>)
 800b474:	f04f 0200 	mov.w	r2, #0
 800b478:	601a      	str	r2, [r3, #0]
				uint32_t EncVal_lim = TIM8->CNT;
 800b47a:	4b23      	ldr	r3, [pc, #140]	; (800b508 <explore_limits+0x108>)
 800b47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47e:	607b      	str	r3, [r7, #4]
				if (dir==-1){
 800b480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b488:	d10e      	bne.n	800b4a8 <explore_limits+0xa8>
					Enc_Val_total_lim_m = EncVal_lim + rotation_counter * ENC_STEPS;
 800b48a:	4b20      	ldr	r3, [pc, #128]	; (800b50c <explore_limits+0x10c>)
 800b48c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b490:	461a      	mov	r2, r3
 800b492:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b496:	fb03 f302 	mul.w	r3, r3, r2
 800b49a:	461a      	mov	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4413      	add	r3, r2
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	4b1b      	ldr	r3, [pc, #108]	; (800b510 <explore_limits+0x110>)
 800b4a4:	601a      	str	r2, [r3, #0]
				else{
					Enc_Val_total_lim_p = EncVal_lim + rotation_counter * ENC_STEPS;

				}

				break;
 800b4a6:	e018      	b.n	800b4da <explore_limits+0xda>
					Enc_Val_total_lim_p = EncVal_lim + rotation_counter * ENC_STEPS;
 800b4a8:	4b18      	ldr	r3, [pc, #96]	; (800b50c <explore_limits+0x10c>)
 800b4aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b4b4:	fb03 f302 	mul.w	r3, r3, r2
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4413      	add	r3, r2
 800b4be:	461a      	mov	r2, r3
 800b4c0:	4b14      	ldr	r3, [pc, #80]	; (800b514 <explore_limits+0x114>)
 800b4c2:	601a      	str	r2, [r3, #0]
				break;
 800b4c4:	e009      	b.n	800b4da <explore_limits+0xda>
		for (int16_t i = 0; i<50; i++){
 800b4c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	81bb      	strh	r3, [r7, #12]
 800b4d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b4d6:	2b31      	cmp	r3, #49	; 0x31
 800b4d8:	ddb9      	ble.n	800b44e <explore_limits+0x4e>
	for (int8_t dir=-1;dir<2; dir+=2){
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
 800b4dc:	3302      	adds	r3, #2
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	73fb      	strb	r3, [r7, #15]
 800b4e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	dd97      	ble.n	800b41a <explore_limits+0x1a>
			}
		}
	}

	amp = 0.01;
 800b4ea:	4b05      	ldr	r3, [pc, #20]	; (800b500 <explore_limits+0x100>)
 800b4ec:	4a0a      	ldr	r2, [pc, #40]	; (800b518 <explore_limits+0x118>)
 800b4ee:	601a      	str	r2, [r3, #0]
}
 800b4f0:	bf00      	nop
 800b4f2:	3714      	adds	r7, #20
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd90      	pop	{r4, r7, pc}
 800b4f8:	9999999a 	.word	0x9999999a
 800b4fc:	3fb99999 	.word	0x3fb99999
 800b500:	20000010 	.word	0x20000010
 800b504:	20000c2c 	.word	0x20000c2c
 800b508:	40010400 	.word	0x40010400
 800b50c:	200000d4 	.word	0x200000d4
 800b510:	20000110 	.word	0x20000110
 800b514:	20000114 	.word	0x20000114
 800b518:	3c23d70a 	.word	0x3c23d70a

0800b51c <delay_SPI>:
    //for (i=0; i<3195; i++);
  	for (i=0; i<1; i++);
  }
}

void delay_SPI(void){
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
	int g =0;
 800b522:	2300      	movs	r3, #0
 800b524:	607b      	str	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800b526:	2300      	movs	r3, #0
 800b528:	603b      	str	r3, [r7, #0]
 800b52a:	e005      	b.n	800b538 <delay_SPI+0x1c>
		g++;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	3301      	adds	r3, #1
 800b530:	607b      	str	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	3301      	adds	r3, #1
 800b536:	603b      	str	r3, [r7, #0]
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	2b13      	cmp	r3, #19
 800b53c:	ddf6      	ble.n	800b52c <delay_SPI+0x10>
	}
}
 800b53e:	bf00      	nop
 800b540:	370c      	adds	r7, #12
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
	...

0800b54c <playSound>:

void myDelay(void){
	HAL_Delay(1);
}

void playSound(uint16_t periode, uint16_t volume, uint16_t cycles){
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	4603      	mov	r3, r0
 800b554:	80fb      	strh	r3, [r7, #6]
 800b556:	460b      	mov	r3, r1
 800b558:	80bb      	strh	r3, [r7, #4]
 800b55a:	4613      	mov	r3, r2
 800b55c:	807b      	strh	r3, [r7, #2]
	// TODO disable interrupt for the duration of sound
	//HAL_NVIC_DisableIRQ(TIM8_UP_TIM13_IRQn);
	//HAL_Delay(1000);
	normal_operation_enabled = false;
 800b55e:	4b17      	ldr	r3, [pc, #92]	; (800b5bc <playSound+0x70>)
 800b560:	2200      	movs	r2, #0
 800b562:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800b564:	f7ff fdd8 	bl	800b118 <set_pwm_off>
	HAL_Delay(10);
 800b568:	200a      	movs	r0, #10
 800b56a:	f7f5 fd7f 	bl	800106c <HAL_Delay>

	for (uint16_t i=0; i<cycles; i++){
 800b56e:	2300      	movs	r3, #0
 800b570:	81fb      	strh	r3, [r7, #14]
 800b572:	e016      	b.n	800b5a2 <playSound+0x56>
		TIM1->CCR1 = 0; //takes<150ns
 800b574:	4b12      	ldr	r3, [pc, #72]	; (800b5c0 <playSound+0x74>)
 800b576:	2200      	movs	r2, #0
 800b578:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = volume; //takes<150ns
 800b57a:	4a11      	ldr	r2, [pc, #68]	; (800b5c0 <playSound+0x74>)
 800b57c:	88bb      	ldrh	r3, [r7, #4]
 800b57e:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_Delay(periode);
 800b580:	88fb      	ldrh	r3, [r7, #6]
 800b582:	4618      	mov	r0, r3
 800b584:	f7f5 fd72 	bl	800106c <HAL_Delay>
		TIM1->CCR1 = volume; //takes<150ns
 800b588:	4a0d      	ldr	r2, [pc, #52]	; (800b5c0 <playSound+0x74>)
 800b58a:	88bb      	ldrh	r3, [r7, #4]
 800b58c:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = 0; //takes<150ns
 800b58e:	4b0c      	ldr	r3, [pc, #48]	; (800b5c0 <playSound+0x74>)
 800b590:	2200      	movs	r2, #0
 800b592:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(periode);
 800b594:	88fb      	ldrh	r3, [r7, #6]
 800b596:	4618      	mov	r0, r3
 800b598:	f7f5 fd68 	bl	800106c <HAL_Delay>
	for (uint16_t i=0; i<cycles; i++){
 800b59c:	89fb      	ldrh	r3, [r7, #14]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	81fb      	strh	r3, [r7, #14]
 800b5a2:	89fa      	ldrh	r2, [r7, #14]
 800b5a4:	887b      	ldrh	r3, [r7, #2]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d3e4      	bcc.n	800b574 <playSound+0x28>
	}
	set_pwm_off();
 800b5aa:	f7ff fdb5 	bl	800b118 <set_pwm_off>
	normal_operation_enabled = true;
 800b5ae:	4b03      	ldr	r3, [pc, #12]	; (800b5bc <playSound+0x70>)
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	701a      	strb	r2, [r3, #0]



	//HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
}
 800b5b4:	bf00      	nop
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	20000035 	.word	0x20000035
 800b5c0:	40010000 	.word	0x40010000
 800b5c4:	00000000 	.word	0x00000000

0800b5c8 <calc_lookup>:
//	}
//}



void calc_lookup(float *lookup){
 800b5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5ca:	ed2d 8b02 	vpush	{d8}
 800b5ce:	b085      	sub	sp, #20
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
	// TODO plug in a higher order harmonic and see if system gets more energy efficient or more silent
	for (int i=0; i<210; i++){
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	60fb      	str	r3, [r7, #12]
 800b5d8:	e079      	b.n	800b6ce <calc_lookup+0x106>

		  // --- harmonic
	    //lookup[i] = cos((float)i/100.0)       + amp_harmonic * cos( (float)i/100.0       * 3.0f)    +  cos((float)i/100.0-1.047) + amp_harmonic * cos(((float)i/100.0-1.047)* 3.0f) ;// the harmonic tends to fully cancel out

			// --- power law
			lookup[i] = pow( cos((float)i/100.0) + cos((float)i/100.0-1.047),amp_harmonic)/ pow(amp_harmonic,0.5); //looks like 1.0 is already best in terms of overtones
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	ee07 3a90 	vmov	s15, r3
 800b5e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5e4:	ee17 0a90 	vmov	r0, s15
 800b5e8:	f7f4 ffae 	bl	8000548 <__aeabi_f2d>
 800b5ec:	f04f 0200 	mov.w	r2, #0
 800b5f0:	4b3f      	ldr	r3, [pc, #252]	; (800b6f0 <calc_lookup+0x128>)
 800b5f2:	f7f5 f92b 	bl	800084c <__aeabi_ddiv>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	ec44 3b17 	vmov	d7, r3, r4
 800b5fe:	eeb0 0a47 	vmov.f32	s0, s14
 800b602:	eef0 0a67 	vmov.f32	s1, s15
 800b606:	f002 fb3b 	bl	800dc80 <cos>
 800b60a:	ec56 5b10 	vmov	r5, r6, d0
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	ee07 3a90 	vmov	s15, r3
 800b614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b618:	ee17 0a90 	vmov	r0, s15
 800b61c:	f7f4 ff94 	bl	8000548 <__aeabi_f2d>
 800b620:	f04f 0200 	mov.w	r2, #0
 800b624:	4b32      	ldr	r3, [pc, #200]	; (800b6f0 <calc_lookup+0x128>)
 800b626:	f7f5 f911 	bl	800084c <__aeabi_ddiv>
 800b62a:	4603      	mov	r3, r0
 800b62c:	460c      	mov	r4, r1
 800b62e:	4618      	mov	r0, r3
 800b630:	4621      	mov	r1, r4
 800b632:	a32b      	add	r3, pc, #172	; (adr r3, 800b6e0 <calc_lookup+0x118>)
 800b634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b638:	f7f4 fe26 	bl	8000288 <__aeabi_dsub>
 800b63c:	4603      	mov	r3, r0
 800b63e:	460c      	mov	r4, r1
 800b640:	ec44 3b17 	vmov	d7, r3, r4
 800b644:	eeb0 0a47 	vmov.f32	s0, s14
 800b648:	eef0 0a67 	vmov.f32	s1, s15
 800b64c:	f002 fb18 	bl	800dc80 <cos>
 800b650:	ec54 3b10 	vmov	r3, r4, d0
 800b654:	461a      	mov	r2, r3
 800b656:	4623      	mov	r3, r4
 800b658:	4628      	mov	r0, r5
 800b65a:	4631      	mov	r1, r6
 800b65c:	f7f4 fe16 	bl	800028c <__adddf3>
 800b660:	4603      	mov	r3, r0
 800b662:	460c      	mov	r4, r1
 800b664:	ec44 3b18 	vmov	d8, r3, r4
 800b668:	4b22      	ldr	r3, [pc, #136]	; (800b6f4 <calc_lookup+0x12c>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7f4 ff6b 	bl	8000548 <__aeabi_f2d>
 800b672:	4603      	mov	r3, r0
 800b674:	460c      	mov	r4, r1
 800b676:	ec44 3b11 	vmov	d1, r3, r4
 800b67a:	eeb0 0a48 	vmov.f32	s0, s16
 800b67e:	eef0 0a68 	vmov.f32	s1, s17
 800b682:	f002 fb89 	bl	800dd98 <pow>
 800b686:	ec55 4b10 	vmov	r4, r5, d0
 800b68a:	4b1a      	ldr	r3, [pc, #104]	; (800b6f4 <calc_lookup+0x12c>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4618      	mov	r0, r3
 800b690:	f7f4 ff5a 	bl	8000548 <__aeabi_f2d>
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	ed9f 1b13 	vldr	d1, [pc, #76]	; 800b6e8 <calc_lookup+0x120>
 800b69c:	ec43 2b10 	vmov	d0, r2, r3
 800b6a0:	f002 fb7a 	bl	800dd98 <pow>
 800b6a4:	ec53 2b10 	vmov	r2, r3, d0
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	f7f5 f8ce 	bl	800084c <__aeabi_ddiv>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	18d4      	adds	r4, r2, r3
 800b6c0:	f7f5 fa92 	bl	8000be8 <__aeabi_d2f>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	6023      	str	r3, [r4, #0]
	for (int i=0; i<210; i++){
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	60fb      	str	r3, [r7, #12]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2bd1      	cmp	r3, #209	; 0xd1
 800b6d2:	dd82      	ble.n	800b5da <calc_lookup+0x12>
	}
}
 800b6d4:	bf00      	nop
 800b6d6:	3714      	adds	r7, #20
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	ecbd 8b02 	vpop	{d8}
 800b6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6e0:	126e978d 	.word	0x126e978d
 800b6e4:	3ff0c083 	.word	0x3ff0c083
 800b6e8:	00000000 	.word	0x00000000
 800b6ec:	3fe00000 	.word	0x3fe00000
 800b6f0:	40590000 	.word	0x40590000
 800b6f4:	20000038 	.word	0x20000038

0800b6f8 <DMAUSARTTransferComplete>:

void DMAUSARTTransferComplete(DMA_HandleTypeDef *hdma){
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
	huart3.Instance->CR3 &= ~USART_CR3_DMAT;
 800b700:	4b06      	ldr	r3, [pc, #24]	; (800b71c <DMAUSARTTransferComplete+0x24>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	695a      	ldr	r2, [r3, #20]
 800b706:	4b05      	ldr	r3, [pc, #20]	; (800b71c <DMAUSARTTransferComplete+0x24>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b70e:	615a      	str	r2, [r3, #20]
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr
 800b71c:	20000564 	.word	0x20000564

0800b720 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
	debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin;
 800b728:	4b04      	ldr	r3, [pc, #16]	; (800b73c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800b72a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b72e:	619a      	str	r2, [r3, #24]
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	40020c00 	.word	0x40020c00

0800b740 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
	debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin << 16U;
 800b748:	4b04      	ldr	r3, [pc, #16]	; (800b75c <HAL_ADC_ConvCpltCallback+0x1c>)
 800b74a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b74e:	619a      	str	r2, [r3, #24]
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	40020c00 	.word	0x40020c00

0800b760 <HAL_TIM_PeriodElapsedCallback>:
//	}
//}


// --- 1ms heartbeat of the microcontroller
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim3){
 800b760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b764:	b091      	sub	sp, #68	; 0x44
 800b766:	af08      	add	r7, sp, #32
 800b768:	6078      	str	r0, [r7, #4]

	// shift tx here to offload the can interrupt

	if (TIM5->CNT - time_of_last_pwm_update  > 95){ //100 time time_step = heartbeat
 800b76a:	4b8f      	ldr	r3, [pc, #572]	; (800b9a8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800b76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76e:	4a8f      	ldr	r2, [pc, #572]	; (800b9ac <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800b770:	6812      	ldr	r2, [r2, #0]
 800b772:	1a9b      	subs	r3, r3, r2
 800b774:	2b5f      	cmp	r3, #95	; 0x5f
 800b776:	d905      	bls.n	800b784 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 800b778:	2108      	movs	r1, #8
 800b77a:	488d      	ldr	r0, [pc, #564]	; (800b9b0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800b77c:	f7f7 ffbf 	bl	80036fe <HAL_GPIO_TogglePin>
		update_pwm();
 800b780:	f000 fb66 	bl	800be50 <update_pwm>
	}



	if (mode_of_control == 1){
 800b784:	4b8b      	ldr	r3, [pc, #556]	; (800b9b4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	2b01      	cmp	r3, #1
 800b78a:	f040 80ff 	bne.w	800b98c <HAL_TIM_PeriodElapsedCallback+0x22c>
		float t = (float)((TIM5->CNT - last_tim5_cnt) / 100) / 1000.0;
 800b78e:	4b86      	ldr	r3, [pc, #536]	; (800b9a8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800b790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b792:	4b89      	ldr	r3, [pc, #548]	; (800b9b8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	1ad3      	subs	r3, r2, r3
 800b798:	4a88      	ldr	r2, [pc, #544]	; (800b9bc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800b79a:	fba2 2303 	umull	r2, r3, r2, r3
 800b79e:	095b      	lsrs	r3, r3, #5
 800b7a0:	ee07 3a90 	vmov	s15, r3
 800b7a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b7a8:	eddf 6a85 	vldr	s13, [pc, #532]	; 800b9c0 <HAL_TIM_PeriodElapsedCallback+0x260>
 800b7ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b7b0:	edc7 7a06 	vstr	s15, [r7, #24]

		int32_t desired_EncVal = pos_offset + pos_amp * sin(6.28f * pos_freq * t);
 800b7b4:	4b83      	ldr	r3, [pc, #524]	; (800b9c4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7f4 feb3 	bl	8000524 <__aeabi_i2d>
 800b7be:	4604      	mov	r4, r0
 800b7c0:	460d      	mov	r5, r1
 800b7c2:	4b81      	ldr	r3, [pc, #516]	; (800b9c8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7f4 febe 	bl	8000548 <__aeabi_f2d>
 800b7cc:	4680      	mov	r8, r0
 800b7ce:	4689      	mov	r9, r1
 800b7d0:	4b7e      	ldr	r3, [pc, #504]	; (800b9cc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800b7d2:	edd3 7a00 	vldr	s15, [r3]
 800b7d6:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800b9d0 <HAL_TIM_PeriodElapsedCallback+0x270>
 800b7da:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b7de:	edd7 7a06 	vldr	s15, [r7, #24]
 800b7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7e6:	ee17 0a90 	vmov	r0, s15
 800b7ea:	f7f4 fead 	bl	8000548 <__aeabi_f2d>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	ec43 2b10 	vmov	d0, r2, r3
 800b7f6:	f002 fa87 	bl	800dd08 <sin>
 800b7fa:	ec53 2b10 	vmov	r2, r3, d0
 800b7fe:	4640      	mov	r0, r8
 800b800:	4649      	mov	r1, r9
 800b802:	f7f4 fef9 	bl	80005f8 <__aeabi_dmul>
 800b806:	4602      	mov	r2, r0
 800b808:	460b      	mov	r3, r1
 800b80a:	4620      	mov	r0, r4
 800b80c:	4629      	mov	r1, r5
 800b80e:	f7f4 fd3d 	bl	800028c <__adddf3>
 800b812:	4603      	mov	r3, r0
 800b814:	460c      	mov	r4, r1
 800b816:	4618      	mov	r0, r3
 800b818:	4621      	mov	r1, r4
 800b81a:	f7f5 f99d 	bl	8000b58 <__aeabi_d2iz>
 800b81e:	4603      	mov	r3, r0
 800b820:	617b      	str	r3, [r7, #20]
//		else{
//			desired_EncVal = 0;
//		}


		int32_t Enc_Val_total = EncVal + rotation_counter * ENC_STEPS;
 800b822:	4b6c      	ldr	r3, [pc, #432]	; (800b9d4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800b824:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b828:	461a      	mov	r2, r3
 800b82a:	4b6b      	ldr	r3, [pc, #428]	; (800b9d8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800b82c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b830:	4619      	mov	r1, r3
 800b832:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b836:	fb03 f301 	mul.w	r3, r3, r1
 800b83a:	4413      	add	r3, r2
 800b83c:	613b      	str	r3, [r7, #16]
		float raw_amp = (float)(Enc_Val_total - desired_EncVal) * P_gain; //oscillates for P_gain > 0.005
 800b83e:	693a      	ldr	r2, [r7, #16]
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	1ad3      	subs	r3, r2, r3
 800b844:	ee07 3a90 	vmov	s15, r3
 800b848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b84c:	4b63      	ldr	r3, [pc, #396]	; (800b9dc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800b84e:	edd3 7a00 	vldr	s15, [r3]
 800b852:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b856:	edc7 7a07 	vstr	s15, [r7, #28]
		float raw_amp_check = raw_amp;
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	60fb      	str	r3, [r7, #12]
//			direction = -1;
//		}
//		else{
//			direction = 1;
//		}
		if (raw_amp > pos_amp_limit){
 800b85e:	4b60      	ldr	r3, [pc, #384]	; (800b9e0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800b860:	edd3 7a00 	vldr	s15, [r3]
 800b864:	ed97 7a07 	vldr	s14, [r7, #28]
 800b868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b870:	dd02      	ble.n	800b878 <HAL_TIM_PeriodElapsedCallback+0x118>
			raw_amp = pos_amp_limit;
 800b872:	4b5b      	ldr	r3, [pc, #364]	; (800b9e0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	61fb      	str	r3, [r7, #28]
		}
		if (raw_amp < - pos_amp_limit){
 800b878:	4b59      	ldr	r3, [pc, #356]	; (800b9e0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800b87a:	edd3 7a00 	vldr	s15, [r3]
 800b87e:	eef1 7a67 	vneg.f32	s15, s15
 800b882:	ed97 7a07 	vldr	s14, [r7, #28]
 800b886:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b88e:	d506      	bpl.n	800b89e <HAL_TIM_PeriodElapsedCallback+0x13e>
			raw_amp = - pos_amp_limit;
 800b890:	4b53      	ldr	r3, [pc, #332]	; (800b9e0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800b892:	edd3 7a00 	vldr	s15, [r3]
 800b896:	eef1 7a67 	vneg.f32	s15, s15
 800b89a:	edc7 7a07 	vstr	s15, [r7, #28]
		}
		amp = raw_amp;
 800b89e:	4a51      	ldr	r2, [pc, #324]	; (800b9e4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	6013      	str	r3, [r2, #0]

		if (buf_msgs[0] == '\0'){
 800b8a4:	4b50      	ldr	r3, [pc, #320]	; (800b9e8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d173      	bne.n	800b994 <HAL_TIM_PeriodElapsedCallback+0x234>
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
					(int)((float)(Enc_Val_total - desired_EncVal) * 0.0005*1000),
 800b8ac:	693a      	ldr	r2, [r7, #16]
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	ee07 3a90 	vmov	s15, r3
 800b8b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8ba:	ee17 0a90 	vmov	r0, s15
 800b8be:	f7f4 fe43 	bl	8000548 <__aeabi_f2d>
 800b8c2:	a337      	add	r3, pc, #220	; (adr r3, 800b9a0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800b8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c8:	f7f4 fe96 	bl	80005f8 <__aeabi_dmul>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	460c      	mov	r4, r1
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	f04f 0200 	mov.w	r2, #0
 800b8d8:	4b44      	ldr	r3, [pc, #272]	; (800b9ec <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800b8da:	f7f4 fe8d 	bl	80005f8 <__aeabi_dmul>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	460c      	mov	r4, r1
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	4621      	mov	r1, r4
 800b8e6:	f7f5 f937 	bl	8000b58 <__aeabi_d2iz>
 800b8ea:	4606      	mov	r6, r0
					(int)(raw_amp*1000),
 800b8ec:	edd7 7a07 	vldr	s15, [r7, #28]
 800b8f0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800b9c0 <HAL_TIM_PeriodElapsedCallback+0x260>
 800b8f4:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b8f8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
					(int)(raw_amp_check*1000),
 800b8fc:	edd7 7a03 	vldr	s15, [r7, #12]
 800b900:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b9c0 <HAL_TIM_PeriodElapsedCallback+0x260>
 800b904:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b90c:	ee17 1a90 	vmov	r1, s15
 800b910:	4b2d      	ldr	r3, [pc, #180]	; (800b9c8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800b912:	edd3 7a00 	vldr	s15, [r3]
 800b916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b91a:	ee17 0a90 	vmov	r0, s15
					(int)Enc_Val_total,
					(int)(pos_amp),
					(int)(pos_freq*1000),
 800b91e:	4b2b      	ldr	r3, [pc, #172]	; (800b9cc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800b920:	edd3 7a00 	vldr	s15, [r3]
 800b924:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800b9c0 <HAL_TIM_PeriodElapsedCallback+0x260>
 800b928:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b92c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b930:	ee17 4a90 	vmov	r4, s15
					(int)(pos_amp_limit * 1000),
 800b934:	4b2a      	ldr	r3, [pc, #168]	; (800b9e0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800b936:	edd3 7a00 	vldr	s15, [r3]
 800b93a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800b9c0 <HAL_TIM_PeriodElapsedCallback+0x260>
 800b93e:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b946:	ee17 5a90 	vmov	r5, s15
 800b94a:	4b1e      	ldr	r3, [pc, #120]	; (800b9c4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800b94c:	681b      	ldr	r3, [r3, #0]
					(int)(pos_offset),
					(int)(P_gain*1000000));
 800b94e:	4a23      	ldr	r2, [pc, #140]	; (800b9dc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800b950:	edd2 7a00 	vldr	s15, [r2]
 800b954:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800b9f0 <HAL_TIM_PeriodElapsedCallback+0x290>
 800b958:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b95c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b960:	ee17 2a90 	vmov	r2, s15
 800b964:	9206      	str	r2, [sp, #24]
 800b966:	9305      	str	r3, [sp, #20]
 800b968:	9504      	str	r5, [sp, #16]
 800b96a:	9403      	str	r4, [sp, #12]
 800b96c:	9002      	str	r0, [sp, #8]
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	9301      	str	r3, [sp, #4]
 800b972:	9100      	str	r1, [sp, #0]
 800b974:	ee16 3a90 	vmov	r3, s13
 800b978:	4632      	mov	r2, r6
 800b97a:	491e      	ldr	r1, [pc, #120]	; (800b9f4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800b97c:	481e      	ldr	r0, [pc, #120]	; (800b9f8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800b97e:	f001 fd69 	bl	800d454 <siprintf>
			strcat(buf_msgs, buf_msg);
 800b982:	491d      	ldr	r1, [pc, #116]	; (800b9f8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800b984:	4818      	ldr	r0, [pc, #96]	; (800b9e8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800b986:	f001 fd85 	bl	800d494 <strcat>
	}




}
 800b98a:	e003      	b.n	800b994 <HAL_TIM_PeriodElapsedCallback+0x234>
		last_tim5_cnt = TIM5->CNT;
 800b98c:	4b06      	ldr	r3, [pc, #24]	; (800b9a8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800b98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b990:	4a09      	ldr	r2, [pc, #36]	; (800b9b8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800b992:	6013      	str	r3, [r2, #0]
}
 800b994:	bf00      	nop
 800b996:	3724      	adds	r7, #36	; 0x24
 800b998:	46bd      	mov	sp, r7
 800b99a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b99e:	bf00      	nop
 800b9a0:	d2f1a9fc 	.word	0xd2f1a9fc
 800b9a4:	3f40624d 	.word	0x3f40624d
 800b9a8:	40000c00 	.word	0x40000c00
 800b9ac:	2000011c 	.word	0x2000011c
 800b9b0:	40021000 	.word	0x40021000
 800b9b4:	2000010e 	.word	0x2000010e
 800b9b8:	20000118 	.word	0x20000118
 800b9bc:	51eb851f 	.word	0x51eb851f
 800b9c0:	447a0000 	.word	0x447a0000
 800b9c4:	200000d0 	.word	0x200000d0
 800b9c8:	2000001c 	.word	0x2000001c
 800b9cc:	20000020 	.word	0x20000020
 800b9d0:	40c8f5c3 	.word	0x40c8f5c3
 800b9d4:	20000cfc 	.word	0x20000cfc
 800b9d8:	200000d4 	.word	0x200000d4
 800b9dc:	20000028 	.word	0x20000028
 800b9e0:	20000024 	.word	0x20000024
 800b9e4:	20000010 	.word	0x20000010
 800b9e8:	20000eac 	.word	0x20000eac
 800b9ec:	408f4000 	.word	0x408f4000
 800b9f0:	49742400 	.word	0x49742400
 800b9f4:	0800ffb8 	.word	0x0800ffb8
 800b9f8:	20001088 	.word	0x20001088

0800b9fc <HAL_GPIO_EXTI_Callback>:

// --- Callback when Encoder fires the I at zero point
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800b9fc:	b590      	push	{r4, r7, lr}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	4603      	mov	r3, r0
 800ba04:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT0_I_W_Pin){
 800ba06:	88fb      	ldrh	r3, [r7, #6]
 800ba08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba0c:	d14a      	bne.n	800baa4 <HAL_GPIO_EXTI_Callback+0xa8>
		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
		uint16_t encoder_belief = TIM8->CNT;
 800ba0e:	4b28      	ldr	r3, [pc, #160]	; (800bab0 <HAL_GPIO_EXTI_Callback+0xb4>)
 800ba10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba12:	81fb      	strh	r3, [r7, #14]

		if (counter0ing_at0crossing){
 800ba14:	4b27      	ldr	r3, [pc, #156]	; (800bab4 <HAL_GPIO_EXTI_Callback+0xb8>)
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d01e      	beq.n	800ba5a <HAL_GPIO_EXTI_Callback+0x5e>
			TIM8->CNT = 0;     //TODO: this could lead to an offset of 1 since the CNT value may not be set yet and get incremented thereafter if this interrupt is executed before the CNT increment.
 800ba1c:	4b24      	ldr	r3, [pc, #144]	; (800bab0 <HAL_GPIO_EXTI_Callback+0xb4>)
 800ba1e:	2200      	movs	r2, #0
 800ba20:	625a      	str	r2, [r3, #36]	; 0x24
			counter0ing_at0crossing = false;
 800ba22:	4b24      	ldr	r3, [pc, #144]	; (800bab4 <HAL_GPIO_EXTI_Callback+0xb8>)
 800ba24:	2200      	movs	r2, #0
 800ba26:	701a      	strb	r2, [r3, #0]
			sprintf((char*)buf_msg, "[EXTI_Callback] EncVal at FIRST ZERO: %d \r\n", encoder_belief);
 800ba28:	89fb      	ldrh	r3, [r7, #14]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	4922      	ldr	r1, [pc, #136]	; (800bab8 <HAL_GPIO_EXTI_Callback+0xbc>)
 800ba2e:	4823      	ldr	r0, [pc, #140]	; (800babc <HAL_GPIO_EXTI_Callback+0xc0>)
 800ba30:	f001 fd10 	bl	800d454 <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800ba34:	4821      	ldr	r0, [pc, #132]	; (800babc <HAL_GPIO_EXTI_Callback+0xc0>)
 800ba36:	f7f4 fbcb 	bl	80001d0 <strlen>
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	4820      	ldr	r0, [pc, #128]	; (800bac0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800ba3e:	f7f4 fbc7 	bl	80001d0 <strlen>
 800ba42:	4603      	mov	r3, r0
 800ba44:	4423      	add	r3, r4
 800ba46:	2b63      	cmp	r3, #99	; 0x63
 800ba48:	d804      	bhi.n	800ba54 <HAL_GPIO_EXTI_Callback+0x58>
				strcat(buf_msgs, buf_msg);
 800ba4a:	491c      	ldr	r1, [pc, #112]	; (800babc <HAL_GPIO_EXTI_Callback+0xc0>)
 800ba4c:	481c      	ldr	r0, [pc, #112]	; (800bac0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800ba4e:	f001 fd21 	bl	800d494 <strcat>
 800ba52:	e002      	b.n	800ba5a <HAL_GPIO_EXTI_Callback+0x5e>
			}
			else {
				buf_msgs[0] = '#';
 800ba54:	4b1a      	ldr	r3, [pc, #104]	; (800bac0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800ba56:	2223      	movs	r2, #35	; 0x23
 800ba58:	701a      	strb	r2, [r3, #0]
			}
		}
		val_SO1_buf_index = 0;
 800ba5a:	4b1a      	ldr	r3, [pc, #104]	; (800bac4 <HAL_GPIO_EXTI_Callback+0xc8>)
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	801a      	strh	r2, [r3, #0]

		if (encoder_belief > ENC_TOLERANCE && encoder_belief < ENC_STEPS - ENC_TOLERANCE){
 800ba60:	89fb      	ldrh	r3, [r7, #14]
 800ba62:	2b02      	cmp	r3, #2
 800ba64:	d91f      	bls.n	800baa6 <HAL_GPIO_EXTI_Callback+0xaa>
 800ba66:	89fb      	ldrh	r3, [r7, #14]
 800ba68:	f240 72cd 	movw	r2, #1997	; 0x7cd
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d81a      	bhi.n	800baa6 <HAL_GPIO_EXTI_Callback+0xaa>
			sprintf((char*)buf_msg, "[EXTI_Callback] EncVal at ZERO MISMATCH: %d \r\n", encoder_belief);
 800ba70:	89fb      	ldrh	r3, [r7, #14]
 800ba72:	461a      	mov	r2, r3
 800ba74:	4914      	ldr	r1, [pc, #80]	; (800bac8 <HAL_GPIO_EXTI_Callback+0xcc>)
 800ba76:	4811      	ldr	r0, [pc, #68]	; (800babc <HAL_GPIO_EXTI_Callback+0xc0>)
 800ba78:	f001 fcec 	bl	800d454 <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800ba7c:	480f      	ldr	r0, [pc, #60]	; (800babc <HAL_GPIO_EXTI_Callback+0xc0>)
 800ba7e:	f7f4 fba7 	bl	80001d0 <strlen>
 800ba82:	4604      	mov	r4, r0
 800ba84:	480e      	ldr	r0, [pc, #56]	; (800bac0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800ba86:	f7f4 fba3 	bl	80001d0 <strlen>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	4423      	add	r3, r4
 800ba8e:	2b63      	cmp	r3, #99	; 0x63
 800ba90:	d804      	bhi.n	800ba9c <HAL_GPIO_EXTI_Callback+0xa0>
				strcat(buf_msgs, buf_msg);
 800ba92:	490a      	ldr	r1, [pc, #40]	; (800babc <HAL_GPIO_EXTI_Callback+0xc0>)
 800ba94:	480a      	ldr	r0, [pc, #40]	; (800bac0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800ba96:	f001 fcfd 	bl	800d494 <strcat>
		}
	}
	else{
		__NOP();
	}
}
 800ba9a:	e004      	b.n	800baa6 <HAL_GPIO_EXTI_Callback+0xaa>
				buf_msgs[0] = '#';
 800ba9c:	4b08      	ldr	r3, [pc, #32]	; (800bac0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800ba9e:	2223      	movs	r2, #35	; 0x23
 800baa0:	701a      	strb	r2, [r3, #0]
}
 800baa2:	e000      	b.n	800baa6 <HAL_GPIO_EXTI_Callback+0xaa>
		__NOP();
 800baa4:	bf00      	nop
}
 800baa6:	bf00      	nop
 800baa8:	3714      	adds	r7, #20
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd90      	pop	{r4, r7, pc}
 800baae:	bf00      	nop
 800bab0:	40010400 	.word	0x40010400
 800bab4:	2000002c 	.word	0x2000002c
 800bab8:	08010000 	.word	0x08010000
 800babc:	20001088 	.word	0x20001088
 800bac0:	20000eac 	.word	0x20000eac
 800bac4:	200000fc 	.word	0x200000fc
 800bac8:	0801002c 	.word	0x0801002c
 800bacc:	00000000 	.word	0x00000000

0800bad0 <HAL_TIM_IC_CaptureCallback>:




//this is it
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800bad0:	b5b0      	push	{r4, r5, r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
	// see https://community.st.com/s/question/0D50X00009XkWUpSAN/encoder-mode-and-rotary-encoder

	//debug2_out_GPIO_Port->BSRR = debug2_out_Pin; //takes 60ns == 5 clock cycles
	//debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin << 16U;
	//HAL_GPIO_TogglePin(debug2_out_GPIO_Port, debug2_out_Pin);
	if(htim->Instance == TIM8){
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a92      	ldr	r2, [pc, #584]	; (800bd28 <HAL_TIM_IC_CaptureCallback+0x258>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	f040 8198 	bne.w	800be14 <HAL_TIM_IC_CaptureCallback+0x344>

		if (skip_update){ //TODO somehow the Callback is triggered at this strange 25% duty cycle so we just look at every second update to get a constant frequency
 800bae4:	4b91      	ldr	r3, [pc, #580]	; (800bd2c <HAL_TIM_IC_CaptureCallback+0x25c>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d003      	beq.n	800baf4 <HAL_TIM_IC_CaptureCallback+0x24>
			skip_update = 0;
 800baec:	4b8f      	ldr	r3, [pc, #572]	; (800bd2c <HAL_TIM_IC_CaptureCallback+0x25c>)
 800baee:	2200      	movs	r2, #0
 800baf0:	601a      	str	r2, [r3, #0]
	}


	//counterISR++;

}
 800baf2:	e18f      	b.n	800be14 <HAL_TIM_IC_CaptureCallback+0x344>
			skip_update = 1;
 800baf4:	4b8d      	ldr	r3, [pc, #564]	; (800bd2c <HAL_TIM_IC_CaptureCallback+0x25c>)
 800baf6:	2201      	movs	r2, #1
 800baf8:	601a      	str	r2, [r3, #0]
			debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 800bafa:	4b8d      	ldr	r3, [pc, #564]	; (800bd30 <HAL_TIM_IC_CaptureCallback+0x260>)
 800bafc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bb00:	619a      	str	r2, [r3, #24]
			debug1_out_GPIO_Port->BSRR = debug1_out_Pin << 16U; //takes 60ns == 5 clock cycles
 800bb02:	4b8b      	ldr	r3, [pc, #556]	; (800bd30 <HAL_TIM_IC_CaptureCallback+0x260>)
 800bb04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb08:	619a      	str	r2, [r3, #24]
			last_EncVal = EncVal;
 800bb0a:	4b8a      	ldr	r3, [pc, #552]	; (800bd34 <HAL_TIM_IC_CaptureCallback+0x264>)
 800bb0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bb10:	4b89      	ldr	r3, [pc, #548]	; (800bd38 <HAL_TIM_IC_CaptureCallback+0x268>)
 800bb12:	801a      	strh	r2, [r3, #0]
			EncVal = TIM8->CNT;//takes 200ns
 800bb14:	4b84      	ldr	r3, [pc, #528]	; (800bd28 <HAL_TIM_IC_CaptureCallback+0x258>)
 800bb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb18:	b21a      	sxth	r2, r3
 800bb1a:	4b86      	ldr	r3, [pc, #536]	; (800bd34 <HAL_TIM_IC_CaptureCallback+0x264>)
 800bb1c:	801a      	strh	r2, [r3, #0]
			if (EncVal - last_EncVal > ENC_STEPS_HALF){
 800bb1e:	4b85      	ldr	r3, [pc, #532]	; (800bd34 <HAL_TIM_IC_CaptureCallback+0x264>)
 800bb20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb24:	461a      	mov	r2, r3
 800bb26:	4b84      	ldr	r3, [pc, #528]	; (800bd38 <HAL_TIM_IC_CaptureCallback+0x268>)
 800bb28:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb2c:	1ad3      	subs	r3, r2, r3
 800bb2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb32:	dd09      	ble.n	800bb48 <HAL_TIM_IC_CaptureCallback+0x78>
				rotation_counter--;
 800bb34:	4b81      	ldr	r3, [pc, #516]	; (800bd3c <HAL_TIM_IC_CaptureCallback+0x26c>)
 800bb36:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	b21a      	sxth	r2, r3
 800bb42:	4b7e      	ldr	r3, [pc, #504]	; (800bd3c <HAL_TIM_IC_CaptureCallback+0x26c>)
 800bb44:	801a      	strh	r2, [r3, #0]
 800bb46:	e013      	b.n	800bb70 <HAL_TIM_IC_CaptureCallback+0xa0>
			else if (last_EncVal - EncVal > ENC_STEPS_HALF){
 800bb48:	4b7b      	ldr	r3, [pc, #492]	; (800bd38 <HAL_TIM_IC_CaptureCallback+0x268>)
 800bb4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	4b78      	ldr	r3, [pc, #480]	; (800bd34 <HAL_TIM_IC_CaptureCallback+0x264>)
 800bb52:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb56:	1ad3      	subs	r3, r2, r3
 800bb58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb5c:	dd08      	ble.n	800bb70 <HAL_TIM_IC_CaptureCallback+0xa0>
				rotation_counter++;
 800bb5e:	4b77      	ldr	r3, [pc, #476]	; (800bd3c <HAL_TIM_IC_CaptureCallback+0x26c>)
 800bb60:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	3301      	adds	r3, #1
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	b21a      	sxth	r2, r3
 800bb6c:	4b73      	ldr	r3, [pc, #460]	; (800bd3c <HAL_TIM_IC_CaptureCallback+0x26c>)
 800bb6e:	801a      	strh	r2, [r3, #0]
			if (val_SO1_buf_index < 72){
 800bb70:	4b73      	ldr	r3, [pc, #460]	; (800bd40 <HAL_TIM_IC_CaptureCallback+0x270>)
 800bb72:	881b      	ldrh	r3, [r3, #0]
 800bb74:	2b47      	cmp	r3, #71	; 0x47
 800bb76:	d810      	bhi.n	800bb9a <HAL_TIM_IC_CaptureCallback+0xca>
				val_SO1_buf[val_SO1_buf_index] = HAL_ADCEx_InjectedGetValue (&hadc2, 1);
 800bb78:	4b71      	ldr	r3, [pc, #452]	; (800bd40 <HAL_TIM_IC_CaptureCallback+0x270>)
 800bb7a:	881b      	ldrh	r3, [r3, #0]
 800bb7c:	461c      	mov	r4, r3
 800bb7e:	2101      	movs	r1, #1
 800bb80:	4870      	ldr	r0, [pc, #448]	; (800bd44 <HAL_TIM_IC_CaptureCallback+0x274>)
 800bb82:	f7f6 f87d 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 800bb86:	4602      	mov	r2, r0
 800bb88:	4b6f      	ldr	r3, [pc, #444]	; (800bd48 <HAL_TIM_IC_CaptureCallback+0x278>)
 800bb8a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				val_SO1_buf_index++;
 800bb8e:	4b6c      	ldr	r3, [pc, #432]	; (800bd40 <HAL_TIM_IC_CaptureCallback+0x270>)
 800bb90:	881b      	ldrh	r3, [r3, #0]
 800bb92:	3301      	adds	r3, #1
 800bb94:	b29a      	uxth	r2, r3
 800bb96:	4b6a      	ldr	r3, [pc, #424]	; (800bd40 <HAL_TIM_IC_CaptureCallback+0x270>)
 800bb98:	801a      	strh	r2, [r3, #0]
			if (val_SO1_buf_index == 72){  // some hints that this takes 10mus
 800bb9a:	4b69      	ldr	r3, [pc, #420]	; (800bd40 <HAL_TIM_IC_CaptureCallback+0x270>)
 800bb9c:	881b      	ldrh	r3, [r3, #0]
 800bb9e:	2b48      	cmp	r3, #72	; 0x48
 800bba0:	f040 8081 	bne.w	800bca6 <HAL_TIM_IC_CaptureCallback+0x1d6>
				int32_t cos_part = 0;
 800bba4:	2300      	movs	r3, #0
 800bba6:	617b      	str	r3, [r7, #20]
				int32_t sin_part = 0;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	613b      	str	r3, [r7, #16]
				for (int i=0; i< 72; i++){
 800bbac:	2300      	movs	r3, #0
 800bbae:	60fb      	str	r3, [r7, #12]
 800bbb0:	e046      	b.n	800bc40 <HAL_TIM_IC_CaptureCallback+0x170>
				    if (i<18){
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2b11      	cmp	r3, #17
 800bbb6:	dc0e      	bgt.n	800bbd6 <HAL_TIM_IC_CaptureCallback+0x106>
				      cos_part += val_SO1_buf[i];
 800bbb8:	4a63      	ldr	r2, [pc, #396]	; (800bd48 <HAL_TIM_IC_CaptureCallback+0x278>)
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	617b      	str	r3, [r7, #20]
				      sin_part += val_SO1_buf[i];}
 800bbc6:	4a60      	ldr	r2, [pc, #384]	; (800bd48 <HAL_TIM_IC_CaptureCallback+0x278>)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	613b      	str	r3, [r7, #16]
 800bbd4:	e031      	b.n	800bc3a <HAL_TIM_IC_CaptureCallback+0x16a>
				    else if (i<36){
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2b23      	cmp	r3, #35	; 0x23
 800bbda:	dc0e      	bgt.n	800bbfa <HAL_TIM_IC_CaptureCallback+0x12a>
				      cos_part -= val_SO1_buf[i];
 800bbdc:	697a      	ldr	r2, [r7, #20]
 800bbde:	495a      	ldr	r1, [pc, #360]	; (800bd48 <HAL_TIM_IC_CaptureCallback+0x278>)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bbe6:	1ad3      	subs	r3, r2, r3
 800bbe8:	617b      	str	r3, [r7, #20]
				      sin_part += val_SO1_buf[i];}
 800bbea:	4a57      	ldr	r2, [pc, #348]	; (800bd48 <HAL_TIM_IC_CaptureCallback+0x278>)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	613b      	str	r3, [r7, #16]
 800bbf8:	e01f      	b.n	800bc3a <HAL_TIM_IC_CaptureCallback+0x16a>
				    else if (i<54){
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2b35      	cmp	r3, #53	; 0x35
 800bbfe:	dc0e      	bgt.n	800bc1e <HAL_TIM_IC_CaptureCallback+0x14e>
				      cos_part -= val_SO1_buf[i];
 800bc00:	697a      	ldr	r2, [r7, #20]
 800bc02:	4951      	ldr	r1, [pc, #324]	; (800bd48 <HAL_TIM_IC_CaptureCallback+0x278>)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	617b      	str	r3, [r7, #20]
				      sin_part -= val_SO1_buf[i];}
 800bc0e:	693a      	ldr	r2, [r7, #16]
 800bc10:	494d      	ldr	r1, [pc, #308]	; (800bd48 <HAL_TIM_IC_CaptureCallback+0x278>)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bc18:	1ad3      	subs	r3, r2, r3
 800bc1a:	613b      	str	r3, [r7, #16]
 800bc1c:	e00d      	b.n	800bc3a <HAL_TIM_IC_CaptureCallback+0x16a>
				      cos_part += val_SO1_buf[i];
 800bc1e:	4a4a      	ldr	r2, [pc, #296]	; (800bd48 <HAL_TIM_IC_CaptureCallback+0x278>)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	4413      	add	r3, r2
 800bc2a:	617b      	str	r3, [r7, #20]
				      sin_part -= val_SO1_buf[i];}
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	4946      	ldr	r1, [pc, #280]	; (800bd48 <HAL_TIM_IC_CaptureCallback+0x278>)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bc36:	1ad3      	subs	r3, r2, r3
 800bc38:	613b      	str	r3, [r7, #16]
				for (int i=0; i< 72; i++){
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	60fb      	str	r3, [r7, #12]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2b47      	cmp	r3, #71	; 0x47
 800bc44:	ddb5      	ble.n	800bbb2 <HAL_TIM_IC_CaptureCallback+0xe2>
				field_amplitude = cos_part*cos_part + sin_part*sin_part;
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	697a      	ldr	r2, [r7, #20]
 800bc4a:	fb02 f203 	mul.w	r2, r2, r3
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	6939      	ldr	r1, [r7, #16]
 800bc52:	fb01 f303 	mul.w	r3, r1, r3
 800bc56:	4413      	add	r3, r2
 800bc58:	461a      	mov	r2, r3
 800bc5a:	4b3c      	ldr	r3, [pc, #240]	; (800bd4c <HAL_TIM_IC_CaptureCallback+0x27c>)
 800bc5c:	601a      	str	r2, [r3, #0]
				field_phase_shift = (float) cos_part / (float) sin_part;
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	ee07 3a90 	vmov	s15, r3
 800bc64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	ee07 3a90 	vmov	s15, r3
 800bc6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bc72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc76:	4b36      	ldr	r3, [pc, #216]	; (800bd50 <HAL_TIM_IC_CaptureCallback+0x280>)
 800bc78:	edc3 7a00 	vstr	s15, [r3]
				field_phase_shift_pihalf = (float) sin_part / (float) cos_part;
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	ee07 3a90 	vmov	s15, r3
 800bc82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	ee07 3a90 	vmov	s15, r3
 800bc8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bc90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc94:	4b2f      	ldr	r3, [pc, #188]	; (800bd54 <HAL_TIM_IC_CaptureCallback+0x284>)
 800bc96:	edc3 7a00 	vstr	s15, [r3]
				val_SO1_buf_index++;
 800bc9a:	4b29      	ldr	r3, [pc, #164]	; (800bd40 <HAL_TIM_IC_CaptureCallback+0x270>)
 800bc9c:	881b      	ldrh	r3, [r3, #0]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	4b27      	ldr	r3, [pc, #156]	; (800bd40 <HAL_TIM_IC_CaptureCallback+0x270>)
 800bca4:	801a      	strh	r2, [r3, #0]
			if (abs(av_velocity) > 5 &&  skip_update_high_v == 1){
 800bca6:	4b2c      	ldr	r3, [pc, #176]	; (800bd58 <HAL_TIM_IC_CaptureCallback+0x288>)
 800bca8:	edd3 7a00 	vldr	s15, [r3]
 800bcac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bcb0:	ee17 3a90 	vmov	r3, s15
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	bfb8      	it	lt
 800bcb8:	425b      	neglt	r3, r3
 800bcba:	2b05      	cmp	r3, #5
 800bcbc:	dd07      	ble.n	800bcce <HAL_TIM_IC_CaptureCallback+0x1fe>
 800bcbe:	4b27      	ldr	r3, [pc, #156]	; (800bd5c <HAL_TIM_IC_CaptureCallback+0x28c>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d103      	bne.n	800bcce <HAL_TIM_IC_CaptureCallback+0x1fe>
				skip_update_high_v = 0;
 800bcc6:	4b25      	ldr	r3, [pc, #148]	; (800bd5c <HAL_TIM_IC_CaptureCallback+0x28c>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	601a      	str	r2, [r3, #0]
}
 800bccc:	e0a2      	b.n	800be14 <HAL_TIM_IC_CaptureCallback+0x344>
				debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 800bcce:	4b18      	ldr	r3, [pc, #96]	; (800bd30 <HAL_TIM_IC_CaptureCallback+0x260>)
 800bcd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bcd4:	619a      	str	r2, [r3, #24]
				GPIOC->BSRR = GPIO_PIN_13; // DEBUG
 800bcd6:	4b22      	ldr	r3, [pc, #136]	; (800bd60 <HAL_TIM_IC_CaptureCallback+0x290>)
 800bcd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bcdc:	619a      	str	r2, [r3, #24]
				skip_update_high_v = 1;
 800bcde:	4b1f      	ldr	r3, [pc, #124]	; (800bd5c <HAL_TIM_IC_CaptureCallback+0x28c>)
 800bce0:	2201      	movs	r2, #1
 800bce2:	601a      	str	r2, [r3, #0]
				tim12_counter = TIM2->CNT;
 800bce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcea:	4a1e      	ldr	r2, [pc, #120]	; (800bd64 <HAL_TIM_IC_CaptureCallback+0x294>)
 800bcec:	6013      	str	r3, [r2, #0]
				if (tim12_counter > ENC_STEPS){ // TODO fix the issue that this gets almost never called when velocity is super low.
 800bcee:	4b1d      	ldr	r3, [pc, #116]	; (800bd64 <HAL_TIM_IC_CaptureCallback+0x294>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bcf6:	f240 8087 	bls.w	800be08 <HAL_TIM_IC_CaptureCallback+0x338>
					TIM2->CNT = 0;
 800bcfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bcfe:	2200      	movs	r2, #0
 800bd00:	625a      	str	r2, [r3, #36]	; 0x24
					int EncDiff = EncVal-last_EncVal_v;
 800bd02:	4b0c      	ldr	r3, [pc, #48]	; (800bd34 <HAL_TIM_IC_CaptureCallback+0x264>)
 800bd04:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd08:	461a      	mov	r2, r3
 800bd0a:	4b17      	ldr	r3, [pc, #92]	; (800bd68 <HAL_TIM_IC_CaptureCallback+0x298>)
 800bd0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	60bb      	str	r3, [r7, #8]
					if (EncDiff > ENC_STEPS_HALF){ // if jump is more than a half rotation it's most likely the 0 crossing
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd1a:	dd27      	ble.n	800bd6c <HAL_TIM_IC_CaptureCallback+0x29c>
						EncDiff -= ENC_STEPS;
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800bd22:	60bb      	str	r3, [r7, #8]
 800bd24:	e02a      	b.n	800bd7c <HAL_TIM_IC_CaptureCallback+0x2ac>
 800bd26:	bf00      	nop
 800bd28:	40010400 	.word	0x40010400
 800bd2c:	200000f4 	.word	0x200000f4
 800bd30:	40020c00 	.word	0x40020c00
 800bd34:	20000cfc 	.word	0x20000cfc
 800bd38:	20000a9c 	.word	0x20000a9c
 800bd3c:	200000d4 	.word	0x200000d4
 800bd40:	200000fc 	.word	0x200000fc
 800bd44:	200005a4 	.word	0x200005a4
 800bd48:	200010bc 	.word	0x200010bc
 800bd4c:	20000108 	.word	0x20000108
 800bd50:	20000100 	.word	0x20000100
 800bd54:	20000104 	.word	0x20000104
 800bd58:	200000e4 	.word	0x200000e4
 800bd5c:	200000f8 	.word	0x200000f8
 800bd60:	40020800 	.word	0x40020800
 800bd64:	20000030 	.word	0x20000030
 800bd68:	20000ba8 	.word	0x20000ba8
					else if (EncDiff < -1000){
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800bd72:	da03      	bge.n	800bd7c <HAL_TIM_IC_CaptureCallback+0x2ac>
						EncDiff += ENC_STEPS;
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800bd7a:	60bb      	str	r3, [r7, #8]
					velocity = (float)(EncDiff) / (float)tim12_counter; //[steps/counts]
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	ee07 3a90 	vmov	s15, r3
 800bd82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bd86:	4b2a      	ldr	r3, [pc, #168]	; (800be30 <HAL_TIM_IC_CaptureCallback+0x360>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	ee07 3a90 	vmov	s15, r3
 800bd8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bd92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd96:	4b27      	ldr	r3, [pc, #156]	; (800be34 <HAL_TIM_IC_CaptureCallback+0x364>)
 800bd98:	edc3 7a00 	vstr	s15, [r3]
					velocity *= 21000000/ENC_STEPS; // /ENC_STEPS steps/round * 21000000 counts/sec --> [round/sec]  //TODO velocity seems too high by factor of 2 or 3 maybe same clock frequency issue that we actually run at 42 MHz. !!! TODO check clock frequency  // TODO divided by 10 as well
 800bd9c:	4b25      	ldr	r3, [pc, #148]	; (800be34 <HAL_TIM_IC_CaptureCallback+0x364>)
 800bd9e:	edd3 7a00 	vldr	s15, [r3]
 800bda2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800be38 <HAL_TIM_IC_CaptureCallback+0x368>
 800bda6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bdaa:	4b22      	ldr	r3, [pc, #136]	; (800be34 <HAL_TIM_IC_CaptureCallback+0x364>)
 800bdac:	edc3 7a00 	vstr	s15, [r3]
					av_velocity = 0.95 * av_velocity + 0.05 * velocity;
 800bdb0:	4b22      	ldr	r3, [pc, #136]	; (800be3c <HAL_TIM_IC_CaptureCallback+0x36c>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7f4 fbc7 	bl	8000548 <__aeabi_f2d>
 800bdba:	a319      	add	r3, pc, #100	; (adr r3, 800be20 <HAL_TIM_IC_CaptureCallback+0x350>)
 800bdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc0:	f7f4 fc1a 	bl	80005f8 <__aeabi_dmul>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	460c      	mov	r4, r1
 800bdc8:	4625      	mov	r5, r4
 800bdca:	461c      	mov	r4, r3
 800bdcc:	4b19      	ldr	r3, [pc, #100]	; (800be34 <HAL_TIM_IC_CaptureCallback+0x364>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7f4 fbb9 	bl	8000548 <__aeabi_f2d>
 800bdd6:	a314      	add	r3, pc, #80	; (adr r3, 800be28 <HAL_TIM_IC_CaptureCallback+0x358>)
 800bdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bddc:	f7f4 fc0c 	bl	80005f8 <__aeabi_dmul>
 800bde0:	4602      	mov	r2, r0
 800bde2:	460b      	mov	r3, r1
 800bde4:	4620      	mov	r0, r4
 800bde6:	4629      	mov	r1, r5
 800bde8:	f7f4 fa50 	bl	800028c <__adddf3>
 800bdec:	4603      	mov	r3, r0
 800bdee:	460c      	mov	r4, r1
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	4621      	mov	r1, r4
 800bdf4:	f7f4 fef8 	bl	8000be8 <__aeabi_d2f>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	4b10      	ldr	r3, [pc, #64]	; (800be3c <HAL_TIM_IC_CaptureCallback+0x36c>)
 800bdfc:	601a      	str	r2, [r3, #0]
					last_EncVal_v = EncVal;
 800bdfe:	4b10      	ldr	r3, [pc, #64]	; (800be40 <HAL_TIM_IC_CaptureCallback+0x370>)
 800be00:	f9b3 2000 	ldrsh.w	r2, [r3]
 800be04:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <HAL_TIM_IC_CaptureCallback+0x374>)
 800be06:	801a      	strh	r2, [r3, #0]
				update_pwm();
 800be08:	f000 f822 	bl	800be50 <update_pwm>
				GPIOC->BSRR = GPIO_PIN_13  << 16U ; // DEBUG
 800be0c:	4b0e      	ldr	r3, [pc, #56]	; (800be48 <HAL_TIM_IC_CaptureCallback+0x378>)
 800be0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800be12:	619a      	str	r2, [r3, #24]
}
 800be14:	bf00      	nop
 800be16:	3718      	adds	r7, #24
 800be18:	46bd      	mov	sp, r7
 800be1a:	bdb0      	pop	{r4, r5, r7, pc}
 800be1c:	f3af 8000 	nop.w
 800be20:	66666666 	.word	0x66666666
 800be24:	3fee6666 	.word	0x3fee6666
 800be28:	9999999a 	.word	0x9999999a
 800be2c:	3fa99999 	.word	0x3fa99999
 800be30:	20000030 	.word	0x20000030
 800be34:	200000e0 	.word	0x200000e0
 800be38:	46241000 	.word	0x46241000
 800be3c:	200000e4 	.word	0x200000e4
 800be40:	20000cfc 	.word	0x20000cfc
 800be44:	20000ba8 	.word	0x20000ba8
 800be48:	40020800 	.word	0x40020800
 800be4c:	00000000 	.word	0x00000000

0800be50 <update_pwm>:

void update_pwm(void){
 800be50:	b590      	push	{r4, r7, lr}
 800be52:	b087      	sub	sp, #28
 800be54:	af00      	add	r7, sp, #0

	//dtime_since_last_pwm_update = TIM5->CNT - time_of_last_pwm_update;
	time_of_last_pwm_update = TIM5->CNT;
 800be56:	4bb6      	ldr	r3, [pc, #728]	; (800c130 <update_pwm+0x2e0>)
 800be58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5a:	461a      	mov	r2, r3
 800be5c:	4bb5      	ldr	r3, [pc, #724]	; (800c134 <update_pwm+0x2e4>)
 800be5e:	601a      	str	r2, [r3, #0]

	phase = (float) EncVal * 0.0031415 * N_POLES ; //(float) EncVal / ENC_STEPS * 2*PI * N_POLES ; //takes 1500ns
 800be60:	4bb5      	ldr	r3, [pc, #724]	; (800c138 <update_pwm+0x2e8>)
 800be62:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be66:	ee07 3a90 	vmov	s15, r3
 800be6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be6e:	ee17 0a90 	vmov	r0, s15
 800be72:	f7f4 fb69 	bl	8000548 <__aeabi_f2d>
 800be76:	a3a8      	add	r3, pc, #672	; (adr r3, 800c118 <update_pwm+0x2c8>)
 800be78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7c:	f7f4 fbbc 	bl	80005f8 <__aeabi_dmul>
 800be80:	4603      	mov	r3, r0
 800be82:	460c      	mov	r4, r1
 800be84:	4618      	mov	r0, r3
 800be86:	4621      	mov	r1, r4
 800be88:	f04f 0200 	mov.w	r2, #0
 800be8c:	4bab      	ldr	r3, [pc, #684]	; (800c13c <update_pwm+0x2ec>)
 800be8e:	f7f4 fbb3 	bl	80005f8 <__aeabi_dmul>
 800be92:	4603      	mov	r3, r0
 800be94:	460c      	mov	r4, r1
 800be96:	4618      	mov	r0, r3
 800be98:	4621      	mov	r1, r4
 800be9a:	f7f4 fea5 	bl	8000be8 <__aeabi_d2f>
 800be9e:	4602      	mov	r2, r0
 800bea0:	4ba7      	ldr	r3, [pc, #668]	; (800c140 <update_pwm+0x2f0>)
 800bea2:	601a      	str	r2, [r3, #0]
	phase -= phase0;
 800bea4:	4ba6      	ldr	r3, [pc, #664]	; (800c140 <update_pwm+0x2f0>)
 800bea6:	ed93 7a00 	vldr	s14, [r3]
 800beaa:	4ba6      	ldr	r3, [pc, #664]	; (800c144 <update_pwm+0x2f4>)
 800beac:	edd3 7a00 	vldr	s15, [r3]
 800beb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beb4:	4ba2      	ldr	r3, [pc, #648]	; (800c140 <update_pwm+0x2f0>)
 800beb6:	edc3 7a00 	vstr	s15, [r3]
	//phase = -phase;

	float u0 = 0.5773; //0.5 * 2.0 / 1.73205;// maximal possible U on one coil thanks to wankel //takes<200ns
 800beba:	4ba3      	ldr	r3, [pc, #652]	; (800c148 <update_pwm+0x2f8>)
 800bebc:	617b      	str	r3, [r7, #20]
	float modified_amp = amp + stiffness * av_velocity;// * direction; // TODO the abs allows same stiffness to make it softer for both directions - without a signchange is needed BUT turnaround is super aggressive now :( SAME issue with direction - super forceful reverse but sign identical --- looks like v needs to direct also the phase !!!!
 800bebe:	4ba3      	ldr	r3, [pc, #652]	; (800c14c <update_pwm+0x2fc>)
 800bec0:	ed93 7a00 	vldr	s14, [r3]
 800bec4:	4ba2      	ldr	r3, [pc, #648]	; (800c150 <update_pwm+0x300>)
 800bec6:	edd3 7a00 	vldr	s15, [r3]
 800beca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bece:	4ba1      	ldr	r3, [pc, #644]	; (800c154 <update_pwm+0x304>)
 800bed0:	edd3 7a00 	vldr	s15, [r3]
 800bed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bed8:	edc7 7a04 	vstr	s15, [r7, #16]
	//u0 *= amp;  //takes<200ns
	if (modified_amp > AMP_LIMIT){
 800bedc:	6938      	ldr	r0, [r7, #16]
 800bede:	f7f4 fb33 	bl	8000548 <__aeabi_f2d>
 800bee2:	a38f      	add	r3, pc, #572	; (adr r3, 800c120 <update_pwm+0x2d0>)
 800bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee8:	f7f4 fe16 	bl	8000b18 <__aeabi_dcmpgt>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d001      	beq.n	800bef6 <update_pwm+0xa6>
		modified_amp = AMP_LIMIT;
 800bef2:	4b99      	ldr	r3, [pc, #612]	; (800c158 <update_pwm+0x308>)
 800bef4:	613b      	str	r3, [r7, #16]
	}
	if (modified_amp < -AMP_LIMIT){
 800bef6:	6938      	ldr	r0, [r7, #16]
 800bef8:	f7f4 fb26 	bl	8000548 <__aeabi_f2d>
 800befc:	a38a      	add	r3, pc, #552	; (adr r3, 800c128 <update_pwm+0x2d8>)
 800befe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf02:	f7f4 fdeb 	bl	8000adc <__aeabi_dcmplt>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <update_pwm+0xc0>
		modified_amp = -AMP_LIMIT;
 800bf0c:	4b93      	ldr	r3, [pc, #588]	; (800c15c <update_pwm+0x30c>)
 800bf0e:	613b      	str	r3, [r7, #16]
	}



	if (modified_amp > 0){
 800bf10:	edd7 7a04 	vldr	s15, [r7, #16]
 800bf14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf1c:	dd13      	ble.n	800bf46 <update_pwm+0xf6>
		phase -= phase_shift;  //takes<200ns
 800bf1e:	4b88      	ldr	r3, [pc, #544]	; (800c140 <update_pwm+0x2f0>)
 800bf20:	ed93 7a00 	vldr	s14, [r3]
 800bf24:	4b8e      	ldr	r3, [pc, #568]	; (800c160 <update_pwm+0x310>)
 800bf26:	edd3 7a00 	vldr	s15, [r3]
 800bf2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf2e:	4b84      	ldr	r3, [pc, #528]	; (800c140 <update_pwm+0x2f0>)
 800bf30:	edc3 7a00 	vstr	s15, [r3]
		u0 *= modified_amp;  //takes<200ns
 800bf34:	ed97 7a05 	vldr	s14, [r7, #20]
 800bf38:	edd7 7a04 	vldr	s15, [r7, #16]
 800bf3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf40:	edc7 7a05 	vstr	s15, [r7, #20]
 800bf44:	e014      	b.n	800bf70 <update_pwm+0x120>
	}
	else {
		phase += phase_shift;
 800bf46:	4b7e      	ldr	r3, [pc, #504]	; (800c140 <update_pwm+0x2f0>)
 800bf48:	ed93 7a00 	vldr	s14, [r3]
 800bf4c:	4b84      	ldr	r3, [pc, #528]	; (800c160 <update_pwm+0x310>)
 800bf4e:	edd3 7a00 	vldr	s15, [r3]
 800bf52:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf56:	4b7a      	ldr	r3, [pc, #488]	; (800c140 <update_pwm+0x2f0>)
 800bf58:	edc3 7a00 	vstr	s15, [r3]
		u0 *= -modified_amp;  //takes<200ns
 800bf5c:	edd7 7a04 	vldr	s15, [r7, #16]
 800bf60:	eef1 7a67 	vneg.f32	s15, s15
 800bf64:	ed97 7a05 	vldr	s14, [r7, #20]
 800bf68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf6c:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	u0 *= run_motor;  //takes<200ns
 800bf70:	4b7c      	ldr	r3, [pc, #496]	; (800c164 <update_pwm+0x314>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	ee07 3a90 	vmov	s15, r3
 800bf78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf7c:	ed97 7a05 	vldr	s14, [r7, #20]
 800bf80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf84:	edc7 7a05 	vstr	s15, [r7, #20]

//



	phase *= 100;
 800bf88:	4b6d      	ldr	r3, [pc, #436]	; (800c140 <update_pwm+0x2f0>)
 800bf8a:	edd3 7a00 	vldr	s15, [r3]
 800bf8e:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800c168 <update_pwm+0x318>
 800bf92:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bf96:	4b6a      	ldr	r3, [pc, #424]	; (800c140 <update_pwm+0x2f0>)
 800bf98:	edc3 7a00 	vstr	s15, [r3]
	int_phase = (int) phase;
 800bf9c:	4b68      	ldr	r3, [pc, #416]	; (800c140 <update_pwm+0x2f0>)
 800bf9e:	edd3 7a00 	vldr	s15, [r3]
 800bfa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfa6:	ee17 2a90 	vmov	r2, s15
 800bfaa:	4b70      	ldr	r3, [pc, #448]	; (800c16c <update_pwm+0x31c>)
 800bfac:	601a      	str	r2, [r3, #0]
	int_phase = int_phase % 628;
 800bfae:	4b6f      	ldr	r3, [pc, #444]	; (800c16c <update_pwm+0x31c>)
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	4b6f      	ldr	r3, [pc, #444]	; (800c170 <update_pwm+0x320>)
 800bfb4:	fb83 1302 	smull	r1, r3, r3, r2
 800bfb8:	11d9      	asrs	r1, r3, #7
 800bfba:	17d3      	asrs	r3, r2, #31
 800bfbc:	1acb      	subs	r3, r1, r3
 800bfbe:	f44f 711d 	mov.w	r1, #628	; 0x274
 800bfc2:	fb01 f303 	mul.w	r3, r1, r3
 800bfc6:	1ad3      	subs	r3, r2, r3
 800bfc8:	4a68      	ldr	r2, [pc, #416]	; (800c16c <update_pwm+0x31c>)
 800bfca:	6013      	str	r3, [r2, #0]
	if (int_phase < 0) {
 800bfcc:	4b67      	ldr	r3, [pc, #412]	; (800c16c <update_pwm+0x31c>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	da05      	bge.n	800bfe0 <update_pwm+0x190>
		int_phase += 628;
 800bfd4:	4b65      	ldr	r3, [pc, #404]	; (800c16c <update_pwm+0x31c>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800bfdc:	4a63      	ldr	r2, [pc, #396]	; (800c16c <update_pwm+0x31c>)
 800bfde:	6013      	str	r3, [r2, #0]
	}

	float uA = 0;
 800bfe0:	f04f 0300 	mov.w	r3, #0
 800bfe4:	60fb      	str	r3, [r7, #12]
	float uB = 0;
 800bfe6:	f04f 0300 	mov.w	r3, #0
 800bfea:	60bb      	str	r3, [r7, #8]
	float uC = 0;
 800bfec:	f04f 0300 	mov.w	r3, #0
 800bff0:	607b      	str	r3, [r7, #4]

	if (wave_mode < 2 ){
 800bff2:	4b60      	ldr	r3, [pc, #384]	; (800c174 <update_pwm+0x324>)
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	f200 8140 	bhi.w	800c27c <update_pwm+0x42c>
		if (wave_mode == 0 ){
 800bffc:	4b5d      	ldr	r3, [pc, #372]	; (800c174 <update_pwm+0x324>)
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d149      	bne.n	800c098 <update_pwm+0x248>
		//    			uB = lookup[2]; // takes 3mus
		//    			uC = 0;

			// ---- lookup  this optimized routine brings roundtrip down to 5mus

			if  (int_phase < 210)	{ //0...209
 800c004:	4b59      	ldr	r3, [pc, #356]	; (800c16c <update_pwm+0x31c>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2bd1      	cmp	r3, #209	; 0xd1
 800c00a:	dc13      	bgt.n	800c034 <update_pwm+0x1e4>
				uA = lookup[int_phase]; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 800c00c:	4b57      	ldr	r3, [pc, #348]	; (800c16c <update_pwm+0x31c>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a59      	ldr	r2, [pc, #356]	; (800c178 <update_pwm+0x328>)
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	4413      	add	r3, r2
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	60fb      	str	r3, [r7, #12]
				uB = lookup[210 - 1 - int_phase]; // takes 3mus
 800c01a:	4b54      	ldr	r3, [pc, #336]	; (800c16c <update_pwm+0x31c>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f1c3 03d1 	rsb	r3, r3, #209	; 0xd1
 800c022:	4a55      	ldr	r2, [pc, #340]	; (800c178 <update_pwm+0x328>)
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	4413      	add	r3, r2
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	60bb      	str	r3, [r7, #8]
				uC = 0;
 800c02c:	f04f 0300 	mov.w	r3, #0
 800c030:	607b      	str	r3, [r7, #4]
 800c032:	e0cb      	b.n	800c1cc <update_pwm+0x37c>
			}
		 else if  (int_phase < 420){	 //210...419
 800c034:	4b4d      	ldr	r3, [pc, #308]	; (800c16c <update_pwm+0x31c>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800c03c:	da15      	bge.n	800c06a <update_pwm+0x21a>
				uA = 0; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 800c03e:	f04f 0300 	mov.w	r3, #0
 800c042:	60fb      	str	r3, [r7, #12]
				uB = lookup[int_phase - 210]; // takes 3mus
 800c044:	4b49      	ldr	r3, [pc, #292]	; (800c16c <update_pwm+0x31c>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	3bd2      	subs	r3, #210	; 0xd2
 800c04a:	4a4b      	ldr	r2, [pc, #300]	; (800c178 <update_pwm+0x328>)
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	4413      	add	r3, r2
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	60bb      	str	r3, [r7, #8]
				uC = lookup[420 - 1 - int_phase];
 800c054:	4b45      	ldr	r3, [pc, #276]	; (800c16c <update_pwm+0x31c>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f5c3 73d1 	rsb	r3, r3, #418	; 0x1a2
 800c05c:	3301      	adds	r3, #1
 800c05e:	4a46      	ldr	r2, [pc, #280]	; (800c178 <update_pwm+0x328>)
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4413      	add	r3, r2
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	607b      	str	r3, [r7, #4]
 800c068:	e0b0      	b.n	800c1cc <update_pwm+0x37c>
		 }
		 else	{  //420...629
				uA = lookup[630 - 1 - int_phase]; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 800c06a:	4b40      	ldr	r3, [pc, #256]	; (800c16c <update_pwm+0x31c>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f5c3 731d 	rsb	r3, r3, #628	; 0x274
 800c072:	3301      	adds	r3, #1
 800c074:	4a40      	ldr	r2, [pc, #256]	; (800c178 <update_pwm+0x328>)
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	4413      	add	r3, r2
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	60fb      	str	r3, [r7, #12]
				uB = 0; // takes 3mus
 800c07e:	f04f 0300 	mov.w	r3, #0
 800c082:	60bb      	str	r3, [r7, #8]
				uC = lookup[int_phase - 420];
 800c084:	4b39      	ldr	r3, [pc, #228]	; (800c16c <update_pwm+0x31c>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800c08c:	4a3a      	ldr	r2, [pc, #232]	; (800c178 <update_pwm+0x328>)
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	607b      	str	r3, [r7, #4]
 800c096:	e099      	b.n	800c1cc <update_pwm+0x37c>
			}
		}

		else if (wave_mode == 1){
 800c098:	4b36      	ldr	r3, [pc, #216]	; (800c174 <update_pwm+0x324>)
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	f040 8095 	bne.w	800c1cc <update_pwm+0x37c>
			if  (int_phase < 105-52)	{
 800c0a2:	4b32      	ldr	r3, [pc, #200]	; (800c16c <update_pwm+0x31c>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2b34      	cmp	r3, #52	; 0x34
 800c0a8:	dc09      	bgt.n	800c0be <update_pwm+0x26e>
				uA = 1;
 800c0aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c0ae:	60fb      	str	r3, [r7, #12]
				uB = 0;
 800c0b0:	f04f 0300 	mov.w	r3, #0
 800c0b4:	60bb      	str	r3, [r7, #8]
				uC = 0;
 800c0b6:	f04f 0300 	mov.w	r3, #0
 800c0ba:	607b      	str	r3, [r7, #4]
 800c0bc:	e086      	b.n	800c1cc <update_pwm+0x37c>
			}
			else if  (int_phase < 210-52)	{
 800c0be:	4b2b      	ldr	r3, [pc, #172]	; (800c16c <update_pwm+0x31c>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2b9d      	cmp	r3, #157	; 0x9d
 800c0c4:	dc09      	bgt.n	800c0da <update_pwm+0x28a>
				uA = 1;
 800c0c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c0ca:	60fb      	str	r3, [r7, #12]
				uB = 1;
 800c0cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c0d0:	60bb      	str	r3, [r7, #8]
				uC = 0;
 800c0d2:	f04f 0300 	mov.w	r3, #0
 800c0d6:	607b      	str	r3, [r7, #4]
 800c0d8:	e078      	b.n	800c1cc <update_pwm+0x37c>
			}
			else if  (int_phase < 315-52)	{
 800c0da:	4b24      	ldr	r3, [pc, #144]	; (800c16c <update_pwm+0x31c>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800c0e2:	dc09      	bgt.n	800c0f8 <update_pwm+0x2a8>
				uA = 0;
 800c0e4:	f04f 0300 	mov.w	r3, #0
 800c0e8:	60fb      	str	r3, [r7, #12]
				uB = 1;
 800c0ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c0ee:	60bb      	str	r3, [r7, #8]
				uC = 0;
 800c0f0:	f04f 0300 	mov.w	r3, #0
 800c0f4:	607b      	str	r3, [r7, #4]
 800c0f6:	e069      	b.n	800c1cc <update_pwm+0x37c>
			}
			else if  (int_phase < 420-52)	{
 800c0f8:	4b1c      	ldr	r3, [pc, #112]	; (800c16c <update_pwm+0x31c>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 800c100:	da3c      	bge.n	800c17c <update_pwm+0x32c>
				uA = 0;
 800c102:	f04f 0300 	mov.w	r3, #0
 800c106:	60fb      	str	r3, [r7, #12]
				uB = 1;
 800c108:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c10c:	60bb      	str	r3, [r7, #8]
				uC = 1;
 800c10e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c112:	607b      	str	r3, [r7, #4]
 800c114:	e05a      	b.n	800c1cc <update_pwm+0x37c>
 800c116:	bf00      	nop
 800c118:	f85510d4 	.word	0xf85510d4
 800c11c:	3f69bc33 	.word	0x3f69bc33
 800c120:	cccccccd 	.word	0xcccccccd
 800c124:	3feccccc 	.word	0x3feccccc
 800c128:	cccccccd 	.word	0xcccccccd
 800c12c:	bfeccccc 	.word	0xbfeccccc
 800c130:	40000c00 	.word	0x40000c00
 800c134:	2000011c 	.word	0x2000011c
 800c138:	20000cfc 	.word	0x20000cfc
 800c13c:	401c0000 	.word	0x401c0000
 800c140:	200000d8 	.word	0x200000d8
 800c144:	20000008 	.word	0x20000008
 800c148:	3f13c9ef 	.word	0x3f13c9ef
 800c14c:	200000cc 	.word	0x200000cc
 800c150:	200000e4 	.word	0x200000e4
 800c154:	20000010 	.word	0x20000010
 800c158:	3f666666 	.word	0x3f666666
 800c15c:	bf666666 	.word	0xbf666666
 800c160:	20000018 	.word	0x20000018
 800c164:	20000014 	.word	0x20000014
 800c168:	42c80000 	.word	0x42c80000
 800c16c:	200000dc 	.word	0x200000dc
 800c170:	342da7f3 	.word	0x342da7f3
 800c174:	2000010c 	.word	0x2000010c
 800c178:	200001dc 	.word	0x200001dc
			}
			else if  (int_phase < 525-52)	{
 800c17c:	4b9c      	ldr	r3, [pc, #624]	; (800c3f0 <update_pwm+0x5a0>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 800c184:	dc09      	bgt.n	800c19a <update_pwm+0x34a>
				uA = 0;
 800c186:	f04f 0300 	mov.w	r3, #0
 800c18a:	60fb      	str	r3, [r7, #12]
				uB = 0;
 800c18c:	f04f 0300 	mov.w	r3, #0
 800c190:	60bb      	str	r3, [r7, #8]
				uC = 1;
 800c192:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c196:	607b      	str	r3, [r7, #4]
 800c198:	e018      	b.n	800c1cc <update_pwm+0x37c>
			}
			else if  (int_phase < 630-52)	{
 800c19a:	4b95      	ldr	r3, [pc, #596]	; (800c3f0 <update_pwm+0x5a0>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f240 2241 	movw	r2, #577	; 0x241
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	dc09      	bgt.n	800c1ba <update_pwm+0x36a>
				uA = 1;
 800c1a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c1aa:	60fb      	str	r3, [r7, #12]
				uB = 0;
 800c1ac:	f04f 0300 	mov.w	r3, #0
 800c1b0:	60bb      	str	r3, [r7, #8]
				uC = 1;
 800c1b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c1b6:	607b      	str	r3, [r7, #4]
 800c1b8:	e008      	b.n	800c1cc <update_pwm+0x37c>
			}
			else 	{ //same as first half phase
				uA = 1;
 800c1ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c1be:	60fb      	str	r3, [r7, #12]
				uB = 0;
 800c1c0:	f04f 0300 	mov.w	r3, #0
 800c1c4:	60bb      	str	r3, [r7, #8]
				uC = 0;
 800c1c6:	f04f 0300 	mov.w	r3, #0
 800c1ca:	607b      	str	r3, [r7, #4]
			}
		}
		pwmA = (uint16_t) (pwm * u0 * uA); //takes<2s00ns
 800c1cc:	4b89      	ldr	r3, [pc, #548]	; (800c3f4 <update_pwm+0x5a4>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	ee07 3a90 	vmov	s15, r3
 800c1d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c1d8:	edd7 7a05 	vldr	s15, [r7, #20]
 800c1dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1e0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c1e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ec:	ee17 3a90 	vmov	r3, s15
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	4b80      	ldr	r3, [pc, #512]	; (800c3f8 <update_pwm+0x5a8>)
 800c1f6:	601a      	str	r2, [r3, #0]
		pwmB = (uint16_t) (pwm * u0 * uB); //takes<200ns
 800c1f8:	4b7e      	ldr	r3, [pc, #504]	; (800c3f4 <update_pwm+0x5a4>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	ee07 3a90 	vmov	s15, r3
 800c200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c204:	edd7 7a05 	vldr	s15, [r7, #20]
 800c208:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c20c:	edd7 7a02 	vldr	s15, [r7, #8]
 800c210:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c218:	ee17 3a90 	vmov	r3, s15
 800c21c:	b29b      	uxth	r3, r3
 800c21e:	461a      	mov	r2, r3
 800c220:	4b76      	ldr	r3, [pc, #472]	; (800c3fc <update_pwm+0x5ac>)
 800c222:	601a      	str	r2, [r3, #0]
		pwmC = (uint16_t) (pwm * u0 * uC); //takes<200ns
 800c224:	4b73      	ldr	r3, [pc, #460]	; (800c3f4 <update_pwm+0x5a4>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	ee07 3a90 	vmov	s15, r3
 800c22c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c230:	edd7 7a05 	vldr	s15, [r7, #20]
 800c234:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c238:	edd7 7a01 	vldr	s15, [r7, #4]
 800c23c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c244:	ee17 3a90 	vmov	r3, s15
 800c248:	b29b      	uxth	r3, r3
 800c24a:	461a      	mov	r2, r3
 800c24c:	4b6c      	ldr	r3, [pc, #432]	; (800c400 <update_pwm+0x5b0>)
 800c24e:	601a      	str	r2, [r3, #0]

		// ---- end lookup

		debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 800c250:	4b6c      	ldr	r3, [pc, #432]	; (800c404 <update_pwm+0x5b4>)
 800c252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c256:	619a      	str	r2, [r3, #24]

		// --- MOTOR DRIVER ----------------------------------------------------
		// --- PWM pulses 0...2048
		if (normal_operation_enabled){
 800c258:	4b6b      	ldr	r3, [pc, #428]	; (800c408 <update_pwm+0x5b8>)
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f000 812f 	beq.w	800c4c0 <update_pwm+0x670>
			TIM1->CCR1 = pwmA; //takes<150ns
 800c262:	4b65      	ldr	r3, [pc, #404]	; (800c3f8 <update_pwm+0x5a8>)
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	4b69      	ldr	r3, [pc, #420]	; (800c40c <update_pwm+0x5bc>)
 800c268:	635a      	str	r2, [r3, #52]	; 0x34
			if (INVERT){
				TIM1->CCR3 = pwmB; //takes<150ns
				TIM1->CCR2 = pwmC; //takes<150ns
			}
			else {
				TIM1->CCR2 = pwmB; //takes<150ns
 800c26a:	4b64      	ldr	r3, [pc, #400]	; (800c3fc <update_pwm+0x5ac>)
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	4b67      	ldr	r3, [pc, #412]	; (800c40c <update_pwm+0x5bc>)
 800c270:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = pwmC; //takes<150ns
 800c272:	4b63      	ldr	r3, [pc, #396]	; (800c400 <update_pwm+0x5b0>)
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	4b65      	ldr	r3, [pc, #404]	; (800c40c <update_pwm+0x5bc>)
 800c278:	63da      	str	r2, [r3, #60]	; 0x3c
	}




}
 800c27a:	e121      	b.n	800c4c0 <update_pwm+0x670>
		if  (int_phase < 105)	{
 800c27c:	4b5c      	ldr	r3, [pc, #368]	; (800c3f0 <update_pwm+0x5a0>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2b68      	cmp	r3, #104	; 0x68
 800c282:	dc29      	bgt.n	800c2d8 <update_pwm+0x488>
			uA = 1;
 800c284:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c288:	60fb      	str	r3, [r7, #12]
			pwmA = (uint16_t) (pwm * u0 * uA); //takes<2s00ns
 800c28a:	4b5a      	ldr	r3, [pc, #360]	; (800c3f4 <update_pwm+0x5a4>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	ee07 3a90 	vmov	s15, r3
 800c292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c296:	edd7 7a05 	vldr	s15, [r7, #20]
 800c29a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c29e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2aa:	ee17 3a90 	vmov	r3, s15
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	4b51      	ldr	r3, [pc, #324]	; (800c3f8 <update_pwm+0x5a8>)
 800c2b4:	601a      	str	r2, [r3, #0]
			TIM1->CCR1 = pwmA; //takes<150ns
 800c2b6:	4b50      	ldr	r3, [pc, #320]	; (800c3f8 <update_pwm+0x5a8>)
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	4b54      	ldr	r3, [pc, #336]	; (800c40c <update_pwm+0x5bc>)
 800c2bc:	635a      	str	r2, [r3, #52]	; 0x34
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800c2be:	4b53      	ldr	r3, [pc, #332]	; (800c40c <update_pwm+0x5bc>)
 800c2c0:	699b      	ldr	r3, [r3, #24]
 800c2c2:	4a52      	ldr	r2, [pc, #328]	; (800c40c <update_pwm+0x5bc>)
 800c2c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2c8:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800c2ca:	4b50      	ldr	r3, [pc, #320]	; (800c40c <update_pwm+0x5bc>)
 800c2cc:	699b      	ldr	r3, [r3, #24]
 800c2ce:	4a4f      	ldr	r2, [pc, #316]	; (800c40c <update_pwm+0x5bc>)
 800c2d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c2d4:	6193      	str	r3, [r2, #24]
}
 800c2d6:	e0f3      	b.n	800c4c0 <update_pwm+0x670>
		else if  (int_phase < 210)	{
 800c2d8:	4b45      	ldr	r3, [pc, #276]	; (800c3f0 <update_pwm+0x5a0>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2bd1      	cmp	r3, #209	; 0xd1
 800c2de:	dc29      	bgt.n	800c334 <update_pwm+0x4e4>
			uB = 1;
 800c2e0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c2e4:	60bb      	str	r3, [r7, #8]
			pwmB = (uint16_t) (pwm * u0 * uB); //takes<2s00ns
 800c2e6:	4b43      	ldr	r3, [pc, #268]	; (800c3f4 <update_pwm+0x5a4>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	ee07 3a90 	vmov	s15, r3
 800c2ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c2f2:	edd7 7a05 	vldr	s15, [r7, #20]
 800c2f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2fa:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c306:	ee17 3a90 	vmov	r3, s15
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	461a      	mov	r2, r3
 800c30e:	4b3b      	ldr	r3, [pc, #236]	; (800c3fc <update_pwm+0x5ac>)
 800c310:	601a      	str	r2, [r3, #0]
			TIM1->CCR2 = pwmB; //takes<150ns
 800c312:	4b3a      	ldr	r3, [pc, #232]	; (800c3fc <update_pwm+0x5ac>)
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	4b3d      	ldr	r3, [pc, #244]	; (800c40c <update_pwm+0x5bc>)
 800c318:	639a      	str	r2, [r3, #56]	; 0x38
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800c31a:	4b3c      	ldr	r3, [pc, #240]	; (800c40c <update_pwm+0x5bc>)
 800c31c:	699b      	ldr	r3, [r3, #24]
 800c31e:	4a3b      	ldr	r2, [pc, #236]	; (800c40c <update_pwm+0x5bc>)
 800c320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c324:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800c326:	4b39      	ldr	r3, [pc, #228]	; (800c40c <update_pwm+0x5bc>)
 800c328:	699b      	ldr	r3, [r3, #24]
 800c32a:	4a38      	ldr	r2, [pc, #224]	; (800c40c <update_pwm+0x5bc>)
 800c32c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c330:	6193      	str	r3, [r2, #24]
}
 800c332:	e0c5      	b.n	800c4c0 <update_pwm+0x670>
		else if  (int_phase < 315)	{
 800c334:	4b2e      	ldr	r3, [pc, #184]	; (800c3f0 <update_pwm+0x5a0>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800c33c:	dc29      	bgt.n	800c392 <update_pwm+0x542>
			uB = 1;
 800c33e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c342:	60bb      	str	r3, [r7, #8]
			pwmB = (uint16_t) (pwm * u0 * uB); //takes<2s00ns
 800c344:	4b2b      	ldr	r3, [pc, #172]	; (800c3f4 <update_pwm+0x5a4>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	ee07 3a90 	vmov	s15, r3
 800c34c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c350:	edd7 7a05 	vldr	s15, [r7, #20]
 800c354:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c358:	edd7 7a02 	vldr	s15, [r7, #8]
 800c35c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c364:	ee17 3a90 	vmov	r3, s15
 800c368:	b29b      	uxth	r3, r3
 800c36a:	461a      	mov	r2, r3
 800c36c:	4b23      	ldr	r3, [pc, #140]	; (800c3fc <update_pwm+0x5ac>)
 800c36e:	601a      	str	r2, [r3, #0]
			TIM1->CCR2 = pwmB; //takes<150ns
 800c370:	4b22      	ldr	r3, [pc, #136]	; (800c3fc <update_pwm+0x5ac>)
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	4b25      	ldr	r3, [pc, #148]	; (800c40c <update_pwm+0x5bc>)
 800c376:	639a      	str	r2, [r3, #56]	; 0x38
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800c378:	4b24      	ldr	r3, [pc, #144]	; (800c40c <update_pwm+0x5bc>)
 800c37a:	699b      	ldr	r3, [r3, #24]
 800c37c:	4a23      	ldr	r2, [pc, #140]	; (800c40c <update_pwm+0x5bc>)
 800c37e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c382:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800c384:	4b21      	ldr	r3, [pc, #132]	; (800c40c <update_pwm+0x5bc>)
 800c386:	699b      	ldr	r3, [r3, #24]
 800c388:	4a20      	ldr	r2, [pc, #128]	; (800c40c <update_pwm+0x5bc>)
 800c38a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c38e:	6193      	str	r3, [r2, #24]
}
 800c390:	e096      	b.n	800c4c0 <update_pwm+0x670>
		else if  (int_phase < 420)	{
 800c392:	4b17      	ldr	r3, [pc, #92]	; (800c3f0 <update_pwm+0x5a0>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800c39a:	da39      	bge.n	800c410 <update_pwm+0x5c0>
			uC = 1;
 800c39c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c3a0:	607b      	str	r3, [r7, #4]
			pwmC = (uint16_t) (pwm * u0 * uC); //takes<2s00ns
 800c3a2:	4b14      	ldr	r3, [pc, #80]	; (800c3f4 <update_pwm+0x5a4>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	ee07 3a90 	vmov	s15, r3
 800c3aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c3ae:	edd7 7a05 	vldr	s15, [r7, #20]
 800c3b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800c3ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3c2:	ee17 3a90 	vmov	r3, s15
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	4b0d      	ldr	r3, [pc, #52]	; (800c400 <update_pwm+0x5b0>)
 800c3cc:	601a      	str	r2, [r3, #0]
			TIM1->CCR3 = pwmC; //takes<150ns
 800c3ce:	4b0c      	ldr	r3, [pc, #48]	; (800c400 <update_pwm+0x5b0>)
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	4b0e      	ldr	r3, [pc, #56]	; (800c40c <update_pwm+0x5bc>)
 800c3d4:	63da      	str	r2, [r3, #60]	; 0x3c
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800c3d6:	4b0d      	ldr	r3, [pc, #52]	; (800c40c <update_pwm+0x5bc>)
 800c3d8:	699b      	ldr	r3, [r3, #24]
 800c3da:	4a0c      	ldr	r2, [pc, #48]	; (800c40c <update_pwm+0x5bc>)
 800c3dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c3e0:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800c3e2:	4b0a      	ldr	r3, [pc, #40]	; (800c40c <update_pwm+0x5bc>)
 800c3e4:	699b      	ldr	r3, [r3, #24]
 800c3e6:	4a09      	ldr	r2, [pc, #36]	; (800c40c <update_pwm+0x5bc>)
 800c3e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c3ec:	6193      	str	r3, [r2, #24]
}
 800c3ee:	e067      	b.n	800c4c0 <update_pwm+0x670>
 800c3f0:	200000dc 	.word	0x200000dc
 800c3f4:	2000000c 	.word	0x2000000c
 800c3f8:	200000e8 	.word	0x200000e8
 800c3fc:	200000ec 	.word	0x200000ec
 800c400:	200000f0 	.word	0x200000f0
 800c404:	40020c00 	.word	0x40020c00
 800c408:	20000035 	.word	0x20000035
 800c40c:	40010000 	.word	0x40010000
		else if  (int_phase < 525)	{
 800c410:	4b2d      	ldr	r3, [pc, #180]	; (800c4c8 <update_pwm+0x678>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800c418:	dc29      	bgt.n	800c46e <update_pwm+0x61e>
			uC = 1;
 800c41a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c41e:	607b      	str	r3, [r7, #4]
			pwmC = (uint16_t) (pwm * u0 * uC); //takes<2s00ns
 800c420:	4b2a      	ldr	r3, [pc, #168]	; (800c4cc <update_pwm+0x67c>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	ee07 3a90 	vmov	s15, r3
 800c428:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c42c:	edd7 7a05 	vldr	s15, [r7, #20]
 800c430:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c434:	edd7 7a01 	vldr	s15, [r7, #4]
 800c438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c43c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c440:	ee17 3a90 	vmov	r3, s15
 800c444:	b29b      	uxth	r3, r3
 800c446:	461a      	mov	r2, r3
 800c448:	4b21      	ldr	r3, [pc, #132]	; (800c4d0 <update_pwm+0x680>)
 800c44a:	601a      	str	r2, [r3, #0]
			TIM1->CCR3 = pwmC; //takes<150ns
 800c44c:	4b20      	ldr	r3, [pc, #128]	; (800c4d0 <update_pwm+0x680>)
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	4b20      	ldr	r3, [pc, #128]	; (800c4d4 <update_pwm+0x684>)
 800c452:	63da      	str	r2, [r3, #60]	; 0x3c
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800c454:	4b1f      	ldr	r3, [pc, #124]	; (800c4d4 <update_pwm+0x684>)
 800c456:	699b      	ldr	r3, [r3, #24]
 800c458:	4a1e      	ldr	r2, [pc, #120]	; (800c4d4 <update_pwm+0x684>)
 800c45a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c45e:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800c460:	4b1c      	ldr	r3, [pc, #112]	; (800c4d4 <update_pwm+0x684>)
 800c462:	699b      	ldr	r3, [r3, #24]
 800c464:	4a1b      	ldr	r2, [pc, #108]	; (800c4d4 <update_pwm+0x684>)
 800c466:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c46a:	6193      	str	r3, [r2, #24]
}
 800c46c:	e028      	b.n	800c4c0 <update_pwm+0x670>
			uA = 1;
 800c46e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c472:	60fb      	str	r3, [r7, #12]
			pwmA = (uint16_t) (pwm * u0 * uA); //takes<2s00ns
 800c474:	4b15      	ldr	r3, [pc, #84]	; (800c4cc <update_pwm+0x67c>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	ee07 3a90 	vmov	s15, r3
 800c47c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c480:	edd7 7a05 	vldr	s15, [r7, #20]
 800c484:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c488:	edd7 7a03 	vldr	s15, [r7, #12]
 800c48c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c494:	ee17 3a90 	vmov	r3, s15
 800c498:	b29b      	uxth	r3, r3
 800c49a:	461a      	mov	r2, r3
 800c49c:	4b0e      	ldr	r3, [pc, #56]	; (800c4d8 <update_pwm+0x688>)
 800c49e:	601a      	str	r2, [r3, #0]
			TIM1->CCR1 = pwmA; //takes<150ns
 800c4a0:	4b0d      	ldr	r3, [pc, #52]	; (800c4d8 <update_pwm+0x688>)
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	4b0b      	ldr	r3, [pc, #44]	; (800c4d4 <update_pwm+0x684>)
 800c4a6:	635a      	str	r2, [r3, #52]	; 0x34
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800c4a8:	4b0a      	ldr	r3, [pc, #40]	; (800c4d4 <update_pwm+0x684>)
 800c4aa:	699b      	ldr	r3, [r3, #24]
 800c4ac:	4a09      	ldr	r2, [pc, #36]	; (800c4d4 <update_pwm+0x684>)
 800c4ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c4b2:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800c4b4:	4b07      	ldr	r3, [pc, #28]	; (800c4d4 <update_pwm+0x684>)
 800c4b6:	699b      	ldr	r3, [r3, #24]
 800c4b8:	4a06      	ldr	r2, [pc, #24]	; (800c4d4 <update_pwm+0x684>)
 800c4ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c4be:	6193      	str	r3, [r2, #24]
}
 800c4c0:	bf00      	nop
 800c4c2:	371c      	adds	r7, #28
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd90      	pop	{r4, r7, pc}
 800c4c8:	200000dc 	.word	0x200000dc
 800c4cc:	2000000c 	.word	0x2000000c
 800c4d0:	200000f0 	.word	0x200000f0
 800c4d4:	40010000 	.word	0x40010000
 800c4d8:	200000e8 	.word	0x200000e8

0800c4dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c4e0:	bf00      	nop
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr
	...

0800c4ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	607b      	str	r3, [r7, #4]
 800c4f6:	4b10      	ldr	r3, [pc, #64]	; (800c538 <HAL_MspInit+0x4c>)
 800c4f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4fa:	4a0f      	ldr	r2, [pc, #60]	; (800c538 <HAL_MspInit+0x4c>)
 800c4fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c500:	6453      	str	r3, [r2, #68]	; 0x44
 800c502:	4b0d      	ldr	r3, [pc, #52]	; (800c538 <HAL_MspInit+0x4c>)
 800c504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c50a:	607b      	str	r3, [r7, #4]
 800c50c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c50e:	2300      	movs	r3, #0
 800c510:	603b      	str	r3, [r7, #0]
 800c512:	4b09      	ldr	r3, [pc, #36]	; (800c538 <HAL_MspInit+0x4c>)
 800c514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c516:	4a08      	ldr	r2, [pc, #32]	; (800c538 <HAL_MspInit+0x4c>)
 800c518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c51c:	6413      	str	r3, [r2, #64]	; 0x40
 800c51e:	4b06      	ldr	r3, [pc, #24]	; (800c538 <HAL_MspInit+0x4c>)
 800c520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c526:	603b      	str	r3, [r7, #0]
 800c528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c52a:	bf00      	nop
 800c52c:	370c      	adds	r7, #12
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	40023800 	.word	0x40023800

0800c53c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b092      	sub	sp, #72	; 0x48
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c544:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c548:	2200      	movs	r2, #0
 800c54a:	601a      	str	r2, [r3, #0]
 800c54c:	605a      	str	r2, [r3, #4]
 800c54e:	609a      	str	r2, [r3, #8]
 800c550:	60da      	str	r2, [r3, #12]
 800c552:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a9b      	ldr	r2, [pc, #620]	; (800c7c8 <HAL_ADC_MspInit+0x28c>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	f040 8096 	bne.w	800c68c <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c560:	2300      	movs	r3, #0
 800c562:	633b      	str	r3, [r7, #48]	; 0x30
 800c564:	4b99      	ldr	r3, [pc, #612]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c568:	4a98      	ldr	r2, [pc, #608]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c56a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c56e:	6453      	str	r3, [r2, #68]	; 0x44
 800c570:	4b96      	ldr	r3, [pc, #600]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c578:	633b      	str	r3, [r7, #48]	; 0x30
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c57c:	2300      	movs	r3, #0
 800c57e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c580:	4b92      	ldr	r3, [pc, #584]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c584:	4a91      	ldr	r2, [pc, #580]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c586:	f043 0304 	orr.w	r3, r3, #4
 800c58a:	6313      	str	r3, [r2, #48]	; 0x30
 800c58c:	4b8f      	ldr	r3, [pc, #572]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c590:	f003 0304 	and.w	r3, r3, #4
 800c594:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c598:	2300      	movs	r3, #0
 800c59a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c59c:	4b8b      	ldr	r3, [pc, #556]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5a0:	4a8a      	ldr	r2, [pc, #552]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c5a2:	f043 0301 	orr.w	r3, r3, #1
 800c5a6:	6313      	str	r3, [r2, #48]	; 0x30
 800c5a8:	4b88      	ldr	r3, [pc, #544]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ac:	f003 0301 	and.w	r3, r3, #1
 800c5b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	627b      	str	r3, [r7, #36]	; 0x24
 800c5b8:	4b84      	ldr	r3, [pc, #528]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5bc:	4a83      	ldr	r2, [pc, #524]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c5be:	f043 0302 	orr.w	r3, r3, #2
 800c5c2:	6313      	str	r3, [r2, #48]	; 0x30
 800c5c4:	4b81      	ldr	r3, [pc, #516]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c5c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5c8:	f003 0302 	and.w	r3, r3, #2
 800c5cc:	627b      	str	r3, [r7, #36]	; 0x24
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c5d0:	233e      	movs	r3, #62	; 0x3e
 800c5d2:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c5d4:	2303      	movs	r3, #3
 800c5d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c5dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	487b      	ldr	r0, [pc, #492]	; (800c7d0 <HAL_ADC_MspInit+0x294>)
 800c5e4:	f7f6 fed8 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c5e8:	233e      	movs	r3, #62	; 0x3e
 800c5ea:	637b      	str	r3, [r7, #52]	; 0x34
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c5ec:	2303      	movs	r3, #3
 800c5ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c5f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	4876      	ldr	r0, [pc, #472]	; (800c7d4 <HAL_ADC_MspInit+0x298>)
 800c5fc:	f7f6 fecc 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c600:	2301      	movs	r3, #1
 800c602:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c604:	2303      	movs	r3, #3
 800c606:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c608:	2300      	movs	r3, #0
 800c60a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c60c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c610:	4619      	mov	r1, r3
 800c612:	4871      	ldr	r0, [pc, #452]	; (800c7d8 <HAL_ADC_MspInit+0x29c>)
 800c614:	f7f6 fec0 	bl	8003398 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800c618:	4b70      	ldr	r3, [pc, #448]	; (800c7dc <HAL_ADC_MspInit+0x2a0>)
 800c61a:	4a71      	ldr	r2, [pc, #452]	; (800c7e0 <HAL_ADC_MspInit+0x2a4>)
 800c61c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800c61e:	4b6f      	ldr	r3, [pc, #444]	; (800c7dc <HAL_ADC_MspInit+0x2a0>)
 800c620:	2200      	movs	r2, #0
 800c622:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c624:	4b6d      	ldr	r3, [pc, #436]	; (800c7dc <HAL_ADC_MspInit+0x2a0>)
 800c626:	2200      	movs	r2, #0
 800c628:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c62a:	4b6c      	ldr	r3, [pc, #432]	; (800c7dc <HAL_ADC_MspInit+0x2a0>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c630:	4b6a      	ldr	r3, [pc, #424]	; (800c7dc <HAL_ADC_MspInit+0x2a0>)
 800c632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c636:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c638:	4b68      	ldr	r3, [pc, #416]	; (800c7dc <HAL_ADC_MspInit+0x2a0>)
 800c63a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c63e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c640:	4b66      	ldr	r3, [pc, #408]	; (800c7dc <HAL_ADC_MspInit+0x2a0>)
 800c642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c646:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800c648:	4b64      	ldr	r3, [pc, #400]	; (800c7dc <HAL_ADC_MspInit+0x2a0>)
 800c64a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c64e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800c650:	4b62      	ldr	r3, [pc, #392]	; (800c7dc <HAL_ADC_MspInit+0x2a0>)
 800c652:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c656:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c658:	4b60      	ldr	r3, [pc, #384]	; (800c7dc <HAL_ADC_MspInit+0x2a0>)
 800c65a:	2200      	movs	r2, #0
 800c65c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800c65e:	485f      	ldr	r0, [pc, #380]	; (800c7dc <HAL_ADC_MspInit+0x2a0>)
 800c660:	f7f6 fab6 	bl	8002bd0 <HAL_DMA_Init>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d001      	beq.n	800c66e <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800c66a:	f7ff ff37 	bl	800c4dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4a5a      	ldr	r2, [pc, #360]	; (800c7dc <HAL_ADC_MspInit+0x2a0>)
 800c672:	639a      	str	r2, [r3, #56]	; 0x38
 800c674:	4a59      	ldr	r2, [pc, #356]	; (800c7dc <HAL_ADC_MspInit+0x2a0>)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c67a:	2200      	movs	r2, #0
 800c67c:	2100      	movs	r1, #0
 800c67e:	2012      	movs	r0, #18
 800c680:	f7f6 fa6f 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c684:	2012      	movs	r0, #18
 800c686:	f7f6 fa88 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800c68a:	e132      	b.n	800c8f2 <HAL_ADC_MspInit+0x3b6>
  else if(hadc->Instance==ADC2)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a54      	ldr	r2, [pc, #336]	; (800c7e4 <HAL_ADC_MspInit+0x2a8>)
 800c692:	4293      	cmp	r3, r2
 800c694:	f040 80ac 	bne.w	800c7f0 <HAL_ADC_MspInit+0x2b4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800c698:	2300      	movs	r3, #0
 800c69a:	623b      	str	r3, [r7, #32]
 800c69c:	4b4b      	ldr	r3, [pc, #300]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c69e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6a0:	4a4a      	ldr	r2, [pc, #296]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c6a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c6a6:	6453      	str	r3, [r2, #68]	; 0x44
 800c6a8:	4b48      	ldr	r3, [pc, #288]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c6aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c6b0:	623b      	str	r3, [r7, #32]
 800c6b2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	61fb      	str	r3, [r7, #28]
 800c6b8:	4b44      	ldr	r3, [pc, #272]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6bc:	4a43      	ldr	r2, [pc, #268]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c6be:	f043 0304 	orr.w	r3, r3, #4
 800c6c2:	6313      	str	r3, [r2, #48]	; 0x30
 800c6c4:	4b41      	ldr	r3, [pc, #260]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c8:	f003 0304 	and.w	r3, r3, #4
 800c6cc:	61fb      	str	r3, [r7, #28]
 800c6ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	61bb      	str	r3, [r7, #24]
 800c6d4:	4b3d      	ldr	r3, [pc, #244]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d8:	4a3c      	ldr	r2, [pc, #240]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c6da:	f043 0301 	orr.w	r3, r3, #1
 800c6de:	6313      	str	r3, [r2, #48]	; 0x30
 800c6e0:	4b3a      	ldr	r3, [pc, #232]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e4:	f003 0301 	and.w	r3, r3, #1
 800c6e8:	61bb      	str	r3, [r7, #24]
 800c6ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	617b      	str	r3, [r7, #20]
 800c6f0:	4b36      	ldr	r3, [pc, #216]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6f4:	4a35      	ldr	r2, [pc, #212]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c6f6:	f043 0302 	orr.w	r3, r3, #2
 800c6fa:	6313      	str	r3, [r2, #48]	; 0x30
 800c6fc:	4b33      	ldr	r3, [pc, #204]	; (800c7cc <HAL_ADC_MspInit+0x290>)
 800c6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c700:	f003 0302 	and.w	r3, r3, #2
 800c704:	617b      	str	r3, [r7, #20]
 800c706:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c708:	233e      	movs	r3, #62	; 0x3e
 800c70a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c70c:	2303      	movs	r3, #3
 800c70e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c710:	2300      	movs	r3, #0
 800c712:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c714:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c718:	4619      	mov	r1, r3
 800c71a:	482d      	ldr	r0, [pc, #180]	; (800c7d0 <HAL_ADC_MspInit+0x294>)
 800c71c:	f7f6 fe3c 	bl	8003398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 800c720:	2316      	movs	r3, #22
 800c722:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c724:	2303      	movs	r3, #3
 800c726:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c728:	2300      	movs	r3, #0
 800c72a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c72c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c730:	4619      	mov	r1, r3
 800c732:	4828      	ldr	r0, [pc, #160]	; (800c7d4 <HAL_ADC_MspInit+0x298>)
 800c734:	f7f6 fe30 	bl	8003398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c738:	2301      	movs	r3, #1
 800c73a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c73c:	2303      	movs	r3, #3
 800c73e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c740:	2300      	movs	r3, #0
 800c742:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c744:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c748:	4619      	mov	r1, r3
 800c74a:	4823      	ldr	r0, [pc, #140]	; (800c7d8 <HAL_ADC_MspInit+0x29c>)
 800c74c:	f7f6 fe24 	bl	8003398 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800c750:	4b25      	ldr	r3, [pc, #148]	; (800c7e8 <HAL_ADC_MspInit+0x2ac>)
 800c752:	4a26      	ldr	r2, [pc, #152]	; (800c7ec <HAL_ADC_MspInit+0x2b0>)
 800c754:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800c756:	4b24      	ldr	r3, [pc, #144]	; (800c7e8 <HAL_ADC_MspInit+0x2ac>)
 800c758:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c75c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c75e:	4b22      	ldr	r3, [pc, #136]	; (800c7e8 <HAL_ADC_MspInit+0x2ac>)
 800c760:	2200      	movs	r2, #0
 800c762:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800c764:	4b20      	ldr	r3, [pc, #128]	; (800c7e8 <HAL_ADC_MspInit+0x2ac>)
 800c766:	2200      	movs	r2, #0
 800c768:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800c76a:	4b1f      	ldr	r3, [pc, #124]	; (800c7e8 <HAL_ADC_MspInit+0x2ac>)
 800c76c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c770:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c772:	4b1d      	ldr	r3, [pc, #116]	; (800c7e8 <HAL_ADC_MspInit+0x2ac>)
 800c774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c778:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c77a:	4b1b      	ldr	r3, [pc, #108]	; (800c7e8 <HAL_ADC_MspInit+0x2ac>)
 800c77c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c780:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800c782:	4b19      	ldr	r3, [pc, #100]	; (800c7e8 <HAL_ADC_MspInit+0x2ac>)
 800c784:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c788:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800c78a:	4b17      	ldr	r3, [pc, #92]	; (800c7e8 <HAL_ADC_MspInit+0x2ac>)
 800c78c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c790:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c792:	4b15      	ldr	r3, [pc, #84]	; (800c7e8 <HAL_ADC_MspInit+0x2ac>)
 800c794:	2200      	movs	r2, #0
 800c796:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800c798:	4813      	ldr	r0, [pc, #76]	; (800c7e8 <HAL_ADC_MspInit+0x2ac>)
 800c79a:	f7f6 fa19 	bl	8002bd0 <HAL_DMA_Init>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d001      	beq.n	800c7a8 <HAL_ADC_MspInit+0x26c>
      Error_Handler();
 800c7a4:	f7ff fe9a 	bl	800c4dc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a0f      	ldr	r2, [pc, #60]	; (800c7e8 <HAL_ADC_MspInit+0x2ac>)
 800c7ac:	639a      	str	r2, [r3, #56]	; 0x38
 800c7ae:	4a0e      	ldr	r2, [pc, #56]	; (800c7e8 <HAL_ADC_MspInit+0x2ac>)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	2100      	movs	r1, #0
 800c7b8:	2012      	movs	r0, #18
 800c7ba:	f7f6 f9d2 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c7be:	2012      	movs	r0, #18
 800c7c0:	f7f6 f9eb 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 800c7c4:	e095      	b.n	800c8f2 <HAL_ADC_MspInit+0x3b6>
 800c7c6:	bf00      	nop
 800c7c8:	40012000 	.word	0x40012000
 800c7cc:	40023800 	.word	0x40023800
 800c7d0:	40020800 	.word	0x40020800
 800c7d4:	40020000 	.word	0x40020000
 800c7d8:	40020400 	.word	0x40020400
 800c7dc:	20000d00 	.word	0x20000d00
 800c7e0:	40026410 	.word	0x40026410
 800c7e4:	40012100 	.word	0x40012100
 800c7e8:	20000fa8 	.word	0x20000fa8
 800c7ec:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a41      	ldr	r2, [pc, #260]	; (800c8fc <HAL_ADC_MspInit+0x3c0>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d17b      	bne.n	800c8f2 <HAL_ADC_MspInit+0x3b6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	613b      	str	r3, [r7, #16]
 800c7fe:	4b40      	ldr	r3, [pc, #256]	; (800c900 <HAL_ADC_MspInit+0x3c4>)
 800c800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c802:	4a3f      	ldr	r2, [pc, #252]	; (800c900 <HAL_ADC_MspInit+0x3c4>)
 800c804:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c808:	6453      	str	r3, [r2, #68]	; 0x44
 800c80a:	4b3d      	ldr	r3, [pc, #244]	; (800c900 <HAL_ADC_MspInit+0x3c4>)
 800c80c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c80e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c812:	613b      	str	r3, [r7, #16]
 800c814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c816:	2300      	movs	r3, #0
 800c818:	60fb      	str	r3, [r7, #12]
 800c81a:	4b39      	ldr	r3, [pc, #228]	; (800c900 <HAL_ADC_MspInit+0x3c4>)
 800c81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c81e:	4a38      	ldr	r2, [pc, #224]	; (800c900 <HAL_ADC_MspInit+0x3c4>)
 800c820:	f043 0304 	orr.w	r3, r3, #4
 800c824:	6313      	str	r3, [r2, #48]	; 0x30
 800c826:	4b36      	ldr	r3, [pc, #216]	; (800c900 <HAL_ADC_MspInit+0x3c4>)
 800c828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c82a:	f003 0304 	and.w	r3, r3, #4
 800c82e:	60fb      	str	r3, [r7, #12]
 800c830:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c832:	2300      	movs	r3, #0
 800c834:	60bb      	str	r3, [r7, #8]
 800c836:	4b32      	ldr	r3, [pc, #200]	; (800c900 <HAL_ADC_MspInit+0x3c4>)
 800c838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c83a:	4a31      	ldr	r2, [pc, #196]	; (800c900 <HAL_ADC_MspInit+0x3c4>)
 800c83c:	f043 0301 	orr.w	r3, r3, #1
 800c840:	6313      	str	r3, [r2, #48]	; 0x30
 800c842:	4b2f      	ldr	r3, [pc, #188]	; (800c900 <HAL_ADC_MspInit+0x3c4>)
 800c844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c846:	f003 0301 	and.w	r3, r3, #1
 800c84a:	60bb      	str	r3, [r7, #8]
 800c84c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c84e:	2308      	movs	r3, #8
 800c850:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c852:	2303      	movs	r3, #3
 800c854:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c856:	2300      	movs	r3, #0
 800c858:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c85a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c85e:	4619      	mov	r1, r3
 800c860:	4828      	ldr	r0, [pc, #160]	; (800c904 <HAL_ADC_MspInit+0x3c8>)
 800c862:	f7f6 fd99 	bl	8003398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c866:	2308      	movs	r3, #8
 800c868:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c86a:	2303      	movs	r3, #3
 800c86c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c86e:	2300      	movs	r3, #0
 800c870:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c872:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c876:	4619      	mov	r1, r3
 800c878:	4823      	ldr	r0, [pc, #140]	; (800c908 <HAL_ADC_MspInit+0x3cc>)
 800c87a:	f7f6 fd8d 	bl	8003398 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800c87e:	4b23      	ldr	r3, [pc, #140]	; (800c90c <HAL_ADC_MspInit+0x3d0>)
 800c880:	4a23      	ldr	r2, [pc, #140]	; (800c910 <HAL_ADC_MspInit+0x3d4>)
 800c882:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800c884:	4b21      	ldr	r3, [pc, #132]	; (800c90c <HAL_ADC_MspInit+0x3d0>)
 800c886:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c88a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c88c:	4b1f      	ldr	r3, [pc, #124]	; (800c90c <HAL_ADC_MspInit+0x3d0>)
 800c88e:	2200      	movs	r2, #0
 800c890:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800c892:	4b1e      	ldr	r3, [pc, #120]	; (800c90c <HAL_ADC_MspInit+0x3d0>)
 800c894:	2200      	movs	r2, #0
 800c896:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800c898:	4b1c      	ldr	r3, [pc, #112]	; (800c90c <HAL_ADC_MspInit+0x3d0>)
 800c89a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c89e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c8a0:	4b1a      	ldr	r3, [pc, #104]	; (800c90c <HAL_ADC_MspInit+0x3d0>)
 800c8a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c8a6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c8a8:	4b18      	ldr	r3, [pc, #96]	; (800c90c <HAL_ADC_MspInit+0x3d0>)
 800c8aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c8ae:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800c8b0:	4b16      	ldr	r3, [pc, #88]	; (800c90c <HAL_ADC_MspInit+0x3d0>)
 800c8b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8b6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800c8b8:	4b14      	ldr	r3, [pc, #80]	; (800c90c <HAL_ADC_MspInit+0x3d0>)
 800c8ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c8be:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c8c0:	4b12      	ldr	r3, [pc, #72]	; (800c90c <HAL_ADC_MspInit+0x3d0>)
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800c8c6:	4811      	ldr	r0, [pc, #68]	; (800c90c <HAL_ADC_MspInit+0x3d0>)
 800c8c8:	f7f6 f982 	bl	8002bd0 <HAL_DMA_Init>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d001      	beq.n	800c8d6 <HAL_ADC_MspInit+0x39a>
      Error_Handler();
 800c8d2:	f7ff fe03 	bl	800c4dc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4a0c      	ldr	r2, [pc, #48]	; (800c90c <HAL_ADC_MspInit+0x3d0>)
 800c8da:	639a      	str	r2, [r3, #56]	; 0x38
 800c8dc:	4a0b      	ldr	r2, [pc, #44]	; (800c90c <HAL_ADC_MspInit+0x3d0>)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	2012      	movs	r0, #18
 800c8e8:	f7f6 f93b 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c8ec:	2012      	movs	r0, #18
 800c8ee:	f7f6 f954 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 800c8f2:	bf00      	nop
 800c8f4:	3748      	adds	r7, #72	; 0x48
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	40012200 	.word	0x40012200
 800c900:	40023800 	.word	0x40023800
 800c904:	40020800 	.word	0x40020800
 800c908:	40020000 	.word	0x40020000
 800c90c:	20000aa8 	.word	0x20000aa8
 800c910:	40026428 	.word	0x40026428

0800c914 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b08a      	sub	sp, #40	; 0x28
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c91c:	f107 0314 	add.w	r3, r7, #20
 800c920:	2200      	movs	r2, #0
 800c922:	601a      	str	r2, [r3, #0]
 800c924:	605a      	str	r2, [r3, #4]
 800c926:	609a      	str	r2, [r3, #8]
 800c928:	60da      	str	r2, [r3, #12]
 800c92a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a1d      	ldr	r2, [pc, #116]	; (800c9a8 <HAL_CAN_MspInit+0x94>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d133      	bne.n	800c99e <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800c936:	2300      	movs	r3, #0
 800c938:	613b      	str	r3, [r7, #16]
 800c93a:	4b1c      	ldr	r3, [pc, #112]	; (800c9ac <HAL_CAN_MspInit+0x98>)
 800c93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c93e:	4a1b      	ldr	r2, [pc, #108]	; (800c9ac <HAL_CAN_MspInit+0x98>)
 800c940:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c944:	6413      	str	r3, [r2, #64]	; 0x40
 800c946:	4b19      	ldr	r3, [pc, #100]	; (800c9ac <HAL_CAN_MspInit+0x98>)
 800c948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c94e:	613b      	str	r3, [r7, #16]
 800c950:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c952:	2300      	movs	r3, #0
 800c954:	60fb      	str	r3, [r7, #12]
 800c956:	4b15      	ldr	r3, [pc, #84]	; (800c9ac <HAL_CAN_MspInit+0x98>)
 800c958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c95a:	4a14      	ldr	r2, [pc, #80]	; (800c9ac <HAL_CAN_MspInit+0x98>)
 800c95c:	f043 0308 	orr.w	r3, r3, #8
 800c960:	6313      	str	r3, [r2, #48]	; 0x30
 800c962:	4b12      	ldr	r3, [pc, #72]	; (800c9ac <HAL_CAN_MspInit+0x98>)
 800c964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c966:	f003 0308 	and.w	r3, r3, #8
 800c96a:	60fb      	str	r3, [r7, #12]
 800c96c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800c96e:	2303      	movs	r3, #3
 800c970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c972:	2302      	movs	r3, #2
 800c974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c976:	2300      	movs	r3, #0
 800c978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c97a:	2303      	movs	r3, #3
 800c97c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800c97e:	2309      	movs	r3, #9
 800c980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c982:	f107 0314 	add.w	r3, r7, #20
 800c986:	4619      	mov	r1, r3
 800c988:	4809      	ldr	r0, [pc, #36]	; (800c9b0 <HAL_CAN_MspInit+0x9c>)
 800c98a:	f7f6 fd05 	bl	8003398 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800c98e:	2200      	movs	r2, #0
 800c990:	2100      	movs	r1, #0
 800c992:	2014      	movs	r0, #20
 800c994:	f7f6 f8e5 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800c998:	2014      	movs	r0, #20
 800c99a:	f7f6 f8fe 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800c99e:	bf00      	nop
 800c9a0:	3728      	adds	r7, #40	; 0x28
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	40006400 	.word	0x40006400
 800c9ac:	40023800 	.word	0x40023800
 800c9b0:	40020c00 	.word	0x40020c00

0800c9b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b08c      	sub	sp, #48	; 0x30
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9bc:	f107 031c 	add.w	r3, r7, #28
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	601a      	str	r2, [r3, #0]
 800c9c4:	605a      	str	r2, [r3, #4]
 800c9c6:	609a      	str	r2, [r3, #8]
 800c9c8:	60da      	str	r2, [r3, #12]
 800c9ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a32      	ldr	r2, [pc, #200]	; (800ca9c <HAL_I2C_MspInit+0xe8>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d12c      	bne.n	800ca30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	61bb      	str	r3, [r7, #24]
 800c9da:	4b31      	ldr	r3, [pc, #196]	; (800caa0 <HAL_I2C_MspInit+0xec>)
 800c9dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9de:	4a30      	ldr	r2, [pc, #192]	; (800caa0 <HAL_I2C_MspInit+0xec>)
 800c9e0:	f043 0302 	orr.w	r3, r3, #2
 800c9e4:	6313      	str	r3, [r2, #48]	; 0x30
 800c9e6:	4b2e      	ldr	r3, [pc, #184]	; (800caa0 <HAL_I2C_MspInit+0xec>)
 800c9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ea:	f003 0302 	and.w	r3, r3, #2
 800c9ee:	61bb      	str	r3, [r7, #24]
 800c9f0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c9f2:	23c0      	movs	r3, #192	; 0xc0
 800c9f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c9f6:	2312      	movs	r3, #18
 800c9f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9fe:	2303      	movs	r3, #3
 800ca00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ca02:	2304      	movs	r3, #4
 800ca04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca06:	f107 031c 	add.w	r3, r7, #28
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	4825      	ldr	r0, [pc, #148]	; (800caa4 <HAL_I2C_MspInit+0xf0>)
 800ca0e:	f7f6 fcc3 	bl	8003398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ca12:	2300      	movs	r3, #0
 800ca14:	617b      	str	r3, [r7, #20]
 800ca16:	4b22      	ldr	r3, [pc, #136]	; (800caa0 <HAL_I2C_MspInit+0xec>)
 800ca18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca1a:	4a21      	ldr	r2, [pc, #132]	; (800caa0 <HAL_I2C_MspInit+0xec>)
 800ca1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca20:	6413      	str	r3, [r2, #64]	; 0x40
 800ca22:	4b1f      	ldr	r3, [pc, #124]	; (800caa0 <HAL_I2C_MspInit+0xec>)
 800ca24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca2a:	617b      	str	r3, [r7, #20]
 800ca2c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800ca2e:	e031      	b.n	800ca94 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a1c      	ldr	r2, [pc, #112]	; (800caa8 <HAL_I2C_MspInit+0xf4>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d12c      	bne.n	800ca94 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	613b      	str	r3, [r7, #16]
 800ca3e:	4b18      	ldr	r3, [pc, #96]	; (800caa0 <HAL_I2C_MspInit+0xec>)
 800ca40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca42:	4a17      	ldr	r2, [pc, #92]	; (800caa0 <HAL_I2C_MspInit+0xec>)
 800ca44:	f043 0302 	orr.w	r3, r3, #2
 800ca48:	6313      	str	r3, [r2, #48]	; 0x30
 800ca4a:	4b15      	ldr	r3, [pc, #84]	; (800caa0 <HAL_I2C_MspInit+0xec>)
 800ca4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca4e:	f003 0302 	and.w	r3, r3, #2
 800ca52:	613b      	str	r3, [r7, #16]
 800ca54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800ca56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ca5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ca5c:	2312      	movs	r3, #18
 800ca5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ca60:	2301      	movs	r3, #1
 800ca62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca64:	2303      	movs	r3, #3
 800ca66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800ca68:	2304      	movs	r3, #4
 800ca6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca6c:	f107 031c 	add.w	r3, r7, #28
 800ca70:	4619      	mov	r1, r3
 800ca72:	480c      	ldr	r0, [pc, #48]	; (800caa4 <HAL_I2C_MspInit+0xf0>)
 800ca74:	f7f6 fc90 	bl	8003398 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800ca78:	2300      	movs	r3, #0
 800ca7a:	60fb      	str	r3, [r7, #12]
 800ca7c:	4b08      	ldr	r3, [pc, #32]	; (800caa0 <HAL_I2C_MspInit+0xec>)
 800ca7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca80:	4a07      	ldr	r2, [pc, #28]	; (800caa0 <HAL_I2C_MspInit+0xec>)
 800ca82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ca86:	6413      	str	r3, [r2, #64]	; 0x40
 800ca88:	4b05      	ldr	r3, [pc, #20]	; (800caa0 <HAL_I2C_MspInit+0xec>)
 800ca8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca90:	60fb      	str	r3, [r7, #12]
 800ca92:	68fb      	ldr	r3, [r7, #12]
}
 800ca94:	bf00      	nop
 800ca96:	3730      	adds	r7, #48	; 0x30
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	40005400 	.word	0x40005400
 800caa0:	40023800 	.word	0x40023800
 800caa4:	40020400 	.word	0x40020400
 800caa8:	40005800 	.word	0x40005800

0800caac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a05      	ldr	r2, [pc, #20]	; (800cad0 <HAL_RTC_MspInit+0x24>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d102      	bne.n	800cac4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800cabe:	4b05      	ldr	r3, [pc, #20]	; (800cad4 <HAL_RTC_MspInit+0x28>)
 800cac0:	2201      	movs	r2, #1
 800cac2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800cac4:	bf00      	nop
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr
 800cad0:	40002800 	.word	0x40002800
 800cad4:	42470e3c 	.word	0x42470e3c

0800cad8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b08a      	sub	sp, #40	; 0x28
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cae0:	f107 0314 	add.w	r3, r7, #20
 800cae4:	2200      	movs	r2, #0
 800cae6:	601a      	str	r2, [r3, #0]
 800cae8:	605a      	str	r2, [r3, #4]
 800caea:	609a      	str	r2, [r3, #8]
 800caec:	60da      	str	r2, [r3, #12]
 800caee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a1d      	ldr	r2, [pc, #116]	; (800cb6c <HAL_SPI_MspInit+0x94>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d134      	bne.n	800cb64 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800cafa:	2300      	movs	r3, #0
 800cafc:	613b      	str	r3, [r7, #16]
 800cafe:	4b1c      	ldr	r3, [pc, #112]	; (800cb70 <HAL_SPI_MspInit+0x98>)
 800cb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb02:	4a1b      	ldr	r2, [pc, #108]	; (800cb70 <HAL_SPI_MspInit+0x98>)
 800cb04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cb08:	6413      	str	r3, [r2, #64]	; 0x40
 800cb0a:	4b19      	ldr	r3, [pc, #100]	; (800cb70 <HAL_SPI_MspInit+0x98>)
 800cb0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb12:	613b      	str	r3, [r7, #16]
 800cb14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb16:	2300      	movs	r3, #0
 800cb18:	60fb      	str	r3, [r7, #12]
 800cb1a:	4b15      	ldr	r3, [pc, #84]	; (800cb70 <HAL_SPI_MspInit+0x98>)
 800cb1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb1e:	4a14      	ldr	r2, [pc, #80]	; (800cb70 <HAL_SPI_MspInit+0x98>)
 800cb20:	f043 0302 	orr.w	r3, r3, #2
 800cb24:	6313      	str	r3, [r2, #48]	; 0x30
 800cb26:	4b12      	ldr	r3, [pc, #72]	; (800cb70 <HAL_SPI_MspInit+0x98>)
 800cb28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb2a:	f003 0302 	and.w	r3, r3, #2
 800cb2e:	60fb      	str	r3, [r7, #12]
 800cb30:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800cb32:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800cb36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb38:	2302      	movs	r3, #2
 800cb3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb40:	2303      	movs	r3, #3
 800cb42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800cb44:	2305      	movs	r3, #5
 800cb46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cb48:	f107 0314 	add.w	r3, r7, #20
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	4809      	ldr	r0, [pc, #36]	; (800cb74 <HAL_SPI_MspInit+0x9c>)
 800cb50:	f7f6 fc22 	bl	8003398 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800cb54:	2200      	movs	r2, #0
 800cb56:	2100      	movs	r1, #0
 800cb58:	2024      	movs	r0, #36	; 0x24
 800cb5a:	f7f6 f802 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800cb5e:	2024      	movs	r0, #36	; 0x24
 800cb60:	f7f6 f81b 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800cb64:	bf00      	nop
 800cb66:	3728      	adds	r7, #40	; 0x28
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	40003800 	.word	0x40003800
 800cb70:	40023800 	.word	0x40023800
 800cb74:	40020400 	.word	0x40020400

0800cb78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b090      	sub	sp, #64	; 0x40
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cb84:	2200      	movs	r2, #0
 800cb86:	601a      	str	r2, [r3, #0]
 800cb88:	605a      	str	r2, [r3, #4]
 800cb8a:	609a      	str	r2, [r3, #8]
 800cb8c:	60da      	str	r2, [r3, #12]
 800cb8e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4a87      	ldr	r2, [pc, #540]	; (800cdb4 <HAL_TIM_Base_MspInit+0x23c>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d12e      	bne.n	800cbf8 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb9e:	4b86      	ldr	r3, [pc, #536]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cba2:	4a85      	ldr	r2, [pc, #532]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cba4:	f043 0301 	orr.w	r3, r3, #1
 800cba8:	6453      	str	r3, [r2, #68]	; 0x44
 800cbaa:	4b83      	ldr	r3, [pc, #524]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cbac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbae:	f003 0301 	and.w	r3, r3, #1
 800cbb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	2100      	movs	r1, #0
 800cbba:	2018      	movs	r0, #24
 800cbbc:	f7f5 ffd1 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800cbc0:	2018      	movs	r0, #24
 800cbc2:	f7f5 ffea 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	2100      	movs	r1, #0
 800cbca:	2019      	movs	r0, #25
 800cbcc:	f7f5 ffc9 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800cbd0:	2019      	movs	r0, #25
 800cbd2:	f7f5 ffe2 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	2100      	movs	r1, #0
 800cbda:	201a      	movs	r0, #26
 800cbdc:	f7f5 ffc1 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800cbe0:	201a      	movs	r0, #26
 800cbe2:	f7f5 ffda 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	2100      	movs	r1, #0
 800cbea:	201b      	movs	r0, #27
 800cbec:	f7f5 ffb9 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800cbf0:	201b      	movs	r0, #27
 800cbf2:	f7f5 ffd2 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800cbf6:	e0d8      	b.n	800cdaa <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM2)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc00:	d10e      	bne.n	800cc20 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800cc02:	2300      	movs	r3, #0
 800cc04:	627b      	str	r3, [r7, #36]	; 0x24
 800cc06:	4b6c      	ldr	r3, [pc, #432]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc0a:	4a6b      	ldr	r2, [pc, #428]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cc0c:	f043 0301 	orr.w	r3, r3, #1
 800cc10:	6413      	str	r3, [r2, #64]	; 0x40
 800cc12:	4b69      	ldr	r3, [pc, #420]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cc14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc16:	f003 0301 	and.w	r3, r3, #1
 800cc1a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc1e:	e0c4      	b.n	800cdaa <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM3)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4a65      	ldr	r2, [pc, #404]	; (800cdbc <HAL_TIM_Base_MspInit+0x244>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d116      	bne.n	800cc58 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	623b      	str	r3, [r7, #32]
 800cc2e:	4b62      	ldr	r3, [pc, #392]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc32:	4a61      	ldr	r2, [pc, #388]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cc34:	f043 0302 	orr.w	r3, r3, #2
 800cc38:	6413      	str	r3, [r2, #64]	; 0x40
 800cc3a:	4b5f      	ldr	r3, [pc, #380]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc3e:	f003 0302 	and.w	r3, r3, #2
 800cc42:	623b      	str	r3, [r7, #32]
 800cc44:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800cc46:	2200      	movs	r2, #0
 800cc48:	2100      	movs	r1, #0
 800cc4a:	201d      	movs	r0, #29
 800cc4c:	f7f5 ff89 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800cc50:	201d      	movs	r0, #29
 800cc52:	f7f5 ffa2 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 800cc56:	e0a8      	b.n	800cdaa <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM5)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a58      	ldr	r2, [pc, #352]	; (800cdc0 <HAL_TIM_Base_MspInit+0x248>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d116      	bne.n	800cc90 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800cc62:	2300      	movs	r3, #0
 800cc64:	61fb      	str	r3, [r7, #28]
 800cc66:	4b54      	ldr	r3, [pc, #336]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cc68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc6a:	4a53      	ldr	r2, [pc, #332]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cc6c:	f043 0308 	orr.w	r3, r3, #8
 800cc70:	6413      	str	r3, [r2, #64]	; 0x40
 800cc72:	4b51      	ldr	r3, [pc, #324]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc76:	f003 0308 	and.w	r3, r3, #8
 800cc7a:	61fb      	str	r3, [r7, #28]
 800cc7c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800cc7e:	2200      	movs	r2, #0
 800cc80:	2100      	movs	r1, #0
 800cc82:	2032      	movs	r0, #50	; 0x32
 800cc84:	f7f5 ff6d 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800cc88:	2032      	movs	r0, #50	; 0x32
 800cc8a:	f7f5 ff86 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 800cc8e:	e08c      	b.n	800cdaa <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM6)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a4b      	ldr	r2, [pc, #300]	; (800cdc4 <HAL_TIM_Base_MspInit+0x24c>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d116      	bne.n	800ccc8 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	61bb      	str	r3, [r7, #24]
 800cc9e:	4b46      	ldr	r3, [pc, #280]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cca2:	4a45      	ldr	r2, [pc, #276]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cca4:	f043 0310 	orr.w	r3, r3, #16
 800cca8:	6413      	str	r3, [r2, #64]	; 0x40
 800ccaa:	4b43      	ldr	r3, [pc, #268]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800ccac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccae:	f003 0310 	and.w	r3, r3, #16
 800ccb2:	61bb      	str	r3, [r7, #24]
 800ccb4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	2100      	movs	r1, #0
 800ccba:	2036      	movs	r0, #54	; 0x36
 800ccbc:	f7f5 ff51 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ccc0:	2036      	movs	r0, #54	; 0x36
 800ccc2:	f7f5 ff6a 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 800ccc6:	e070      	b.n	800cdaa <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM9)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a3e      	ldr	r2, [pc, #248]	; (800cdc8 <HAL_TIM_Base_MspInit+0x250>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d116      	bne.n	800cd00 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	617b      	str	r3, [r7, #20]
 800ccd6:	4b38      	ldr	r3, [pc, #224]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800ccd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccda:	4a37      	ldr	r2, [pc, #220]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800ccdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cce0:	6453      	str	r3, [r2, #68]	; 0x44
 800cce2:	4b35      	ldr	r3, [pc, #212]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ccea:	617b      	str	r3, [r7, #20]
 800ccec:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800ccee:	2200      	movs	r2, #0
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	2018      	movs	r0, #24
 800ccf4:	f7f5 ff35 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800ccf8:	2018      	movs	r0, #24
 800ccfa:	f7f5 ff4e 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 800ccfe:	e054      	b.n	800cdaa <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM12)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a31      	ldr	r2, [pc, #196]	; (800cdcc <HAL_TIM_Base_MspInit+0x254>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d116      	bne.n	800cd38 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	613b      	str	r3, [r7, #16]
 800cd0e:	4b2a      	ldr	r3, [pc, #168]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cd10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd12:	4a29      	ldr	r2, [pc, #164]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cd14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd18:	6413      	str	r3, [r2, #64]	; 0x40
 800cd1a:	4b27      	ldr	r3, [pc, #156]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd22:	613b      	str	r3, [r7, #16]
 800cd24:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800cd26:	2200      	movs	r2, #0
 800cd28:	2100      	movs	r1, #0
 800cd2a:	202b      	movs	r0, #43	; 0x2b
 800cd2c:	f7f5 ff19 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800cd30:	202b      	movs	r0, #43	; 0x2b
 800cd32:	f7f5 ff32 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 800cd36:	e038      	b.n	800cdaa <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM13)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a24      	ldr	r2, [pc, #144]	; (800cdd0 <HAL_TIM_Base_MspInit+0x258>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d133      	bne.n	800cdaa <HAL_TIM_Base_MspInit+0x232>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800cd42:	2300      	movs	r3, #0
 800cd44:	60fb      	str	r3, [r7, #12]
 800cd46:	4b1c      	ldr	r3, [pc, #112]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cd48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd4a:	4a1b      	ldr	r2, [pc, #108]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cd4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd50:	6413      	str	r3, [r2, #64]	; 0x40
 800cd52:	4b19      	ldr	r3, [pc, #100]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd5a:	60fb      	str	r3, [r7, #12]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd5e:	2300      	movs	r3, #0
 800cd60:	60bb      	str	r3, [r7, #8]
 800cd62:	4b15      	ldr	r3, [pc, #84]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cd64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd66:	4a14      	ldr	r2, [pc, #80]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cd68:	f043 0301 	orr.w	r3, r3, #1
 800cd6c:	6313      	str	r3, [r2, #48]	; 0x30
 800cd6e:	4b12      	ldr	r3, [pc, #72]	; (800cdb8 <HAL_TIM_Base_MspInit+0x240>)
 800cd70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd72:	f003 0301 	and.w	r3, r3, #1
 800cd76:	60bb      	str	r3, [r7, #8]
 800cd78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800cd7a:	2340      	movs	r3, #64	; 0x40
 800cd7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd7e:	2302      	movs	r3, #2
 800cd80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd82:	2300      	movs	r3, #0
 800cd84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd86:	2300      	movs	r3, #0
 800cd88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800cd8a:	2309      	movs	r3, #9
 800cd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cd92:	4619      	mov	r1, r3
 800cd94:	480f      	ldr	r0, [pc, #60]	; (800cdd4 <HAL_TIM_Base_MspInit+0x25c>)
 800cd96:	f7f6 faff 	bl	8003398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	202c      	movs	r0, #44	; 0x2c
 800cda0:	f7f5 fedf 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800cda4:	202c      	movs	r0, #44	; 0x2c
 800cda6:	f7f5 fef8 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 800cdaa:	bf00      	nop
 800cdac:	3740      	adds	r7, #64	; 0x40
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	40010000 	.word	0x40010000
 800cdb8:	40023800 	.word	0x40023800
 800cdbc:	40000400 	.word	0x40000400
 800cdc0:	40000c00 	.word	0x40000c00
 800cdc4:	40001000 	.word	0x40001000
 800cdc8:	40014000 	.word	0x40014000
 800cdcc:	40001800 	.word	0x40001800
 800cdd0:	40001c00 	.word	0x40001c00
 800cdd4:	40020000 	.word	0x40020000

0800cdd8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b08a      	sub	sp, #40	; 0x28
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cde0:	f107 0314 	add.w	r3, r7, #20
 800cde4:	2200      	movs	r2, #0
 800cde6:	601a      	str	r2, [r3, #0]
 800cde8:	605a      	str	r2, [r3, #4]
 800cdea:	609a      	str	r2, [r3, #8]
 800cdec:	60da      	str	r2, [r3, #12]
 800cdee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a29      	ldr	r2, [pc, #164]	; (800ce9c <HAL_TIM_Encoder_MspInit+0xc4>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d14b      	bne.n	800ce92 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	613b      	str	r3, [r7, #16]
 800cdfe:	4b28      	ldr	r3, [pc, #160]	; (800cea0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800ce00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce02:	4a27      	ldr	r2, [pc, #156]	; (800cea0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800ce04:	f043 0302 	orr.w	r3, r3, #2
 800ce08:	6453      	str	r3, [r2, #68]	; 0x44
 800ce0a:	4b25      	ldr	r3, [pc, #148]	; (800cea0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800ce0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce0e:	f003 0302 	and.w	r3, r3, #2
 800ce12:	613b      	str	r3, [r7, #16]
 800ce14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ce16:	2300      	movs	r3, #0
 800ce18:	60fb      	str	r3, [r7, #12]
 800ce1a:	4b21      	ldr	r3, [pc, #132]	; (800cea0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800ce1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce1e:	4a20      	ldr	r2, [pc, #128]	; (800cea0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800ce20:	f043 0304 	orr.w	r3, r3, #4
 800ce24:	6313      	str	r3, [r2, #48]	; 0x30
 800ce26:	4b1e      	ldr	r3, [pc, #120]	; (800cea0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800ce28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce2a:	f003 0304 	and.w	r3, r3, #4
 800ce2e:	60fb      	str	r3, [r7, #12]
 800ce30:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ce32:	23c0      	movs	r3, #192	; 0xc0
 800ce34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce36:	2302      	movs	r3, #2
 800ce38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800ce42:	2303      	movs	r3, #3
 800ce44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ce46:	f107 0314 	add.w	r3, r7, #20
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	4815      	ldr	r0, [pc, #84]	; (800cea4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800ce4e:	f7f6 faa3 	bl	8003398 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800ce52:	2200      	movs	r2, #0
 800ce54:	2100      	movs	r1, #0
 800ce56:	202b      	movs	r0, #43	; 0x2b
 800ce58:	f7f5 fe83 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800ce5c:	202b      	movs	r0, #43	; 0x2b
 800ce5e:	f7f5 fe9c 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800ce62:	2200      	movs	r2, #0
 800ce64:	2100      	movs	r1, #0
 800ce66:	202c      	movs	r0, #44	; 0x2c
 800ce68:	f7f5 fe7b 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800ce6c:	202c      	movs	r0, #44	; 0x2c
 800ce6e:	f7f5 fe94 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800ce72:	2200      	movs	r2, #0
 800ce74:	2100      	movs	r1, #0
 800ce76:	202d      	movs	r0, #45	; 0x2d
 800ce78:	f7f5 fe73 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800ce7c:	202d      	movs	r0, #45	; 0x2d
 800ce7e:	f7f5 fe8c 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800ce82:	2200      	movs	r2, #0
 800ce84:	2100      	movs	r1, #0
 800ce86:	202e      	movs	r0, #46	; 0x2e
 800ce88:	f7f5 fe6b 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800ce8c:	202e      	movs	r0, #46	; 0x2e
 800ce8e:	f7f5 fe84 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800ce92:	bf00      	nop
 800ce94:	3728      	adds	r7, #40	; 0x28
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	40010400 	.word	0x40010400
 800cea0:	40023800 	.word	0x40023800
 800cea4:	40020800 	.word	0x40020800

0800cea8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b08a      	sub	sp, #40	; 0x28
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ceb0:	f107 0314 	add.w	r3, r7, #20
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	601a      	str	r2, [r3, #0]
 800ceb8:	605a      	str	r2, [r3, #4]
 800ceba:	609a      	str	r2, [r3, #8]
 800cebc:	60da      	str	r2, [r3, #12]
 800cebe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a24      	ldr	r2, [pc, #144]	; (800cf58 <HAL_TIM_MspPostInit+0xb0>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d11f      	bne.n	800cf0a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800ceca:	2300      	movs	r3, #0
 800cecc:	613b      	str	r3, [r7, #16]
 800cece:	4b23      	ldr	r3, [pc, #140]	; (800cf5c <HAL_TIM_MspPostInit+0xb4>)
 800ced0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ced2:	4a22      	ldr	r2, [pc, #136]	; (800cf5c <HAL_TIM_MspPostInit+0xb4>)
 800ced4:	f043 0310 	orr.w	r3, r3, #16
 800ced8:	6313      	str	r3, [r2, #48]	; 0x30
 800ceda:	4b20      	ldr	r3, [pc, #128]	; (800cf5c <HAL_TIM_MspPostInit+0xb4>)
 800cedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cede:	f003 0310 	and.w	r3, r3, #16
 800cee2:	613b      	str	r3, [r7, #16]
 800cee4:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800cee6:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 800ceea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ceec:	2302      	movs	r3, #2
 800ceee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cef0:	2300      	movs	r3, #0
 800cef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cef4:	2300      	movs	r3, #0
 800cef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800cef8:	2301      	movs	r3, #1
 800cefa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cefc:	f107 0314 	add.w	r3, r7, #20
 800cf00:	4619      	mov	r1, r3
 800cf02:	4817      	ldr	r0, [pc, #92]	; (800cf60 <HAL_TIM_MspPostInit+0xb8>)
 800cf04:	f7f6 fa48 	bl	8003398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800cf08:	e022      	b.n	800cf50 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	4a15      	ldr	r2, [pc, #84]	; (800cf64 <HAL_TIM_MspPostInit+0xbc>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d11d      	bne.n	800cf50 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800cf14:	2300      	movs	r3, #0
 800cf16:	60fb      	str	r3, [r7, #12]
 800cf18:	4b10      	ldr	r3, [pc, #64]	; (800cf5c <HAL_TIM_MspPostInit+0xb4>)
 800cf1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf1c:	4a0f      	ldr	r2, [pc, #60]	; (800cf5c <HAL_TIM_MspPostInit+0xb4>)
 800cf1e:	f043 0310 	orr.w	r3, r3, #16
 800cf22:	6313      	str	r3, [r2, #48]	; 0x30
 800cf24:	4b0d      	ldr	r3, [pc, #52]	; (800cf5c <HAL_TIM_MspPostInit+0xb4>)
 800cf26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf28:	f003 0310 	and.w	r3, r3, #16
 800cf2c:	60fb      	str	r3, [r7, #12]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800cf30:	2360      	movs	r3, #96	; 0x60
 800cf32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf34:	2302      	movs	r3, #2
 800cf36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800cf40:	2303      	movs	r3, #3
 800cf42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cf44:	f107 0314 	add.w	r3, r7, #20
 800cf48:	4619      	mov	r1, r3
 800cf4a:	4805      	ldr	r0, [pc, #20]	; (800cf60 <HAL_TIM_MspPostInit+0xb8>)
 800cf4c:	f7f6 fa24 	bl	8003398 <HAL_GPIO_Init>
}
 800cf50:	bf00      	nop
 800cf52:	3728      	adds	r7, #40	; 0x28
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}
 800cf58:	40010000 	.word	0x40010000
 800cf5c:	40023800 	.word	0x40023800
 800cf60:	40021000 	.word	0x40021000
 800cf64:	40014000 	.word	0x40014000

0800cf68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b08a      	sub	sp, #40	; 0x28
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf70:	f107 0314 	add.w	r3, r7, #20
 800cf74:	2200      	movs	r2, #0
 800cf76:	601a      	str	r2, [r3, #0]
 800cf78:	605a      	str	r2, [r3, #4]
 800cf7a:	609a      	str	r2, [r3, #8]
 800cf7c:	60da      	str	r2, [r3, #12]
 800cf7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a34      	ldr	r2, [pc, #208]	; (800d058 <HAL_UART_MspInit+0xf0>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d162      	bne.n	800d050 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	613b      	str	r3, [r7, #16]
 800cf8e:	4b33      	ldr	r3, [pc, #204]	; (800d05c <HAL_UART_MspInit+0xf4>)
 800cf90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf92:	4a32      	ldr	r2, [pc, #200]	; (800d05c <HAL_UART_MspInit+0xf4>)
 800cf94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cf98:	6413      	str	r3, [r2, #64]	; 0x40
 800cf9a:	4b30      	ldr	r3, [pc, #192]	; (800d05c <HAL_UART_MspInit+0xf4>)
 800cf9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cfa2:	613b      	str	r3, [r7, #16]
 800cfa4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	60fb      	str	r3, [r7, #12]
 800cfaa:	4b2c      	ldr	r3, [pc, #176]	; (800d05c <HAL_UART_MspInit+0xf4>)
 800cfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfae:	4a2b      	ldr	r2, [pc, #172]	; (800d05c <HAL_UART_MspInit+0xf4>)
 800cfb0:	f043 0308 	orr.w	r3, r3, #8
 800cfb4:	6313      	str	r3, [r2, #48]	; 0x30
 800cfb6:	4b29      	ldr	r3, [pc, #164]	; (800d05c <HAL_UART_MspInit+0xf4>)
 800cfb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfba:	f003 0308 	and.w	r3, r3, #8
 800cfbe:	60fb      	str	r3, [r7, #12]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800cfc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cfc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfc8:	2302      	movs	r3, #2
 800cfca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cfd0:	2303      	movs	r3, #3
 800cfd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800cfd4:	2307      	movs	r3, #7
 800cfd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cfd8:	f107 0314 	add.w	r3, r7, #20
 800cfdc:	4619      	mov	r1, r3
 800cfde:	4820      	ldr	r0, [pc, #128]	; (800d060 <HAL_UART_MspInit+0xf8>)
 800cfe0:	f7f6 f9da 	bl	8003398 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800cfe4:	4b1f      	ldr	r3, [pc, #124]	; (800d064 <HAL_UART_MspInit+0xfc>)
 800cfe6:	4a20      	ldr	r2, [pc, #128]	; (800d068 <HAL_UART_MspInit+0x100>)
 800cfe8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800cfea:	4b1e      	ldr	r3, [pc, #120]	; (800d064 <HAL_UART_MspInit+0xfc>)
 800cfec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cff0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cff2:	4b1c      	ldr	r3, [pc, #112]	; (800d064 <HAL_UART_MspInit+0xfc>)
 800cff4:	2240      	movs	r2, #64	; 0x40
 800cff6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cff8:	4b1a      	ldr	r3, [pc, #104]	; (800d064 <HAL_UART_MspInit+0xfc>)
 800cffa:	2200      	movs	r2, #0
 800cffc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800cffe:	4b19      	ldr	r3, [pc, #100]	; (800d064 <HAL_UART_MspInit+0xfc>)
 800d000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d004:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d006:	4b17      	ldr	r3, [pc, #92]	; (800d064 <HAL_UART_MspInit+0xfc>)
 800d008:	2200      	movs	r2, #0
 800d00a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d00c:	4b15      	ldr	r3, [pc, #84]	; (800d064 <HAL_UART_MspInit+0xfc>)
 800d00e:	2200      	movs	r2, #0
 800d010:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800d012:	4b14      	ldr	r3, [pc, #80]	; (800d064 <HAL_UART_MspInit+0xfc>)
 800d014:	2200      	movs	r2, #0
 800d016:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d018:	4b12      	ldr	r3, [pc, #72]	; (800d064 <HAL_UART_MspInit+0xfc>)
 800d01a:	2200      	movs	r2, #0
 800d01c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d01e:	4b11      	ldr	r3, [pc, #68]	; (800d064 <HAL_UART_MspInit+0xfc>)
 800d020:	2200      	movs	r2, #0
 800d022:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800d024:	480f      	ldr	r0, [pc, #60]	; (800d064 <HAL_UART_MspInit+0xfc>)
 800d026:	f7f5 fdd3 	bl	8002bd0 <HAL_DMA_Init>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d001      	beq.n	800d034 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800d030:	f7ff fa54 	bl	800c4dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	4a0b      	ldr	r2, [pc, #44]	; (800d064 <HAL_UART_MspInit+0xfc>)
 800d038:	631a      	str	r2, [r3, #48]	; 0x30
 800d03a:	4a0a      	ldr	r2, [pc, #40]	; (800d064 <HAL_UART_MspInit+0xfc>)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800d040:	2200      	movs	r2, #0
 800d042:	2100      	movs	r1, #0
 800d044:	2027      	movs	r0, #39	; 0x27
 800d046:	f7f5 fd8c 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800d04a:	2027      	movs	r0, #39	; 0x27
 800d04c:	f7f5 fda5 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800d050:	bf00      	nop
 800d052:	3728      	adds	r7, #40	; 0x28
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	40004800 	.word	0x40004800
 800d05c:	40023800 	.word	0x40023800
 800d060:	40020c00 	.word	0x40020c00
 800d064:	20000b08 	.word	0x20000b08
 800d068:	40026058 	.word	0x40026058

0800d06c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b08a      	sub	sp, #40	; 0x28
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d074:	f107 0314 	add.w	r3, r7, #20
 800d078:	2200      	movs	r2, #0
 800d07a:	601a      	str	r2, [r3, #0]
 800d07c:	605a      	str	r2, [r3, #4]
 800d07e:	609a      	str	r2, [r3, #8]
 800d080:	60da      	str	r2, [r3, #12]
 800d082:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d08c:	d132      	bne.n	800d0f4 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d08e:	2300      	movs	r3, #0
 800d090:	613b      	str	r3, [r7, #16]
 800d092:	4b1a      	ldr	r3, [pc, #104]	; (800d0fc <HAL_PCD_MspInit+0x90>)
 800d094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d096:	4a19      	ldr	r2, [pc, #100]	; (800d0fc <HAL_PCD_MspInit+0x90>)
 800d098:	f043 0301 	orr.w	r3, r3, #1
 800d09c:	6313      	str	r3, [r2, #48]	; 0x30
 800d09e:	4b17      	ldr	r3, [pc, #92]	; (800d0fc <HAL_PCD_MspInit+0x90>)
 800d0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0a2:	f003 0301 	and.w	r3, r3, #1
 800d0a6:	613b      	str	r3, [r7, #16]
 800d0a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d0aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d0ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0b0:	2302      	movs	r3, #2
 800d0b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0b8:	2303      	movs	r3, #3
 800d0ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d0bc:	230a      	movs	r3, #10
 800d0be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d0c0:	f107 0314 	add.w	r3, r7, #20
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	480e      	ldr	r0, [pc, #56]	; (800d100 <HAL_PCD_MspInit+0x94>)
 800d0c8:	f7f6 f966 	bl	8003398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d0cc:	4b0b      	ldr	r3, [pc, #44]	; (800d0fc <HAL_PCD_MspInit+0x90>)
 800d0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0d0:	4a0a      	ldr	r2, [pc, #40]	; (800d0fc <HAL_PCD_MspInit+0x90>)
 800d0d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0d6:	6353      	str	r3, [r2, #52]	; 0x34
 800d0d8:	2300      	movs	r3, #0
 800d0da:	60fb      	str	r3, [r7, #12]
 800d0dc:	4b07      	ldr	r3, [pc, #28]	; (800d0fc <HAL_PCD_MspInit+0x90>)
 800d0de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0e0:	4a06      	ldr	r2, [pc, #24]	; (800d0fc <HAL_PCD_MspInit+0x90>)
 800d0e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d0e6:	6453      	str	r3, [r2, #68]	; 0x44
 800d0e8:	4b04      	ldr	r3, [pc, #16]	; (800d0fc <HAL_PCD_MspInit+0x90>)
 800d0ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0f0:	60fb      	str	r3, [r7, #12]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800d0f4:	bf00      	nop
 800d0f6:	3728      	adds	r7, #40	; 0x28
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	40023800 	.word	0x40023800
 800d100:	40020000 	.word	0x40020000

0800d104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d104:	b480      	push	{r7}
 800d106:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d108:	bf00      	nop
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr

0800d112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d112:	b480      	push	{r7}
 800d114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d116:	e7fe      	b.n	800d116 <HardFault_Handler+0x4>

0800d118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d118:	b480      	push	{r7}
 800d11a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d11c:	e7fe      	b.n	800d11c <MemManage_Handler+0x4>

0800d11e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d11e:	b480      	push	{r7}
 800d120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d122:	e7fe      	b.n	800d122 <BusFault_Handler+0x4>

0800d124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d124:	b480      	push	{r7}
 800d126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d128:	e7fe      	b.n	800d128 <UsageFault_Handler+0x4>

0800d12a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d12a:	b480      	push	{r7}
 800d12c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d12e:	bf00      	nop
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d138:	b480      	push	{r7}
 800d13a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d13c:	bf00      	nop
 800d13e:	46bd      	mov	sp, r7
 800d140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d144:	4770      	bx	lr

0800d146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d146:	b480      	push	{r7}
 800d148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d14a:	bf00      	nop
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d158:	f7f3 ff68 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d15c:	bf00      	nop
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800d164:	4802      	ldr	r0, [pc, #8]	; (800d170 <DMA1_Stream3_IRQHandler+0x10>)
 800d166:	f7f5 fe5b 	bl	8002e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800d16a:	bf00      	nop
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	20000b08 	.word	0x20000b08

0800d174 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800d178:	4805      	ldr	r0, [pc, #20]	; (800d190 <ADC_IRQHandler+0x1c>)
 800d17a:	f7f3 ffdc 	bl	8001136 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800d17e:	4805      	ldr	r0, [pc, #20]	; (800d194 <ADC_IRQHandler+0x20>)
 800d180:	f7f3 ffd9 	bl	8001136 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800d184:	4804      	ldr	r0, [pc, #16]	; (800d198 <ADC_IRQHandler+0x24>)
 800d186:	f7f3 ffd6 	bl	8001136 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800d18a:	bf00      	nop
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	20000c2c 	.word	0x20000c2c
 800d194:	200005a4 	.word	0x200005a4
 800d198:	20000c74 	.word	0x20000c74

0800d19c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800d1a0:	4802      	ldr	r0, [pc, #8]	; (800d1ac <CAN1_RX0_IRQHandler+0x10>)
 800d1a2:	f7f5 f9cf 	bl	8002544 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800d1a6:	bf00      	nop
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	20001008 	.word	0x20001008

0800d1b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800d1b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d1b8:	f7f6 fabc 	bl	8003734 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800d1bc:	bf00      	nop
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d1c4:	4803      	ldr	r0, [pc, #12]	; (800d1d4 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800d1c6:	f7f9 fa91 	bl	80066ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800d1ca:	4803      	ldr	r0, [pc, #12]	; (800d1d8 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800d1cc:	f7f9 fa8e 	bl	80066ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800d1d0:	bf00      	nop
 800d1d2:	bd80      	pop	{r7, pc}
 800d1d4:	20000dc0 	.word	0x20000dc0
 800d1d8:	20000e68 	.word	0x20000e68

0800d1dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d1e0:	4802      	ldr	r0, [pc, #8]	; (800d1ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 800d1e2:	f7f9 fa83 	bl	80066ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800d1e6:	bf00      	nop
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	20000dc0 	.word	0x20000dc0

0800d1f0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d1f4:	4802      	ldr	r0, [pc, #8]	; (800d200 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800d1f6:	f7f9 fa79 	bl	80066ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800d1fa:	bf00      	nop
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	20000dc0 	.word	0x20000dc0

0800d204 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d208:	4802      	ldr	r0, [pc, #8]	; (800d214 <TIM1_CC_IRQHandler+0x10>)
 800d20a:	f7f9 fa6f 	bl	80066ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800d20e:	bf00      	nop
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	20000dc0 	.word	0x20000dc0

0800d218 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800d21c:	4802      	ldr	r0, [pc, #8]	; (800d228 <TIM3_IRQHandler+0x10>)
 800d21e:	f7f9 fa65 	bl	80066ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
  /* USER CODE END TIM3_IRQn 1 */
}
 800d222:	bf00      	nop
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	20000bac 	.word	0x20000bac

0800d22c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800d230:	4802      	ldr	r0, [pc, #8]	; (800d23c <SPI2_IRQHandler+0x10>)
 800d232:	f7f8 fdb3 	bl	8005d9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800d236:	bf00      	nop
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	20000184 	.word	0x20000184

0800d240 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800d244:	4802      	ldr	r0, [pc, #8]	; (800d250 <USART3_IRQHandler+0x10>)
 800d246:	f7fa fbff 	bl	8007a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800d24a:	bf00      	nop
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop
 800d250:	20000564 	.word	0x20000564

0800d254 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d258:	4803      	ldr	r0, [pc, #12]	; (800d268 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800d25a:	f7f9 fa47 	bl	80066ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800d25e:	4803      	ldr	r0, [pc, #12]	; (800d26c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800d260:	f7f9 fa44 	bl	80066ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800d264:	bf00      	nop
 800d266:	bd80      	pop	{r7, pc}
 800d268:	20000524 	.word	0x20000524
 800d26c:	20001030 	.word	0x20001030

0800d270 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d274:	4803      	ldr	r0, [pc, #12]	; (800d284 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800d276:	f7f9 fa39 	bl	80066ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800d27a:	4803      	ldr	r0, [pc, #12]	; (800d288 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800d27c:	f7f9 fa36 	bl	80066ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800d280:	bf00      	nop
 800d282:	bd80      	pop	{r7, pc}
 800d284:	20000524 	.word	0x20000524
 800d288:	20000cbc 	.word	0x20000cbc

0800d28c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d290:	4802      	ldr	r0, [pc, #8]	; (800d29c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800d292:	f7f9 fa2b 	bl	80066ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800d296:	bf00      	nop
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	20000524 	.word	0x20000524

0800d2a0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d2a4:	4802      	ldr	r0, [pc, #8]	; (800d2b0 <TIM8_CC_IRQHandler+0x10>)
 800d2a6:	f7f9 fa21 	bl	80066ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800d2aa:	bf00      	nop
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	20000524 	.word	0x20000524

0800d2b4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800d2b8:	4802      	ldr	r0, [pc, #8]	; (800d2c4 <TIM5_IRQHandler+0x10>)
 800d2ba:	f7f9 fa17 	bl	80066ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800d2be:	bf00      	nop
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	20000b68 	.word	0x20000b68

0800d2c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800d2cc:	4802      	ldr	r0, [pc, #8]	; (800d2d8 <TIM6_DAC_IRQHandler+0x10>)
 800d2ce:	f7f9 fa0d 	bl	80066ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800d2d2:	bf00      	nop
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	20000d80 	.word	0x20000d80

0800d2dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800d2e0:	4802      	ldr	r0, [pc, #8]	; (800d2ec <DMA2_Stream0_IRQHandler+0x10>)
 800d2e2:	f7f5 fd9d 	bl	8002e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800d2e6:	bf00      	nop
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	20000d00 	.word	0x20000d00

0800d2f0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800d2f4:	4802      	ldr	r0, [pc, #8]	; (800d300 <DMA2_Stream1_IRQHandler+0x10>)
 800d2f6:	f7f5 fd93 	bl	8002e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800d2fa:	bf00      	nop
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	20000aa8 	.word	0x20000aa8

0800d304 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800d308:	4802      	ldr	r0, [pc, #8]	; (800d314 <DMA2_Stream2_IRQHandler+0x10>)
 800d30a:	f7f5 fd89 	bl	8002e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800d30e:	bf00      	nop
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	20000fa8 	.word	0x20000fa8

0800d318 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800d320:	4b11      	ldr	r3, [pc, #68]	; (800d368 <_sbrk+0x50>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d102      	bne.n	800d32e <_sbrk+0x16>
		heap_end = &end;
 800d328:	4b0f      	ldr	r3, [pc, #60]	; (800d368 <_sbrk+0x50>)
 800d32a:	4a10      	ldr	r2, [pc, #64]	; (800d36c <_sbrk+0x54>)
 800d32c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800d32e:	4b0e      	ldr	r3, [pc, #56]	; (800d368 <_sbrk+0x50>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800d334:	4b0c      	ldr	r3, [pc, #48]	; (800d368 <_sbrk+0x50>)
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	4413      	add	r3, r2
 800d33c:	466a      	mov	r2, sp
 800d33e:	4293      	cmp	r3, r2
 800d340:	d907      	bls.n	800d352 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800d342:	f000 f855 	bl	800d3f0 <__errno>
 800d346:	4602      	mov	r2, r0
 800d348:	230c      	movs	r3, #12
 800d34a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800d34c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d350:	e006      	b.n	800d360 <_sbrk+0x48>
	}

	heap_end += incr;
 800d352:	4b05      	ldr	r3, [pc, #20]	; (800d368 <_sbrk+0x50>)
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	4413      	add	r3, r2
 800d35a:	4a03      	ldr	r2, [pc, #12]	; (800d368 <_sbrk+0x50>)
 800d35c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800d35e:	68fb      	ldr	r3, [r7, #12]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	20000120 	.word	0x20000120
 800d36c:	200013e0 	.word	0x200013e0

0800d370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d370:	b480      	push	{r7}
 800d372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d374:	4b08      	ldr	r3, [pc, #32]	; (800d398 <SystemInit+0x28>)
 800d376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d37a:	4a07      	ldr	r2, [pc, #28]	; (800d398 <SystemInit+0x28>)
 800d37c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d384:	4b04      	ldr	r3, [pc, #16]	; (800d398 <SystemInit+0x28>)
 800d386:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d38a:	609a      	str	r2, [r3, #8]
#endif
}
 800d38c:	bf00      	nop
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr
 800d396:	bf00      	nop
 800d398:	e000ed00 	.word	0xe000ed00

0800d39c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d39c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d3d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d3a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d3a2:	e003      	b.n	800d3ac <LoopCopyDataInit>

0800d3a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d3a4:	4b0c      	ldr	r3, [pc, #48]	; (800d3d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d3a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d3a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d3aa:	3104      	adds	r1, #4

0800d3ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d3ac:	480b      	ldr	r0, [pc, #44]	; (800d3dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d3ae:	4b0c      	ldr	r3, [pc, #48]	; (800d3e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d3b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d3b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d3b4:	d3f6      	bcc.n	800d3a4 <CopyDataInit>
  ldr  r2, =_sbss
 800d3b6:	4a0b      	ldr	r2, [pc, #44]	; (800d3e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d3b8:	e002      	b.n	800d3c0 <LoopFillZerobss>

0800d3ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d3ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d3bc:	f842 3b04 	str.w	r3, [r2], #4

0800d3c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d3c0:	4b09      	ldr	r3, [pc, #36]	; (800d3e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d3c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d3c4:	d3f9      	bcc.n	800d3ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d3c6:	f7ff ffd3 	bl	800d370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d3ca:	f000 f817 	bl	800d3fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d3ce:	f7fb fbb3 	bl	8008b38 <main>
  bx  lr    
 800d3d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d3d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d3d8:	080102e0 	.word	0x080102e0
  ldr  r0, =_sdata
 800d3dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d3e0:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 800d3e4:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 800d3e8:	200013e0 	.word	0x200013e0

0800d3ec <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d3ec:	e7fe      	b.n	800d3ec <CAN1_RX1_IRQHandler>
	...

0800d3f0 <__errno>:
 800d3f0:	4b01      	ldr	r3, [pc, #4]	; (800d3f8 <__errno+0x8>)
 800d3f2:	6818      	ldr	r0, [r3, #0]
 800d3f4:	4770      	bx	lr
 800d3f6:	bf00      	nop
 800d3f8:	20000040 	.word	0x20000040

0800d3fc <__libc_init_array>:
 800d3fc:	b570      	push	{r4, r5, r6, lr}
 800d3fe:	4e0d      	ldr	r6, [pc, #52]	; (800d434 <__libc_init_array+0x38>)
 800d400:	4c0d      	ldr	r4, [pc, #52]	; (800d438 <__libc_init_array+0x3c>)
 800d402:	1ba4      	subs	r4, r4, r6
 800d404:	10a4      	asrs	r4, r4, #2
 800d406:	2500      	movs	r5, #0
 800d408:	42a5      	cmp	r5, r4
 800d40a:	d109      	bne.n	800d420 <__libc_init_array+0x24>
 800d40c:	4e0b      	ldr	r6, [pc, #44]	; (800d43c <__libc_init_array+0x40>)
 800d40e:	4c0c      	ldr	r4, [pc, #48]	; (800d440 <__libc_init_array+0x44>)
 800d410:	f002 fcb0 	bl	800fd74 <_init>
 800d414:	1ba4      	subs	r4, r4, r6
 800d416:	10a4      	asrs	r4, r4, #2
 800d418:	2500      	movs	r5, #0
 800d41a:	42a5      	cmp	r5, r4
 800d41c:	d105      	bne.n	800d42a <__libc_init_array+0x2e>
 800d41e:	bd70      	pop	{r4, r5, r6, pc}
 800d420:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d424:	4798      	blx	r3
 800d426:	3501      	adds	r5, #1
 800d428:	e7ee      	b.n	800d408 <__libc_init_array+0xc>
 800d42a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d42e:	4798      	blx	r3
 800d430:	3501      	adds	r5, #1
 800d432:	e7f2      	b.n	800d41a <__libc_init_array+0x1e>
 800d434:	080102d8 	.word	0x080102d8
 800d438:	080102d8 	.word	0x080102d8
 800d43c:	080102d8 	.word	0x080102d8
 800d440:	080102dc 	.word	0x080102dc

0800d444 <memset>:
 800d444:	4402      	add	r2, r0
 800d446:	4603      	mov	r3, r0
 800d448:	4293      	cmp	r3, r2
 800d44a:	d100      	bne.n	800d44e <memset+0xa>
 800d44c:	4770      	bx	lr
 800d44e:	f803 1b01 	strb.w	r1, [r3], #1
 800d452:	e7f9      	b.n	800d448 <memset+0x4>

0800d454 <siprintf>:
 800d454:	b40e      	push	{r1, r2, r3}
 800d456:	b500      	push	{lr}
 800d458:	b09c      	sub	sp, #112	; 0x70
 800d45a:	ab1d      	add	r3, sp, #116	; 0x74
 800d45c:	9002      	str	r0, [sp, #8]
 800d45e:	9006      	str	r0, [sp, #24]
 800d460:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d464:	4809      	ldr	r0, [pc, #36]	; (800d48c <siprintf+0x38>)
 800d466:	9107      	str	r1, [sp, #28]
 800d468:	9104      	str	r1, [sp, #16]
 800d46a:	4909      	ldr	r1, [pc, #36]	; (800d490 <siprintf+0x3c>)
 800d46c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d470:	9105      	str	r1, [sp, #20]
 800d472:	6800      	ldr	r0, [r0, #0]
 800d474:	9301      	str	r3, [sp, #4]
 800d476:	a902      	add	r1, sp, #8
 800d478:	f000 f876 	bl	800d568 <_svfiprintf_r>
 800d47c:	9b02      	ldr	r3, [sp, #8]
 800d47e:	2200      	movs	r2, #0
 800d480:	701a      	strb	r2, [r3, #0]
 800d482:	b01c      	add	sp, #112	; 0x70
 800d484:	f85d eb04 	ldr.w	lr, [sp], #4
 800d488:	b003      	add	sp, #12
 800d48a:	4770      	bx	lr
 800d48c:	20000040 	.word	0x20000040
 800d490:	ffff0208 	.word	0xffff0208

0800d494 <strcat>:
 800d494:	b510      	push	{r4, lr}
 800d496:	4603      	mov	r3, r0
 800d498:	781a      	ldrb	r2, [r3, #0]
 800d49a:	1c5c      	adds	r4, r3, #1
 800d49c:	b93a      	cbnz	r2, 800d4ae <strcat+0x1a>
 800d49e:	3b01      	subs	r3, #1
 800d4a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4a8:	2a00      	cmp	r2, #0
 800d4aa:	d1f9      	bne.n	800d4a0 <strcat+0xc>
 800d4ac:	bd10      	pop	{r4, pc}
 800d4ae:	4623      	mov	r3, r4
 800d4b0:	e7f2      	b.n	800d498 <strcat+0x4>

0800d4b2 <__ssputs_r>:
 800d4b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4b6:	688e      	ldr	r6, [r1, #8]
 800d4b8:	429e      	cmp	r6, r3
 800d4ba:	4682      	mov	sl, r0
 800d4bc:	460c      	mov	r4, r1
 800d4be:	4690      	mov	r8, r2
 800d4c0:	4699      	mov	r9, r3
 800d4c2:	d837      	bhi.n	800d534 <__ssputs_r+0x82>
 800d4c4:	898a      	ldrh	r2, [r1, #12]
 800d4c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d4ca:	d031      	beq.n	800d530 <__ssputs_r+0x7e>
 800d4cc:	6825      	ldr	r5, [r4, #0]
 800d4ce:	6909      	ldr	r1, [r1, #16]
 800d4d0:	1a6f      	subs	r7, r5, r1
 800d4d2:	6965      	ldr	r5, [r4, #20]
 800d4d4:	2302      	movs	r3, #2
 800d4d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4da:	fb95 f5f3 	sdiv	r5, r5, r3
 800d4de:	f109 0301 	add.w	r3, r9, #1
 800d4e2:	443b      	add	r3, r7
 800d4e4:	429d      	cmp	r5, r3
 800d4e6:	bf38      	it	cc
 800d4e8:	461d      	movcc	r5, r3
 800d4ea:	0553      	lsls	r3, r2, #21
 800d4ec:	d530      	bpl.n	800d550 <__ssputs_r+0x9e>
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	f000 fb2c 	bl	800db4c <_malloc_r>
 800d4f4:	4606      	mov	r6, r0
 800d4f6:	b950      	cbnz	r0, 800d50e <__ssputs_r+0x5c>
 800d4f8:	230c      	movs	r3, #12
 800d4fa:	f8ca 3000 	str.w	r3, [sl]
 800d4fe:	89a3      	ldrh	r3, [r4, #12]
 800d500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d504:	81a3      	strh	r3, [r4, #12]
 800d506:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d50e:	463a      	mov	r2, r7
 800d510:	6921      	ldr	r1, [r4, #16]
 800d512:	f000 faa9 	bl	800da68 <memcpy>
 800d516:	89a3      	ldrh	r3, [r4, #12]
 800d518:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d51c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d520:	81a3      	strh	r3, [r4, #12]
 800d522:	6126      	str	r6, [r4, #16]
 800d524:	6165      	str	r5, [r4, #20]
 800d526:	443e      	add	r6, r7
 800d528:	1bed      	subs	r5, r5, r7
 800d52a:	6026      	str	r6, [r4, #0]
 800d52c:	60a5      	str	r5, [r4, #8]
 800d52e:	464e      	mov	r6, r9
 800d530:	454e      	cmp	r6, r9
 800d532:	d900      	bls.n	800d536 <__ssputs_r+0x84>
 800d534:	464e      	mov	r6, r9
 800d536:	4632      	mov	r2, r6
 800d538:	4641      	mov	r1, r8
 800d53a:	6820      	ldr	r0, [r4, #0]
 800d53c:	f000 fa9f 	bl	800da7e <memmove>
 800d540:	68a3      	ldr	r3, [r4, #8]
 800d542:	1b9b      	subs	r3, r3, r6
 800d544:	60a3      	str	r3, [r4, #8]
 800d546:	6823      	ldr	r3, [r4, #0]
 800d548:	441e      	add	r6, r3
 800d54a:	6026      	str	r6, [r4, #0]
 800d54c:	2000      	movs	r0, #0
 800d54e:	e7dc      	b.n	800d50a <__ssputs_r+0x58>
 800d550:	462a      	mov	r2, r5
 800d552:	f000 fb55 	bl	800dc00 <_realloc_r>
 800d556:	4606      	mov	r6, r0
 800d558:	2800      	cmp	r0, #0
 800d55a:	d1e2      	bne.n	800d522 <__ssputs_r+0x70>
 800d55c:	6921      	ldr	r1, [r4, #16]
 800d55e:	4650      	mov	r0, sl
 800d560:	f000 faa6 	bl	800dab0 <_free_r>
 800d564:	e7c8      	b.n	800d4f8 <__ssputs_r+0x46>
	...

0800d568 <_svfiprintf_r>:
 800d568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56c:	461d      	mov	r5, r3
 800d56e:	898b      	ldrh	r3, [r1, #12]
 800d570:	061f      	lsls	r7, r3, #24
 800d572:	b09d      	sub	sp, #116	; 0x74
 800d574:	4680      	mov	r8, r0
 800d576:	460c      	mov	r4, r1
 800d578:	4616      	mov	r6, r2
 800d57a:	d50f      	bpl.n	800d59c <_svfiprintf_r+0x34>
 800d57c:	690b      	ldr	r3, [r1, #16]
 800d57e:	b96b      	cbnz	r3, 800d59c <_svfiprintf_r+0x34>
 800d580:	2140      	movs	r1, #64	; 0x40
 800d582:	f000 fae3 	bl	800db4c <_malloc_r>
 800d586:	6020      	str	r0, [r4, #0]
 800d588:	6120      	str	r0, [r4, #16]
 800d58a:	b928      	cbnz	r0, 800d598 <_svfiprintf_r+0x30>
 800d58c:	230c      	movs	r3, #12
 800d58e:	f8c8 3000 	str.w	r3, [r8]
 800d592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d596:	e0c8      	b.n	800d72a <_svfiprintf_r+0x1c2>
 800d598:	2340      	movs	r3, #64	; 0x40
 800d59a:	6163      	str	r3, [r4, #20]
 800d59c:	2300      	movs	r3, #0
 800d59e:	9309      	str	r3, [sp, #36]	; 0x24
 800d5a0:	2320      	movs	r3, #32
 800d5a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5a6:	2330      	movs	r3, #48	; 0x30
 800d5a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5ac:	9503      	str	r5, [sp, #12]
 800d5ae:	f04f 0b01 	mov.w	fp, #1
 800d5b2:	4637      	mov	r7, r6
 800d5b4:	463d      	mov	r5, r7
 800d5b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d5ba:	b10b      	cbz	r3, 800d5c0 <_svfiprintf_r+0x58>
 800d5bc:	2b25      	cmp	r3, #37	; 0x25
 800d5be:	d13e      	bne.n	800d63e <_svfiprintf_r+0xd6>
 800d5c0:	ebb7 0a06 	subs.w	sl, r7, r6
 800d5c4:	d00b      	beq.n	800d5de <_svfiprintf_r+0x76>
 800d5c6:	4653      	mov	r3, sl
 800d5c8:	4632      	mov	r2, r6
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	4640      	mov	r0, r8
 800d5ce:	f7ff ff70 	bl	800d4b2 <__ssputs_r>
 800d5d2:	3001      	adds	r0, #1
 800d5d4:	f000 80a4 	beq.w	800d720 <_svfiprintf_r+0x1b8>
 800d5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5da:	4453      	add	r3, sl
 800d5dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d5de:	783b      	ldrb	r3, [r7, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f000 809d 	beq.w	800d720 <_svfiprintf_r+0x1b8>
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5f0:	9304      	str	r3, [sp, #16]
 800d5f2:	9307      	str	r3, [sp, #28]
 800d5f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5f8:	931a      	str	r3, [sp, #104]	; 0x68
 800d5fa:	462f      	mov	r7, r5
 800d5fc:	2205      	movs	r2, #5
 800d5fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d602:	4850      	ldr	r0, [pc, #320]	; (800d744 <_svfiprintf_r+0x1dc>)
 800d604:	f7f2 fdec 	bl	80001e0 <memchr>
 800d608:	9b04      	ldr	r3, [sp, #16]
 800d60a:	b9d0      	cbnz	r0, 800d642 <_svfiprintf_r+0xda>
 800d60c:	06d9      	lsls	r1, r3, #27
 800d60e:	bf44      	itt	mi
 800d610:	2220      	movmi	r2, #32
 800d612:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d616:	071a      	lsls	r2, r3, #28
 800d618:	bf44      	itt	mi
 800d61a:	222b      	movmi	r2, #43	; 0x2b
 800d61c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d620:	782a      	ldrb	r2, [r5, #0]
 800d622:	2a2a      	cmp	r2, #42	; 0x2a
 800d624:	d015      	beq.n	800d652 <_svfiprintf_r+0xea>
 800d626:	9a07      	ldr	r2, [sp, #28]
 800d628:	462f      	mov	r7, r5
 800d62a:	2000      	movs	r0, #0
 800d62c:	250a      	movs	r5, #10
 800d62e:	4639      	mov	r1, r7
 800d630:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d634:	3b30      	subs	r3, #48	; 0x30
 800d636:	2b09      	cmp	r3, #9
 800d638:	d94d      	bls.n	800d6d6 <_svfiprintf_r+0x16e>
 800d63a:	b1b8      	cbz	r0, 800d66c <_svfiprintf_r+0x104>
 800d63c:	e00f      	b.n	800d65e <_svfiprintf_r+0xf6>
 800d63e:	462f      	mov	r7, r5
 800d640:	e7b8      	b.n	800d5b4 <_svfiprintf_r+0x4c>
 800d642:	4a40      	ldr	r2, [pc, #256]	; (800d744 <_svfiprintf_r+0x1dc>)
 800d644:	1a80      	subs	r0, r0, r2
 800d646:	fa0b f000 	lsl.w	r0, fp, r0
 800d64a:	4318      	orrs	r0, r3
 800d64c:	9004      	str	r0, [sp, #16]
 800d64e:	463d      	mov	r5, r7
 800d650:	e7d3      	b.n	800d5fa <_svfiprintf_r+0x92>
 800d652:	9a03      	ldr	r2, [sp, #12]
 800d654:	1d11      	adds	r1, r2, #4
 800d656:	6812      	ldr	r2, [r2, #0]
 800d658:	9103      	str	r1, [sp, #12]
 800d65a:	2a00      	cmp	r2, #0
 800d65c:	db01      	blt.n	800d662 <_svfiprintf_r+0xfa>
 800d65e:	9207      	str	r2, [sp, #28]
 800d660:	e004      	b.n	800d66c <_svfiprintf_r+0x104>
 800d662:	4252      	negs	r2, r2
 800d664:	f043 0302 	orr.w	r3, r3, #2
 800d668:	9207      	str	r2, [sp, #28]
 800d66a:	9304      	str	r3, [sp, #16]
 800d66c:	783b      	ldrb	r3, [r7, #0]
 800d66e:	2b2e      	cmp	r3, #46	; 0x2e
 800d670:	d10c      	bne.n	800d68c <_svfiprintf_r+0x124>
 800d672:	787b      	ldrb	r3, [r7, #1]
 800d674:	2b2a      	cmp	r3, #42	; 0x2a
 800d676:	d133      	bne.n	800d6e0 <_svfiprintf_r+0x178>
 800d678:	9b03      	ldr	r3, [sp, #12]
 800d67a:	1d1a      	adds	r2, r3, #4
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	9203      	str	r2, [sp, #12]
 800d680:	2b00      	cmp	r3, #0
 800d682:	bfb8      	it	lt
 800d684:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d688:	3702      	adds	r7, #2
 800d68a:	9305      	str	r3, [sp, #20]
 800d68c:	4d2e      	ldr	r5, [pc, #184]	; (800d748 <_svfiprintf_r+0x1e0>)
 800d68e:	7839      	ldrb	r1, [r7, #0]
 800d690:	2203      	movs	r2, #3
 800d692:	4628      	mov	r0, r5
 800d694:	f7f2 fda4 	bl	80001e0 <memchr>
 800d698:	b138      	cbz	r0, 800d6aa <_svfiprintf_r+0x142>
 800d69a:	2340      	movs	r3, #64	; 0x40
 800d69c:	1b40      	subs	r0, r0, r5
 800d69e:	fa03 f000 	lsl.w	r0, r3, r0
 800d6a2:	9b04      	ldr	r3, [sp, #16]
 800d6a4:	4303      	orrs	r3, r0
 800d6a6:	3701      	adds	r7, #1
 800d6a8:	9304      	str	r3, [sp, #16]
 800d6aa:	7839      	ldrb	r1, [r7, #0]
 800d6ac:	4827      	ldr	r0, [pc, #156]	; (800d74c <_svfiprintf_r+0x1e4>)
 800d6ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6b2:	2206      	movs	r2, #6
 800d6b4:	1c7e      	adds	r6, r7, #1
 800d6b6:	f7f2 fd93 	bl	80001e0 <memchr>
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d038      	beq.n	800d730 <_svfiprintf_r+0x1c8>
 800d6be:	4b24      	ldr	r3, [pc, #144]	; (800d750 <_svfiprintf_r+0x1e8>)
 800d6c0:	bb13      	cbnz	r3, 800d708 <_svfiprintf_r+0x1a0>
 800d6c2:	9b03      	ldr	r3, [sp, #12]
 800d6c4:	3307      	adds	r3, #7
 800d6c6:	f023 0307 	bic.w	r3, r3, #7
 800d6ca:	3308      	adds	r3, #8
 800d6cc:	9303      	str	r3, [sp, #12]
 800d6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6d0:	444b      	add	r3, r9
 800d6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d6d4:	e76d      	b.n	800d5b2 <_svfiprintf_r+0x4a>
 800d6d6:	fb05 3202 	mla	r2, r5, r2, r3
 800d6da:	2001      	movs	r0, #1
 800d6dc:	460f      	mov	r7, r1
 800d6de:	e7a6      	b.n	800d62e <_svfiprintf_r+0xc6>
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	3701      	adds	r7, #1
 800d6e4:	9305      	str	r3, [sp, #20]
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	250a      	movs	r5, #10
 800d6ea:	4638      	mov	r0, r7
 800d6ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6f0:	3a30      	subs	r2, #48	; 0x30
 800d6f2:	2a09      	cmp	r2, #9
 800d6f4:	d903      	bls.n	800d6fe <_svfiprintf_r+0x196>
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d0c8      	beq.n	800d68c <_svfiprintf_r+0x124>
 800d6fa:	9105      	str	r1, [sp, #20]
 800d6fc:	e7c6      	b.n	800d68c <_svfiprintf_r+0x124>
 800d6fe:	fb05 2101 	mla	r1, r5, r1, r2
 800d702:	2301      	movs	r3, #1
 800d704:	4607      	mov	r7, r0
 800d706:	e7f0      	b.n	800d6ea <_svfiprintf_r+0x182>
 800d708:	ab03      	add	r3, sp, #12
 800d70a:	9300      	str	r3, [sp, #0]
 800d70c:	4622      	mov	r2, r4
 800d70e:	4b11      	ldr	r3, [pc, #68]	; (800d754 <_svfiprintf_r+0x1ec>)
 800d710:	a904      	add	r1, sp, #16
 800d712:	4640      	mov	r0, r8
 800d714:	f3af 8000 	nop.w
 800d718:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d71c:	4681      	mov	r9, r0
 800d71e:	d1d6      	bne.n	800d6ce <_svfiprintf_r+0x166>
 800d720:	89a3      	ldrh	r3, [r4, #12]
 800d722:	065b      	lsls	r3, r3, #25
 800d724:	f53f af35 	bmi.w	800d592 <_svfiprintf_r+0x2a>
 800d728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d72a:	b01d      	add	sp, #116	; 0x74
 800d72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d730:	ab03      	add	r3, sp, #12
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	4622      	mov	r2, r4
 800d736:	4b07      	ldr	r3, [pc, #28]	; (800d754 <_svfiprintf_r+0x1ec>)
 800d738:	a904      	add	r1, sp, #16
 800d73a:	4640      	mov	r0, r8
 800d73c:	f000 f882 	bl	800d844 <_printf_i>
 800d740:	e7ea      	b.n	800d718 <_svfiprintf_r+0x1b0>
 800d742:	bf00      	nop
 800d744:	0801007c 	.word	0x0801007c
 800d748:	08010082 	.word	0x08010082
 800d74c:	08010086 	.word	0x08010086
 800d750:	00000000 	.word	0x00000000
 800d754:	0800d4b3 	.word	0x0800d4b3

0800d758 <_printf_common>:
 800d758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d75c:	4691      	mov	r9, r2
 800d75e:	461f      	mov	r7, r3
 800d760:	688a      	ldr	r2, [r1, #8]
 800d762:	690b      	ldr	r3, [r1, #16]
 800d764:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d768:	4293      	cmp	r3, r2
 800d76a:	bfb8      	it	lt
 800d76c:	4613      	movlt	r3, r2
 800d76e:	f8c9 3000 	str.w	r3, [r9]
 800d772:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d776:	4606      	mov	r6, r0
 800d778:	460c      	mov	r4, r1
 800d77a:	b112      	cbz	r2, 800d782 <_printf_common+0x2a>
 800d77c:	3301      	adds	r3, #1
 800d77e:	f8c9 3000 	str.w	r3, [r9]
 800d782:	6823      	ldr	r3, [r4, #0]
 800d784:	0699      	lsls	r1, r3, #26
 800d786:	bf42      	ittt	mi
 800d788:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d78c:	3302      	addmi	r3, #2
 800d78e:	f8c9 3000 	strmi.w	r3, [r9]
 800d792:	6825      	ldr	r5, [r4, #0]
 800d794:	f015 0506 	ands.w	r5, r5, #6
 800d798:	d107      	bne.n	800d7aa <_printf_common+0x52>
 800d79a:	f104 0a19 	add.w	sl, r4, #25
 800d79e:	68e3      	ldr	r3, [r4, #12]
 800d7a0:	f8d9 2000 	ldr.w	r2, [r9]
 800d7a4:	1a9b      	subs	r3, r3, r2
 800d7a6:	42ab      	cmp	r3, r5
 800d7a8:	dc28      	bgt.n	800d7fc <_printf_common+0xa4>
 800d7aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d7ae:	6822      	ldr	r2, [r4, #0]
 800d7b0:	3300      	adds	r3, #0
 800d7b2:	bf18      	it	ne
 800d7b4:	2301      	movne	r3, #1
 800d7b6:	0692      	lsls	r2, r2, #26
 800d7b8:	d42d      	bmi.n	800d816 <_printf_common+0xbe>
 800d7ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7be:	4639      	mov	r1, r7
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	47c0      	blx	r8
 800d7c4:	3001      	adds	r0, #1
 800d7c6:	d020      	beq.n	800d80a <_printf_common+0xb2>
 800d7c8:	6823      	ldr	r3, [r4, #0]
 800d7ca:	68e5      	ldr	r5, [r4, #12]
 800d7cc:	f8d9 2000 	ldr.w	r2, [r9]
 800d7d0:	f003 0306 	and.w	r3, r3, #6
 800d7d4:	2b04      	cmp	r3, #4
 800d7d6:	bf08      	it	eq
 800d7d8:	1aad      	subeq	r5, r5, r2
 800d7da:	68a3      	ldr	r3, [r4, #8]
 800d7dc:	6922      	ldr	r2, [r4, #16]
 800d7de:	bf0c      	ite	eq
 800d7e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7e4:	2500      	movne	r5, #0
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	bfc4      	itt	gt
 800d7ea:	1a9b      	subgt	r3, r3, r2
 800d7ec:	18ed      	addgt	r5, r5, r3
 800d7ee:	f04f 0900 	mov.w	r9, #0
 800d7f2:	341a      	adds	r4, #26
 800d7f4:	454d      	cmp	r5, r9
 800d7f6:	d11a      	bne.n	800d82e <_printf_common+0xd6>
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	e008      	b.n	800d80e <_printf_common+0xb6>
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	4652      	mov	r2, sl
 800d800:	4639      	mov	r1, r7
 800d802:	4630      	mov	r0, r6
 800d804:	47c0      	blx	r8
 800d806:	3001      	adds	r0, #1
 800d808:	d103      	bne.n	800d812 <_printf_common+0xba>
 800d80a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d812:	3501      	adds	r5, #1
 800d814:	e7c3      	b.n	800d79e <_printf_common+0x46>
 800d816:	18e1      	adds	r1, r4, r3
 800d818:	1c5a      	adds	r2, r3, #1
 800d81a:	2030      	movs	r0, #48	; 0x30
 800d81c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d820:	4422      	add	r2, r4
 800d822:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d826:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d82a:	3302      	adds	r3, #2
 800d82c:	e7c5      	b.n	800d7ba <_printf_common+0x62>
 800d82e:	2301      	movs	r3, #1
 800d830:	4622      	mov	r2, r4
 800d832:	4639      	mov	r1, r7
 800d834:	4630      	mov	r0, r6
 800d836:	47c0      	blx	r8
 800d838:	3001      	adds	r0, #1
 800d83a:	d0e6      	beq.n	800d80a <_printf_common+0xb2>
 800d83c:	f109 0901 	add.w	r9, r9, #1
 800d840:	e7d8      	b.n	800d7f4 <_printf_common+0x9c>
	...

0800d844 <_printf_i>:
 800d844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d848:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d84c:	460c      	mov	r4, r1
 800d84e:	7e09      	ldrb	r1, [r1, #24]
 800d850:	b085      	sub	sp, #20
 800d852:	296e      	cmp	r1, #110	; 0x6e
 800d854:	4617      	mov	r7, r2
 800d856:	4606      	mov	r6, r0
 800d858:	4698      	mov	r8, r3
 800d85a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d85c:	f000 80b3 	beq.w	800d9c6 <_printf_i+0x182>
 800d860:	d822      	bhi.n	800d8a8 <_printf_i+0x64>
 800d862:	2963      	cmp	r1, #99	; 0x63
 800d864:	d036      	beq.n	800d8d4 <_printf_i+0x90>
 800d866:	d80a      	bhi.n	800d87e <_printf_i+0x3a>
 800d868:	2900      	cmp	r1, #0
 800d86a:	f000 80b9 	beq.w	800d9e0 <_printf_i+0x19c>
 800d86e:	2958      	cmp	r1, #88	; 0x58
 800d870:	f000 8083 	beq.w	800d97a <_printf_i+0x136>
 800d874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d878:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d87c:	e032      	b.n	800d8e4 <_printf_i+0xa0>
 800d87e:	2964      	cmp	r1, #100	; 0x64
 800d880:	d001      	beq.n	800d886 <_printf_i+0x42>
 800d882:	2969      	cmp	r1, #105	; 0x69
 800d884:	d1f6      	bne.n	800d874 <_printf_i+0x30>
 800d886:	6820      	ldr	r0, [r4, #0]
 800d888:	6813      	ldr	r3, [r2, #0]
 800d88a:	0605      	lsls	r5, r0, #24
 800d88c:	f103 0104 	add.w	r1, r3, #4
 800d890:	d52a      	bpl.n	800d8e8 <_printf_i+0xa4>
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	6011      	str	r1, [r2, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	da03      	bge.n	800d8a2 <_printf_i+0x5e>
 800d89a:	222d      	movs	r2, #45	; 0x2d
 800d89c:	425b      	negs	r3, r3
 800d89e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d8a2:	486f      	ldr	r0, [pc, #444]	; (800da60 <_printf_i+0x21c>)
 800d8a4:	220a      	movs	r2, #10
 800d8a6:	e039      	b.n	800d91c <_printf_i+0xd8>
 800d8a8:	2973      	cmp	r1, #115	; 0x73
 800d8aa:	f000 809d 	beq.w	800d9e8 <_printf_i+0x1a4>
 800d8ae:	d808      	bhi.n	800d8c2 <_printf_i+0x7e>
 800d8b0:	296f      	cmp	r1, #111	; 0x6f
 800d8b2:	d020      	beq.n	800d8f6 <_printf_i+0xb2>
 800d8b4:	2970      	cmp	r1, #112	; 0x70
 800d8b6:	d1dd      	bne.n	800d874 <_printf_i+0x30>
 800d8b8:	6823      	ldr	r3, [r4, #0]
 800d8ba:	f043 0320 	orr.w	r3, r3, #32
 800d8be:	6023      	str	r3, [r4, #0]
 800d8c0:	e003      	b.n	800d8ca <_printf_i+0x86>
 800d8c2:	2975      	cmp	r1, #117	; 0x75
 800d8c4:	d017      	beq.n	800d8f6 <_printf_i+0xb2>
 800d8c6:	2978      	cmp	r1, #120	; 0x78
 800d8c8:	d1d4      	bne.n	800d874 <_printf_i+0x30>
 800d8ca:	2378      	movs	r3, #120	; 0x78
 800d8cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d8d0:	4864      	ldr	r0, [pc, #400]	; (800da64 <_printf_i+0x220>)
 800d8d2:	e055      	b.n	800d980 <_printf_i+0x13c>
 800d8d4:	6813      	ldr	r3, [r2, #0]
 800d8d6:	1d19      	adds	r1, r3, #4
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	6011      	str	r1, [r2, #0]
 800d8dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	e08c      	b.n	800da02 <_printf_i+0x1be>
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	6011      	str	r1, [r2, #0]
 800d8ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d8f0:	bf18      	it	ne
 800d8f2:	b21b      	sxthne	r3, r3
 800d8f4:	e7cf      	b.n	800d896 <_printf_i+0x52>
 800d8f6:	6813      	ldr	r3, [r2, #0]
 800d8f8:	6825      	ldr	r5, [r4, #0]
 800d8fa:	1d18      	adds	r0, r3, #4
 800d8fc:	6010      	str	r0, [r2, #0]
 800d8fe:	0628      	lsls	r0, r5, #24
 800d900:	d501      	bpl.n	800d906 <_printf_i+0xc2>
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	e002      	b.n	800d90c <_printf_i+0xc8>
 800d906:	0668      	lsls	r0, r5, #25
 800d908:	d5fb      	bpl.n	800d902 <_printf_i+0xbe>
 800d90a:	881b      	ldrh	r3, [r3, #0]
 800d90c:	4854      	ldr	r0, [pc, #336]	; (800da60 <_printf_i+0x21c>)
 800d90e:	296f      	cmp	r1, #111	; 0x6f
 800d910:	bf14      	ite	ne
 800d912:	220a      	movne	r2, #10
 800d914:	2208      	moveq	r2, #8
 800d916:	2100      	movs	r1, #0
 800d918:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d91c:	6865      	ldr	r5, [r4, #4]
 800d91e:	60a5      	str	r5, [r4, #8]
 800d920:	2d00      	cmp	r5, #0
 800d922:	f2c0 8095 	blt.w	800da50 <_printf_i+0x20c>
 800d926:	6821      	ldr	r1, [r4, #0]
 800d928:	f021 0104 	bic.w	r1, r1, #4
 800d92c:	6021      	str	r1, [r4, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d13d      	bne.n	800d9ae <_printf_i+0x16a>
 800d932:	2d00      	cmp	r5, #0
 800d934:	f040 808e 	bne.w	800da54 <_printf_i+0x210>
 800d938:	4665      	mov	r5, ip
 800d93a:	2a08      	cmp	r2, #8
 800d93c:	d10b      	bne.n	800d956 <_printf_i+0x112>
 800d93e:	6823      	ldr	r3, [r4, #0]
 800d940:	07db      	lsls	r3, r3, #31
 800d942:	d508      	bpl.n	800d956 <_printf_i+0x112>
 800d944:	6923      	ldr	r3, [r4, #16]
 800d946:	6862      	ldr	r2, [r4, #4]
 800d948:	429a      	cmp	r2, r3
 800d94a:	bfde      	ittt	le
 800d94c:	2330      	movle	r3, #48	; 0x30
 800d94e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d952:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d956:	ebac 0305 	sub.w	r3, ip, r5
 800d95a:	6123      	str	r3, [r4, #16]
 800d95c:	f8cd 8000 	str.w	r8, [sp]
 800d960:	463b      	mov	r3, r7
 800d962:	aa03      	add	r2, sp, #12
 800d964:	4621      	mov	r1, r4
 800d966:	4630      	mov	r0, r6
 800d968:	f7ff fef6 	bl	800d758 <_printf_common>
 800d96c:	3001      	adds	r0, #1
 800d96e:	d14d      	bne.n	800da0c <_printf_i+0x1c8>
 800d970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d974:	b005      	add	sp, #20
 800d976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d97a:	4839      	ldr	r0, [pc, #228]	; (800da60 <_printf_i+0x21c>)
 800d97c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d980:	6813      	ldr	r3, [r2, #0]
 800d982:	6821      	ldr	r1, [r4, #0]
 800d984:	1d1d      	adds	r5, r3, #4
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	6015      	str	r5, [r2, #0]
 800d98a:	060a      	lsls	r2, r1, #24
 800d98c:	d50b      	bpl.n	800d9a6 <_printf_i+0x162>
 800d98e:	07ca      	lsls	r2, r1, #31
 800d990:	bf44      	itt	mi
 800d992:	f041 0120 	orrmi.w	r1, r1, #32
 800d996:	6021      	strmi	r1, [r4, #0]
 800d998:	b91b      	cbnz	r3, 800d9a2 <_printf_i+0x15e>
 800d99a:	6822      	ldr	r2, [r4, #0]
 800d99c:	f022 0220 	bic.w	r2, r2, #32
 800d9a0:	6022      	str	r2, [r4, #0]
 800d9a2:	2210      	movs	r2, #16
 800d9a4:	e7b7      	b.n	800d916 <_printf_i+0xd2>
 800d9a6:	064d      	lsls	r5, r1, #25
 800d9a8:	bf48      	it	mi
 800d9aa:	b29b      	uxthmi	r3, r3
 800d9ac:	e7ef      	b.n	800d98e <_printf_i+0x14a>
 800d9ae:	4665      	mov	r5, ip
 800d9b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d9b4:	fb02 3311 	mls	r3, r2, r1, r3
 800d9b8:	5cc3      	ldrb	r3, [r0, r3]
 800d9ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d9be:	460b      	mov	r3, r1
 800d9c0:	2900      	cmp	r1, #0
 800d9c2:	d1f5      	bne.n	800d9b0 <_printf_i+0x16c>
 800d9c4:	e7b9      	b.n	800d93a <_printf_i+0xf6>
 800d9c6:	6813      	ldr	r3, [r2, #0]
 800d9c8:	6825      	ldr	r5, [r4, #0]
 800d9ca:	6961      	ldr	r1, [r4, #20]
 800d9cc:	1d18      	adds	r0, r3, #4
 800d9ce:	6010      	str	r0, [r2, #0]
 800d9d0:	0628      	lsls	r0, r5, #24
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	d501      	bpl.n	800d9da <_printf_i+0x196>
 800d9d6:	6019      	str	r1, [r3, #0]
 800d9d8:	e002      	b.n	800d9e0 <_printf_i+0x19c>
 800d9da:	066a      	lsls	r2, r5, #25
 800d9dc:	d5fb      	bpl.n	800d9d6 <_printf_i+0x192>
 800d9de:	8019      	strh	r1, [r3, #0]
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	6123      	str	r3, [r4, #16]
 800d9e4:	4665      	mov	r5, ip
 800d9e6:	e7b9      	b.n	800d95c <_printf_i+0x118>
 800d9e8:	6813      	ldr	r3, [r2, #0]
 800d9ea:	1d19      	adds	r1, r3, #4
 800d9ec:	6011      	str	r1, [r2, #0]
 800d9ee:	681d      	ldr	r5, [r3, #0]
 800d9f0:	6862      	ldr	r2, [r4, #4]
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	f7f2 fbf3 	bl	80001e0 <memchr>
 800d9fa:	b108      	cbz	r0, 800da00 <_printf_i+0x1bc>
 800d9fc:	1b40      	subs	r0, r0, r5
 800d9fe:	6060      	str	r0, [r4, #4]
 800da00:	6863      	ldr	r3, [r4, #4]
 800da02:	6123      	str	r3, [r4, #16]
 800da04:	2300      	movs	r3, #0
 800da06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da0a:	e7a7      	b.n	800d95c <_printf_i+0x118>
 800da0c:	6923      	ldr	r3, [r4, #16]
 800da0e:	462a      	mov	r2, r5
 800da10:	4639      	mov	r1, r7
 800da12:	4630      	mov	r0, r6
 800da14:	47c0      	blx	r8
 800da16:	3001      	adds	r0, #1
 800da18:	d0aa      	beq.n	800d970 <_printf_i+0x12c>
 800da1a:	6823      	ldr	r3, [r4, #0]
 800da1c:	079b      	lsls	r3, r3, #30
 800da1e:	d413      	bmi.n	800da48 <_printf_i+0x204>
 800da20:	68e0      	ldr	r0, [r4, #12]
 800da22:	9b03      	ldr	r3, [sp, #12]
 800da24:	4298      	cmp	r0, r3
 800da26:	bfb8      	it	lt
 800da28:	4618      	movlt	r0, r3
 800da2a:	e7a3      	b.n	800d974 <_printf_i+0x130>
 800da2c:	2301      	movs	r3, #1
 800da2e:	464a      	mov	r2, r9
 800da30:	4639      	mov	r1, r7
 800da32:	4630      	mov	r0, r6
 800da34:	47c0      	blx	r8
 800da36:	3001      	adds	r0, #1
 800da38:	d09a      	beq.n	800d970 <_printf_i+0x12c>
 800da3a:	3501      	adds	r5, #1
 800da3c:	68e3      	ldr	r3, [r4, #12]
 800da3e:	9a03      	ldr	r2, [sp, #12]
 800da40:	1a9b      	subs	r3, r3, r2
 800da42:	42ab      	cmp	r3, r5
 800da44:	dcf2      	bgt.n	800da2c <_printf_i+0x1e8>
 800da46:	e7eb      	b.n	800da20 <_printf_i+0x1dc>
 800da48:	2500      	movs	r5, #0
 800da4a:	f104 0919 	add.w	r9, r4, #25
 800da4e:	e7f5      	b.n	800da3c <_printf_i+0x1f8>
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1ac      	bne.n	800d9ae <_printf_i+0x16a>
 800da54:	7803      	ldrb	r3, [r0, #0]
 800da56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da5e:	e76c      	b.n	800d93a <_printf_i+0xf6>
 800da60:	0801008d 	.word	0x0801008d
 800da64:	0801009e 	.word	0x0801009e

0800da68 <memcpy>:
 800da68:	b510      	push	{r4, lr}
 800da6a:	1e43      	subs	r3, r0, #1
 800da6c:	440a      	add	r2, r1
 800da6e:	4291      	cmp	r1, r2
 800da70:	d100      	bne.n	800da74 <memcpy+0xc>
 800da72:	bd10      	pop	{r4, pc}
 800da74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da7c:	e7f7      	b.n	800da6e <memcpy+0x6>

0800da7e <memmove>:
 800da7e:	4288      	cmp	r0, r1
 800da80:	b510      	push	{r4, lr}
 800da82:	eb01 0302 	add.w	r3, r1, r2
 800da86:	d807      	bhi.n	800da98 <memmove+0x1a>
 800da88:	1e42      	subs	r2, r0, #1
 800da8a:	4299      	cmp	r1, r3
 800da8c:	d00a      	beq.n	800daa4 <memmove+0x26>
 800da8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da92:	f802 4f01 	strb.w	r4, [r2, #1]!
 800da96:	e7f8      	b.n	800da8a <memmove+0xc>
 800da98:	4283      	cmp	r3, r0
 800da9a:	d9f5      	bls.n	800da88 <memmove+0xa>
 800da9c:	1881      	adds	r1, r0, r2
 800da9e:	1ad2      	subs	r2, r2, r3
 800daa0:	42d3      	cmn	r3, r2
 800daa2:	d100      	bne.n	800daa6 <memmove+0x28>
 800daa4:	bd10      	pop	{r4, pc}
 800daa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800daaa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800daae:	e7f7      	b.n	800daa0 <memmove+0x22>

0800dab0 <_free_r>:
 800dab0:	b538      	push	{r3, r4, r5, lr}
 800dab2:	4605      	mov	r5, r0
 800dab4:	2900      	cmp	r1, #0
 800dab6:	d045      	beq.n	800db44 <_free_r+0x94>
 800dab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dabc:	1f0c      	subs	r4, r1, #4
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	bfb8      	it	lt
 800dac2:	18e4      	addlt	r4, r4, r3
 800dac4:	f000 f8d2 	bl	800dc6c <__malloc_lock>
 800dac8:	4a1f      	ldr	r2, [pc, #124]	; (800db48 <_free_r+0x98>)
 800daca:	6813      	ldr	r3, [r2, #0]
 800dacc:	4610      	mov	r0, r2
 800dace:	b933      	cbnz	r3, 800dade <_free_r+0x2e>
 800dad0:	6063      	str	r3, [r4, #4]
 800dad2:	6014      	str	r4, [r2, #0]
 800dad4:	4628      	mov	r0, r5
 800dad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dada:	f000 b8c8 	b.w	800dc6e <__malloc_unlock>
 800dade:	42a3      	cmp	r3, r4
 800dae0:	d90c      	bls.n	800dafc <_free_r+0x4c>
 800dae2:	6821      	ldr	r1, [r4, #0]
 800dae4:	1862      	adds	r2, r4, r1
 800dae6:	4293      	cmp	r3, r2
 800dae8:	bf04      	itt	eq
 800daea:	681a      	ldreq	r2, [r3, #0]
 800daec:	685b      	ldreq	r3, [r3, #4]
 800daee:	6063      	str	r3, [r4, #4]
 800daf0:	bf04      	itt	eq
 800daf2:	1852      	addeq	r2, r2, r1
 800daf4:	6022      	streq	r2, [r4, #0]
 800daf6:	6004      	str	r4, [r0, #0]
 800daf8:	e7ec      	b.n	800dad4 <_free_r+0x24>
 800dafa:	4613      	mov	r3, r2
 800dafc:	685a      	ldr	r2, [r3, #4]
 800dafe:	b10a      	cbz	r2, 800db04 <_free_r+0x54>
 800db00:	42a2      	cmp	r2, r4
 800db02:	d9fa      	bls.n	800dafa <_free_r+0x4a>
 800db04:	6819      	ldr	r1, [r3, #0]
 800db06:	1858      	adds	r0, r3, r1
 800db08:	42a0      	cmp	r0, r4
 800db0a:	d10b      	bne.n	800db24 <_free_r+0x74>
 800db0c:	6820      	ldr	r0, [r4, #0]
 800db0e:	4401      	add	r1, r0
 800db10:	1858      	adds	r0, r3, r1
 800db12:	4282      	cmp	r2, r0
 800db14:	6019      	str	r1, [r3, #0]
 800db16:	d1dd      	bne.n	800dad4 <_free_r+0x24>
 800db18:	6810      	ldr	r0, [r2, #0]
 800db1a:	6852      	ldr	r2, [r2, #4]
 800db1c:	605a      	str	r2, [r3, #4]
 800db1e:	4401      	add	r1, r0
 800db20:	6019      	str	r1, [r3, #0]
 800db22:	e7d7      	b.n	800dad4 <_free_r+0x24>
 800db24:	d902      	bls.n	800db2c <_free_r+0x7c>
 800db26:	230c      	movs	r3, #12
 800db28:	602b      	str	r3, [r5, #0]
 800db2a:	e7d3      	b.n	800dad4 <_free_r+0x24>
 800db2c:	6820      	ldr	r0, [r4, #0]
 800db2e:	1821      	adds	r1, r4, r0
 800db30:	428a      	cmp	r2, r1
 800db32:	bf04      	itt	eq
 800db34:	6811      	ldreq	r1, [r2, #0]
 800db36:	6852      	ldreq	r2, [r2, #4]
 800db38:	6062      	str	r2, [r4, #4]
 800db3a:	bf04      	itt	eq
 800db3c:	1809      	addeq	r1, r1, r0
 800db3e:	6021      	streq	r1, [r4, #0]
 800db40:	605c      	str	r4, [r3, #4]
 800db42:	e7c7      	b.n	800dad4 <_free_r+0x24>
 800db44:	bd38      	pop	{r3, r4, r5, pc}
 800db46:	bf00      	nop
 800db48:	20000124 	.word	0x20000124

0800db4c <_malloc_r>:
 800db4c:	b570      	push	{r4, r5, r6, lr}
 800db4e:	1ccd      	adds	r5, r1, #3
 800db50:	f025 0503 	bic.w	r5, r5, #3
 800db54:	3508      	adds	r5, #8
 800db56:	2d0c      	cmp	r5, #12
 800db58:	bf38      	it	cc
 800db5a:	250c      	movcc	r5, #12
 800db5c:	2d00      	cmp	r5, #0
 800db5e:	4606      	mov	r6, r0
 800db60:	db01      	blt.n	800db66 <_malloc_r+0x1a>
 800db62:	42a9      	cmp	r1, r5
 800db64:	d903      	bls.n	800db6e <_malloc_r+0x22>
 800db66:	230c      	movs	r3, #12
 800db68:	6033      	str	r3, [r6, #0]
 800db6a:	2000      	movs	r0, #0
 800db6c:	bd70      	pop	{r4, r5, r6, pc}
 800db6e:	f000 f87d 	bl	800dc6c <__malloc_lock>
 800db72:	4a21      	ldr	r2, [pc, #132]	; (800dbf8 <_malloc_r+0xac>)
 800db74:	6814      	ldr	r4, [r2, #0]
 800db76:	4621      	mov	r1, r4
 800db78:	b991      	cbnz	r1, 800dba0 <_malloc_r+0x54>
 800db7a:	4c20      	ldr	r4, [pc, #128]	; (800dbfc <_malloc_r+0xb0>)
 800db7c:	6823      	ldr	r3, [r4, #0]
 800db7e:	b91b      	cbnz	r3, 800db88 <_malloc_r+0x3c>
 800db80:	4630      	mov	r0, r6
 800db82:	f000 f863 	bl	800dc4c <_sbrk_r>
 800db86:	6020      	str	r0, [r4, #0]
 800db88:	4629      	mov	r1, r5
 800db8a:	4630      	mov	r0, r6
 800db8c:	f000 f85e 	bl	800dc4c <_sbrk_r>
 800db90:	1c43      	adds	r3, r0, #1
 800db92:	d124      	bne.n	800dbde <_malloc_r+0x92>
 800db94:	230c      	movs	r3, #12
 800db96:	6033      	str	r3, [r6, #0]
 800db98:	4630      	mov	r0, r6
 800db9a:	f000 f868 	bl	800dc6e <__malloc_unlock>
 800db9e:	e7e4      	b.n	800db6a <_malloc_r+0x1e>
 800dba0:	680b      	ldr	r3, [r1, #0]
 800dba2:	1b5b      	subs	r3, r3, r5
 800dba4:	d418      	bmi.n	800dbd8 <_malloc_r+0x8c>
 800dba6:	2b0b      	cmp	r3, #11
 800dba8:	d90f      	bls.n	800dbca <_malloc_r+0x7e>
 800dbaa:	600b      	str	r3, [r1, #0]
 800dbac:	50cd      	str	r5, [r1, r3]
 800dbae:	18cc      	adds	r4, r1, r3
 800dbb0:	4630      	mov	r0, r6
 800dbb2:	f000 f85c 	bl	800dc6e <__malloc_unlock>
 800dbb6:	f104 000b 	add.w	r0, r4, #11
 800dbba:	1d23      	adds	r3, r4, #4
 800dbbc:	f020 0007 	bic.w	r0, r0, #7
 800dbc0:	1ac3      	subs	r3, r0, r3
 800dbc2:	d0d3      	beq.n	800db6c <_malloc_r+0x20>
 800dbc4:	425a      	negs	r2, r3
 800dbc6:	50e2      	str	r2, [r4, r3]
 800dbc8:	e7d0      	b.n	800db6c <_malloc_r+0x20>
 800dbca:	428c      	cmp	r4, r1
 800dbcc:	684b      	ldr	r3, [r1, #4]
 800dbce:	bf16      	itet	ne
 800dbd0:	6063      	strne	r3, [r4, #4]
 800dbd2:	6013      	streq	r3, [r2, #0]
 800dbd4:	460c      	movne	r4, r1
 800dbd6:	e7eb      	b.n	800dbb0 <_malloc_r+0x64>
 800dbd8:	460c      	mov	r4, r1
 800dbda:	6849      	ldr	r1, [r1, #4]
 800dbdc:	e7cc      	b.n	800db78 <_malloc_r+0x2c>
 800dbde:	1cc4      	adds	r4, r0, #3
 800dbe0:	f024 0403 	bic.w	r4, r4, #3
 800dbe4:	42a0      	cmp	r0, r4
 800dbe6:	d005      	beq.n	800dbf4 <_malloc_r+0xa8>
 800dbe8:	1a21      	subs	r1, r4, r0
 800dbea:	4630      	mov	r0, r6
 800dbec:	f000 f82e 	bl	800dc4c <_sbrk_r>
 800dbf0:	3001      	adds	r0, #1
 800dbf2:	d0cf      	beq.n	800db94 <_malloc_r+0x48>
 800dbf4:	6025      	str	r5, [r4, #0]
 800dbf6:	e7db      	b.n	800dbb0 <_malloc_r+0x64>
 800dbf8:	20000124 	.word	0x20000124
 800dbfc:	20000128 	.word	0x20000128

0800dc00 <_realloc_r>:
 800dc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc02:	4607      	mov	r7, r0
 800dc04:	4614      	mov	r4, r2
 800dc06:	460e      	mov	r6, r1
 800dc08:	b921      	cbnz	r1, 800dc14 <_realloc_r+0x14>
 800dc0a:	4611      	mov	r1, r2
 800dc0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dc10:	f7ff bf9c 	b.w	800db4c <_malloc_r>
 800dc14:	b922      	cbnz	r2, 800dc20 <_realloc_r+0x20>
 800dc16:	f7ff ff4b 	bl	800dab0 <_free_r>
 800dc1a:	4625      	mov	r5, r4
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc20:	f000 f826 	bl	800dc70 <_malloc_usable_size_r>
 800dc24:	42a0      	cmp	r0, r4
 800dc26:	d20f      	bcs.n	800dc48 <_realloc_r+0x48>
 800dc28:	4621      	mov	r1, r4
 800dc2a:	4638      	mov	r0, r7
 800dc2c:	f7ff ff8e 	bl	800db4c <_malloc_r>
 800dc30:	4605      	mov	r5, r0
 800dc32:	2800      	cmp	r0, #0
 800dc34:	d0f2      	beq.n	800dc1c <_realloc_r+0x1c>
 800dc36:	4631      	mov	r1, r6
 800dc38:	4622      	mov	r2, r4
 800dc3a:	f7ff ff15 	bl	800da68 <memcpy>
 800dc3e:	4631      	mov	r1, r6
 800dc40:	4638      	mov	r0, r7
 800dc42:	f7ff ff35 	bl	800dab0 <_free_r>
 800dc46:	e7e9      	b.n	800dc1c <_realloc_r+0x1c>
 800dc48:	4635      	mov	r5, r6
 800dc4a:	e7e7      	b.n	800dc1c <_realloc_r+0x1c>

0800dc4c <_sbrk_r>:
 800dc4c:	b538      	push	{r3, r4, r5, lr}
 800dc4e:	4c06      	ldr	r4, [pc, #24]	; (800dc68 <_sbrk_r+0x1c>)
 800dc50:	2300      	movs	r3, #0
 800dc52:	4605      	mov	r5, r0
 800dc54:	4608      	mov	r0, r1
 800dc56:	6023      	str	r3, [r4, #0]
 800dc58:	f7ff fb5e 	bl	800d318 <_sbrk>
 800dc5c:	1c43      	adds	r3, r0, #1
 800dc5e:	d102      	bne.n	800dc66 <_sbrk_r+0x1a>
 800dc60:	6823      	ldr	r3, [r4, #0]
 800dc62:	b103      	cbz	r3, 800dc66 <_sbrk_r+0x1a>
 800dc64:	602b      	str	r3, [r5, #0]
 800dc66:	bd38      	pop	{r3, r4, r5, pc}
 800dc68:	200013dc 	.word	0x200013dc

0800dc6c <__malloc_lock>:
 800dc6c:	4770      	bx	lr

0800dc6e <__malloc_unlock>:
 800dc6e:	4770      	bx	lr

0800dc70 <_malloc_usable_size_r>:
 800dc70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc74:	1f18      	subs	r0, r3, #4
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	bfbc      	itt	lt
 800dc7a:	580b      	ldrlt	r3, [r1, r0]
 800dc7c:	18c0      	addlt	r0, r0, r3
 800dc7e:	4770      	bx	lr

0800dc80 <cos>:
 800dc80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc82:	ec51 0b10 	vmov	r0, r1, d0
 800dc86:	4a1e      	ldr	r2, [pc, #120]	; (800dd00 <cos+0x80>)
 800dc88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	dc06      	bgt.n	800dc9e <cos+0x1e>
 800dc90:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800dcf8 <cos+0x78>
 800dc94:	f001 fa00 	bl	800f098 <__kernel_cos>
 800dc98:	ec51 0b10 	vmov	r0, r1, d0
 800dc9c:	e007      	b.n	800dcae <cos+0x2e>
 800dc9e:	4a19      	ldr	r2, [pc, #100]	; (800dd04 <cos+0x84>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	dd09      	ble.n	800dcb8 <cos+0x38>
 800dca4:	ee10 2a10 	vmov	r2, s0
 800dca8:	460b      	mov	r3, r1
 800dcaa:	f7f2 faed 	bl	8000288 <__aeabi_dsub>
 800dcae:	ec41 0b10 	vmov	d0, r0, r1
 800dcb2:	b005      	add	sp, #20
 800dcb4:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcb8:	4668      	mov	r0, sp
 800dcba:	f000 ff49 	bl	800eb50 <__ieee754_rem_pio2>
 800dcbe:	f000 0003 	and.w	r0, r0, #3
 800dcc2:	2801      	cmp	r0, #1
 800dcc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dcc8:	ed9d 0b00 	vldr	d0, [sp]
 800dccc:	d007      	beq.n	800dcde <cos+0x5e>
 800dcce:	2802      	cmp	r0, #2
 800dcd0:	d00e      	beq.n	800dcf0 <cos+0x70>
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	d0de      	beq.n	800dc94 <cos+0x14>
 800dcd6:	2001      	movs	r0, #1
 800dcd8:	f001 fde6 	bl	800f8a8 <__kernel_sin>
 800dcdc:	e7dc      	b.n	800dc98 <cos+0x18>
 800dcde:	f001 fde3 	bl	800f8a8 <__kernel_sin>
 800dce2:	ec53 2b10 	vmov	r2, r3, d0
 800dce6:	ee10 0a10 	vmov	r0, s0
 800dcea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dcee:	e7de      	b.n	800dcae <cos+0x2e>
 800dcf0:	f001 f9d2 	bl	800f098 <__kernel_cos>
 800dcf4:	e7f5      	b.n	800dce2 <cos+0x62>
 800dcf6:	bf00      	nop
	...
 800dd00:	3fe921fb 	.word	0x3fe921fb
 800dd04:	7fefffff 	.word	0x7fefffff

0800dd08 <sin>:
 800dd08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd0a:	ec51 0b10 	vmov	r0, r1, d0
 800dd0e:	4a20      	ldr	r2, [pc, #128]	; (800dd90 <sin+0x88>)
 800dd10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dd14:	4293      	cmp	r3, r2
 800dd16:	dc07      	bgt.n	800dd28 <sin+0x20>
 800dd18:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800dd88 <sin+0x80>
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	f001 fdc3 	bl	800f8a8 <__kernel_sin>
 800dd22:	ec51 0b10 	vmov	r0, r1, d0
 800dd26:	e007      	b.n	800dd38 <sin+0x30>
 800dd28:	4a1a      	ldr	r2, [pc, #104]	; (800dd94 <sin+0x8c>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	dd09      	ble.n	800dd42 <sin+0x3a>
 800dd2e:	ee10 2a10 	vmov	r2, s0
 800dd32:	460b      	mov	r3, r1
 800dd34:	f7f2 faa8 	bl	8000288 <__aeabi_dsub>
 800dd38:	ec41 0b10 	vmov	d0, r0, r1
 800dd3c:	b005      	add	sp, #20
 800dd3e:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd42:	4668      	mov	r0, sp
 800dd44:	f000 ff04 	bl	800eb50 <__ieee754_rem_pio2>
 800dd48:	f000 0003 	and.w	r0, r0, #3
 800dd4c:	2801      	cmp	r0, #1
 800dd4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd52:	ed9d 0b00 	vldr	d0, [sp]
 800dd56:	d004      	beq.n	800dd62 <sin+0x5a>
 800dd58:	2802      	cmp	r0, #2
 800dd5a:	d005      	beq.n	800dd68 <sin+0x60>
 800dd5c:	b970      	cbnz	r0, 800dd7c <sin+0x74>
 800dd5e:	2001      	movs	r0, #1
 800dd60:	e7dd      	b.n	800dd1e <sin+0x16>
 800dd62:	f001 f999 	bl	800f098 <__kernel_cos>
 800dd66:	e7dc      	b.n	800dd22 <sin+0x1a>
 800dd68:	2001      	movs	r0, #1
 800dd6a:	f001 fd9d 	bl	800f8a8 <__kernel_sin>
 800dd6e:	ec53 2b10 	vmov	r2, r3, d0
 800dd72:	ee10 0a10 	vmov	r0, s0
 800dd76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dd7a:	e7dd      	b.n	800dd38 <sin+0x30>
 800dd7c:	f001 f98c 	bl	800f098 <__kernel_cos>
 800dd80:	e7f5      	b.n	800dd6e <sin+0x66>
 800dd82:	bf00      	nop
 800dd84:	f3af 8000 	nop.w
	...
 800dd90:	3fe921fb 	.word	0x3fe921fb
 800dd94:	7fefffff 	.word	0x7fefffff

0800dd98 <pow>:
 800dd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd9c:	ed2d 8b04 	vpush	{d8-d9}
 800dda0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800e074 <pow+0x2dc>
 800dda4:	b08d      	sub	sp, #52	; 0x34
 800dda6:	ec57 6b10 	vmov	r6, r7, d0
 800ddaa:	ec55 4b11 	vmov	r4, r5, d1
 800ddae:	f000 f9bf 	bl	800e130 <__ieee754_pow>
 800ddb2:	f999 3000 	ldrsb.w	r3, [r9]
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	eeb0 8a40 	vmov.f32	s16, s0
 800ddbe:	eef0 8a60 	vmov.f32	s17, s1
 800ddc2:	46c8      	mov	r8, r9
 800ddc4:	d05f      	beq.n	800de86 <pow+0xee>
 800ddc6:	4622      	mov	r2, r4
 800ddc8:	462b      	mov	r3, r5
 800ddca:	4620      	mov	r0, r4
 800ddcc:	4629      	mov	r1, r5
 800ddce:	f7f2 fead 	bl	8000b2c <__aeabi_dcmpun>
 800ddd2:	4683      	mov	fp, r0
 800ddd4:	2800      	cmp	r0, #0
 800ddd6:	d156      	bne.n	800de86 <pow+0xee>
 800ddd8:	4632      	mov	r2, r6
 800ddda:	463b      	mov	r3, r7
 800dddc:	4630      	mov	r0, r6
 800ddde:	4639      	mov	r1, r7
 800dde0:	f7f2 fea4 	bl	8000b2c <__aeabi_dcmpun>
 800dde4:	9001      	str	r0, [sp, #4]
 800dde6:	b1e8      	cbz	r0, 800de24 <pow+0x8c>
 800dde8:	2200      	movs	r2, #0
 800ddea:	2300      	movs	r3, #0
 800ddec:	4620      	mov	r0, r4
 800ddee:	4629      	mov	r1, r5
 800ddf0:	f7f2 fe6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	d046      	beq.n	800de86 <pow+0xee>
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	9302      	str	r3, [sp, #8]
 800ddfc:	4b96      	ldr	r3, [pc, #600]	; (800e058 <pow+0x2c0>)
 800ddfe:	9303      	str	r3, [sp, #12]
 800de00:	4b96      	ldr	r3, [pc, #600]	; (800e05c <pow+0x2c4>)
 800de02:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800de06:	2200      	movs	r2, #0
 800de08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800de0c:	9b00      	ldr	r3, [sp, #0]
 800de0e:	2b02      	cmp	r3, #2
 800de10:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800de14:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800de18:	d033      	beq.n	800de82 <pow+0xea>
 800de1a:	a802      	add	r0, sp, #8
 800de1c:	f001 fe94 	bl	800fb48 <matherr>
 800de20:	bb48      	cbnz	r0, 800de76 <pow+0xde>
 800de22:	e05d      	b.n	800dee0 <pow+0x148>
 800de24:	f04f 0a00 	mov.w	sl, #0
 800de28:	f04f 0b00 	mov.w	fp, #0
 800de2c:	4652      	mov	r2, sl
 800de2e:	465b      	mov	r3, fp
 800de30:	4630      	mov	r0, r6
 800de32:	4639      	mov	r1, r7
 800de34:	f7f2 fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 800de38:	ec4b ab19 	vmov	d9, sl, fp
 800de3c:	2800      	cmp	r0, #0
 800de3e:	d054      	beq.n	800deea <pow+0x152>
 800de40:	4652      	mov	r2, sl
 800de42:	465b      	mov	r3, fp
 800de44:	4620      	mov	r0, r4
 800de46:	4629      	mov	r1, r5
 800de48:	f7f2 fe3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800de4c:	4680      	mov	r8, r0
 800de4e:	b318      	cbz	r0, 800de98 <pow+0x100>
 800de50:	2301      	movs	r3, #1
 800de52:	9302      	str	r3, [sp, #8]
 800de54:	4b80      	ldr	r3, [pc, #512]	; (800e058 <pow+0x2c0>)
 800de56:	9303      	str	r3, [sp, #12]
 800de58:	9b01      	ldr	r3, [sp, #4]
 800de5a:	930a      	str	r3, [sp, #40]	; 0x28
 800de5c:	9b00      	ldr	r3, [sp, #0]
 800de5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800de62:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800de66:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d0d5      	beq.n	800de1a <pow+0x82>
 800de6e:	4b7b      	ldr	r3, [pc, #492]	; (800e05c <pow+0x2c4>)
 800de70:	2200      	movs	r2, #0
 800de72:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800de76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de78:	b11b      	cbz	r3, 800de82 <pow+0xea>
 800de7a:	f7ff fab9 	bl	800d3f0 <__errno>
 800de7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de80:	6003      	str	r3, [r0, #0]
 800de82:	ed9d 8b08 	vldr	d8, [sp, #32]
 800de86:	eeb0 0a48 	vmov.f32	s0, s16
 800de8a:	eef0 0a68 	vmov.f32	s1, s17
 800de8e:	b00d      	add	sp, #52	; 0x34
 800de90:	ecbd 8b04 	vpop	{d8-d9}
 800de94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de98:	ec45 4b10 	vmov	d0, r4, r5
 800de9c:	f001 fdc7 	bl	800fa2e <finite>
 800dea0:	2800      	cmp	r0, #0
 800dea2:	d0f0      	beq.n	800de86 <pow+0xee>
 800dea4:	4652      	mov	r2, sl
 800dea6:	465b      	mov	r3, fp
 800dea8:	4620      	mov	r0, r4
 800deaa:	4629      	mov	r1, r5
 800deac:	f7f2 fe16 	bl	8000adc <__aeabi_dcmplt>
 800deb0:	2800      	cmp	r0, #0
 800deb2:	d0e8      	beq.n	800de86 <pow+0xee>
 800deb4:	2301      	movs	r3, #1
 800deb6:	9302      	str	r3, [sp, #8]
 800deb8:	4b67      	ldr	r3, [pc, #412]	; (800e058 <pow+0x2c0>)
 800deba:	9303      	str	r3, [sp, #12]
 800debc:	f999 3000 	ldrsb.w	r3, [r9]
 800dec0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800dec4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800dec8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800decc:	b913      	cbnz	r3, 800ded4 <pow+0x13c>
 800dece:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ded2:	e7a2      	b.n	800de1a <pow+0x82>
 800ded4:	4962      	ldr	r1, [pc, #392]	; (800e060 <pow+0x2c8>)
 800ded6:	2000      	movs	r0, #0
 800ded8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dedc:	2b02      	cmp	r3, #2
 800dede:	d19c      	bne.n	800de1a <pow+0x82>
 800dee0:	f7ff fa86 	bl	800d3f0 <__errno>
 800dee4:	2321      	movs	r3, #33	; 0x21
 800dee6:	6003      	str	r3, [r0, #0]
 800dee8:	e7c5      	b.n	800de76 <pow+0xde>
 800deea:	eeb0 0a48 	vmov.f32	s0, s16
 800deee:	eef0 0a68 	vmov.f32	s1, s17
 800def2:	f001 fd9c 	bl	800fa2e <finite>
 800def6:	9000      	str	r0, [sp, #0]
 800def8:	2800      	cmp	r0, #0
 800defa:	f040 8081 	bne.w	800e000 <pow+0x268>
 800defe:	ec47 6b10 	vmov	d0, r6, r7
 800df02:	f001 fd94 	bl	800fa2e <finite>
 800df06:	2800      	cmp	r0, #0
 800df08:	d07a      	beq.n	800e000 <pow+0x268>
 800df0a:	ec45 4b10 	vmov	d0, r4, r5
 800df0e:	f001 fd8e 	bl	800fa2e <finite>
 800df12:	2800      	cmp	r0, #0
 800df14:	d074      	beq.n	800e000 <pow+0x268>
 800df16:	ec53 2b18 	vmov	r2, r3, d8
 800df1a:	ee18 0a10 	vmov	r0, s16
 800df1e:	4619      	mov	r1, r3
 800df20:	f7f2 fe04 	bl	8000b2c <__aeabi_dcmpun>
 800df24:	f999 9000 	ldrsb.w	r9, [r9]
 800df28:	4b4b      	ldr	r3, [pc, #300]	; (800e058 <pow+0x2c0>)
 800df2a:	b1b0      	cbz	r0, 800df5a <pow+0x1c2>
 800df2c:	2201      	movs	r2, #1
 800df2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800df32:	9b00      	ldr	r3, [sp, #0]
 800df34:	930a      	str	r3, [sp, #40]	; 0x28
 800df36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800df3a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800df3e:	f1b9 0f00 	cmp.w	r9, #0
 800df42:	d0c4      	beq.n	800dece <pow+0x136>
 800df44:	4652      	mov	r2, sl
 800df46:	465b      	mov	r3, fp
 800df48:	4650      	mov	r0, sl
 800df4a:	4659      	mov	r1, fp
 800df4c:	f7f2 fc7e 	bl	800084c <__aeabi_ddiv>
 800df50:	f1b9 0f02 	cmp.w	r9, #2
 800df54:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800df58:	e7c1      	b.n	800dede <pow+0x146>
 800df5a:	2203      	movs	r2, #3
 800df5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800df60:	900a      	str	r0, [sp, #40]	; 0x28
 800df62:	4629      	mov	r1, r5
 800df64:	4620      	mov	r0, r4
 800df66:	2200      	movs	r2, #0
 800df68:	4b3e      	ldr	r3, [pc, #248]	; (800e064 <pow+0x2cc>)
 800df6a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800df6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800df72:	f7f2 fb41 	bl	80005f8 <__aeabi_dmul>
 800df76:	4604      	mov	r4, r0
 800df78:	460d      	mov	r5, r1
 800df7a:	f1b9 0f00 	cmp.w	r9, #0
 800df7e:	d124      	bne.n	800dfca <pow+0x232>
 800df80:	4b39      	ldr	r3, [pc, #228]	; (800e068 <pow+0x2d0>)
 800df82:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800df86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800df8a:	4630      	mov	r0, r6
 800df8c:	4652      	mov	r2, sl
 800df8e:	465b      	mov	r3, fp
 800df90:	4639      	mov	r1, r7
 800df92:	f7f2 fda3 	bl	8000adc <__aeabi_dcmplt>
 800df96:	2800      	cmp	r0, #0
 800df98:	d056      	beq.n	800e048 <pow+0x2b0>
 800df9a:	ec45 4b10 	vmov	d0, r4, r5
 800df9e:	f001 fddf 	bl	800fb60 <rint>
 800dfa2:	4622      	mov	r2, r4
 800dfa4:	462b      	mov	r3, r5
 800dfa6:	ec51 0b10 	vmov	r0, r1, d0
 800dfaa:	f7f2 fd8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfae:	b920      	cbnz	r0, 800dfba <pow+0x222>
 800dfb0:	4b2e      	ldr	r3, [pc, #184]	; (800e06c <pow+0x2d4>)
 800dfb2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800dfb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dfba:	f998 3000 	ldrsb.w	r3, [r8]
 800dfbe:	2b02      	cmp	r3, #2
 800dfc0:	d142      	bne.n	800e048 <pow+0x2b0>
 800dfc2:	f7ff fa15 	bl	800d3f0 <__errno>
 800dfc6:	2322      	movs	r3, #34	; 0x22
 800dfc8:	e78d      	b.n	800dee6 <pow+0x14e>
 800dfca:	4b29      	ldr	r3, [pc, #164]	; (800e070 <pow+0x2d8>)
 800dfcc:	2200      	movs	r2, #0
 800dfce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	4652      	mov	r2, sl
 800dfd6:	465b      	mov	r3, fp
 800dfd8:	4639      	mov	r1, r7
 800dfda:	f7f2 fd7f 	bl	8000adc <__aeabi_dcmplt>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d0eb      	beq.n	800dfba <pow+0x222>
 800dfe2:	ec45 4b10 	vmov	d0, r4, r5
 800dfe6:	f001 fdbb 	bl	800fb60 <rint>
 800dfea:	4622      	mov	r2, r4
 800dfec:	462b      	mov	r3, r5
 800dfee:	ec51 0b10 	vmov	r0, r1, d0
 800dff2:	f7f2 fd69 	bl	8000ac8 <__aeabi_dcmpeq>
 800dff6:	2800      	cmp	r0, #0
 800dff8:	d1df      	bne.n	800dfba <pow+0x222>
 800dffa:	2200      	movs	r2, #0
 800dffc:	4b18      	ldr	r3, [pc, #96]	; (800e060 <pow+0x2c8>)
 800dffe:	e7da      	b.n	800dfb6 <pow+0x21e>
 800e000:	2200      	movs	r2, #0
 800e002:	2300      	movs	r3, #0
 800e004:	ec51 0b18 	vmov	r0, r1, d8
 800e008:	f7f2 fd5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	f43f af3a 	beq.w	800de86 <pow+0xee>
 800e012:	ec47 6b10 	vmov	d0, r6, r7
 800e016:	f001 fd0a 	bl	800fa2e <finite>
 800e01a:	2800      	cmp	r0, #0
 800e01c:	f43f af33 	beq.w	800de86 <pow+0xee>
 800e020:	ec45 4b10 	vmov	d0, r4, r5
 800e024:	f001 fd03 	bl	800fa2e <finite>
 800e028:	2800      	cmp	r0, #0
 800e02a:	f43f af2c 	beq.w	800de86 <pow+0xee>
 800e02e:	2304      	movs	r3, #4
 800e030:	9302      	str	r3, [sp, #8]
 800e032:	4b09      	ldr	r3, [pc, #36]	; (800e058 <pow+0x2c0>)
 800e034:	9303      	str	r3, [sp, #12]
 800e036:	2300      	movs	r3, #0
 800e038:	930a      	str	r3, [sp, #40]	; 0x28
 800e03a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e03e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e042:	ed8d 9b08 	vstr	d9, [sp, #32]
 800e046:	e7b8      	b.n	800dfba <pow+0x222>
 800e048:	a802      	add	r0, sp, #8
 800e04a:	f001 fd7d 	bl	800fb48 <matherr>
 800e04e:	2800      	cmp	r0, #0
 800e050:	f47f af11 	bne.w	800de76 <pow+0xde>
 800e054:	e7b5      	b.n	800dfc2 <pow+0x22a>
 800e056:	bf00      	nop
 800e058:	080100af 	.word	0x080100af
 800e05c:	3ff00000 	.word	0x3ff00000
 800e060:	fff00000 	.word	0xfff00000
 800e064:	3fe00000 	.word	0x3fe00000
 800e068:	47efffff 	.word	0x47efffff
 800e06c:	c7efffff 	.word	0xc7efffff
 800e070:	7ff00000 	.word	0x7ff00000
 800e074:	200000a4 	.word	0x200000a4

0800e078 <sqrt>:
 800e078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e07c:	ed2d 8b02 	vpush	{d8}
 800e080:	b08b      	sub	sp, #44	; 0x2c
 800e082:	ec55 4b10 	vmov	r4, r5, d0
 800e086:	f000 ff55 	bl	800ef34 <__ieee754_sqrt>
 800e08a:	4b26      	ldr	r3, [pc, #152]	; (800e124 <sqrt+0xac>)
 800e08c:	eeb0 8a40 	vmov.f32	s16, s0
 800e090:	eef0 8a60 	vmov.f32	s17, s1
 800e094:	f993 6000 	ldrsb.w	r6, [r3]
 800e098:	1c73      	adds	r3, r6, #1
 800e09a:	d02a      	beq.n	800e0f2 <sqrt+0x7a>
 800e09c:	4622      	mov	r2, r4
 800e09e:	462b      	mov	r3, r5
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	f7f2 fd42 	bl	8000b2c <__aeabi_dcmpun>
 800e0a8:	4607      	mov	r7, r0
 800e0aa:	bb10      	cbnz	r0, 800e0f2 <sqrt+0x7a>
 800e0ac:	f04f 0800 	mov.w	r8, #0
 800e0b0:	f04f 0900 	mov.w	r9, #0
 800e0b4:	4642      	mov	r2, r8
 800e0b6:	464b      	mov	r3, r9
 800e0b8:	4620      	mov	r0, r4
 800e0ba:	4629      	mov	r1, r5
 800e0bc:	f7f2 fd0e 	bl	8000adc <__aeabi_dcmplt>
 800e0c0:	b1b8      	cbz	r0, 800e0f2 <sqrt+0x7a>
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	4b18      	ldr	r3, [pc, #96]	; (800e128 <sqrt+0xb0>)
 800e0c8:	9301      	str	r3, [sp, #4]
 800e0ca:	9708      	str	r7, [sp, #32]
 800e0cc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800e0d0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e0d4:	b9b6      	cbnz	r6, 800e104 <sqrt+0x8c>
 800e0d6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800e0da:	4668      	mov	r0, sp
 800e0dc:	f001 fd34 	bl	800fb48 <matherr>
 800e0e0:	b1d0      	cbz	r0, 800e118 <sqrt+0xa0>
 800e0e2:	9b08      	ldr	r3, [sp, #32]
 800e0e4:	b11b      	cbz	r3, 800e0ee <sqrt+0x76>
 800e0e6:	f7ff f983 	bl	800d3f0 <__errno>
 800e0ea:	9b08      	ldr	r3, [sp, #32]
 800e0ec:	6003      	str	r3, [r0, #0]
 800e0ee:	ed9d 8b06 	vldr	d8, [sp, #24]
 800e0f2:	eeb0 0a48 	vmov.f32	s0, s16
 800e0f6:	eef0 0a68 	vmov.f32	s1, s17
 800e0fa:	b00b      	add	sp, #44	; 0x2c
 800e0fc:	ecbd 8b02 	vpop	{d8}
 800e100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e104:	4642      	mov	r2, r8
 800e106:	464b      	mov	r3, r9
 800e108:	4640      	mov	r0, r8
 800e10a:	4649      	mov	r1, r9
 800e10c:	f7f2 fb9e 	bl	800084c <__aeabi_ddiv>
 800e110:	2e02      	cmp	r6, #2
 800e112:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e116:	d1e0      	bne.n	800e0da <sqrt+0x62>
 800e118:	f7ff f96a 	bl	800d3f0 <__errno>
 800e11c:	2321      	movs	r3, #33	; 0x21
 800e11e:	6003      	str	r3, [r0, #0]
 800e120:	e7df      	b.n	800e0e2 <sqrt+0x6a>
 800e122:	bf00      	nop
 800e124:	200000a4 	.word	0x200000a4
 800e128:	080100b3 	.word	0x080100b3
 800e12c:	00000000 	.word	0x00000000

0800e130 <__ieee754_pow>:
 800e130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e134:	b091      	sub	sp, #68	; 0x44
 800e136:	ed8d 1b00 	vstr	d1, [sp]
 800e13a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e13e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e142:	ea58 0302 	orrs.w	r3, r8, r2
 800e146:	ec57 6b10 	vmov	r6, r7, d0
 800e14a:	f000 84be 	beq.w	800eaca <__ieee754_pow+0x99a>
 800e14e:	4b7a      	ldr	r3, [pc, #488]	; (800e338 <__ieee754_pow+0x208>)
 800e150:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e154:	429c      	cmp	r4, r3
 800e156:	463d      	mov	r5, r7
 800e158:	ee10 aa10 	vmov	sl, s0
 800e15c:	dc09      	bgt.n	800e172 <__ieee754_pow+0x42>
 800e15e:	d103      	bne.n	800e168 <__ieee754_pow+0x38>
 800e160:	b93e      	cbnz	r6, 800e172 <__ieee754_pow+0x42>
 800e162:	45a0      	cmp	r8, r4
 800e164:	dc0d      	bgt.n	800e182 <__ieee754_pow+0x52>
 800e166:	e001      	b.n	800e16c <__ieee754_pow+0x3c>
 800e168:	4598      	cmp	r8, r3
 800e16a:	dc02      	bgt.n	800e172 <__ieee754_pow+0x42>
 800e16c:	4598      	cmp	r8, r3
 800e16e:	d10e      	bne.n	800e18e <__ieee754_pow+0x5e>
 800e170:	b16a      	cbz	r2, 800e18e <__ieee754_pow+0x5e>
 800e172:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e176:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e17a:	ea54 030a 	orrs.w	r3, r4, sl
 800e17e:	f000 84a4 	beq.w	800eaca <__ieee754_pow+0x99a>
 800e182:	486e      	ldr	r0, [pc, #440]	; (800e33c <__ieee754_pow+0x20c>)
 800e184:	b011      	add	sp, #68	; 0x44
 800e186:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18a:	f001 bce1 	b.w	800fb50 <nan>
 800e18e:	2d00      	cmp	r5, #0
 800e190:	da53      	bge.n	800e23a <__ieee754_pow+0x10a>
 800e192:	4b6b      	ldr	r3, [pc, #428]	; (800e340 <__ieee754_pow+0x210>)
 800e194:	4598      	cmp	r8, r3
 800e196:	dc4d      	bgt.n	800e234 <__ieee754_pow+0x104>
 800e198:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e19c:	4598      	cmp	r8, r3
 800e19e:	dd4c      	ble.n	800e23a <__ieee754_pow+0x10a>
 800e1a0:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e1a4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e1a8:	2b14      	cmp	r3, #20
 800e1aa:	dd26      	ble.n	800e1fa <__ieee754_pow+0xca>
 800e1ac:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e1b0:	fa22 f103 	lsr.w	r1, r2, r3
 800e1b4:	fa01 f303 	lsl.w	r3, r1, r3
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	d13e      	bne.n	800e23a <__ieee754_pow+0x10a>
 800e1bc:	f001 0101 	and.w	r1, r1, #1
 800e1c0:	f1c1 0b02 	rsb	fp, r1, #2
 800e1c4:	2a00      	cmp	r2, #0
 800e1c6:	d15b      	bne.n	800e280 <__ieee754_pow+0x150>
 800e1c8:	4b5b      	ldr	r3, [pc, #364]	; (800e338 <__ieee754_pow+0x208>)
 800e1ca:	4598      	cmp	r8, r3
 800e1cc:	d124      	bne.n	800e218 <__ieee754_pow+0xe8>
 800e1ce:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e1d2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e1d6:	ea53 030a 	orrs.w	r3, r3, sl
 800e1da:	f000 8476 	beq.w	800eaca <__ieee754_pow+0x99a>
 800e1de:	4b59      	ldr	r3, [pc, #356]	; (800e344 <__ieee754_pow+0x214>)
 800e1e0:	429c      	cmp	r4, r3
 800e1e2:	dd2d      	ble.n	800e240 <__ieee754_pow+0x110>
 800e1e4:	f1b9 0f00 	cmp.w	r9, #0
 800e1e8:	f280 8473 	bge.w	800ead2 <__ieee754_pow+0x9a2>
 800e1ec:	2000      	movs	r0, #0
 800e1ee:	2100      	movs	r1, #0
 800e1f0:	ec41 0b10 	vmov	d0, r0, r1
 800e1f4:	b011      	add	sp, #68	; 0x44
 800e1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1fa:	2a00      	cmp	r2, #0
 800e1fc:	d13e      	bne.n	800e27c <__ieee754_pow+0x14c>
 800e1fe:	f1c3 0314 	rsb	r3, r3, #20
 800e202:	fa48 f103 	asr.w	r1, r8, r3
 800e206:	fa01 f303 	lsl.w	r3, r1, r3
 800e20a:	4543      	cmp	r3, r8
 800e20c:	f040 8469 	bne.w	800eae2 <__ieee754_pow+0x9b2>
 800e210:	f001 0101 	and.w	r1, r1, #1
 800e214:	f1c1 0b02 	rsb	fp, r1, #2
 800e218:	4b4b      	ldr	r3, [pc, #300]	; (800e348 <__ieee754_pow+0x218>)
 800e21a:	4598      	cmp	r8, r3
 800e21c:	d118      	bne.n	800e250 <__ieee754_pow+0x120>
 800e21e:	f1b9 0f00 	cmp.w	r9, #0
 800e222:	f280 845a 	bge.w	800eada <__ieee754_pow+0x9aa>
 800e226:	4948      	ldr	r1, [pc, #288]	; (800e348 <__ieee754_pow+0x218>)
 800e228:	4632      	mov	r2, r6
 800e22a:	463b      	mov	r3, r7
 800e22c:	2000      	movs	r0, #0
 800e22e:	f7f2 fb0d 	bl	800084c <__aeabi_ddiv>
 800e232:	e7dd      	b.n	800e1f0 <__ieee754_pow+0xc0>
 800e234:	f04f 0b02 	mov.w	fp, #2
 800e238:	e7c4      	b.n	800e1c4 <__ieee754_pow+0x94>
 800e23a:	f04f 0b00 	mov.w	fp, #0
 800e23e:	e7c1      	b.n	800e1c4 <__ieee754_pow+0x94>
 800e240:	f1b9 0f00 	cmp.w	r9, #0
 800e244:	dad2      	bge.n	800e1ec <__ieee754_pow+0xbc>
 800e246:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e24a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e24e:	e7cf      	b.n	800e1f0 <__ieee754_pow+0xc0>
 800e250:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e254:	d106      	bne.n	800e264 <__ieee754_pow+0x134>
 800e256:	4632      	mov	r2, r6
 800e258:	463b      	mov	r3, r7
 800e25a:	4610      	mov	r0, r2
 800e25c:	4619      	mov	r1, r3
 800e25e:	f7f2 f9cb 	bl	80005f8 <__aeabi_dmul>
 800e262:	e7c5      	b.n	800e1f0 <__ieee754_pow+0xc0>
 800e264:	4b39      	ldr	r3, [pc, #228]	; (800e34c <__ieee754_pow+0x21c>)
 800e266:	4599      	cmp	r9, r3
 800e268:	d10a      	bne.n	800e280 <__ieee754_pow+0x150>
 800e26a:	2d00      	cmp	r5, #0
 800e26c:	db08      	blt.n	800e280 <__ieee754_pow+0x150>
 800e26e:	ec47 6b10 	vmov	d0, r6, r7
 800e272:	b011      	add	sp, #68	; 0x44
 800e274:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e278:	f000 be5c 	b.w	800ef34 <__ieee754_sqrt>
 800e27c:	f04f 0b00 	mov.w	fp, #0
 800e280:	ec47 6b10 	vmov	d0, r6, r7
 800e284:	f001 fbca 	bl	800fa1c <fabs>
 800e288:	ec51 0b10 	vmov	r0, r1, d0
 800e28c:	f1ba 0f00 	cmp.w	sl, #0
 800e290:	d127      	bne.n	800e2e2 <__ieee754_pow+0x1b2>
 800e292:	b124      	cbz	r4, 800e29e <__ieee754_pow+0x16e>
 800e294:	4b2c      	ldr	r3, [pc, #176]	; (800e348 <__ieee754_pow+0x218>)
 800e296:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d121      	bne.n	800e2e2 <__ieee754_pow+0x1b2>
 800e29e:	f1b9 0f00 	cmp.w	r9, #0
 800e2a2:	da05      	bge.n	800e2b0 <__ieee754_pow+0x180>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	2000      	movs	r0, #0
 800e2aa:	4927      	ldr	r1, [pc, #156]	; (800e348 <__ieee754_pow+0x218>)
 800e2ac:	f7f2 face 	bl	800084c <__aeabi_ddiv>
 800e2b0:	2d00      	cmp	r5, #0
 800e2b2:	da9d      	bge.n	800e1f0 <__ieee754_pow+0xc0>
 800e2b4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e2b8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e2bc:	ea54 030b 	orrs.w	r3, r4, fp
 800e2c0:	d108      	bne.n	800e2d4 <__ieee754_pow+0x1a4>
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	4610      	mov	r0, r2
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	f7f1 ffdd 	bl	8000288 <__aeabi_dsub>
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	e7ac      	b.n	800e22e <__ieee754_pow+0xfe>
 800e2d4:	f1bb 0f01 	cmp.w	fp, #1
 800e2d8:	d18a      	bne.n	800e1f0 <__ieee754_pow+0xc0>
 800e2da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2de:	4619      	mov	r1, r3
 800e2e0:	e786      	b.n	800e1f0 <__ieee754_pow+0xc0>
 800e2e2:	0fed      	lsrs	r5, r5, #31
 800e2e4:	1e6b      	subs	r3, r5, #1
 800e2e6:	930d      	str	r3, [sp, #52]	; 0x34
 800e2e8:	ea5b 0303 	orrs.w	r3, fp, r3
 800e2ec:	d102      	bne.n	800e2f4 <__ieee754_pow+0x1c4>
 800e2ee:	4632      	mov	r2, r6
 800e2f0:	463b      	mov	r3, r7
 800e2f2:	e7e8      	b.n	800e2c6 <__ieee754_pow+0x196>
 800e2f4:	4b16      	ldr	r3, [pc, #88]	; (800e350 <__ieee754_pow+0x220>)
 800e2f6:	4598      	cmp	r8, r3
 800e2f8:	f340 80fe 	ble.w	800e4f8 <__ieee754_pow+0x3c8>
 800e2fc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e300:	4598      	cmp	r8, r3
 800e302:	dd0a      	ble.n	800e31a <__ieee754_pow+0x1ea>
 800e304:	4b0f      	ldr	r3, [pc, #60]	; (800e344 <__ieee754_pow+0x214>)
 800e306:	429c      	cmp	r4, r3
 800e308:	dc0d      	bgt.n	800e326 <__ieee754_pow+0x1f6>
 800e30a:	f1b9 0f00 	cmp.w	r9, #0
 800e30e:	f6bf af6d 	bge.w	800e1ec <__ieee754_pow+0xbc>
 800e312:	a307      	add	r3, pc, #28	; (adr r3, 800e330 <__ieee754_pow+0x200>)
 800e314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e318:	e79f      	b.n	800e25a <__ieee754_pow+0x12a>
 800e31a:	4b0e      	ldr	r3, [pc, #56]	; (800e354 <__ieee754_pow+0x224>)
 800e31c:	429c      	cmp	r4, r3
 800e31e:	ddf4      	ble.n	800e30a <__ieee754_pow+0x1da>
 800e320:	4b09      	ldr	r3, [pc, #36]	; (800e348 <__ieee754_pow+0x218>)
 800e322:	429c      	cmp	r4, r3
 800e324:	dd18      	ble.n	800e358 <__ieee754_pow+0x228>
 800e326:	f1b9 0f00 	cmp.w	r9, #0
 800e32a:	dcf2      	bgt.n	800e312 <__ieee754_pow+0x1e2>
 800e32c:	e75e      	b.n	800e1ec <__ieee754_pow+0xbc>
 800e32e:	bf00      	nop
 800e330:	8800759c 	.word	0x8800759c
 800e334:	7e37e43c 	.word	0x7e37e43c
 800e338:	7ff00000 	.word	0x7ff00000
 800e33c:	08010081 	.word	0x08010081
 800e340:	433fffff 	.word	0x433fffff
 800e344:	3fefffff 	.word	0x3fefffff
 800e348:	3ff00000 	.word	0x3ff00000
 800e34c:	3fe00000 	.word	0x3fe00000
 800e350:	41e00000 	.word	0x41e00000
 800e354:	3feffffe 	.word	0x3feffffe
 800e358:	2200      	movs	r2, #0
 800e35a:	4b63      	ldr	r3, [pc, #396]	; (800e4e8 <__ieee754_pow+0x3b8>)
 800e35c:	f7f1 ff94 	bl	8000288 <__aeabi_dsub>
 800e360:	a355      	add	r3, pc, #340	; (adr r3, 800e4b8 <__ieee754_pow+0x388>)
 800e362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e366:	4604      	mov	r4, r0
 800e368:	460d      	mov	r5, r1
 800e36a:	f7f2 f945 	bl	80005f8 <__aeabi_dmul>
 800e36e:	a354      	add	r3, pc, #336	; (adr r3, 800e4c0 <__ieee754_pow+0x390>)
 800e370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e374:	4606      	mov	r6, r0
 800e376:	460f      	mov	r7, r1
 800e378:	4620      	mov	r0, r4
 800e37a:	4629      	mov	r1, r5
 800e37c:	f7f2 f93c 	bl	80005f8 <__aeabi_dmul>
 800e380:	2200      	movs	r2, #0
 800e382:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e386:	4b59      	ldr	r3, [pc, #356]	; (800e4ec <__ieee754_pow+0x3bc>)
 800e388:	4620      	mov	r0, r4
 800e38a:	4629      	mov	r1, r5
 800e38c:	f7f2 f934 	bl	80005f8 <__aeabi_dmul>
 800e390:	4602      	mov	r2, r0
 800e392:	460b      	mov	r3, r1
 800e394:	a14c      	add	r1, pc, #304	; (adr r1, 800e4c8 <__ieee754_pow+0x398>)
 800e396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e39a:	f7f1 ff75 	bl	8000288 <__aeabi_dsub>
 800e39e:	4622      	mov	r2, r4
 800e3a0:	462b      	mov	r3, r5
 800e3a2:	f7f2 f929 	bl	80005f8 <__aeabi_dmul>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	2000      	movs	r0, #0
 800e3ac:	4950      	ldr	r1, [pc, #320]	; (800e4f0 <__ieee754_pow+0x3c0>)
 800e3ae:	f7f1 ff6b 	bl	8000288 <__aeabi_dsub>
 800e3b2:	4622      	mov	r2, r4
 800e3b4:	462b      	mov	r3, r5
 800e3b6:	4680      	mov	r8, r0
 800e3b8:	4689      	mov	r9, r1
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	4629      	mov	r1, r5
 800e3be:	f7f2 f91b 	bl	80005f8 <__aeabi_dmul>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	4640      	mov	r0, r8
 800e3c8:	4649      	mov	r1, r9
 800e3ca:	f7f2 f915 	bl	80005f8 <__aeabi_dmul>
 800e3ce:	a340      	add	r3, pc, #256	; (adr r3, 800e4d0 <__ieee754_pow+0x3a0>)
 800e3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d4:	f7f2 f910 	bl	80005f8 <__aeabi_dmul>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	460b      	mov	r3, r1
 800e3dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3e0:	f7f1 ff52 	bl	8000288 <__aeabi_dsub>
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	460b      	mov	r3, r1
 800e3e8:	4604      	mov	r4, r0
 800e3ea:	460d      	mov	r5, r1
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	4639      	mov	r1, r7
 800e3f0:	f7f1 ff4c 	bl	800028c <__adddf3>
 800e3f4:	2000      	movs	r0, #0
 800e3f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3fa:	4632      	mov	r2, r6
 800e3fc:	463b      	mov	r3, r7
 800e3fe:	f7f1 ff43 	bl	8000288 <__aeabi_dsub>
 800e402:	4602      	mov	r2, r0
 800e404:	460b      	mov	r3, r1
 800e406:	4620      	mov	r0, r4
 800e408:	4629      	mov	r1, r5
 800e40a:	f7f1 ff3d 	bl	8000288 <__aeabi_dsub>
 800e40e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e410:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800e414:	4313      	orrs	r3, r2
 800e416:	4606      	mov	r6, r0
 800e418:	460f      	mov	r7, r1
 800e41a:	f040 81eb 	bne.w	800e7f4 <__ieee754_pow+0x6c4>
 800e41e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e4d8 <__ieee754_pow+0x3a8>
 800e422:	e9dd 4500 	ldrd	r4, r5, [sp]
 800e426:	2400      	movs	r4, #0
 800e428:	4622      	mov	r2, r4
 800e42a:	462b      	mov	r3, r5
 800e42c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e430:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e434:	f7f1 ff28 	bl	8000288 <__aeabi_dsub>
 800e438:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e43c:	f7f2 f8dc 	bl	80005f8 <__aeabi_dmul>
 800e440:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e444:	4680      	mov	r8, r0
 800e446:	4689      	mov	r9, r1
 800e448:	4630      	mov	r0, r6
 800e44a:	4639      	mov	r1, r7
 800e44c:	f7f2 f8d4 	bl	80005f8 <__aeabi_dmul>
 800e450:	4602      	mov	r2, r0
 800e452:	460b      	mov	r3, r1
 800e454:	4640      	mov	r0, r8
 800e456:	4649      	mov	r1, r9
 800e458:	f7f1 ff18 	bl	800028c <__adddf3>
 800e45c:	4622      	mov	r2, r4
 800e45e:	462b      	mov	r3, r5
 800e460:	4680      	mov	r8, r0
 800e462:	4689      	mov	r9, r1
 800e464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e468:	f7f2 f8c6 	bl	80005f8 <__aeabi_dmul>
 800e46c:	460b      	mov	r3, r1
 800e46e:	4604      	mov	r4, r0
 800e470:	460d      	mov	r5, r1
 800e472:	4602      	mov	r2, r0
 800e474:	4649      	mov	r1, r9
 800e476:	4640      	mov	r0, r8
 800e478:	e9cd 4500 	strd	r4, r5, [sp]
 800e47c:	f7f1 ff06 	bl	800028c <__adddf3>
 800e480:	4b1c      	ldr	r3, [pc, #112]	; (800e4f4 <__ieee754_pow+0x3c4>)
 800e482:	4299      	cmp	r1, r3
 800e484:	4606      	mov	r6, r0
 800e486:	460f      	mov	r7, r1
 800e488:	468b      	mov	fp, r1
 800e48a:	f340 82f7 	ble.w	800ea7c <__ieee754_pow+0x94c>
 800e48e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e492:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e496:	4303      	orrs	r3, r0
 800e498:	f000 81ea 	beq.w	800e870 <__ieee754_pow+0x740>
 800e49c:	a310      	add	r3, pc, #64	; (adr r3, 800e4e0 <__ieee754_pow+0x3b0>)
 800e49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4a6:	f7f2 f8a7 	bl	80005f8 <__aeabi_dmul>
 800e4aa:	a30d      	add	r3, pc, #52	; (adr r3, 800e4e0 <__ieee754_pow+0x3b0>)
 800e4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b0:	e6d5      	b.n	800e25e <__ieee754_pow+0x12e>
 800e4b2:	bf00      	nop
 800e4b4:	f3af 8000 	nop.w
 800e4b8:	60000000 	.word	0x60000000
 800e4bc:	3ff71547 	.word	0x3ff71547
 800e4c0:	f85ddf44 	.word	0xf85ddf44
 800e4c4:	3e54ae0b 	.word	0x3e54ae0b
 800e4c8:	55555555 	.word	0x55555555
 800e4cc:	3fd55555 	.word	0x3fd55555
 800e4d0:	652b82fe 	.word	0x652b82fe
 800e4d4:	3ff71547 	.word	0x3ff71547
 800e4d8:	00000000 	.word	0x00000000
 800e4dc:	bff00000 	.word	0xbff00000
 800e4e0:	8800759c 	.word	0x8800759c
 800e4e4:	7e37e43c 	.word	0x7e37e43c
 800e4e8:	3ff00000 	.word	0x3ff00000
 800e4ec:	3fd00000 	.word	0x3fd00000
 800e4f0:	3fe00000 	.word	0x3fe00000
 800e4f4:	408fffff 	.word	0x408fffff
 800e4f8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e4fc:	f04f 0200 	mov.w	r2, #0
 800e500:	da05      	bge.n	800e50e <__ieee754_pow+0x3de>
 800e502:	4bd3      	ldr	r3, [pc, #844]	; (800e850 <__ieee754_pow+0x720>)
 800e504:	f7f2 f878 	bl	80005f8 <__aeabi_dmul>
 800e508:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e50c:	460c      	mov	r4, r1
 800e50e:	1523      	asrs	r3, r4, #20
 800e510:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e514:	4413      	add	r3, r2
 800e516:	9309      	str	r3, [sp, #36]	; 0x24
 800e518:	4bce      	ldr	r3, [pc, #824]	; (800e854 <__ieee754_pow+0x724>)
 800e51a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e51e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e522:	429c      	cmp	r4, r3
 800e524:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e528:	dd08      	ble.n	800e53c <__ieee754_pow+0x40c>
 800e52a:	4bcb      	ldr	r3, [pc, #812]	; (800e858 <__ieee754_pow+0x728>)
 800e52c:	429c      	cmp	r4, r3
 800e52e:	f340 815e 	ble.w	800e7ee <__ieee754_pow+0x6be>
 800e532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e534:	3301      	adds	r3, #1
 800e536:	9309      	str	r3, [sp, #36]	; 0x24
 800e538:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e53c:	f04f 0a00 	mov.w	sl, #0
 800e540:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e544:	930c      	str	r3, [sp, #48]	; 0x30
 800e546:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e548:	4bc4      	ldr	r3, [pc, #784]	; (800e85c <__ieee754_pow+0x72c>)
 800e54a:	4413      	add	r3, r2
 800e54c:	ed93 7b00 	vldr	d7, [r3]
 800e550:	4629      	mov	r1, r5
 800e552:	ec53 2b17 	vmov	r2, r3, d7
 800e556:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e55a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e55e:	f7f1 fe93 	bl	8000288 <__aeabi_dsub>
 800e562:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e566:	4606      	mov	r6, r0
 800e568:	460f      	mov	r7, r1
 800e56a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e56e:	f7f1 fe8d 	bl	800028c <__adddf3>
 800e572:	4602      	mov	r2, r0
 800e574:	460b      	mov	r3, r1
 800e576:	2000      	movs	r0, #0
 800e578:	49b9      	ldr	r1, [pc, #740]	; (800e860 <__ieee754_pow+0x730>)
 800e57a:	f7f2 f967 	bl	800084c <__aeabi_ddiv>
 800e57e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e582:	4602      	mov	r2, r0
 800e584:	460b      	mov	r3, r1
 800e586:	4630      	mov	r0, r6
 800e588:	4639      	mov	r1, r7
 800e58a:	f7f2 f835 	bl	80005f8 <__aeabi_dmul>
 800e58e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e592:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e596:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e59a:	2300      	movs	r3, #0
 800e59c:	9302      	str	r3, [sp, #8]
 800e59e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e5a2:	106d      	asrs	r5, r5, #1
 800e5a4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e5a8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e5b2:	4640      	mov	r0, r8
 800e5b4:	4649      	mov	r1, r9
 800e5b6:	4614      	mov	r4, r2
 800e5b8:	461d      	mov	r5, r3
 800e5ba:	f7f2 f81d 	bl	80005f8 <__aeabi_dmul>
 800e5be:	4602      	mov	r2, r0
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	4639      	mov	r1, r7
 800e5c6:	f7f1 fe5f 	bl	8000288 <__aeabi_dsub>
 800e5ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e5ce:	4606      	mov	r6, r0
 800e5d0:	460f      	mov	r7, r1
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	4629      	mov	r1, r5
 800e5d6:	f7f1 fe57 	bl	8000288 <__aeabi_dsub>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	460b      	mov	r3, r1
 800e5de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e5e2:	f7f1 fe51 	bl	8000288 <__aeabi_dsub>
 800e5e6:	4642      	mov	r2, r8
 800e5e8:	464b      	mov	r3, r9
 800e5ea:	f7f2 f805 	bl	80005f8 <__aeabi_dmul>
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	4639      	mov	r1, r7
 800e5f6:	f7f1 fe47 	bl	8000288 <__aeabi_dsub>
 800e5fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e5fe:	f7f1 fffb 	bl	80005f8 <__aeabi_dmul>
 800e602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e606:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e60a:	4610      	mov	r0, r2
 800e60c:	4619      	mov	r1, r3
 800e60e:	f7f1 fff3 	bl	80005f8 <__aeabi_dmul>
 800e612:	a37b      	add	r3, pc, #492	; (adr r3, 800e800 <__ieee754_pow+0x6d0>)
 800e614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e618:	4604      	mov	r4, r0
 800e61a:	460d      	mov	r5, r1
 800e61c:	f7f1 ffec 	bl	80005f8 <__aeabi_dmul>
 800e620:	a379      	add	r3, pc, #484	; (adr r3, 800e808 <__ieee754_pow+0x6d8>)
 800e622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e626:	f7f1 fe31 	bl	800028c <__adddf3>
 800e62a:	4622      	mov	r2, r4
 800e62c:	462b      	mov	r3, r5
 800e62e:	f7f1 ffe3 	bl	80005f8 <__aeabi_dmul>
 800e632:	a377      	add	r3, pc, #476	; (adr r3, 800e810 <__ieee754_pow+0x6e0>)
 800e634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e638:	f7f1 fe28 	bl	800028c <__adddf3>
 800e63c:	4622      	mov	r2, r4
 800e63e:	462b      	mov	r3, r5
 800e640:	f7f1 ffda 	bl	80005f8 <__aeabi_dmul>
 800e644:	a374      	add	r3, pc, #464	; (adr r3, 800e818 <__ieee754_pow+0x6e8>)
 800e646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64a:	f7f1 fe1f 	bl	800028c <__adddf3>
 800e64e:	4622      	mov	r2, r4
 800e650:	462b      	mov	r3, r5
 800e652:	f7f1 ffd1 	bl	80005f8 <__aeabi_dmul>
 800e656:	a372      	add	r3, pc, #456	; (adr r3, 800e820 <__ieee754_pow+0x6f0>)
 800e658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65c:	f7f1 fe16 	bl	800028c <__adddf3>
 800e660:	4622      	mov	r2, r4
 800e662:	462b      	mov	r3, r5
 800e664:	f7f1 ffc8 	bl	80005f8 <__aeabi_dmul>
 800e668:	a36f      	add	r3, pc, #444	; (adr r3, 800e828 <__ieee754_pow+0x6f8>)
 800e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66e:	f7f1 fe0d 	bl	800028c <__adddf3>
 800e672:	4622      	mov	r2, r4
 800e674:	4606      	mov	r6, r0
 800e676:	460f      	mov	r7, r1
 800e678:	462b      	mov	r3, r5
 800e67a:	4620      	mov	r0, r4
 800e67c:	4629      	mov	r1, r5
 800e67e:	f7f1 ffbb 	bl	80005f8 <__aeabi_dmul>
 800e682:	4602      	mov	r2, r0
 800e684:	460b      	mov	r3, r1
 800e686:	4630      	mov	r0, r6
 800e688:	4639      	mov	r1, r7
 800e68a:	f7f1 ffb5 	bl	80005f8 <__aeabi_dmul>
 800e68e:	4642      	mov	r2, r8
 800e690:	4604      	mov	r4, r0
 800e692:	460d      	mov	r5, r1
 800e694:	464b      	mov	r3, r9
 800e696:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e69a:	f7f1 fdf7 	bl	800028c <__adddf3>
 800e69e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e6a2:	f7f1 ffa9 	bl	80005f8 <__aeabi_dmul>
 800e6a6:	4622      	mov	r2, r4
 800e6a8:	462b      	mov	r3, r5
 800e6aa:	f7f1 fdef 	bl	800028c <__adddf3>
 800e6ae:	4642      	mov	r2, r8
 800e6b0:	4606      	mov	r6, r0
 800e6b2:	460f      	mov	r7, r1
 800e6b4:	464b      	mov	r3, r9
 800e6b6:	4640      	mov	r0, r8
 800e6b8:	4649      	mov	r1, r9
 800e6ba:	f7f1 ff9d 	bl	80005f8 <__aeabi_dmul>
 800e6be:	2200      	movs	r2, #0
 800e6c0:	4b68      	ldr	r3, [pc, #416]	; (800e864 <__ieee754_pow+0x734>)
 800e6c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e6c6:	f7f1 fde1 	bl	800028c <__adddf3>
 800e6ca:	4632      	mov	r2, r6
 800e6cc:	463b      	mov	r3, r7
 800e6ce:	f7f1 fddd 	bl	800028c <__adddf3>
 800e6d2:	9802      	ldr	r0, [sp, #8]
 800e6d4:	460d      	mov	r5, r1
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	4602      	mov	r2, r0
 800e6da:	460b      	mov	r3, r1
 800e6dc:	4640      	mov	r0, r8
 800e6de:	4649      	mov	r1, r9
 800e6e0:	f7f1 ff8a 	bl	80005f8 <__aeabi_dmul>
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	4680      	mov	r8, r0
 800e6e8:	4689      	mov	r9, r1
 800e6ea:	4b5e      	ldr	r3, [pc, #376]	; (800e864 <__ieee754_pow+0x734>)
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	4629      	mov	r1, r5
 800e6f0:	f7f1 fdca 	bl	8000288 <__aeabi_dsub>
 800e6f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e6f8:	f7f1 fdc6 	bl	8000288 <__aeabi_dsub>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	460b      	mov	r3, r1
 800e700:	4630      	mov	r0, r6
 800e702:	4639      	mov	r1, r7
 800e704:	f7f1 fdc0 	bl	8000288 <__aeabi_dsub>
 800e708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e70c:	f7f1 ff74 	bl	80005f8 <__aeabi_dmul>
 800e710:	4622      	mov	r2, r4
 800e712:	4606      	mov	r6, r0
 800e714:	460f      	mov	r7, r1
 800e716:	462b      	mov	r3, r5
 800e718:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e71c:	f7f1 ff6c 	bl	80005f8 <__aeabi_dmul>
 800e720:	4602      	mov	r2, r0
 800e722:	460b      	mov	r3, r1
 800e724:	4630      	mov	r0, r6
 800e726:	4639      	mov	r1, r7
 800e728:	f7f1 fdb0 	bl	800028c <__adddf3>
 800e72c:	4606      	mov	r6, r0
 800e72e:	460f      	mov	r7, r1
 800e730:	4602      	mov	r2, r0
 800e732:	460b      	mov	r3, r1
 800e734:	4640      	mov	r0, r8
 800e736:	4649      	mov	r1, r9
 800e738:	f7f1 fda8 	bl	800028c <__adddf3>
 800e73c:	9802      	ldr	r0, [sp, #8]
 800e73e:	a33c      	add	r3, pc, #240	; (adr r3, 800e830 <__ieee754_pow+0x700>)
 800e740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e744:	4604      	mov	r4, r0
 800e746:	460d      	mov	r5, r1
 800e748:	f7f1 ff56 	bl	80005f8 <__aeabi_dmul>
 800e74c:	4642      	mov	r2, r8
 800e74e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e752:	464b      	mov	r3, r9
 800e754:	4620      	mov	r0, r4
 800e756:	4629      	mov	r1, r5
 800e758:	f7f1 fd96 	bl	8000288 <__aeabi_dsub>
 800e75c:	4602      	mov	r2, r0
 800e75e:	460b      	mov	r3, r1
 800e760:	4630      	mov	r0, r6
 800e762:	4639      	mov	r1, r7
 800e764:	f7f1 fd90 	bl	8000288 <__aeabi_dsub>
 800e768:	a333      	add	r3, pc, #204	; (adr r3, 800e838 <__ieee754_pow+0x708>)
 800e76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76e:	f7f1 ff43 	bl	80005f8 <__aeabi_dmul>
 800e772:	a333      	add	r3, pc, #204	; (adr r3, 800e840 <__ieee754_pow+0x710>)
 800e774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e778:	4606      	mov	r6, r0
 800e77a:	460f      	mov	r7, r1
 800e77c:	4620      	mov	r0, r4
 800e77e:	4629      	mov	r1, r5
 800e780:	f7f1 ff3a 	bl	80005f8 <__aeabi_dmul>
 800e784:	4602      	mov	r2, r0
 800e786:	460b      	mov	r3, r1
 800e788:	4630      	mov	r0, r6
 800e78a:	4639      	mov	r1, r7
 800e78c:	f7f1 fd7e 	bl	800028c <__adddf3>
 800e790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e792:	4b35      	ldr	r3, [pc, #212]	; (800e868 <__ieee754_pow+0x738>)
 800e794:	4413      	add	r3, r2
 800e796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79a:	f7f1 fd77 	bl	800028c <__adddf3>
 800e79e:	4604      	mov	r4, r0
 800e7a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7a2:	460d      	mov	r5, r1
 800e7a4:	f7f1 febe 	bl	8000524 <__aeabi_i2d>
 800e7a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e7aa:	4b30      	ldr	r3, [pc, #192]	; (800e86c <__ieee754_pow+0x73c>)
 800e7ac:	4413      	add	r3, r2
 800e7ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e7b2:	4606      	mov	r6, r0
 800e7b4:	460f      	mov	r7, r1
 800e7b6:	4622      	mov	r2, r4
 800e7b8:	462b      	mov	r3, r5
 800e7ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7be:	f7f1 fd65 	bl	800028c <__adddf3>
 800e7c2:	4642      	mov	r2, r8
 800e7c4:	464b      	mov	r3, r9
 800e7c6:	f7f1 fd61 	bl	800028c <__adddf3>
 800e7ca:	4632      	mov	r2, r6
 800e7cc:	463b      	mov	r3, r7
 800e7ce:	f7f1 fd5d 	bl	800028c <__adddf3>
 800e7d2:	9802      	ldr	r0, [sp, #8]
 800e7d4:	4632      	mov	r2, r6
 800e7d6:	463b      	mov	r3, r7
 800e7d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7dc:	f7f1 fd54 	bl	8000288 <__aeabi_dsub>
 800e7e0:	4642      	mov	r2, r8
 800e7e2:	464b      	mov	r3, r9
 800e7e4:	f7f1 fd50 	bl	8000288 <__aeabi_dsub>
 800e7e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e7ec:	e607      	b.n	800e3fe <__ieee754_pow+0x2ce>
 800e7ee:	f04f 0a01 	mov.w	sl, #1
 800e7f2:	e6a5      	b.n	800e540 <__ieee754_pow+0x410>
 800e7f4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e848 <__ieee754_pow+0x718>
 800e7f8:	e613      	b.n	800e422 <__ieee754_pow+0x2f2>
 800e7fa:	bf00      	nop
 800e7fc:	f3af 8000 	nop.w
 800e800:	4a454eef 	.word	0x4a454eef
 800e804:	3fca7e28 	.word	0x3fca7e28
 800e808:	93c9db65 	.word	0x93c9db65
 800e80c:	3fcd864a 	.word	0x3fcd864a
 800e810:	a91d4101 	.word	0xa91d4101
 800e814:	3fd17460 	.word	0x3fd17460
 800e818:	518f264d 	.word	0x518f264d
 800e81c:	3fd55555 	.word	0x3fd55555
 800e820:	db6fabff 	.word	0xdb6fabff
 800e824:	3fdb6db6 	.word	0x3fdb6db6
 800e828:	33333303 	.word	0x33333303
 800e82c:	3fe33333 	.word	0x3fe33333
 800e830:	e0000000 	.word	0xe0000000
 800e834:	3feec709 	.word	0x3feec709
 800e838:	dc3a03fd 	.word	0xdc3a03fd
 800e83c:	3feec709 	.word	0x3feec709
 800e840:	145b01f5 	.word	0x145b01f5
 800e844:	be3e2fe0 	.word	0xbe3e2fe0
 800e848:	00000000 	.word	0x00000000
 800e84c:	3ff00000 	.word	0x3ff00000
 800e850:	43400000 	.word	0x43400000
 800e854:	0003988e 	.word	0x0003988e
 800e858:	000bb679 	.word	0x000bb679
 800e85c:	080100b8 	.word	0x080100b8
 800e860:	3ff00000 	.word	0x3ff00000
 800e864:	40080000 	.word	0x40080000
 800e868:	080100d8 	.word	0x080100d8
 800e86c:	080100c8 	.word	0x080100c8
 800e870:	a3b4      	add	r3, pc, #720	; (adr r3, 800eb44 <__ieee754_pow+0xa14>)
 800e872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e876:	4640      	mov	r0, r8
 800e878:	4649      	mov	r1, r9
 800e87a:	f7f1 fd07 	bl	800028c <__adddf3>
 800e87e:	4622      	mov	r2, r4
 800e880:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e884:	462b      	mov	r3, r5
 800e886:	4630      	mov	r0, r6
 800e888:	4639      	mov	r1, r7
 800e88a:	f7f1 fcfd 	bl	8000288 <__aeabi_dsub>
 800e88e:	4602      	mov	r2, r0
 800e890:	460b      	mov	r3, r1
 800e892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e896:	f7f2 f93f 	bl	8000b18 <__aeabi_dcmpgt>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	f47f adfe 	bne.w	800e49c <__ieee754_pow+0x36c>
 800e8a0:	4aa3      	ldr	r2, [pc, #652]	; (800eb30 <__ieee754_pow+0xa00>)
 800e8a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	f340 810a 	ble.w	800eac0 <__ieee754_pow+0x990>
 800e8ac:	151b      	asrs	r3, r3, #20
 800e8ae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e8b2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e8b6:	fa4a f303 	asr.w	r3, sl, r3
 800e8ba:	445b      	add	r3, fp
 800e8bc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e8c0:	4e9c      	ldr	r6, [pc, #624]	; (800eb34 <__ieee754_pow+0xa04>)
 800e8c2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e8c6:	4116      	asrs	r6, r2
 800e8c8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e8cc:	2000      	movs	r0, #0
 800e8ce:	ea23 0106 	bic.w	r1, r3, r6
 800e8d2:	f1c2 0214 	rsb	r2, r2, #20
 800e8d6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e8da:	fa4a fa02 	asr.w	sl, sl, r2
 800e8de:	f1bb 0f00 	cmp.w	fp, #0
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	4629      	mov	r1, r5
 800e8ea:	bfb8      	it	lt
 800e8ec:	f1ca 0a00 	rsblt	sl, sl, #0
 800e8f0:	f7f1 fcca 	bl	8000288 <__aeabi_dsub>
 800e8f4:	e9cd 0100 	strd	r0, r1, [sp]
 800e8f8:	4642      	mov	r2, r8
 800e8fa:	464b      	mov	r3, r9
 800e8fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e900:	f7f1 fcc4 	bl	800028c <__adddf3>
 800e904:	2000      	movs	r0, #0
 800e906:	a378      	add	r3, pc, #480	; (adr r3, 800eae8 <__ieee754_pow+0x9b8>)
 800e908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90c:	4604      	mov	r4, r0
 800e90e:	460d      	mov	r5, r1
 800e910:	f7f1 fe72 	bl	80005f8 <__aeabi_dmul>
 800e914:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e918:	4606      	mov	r6, r0
 800e91a:	460f      	mov	r7, r1
 800e91c:	4620      	mov	r0, r4
 800e91e:	4629      	mov	r1, r5
 800e920:	f7f1 fcb2 	bl	8000288 <__aeabi_dsub>
 800e924:	4602      	mov	r2, r0
 800e926:	460b      	mov	r3, r1
 800e928:	4640      	mov	r0, r8
 800e92a:	4649      	mov	r1, r9
 800e92c:	f7f1 fcac 	bl	8000288 <__aeabi_dsub>
 800e930:	a36f      	add	r3, pc, #444	; (adr r3, 800eaf0 <__ieee754_pow+0x9c0>)
 800e932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e936:	f7f1 fe5f 	bl	80005f8 <__aeabi_dmul>
 800e93a:	a36f      	add	r3, pc, #444	; (adr r3, 800eaf8 <__ieee754_pow+0x9c8>)
 800e93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e940:	4680      	mov	r8, r0
 800e942:	4689      	mov	r9, r1
 800e944:	4620      	mov	r0, r4
 800e946:	4629      	mov	r1, r5
 800e948:	f7f1 fe56 	bl	80005f8 <__aeabi_dmul>
 800e94c:	4602      	mov	r2, r0
 800e94e:	460b      	mov	r3, r1
 800e950:	4640      	mov	r0, r8
 800e952:	4649      	mov	r1, r9
 800e954:	f7f1 fc9a 	bl	800028c <__adddf3>
 800e958:	4604      	mov	r4, r0
 800e95a:	460d      	mov	r5, r1
 800e95c:	4602      	mov	r2, r0
 800e95e:	460b      	mov	r3, r1
 800e960:	4630      	mov	r0, r6
 800e962:	4639      	mov	r1, r7
 800e964:	f7f1 fc92 	bl	800028c <__adddf3>
 800e968:	4632      	mov	r2, r6
 800e96a:	463b      	mov	r3, r7
 800e96c:	4680      	mov	r8, r0
 800e96e:	4689      	mov	r9, r1
 800e970:	f7f1 fc8a 	bl	8000288 <__aeabi_dsub>
 800e974:	4602      	mov	r2, r0
 800e976:	460b      	mov	r3, r1
 800e978:	4620      	mov	r0, r4
 800e97a:	4629      	mov	r1, r5
 800e97c:	f7f1 fc84 	bl	8000288 <__aeabi_dsub>
 800e980:	4642      	mov	r2, r8
 800e982:	4606      	mov	r6, r0
 800e984:	460f      	mov	r7, r1
 800e986:	464b      	mov	r3, r9
 800e988:	4640      	mov	r0, r8
 800e98a:	4649      	mov	r1, r9
 800e98c:	f7f1 fe34 	bl	80005f8 <__aeabi_dmul>
 800e990:	a35b      	add	r3, pc, #364	; (adr r3, 800eb00 <__ieee754_pow+0x9d0>)
 800e992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e996:	4604      	mov	r4, r0
 800e998:	460d      	mov	r5, r1
 800e99a:	f7f1 fe2d 	bl	80005f8 <__aeabi_dmul>
 800e99e:	a35a      	add	r3, pc, #360	; (adr r3, 800eb08 <__ieee754_pow+0x9d8>)
 800e9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a4:	f7f1 fc70 	bl	8000288 <__aeabi_dsub>
 800e9a8:	4622      	mov	r2, r4
 800e9aa:	462b      	mov	r3, r5
 800e9ac:	f7f1 fe24 	bl	80005f8 <__aeabi_dmul>
 800e9b0:	a357      	add	r3, pc, #348	; (adr r3, 800eb10 <__ieee754_pow+0x9e0>)
 800e9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b6:	f7f1 fc69 	bl	800028c <__adddf3>
 800e9ba:	4622      	mov	r2, r4
 800e9bc:	462b      	mov	r3, r5
 800e9be:	f7f1 fe1b 	bl	80005f8 <__aeabi_dmul>
 800e9c2:	a355      	add	r3, pc, #340	; (adr r3, 800eb18 <__ieee754_pow+0x9e8>)
 800e9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c8:	f7f1 fc5e 	bl	8000288 <__aeabi_dsub>
 800e9cc:	4622      	mov	r2, r4
 800e9ce:	462b      	mov	r3, r5
 800e9d0:	f7f1 fe12 	bl	80005f8 <__aeabi_dmul>
 800e9d4:	a352      	add	r3, pc, #328	; (adr r3, 800eb20 <__ieee754_pow+0x9f0>)
 800e9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9da:	f7f1 fc57 	bl	800028c <__adddf3>
 800e9de:	4622      	mov	r2, r4
 800e9e0:	462b      	mov	r3, r5
 800e9e2:	f7f1 fe09 	bl	80005f8 <__aeabi_dmul>
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	4640      	mov	r0, r8
 800e9ec:	4649      	mov	r1, r9
 800e9ee:	f7f1 fc4b 	bl	8000288 <__aeabi_dsub>
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	460d      	mov	r5, r1
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	4640      	mov	r0, r8
 800e9fc:	4649      	mov	r1, r9
 800e9fe:	f7f1 fdfb 	bl	80005f8 <__aeabi_dmul>
 800ea02:	2200      	movs	r2, #0
 800ea04:	e9cd 0100 	strd	r0, r1, [sp]
 800ea08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	4629      	mov	r1, r5
 800ea10:	f7f1 fc3a 	bl	8000288 <__aeabi_dsub>
 800ea14:	4602      	mov	r2, r0
 800ea16:	460b      	mov	r3, r1
 800ea18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea1c:	f7f1 ff16 	bl	800084c <__aeabi_ddiv>
 800ea20:	4632      	mov	r2, r6
 800ea22:	4604      	mov	r4, r0
 800ea24:	460d      	mov	r5, r1
 800ea26:	463b      	mov	r3, r7
 800ea28:	4640      	mov	r0, r8
 800ea2a:	4649      	mov	r1, r9
 800ea2c:	f7f1 fde4 	bl	80005f8 <__aeabi_dmul>
 800ea30:	4632      	mov	r2, r6
 800ea32:	463b      	mov	r3, r7
 800ea34:	f7f1 fc2a 	bl	800028c <__adddf3>
 800ea38:	4602      	mov	r2, r0
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	4629      	mov	r1, r5
 800ea40:	f7f1 fc22 	bl	8000288 <__aeabi_dsub>
 800ea44:	4642      	mov	r2, r8
 800ea46:	464b      	mov	r3, r9
 800ea48:	f7f1 fc1e 	bl	8000288 <__aeabi_dsub>
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	460b      	mov	r3, r1
 800ea50:	2000      	movs	r0, #0
 800ea52:	4939      	ldr	r1, [pc, #228]	; (800eb38 <__ieee754_pow+0xa08>)
 800ea54:	f7f1 fc18 	bl	8000288 <__aeabi_dsub>
 800ea58:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ea5c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ea60:	4602      	mov	r2, r0
 800ea62:	460b      	mov	r3, r1
 800ea64:	da2f      	bge.n	800eac6 <__ieee754_pow+0x996>
 800ea66:	4650      	mov	r0, sl
 800ea68:	ec43 2b10 	vmov	d0, r2, r3
 800ea6c:	f001 f8fc 	bl	800fc68 <scalbn>
 800ea70:	ec51 0b10 	vmov	r0, r1, d0
 800ea74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea78:	f7ff bbf1 	b.w	800e25e <__ieee754_pow+0x12e>
 800ea7c:	4b2f      	ldr	r3, [pc, #188]	; (800eb3c <__ieee754_pow+0xa0c>)
 800ea7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ea82:	429e      	cmp	r6, r3
 800ea84:	f77f af0c 	ble.w	800e8a0 <__ieee754_pow+0x770>
 800ea88:	4b2d      	ldr	r3, [pc, #180]	; (800eb40 <__ieee754_pow+0xa10>)
 800ea8a:	440b      	add	r3, r1
 800ea8c:	4303      	orrs	r3, r0
 800ea8e:	d00b      	beq.n	800eaa8 <__ieee754_pow+0x978>
 800ea90:	a325      	add	r3, pc, #148	; (adr r3, 800eb28 <__ieee754_pow+0x9f8>)
 800ea92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea9a:	f7f1 fdad 	bl	80005f8 <__aeabi_dmul>
 800ea9e:	a322      	add	r3, pc, #136	; (adr r3, 800eb28 <__ieee754_pow+0x9f8>)
 800eaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa4:	f7ff bbdb 	b.w	800e25e <__ieee754_pow+0x12e>
 800eaa8:	4622      	mov	r2, r4
 800eaaa:	462b      	mov	r3, r5
 800eaac:	f7f1 fbec 	bl	8000288 <__aeabi_dsub>
 800eab0:	4642      	mov	r2, r8
 800eab2:	464b      	mov	r3, r9
 800eab4:	f7f2 f826 	bl	8000b04 <__aeabi_dcmpge>
 800eab8:	2800      	cmp	r0, #0
 800eaba:	f43f aef1 	beq.w	800e8a0 <__ieee754_pow+0x770>
 800eabe:	e7e7      	b.n	800ea90 <__ieee754_pow+0x960>
 800eac0:	f04f 0a00 	mov.w	sl, #0
 800eac4:	e718      	b.n	800e8f8 <__ieee754_pow+0x7c8>
 800eac6:	4621      	mov	r1, r4
 800eac8:	e7d4      	b.n	800ea74 <__ieee754_pow+0x944>
 800eaca:	2000      	movs	r0, #0
 800eacc:	491a      	ldr	r1, [pc, #104]	; (800eb38 <__ieee754_pow+0xa08>)
 800eace:	f7ff bb8f 	b.w	800e1f0 <__ieee754_pow+0xc0>
 800ead2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ead6:	f7ff bb8b 	b.w	800e1f0 <__ieee754_pow+0xc0>
 800eada:	4630      	mov	r0, r6
 800eadc:	4639      	mov	r1, r7
 800eade:	f7ff bb87 	b.w	800e1f0 <__ieee754_pow+0xc0>
 800eae2:	4693      	mov	fp, r2
 800eae4:	f7ff bb98 	b.w	800e218 <__ieee754_pow+0xe8>
 800eae8:	00000000 	.word	0x00000000
 800eaec:	3fe62e43 	.word	0x3fe62e43
 800eaf0:	fefa39ef 	.word	0xfefa39ef
 800eaf4:	3fe62e42 	.word	0x3fe62e42
 800eaf8:	0ca86c39 	.word	0x0ca86c39
 800eafc:	be205c61 	.word	0xbe205c61
 800eb00:	72bea4d0 	.word	0x72bea4d0
 800eb04:	3e663769 	.word	0x3e663769
 800eb08:	c5d26bf1 	.word	0xc5d26bf1
 800eb0c:	3ebbbd41 	.word	0x3ebbbd41
 800eb10:	af25de2c 	.word	0xaf25de2c
 800eb14:	3f11566a 	.word	0x3f11566a
 800eb18:	16bebd93 	.word	0x16bebd93
 800eb1c:	3f66c16c 	.word	0x3f66c16c
 800eb20:	5555553e 	.word	0x5555553e
 800eb24:	3fc55555 	.word	0x3fc55555
 800eb28:	c2f8f359 	.word	0xc2f8f359
 800eb2c:	01a56e1f 	.word	0x01a56e1f
 800eb30:	3fe00000 	.word	0x3fe00000
 800eb34:	000fffff 	.word	0x000fffff
 800eb38:	3ff00000 	.word	0x3ff00000
 800eb3c:	4090cbff 	.word	0x4090cbff
 800eb40:	3f6f3400 	.word	0x3f6f3400
 800eb44:	652b82fe 	.word	0x652b82fe
 800eb48:	3c971547 	.word	0x3c971547
 800eb4c:	00000000 	.word	0x00000000

0800eb50 <__ieee754_rem_pio2>:
 800eb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb54:	ec57 6b10 	vmov	r6, r7, d0
 800eb58:	4bc3      	ldr	r3, [pc, #780]	; (800ee68 <__ieee754_rem_pio2+0x318>)
 800eb5a:	b08d      	sub	sp, #52	; 0x34
 800eb5c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800eb60:	4598      	cmp	r8, r3
 800eb62:	4604      	mov	r4, r0
 800eb64:	9704      	str	r7, [sp, #16]
 800eb66:	dc07      	bgt.n	800eb78 <__ieee754_rem_pio2+0x28>
 800eb68:	2200      	movs	r2, #0
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	ed84 0b00 	vstr	d0, [r4]
 800eb70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eb74:	2500      	movs	r5, #0
 800eb76:	e027      	b.n	800ebc8 <__ieee754_rem_pio2+0x78>
 800eb78:	4bbc      	ldr	r3, [pc, #752]	; (800ee6c <__ieee754_rem_pio2+0x31c>)
 800eb7a:	4598      	cmp	r8, r3
 800eb7c:	dc75      	bgt.n	800ec6a <__ieee754_rem_pio2+0x11a>
 800eb7e:	9b04      	ldr	r3, [sp, #16]
 800eb80:	4dbb      	ldr	r5, [pc, #748]	; (800ee70 <__ieee754_rem_pio2+0x320>)
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	ee10 0a10 	vmov	r0, s0
 800eb88:	a3a9      	add	r3, pc, #676	; (adr r3, 800ee30 <__ieee754_rem_pio2+0x2e0>)
 800eb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8e:	4639      	mov	r1, r7
 800eb90:	dd36      	ble.n	800ec00 <__ieee754_rem_pio2+0xb0>
 800eb92:	f7f1 fb79 	bl	8000288 <__aeabi_dsub>
 800eb96:	45a8      	cmp	r8, r5
 800eb98:	4606      	mov	r6, r0
 800eb9a:	460f      	mov	r7, r1
 800eb9c:	d018      	beq.n	800ebd0 <__ieee754_rem_pio2+0x80>
 800eb9e:	a3a6      	add	r3, pc, #664	; (adr r3, 800ee38 <__ieee754_rem_pio2+0x2e8>)
 800eba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba4:	f7f1 fb70 	bl	8000288 <__aeabi_dsub>
 800eba8:	4602      	mov	r2, r0
 800ebaa:	460b      	mov	r3, r1
 800ebac:	e9c4 2300 	strd	r2, r3, [r4]
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	4639      	mov	r1, r7
 800ebb4:	f7f1 fb68 	bl	8000288 <__aeabi_dsub>
 800ebb8:	a39f      	add	r3, pc, #636	; (adr r3, 800ee38 <__ieee754_rem_pio2+0x2e8>)
 800ebba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebbe:	f7f1 fb63 	bl	8000288 <__aeabi_dsub>
 800ebc2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ebc6:	2501      	movs	r5, #1
 800ebc8:	4628      	mov	r0, r5
 800ebca:	b00d      	add	sp, #52	; 0x34
 800ebcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebd0:	a39b      	add	r3, pc, #620	; (adr r3, 800ee40 <__ieee754_rem_pio2+0x2f0>)
 800ebd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd6:	f7f1 fb57 	bl	8000288 <__aeabi_dsub>
 800ebda:	a39b      	add	r3, pc, #620	; (adr r3, 800ee48 <__ieee754_rem_pio2+0x2f8>)
 800ebdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe0:	4606      	mov	r6, r0
 800ebe2:	460f      	mov	r7, r1
 800ebe4:	f7f1 fb50 	bl	8000288 <__aeabi_dsub>
 800ebe8:	4602      	mov	r2, r0
 800ebea:	460b      	mov	r3, r1
 800ebec:	e9c4 2300 	strd	r2, r3, [r4]
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	4639      	mov	r1, r7
 800ebf4:	f7f1 fb48 	bl	8000288 <__aeabi_dsub>
 800ebf8:	a393      	add	r3, pc, #588	; (adr r3, 800ee48 <__ieee754_rem_pio2+0x2f8>)
 800ebfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfe:	e7de      	b.n	800ebbe <__ieee754_rem_pio2+0x6e>
 800ec00:	f7f1 fb44 	bl	800028c <__adddf3>
 800ec04:	45a8      	cmp	r8, r5
 800ec06:	4606      	mov	r6, r0
 800ec08:	460f      	mov	r7, r1
 800ec0a:	d016      	beq.n	800ec3a <__ieee754_rem_pio2+0xea>
 800ec0c:	a38a      	add	r3, pc, #552	; (adr r3, 800ee38 <__ieee754_rem_pio2+0x2e8>)
 800ec0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec12:	f7f1 fb3b 	bl	800028c <__adddf3>
 800ec16:	4602      	mov	r2, r0
 800ec18:	460b      	mov	r3, r1
 800ec1a:	e9c4 2300 	strd	r2, r3, [r4]
 800ec1e:	4630      	mov	r0, r6
 800ec20:	4639      	mov	r1, r7
 800ec22:	f7f1 fb31 	bl	8000288 <__aeabi_dsub>
 800ec26:	a384      	add	r3, pc, #528	; (adr r3, 800ee38 <__ieee754_rem_pio2+0x2e8>)
 800ec28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2c:	f7f1 fb2e 	bl	800028c <__adddf3>
 800ec30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ec34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ec38:	e7c6      	b.n	800ebc8 <__ieee754_rem_pio2+0x78>
 800ec3a:	a381      	add	r3, pc, #516	; (adr r3, 800ee40 <__ieee754_rem_pio2+0x2f0>)
 800ec3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec40:	f7f1 fb24 	bl	800028c <__adddf3>
 800ec44:	a380      	add	r3, pc, #512	; (adr r3, 800ee48 <__ieee754_rem_pio2+0x2f8>)
 800ec46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4a:	4606      	mov	r6, r0
 800ec4c:	460f      	mov	r7, r1
 800ec4e:	f7f1 fb1d 	bl	800028c <__adddf3>
 800ec52:	4602      	mov	r2, r0
 800ec54:	460b      	mov	r3, r1
 800ec56:	e9c4 2300 	strd	r2, r3, [r4]
 800ec5a:	4630      	mov	r0, r6
 800ec5c:	4639      	mov	r1, r7
 800ec5e:	f7f1 fb13 	bl	8000288 <__aeabi_dsub>
 800ec62:	a379      	add	r3, pc, #484	; (adr r3, 800ee48 <__ieee754_rem_pio2+0x2f8>)
 800ec64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec68:	e7e0      	b.n	800ec2c <__ieee754_rem_pio2+0xdc>
 800ec6a:	4b82      	ldr	r3, [pc, #520]	; (800ee74 <__ieee754_rem_pio2+0x324>)
 800ec6c:	4598      	cmp	r8, r3
 800ec6e:	f300 80d0 	bgt.w	800ee12 <__ieee754_rem_pio2+0x2c2>
 800ec72:	f000 fed3 	bl	800fa1c <fabs>
 800ec76:	ec57 6b10 	vmov	r6, r7, d0
 800ec7a:	ee10 0a10 	vmov	r0, s0
 800ec7e:	a374      	add	r3, pc, #464	; (adr r3, 800ee50 <__ieee754_rem_pio2+0x300>)
 800ec80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec84:	4639      	mov	r1, r7
 800ec86:	f7f1 fcb7 	bl	80005f8 <__aeabi_dmul>
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	4b7a      	ldr	r3, [pc, #488]	; (800ee78 <__ieee754_rem_pio2+0x328>)
 800ec8e:	f7f1 fafd 	bl	800028c <__adddf3>
 800ec92:	f7f1 ff61 	bl	8000b58 <__aeabi_d2iz>
 800ec96:	4605      	mov	r5, r0
 800ec98:	f7f1 fc44 	bl	8000524 <__aeabi_i2d>
 800ec9c:	a364      	add	r3, pc, #400	; (adr r3, 800ee30 <__ieee754_rem_pio2+0x2e0>)
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eca6:	f7f1 fca7 	bl	80005f8 <__aeabi_dmul>
 800ecaa:	4602      	mov	r2, r0
 800ecac:	460b      	mov	r3, r1
 800ecae:	4630      	mov	r0, r6
 800ecb0:	4639      	mov	r1, r7
 800ecb2:	f7f1 fae9 	bl	8000288 <__aeabi_dsub>
 800ecb6:	a360      	add	r3, pc, #384	; (adr r3, 800ee38 <__ieee754_rem_pio2+0x2e8>)
 800ecb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecbc:	4682      	mov	sl, r0
 800ecbe:	468b      	mov	fp, r1
 800ecc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecc4:	f7f1 fc98 	bl	80005f8 <__aeabi_dmul>
 800ecc8:	2d1f      	cmp	r5, #31
 800ecca:	4606      	mov	r6, r0
 800eccc:	460f      	mov	r7, r1
 800ecce:	dc0c      	bgt.n	800ecea <__ieee754_rem_pio2+0x19a>
 800ecd0:	1e6a      	subs	r2, r5, #1
 800ecd2:	4b6a      	ldr	r3, [pc, #424]	; (800ee7c <__ieee754_rem_pio2+0x32c>)
 800ecd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecd8:	4543      	cmp	r3, r8
 800ecda:	d006      	beq.n	800ecea <__ieee754_rem_pio2+0x19a>
 800ecdc:	4632      	mov	r2, r6
 800ecde:	463b      	mov	r3, r7
 800ece0:	4650      	mov	r0, sl
 800ece2:	4659      	mov	r1, fp
 800ece4:	f7f1 fad0 	bl	8000288 <__aeabi_dsub>
 800ece8:	e00e      	b.n	800ed08 <__ieee754_rem_pio2+0x1b8>
 800ecea:	4632      	mov	r2, r6
 800ecec:	463b      	mov	r3, r7
 800ecee:	4650      	mov	r0, sl
 800ecf0:	4659      	mov	r1, fp
 800ecf2:	f7f1 fac9 	bl	8000288 <__aeabi_dsub>
 800ecf6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ecfa:	9305      	str	r3, [sp, #20]
 800ecfc:	9a05      	ldr	r2, [sp, #20]
 800ecfe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ed02:	1ad3      	subs	r3, r2, r3
 800ed04:	2b10      	cmp	r3, #16
 800ed06:	dc02      	bgt.n	800ed0e <__ieee754_rem_pio2+0x1be>
 800ed08:	e9c4 0100 	strd	r0, r1, [r4]
 800ed0c:	e039      	b.n	800ed82 <__ieee754_rem_pio2+0x232>
 800ed0e:	a34c      	add	r3, pc, #304	; (adr r3, 800ee40 <__ieee754_rem_pio2+0x2f0>)
 800ed10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed18:	f7f1 fc6e 	bl	80005f8 <__aeabi_dmul>
 800ed1c:	4606      	mov	r6, r0
 800ed1e:	460f      	mov	r7, r1
 800ed20:	4602      	mov	r2, r0
 800ed22:	460b      	mov	r3, r1
 800ed24:	4650      	mov	r0, sl
 800ed26:	4659      	mov	r1, fp
 800ed28:	f7f1 faae 	bl	8000288 <__aeabi_dsub>
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	460b      	mov	r3, r1
 800ed30:	4680      	mov	r8, r0
 800ed32:	4689      	mov	r9, r1
 800ed34:	4650      	mov	r0, sl
 800ed36:	4659      	mov	r1, fp
 800ed38:	f7f1 faa6 	bl	8000288 <__aeabi_dsub>
 800ed3c:	4632      	mov	r2, r6
 800ed3e:	463b      	mov	r3, r7
 800ed40:	f7f1 faa2 	bl	8000288 <__aeabi_dsub>
 800ed44:	a340      	add	r3, pc, #256	; (adr r3, 800ee48 <__ieee754_rem_pio2+0x2f8>)
 800ed46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4a:	4606      	mov	r6, r0
 800ed4c:	460f      	mov	r7, r1
 800ed4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed52:	f7f1 fc51 	bl	80005f8 <__aeabi_dmul>
 800ed56:	4632      	mov	r2, r6
 800ed58:	463b      	mov	r3, r7
 800ed5a:	f7f1 fa95 	bl	8000288 <__aeabi_dsub>
 800ed5e:	4602      	mov	r2, r0
 800ed60:	460b      	mov	r3, r1
 800ed62:	4606      	mov	r6, r0
 800ed64:	460f      	mov	r7, r1
 800ed66:	4640      	mov	r0, r8
 800ed68:	4649      	mov	r1, r9
 800ed6a:	f7f1 fa8d 	bl	8000288 <__aeabi_dsub>
 800ed6e:	9a05      	ldr	r2, [sp, #20]
 800ed70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ed74:	1ad3      	subs	r3, r2, r3
 800ed76:	2b31      	cmp	r3, #49	; 0x31
 800ed78:	dc20      	bgt.n	800edbc <__ieee754_rem_pio2+0x26c>
 800ed7a:	e9c4 0100 	strd	r0, r1, [r4]
 800ed7e:	46c2      	mov	sl, r8
 800ed80:	46cb      	mov	fp, r9
 800ed82:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ed86:	4650      	mov	r0, sl
 800ed88:	4642      	mov	r2, r8
 800ed8a:	464b      	mov	r3, r9
 800ed8c:	4659      	mov	r1, fp
 800ed8e:	f7f1 fa7b 	bl	8000288 <__aeabi_dsub>
 800ed92:	463b      	mov	r3, r7
 800ed94:	4632      	mov	r2, r6
 800ed96:	f7f1 fa77 	bl	8000288 <__aeabi_dsub>
 800ed9a:	9b04      	ldr	r3, [sp, #16]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eda2:	f6bf af11 	bge.w	800ebc8 <__ieee754_rem_pio2+0x78>
 800eda6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800edaa:	6063      	str	r3, [r4, #4]
 800edac:	f8c4 8000 	str.w	r8, [r4]
 800edb0:	60a0      	str	r0, [r4, #8]
 800edb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edb6:	60e3      	str	r3, [r4, #12]
 800edb8:	426d      	negs	r5, r5
 800edba:	e705      	b.n	800ebc8 <__ieee754_rem_pio2+0x78>
 800edbc:	a326      	add	r3, pc, #152	; (adr r3, 800ee58 <__ieee754_rem_pio2+0x308>)
 800edbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edc6:	f7f1 fc17 	bl	80005f8 <__aeabi_dmul>
 800edca:	4606      	mov	r6, r0
 800edcc:	460f      	mov	r7, r1
 800edce:	4602      	mov	r2, r0
 800edd0:	460b      	mov	r3, r1
 800edd2:	4640      	mov	r0, r8
 800edd4:	4649      	mov	r1, r9
 800edd6:	f7f1 fa57 	bl	8000288 <__aeabi_dsub>
 800edda:	4602      	mov	r2, r0
 800eddc:	460b      	mov	r3, r1
 800edde:	4682      	mov	sl, r0
 800ede0:	468b      	mov	fp, r1
 800ede2:	4640      	mov	r0, r8
 800ede4:	4649      	mov	r1, r9
 800ede6:	f7f1 fa4f 	bl	8000288 <__aeabi_dsub>
 800edea:	4632      	mov	r2, r6
 800edec:	463b      	mov	r3, r7
 800edee:	f7f1 fa4b 	bl	8000288 <__aeabi_dsub>
 800edf2:	a31b      	add	r3, pc, #108	; (adr r3, 800ee60 <__ieee754_rem_pio2+0x310>)
 800edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf8:	4606      	mov	r6, r0
 800edfa:	460f      	mov	r7, r1
 800edfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee00:	f7f1 fbfa 	bl	80005f8 <__aeabi_dmul>
 800ee04:	4632      	mov	r2, r6
 800ee06:	463b      	mov	r3, r7
 800ee08:	f7f1 fa3e 	bl	8000288 <__aeabi_dsub>
 800ee0c:	4606      	mov	r6, r0
 800ee0e:	460f      	mov	r7, r1
 800ee10:	e764      	b.n	800ecdc <__ieee754_rem_pio2+0x18c>
 800ee12:	4b1b      	ldr	r3, [pc, #108]	; (800ee80 <__ieee754_rem_pio2+0x330>)
 800ee14:	4598      	cmp	r8, r3
 800ee16:	dd35      	ble.n	800ee84 <__ieee754_rem_pio2+0x334>
 800ee18:	ee10 2a10 	vmov	r2, s0
 800ee1c:	463b      	mov	r3, r7
 800ee1e:	4630      	mov	r0, r6
 800ee20:	4639      	mov	r1, r7
 800ee22:	f7f1 fa31 	bl	8000288 <__aeabi_dsub>
 800ee26:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ee2a:	e9c4 0100 	strd	r0, r1, [r4]
 800ee2e:	e6a1      	b.n	800eb74 <__ieee754_rem_pio2+0x24>
 800ee30:	54400000 	.word	0x54400000
 800ee34:	3ff921fb 	.word	0x3ff921fb
 800ee38:	1a626331 	.word	0x1a626331
 800ee3c:	3dd0b461 	.word	0x3dd0b461
 800ee40:	1a600000 	.word	0x1a600000
 800ee44:	3dd0b461 	.word	0x3dd0b461
 800ee48:	2e037073 	.word	0x2e037073
 800ee4c:	3ba3198a 	.word	0x3ba3198a
 800ee50:	6dc9c883 	.word	0x6dc9c883
 800ee54:	3fe45f30 	.word	0x3fe45f30
 800ee58:	2e000000 	.word	0x2e000000
 800ee5c:	3ba3198a 	.word	0x3ba3198a
 800ee60:	252049c1 	.word	0x252049c1
 800ee64:	397b839a 	.word	0x397b839a
 800ee68:	3fe921fb 	.word	0x3fe921fb
 800ee6c:	4002d97b 	.word	0x4002d97b
 800ee70:	3ff921fb 	.word	0x3ff921fb
 800ee74:	413921fb 	.word	0x413921fb
 800ee78:	3fe00000 	.word	0x3fe00000
 800ee7c:	080100e8 	.word	0x080100e8
 800ee80:	7fefffff 	.word	0x7fefffff
 800ee84:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ee88:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800ee8c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ee90:	4630      	mov	r0, r6
 800ee92:	460f      	mov	r7, r1
 800ee94:	f7f1 fe60 	bl	8000b58 <__aeabi_d2iz>
 800ee98:	f7f1 fb44 	bl	8000524 <__aeabi_i2d>
 800ee9c:	4602      	mov	r2, r0
 800ee9e:	460b      	mov	r3, r1
 800eea0:	4630      	mov	r0, r6
 800eea2:	4639      	mov	r1, r7
 800eea4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eea8:	f7f1 f9ee 	bl	8000288 <__aeabi_dsub>
 800eeac:	2200      	movs	r2, #0
 800eeae:	4b1f      	ldr	r3, [pc, #124]	; (800ef2c <__ieee754_rem_pio2+0x3dc>)
 800eeb0:	f7f1 fba2 	bl	80005f8 <__aeabi_dmul>
 800eeb4:	460f      	mov	r7, r1
 800eeb6:	4606      	mov	r6, r0
 800eeb8:	f7f1 fe4e 	bl	8000b58 <__aeabi_d2iz>
 800eebc:	f7f1 fb32 	bl	8000524 <__aeabi_i2d>
 800eec0:	4602      	mov	r2, r0
 800eec2:	460b      	mov	r3, r1
 800eec4:	4630      	mov	r0, r6
 800eec6:	4639      	mov	r1, r7
 800eec8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eecc:	f7f1 f9dc 	bl	8000288 <__aeabi_dsub>
 800eed0:	2200      	movs	r2, #0
 800eed2:	4b16      	ldr	r3, [pc, #88]	; (800ef2c <__ieee754_rem_pio2+0x3dc>)
 800eed4:	f7f1 fb90 	bl	80005f8 <__aeabi_dmul>
 800eed8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800eedc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800eee0:	f04f 0803 	mov.w	r8, #3
 800eee4:	2600      	movs	r6, #0
 800eee6:	2700      	movs	r7, #0
 800eee8:	4632      	mov	r2, r6
 800eeea:	463b      	mov	r3, r7
 800eeec:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800eef0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800eef4:	f7f1 fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 800eef8:	b9b0      	cbnz	r0, 800ef28 <__ieee754_rem_pio2+0x3d8>
 800eefa:	4b0d      	ldr	r3, [pc, #52]	; (800ef30 <__ieee754_rem_pio2+0x3e0>)
 800eefc:	9301      	str	r3, [sp, #4]
 800eefe:	2302      	movs	r3, #2
 800ef00:	9300      	str	r3, [sp, #0]
 800ef02:	462a      	mov	r2, r5
 800ef04:	4643      	mov	r3, r8
 800ef06:	4621      	mov	r1, r4
 800ef08:	a806      	add	r0, sp, #24
 800ef0a:	f000 f98d 	bl	800f228 <__kernel_rem_pio2>
 800ef0e:	9b04      	ldr	r3, [sp, #16]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	4605      	mov	r5, r0
 800ef14:	f6bf ae58 	bge.w	800ebc8 <__ieee754_rem_pio2+0x78>
 800ef18:	6863      	ldr	r3, [r4, #4]
 800ef1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ef1e:	6063      	str	r3, [r4, #4]
 800ef20:	68e3      	ldr	r3, [r4, #12]
 800ef22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ef26:	e746      	b.n	800edb6 <__ieee754_rem_pio2+0x266>
 800ef28:	46d0      	mov	r8, sl
 800ef2a:	e7dd      	b.n	800eee8 <__ieee754_rem_pio2+0x398>
 800ef2c:	41700000 	.word	0x41700000
 800ef30:	08010168 	.word	0x08010168

0800ef34 <__ieee754_sqrt>:
 800ef34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef38:	4955      	ldr	r1, [pc, #340]	; (800f090 <__ieee754_sqrt+0x15c>)
 800ef3a:	ec55 4b10 	vmov	r4, r5, d0
 800ef3e:	43a9      	bics	r1, r5
 800ef40:	462b      	mov	r3, r5
 800ef42:	462a      	mov	r2, r5
 800ef44:	d112      	bne.n	800ef6c <__ieee754_sqrt+0x38>
 800ef46:	ee10 2a10 	vmov	r2, s0
 800ef4a:	ee10 0a10 	vmov	r0, s0
 800ef4e:	4629      	mov	r1, r5
 800ef50:	f7f1 fb52 	bl	80005f8 <__aeabi_dmul>
 800ef54:	4602      	mov	r2, r0
 800ef56:	460b      	mov	r3, r1
 800ef58:	4620      	mov	r0, r4
 800ef5a:	4629      	mov	r1, r5
 800ef5c:	f7f1 f996 	bl	800028c <__adddf3>
 800ef60:	4604      	mov	r4, r0
 800ef62:	460d      	mov	r5, r1
 800ef64:	ec45 4b10 	vmov	d0, r4, r5
 800ef68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef6c:	2d00      	cmp	r5, #0
 800ef6e:	ee10 0a10 	vmov	r0, s0
 800ef72:	4621      	mov	r1, r4
 800ef74:	dc0f      	bgt.n	800ef96 <__ieee754_sqrt+0x62>
 800ef76:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ef7a:	4330      	orrs	r0, r6
 800ef7c:	d0f2      	beq.n	800ef64 <__ieee754_sqrt+0x30>
 800ef7e:	b155      	cbz	r5, 800ef96 <__ieee754_sqrt+0x62>
 800ef80:	ee10 2a10 	vmov	r2, s0
 800ef84:	4620      	mov	r0, r4
 800ef86:	4629      	mov	r1, r5
 800ef88:	f7f1 f97e 	bl	8000288 <__aeabi_dsub>
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	460b      	mov	r3, r1
 800ef90:	f7f1 fc5c 	bl	800084c <__aeabi_ddiv>
 800ef94:	e7e4      	b.n	800ef60 <__ieee754_sqrt+0x2c>
 800ef96:	151b      	asrs	r3, r3, #20
 800ef98:	d073      	beq.n	800f082 <__ieee754_sqrt+0x14e>
 800ef9a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ef9e:	07dd      	lsls	r5, r3, #31
 800efa0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800efa4:	bf48      	it	mi
 800efa6:	0fc8      	lsrmi	r0, r1, #31
 800efa8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800efac:	bf44      	itt	mi
 800efae:	0049      	lslmi	r1, r1, #1
 800efb0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800efb4:	2500      	movs	r5, #0
 800efb6:	1058      	asrs	r0, r3, #1
 800efb8:	0fcb      	lsrs	r3, r1, #31
 800efba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800efbe:	0049      	lsls	r1, r1, #1
 800efc0:	2316      	movs	r3, #22
 800efc2:	462c      	mov	r4, r5
 800efc4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800efc8:	19a7      	adds	r7, r4, r6
 800efca:	4297      	cmp	r7, r2
 800efcc:	bfde      	ittt	le
 800efce:	19bc      	addle	r4, r7, r6
 800efd0:	1bd2      	suble	r2, r2, r7
 800efd2:	19ad      	addle	r5, r5, r6
 800efd4:	0fcf      	lsrs	r7, r1, #31
 800efd6:	3b01      	subs	r3, #1
 800efd8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800efdc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800efe0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800efe4:	d1f0      	bne.n	800efc8 <__ieee754_sqrt+0x94>
 800efe6:	f04f 0c20 	mov.w	ip, #32
 800efea:	469e      	mov	lr, r3
 800efec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800eff0:	42a2      	cmp	r2, r4
 800eff2:	eb06 070e 	add.w	r7, r6, lr
 800eff6:	dc02      	bgt.n	800effe <__ieee754_sqrt+0xca>
 800eff8:	d112      	bne.n	800f020 <__ieee754_sqrt+0xec>
 800effa:	428f      	cmp	r7, r1
 800effc:	d810      	bhi.n	800f020 <__ieee754_sqrt+0xec>
 800effe:	2f00      	cmp	r7, #0
 800f000:	eb07 0e06 	add.w	lr, r7, r6
 800f004:	da42      	bge.n	800f08c <__ieee754_sqrt+0x158>
 800f006:	f1be 0f00 	cmp.w	lr, #0
 800f00a:	db3f      	blt.n	800f08c <__ieee754_sqrt+0x158>
 800f00c:	f104 0801 	add.w	r8, r4, #1
 800f010:	1b12      	subs	r2, r2, r4
 800f012:	428f      	cmp	r7, r1
 800f014:	bf88      	it	hi
 800f016:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800f01a:	1bc9      	subs	r1, r1, r7
 800f01c:	4433      	add	r3, r6
 800f01e:	4644      	mov	r4, r8
 800f020:	0052      	lsls	r2, r2, #1
 800f022:	f1bc 0c01 	subs.w	ip, ip, #1
 800f026:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800f02a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f02e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f032:	d1dd      	bne.n	800eff0 <__ieee754_sqrt+0xbc>
 800f034:	430a      	orrs	r2, r1
 800f036:	d006      	beq.n	800f046 <__ieee754_sqrt+0x112>
 800f038:	1c5c      	adds	r4, r3, #1
 800f03a:	bf13      	iteet	ne
 800f03c:	3301      	addne	r3, #1
 800f03e:	3501      	addeq	r5, #1
 800f040:	4663      	moveq	r3, ip
 800f042:	f023 0301 	bicne.w	r3, r3, #1
 800f046:	106a      	asrs	r2, r5, #1
 800f048:	085b      	lsrs	r3, r3, #1
 800f04a:	07e9      	lsls	r1, r5, #31
 800f04c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f050:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f054:	bf48      	it	mi
 800f056:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f05a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800f05e:	461c      	mov	r4, r3
 800f060:	e780      	b.n	800ef64 <__ieee754_sqrt+0x30>
 800f062:	0aca      	lsrs	r2, r1, #11
 800f064:	3815      	subs	r0, #21
 800f066:	0549      	lsls	r1, r1, #21
 800f068:	2a00      	cmp	r2, #0
 800f06a:	d0fa      	beq.n	800f062 <__ieee754_sqrt+0x12e>
 800f06c:	02d6      	lsls	r6, r2, #11
 800f06e:	d50a      	bpl.n	800f086 <__ieee754_sqrt+0x152>
 800f070:	f1c3 0420 	rsb	r4, r3, #32
 800f074:	fa21 f404 	lsr.w	r4, r1, r4
 800f078:	1e5d      	subs	r5, r3, #1
 800f07a:	4099      	lsls	r1, r3
 800f07c:	4322      	orrs	r2, r4
 800f07e:	1b43      	subs	r3, r0, r5
 800f080:	e78b      	b.n	800ef9a <__ieee754_sqrt+0x66>
 800f082:	4618      	mov	r0, r3
 800f084:	e7f0      	b.n	800f068 <__ieee754_sqrt+0x134>
 800f086:	0052      	lsls	r2, r2, #1
 800f088:	3301      	adds	r3, #1
 800f08a:	e7ef      	b.n	800f06c <__ieee754_sqrt+0x138>
 800f08c:	46a0      	mov	r8, r4
 800f08e:	e7bf      	b.n	800f010 <__ieee754_sqrt+0xdc>
 800f090:	7ff00000 	.word	0x7ff00000
 800f094:	00000000 	.word	0x00000000

0800f098 <__kernel_cos>:
 800f098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f09c:	ec59 8b10 	vmov	r8, r9, d0
 800f0a0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800f0a4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800f0a8:	ed2d 8b02 	vpush	{d8}
 800f0ac:	eeb0 8a41 	vmov.f32	s16, s2
 800f0b0:	eef0 8a61 	vmov.f32	s17, s3
 800f0b4:	da07      	bge.n	800f0c6 <__kernel_cos+0x2e>
 800f0b6:	ee10 0a10 	vmov	r0, s0
 800f0ba:	4649      	mov	r1, r9
 800f0bc:	f7f1 fd4c 	bl	8000b58 <__aeabi_d2iz>
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	f000 8089 	beq.w	800f1d8 <__kernel_cos+0x140>
 800f0c6:	4642      	mov	r2, r8
 800f0c8:	464b      	mov	r3, r9
 800f0ca:	4640      	mov	r0, r8
 800f0cc:	4649      	mov	r1, r9
 800f0ce:	f7f1 fa93 	bl	80005f8 <__aeabi_dmul>
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	4b4e      	ldr	r3, [pc, #312]	; (800f210 <__kernel_cos+0x178>)
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	460d      	mov	r5, r1
 800f0da:	f7f1 fa8d 	bl	80005f8 <__aeabi_dmul>
 800f0de:	a340      	add	r3, pc, #256	; (adr r3, 800f1e0 <__kernel_cos+0x148>)
 800f0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e4:	4682      	mov	sl, r0
 800f0e6:	468b      	mov	fp, r1
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	4629      	mov	r1, r5
 800f0ec:	f7f1 fa84 	bl	80005f8 <__aeabi_dmul>
 800f0f0:	a33d      	add	r3, pc, #244	; (adr r3, 800f1e8 <__kernel_cos+0x150>)
 800f0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f6:	f7f1 f8c9 	bl	800028c <__adddf3>
 800f0fa:	4622      	mov	r2, r4
 800f0fc:	462b      	mov	r3, r5
 800f0fe:	f7f1 fa7b 	bl	80005f8 <__aeabi_dmul>
 800f102:	a33b      	add	r3, pc, #236	; (adr r3, 800f1f0 <__kernel_cos+0x158>)
 800f104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f108:	f7f1 f8be 	bl	8000288 <__aeabi_dsub>
 800f10c:	4622      	mov	r2, r4
 800f10e:	462b      	mov	r3, r5
 800f110:	f7f1 fa72 	bl	80005f8 <__aeabi_dmul>
 800f114:	a338      	add	r3, pc, #224	; (adr r3, 800f1f8 <__kernel_cos+0x160>)
 800f116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11a:	f7f1 f8b7 	bl	800028c <__adddf3>
 800f11e:	4622      	mov	r2, r4
 800f120:	462b      	mov	r3, r5
 800f122:	f7f1 fa69 	bl	80005f8 <__aeabi_dmul>
 800f126:	a336      	add	r3, pc, #216	; (adr r3, 800f200 <__kernel_cos+0x168>)
 800f128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12c:	f7f1 f8ac 	bl	8000288 <__aeabi_dsub>
 800f130:	4622      	mov	r2, r4
 800f132:	462b      	mov	r3, r5
 800f134:	f7f1 fa60 	bl	80005f8 <__aeabi_dmul>
 800f138:	a333      	add	r3, pc, #204	; (adr r3, 800f208 <__kernel_cos+0x170>)
 800f13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13e:	f7f1 f8a5 	bl	800028c <__adddf3>
 800f142:	4622      	mov	r2, r4
 800f144:	462b      	mov	r3, r5
 800f146:	f7f1 fa57 	bl	80005f8 <__aeabi_dmul>
 800f14a:	4622      	mov	r2, r4
 800f14c:	462b      	mov	r3, r5
 800f14e:	f7f1 fa53 	bl	80005f8 <__aeabi_dmul>
 800f152:	ec53 2b18 	vmov	r2, r3, d8
 800f156:	4604      	mov	r4, r0
 800f158:	460d      	mov	r5, r1
 800f15a:	4640      	mov	r0, r8
 800f15c:	4649      	mov	r1, r9
 800f15e:	f7f1 fa4b 	bl	80005f8 <__aeabi_dmul>
 800f162:	460b      	mov	r3, r1
 800f164:	4602      	mov	r2, r0
 800f166:	4629      	mov	r1, r5
 800f168:	4620      	mov	r0, r4
 800f16a:	f7f1 f88d 	bl	8000288 <__aeabi_dsub>
 800f16e:	4b29      	ldr	r3, [pc, #164]	; (800f214 <__kernel_cos+0x17c>)
 800f170:	429e      	cmp	r6, r3
 800f172:	4680      	mov	r8, r0
 800f174:	4689      	mov	r9, r1
 800f176:	dc11      	bgt.n	800f19c <__kernel_cos+0x104>
 800f178:	4602      	mov	r2, r0
 800f17a:	460b      	mov	r3, r1
 800f17c:	4650      	mov	r0, sl
 800f17e:	4659      	mov	r1, fp
 800f180:	f7f1 f882 	bl	8000288 <__aeabi_dsub>
 800f184:	460b      	mov	r3, r1
 800f186:	4924      	ldr	r1, [pc, #144]	; (800f218 <__kernel_cos+0x180>)
 800f188:	4602      	mov	r2, r0
 800f18a:	2000      	movs	r0, #0
 800f18c:	f7f1 f87c 	bl	8000288 <__aeabi_dsub>
 800f190:	ecbd 8b02 	vpop	{d8}
 800f194:	ec41 0b10 	vmov	d0, r0, r1
 800f198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f19c:	4b1f      	ldr	r3, [pc, #124]	; (800f21c <__kernel_cos+0x184>)
 800f19e:	491e      	ldr	r1, [pc, #120]	; (800f218 <__kernel_cos+0x180>)
 800f1a0:	429e      	cmp	r6, r3
 800f1a2:	bfcc      	ite	gt
 800f1a4:	4d1e      	ldrgt	r5, [pc, #120]	; (800f220 <__kernel_cos+0x188>)
 800f1a6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800f1aa:	2400      	movs	r4, #0
 800f1ac:	4622      	mov	r2, r4
 800f1ae:	462b      	mov	r3, r5
 800f1b0:	2000      	movs	r0, #0
 800f1b2:	f7f1 f869 	bl	8000288 <__aeabi_dsub>
 800f1b6:	4622      	mov	r2, r4
 800f1b8:	4606      	mov	r6, r0
 800f1ba:	460f      	mov	r7, r1
 800f1bc:	462b      	mov	r3, r5
 800f1be:	4650      	mov	r0, sl
 800f1c0:	4659      	mov	r1, fp
 800f1c2:	f7f1 f861 	bl	8000288 <__aeabi_dsub>
 800f1c6:	4642      	mov	r2, r8
 800f1c8:	464b      	mov	r3, r9
 800f1ca:	f7f1 f85d 	bl	8000288 <__aeabi_dsub>
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	4639      	mov	r1, r7
 800f1d6:	e7d9      	b.n	800f18c <__kernel_cos+0xf4>
 800f1d8:	2000      	movs	r0, #0
 800f1da:	490f      	ldr	r1, [pc, #60]	; (800f218 <__kernel_cos+0x180>)
 800f1dc:	e7d8      	b.n	800f190 <__kernel_cos+0xf8>
 800f1de:	bf00      	nop
 800f1e0:	be8838d4 	.word	0xbe8838d4
 800f1e4:	bda8fae9 	.word	0xbda8fae9
 800f1e8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f1ec:	3e21ee9e 	.word	0x3e21ee9e
 800f1f0:	809c52ad 	.word	0x809c52ad
 800f1f4:	3e927e4f 	.word	0x3e927e4f
 800f1f8:	19cb1590 	.word	0x19cb1590
 800f1fc:	3efa01a0 	.word	0x3efa01a0
 800f200:	16c15177 	.word	0x16c15177
 800f204:	3f56c16c 	.word	0x3f56c16c
 800f208:	5555554c 	.word	0x5555554c
 800f20c:	3fa55555 	.word	0x3fa55555
 800f210:	3fe00000 	.word	0x3fe00000
 800f214:	3fd33332 	.word	0x3fd33332
 800f218:	3ff00000 	.word	0x3ff00000
 800f21c:	3fe90000 	.word	0x3fe90000
 800f220:	3fd20000 	.word	0x3fd20000
 800f224:	00000000 	.word	0x00000000

0800f228 <__kernel_rem_pio2>:
 800f228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f22c:	ed2d 8b02 	vpush	{d8}
 800f230:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f234:	1ed4      	subs	r4, r2, #3
 800f236:	9308      	str	r3, [sp, #32]
 800f238:	9101      	str	r1, [sp, #4]
 800f23a:	4bc5      	ldr	r3, [pc, #788]	; (800f550 <__kernel_rem_pio2+0x328>)
 800f23c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f23e:	9009      	str	r0, [sp, #36]	; 0x24
 800f240:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f244:	9304      	str	r3, [sp, #16]
 800f246:	9b08      	ldr	r3, [sp, #32]
 800f248:	3b01      	subs	r3, #1
 800f24a:	9307      	str	r3, [sp, #28]
 800f24c:	2318      	movs	r3, #24
 800f24e:	fb94 f4f3 	sdiv	r4, r4, r3
 800f252:	f06f 0317 	mvn.w	r3, #23
 800f256:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800f25a:	fb04 3303 	mla	r3, r4, r3, r3
 800f25e:	eb03 0a02 	add.w	sl, r3, r2
 800f262:	9b04      	ldr	r3, [sp, #16]
 800f264:	9a07      	ldr	r2, [sp, #28]
 800f266:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f540 <__kernel_rem_pio2+0x318>
 800f26a:	eb03 0802 	add.w	r8, r3, r2
 800f26e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f270:	1aa7      	subs	r7, r4, r2
 800f272:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f276:	ae22      	add	r6, sp, #136	; 0x88
 800f278:	2500      	movs	r5, #0
 800f27a:	4545      	cmp	r5, r8
 800f27c:	dd13      	ble.n	800f2a6 <__kernel_rem_pio2+0x7e>
 800f27e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800f540 <__kernel_rem_pio2+0x318>
 800f282:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f286:	2600      	movs	r6, #0
 800f288:	9b04      	ldr	r3, [sp, #16]
 800f28a:	429e      	cmp	r6, r3
 800f28c:	dc32      	bgt.n	800f2f4 <__kernel_rem_pio2+0xcc>
 800f28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f290:	9302      	str	r3, [sp, #8]
 800f292:	9b08      	ldr	r3, [sp, #32]
 800f294:	199d      	adds	r5, r3, r6
 800f296:	ab22      	add	r3, sp, #136	; 0x88
 800f298:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f29c:	9306      	str	r3, [sp, #24]
 800f29e:	ec59 8b18 	vmov	r8, r9, d8
 800f2a2:	2700      	movs	r7, #0
 800f2a4:	e01f      	b.n	800f2e6 <__kernel_rem_pio2+0xbe>
 800f2a6:	42ef      	cmn	r7, r5
 800f2a8:	d407      	bmi.n	800f2ba <__kernel_rem_pio2+0x92>
 800f2aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f2ae:	f7f1 f939 	bl	8000524 <__aeabi_i2d>
 800f2b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f2b6:	3501      	adds	r5, #1
 800f2b8:	e7df      	b.n	800f27a <__kernel_rem_pio2+0x52>
 800f2ba:	ec51 0b18 	vmov	r0, r1, d8
 800f2be:	e7f8      	b.n	800f2b2 <__kernel_rem_pio2+0x8a>
 800f2c0:	9906      	ldr	r1, [sp, #24]
 800f2c2:	9d02      	ldr	r5, [sp, #8]
 800f2c4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800f2c8:	9106      	str	r1, [sp, #24]
 800f2ca:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800f2ce:	9502      	str	r5, [sp, #8]
 800f2d0:	f7f1 f992 	bl	80005f8 <__aeabi_dmul>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	460b      	mov	r3, r1
 800f2d8:	4640      	mov	r0, r8
 800f2da:	4649      	mov	r1, r9
 800f2dc:	f7f0 ffd6 	bl	800028c <__adddf3>
 800f2e0:	3701      	adds	r7, #1
 800f2e2:	4680      	mov	r8, r0
 800f2e4:	4689      	mov	r9, r1
 800f2e6:	9b07      	ldr	r3, [sp, #28]
 800f2e8:	429f      	cmp	r7, r3
 800f2ea:	dde9      	ble.n	800f2c0 <__kernel_rem_pio2+0x98>
 800f2ec:	e8eb 8902 	strd	r8, r9, [fp], #8
 800f2f0:	3601      	adds	r6, #1
 800f2f2:	e7c9      	b.n	800f288 <__kernel_rem_pio2+0x60>
 800f2f4:	9b04      	ldr	r3, [sp, #16]
 800f2f6:	aa0e      	add	r2, sp, #56	; 0x38
 800f2f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f2fc:	930c      	str	r3, [sp, #48]	; 0x30
 800f2fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f300:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f304:	9c04      	ldr	r4, [sp, #16]
 800f306:	930b      	str	r3, [sp, #44]	; 0x2c
 800f308:	ab9a      	add	r3, sp, #616	; 0x268
 800f30a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800f30e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f312:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f316:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800f31a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800f31e:	ab9a      	add	r3, sp, #616	; 0x268
 800f320:	445b      	add	r3, fp
 800f322:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800f326:	2500      	movs	r5, #0
 800f328:	1b63      	subs	r3, r4, r5
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	dc78      	bgt.n	800f420 <__kernel_rem_pio2+0x1f8>
 800f32e:	4650      	mov	r0, sl
 800f330:	ec49 8b10 	vmov	d0, r8, r9
 800f334:	f000 fc98 	bl	800fc68 <scalbn>
 800f338:	ec57 6b10 	vmov	r6, r7, d0
 800f33c:	2200      	movs	r2, #0
 800f33e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f342:	ee10 0a10 	vmov	r0, s0
 800f346:	4639      	mov	r1, r7
 800f348:	f7f1 f956 	bl	80005f8 <__aeabi_dmul>
 800f34c:	ec41 0b10 	vmov	d0, r0, r1
 800f350:	f000 fb76 	bl	800fa40 <floor>
 800f354:	2200      	movs	r2, #0
 800f356:	ec51 0b10 	vmov	r0, r1, d0
 800f35a:	4b7e      	ldr	r3, [pc, #504]	; (800f554 <__kernel_rem_pio2+0x32c>)
 800f35c:	f7f1 f94c 	bl	80005f8 <__aeabi_dmul>
 800f360:	4602      	mov	r2, r0
 800f362:	460b      	mov	r3, r1
 800f364:	4630      	mov	r0, r6
 800f366:	4639      	mov	r1, r7
 800f368:	f7f0 ff8e 	bl	8000288 <__aeabi_dsub>
 800f36c:	460f      	mov	r7, r1
 800f36e:	4606      	mov	r6, r0
 800f370:	f7f1 fbf2 	bl	8000b58 <__aeabi_d2iz>
 800f374:	9006      	str	r0, [sp, #24]
 800f376:	f7f1 f8d5 	bl	8000524 <__aeabi_i2d>
 800f37a:	4602      	mov	r2, r0
 800f37c:	460b      	mov	r3, r1
 800f37e:	4630      	mov	r0, r6
 800f380:	4639      	mov	r1, r7
 800f382:	f7f0 ff81 	bl	8000288 <__aeabi_dsub>
 800f386:	f1ba 0f00 	cmp.w	sl, #0
 800f38a:	4606      	mov	r6, r0
 800f38c:	460f      	mov	r7, r1
 800f38e:	dd6c      	ble.n	800f46a <__kernel_rem_pio2+0x242>
 800f390:	1e62      	subs	r2, r4, #1
 800f392:	ab0e      	add	r3, sp, #56	; 0x38
 800f394:	f1ca 0118 	rsb	r1, sl, #24
 800f398:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f39c:	9d06      	ldr	r5, [sp, #24]
 800f39e:	fa40 f301 	asr.w	r3, r0, r1
 800f3a2:	441d      	add	r5, r3
 800f3a4:	408b      	lsls	r3, r1
 800f3a6:	1ac0      	subs	r0, r0, r3
 800f3a8:	ab0e      	add	r3, sp, #56	; 0x38
 800f3aa:	9506      	str	r5, [sp, #24]
 800f3ac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f3b0:	f1ca 0317 	rsb	r3, sl, #23
 800f3b4:	fa40 f303 	asr.w	r3, r0, r3
 800f3b8:	9302      	str	r3, [sp, #8]
 800f3ba:	9b02      	ldr	r3, [sp, #8]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	dd62      	ble.n	800f486 <__kernel_rem_pio2+0x25e>
 800f3c0:	9b06      	ldr	r3, [sp, #24]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	3301      	adds	r3, #1
 800f3c6:	9306      	str	r3, [sp, #24]
 800f3c8:	4615      	mov	r5, r2
 800f3ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f3ce:	4294      	cmp	r4, r2
 800f3d0:	f300 8095 	bgt.w	800f4fe <__kernel_rem_pio2+0x2d6>
 800f3d4:	f1ba 0f00 	cmp.w	sl, #0
 800f3d8:	dd07      	ble.n	800f3ea <__kernel_rem_pio2+0x1c2>
 800f3da:	f1ba 0f01 	cmp.w	sl, #1
 800f3de:	f000 80a2 	beq.w	800f526 <__kernel_rem_pio2+0x2fe>
 800f3e2:	f1ba 0f02 	cmp.w	sl, #2
 800f3e6:	f000 80c1 	beq.w	800f56c <__kernel_rem_pio2+0x344>
 800f3ea:	9b02      	ldr	r3, [sp, #8]
 800f3ec:	2b02      	cmp	r3, #2
 800f3ee:	d14a      	bne.n	800f486 <__kernel_rem_pio2+0x25e>
 800f3f0:	4632      	mov	r2, r6
 800f3f2:	463b      	mov	r3, r7
 800f3f4:	2000      	movs	r0, #0
 800f3f6:	4958      	ldr	r1, [pc, #352]	; (800f558 <__kernel_rem_pio2+0x330>)
 800f3f8:	f7f0 ff46 	bl	8000288 <__aeabi_dsub>
 800f3fc:	4606      	mov	r6, r0
 800f3fe:	460f      	mov	r7, r1
 800f400:	2d00      	cmp	r5, #0
 800f402:	d040      	beq.n	800f486 <__kernel_rem_pio2+0x25e>
 800f404:	4650      	mov	r0, sl
 800f406:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f548 <__kernel_rem_pio2+0x320>
 800f40a:	f000 fc2d 	bl	800fc68 <scalbn>
 800f40e:	4630      	mov	r0, r6
 800f410:	4639      	mov	r1, r7
 800f412:	ec53 2b10 	vmov	r2, r3, d0
 800f416:	f7f0 ff37 	bl	8000288 <__aeabi_dsub>
 800f41a:	4606      	mov	r6, r0
 800f41c:	460f      	mov	r7, r1
 800f41e:	e032      	b.n	800f486 <__kernel_rem_pio2+0x25e>
 800f420:	2200      	movs	r2, #0
 800f422:	4b4e      	ldr	r3, [pc, #312]	; (800f55c <__kernel_rem_pio2+0x334>)
 800f424:	4640      	mov	r0, r8
 800f426:	4649      	mov	r1, r9
 800f428:	f7f1 f8e6 	bl	80005f8 <__aeabi_dmul>
 800f42c:	f7f1 fb94 	bl	8000b58 <__aeabi_d2iz>
 800f430:	f7f1 f878 	bl	8000524 <__aeabi_i2d>
 800f434:	2200      	movs	r2, #0
 800f436:	4b4a      	ldr	r3, [pc, #296]	; (800f560 <__kernel_rem_pio2+0x338>)
 800f438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f43c:	f7f1 f8dc 	bl	80005f8 <__aeabi_dmul>
 800f440:	4602      	mov	r2, r0
 800f442:	460b      	mov	r3, r1
 800f444:	4640      	mov	r0, r8
 800f446:	4649      	mov	r1, r9
 800f448:	f7f0 ff1e 	bl	8000288 <__aeabi_dsub>
 800f44c:	f7f1 fb84 	bl	8000b58 <__aeabi_d2iz>
 800f450:	ab0e      	add	r3, sp, #56	; 0x38
 800f452:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800f456:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f45a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f45e:	f7f0 ff15 	bl	800028c <__adddf3>
 800f462:	3501      	adds	r5, #1
 800f464:	4680      	mov	r8, r0
 800f466:	4689      	mov	r9, r1
 800f468:	e75e      	b.n	800f328 <__kernel_rem_pio2+0x100>
 800f46a:	d105      	bne.n	800f478 <__kernel_rem_pio2+0x250>
 800f46c:	1e63      	subs	r3, r4, #1
 800f46e:	aa0e      	add	r2, sp, #56	; 0x38
 800f470:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f474:	15c3      	asrs	r3, r0, #23
 800f476:	e79f      	b.n	800f3b8 <__kernel_rem_pio2+0x190>
 800f478:	2200      	movs	r2, #0
 800f47a:	4b3a      	ldr	r3, [pc, #232]	; (800f564 <__kernel_rem_pio2+0x33c>)
 800f47c:	f7f1 fb42 	bl	8000b04 <__aeabi_dcmpge>
 800f480:	2800      	cmp	r0, #0
 800f482:	d139      	bne.n	800f4f8 <__kernel_rem_pio2+0x2d0>
 800f484:	9002      	str	r0, [sp, #8]
 800f486:	2200      	movs	r2, #0
 800f488:	2300      	movs	r3, #0
 800f48a:	4630      	mov	r0, r6
 800f48c:	4639      	mov	r1, r7
 800f48e:	f7f1 fb1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f492:	2800      	cmp	r0, #0
 800f494:	f000 80c7 	beq.w	800f626 <__kernel_rem_pio2+0x3fe>
 800f498:	1e65      	subs	r5, r4, #1
 800f49a:	462b      	mov	r3, r5
 800f49c:	2200      	movs	r2, #0
 800f49e:	9904      	ldr	r1, [sp, #16]
 800f4a0:	428b      	cmp	r3, r1
 800f4a2:	da6a      	bge.n	800f57a <__kernel_rem_pio2+0x352>
 800f4a4:	2a00      	cmp	r2, #0
 800f4a6:	f000 8088 	beq.w	800f5ba <__kernel_rem_pio2+0x392>
 800f4aa:	ab0e      	add	r3, sp, #56	; 0x38
 800f4ac:	f1aa 0a18 	sub.w	sl, sl, #24
 800f4b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	f000 80b4 	beq.w	800f622 <__kernel_rem_pio2+0x3fa>
 800f4ba:	4650      	mov	r0, sl
 800f4bc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800f548 <__kernel_rem_pio2+0x320>
 800f4c0:	f000 fbd2 	bl	800fc68 <scalbn>
 800f4c4:	00ec      	lsls	r4, r5, #3
 800f4c6:	ab72      	add	r3, sp, #456	; 0x1c8
 800f4c8:	191e      	adds	r6, r3, r4
 800f4ca:	ec59 8b10 	vmov	r8, r9, d0
 800f4ce:	f106 0a08 	add.w	sl, r6, #8
 800f4d2:	462f      	mov	r7, r5
 800f4d4:	2f00      	cmp	r7, #0
 800f4d6:	f280 80df 	bge.w	800f698 <__kernel_rem_pio2+0x470>
 800f4da:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800f540 <__kernel_rem_pio2+0x318>
 800f4de:	f04f 0a00 	mov.w	sl, #0
 800f4e2:	eba5 030a 	sub.w	r3, r5, sl
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	f2c0 810a 	blt.w	800f700 <__kernel_rem_pio2+0x4d8>
 800f4ec:	f8df b078 	ldr.w	fp, [pc, #120]	; 800f568 <__kernel_rem_pio2+0x340>
 800f4f0:	ec59 8b18 	vmov	r8, r9, d8
 800f4f4:	2700      	movs	r7, #0
 800f4f6:	e0f5      	b.n	800f6e4 <__kernel_rem_pio2+0x4bc>
 800f4f8:	2302      	movs	r3, #2
 800f4fa:	9302      	str	r3, [sp, #8]
 800f4fc:	e760      	b.n	800f3c0 <__kernel_rem_pio2+0x198>
 800f4fe:	ab0e      	add	r3, sp, #56	; 0x38
 800f500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f504:	b94d      	cbnz	r5, 800f51a <__kernel_rem_pio2+0x2f2>
 800f506:	b12b      	cbz	r3, 800f514 <__kernel_rem_pio2+0x2ec>
 800f508:	a80e      	add	r0, sp, #56	; 0x38
 800f50a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f50e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800f512:	2301      	movs	r3, #1
 800f514:	3201      	adds	r2, #1
 800f516:	461d      	mov	r5, r3
 800f518:	e759      	b.n	800f3ce <__kernel_rem_pio2+0x1a6>
 800f51a:	a80e      	add	r0, sp, #56	; 0x38
 800f51c:	1acb      	subs	r3, r1, r3
 800f51e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800f522:	462b      	mov	r3, r5
 800f524:	e7f6      	b.n	800f514 <__kernel_rem_pio2+0x2ec>
 800f526:	1e62      	subs	r2, r4, #1
 800f528:	ab0e      	add	r3, sp, #56	; 0x38
 800f52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f52e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f532:	a90e      	add	r1, sp, #56	; 0x38
 800f534:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f538:	e757      	b.n	800f3ea <__kernel_rem_pio2+0x1c2>
 800f53a:	bf00      	nop
 800f53c:	f3af 8000 	nop.w
	...
 800f54c:	3ff00000 	.word	0x3ff00000
 800f550:	080102b0 	.word	0x080102b0
 800f554:	40200000 	.word	0x40200000
 800f558:	3ff00000 	.word	0x3ff00000
 800f55c:	3e700000 	.word	0x3e700000
 800f560:	41700000 	.word	0x41700000
 800f564:	3fe00000 	.word	0x3fe00000
 800f568:	08010270 	.word	0x08010270
 800f56c:	1e62      	subs	r2, r4, #1
 800f56e:	ab0e      	add	r3, sp, #56	; 0x38
 800f570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f574:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f578:	e7db      	b.n	800f532 <__kernel_rem_pio2+0x30a>
 800f57a:	a90e      	add	r1, sp, #56	; 0x38
 800f57c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f580:	3b01      	subs	r3, #1
 800f582:	430a      	orrs	r2, r1
 800f584:	e78b      	b.n	800f49e <__kernel_rem_pio2+0x276>
 800f586:	3301      	adds	r3, #1
 800f588:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f58c:	2900      	cmp	r1, #0
 800f58e:	d0fa      	beq.n	800f586 <__kernel_rem_pio2+0x35e>
 800f590:	9a08      	ldr	r2, [sp, #32]
 800f592:	4422      	add	r2, r4
 800f594:	00d2      	lsls	r2, r2, #3
 800f596:	a922      	add	r1, sp, #136	; 0x88
 800f598:	18e3      	adds	r3, r4, r3
 800f59a:	9206      	str	r2, [sp, #24]
 800f59c:	440a      	add	r2, r1
 800f59e:	9302      	str	r3, [sp, #8]
 800f5a0:	f10b 0108 	add.w	r1, fp, #8
 800f5a4:	f102 0308 	add.w	r3, r2, #8
 800f5a8:	1c66      	adds	r6, r4, #1
 800f5aa:	910a      	str	r1, [sp, #40]	; 0x28
 800f5ac:	2500      	movs	r5, #0
 800f5ae:	930d      	str	r3, [sp, #52]	; 0x34
 800f5b0:	9b02      	ldr	r3, [sp, #8]
 800f5b2:	42b3      	cmp	r3, r6
 800f5b4:	da04      	bge.n	800f5c0 <__kernel_rem_pio2+0x398>
 800f5b6:	461c      	mov	r4, r3
 800f5b8:	e6a6      	b.n	800f308 <__kernel_rem_pio2+0xe0>
 800f5ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5bc:	2301      	movs	r3, #1
 800f5be:	e7e3      	b.n	800f588 <__kernel_rem_pio2+0x360>
 800f5c0:	9b06      	ldr	r3, [sp, #24]
 800f5c2:	18ef      	adds	r7, r5, r3
 800f5c4:	ab22      	add	r3, sp, #136	; 0x88
 800f5c6:	441f      	add	r7, r3
 800f5c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f5ce:	f7f0 ffa9 	bl	8000524 <__aeabi_i2d>
 800f5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5d4:	461c      	mov	r4, r3
 800f5d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5d8:	e9c7 0100 	strd	r0, r1, [r7]
 800f5dc:	eb03 0b05 	add.w	fp, r3, r5
 800f5e0:	2700      	movs	r7, #0
 800f5e2:	f04f 0800 	mov.w	r8, #0
 800f5e6:	f04f 0900 	mov.w	r9, #0
 800f5ea:	9b07      	ldr	r3, [sp, #28]
 800f5ec:	429f      	cmp	r7, r3
 800f5ee:	dd08      	ble.n	800f602 <__kernel_rem_pio2+0x3da>
 800f5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5f2:	aa72      	add	r2, sp, #456	; 0x1c8
 800f5f4:	18eb      	adds	r3, r5, r3
 800f5f6:	4413      	add	r3, r2
 800f5f8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800f5fc:	3601      	adds	r6, #1
 800f5fe:	3508      	adds	r5, #8
 800f600:	e7d6      	b.n	800f5b0 <__kernel_rem_pio2+0x388>
 800f602:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f606:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f60a:	f7f0 fff5 	bl	80005f8 <__aeabi_dmul>
 800f60e:	4602      	mov	r2, r0
 800f610:	460b      	mov	r3, r1
 800f612:	4640      	mov	r0, r8
 800f614:	4649      	mov	r1, r9
 800f616:	f7f0 fe39 	bl	800028c <__adddf3>
 800f61a:	3701      	adds	r7, #1
 800f61c:	4680      	mov	r8, r0
 800f61e:	4689      	mov	r9, r1
 800f620:	e7e3      	b.n	800f5ea <__kernel_rem_pio2+0x3c2>
 800f622:	3d01      	subs	r5, #1
 800f624:	e741      	b.n	800f4aa <__kernel_rem_pio2+0x282>
 800f626:	f1ca 0000 	rsb	r0, sl, #0
 800f62a:	ec47 6b10 	vmov	d0, r6, r7
 800f62e:	f000 fb1b 	bl	800fc68 <scalbn>
 800f632:	ec57 6b10 	vmov	r6, r7, d0
 800f636:	2200      	movs	r2, #0
 800f638:	4b99      	ldr	r3, [pc, #612]	; (800f8a0 <__kernel_rem_pio2+0x678>)
 800f63a:	ee10 0a10 	vmov	r0, s0
 800f63e:	4639      	mov	r1, r7
 800f640:	f7f1 fa60 	bl	8000b04 <__aeabi_dcmpge>
 800f644:	b1f8      	cbz	r0, 800f686 <__kernel_rem_pio2+0x45e>
 800f646:	2200      	movs	r2, #0
 800f648:	4b96      	ldr	r3, [pc, #600]	; (800f8a4 <__kernel_rem_pio2+0x67c>)
 800f64a:	4630      	mov	r0, r6
 800f64c:	4639      	mov	r1, r7
 800f64e:	f7f0 ffd3 	bl	80005f8 <__aeabi_dmul>
 800f652:	f7f1 fa81 	bl	8000b58 <__aeabi_d2iz>
 800f656:	4680      	mov	r8, r0
 800f658:	f7f0 ff64 	bl	8000524 <__aeabi_i2d>
 800f65c:	2200      	movs	r2, #0
 800f65e:	4b90      	ldr	r3, [pc, #576]	; (800f8a0 <__kernel_rem_pio2+0x678>)
 800f660:	f7f0 ffca 	bl	80005f8 <__aeabi_dmul>
 800f664:	460b      	mov	r3, r1
 800f666:	4602      	mov	r2, r0
 800f668:	4639      	mov	r1, r7
 800f66a:	4630      	mov	r0, r6
 800f66c:	f7f0 fe0c 	bl	8000288 <__aeabi_dsub>
 800f670:	f7f1 fa72 	bl	8000b58 <__aeabi_d2iz>
 800f674:	1c65      	adds	r5, r4, #1
 800f676:	ab0e      	add	r3, sp, #56	; 0x38
 800f678:	f10a 0a18 	add.w	sl, sl, #24
 800f67c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f680:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f684:	e719      	b.n	800f4ba <__kernel_rem_pio2+0x292>
 800f686:	4630      	mov	r0, r6
 800f688:	4639      	mov	r1, r7
 800f68a:	f7f1 fa65 	bl	8000b58 <__aeabi_d2iz>
 800f68e:	ab0e      	add	r3, sp, #56	; 0x38
 800f690:	4625      	mov	r5, r4
 800f692:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f696:	e710      	b.n	800f4ba <__kernel_rem_pio2+0x292>
 800f698:	ab0e      	add	r3, sp, #56	; 0x38
 800f69a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f69e:	f7f0 ff41 	bl	8000524 <__aeabi_i2d>
 800f6a2:	4642      	mov	r2, r8
 800f6a4:	464b      	mov	r3, r9
 800f6a6:	f7f0 ffa7 	bl	80005f8 <__aeabi_dmul>
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f6b0:	4b7c      	ldr	r3, [pc, #496]	; (800f8a4 <__kernel_rem_pio2+0x67c>)
 800f6b2:	4640      	mov	r0, r8
 800f6b4:	4649      	mov	r1, r9
 800f6b6:	f7f0 ff9f 	bl	80005f8 <__aeabi_dmul>
 800f6ba:	3f01      	subs	r7, #1
 800f6bc:	4680      	mov	r8, r0
 800f6be:	4689      	mov	r9, r1
 800f6c0:	e708      	b.n	800f4d4 <__kernel_rem_pio2+0x2ac>
 800f6c2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800f6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ca:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800f6ce:	f7f0 ff93 	bl	80005f8 <__aeabi_dmul>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	4640      	mov	r0, r8
 800f6d8:	4649      	mov	r1, r9
 800f6da:	f7f0 fdd7 	bl	800028c <__adddf3>
 800f6de:	3701      	adds	r7, #1
 800f6e0:	4680      	mov	r8, r0
 800f6e2:	4689      	mov	r9, r1
 800f6e4:	9b04      	ldr	r3, [sp, #16]
 800f6e6:	429f      	cmp	r7, r3
 800f6e8:	dc01      	bgt.n	800f6ee <__kernel_rem_pio2+0x4c6>
 800f6ea:	45ba      	cmp	sl, r7
 800f6ec:	dae9      	bge.n	800f6c2 <__kernel_rem_pio2+0x49a>
 800f6ee:	ab4a      	add	r3, sp, #296	; 0x128
 800f6f0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f6f4:	e9c3 8900 	strd	r8, r9, [r3]
 800f6f8:	f10a 0a01 	add.w	sl, sl, #1
 800f6fc:	3e08      	subs	r6, #8
 800f6fe:	e6f0      	b.n	800f4e2 <__kernel_rem_pio2+0x2ba>
 800f700:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f702:	2b03      	cmp	r3, #3
 800f704:	d85b      	bhi.n	800f7be <__kernel_rem_pio2+0x596>
 800f706:	e8df f003 	tbb	[pc, r3]
 800f70a:	264a      	.short	0x264a
 800f70c:	0226      	.short	0x0226
 800f70e:	ab9a      	add	r3, sp, #616	; 0x268
 800f710:	441c      	add	r4, r3
 800f712:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f716:	46a2      	mov	sl, r4
 800f718:	46ab      	mov	fp, r5
 800f71a:	f1bb 0f00 	cmp.w	fp, #0
 800f71e:	dc6c      	bgt.n	800f7fa <__kernel_rem_pio2+0x5d2>
 800f720:	46a2      	mov	sl, r4
 800f722:	46ab      	mov	fp, r5
 800f724:	f1bb 0f01 	cmp.w	fp, #1
 800f728:	f300 8086 	bgt.w	800f838 <__kernel_rem_pio2+0x610>
 800f72c:	2000      	movs	r0, #0
 800f72e:	2100      	movs	r1, #0
 800f730:	2d01      	cmp	r5, #1
 800f732:	f300 80a0 	bgt.w	800f876 <__kernel_rem_pio2+0x64e>
 800f736:	9b02      	ldr	r3, [sp, #8]
 800f738:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f73c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800f740:	2b00      	cmp	r3, #0
 800f742:	f040 809e 	bne.w	800f882 <__kernel_rem_pio2+0x65a>
 800f746:	9b01      	ldr	r3, [sp, #4]
 800f748:	e9c3 7800 	strd	r7, r8, [r3]
 800f74c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f750:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f754:	e033      	b.n	800f7be <__kernel_rem_pio2+0x596>
 800f756:	3408      	adds	r4, #8
 800f758:	ab4a      	add	r3, sp, #296	; 0x128
 800f75a:	441c      	add	r4, r3
 800f75c:	462e      	mov	r6, r5
 800f75e:	2000      	movs	r0, #0
 800f760:	2100      	movs	r1, #0
 800f762:	2e00      	cmp	r6, #0
 800f764:	da3a      	bge.n	800f7dc <__kernel_rem_pio2+0x5b4>
 800f766:	9b02      	ldr	r3, [sp, #8]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d03d      	beq.n	800f7e8 <__kernel_rem_pio2+0x5c0>
 800f76c:	4602      	mov	r2, r0
 800f76e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f772:	9c01      	ldr	r4, [sp, #4]
 800f774:	e9c4 2300 	strd	r2, r3, [r4]
 800f778:	4602      	mov	r2, r0
 800f77a:	460b      	mov	r3, r1
 800f77c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f780:	f7f0 fd82 	bl	8000288 <__aeabi_dsub>
 800f784:	ae4c      	add	r6, sp, #304	; 0x130
 800f786:	2401      	movs	r4, #1
 800f788:	42a5      	cmp	r5, r4
 800f78a:	da30      	bge.n	800f7ee <__kernel_rem_pio2+0x5c6>
 800f78c:	9b02      	ldr	r3, [sp, #8]
 800f78e:	b113      	cbz	r3, 800f796 <__kernel_rem_pio2+0x56e>
 800f790:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f794:	4619      	mov	r1, r3
 800f796:	9b01      	ldr	r3, [sp, #4]
 800f798:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f79c:	e00f      	b.n	800f7be <__kernel_rem_pio2+0x596>
 800f79e:	ab9a      	add	r3, sp, #616	; 0x268
 800f7a0:	441c      	add	r4, r3
 800f7a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f7a6:	2000      	movs	r0, #0
 800f7a8:	2100      	movs	r1, #0
 800f7aa:	2d00      	cmp	r5, #0
 800f7ac:	da10      	bge.n	800f7d0 <__kernel_rem_pio2+0x5a8>
 800f7ae:	9b02      	ldr	r3, [sp, #8]
 800f7b0:	b113      	cbz	r3, 800f7b8 <__kernel_rem_pio2+0x590>
 800f7b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	9b01      	ldr	r3, [sp, #4]
 800f7ba:	e9c3 0100 	strd	r0, r1, [r3]
 800f7be:	9b06      	ldr	r3, [sp, #24]
 800f7c0:	f003 0007 	and.w	r0, r3, #7
 800f7c4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f7c8:	ecbd 8b02 	vpop	{d8}
 800f7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7d0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f7d4:	f7f0 fd5a 	bl	800028c <__adddf3>
 800f7d8:	3d01      	subs	r5, #1
 800f7da:	e7e6      	b.n	800f7aa <__kernel_rem_pio2+0x582>
 800f7dc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f7e0:	f7f0 fd54 	bl	800028c <__adddf3>
 800f7e4:	3e01      	subs	r6, #1
 800f7e6:	e7bc      	b.n	800f762 <__kernel_rem_pio2+0x53a>
 800f7e8:	4602      	mov	r2, r0
 800f7ea:	460b      	mov	r3, r1
 800f7ec:	e7c1      	b.n	800f772 <__kernel_rem_pio2+0x54a>
 800f7ee:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f7f2:	f7f0 fd4b 	bl	800028c <__adddf3>
 800f7f6:	3401      	adds	r4, #1
 800f7f8:	e7c6      	b.n	800f788 <__kernel_rem_pio2+0x560>
 800f7fa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800f7fe:	ed3a 7b02 	vldmdb	sl!, {d7}
 800f802:	4640      	mov	r0, r8
 800f804:	ec53 2b17 	vmov	r2, r3, d7
 800f808:	4649      	mov	r1, r9
 800f80a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f80e:	f7f0 fd3d 	bl	800028c <__adddf3>
 800f812:	4602      	mov	r2, r0
 800f814:	460b      	mov	r3, r1
 800f816:	4606      	mov	r6, r0
 800f818:	460f      	mov	r7, r1
 800f81a:	4640      	mov	r0, r8
 800f81c:	4649      	mov	r1, r9
 800f81e:	f7f0 fd33 	bl	8000288 <__aeabi_dsub>
 800f822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f826:	f7f0 fd31 	bl	800028c <__adddf3>
 800f82a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f82e:	e9ca 0100 	strd	r0, r1, [sl]
 800f832:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800f836:	e770      	b.n	800f71a <__kernel_rem_pio2+0x4f2>
 800f838:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800f83c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800f840:	4630      	mov	r0, r6
 800f842:	ec53 2b17 	vmov	r2, r3, d7
 800f846:	4639      	mov	r1, r7
 800f848:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f84c:	f7f0 fd1e 	bl	800028c <__adddf3>
 800f850:	4602      	mov	r2, r0
 800f852:	460b      	mov	r3, r1
 800f854:	4680      	mov	r8, r0
 800f856:	4689      	mov	r9, r1
 800f858:	4630      	mov	r0, r6
 800f85a:	4639      	mov	r1, r7
 800f85c:	f7f0 fd14 	bl	8000288 <__aeabi_dsub>
 800f860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f864:	f7f0 fd12 	bl	800028c <__adddf3>
 800f868:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f86c:	e9ca 0100 	strd	r0, r1, [sl]
 800f870:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800f874:	e756      	b.n	800f724 <__kernel_rem_pio2+0x4fc>
 800f876:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f87a:	f7f0 fd07 	bl	800028c <__adddf3>
 800f87e:	3d01      	subs	r5, #1
 800f880:	e756      	b.n	800f730 <__kernel_rem_pio2+0x508>
 800f882:	9b01      	ldr	r3, [sp, #4]
 800f884:	9a01      	ldr	r2, [sp, #4]
 800f886:	601f      	str	r7, [r3, #0]
 800f888:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f88c:	605c      	str	r4, [r3, #4]
 800f88e:	609d      	str	r5, [r3, #8]
 800f890:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f894:	60d3      	str	r3, [r2, #12]
 800f896:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f89a:	6110      	str	r0, [r2, #16]
 800f89c:	6153      	str	r3, [r2, #20]
 800f89e:	e78e      	b.n	800f7be <__kernel_rem_pio2+0x596>
 800f8a0:	41700000 	.word	0x41700000
 800f8a4:	3e700000 	.word	0x3e700000

0800f8a8 <__kernel_sin>:
 800f8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ac:	ec55 4b10 	vmov	r4, r5, d0
 800f8b0:	b085      	sub	sp, #20
 800f8b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f8b6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f8ba:	ed8d 1b00 	vstr	d1, [sp]
 800f8be:	9002      	str	r0, [sp, #8]
 800f8c0:	da06      	bge.n	800f8d0 <__kernel_sin+0x28>
 800f8c2:	ee10 0a10 	vmov	r0, s0
 800f8c6:	4629      	mov	r1, r5
 800f8c8:	f7f1 f946 	bl	8000b58 <__aeabi_d2iz>
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	d051      	beq.n	800f974 <__kernel_sin+0xcc>
 800f8d0:	4622      	mov	r2, r4
 800f8d2:	462b      	mov	r3, r5
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	4629      	mov	r1, r5
 800f8d8:	f7f0 fe8e 	bl	80005f8 <__aeabi_dmul>
 800f8dc:	4682      	mov	sl, r0
 800f8de:	468b      	mov	fp, r1
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	460b      	mov	r3, r1
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	4629      	mov	r1, r5
 800f8e8:	f7f0 fe86 	bl	80005f8 <__aeabi_dmul>
 800f8ec:	a341      	add	r3, pc, #260	; (adr r3, 800f9f4 <__kernel_sin+0x14c>)
 800f8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f2:	4680      	mov	r8, r0
 800f8f4:	4689      	mov	r9, r1
 800f8f6:	4650      	mov	r0, sl
 800f8f8:	4659      	mov	r1, fp
 800f8fa:	f7f0 fe7d 	bl	80005f8 <__aeabi_dmul>
 800f8fe:	a33f      	add	r3, pc, #252	; (adr r3, 800f9fc <__kernel_sin+0x154>)
 800f900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f904:	f7f0 fcc0 	bl	8000288 <__aeabi_dsub>
 800f908:	4652      	mov	r2, sl
 800f90a:	465b      	mov	r3, fp
 800f90c:	f7f0 fe74 	bl	80005f8 <__aeabi_dmul>
 800f910:	a33c      	add	r3, pc, #240	; (adr r3, 800fa04 <__kernel_sin+0x15c>)
 800f912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f916:	f7f0 fcb9 	bl	800028c <__adddf3>
 800f91a:	4652      	mov	r2, sl
 800f91c:	465b      	mov	r3, fp
 800f91e:	f7f0 fe6b 	bl	80005f8 <__aeabi_dmul>
 800f922:	a33a      	add	r3, pc, #232	; (adr r3, 800fa0c <__kernel_sin+0x164>)
 800f924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f928:	f7f0 fcae 	bl	8000288 <__aeabi_dsub>
 800f92c:	4652      	mov	r2, sl
 800f92e:	465b      	mov	r3, fp
 800f930:	f7f0 fe62 	bl	80005f8 <__aeabi_dmul>
 800f934:	a337      	add	r3, pc, #220	; (adr r3, 800fa14 <__kernel_sin+0x16c>)
 800f936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93a:	f7f0 fca7 	bl	800028c <__adddf3>
 800f93e:	9b02      	ldr	r3, [sp, #8]
 800f940:	4606      	mov	r6, r0
 800f942:	460f      	mov	r7, r1
 800f944:	b9db      	cbnz	r3, 800f97e <__kernel_sin+0xd6>
 800f946:	4602      	mov	r2, r0
 800f948:	460b      	mov	r3, r1
 800f94a:	4650      	mov	r0, sl
 800f94c:	4659      	mov	r1, fp
 800f94e:	f7f0 fe53 	bl	80005f8 <__aeabi_dmul>
 800f952:	a325      	add	r3, pc, #148	; (adr r3, 800f9e8 <__kernel_sin+0x140>)
 800f954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f958:	f7f0 fc96 	bl	8000288 <__aeabi_dsub>
 800f95c:	4642      	mov	r2, r8
 800f95e:	464b      	mov	r3, r9
 800f960:	f7f0 fe4a 	bl	80005f8 <__aeabi_dmul>
 800f964:	4602      	mov	r2, r0
 800f966:	460b      	mov	r3, r1
 800f968:	4620      	mov	r0, r4
 800f96a:	4629      	mov	r1, r5
 800f96c:	f7f0 fc8e 	bl	800028c <__adddf3>
 800f970:	4604      	mov	r4, r0
 800f972:	460d      	mov	r5, r1
 800f974:	ec45 4b10 	vmov	d0, r4, r5
 800f978:	b005      	add	sp, #20
 800f97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f97e:	2200      	movs	r2, #0
 800f980:	4b1b      	ldr	r3, [pc, #108]	; (800f9f0 <__kernel_sin+0x148>)
 800f982:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f986:	f7f0 fe37 	bl	80005f8 <__aeabi_dmul>
 800f98a:	4632      	mov	r2, r6
 800f98c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f990:	463b      	mov	r3, r7
 800f992:	4640      	mov	r0, r8
 800f994:	4649      	mov	r1, r9
 800f996:	f7f0 fe2f 	bl	80005f8 <__aeabi_dmul>
 800f99a:	4602      	mov	r2, r0
 800f99c:	460b      	mov	r3, r1
 800f99e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9a2:	f7f0 fc71 	bl	8000288 <__aeabi_dsub>
 800f9a6:	4652      	mov	r2, sl
 800f9a8:	465b      	mov	r3, fp
 800f9aa:	f7f0 fe25 	bl	80005f8 <__aeabi_dmul>
 800f9ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9b2:	f7f0 fc69 	bl	8000288 <__aeabi_dsub>
 800f9b6:	a30c      	add	r3, pc, #48	; (adr r3, 800f9e8 <__kernel_sin+0x140>)
 800f9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9bc:	4606      	mov	r6, r0
 800f9be:	460f      	mov	r7, r1
 800f9c0:	4640      	mov	r0, r8
 800f9c2:	4649      	mov	r1, r9
 800f9c4:	f7f0 fe18 	bl	80005f8 <__aeabi_dmul>
 800f9c8:	4602      	mov	r2, r0
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	4639      	mov	r1, r7
 800f9d0:	f7f0 fc5c 	bl	800028c <__adddf3>
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	460b      	mov	r3, r1
 800f9d8:	4620      	mov	r0, r4
 800f9da:	4629      	mov	r1, r5
 800f9dc:	f7f0 fc54 	bl	8000288 <__aeabi_dsub>
 800f9e0:	e7c6      	b.n	800f970 <__kernel_sin+0xc8>
 800f9e2:	bf00      	nop
 800f9e4:	f3af 8000 	nop.w
 800f9e8:	55555549 	.word	0x55555549
 800f9ec:	3fc55555 	.word	0x3fc55555
 800f9f0:	3fe00000 	.word	0x3fe00000
 800f9f4:	5acfd57c 	.word	0x5acfd57c
 800f9f8:	3de5d93a 	.word	0x3de5d93a
 800f9fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800fa00:	3e5ae5e6 	.word	0x3e5ae5e6
 800fa04:	57b1fe7d 	.word	0x57b1fe7d
 800fa08:	3ec71de3 	.word	0x3ec71de3
 800fa0c:	19c161d5 	.word	0x19c161d5
 800fa10:	3f2a01a0 	.word	0x3f2a01a0
 800fa14:	1110f8a6 	.word	0x1110f8a6
 800fa18:	3f811111 	.word	0x3f811111

0800fa1c <fabs>:
 800fa1c:	ec51 0b10 	vmov	r0, r1, d0
 800fa20:	ee10 2a10 	vmov	r2, s0
 800fa24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fa28:	ec43 2b10 	vmov	d0, r2, r3
 800fa2c:	4770      	bx	lr

0800fa2e <finite>:
 800fa2e:	ee10 3a90 	vmov	r3, s1
 800fa32:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800fa36:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fa3a:	0fc0      	lsrs	r0, r0, #31
 800fa3c:	4770      	bx	lr
	...

0800fa40 <floor>:
 800fa40:	ec51 0b10 	vmov	r0, r1, d0
 800fa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa48:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800fa4c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800fa50:	2e13      	cmp	r6, #19
 800fa52:	460c      	mov	r4, r1
 800fa54:	ee10 5a10 	vmov	r5, s0
 800fa58:	4680      	mov	r8, r0
 800fa5a:	dc34      	bgt.n	800fac6 <floor+0x86>
 800fa5c:	2e00      	cmp	r6, #0
 800fa5e:	da16      	bge.n	800fa8e <floor+0x4e>
 800fa60:	a335      	add	r3, pc, #212	; (adr r3, 800fb38 <floor+0xf8>)
 800fa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa66:	f7f0 fc11 	bl	800028c <__adddf3>
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	f7f1 f853 	bl	8000b18 <__aeabi_dcmpgt>
 800fa72:	b148      	cbz	r0, 800fa88 <floor+0x48>
 800fa74:	2c00      	cmp	r4, #0
 800fa76:	da59      	bge.n	800fb2c <floor+0xec>
 800fa78:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fa7c:	4a30      	ldr	r2, [pc, #192]	; (800fb40 <floor+0x100>)
 800fa7e:	432b      	orrs	r3, r5
 800fa80:	2500      	movs	r5, #0
 800fa82:	42ab      	cmp	r3, r5
 800fa84:	bf18      	it	ne
 800fa86:	4614      	movne	r4, r2
 800fa88:	4621      	mov	r1, r4
 800fa8a:	4628      	mov	r0, r5
 800fa8c:	e025      	b.n	800fada <floor+0x9a>
 800fa8e:	4f2d      	ldr	r7, [pc, #180]	; (800fb44 <floor+0x104>)
 800fa90:	4137      	asrs	r7, r6
 800fa92:	ea01 0307 	and.w	r3, r1, r7
 800fa96:	4303      	orrs	r3, r0
 800fa98:	d01f      	beq.n	800fada <floor+0x9a>
 800fa9a:	a327      	add	r3, pc, #156	; (adr r3, 800fb38 <floor+0xf8>)
 800fa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa0:	f7f0 fbf4 	bl	800028c <__adddf3>
 800faa4:	2200      	movs	r2, #0
 800faa6:	2300      	movs	r3, #0
 800faa8:	f7f1 f836 	bl	8000b18 <__aeabi_dcmpgt>
 800faac:	2800      	cmp	r0, #0
 800faae:	d0eb      	beq.n	800fa88 <floor+0x48>
 800fab0:	2c00      	cmp	r4, #0
 800fab2:	bfbe      	ittt	lt
 800fab4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fab8:	fa43 f606 	asrlt.w	r6, r3, r6
 800fabc:	19a4      	addlt	r4, r4, r6
 800fabe:	ea24 0407 	bic.w	r4, r4, r7
 800fac2:	2500      	movs	r5, #0
 800fac4:	e7e0      	b.n	800fa88 <floor+0x48>
 800fac6:	2e33      	cmp	r6, #51	; 0x33
 800fac8:	dd0b      	ble.n	800fae2 <floor+0xa2>
 800faca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800face:	d104      	bne.n	800fada <floor+0x9a>
 800fad0:	ee10 2a10 	vmov	r2, s0
 800fad4:	460b      	mov	r3, r1
 800fad6:	f7f0 fbd9 	bl	800028c <__adddf3>
 800fada:	ec41 0b10 	vmov	d0, r0, r1
 800fade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fae2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800fae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800faea:	fa23 f707 	lsr.w	r7, r3, r7
 800faee:	4207      	tst	r7, r0
 800faf0:	d0f3      	beq.n	800fada <floor+0x9a>
 800faf2:	a311      	add	r3, pc, #68	; (adr r3, 800fb38 <floor+0xf8>)
 800faf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf8:	f7f0 fbc8 	bl	800028c <__adddf3>
 800fafc:	2200      	movs	r2, #0
 800fafe:	2300      	movs	r3, #0
 800fb00:	f7f1 f80a 	bl	8000b18 <__aeabi_dcmpgt>
 800fb04:	2800      	cmp	r0, #0
 800fb06:	d0bf      	beq.n	800fa88 <floor+0x48>
 800fb08:	2c00      	cmp	r4, #0
 800fb0a:	da02      	bge.n	800fb12 <floor+0xd2>
 800fb0c:	2e14      	cmp	r6, #20
 800fb0e:	d103      	bne.n	800fb18 <floor+0xd8>
 800fb10:	3401      	adds	r4, #1
 800fb12:	ea25 0507 	bic.w	r5, r5, r7
 800fb16:	e7b7      	b.n	800fa88 <floor+0x48>
 800fb18:	2301      	movs	r3, #1
 800fb1a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fb1e:	fa03 f606 	lsl.w	r6, r3, r6
 800fb22:	4435      	add	r5, r6
 800fb24:	4545      	cmp	r5, r8
 800fb26:	bf38      	it	cc
 800fb28:	18e4      	addcc	r4, r4, r3
 800fb2a:	e7f2      	b.n	800fb12 <floor+0xd2>
 800fb2c:	2500      	movs	r5, #0
 800fb2e:	462c      	mov	r4, r5
 800fb30:	e7aa      	b.n	800fa88 <floor+0x48>
 800fb32:	bf00      	nop
 800fb34:	f3af 8000 	nop.w
 800fb38:	8800759c 	.word	0x8800759c
 800fb3c:	7e37e43c 	.word	0x7e37e43c
 800fb40:	bff00000 	.word	0xbff00000
 800fb44:	000fffff 	.word	0x000fffff

0800fb48 <matherr>:
 800fb48:	2000      	movs	r0, #0
 800fb4a:	4770      	bx	lr
 800fb4c:	0000      	movs	r0, r0
	...

0800fb50 <nan>:
 800fb50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fb58 <nan+0x8>
 800fb54:	4770      	bx	lr
 800fb56:	bf00      	nop
 800fb58:	00000000 	.word	0x00000000
 800fb5c:	7ff80000 	.word	0x7ff80000

0800fb60 <rint>:
 800fb60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb62:	ec51 0b10 	vmov	r0, r1, d0
 800fb66:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fb6a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800fb6e:	2e13      	cmp	r6, #19
 800fb70:	460b      	mov	r3, r1
 800fb72:	ee10 4a10 	vmov	r4, s0
 800fb76:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800fb7a:	dc56      	bgt.n	800fc2a <rint+0xca>
 800fb7c:	2e00      	cmp	r6, #0
 800fb7e:	da2b      	bge.n	800fbd8 <rint+0x78>
 800fb80:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800fb84:	4302      	orrs	r2, r0
 800fb86:	d023      	beq.n	800fbd0 <rint+0x70>
 800fb88:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800fb8c:	4302      	orrs	r2, r0
 800fb8e:	4254      	negs	r4, r2
 800fb90:	4314      	orrs	r4, r2
 800fb92:	0c4b      	lsrs	r3, r1, #17
 800fb94:	0b24      	lsrs	r4, r4, #12
 800fb96:	045b      	lsls	r3, r3, #17
 800fb98:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800fb9c:	ea44 0103 	orr.w	r1, r4, r3
 800fba0:	460b      	mov	r3, r1
 800fba2:	492f      	ldr	r1, [pc, #188]	; (800fc60 <rint+0x100>)
 800fba4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800fba8:	e9d1 6700 	ldrd	r6, r7, [r1]
 800fbac:	4602      	mov	r2, r0
 800fbae:	4639      	mov	r1, r7
 800fbb0:	4630      	mov	r0, r6
 800fbb2:	f7f0 fb6b 	bl	800028c <__adddf3>
 800fbb6:	e9cd 0100 	strd	r0, r1, [sp]
 800fbba:	463b      	mov	r3, r7
 800fbbc:	4632      	mov	r2, r6
 800fbbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbc2:	f7f0 fb61 	bl	8000288 <__aeabi_dsub>
 800fbc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fbca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800fbce:	4639      	mov	r1, r7
 800fbd0:	ec41 0b10 	vmov	d0, r0, r1
 800fbd4:	b003      	add	sp, #12
 800fbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbd8:	4a22      	ldr	r2, [pc, #136]	; (800fc64 <rint+0x104>)
 800fbda:	4132      	asrs	r2, r6
 800fbdc:	ea01 0702 	and.w	r7, r1, r2
 800fbe0:	4307      	orrs	r7, r0
 800fbe2:	d0f5      	beq.n	800fbd0 <rint+0x70>
 800fbe4:	0852      	lsrs	r2, r2, #1
 800fbe6:	4011      	ands	r1, r2
 800fbe8:	430c      	orrs	r4, r1
 800fbea:	d00b      	beq.n	800fc04 <rint+0xa4>
 800fbec:	ea23 0202 	bic.w	r2, r3, r2
 800fbf0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fbf4:	2e13      	cmp	r6, #19
 800fbf6:	fa43 f306 	asr.w	r3, r3, r6
 800fbfa:	bf0c      	ite	eq
 800fbfc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800fc00:	2400      	movne	r4, #0
 800fc02:	4313      	orrs	r3, r2
 800fc04:	4916      	ldr	r1, [pc, #88]	; (800fc60 <rint+0x100>)
 800fc06:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800fc0a:	4622      	mov	r2, r4
 800fc0c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fc10:	4620      	mov	r0, r4
 800fc12:	4629      	mov	r1, r5
 800fc14:	f7f0 fb3a 	bl	800028c <__adddf3>
 800fc18:	e9cd 0100 	strd	r0, r1, [sp]
 800fc1c:	4622      	mov	r2, r4
 800fc1e:	462b      	mov	r3, r5
 800fc20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc24:	f7f0 fb30 	bl	8000288 <__aeabi_dsub>
 800fc28:	e7d2      	b.n	800fbd0 <rint+0x70>
 800fc2a:	2e33      	cmp	r6, #51	; 0x33
 800fc2c:	dd07      	ble.n	800fc3e <rint+0xde>
 800fc2e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fc32:	d1cd      	bne.n	800fbd0 <rint+0x70>
 800fc34:	ee10 2a10 	vmov	r2, s0
 800fc38:	f7f0 fb28 	bl	800028c <__adddf3>
 800fc3c:	e7c8      	b.n	800fbd0 <rint+0x70>
 800fc3e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800fc42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc46:	40f2      	lsrs	r2, r6
 800fc48:	4210      	tst	r0, r2
 800fc4a:	d0c1      	beq.n	800fbd0 <rint+0x70>
 800fc4c:	0852      	lsrs	r2, r2, #1
 800fc4e:	4210      	tst	r0, r2
 800fc50:	bf1f      	itttt	ne
 800fc52:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800fc56:	ea20 0202 	bicne.w	r2, r0, r2
 800fc5a:	4134      	asrne	r4, r6
 800fc5c:	4314      	orrne	r4, r2
 800fc5e:	e7d1      	b.n	800fc04 <rint+0xa4>
 800fc60:	080102c0 	.word	0x080102c0
 800fc64:	000fffff 	.word	0x000fffff

0800fc68 <scalbn>:
 800fc68:	b570      	push	{r4, r5, r6, lr}
 800fc6a:	ec55 4b10 	vmov	r4, r5, d0
 800fc6e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fc72:	4606      	mov	r6, r0
 800fc74:	462b      	mov	r3, r5
 800fc76:	b9aa      	cbnz	r2, 800fca4 <scalbn+0x3c>
 800fc78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fc7c:	4323      	orrs	r3, r4
 800fc7e:	d03b      	beq.n	800fcf8 <scalbn+0x90>
 800fc80:	4b31      	ldr	r3, [pc, #196]	; (800fd48 <scalbn+0xe0>)
 800fc82:	4629      	mov	r1, r5
 800fc84:	2200      	movs	r2, #0
 800fc86:	ee10 0a10 	vmov	r0, s0
 800fc8a:	f7f0 fcb5 	bl	80005f8 <__aeabi_dmul>
 800fc8e:	4b2f      	ldr	r3, [pc, #188]	; (800fd4c <scalbn+0xe4>)
 800fc90:	429e      	cmp	r6, r3
 800fc92:	4604      	mov	r4, r0
 800fc94:	460d      	mov	r5, r1
 800fc96:	da12      	bge.n	800fcbe <scalbn+0x56>
 800fc98:	a327      	add	r3, pc, #156	; (adr r3, 800fd38 <scalbn+0xd0>)
 800fc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9e:	f7f0 fcab 	bl	80005f8 <__aeabi_dmul>
 800fca2:	e009      	b.n	800fcb8 <scalbn+0x50>
 800fca4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fca8:	428a      	cmp	r2, r1
 800fcaa:	d10c      	bne.n	800fcc6 <scalbn+0x5e>
 800fcac:	ee10 2a10 	vmov	r2, s0
 800fcb0:	4620      	mov	r0, r4
 800fcb2:	4629      	mov	r1, r5
 800fcb4:	f7f0 faea 	bl	800028c <__adddf3>
 800fcb8:	4604      	mov	r4, r0
 800fcba:	460d      	mov	r5, r1
 800fcbc:	e01c      	b.n	800fcf8 <scalbn+0x90>
 800fcbe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fcc2:	460b      	mov	r3, r1
 800fcc4:	3a36      	subs	r2, #54	; 0x36
 800fcc6:	4432      	add	r2, r6
 800fcc8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fccc:	428a      	cmp	r2, r1
 800fcce:	dd0b      	ble.n	800fce8 <scalbn+0x80>
 800fcd0:	ec45 4b11 	vmov	d1, r4, r5
 800fcd4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800fd40 <scalbn+0xd8>
 800fcd8:	f000 f83c 	bl	800fd54 <copysign>
 800fcdc:	a318      	add	r3, pc, #96	; (adr r3, 800fd40 <scalbn+0xd8>)
 800fcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce2:	ec51 0b10 	vmov	r0, r1, d0
 800fce6:	e7da      	b.n	800fc9e <scalbn+0x36>
 800fce8:	2a00      	cmp	r2, #0
 800fcea:	dd08      	ble.n	800fcfe <scalbn+0x96>
 800fcec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fcf0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fcf4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fcf8:	ec45 4b10 	vmov	d0, r4, r5
 800fcfc:	bd70      	pop	{r4, r5, r6, pc}
 800fcfe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fd02:	da0d      	bge.n	800fd20 <scalbn+0xb8>
 800fd04:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fd08:	429e      	cmp	r6, r3
 800fd0a:	ec45 4b11 	vmov	d1, r4, r5
 800fd0e:	dce1      	bgt.n	800fcd4 <scalbn+0x6c>
 800fd10:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800fd38 <scalbn+0xd0>
 800fd14:	f000 f81e 	bl	800fd54 <copysign>
 800fd18:	a307      	add	r3, pc, #28	; (adr r3, 800fd38 <scalbn+0xd0>)
 800fd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1e:	e7e0      	b.n	800fce2 <scalbn+0x7a>
 800fd20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fd24:	3236      	adds	r2, #54	; 0x36
 800fd26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fd2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fd2e:	4620      	mov	r0, r4
 800fd30:	4629      	mov	r1, r5
 800fd32:	2200      	movs	r2, #0
 800fd34:	4b06      	ldr	r3, [pc, #24]	; (800fd50 <scalbn+0xe8>)
 800fd36:	e7b2      	b.n	800fc9e <scalbn+0x36>
 800fd38:	c2f8f359 	.word	0xc2f8f359
 800fd3c:	01a56e1f 	.word	0x01a56e1f
 800fd40:	8800759c 	.word	0x8800759c
 800fd44:	7e37e43c 	.word	0x7e37e43c
 800fd48:	43500000 	.word	0x43500000
 800fd4c:	ffff3cb0 	.word	0xffff3cb0
 800fd50:	3c900000 	.word	0x3c900000

0800fd54 <copysign>:
 800fd54:	ec51 0b10 	vmov	r0, r1, d0
 800fd58:	ee11 0a90 	vmov	r0, s3
 800fd5c:	ee10 2a10 	vmov	r2, s0
 800fd60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fd64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800fd68:	ea41 0300 	orr.w	r3, r1, r0
 800fd6c:	ec43 2b10 	vmov	d0, r2, r3
 800fd70:	4770      	bx	lr
	...

0800fd74 <_init>:
 800fd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd76:	bf00      	nop
 800fd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd7a:	bc08      	pop	{r3}
 800fd7c:	469e      	mov	lr, r3
 800fd7e:	4770      	bx	lr

0800fd80 <_fini>:
 800fd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd82:	bf00      	nop
 800fd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd86:	bc08      	pop	{r3}
 800fd88:	469e      	mov	lr, r3
 800fd8a:	4770      	bx	lr
