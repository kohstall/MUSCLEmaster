
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e88c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800ea20  0800ea20  0001ea20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef18  0800ef18  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef18  0800ef18  0001ef18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef20  0800ef20  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef20  0800ef20  0001ef20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef24  0800ef24  0001ef24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800ef28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000247c  200000ac  0800efd4  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002528  0800efd4  00022528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a647  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eba  00000000  00000000  0003a723  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018a0  00000000  00000000  0003d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001770  00000000  00000000  0003ee80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022ccd  00000000  00000000  000405f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012683  00000000  00000000  000632bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3e5d  00000000  00000000  00075940  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014979d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073cc  00000000  00000000  00149818  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ea04 	.word	0x0800ea04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	0800ea04 	.word	0x0800ea04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <HAL_Init+0x40>)
 8000f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_Init+0x40>)
 8000f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_Init+0x40>)
 8000f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f001 fddf 	bl	8002b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f808 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f00b f89a 	bl	800c0b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023c00 	.word	0x40023c00

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x54>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x58>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 fdf7 	bl	8002b9e <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc8:	f001 fdbf 	bl	8002b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_InitTick+0x5c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000040 	.word	0x20000040
 8000fe4:	20000004 	.word	0x20000004
 8000fe8:	20000000 	.word	0x20000000

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000004 	.word	0x20000004
 8001010:	20000178 	.word	0x20000178

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000178 	.word	0x20000178

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_Delay+0x40>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000004 	.word	0x20000004

08001070 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e033      	b.n	80010ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f00b f838 	bl	800c104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d118      	bne.n	80010e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010b6:	f023 0302 	bic.w	r3, r3, #2
 80010ba:	f043 0202 	orr.w	r2, r3, #2
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fb94 	bl	80017f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f023 0303 	bic.w	r3, r3, #3
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
 80010de:	e001      	b.n	80010e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b02      	cmp	r3, #2
 8001112:	bf0c      	ite	eq
 8001114:	2301      	moveq	r3, #1
 8001116:	2300      	movne	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0320 	and.w	r3, r3, #32
 8001126:	2b20      	cmp	r3, #32
 8001128:	bf0c      	ite	eq
 800112a:	2301      	moveq	r3, #1
 800112c:	2300      	movne	r3, #0
 800112e:	b2db      	uxtb	r3, r3
 8001130:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d049      	beq.n	80011cc <HAL_ADC_IRQHandler+0xd6>
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d046      	beq.n	80011cc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	2b00      	cmp	r3, #0
 8001148:	d105      	bne.n	8001156 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d12b      	bne.n	80011bc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001168:	2b00      	cmp	r3, #0
 800116a:	d127      	bne.n	80011bc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001184:	2b00      	cmp	r3, #0
 8001186:	d119      	bne.n	80011bc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0220 	bic.w	r2, r2, #32
 8001196:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d105      	bne.n	80011bc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f043 0201 	orr.w	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 f9cd 	bl	800155c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f06f 0212 	mvn.w	r2, #18
 80011ca:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf0c      	ite	eq
 80011da:	2301      	moveq	r3, #1
 80011dc:	2300      	movne	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ec:	2b80      	cmp	r3, #128	; 0x80
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d057      	beq.n	80012ae <HAL_ADC_IRQHandler+0x1b8>
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d054      	beq.n	80012ae <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f003 0310 	and.w	r3, r3, #16
 800120c:	2b00      	cmp	r3, #0
 800120e:	d105      	bne.n	800121c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d139      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001230:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001234:	2b00      	cmp	r3, #0
 8001236:	d006      	beq.n	8001246 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001242:	2b00      	cmp	r3, #0
 8001244:	d12b      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001250:	2b00      	cmp	r3, #0
 8001252:	d124      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800125e:	2b00      	cmp	r3, #0
 8001260:	d11d      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001266:	2b00      	cmp	r3, #0
 8001268:	d119      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001278:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128e:	2b00      	cmp	r3, #0
 8001290:	d105      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f043 0201 	orr.w	r2, r3, #1
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 fd1a 	bl	8001cd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f06f 020c 	mvn.w	r2, #12
 80012ac:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ce:	2b40      	cmp	r3, #64	; 0x40
 80012d0:	bf0c      	ite	eq
 80012d2:	2301      	moveq	r3, #1
 80012d4:	2300      	movne	r3, #0
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d017      	beq.n	8001310 <HAL_ADC_IRQHandler+0x21a>
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d014      	beq.n	8001310 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d10d      	bne.n	8001310 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f93f 	bl	8001584 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0201 	mvn.w	r2, #1
 800130e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	2b20      	cmp	r3, #32
 800131c:	bf0c      	ite	eq
 800131e:	2301      	moveq	r3, #1
 8001320:	2300      	movne	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d015      	beq.n	8001370 <HAL_ADC_IRQHandler+0x27a>
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d012      	beq.n	8001370 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f043 0202 	orr.w	r2, r3, #2
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f06f 0220 	mvn.w	r2, #32
 800135e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f919 	bl	8001598 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f06f 0220 	mvn.w	r2, #32
 800136e:	601a      	str	r2, [r3, #0]
  }
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800138e:	2b01      	cmp	r3, #1
 8001390:	d101      	bne.n	8001396 <HAL_ADC_Start_DMA+0x1e>
 8001392:	2302      	movs	r3, #2
 8001394:	e0cc      	b.n	8001530 <HAL_ADC_Start_DMA+0x1b8>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d018      	beq.n	80013de <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0201 	orr.w	r2, r2, #1
 80013ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013bc:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <HAL_ADC_Start_DMA+0x1c0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a5e      	ldr	r2, [pc, #376]	; (800153c <HAL_ADC_Start_DMA+0x1c4>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0c9a      	lsrs	r2, r3, #18
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80013d0:	e002      	b.n	80013d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f9      	bne.n	80013d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	f040 80a0 	bne.w	800152e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013f6:	f023 0301 	bic.w	r3, r3, #1
 80013fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140c:	2b00      	cmp	r3, #0
 800140e:	d007      	beq.n	8001420 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001418:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800142c:	d106      	bne.n	800143c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f023 0206 	bic.w	r2, r3, #6
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	645a      	str	r2, [r3, #68]	; 0x44
 800143a:	e002      	b.n	8001442 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_ADC_Start_DMA+0x1c8>)
 800144c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001452:	4a3c      	ldr	r2, [pc, #240]	; (8001544 <HAL_ADC_Start_DMA+0x1cc>)
 8001454:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145a:	4a3b      	ldr	r2, [pc, #236]	; (8001548 <HAL_ADC_Start_DMA+0x1d0>)
 800145c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	4a3a      	ldr	r2, [pc, #232]	; (800154c <HAL_ADC_Start_DMA+0x1d4>)
 8001464:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800146e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800147e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800148e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	334c      	adds	r3, #76	; 0x4c
 800149a:	4619      	mov	r1, r3
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f001 fc38 	bl	8002d14 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d12a      	bne.n	8001506 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a26      	ldr	r2, [pc, #152]	; (8001550 <HAL_ADC_Start_DMA+0x1d8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d015      	beq.n	80014e6 <HAL_ADC_Start_DMA+0x16e>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a25      	ldr	r2, [pc, #148]	; (8001554 <HAL_ADC_Start_DMA+0x1dc>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d105      	bne.n	80014d0 <HAL_ADC_Start_DMA+0x158>
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_ADC_Start_DMA+0x1c8>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00a      	beq.n	80014e6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a20      	ldr	r2, [pc, #128]	; (8001558 <HAL_ADC_Start_DMA+0x1e0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d129      	bne.n	800152e <HAL_ADC_Start_DMA+0x1b6>
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_ADC_Start_DMA+0x1c8>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	d823      	bhi.n	800152e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d11c      	bne.n	800152e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	e013      	b.n	800152e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a11      	ldr	r2, [pc, #68]	; (8001550 <HAL_ADC_Start_DMA+0x1d8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d10e      	bne.n	800152e <HAL_ADC_Start_DMA+0x1b6>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d107      	bne.n	800152e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800152c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000040 	.word	0x20000040
 800153c:	431bde83 	.word	0x431bde83
 8001540:	40012300 	.word	0x40012300
 8001544:	080019e9 	.word	0x080019e9
 8001548:	08001aa3 	.word	0x08001aa3
 800154c:	08001abf 	.word	0x08001abf
 8001550:	40012000 	.word	0x40012000
 8001554:	40012100 	.word	0x40012100
 8001558:	40012200 	.word	0x40012200

0800155c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1c>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e105      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x228>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b09      	cmp	r3, #9
 80015d6:	d925      	bls.n	8001624 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68d9      	ldr	r1, [r3, #12]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	3b1e      	subs	r3, #30
 80015ee:	2207      	movs	r2, #7
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43da      	mvns	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	400a      	ands	r2, r1
 80015fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68d9      	ldr	r1, [r3, #12]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	4603      	mov	r3, r0
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4403      	add	r3, r0
 8001616:	3b1e      	subs	r3, #30
 8001618:	409a      	lsls	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	e022      	b.n	800166a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6919      	ldr	r1, [r3, #16]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	2207      	movs	r2, #7
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	400a      	ands	r2, r1
 8001646:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6919      	ldr	r1, [r3, #16]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	4618      	mov	r0, r3
 800165a:	4603      	mov	r3, r0
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4403      	add	r3, r0
 8001660:	409a      	lsls	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b06      	cmp	r3, #6
 8001670:	d824      	bhi.n	80016bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	3b05      	subs	r3, #5
 8001684:	221f      	movs	r2, #31
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	400a      	ands	r2, r1
 8001692:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3b05      	subs	r3, #5
 80016ae:	fa00 f203 	lsl.w	r2, r0, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
 80016ba:	e04c      	b.n	8001756 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	d824      	bhi.n	800170e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	3b23      	subs	r3, #35	; 0x23
 80016d6:	221f      	movs	r2, #31
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43da      	mvns	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	400a      	ands	r2, r1
 80016e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	3b23      	subs	r3, #35	; 0x23
 8001700:	fa00 f203 	lsl.w	r2, r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	631a      	str	r2, [r3, #48]	; 0x30
 800170c:	e023      	b.n	8001756 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3b41      	subs	r3, #65	; 0x41
 8001720:	221f      	movs	r2, #31
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	400a      	ands	r2, r1
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b41      	subs	r3, #65	; 0x41
 800174a:	fa00 f203 	lsl.w	r2, r0, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_ADC_ConfigChannel+0x234>)
 8001758:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <HAL_ADC_ConfigChannel+0x238>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d109      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1cc>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b12      	cmp	r3, #18
 800176a:	d105      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_ADC_ConfigChannel+0x238>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d123      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x21e>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b10      	cmp	r3, #16
 8001788:	d003      	beq.n	8001792 <HAL_ADC_ConfigChannel+0x1e6>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b11      	cmp	r3, #17
 8001790:	d11b      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d111      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_ADC_ConfigChannel+0x23c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a10      	ldr	r2, [pc, #64]	; (80017ec <HAL_ADC_ConfigChannel+0x240>)
 80017ac:	fba2 2303 	umull	r2, r3, r2, r3
 80017b0:	0c9a      	lsrs	r2, r3, #18
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017bc:	e002      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f9      	bne.n	80017be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40012300 	.word	0x40012300
 80017e4:	40012000 	.word	0x40012000
 80017e8:	20000040 	.word	0x20000040
 80017ec:	431bde83 	.word	0x431bde83

080017f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f8:	4b79      	ldr	r3, [pc, #484]	; (80019e0 <ADC_Init+0x1f0>)
 80017fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	431a      	orrs	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	021a      	lsls	r2, r3, #8
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001848:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800186a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6899      	ldr	r1, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	4a58      	ldr	r2, [pc, #352]	; (80019e4 <ADC_Init+0x1f4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d022      	beq.n	80018ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001896:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6899      	ldr	r1, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6899      	ldr	r1, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	e00f      	b.n	80018ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0202 	bic.w	r2, r2, #2
 80018fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6899      	ldr	r1, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7e1b      	ldrb	r3, [r3, #24]
 8001908:	005a      	lsls	r2, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d01b      	beq.n	8001954 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800192a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800193a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6859      	ldr	r1, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	3b01      	subs	r3, #1
 8001948:	035a      	lsls	r2, r3, #13
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	e007      	b.n	8001964 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001962:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	3b01      	subs	r3, #1
 8001980:	051a      	lsls	r2, r3, #20
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6899      	ldr	r1, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019a6:	025a      	lsls	r2, r3, #9
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6899      	ldr	r1, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	029a      	lsls	r2, r3, #10
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	609a      	str	r2, [r3, #8]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40012300 	.word	0x40012300
 80019e4:	0f000001 	.word	0x0f000001

080019e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d13c      	bne.n	8001a7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d12b      	bne.n	8001a74 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d127      	bne.n	8001a74 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d006      	beq.n	8001a40 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d119      	bne.n	8001a74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0220 	bic.w	r2, r2, #32
 8001a4e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f043 0201 	orr.w	r2, r3, #1
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fd71 	bl	800155c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a7a:	e00e      	b.n	8001a9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff fd85 	bl	8001598 <HAL_ADC_ErrorCallback>
}
 8001a8e:	e004      	b.n	8001a9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7ff fd5d 	bl	8001570 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2240      	movs	r2, #64	; 0x40
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f043 0204 	orr.w	r2, r3, #4
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f7ff fd5a 	bl	8001598 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_ADCEx_InjectedStart+0x22>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e09d      	b.n	8001c4a <HAL_ADCEx_InjectedStart+0x15e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d018      	beq.n	8001b56 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b34:	4b48      	ldr	r3, [pc, #288]	; (8001c58 <HAL_ADCEx_InjectedStart+0x16c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a48      	ldr	r2, [pc, #288]	; (8001c5c <HAL_ADCEx_InjectedStart+0x170>)
 8001b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3e:	0c9a      	lsrs	r2, r3, #18
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b48:	e002      	b.n	8001b50 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f9      	bne.n	8001b4a <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d171      	bne.n	8001c48 <HAL_ADCEx_InjectedStart+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f06f 0204 	mvn.w	r2, #4
 8001b9a:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b9c:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_ADCEx_InjectedStart+0x174>)
 8001b9e:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d124      	bne.n	8001bf6 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bf0c      	ite	eq
 8001bba:	2301      	moveq	r3, #1
 8001bbc:	2300      	movne	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf0c      	ite	eq
 8001bd0:	2301      	moveq	r3, #1
 8001bd2:	2300      	movne	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d034      	beq.n	8001c48 <HAL_ADCEx_InjectedStart+0x15c>
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d031      	beq.n	8001c48 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	e028      	b.n	8001c48 <HAL_ADCEx_InjectedStart+0x15c>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf0c      	ite	eq
 8001c04:	2301      	moveq	r3, #1
 8001c06:	2300      	movne	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bf0c      	ite	eq
 8001c1a:	2301      	moveq	r3, #1
 8001c1c:	2300      	movne	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a0f      	ldr	r2, [pc, #60]	; (8001c64 <HAL_ADCEx_InjectedStart+0x178>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d10d      	bne.n	8001c48 <HAL_ADCEx_InjectedStart+0x15c>
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00a      	beq.n	8001c48 <HAL_ADCEx_InjectedStart+0x15c>
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c46:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	371c      	adds	r7, #28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000040 	.word	0x20000040
 8001c5c:	431bde83 	.word	0x431bde83
 8001c60:	40012300 	.word	0x40012300
 8001c64:	40012000 	.word	0x40012000

08001c68 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f06f 0204 	mvn.w	r2, #4
 8001c7e:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d81f      	bhi.n	8001cc8 <HAL_ADCEx_InjectedGetValue+0x60>
 8001c88:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <HAL_ADCEx_InjectedGetValue+0x28>)
 8001c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8e:	bf00      	nop
 8001c90:	08001cbf 	.word	0x08001cbf
 8001c94:	08001cb5 	.word	0x08001cb5
 8001c98:	08001cab 	.word	0x08001cab
 8001c9c:	08001ca1 	.word	0x08001ca1
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca6:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001ca8:	e00f      	b.n	8001cca <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001cb2:	e00a      	b.n	8001cca <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001cbc:	e005      	b.n	8001cca <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc4:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001cc6:	e000      	b.n	8001cca <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8001cc8:	bf00      	nop
  }
  return tmp;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e17a      	b.n	8001ffa <HAL_ADCEx_InjectedConfigChannel+0x30e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b09      	cmp	r3, #9
 8001d12:	d925      	bls.n	8001d60 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68d9      	ldr	r1, [r3, #12]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	4613      	mov	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	3b1e      	subs	r3, #30
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43da      	mvns	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	400a      	ands	r2, r1
 8001d38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68d9      	ldr	r1, [r3, #12]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4403      	add	r3, r0
 8001d52:	3b1e      	subs	r3, #30
 8001d54:	409a      	lsls	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	e022      	b.n	8001da6 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6919      	ldr	r1, [r3, #16]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	2207      	movs	r2, #7
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	400a      	ands	r2, r1
 8001d82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6919      	ldr	r1, [r3, #16]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4618      	mov	r0, r3
 8001d96:	4603      	mov	r3, r0
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4403      	add	r3, r0
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	051a      	lsls	r2, r3, #20
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	3303      	adds	r3, #3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	221f      	movs	r2, #31
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43da      	mvns	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	400a      	ands	r2, r1
 8001dfc:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	3303      	adds	r3, #3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a73      	ldr	r2, [pc, #460]	; (8002008 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d022      	beq.n	8001e84 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001e4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6899      	ldr	r1, [r3, #8]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	699a      	ldr	r2, [r3, #24]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6899      	ldr	r1, [r3, #8]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	69da      	ldr	r2, [r3, #28]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	e00f      	b.n	8001ea4 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001e92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001ea2:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	7d5b      	ldrb	r3, [r3, #21]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	e007      	b.n	8001ece <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ecc:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	7d1b      	ldrb	r3, [r3, #20]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d008      	beq.n	8001ee8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	e007      	b.n	8001ef8 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ef6:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d017      	beq.n	8001f30 <HAL_ADCEx_InjectedConfigChannel+0x244>
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d029      	beq.n	8001f58 <HAL_ADCEx_InjectedConfigChannel+0x26c>
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d13b      	bne.n	8001f80 <HAL_ADCEx_InjectedConfigChannel+0x294>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f16:	f023 030f 	bic.w	r3, r3, #15
 8001f1a:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6959      	ldr	r1, [r3, #20]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	615a      	str	r2, [r3, #20]
      break;
 8001f2e:	e03b      	b.n	8001fa8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f3e:	f023 030f 	bic.w	r3, r3, #15
 8001f42:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6999      	ldr	r1, [r3, #24]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	619a      	str	r2, [r3, #24]
      break;
 8001f56:	e027      	b.n	8001fa8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f66:	f023 030f 	bic.w	r3, r3, #15
 8001f6a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	69d9      	ldr	r1, [r3, #28]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	61da      	str	r2, [r3, #28]
      break;
 8001f7e:	e013      	b.n	8001fa8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f8e:	f023 030f 	bic.w	r3, r3, #15
 8001f92:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6a19      	ldr	r1, [r3, #32]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	621a      	str	r2, [r3, #32]
      break;
 8001fa6:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa8:	4b18      	ldr	r3, [pc, #96]	; (800200c <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8001faa:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a17      	ldr	r2, [pc, #92]	; (8002010 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d109      	bne.n	8001fca <HAL_ADCEx_InjectedConfigChannel+0x2de>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b12      	cmp	r3, #18
 8001fbc:	d105      	bne.n	8001fca <HAL_ADCEx_InjectedConfigChannel+0x2de>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a10      	ldr	r2, [pc, #64]	; (8002010 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d10d      	bne.n	8001ff0 <HAL_ADCEx_InjectedConfigChannel+0x304>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d003      	beq.n	8001fe4 <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b11      	cmp	r3, #17
 8001fe2:	d105      	bne.n	8001ff0 <HAL_ADCEx_InjectedConfigChannel+0x304>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	000f0001 	.word	0x000f0001
 800200c:	40012300 	.word	0x40012300
 8002010:	40012000 	.word	0x40012000

08002014 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8002028:	2302      	movs	r3, #2
 800202a:	e031      	b.n	8002090 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002034:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8002036:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 021f 	bic.w	r2, r3, #31
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	431a      	orrs	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	431a      	orrs	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	431a      	orrs	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40012300 	.word	0x40012300

080020a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0ed      	b.n	800228e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f00a fa0c 	bl	800c4dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0202 	bic.w	r2, r2, #2
 80020d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d4:	f7fe ff9e 	bl	8001014 <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020da:	e012      	b.n	8002102 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020dc:	f7fe ff9a 	bl	8001014 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b0a      	cmp	r3, #10
 80020e8:	d90b      	bls.n	8002102 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2205      	movs	r2, #5
 80020fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0c5      	b.n	800228e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1e5      	bne.n	80020dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002120:	f7fe ff78 	bl	8001014 <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002126:	e012      	b.n	800214e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002128:	f7fe ff74 	bl	8001014 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b0a      	cmp	r3, #10
 8002134:	d90b      	bls.n	800214e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2205      	movs	r2, #5
 8002146:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e09f      	b.n	800228e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0e5      	beq.n	8002128 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7e1b      	ldrb	r3, [r3, #24]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d108      	bne.n	8002176 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	e007      	b.n	8002186 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7e5b      	ldrb	r3, [r3, #25]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d108      	bne.n	80021a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e007      	b.n	80021b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7e9b      	ldrb	r3, [r3, #26]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d108      	bne.n	80021ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0220 	orr.w	r2, r2, #32
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e007      	b.n	80021da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0220 	bic.w	r2, r2, #32
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7edb      	ldrb	r3, [r3, #27]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d108      	bne.n	80021f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0210 	bic.w	r2, r2, #16
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e007      	b.n	8002204 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0210 	orr.w	r2, r2, #16
 8002202:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7f1b      	ldrb	r3, [r3, #28]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d108      	bne.n	800221e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0208 	orr.w	r2, r2, #8
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e007      	b.n	800222e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0208 	bic.w	r2, r2, #8
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7f5b      	ldrb	r3, [r3, #29]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d108      	bne.n	8002248 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0204 	orr.w	r2, r2, #4
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e007      	b.n	8002258 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0204 	bic.w	r2, r2, #4
 8002256:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	ea42 0103 	orr.w	r1, r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	1e5a      	subs	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d003      	beq.n	80022be <HAL_CAN_ConfigFilter+0x26>
 80022b6:	7cfb      	ldrb	r3, [r7, #19]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	f040 80be 	bne.w	800243a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80022be:	4b65      	ldr	r3, [pc, #404]	; (8002454 <HAL_CAN_ConfigFilter+0x1bc>)
 80022c0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	431a      	orrs	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2201      	movs	r2, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	43db      	mvns	r3, r3
 8002310:	401a      	ands	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d123      	bne.n	8002368 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	43db      	mvns	r3, r3
 800232a:	401a      	ands	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002342:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3248      	adds	r2, #72	; 0x48
 8002348:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800235c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800235e:	6979      	ldr	r1, [r7, #20]
 8002360:	3348      	adds	r3, #72	; 0x48
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d122      	bne.n	80023b6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	431a      	orrs	r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002390:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	3248      	adds	r2, #72	; 0x48
 8002396:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023ac:	6979      	ldr	r1, [r7, #20]
 80023ae:	3348      	adds	r3, #72	; 0x48
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	401a      	ands	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80023d0:	e007      	b.n	80023e2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	431a      	orrs	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	401a      	ands	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80023fc:	e007      	b.n	800240e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	431a      	orrs	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d107      	bne.n	8002426 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	431a      	orrs	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800242c:	f023 0201 	bic.w	r2, r3, #1
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e006      	b.n	8002448 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40006400 	.word	0x40006400

08002458 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b01      	cmp	r3, #1
 800246a:	d12e      	bne.n	80024ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002484:	f7fe fdc6 	bl	8001014 <HAL_GetTick>
 8002488:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800248a:	e012      	b.n	80024b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800248c:	f7fe fdc2 	bl	8001014 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b0a      	cmp	r3, #10
 8002498:	d90b      	bls.n	80024b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2205      	movs	r2, #5
 80024aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e012      	b.n	80024d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1e5      	bne.n	800248c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e006      	b.n	80024d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
  }
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d002      	beq.n	80024fe <HAL_CAN_ActivateNotification+0x1e>
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d109      	bne.n	8002512 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6959      	ldr	r1, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e006      	b.n	8002520 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
  }
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002534:	2300      	movs	r3, #0
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d07c      	beq.n	800266c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d023      	beq.n	80025c4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2201      	movs	r2, #1
 8002582:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f97d 	bl	800288e <HAL_CAN_TxMailbox0CompleteCallback>
 8002594:	e016      	b.n	80025c4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
 80025a8:	e00c      	b.n	80025c4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d004      	beq.n	80025be <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	e002      	b.n	80025c4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f983 	bl	80028ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d024      	beq.n	8002618 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f95d 	bl	80028a2 <HAL_CAN_TxMailbox1CompleteCallback>
 80025e8:	e016      	b.n	8002618 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
 80025fc:	e00c      	b.n	8002618 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
 8002610:	e002      	b.n	8002618 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f963 	bl	80028de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d024      	beq.n	800266c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800262a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f93d 	bl	80028b6 <HAL_CAN_TxMailbox2CompleteCallback>
 800263c:	e016      	b.n	800266c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
 8002650:	e00c      	b.n	800266c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d004      	beq.n	8002666 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
 8002664:	e002      	b.n	800266c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f943 	bl	80028f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00c      	beq.n	8002690 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002686:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2210      	movs	r2, #16
 800268e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d006      	beq.n	80026b2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2208      	movs	r2, #8
 80026aa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f934 	bl	800291a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d009      	beq.n	80026d0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f91b 	bl	8002906 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00c      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2210      	movs	r2, #16
 80026f2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	f003 0320 	and.w	r3, r3, #32
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d006      	beq.n	8002716 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2208      	movs	r2, #8
 800270e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f916 	bl	8002942 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b00      	cmp	r3, #0
 800271e:	d009      	beq.n	8002734 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8fd 	bl	800292e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b00      	cmp	r3, #0
 8002746:	d006      	beq.n	8002756 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2210      	movs	r2, #16
 800274e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f900 	bl	8002956 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00b      	beq.n	8002778 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d006      	beq.n	8002778 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2208      	movs	r2, #8
 8002770:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f8f9 	bl	800296a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d075      	beq.n	800286e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d06c      	beq.n	8002866 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	f043 0302 	orr.w	r3, r3, #2
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d03d      	beq.n	8002866 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d038      	beq.n	8002866 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027fa:	2b30      	cmp	r3, #48	; 0x30
 80027fc:	d017      	beq.n	800282e <HAL_CAN_IRQHandler+0x302>
 80027fe:	2b30      	cmp	r3, #48	; 0x30
 8002800:	d804      	bhi.n	800280c <HAL_CAN_IRQHandler+0x2e0>
 8002802:	2b10      	cmp	r3, #16
 8002804:	d009      	beq.n	800281a <HAL_CAN_IRQHandler+0x2ee>
 8002806:	2b20      	cmp	r3, #32
 8002808:	d00c      	beq.n	8002824 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800280a:	e024      	b.n	8002856 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800280c:	2b50      	cmp	r3, #80	; 0x50
 800280e:	d018      	beq.n	8002842 <HAL_CAN_IRQHandler+0x316>
 8002810:	2b60      	cmp	r3, #96	; 0x60
 8002812:	d01b      	beq.n	800284c <HAL_CAN_IRQHandler+0x320>
 8002814:	2b40      	cmp	r3, #64	; 0x40
 8002816:	d00f      	beq.n	8002838 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002818:	e01d      	b.n	8002856 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	f043 0308 	orr.w	r3, r3, #8
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002822:	e018      	b.n	8002856 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	f043 0310 	orr.w	r3, r3, #16
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800282c:	e013      	b.n	8002856 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	f043 0320 	orr.w	r3, r3, #32
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002836:	e00e      	b.n	8002856 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002840:	e009      	b.n	8002856 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800284a:	e004      	b.n	8002856 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002854:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002864:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2204      	movs	r2, #4
 800286c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f87c 	bl	800297e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002886:	bf00      	nop
 8002888:	3728      	adds	r7, #40	; 0x28
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b0:	4013      	ands	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029c6:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	60d3      	str	r3, [r2, #12]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <__NVIC_GetPriorityGrouping+0x18>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	0a1b      	lsrs	r3, r3, #8
 80029e6:	f003 0307 	and.w	r3, r3, #7
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	db0b      	blt.n	8002a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	f003 021f 	and.w	r2, r3, #31
 8002a10:	4907      	ldr	r1, [pc, #28]	; (8002a30 <__NVIC_EnableIRQ+0x38>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	2001      	movs	r0, #1
 8002a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	e000e100 	.word	0xe000e100

08002a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	db0a      	blt.n	8002a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	490c      	ldr	r1, [pc, #48]	; (8002a80 <__NVIC_SetPriority+0x4c>)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	0112      	lsls	r2, r2, #4
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	440b      	add	r3, r1
 8002a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a5c:	e00a      	b.n	8002a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4908      	ldr	r1, [pc, #32]	; (8002a84 <__NVIC_SetPriority+0x50>)
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	3b04      	subs	r3, #4
 8002a6c:	0112      	lsls	r2, r2, #4
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	440b      	add	r3, r1
 8002a72:	761a      	strb	r2, [r3, #24]
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000e100 	.word	0xe000e100
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	; 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f1c3 0307 	rsb	r3, r3, #7
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	bf28      	it	cs
 8002aa6:	2304      	movcs	r3, #4
 8002aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2b06      	cmp	r3, #6
 8002ab0:	d902      	bls.n	8002ab8 <NVIC_EncodePriority+0x30>
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3b03      	subs	r3, #3
 8002ab6:	e000      	b.n	8002aba <NVIC_EncodePriority+0x32>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	401a      	ands	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	43d9      	mvns	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	4313      	orrs	r3, r2
         );
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3724      	adds	r7, #36	; 0x24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b00:	d301      	bcc.n	8002b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b02:	2301      	movs	r3, #1
 8002b04:	e00f      	b.n	8002b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <SysTick_Config+0x40>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b0e:	210f      	movs	r1, #15
 8002b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b14:	f7ff ff8e 	bl	8002a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <SysTick_Config+0x40>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b1e:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <SysTick_Config+0x40>)
 8002b20:	2207      	movs	r2, #7
 8002b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	e000e010 	.word	0xe000e010

08002b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff ff29 	bl	8002994 <__NVIC_SetPriorityGrouping>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b086      	sub	sp, #24
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	4603      	mov	r3, r0
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b5c:	f7ff ff3e 	bl	80029dc <__NVIC_GetPriorityGrouping>
 8002b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	6978      	ldr	r0, [r7, #20]
 8002b68:	f7ff ff8e 	bl	8002a88 <NVIC_EncodePriority>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff5d 	bl	8002a34 <__NVIC_SetPriority>
}
 8002b7a:	bf00      	nop
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4603      	mov	r3, r0
 8002b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff31 	bl	80029f8 <__NVIC_EnableIRQ>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff ffa2 	bl	8002af0 <SysTick_Config>
 8002bac:	4603      	mov	r3, r0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bc4:	f7fe fa26 	bl	8001014 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e099      	b.n	8002d08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bf4:	e00f      	b.n	8002c16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bf6:	f7fe fa0d 	bl	8001014 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d908      	bls.n	8002c16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2220      	movs	r2, #32
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e078      	b.n	8002d08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1e8      	bne.n	8002bf6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4b38      	ldr	r3, [pc, #224]	; (8002d10 <HAL_DMA_Init+0x158>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d107      	bne.n	8002c80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f023 0307 	bic.w	r3, r3, #7
 8002c96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d117      	bne.n	8002cda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00e      	beq.n	8002cda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fae5 	bl	800328c <DMA_CheckFifoParam>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2240      	movs	r2, #64	; 0x40
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e016      	b.n	8002d08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fa9c 	bl	8003220 <DMA_CalcBaseAndBitshift>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	223f      	movs	r2, #63	; 0x3f
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	f010803f 	.word	0xf010803f

08002d14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_DMA_Start_IT+0x26>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e040      	b.n	8002dbc <HAL_DMA_Start_IT+0xa8>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d12f      	bne.n	8002dae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2202      	movs	r2, #2
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fa2e 	bl	80031c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6c:	223f      	movs	r2, #63	; 0x3f
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0216 	orr.w	r2, r2, #22
 8002d82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0208 	orr.w	r2, r2, #8
 8002d9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	e005      	b.n	8002dba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
 8002db8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d004      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00c      	b.n	8002dfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2205      	movs	r2, #5
 8002de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e14:	4b92      	ldr	r3, [pc, #584]	; (8003060 <HAL_DMA_IRQHandler+0x258>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a92      	ldr	r2, [pc, #584]	; (8003064 <HAL_DMA_IRQHandler+0x25c>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	0a9b      	lsrs	r3, r3, #10
 8002e20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	2208      	movs	r2, #8
 8002e34:	409a      	lsls	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01a      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d013      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0204 	bic.w	r2, r2, #4
 8002e5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	2208      	movs	r2, #8
 8002e62:	409a      	lsls	r2, r3
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	2201      	movs	r2, #1
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d012      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e96:	2201      	movs	r2, #1
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea2:	f043 0202 	orr.w	r2, r3, #2
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eae:	2204      	movs	r2, #4
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d012      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00b      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ecc:	2204      	movs	r2, #4
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	f043 0204 	orr.w	r2, r3, #4
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d043      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d03c      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f02:	2210      	movs	r2, #16
 8002f04:	409a      	lsls	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d018      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d108      	bne.n	8002f38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d024      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	4798      	blx	r3
 8002f36:	e01f      	b.n	8002f78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01b      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4798      	blx	r3
 8002f48:	e016      	b.n	8002f78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d107      	bne.n	8002f68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0208 	bic.w	r2, r2, #8
 8002f66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 808e 	beq.w	80030a6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8086 	beq.w	80030a6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d136      	bne.n	8003020 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0216 	bic.w	r2, r2, #22
 8002fc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695a      	ldr	r2, [r3, #20]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d103      	bne.n	8002fe2 <HAL_DMA_IRQHandler+0x1da>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0208 	bic.w	r2, r2, #8
 8002ff0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff6:	223f      	movs	r2, #63	; 0x3f
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003012:	2b00      	cmp	r3, #0
 8003014:	d07d      	beq.n	8003112 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4798      	blx	r3
        }
        return;
 800301e:	e078      	b.n	8003112 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01c      	beq.n	8003068 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d108      	bne.n	800304e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	2b00      	cmp	r3, #0
 8003042:	d030      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
 800304c:	e02b      	b.n	80030a6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d027      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	4798      	blx	r3
 800305e:	e022      	b.n	80030a6 <HAL_DMA_IRQHandler+0x29e>
 8003060:	20000040 	.word	0x20000040
 8003064:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10f      	bne.n	8003096 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0210 	bic.w	r2, r2, #16
 8003084:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d032      	beq.n	8003114 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d022      	beq.n	8003100 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2205      	movs	r2, #5
 80030be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3301      	adds	r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d307      	bcc.n	80030ee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f2      	bne.n	80030d2 <HAL_DMA_IRQHandler+0x2ca>
 80030ec:	e000      	b.n	80030f0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80030ee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4798      	blx	r3
 8003110:	e000      	b.n	8003114 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003112:	bf00      	nop
    }
  }
}
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop

0800311c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	460b      	mov	r3, r1
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_DMA_RegisterCallback+0x20>
 8003138:	2302      	movs	r3, #2
 800313a:	e03c      	b.n	80031b6 <HAL_DMA_RegisterCallback+0x9a>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	d129      	bne.n	80031a4 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8003150:	7afb      	ldrb	r3, [r7, #11]
 8003152:	2b05      	cmp	r3, #5
 8003154:	d829      	bhi.n	80031aa <HAL_DMA_RegisterCallback+0x8e>
 8003156:	a201      	add	r2, pc, #4	; (adr r2, 800315c <HAL_DMA_RegisterCallback+0x40>)
 8003158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315c:	08003175 	.word	0x08003175
 8003160:	0800317d 	.word	0x0800317d
 8003164:	08003185 	.word	0x08003185
 8003168:	0800318d 	.word	0x0800318d
 800316c:	08003195 	.word	0x08003195
 8003170:	0800319d 	.word	0x0800319d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800317a:	e017      	b.n	80031ac <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003182:	e013      	b.n	80031ac <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 800318a:	e00f      	b.n	80031ac <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8003192:	e00b      	b.n	80031ac <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 800319a:	e007      	b.n	80031ac <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80031a2:	e003      	b.n	80031ac <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
 80031a8:	e000      	b.n	80031ac <HAL_DMA_RegisterCallback+0x90>
      break;
 80031aa:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop

080031c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d108      	bne.n	8003204 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003202:	e007      	b.n	8003214 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	3b10      	subs	r3, #16
 8003230:	4a14      	ldr	r2, [pc, #80]	; (8003284 <DMA_CalcBaseAndBitshift+0x64>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800323a:	4a13      	ldr	r2, [pc, #76]	; (8003288 <DMA_CalcBaseAndBitshift+0x68>)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d909      	bls.n	8003262 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003256:	f023 0303 	bic.w	r3, r3, #3
 800325a:	1d1a      	adds	r2, r3, #4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	659a      	str	r2, [r3, #88]	; 0x58
 8003260:	e007      	b.n	8003272 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	aaaaaaab 	.word	0xaaaaaaab
 8003288:	0800ece8 	.word	0x0800ece8

0800328c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d11f      	bne.n	80032e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d855      	bhi.n	8003358 <DMA_CheckFifoParam+0xcc>
 80032ac:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <DMA_CheckFifoParam+0x28>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032c5 	.word	0x080032c5
 80032b8:	080032d7 	.word	0x080032d7
 80032bc:	080032c5 	.word	0x080032c5
 80032c0:	08003359 	.word	0x08003359
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d045      	beq.n	800335c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d4:	e042      	b.n	800335c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032de:	d13f      	bne.n	8003360 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e4:	e03c      	b.n	8003360 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ee:	d121      	bne.n	8003334 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d836      	bhi.n	8003364 <DMA_CheckFifoParam+0xd8>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <DMA_CheckFifoParam+0x70>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	0800330d 	.word	0x0800330d
 8003300:	08003313 	.word	0x08003313
 8003304:	0800330d 	.word	0x0800330d
 8003308:	08003325 	.word	0x08003325
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
      break;
 8003310:	e02f      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d024      	beq.n	8003368 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003322:	e021      	b.n	8003368 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800332c:	d11e      	bne.n	800336c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003332:	e01b      	b.n	800336c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d902      	bls.n	8003340 <DMA_CheckFifoParam+0xb4>
 800333a:	2b03      	cmp	r3, #3
 800333c:	d003      	beq.n	8003346 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800333e:	e018      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      break;
 8003344:	e015      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00e      	beq.n	8003370 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
      break;
 8003356:	e00b      	b.n	8003370 <DMA_CheckFifoParam+0xe4>
      break;
 8003358:	bf00      	nop
 800335a:	e00a      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 800335c:	bf00      	nop
 800335e:	e008      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 8003360:	bf00      	nop
 8003362:	e006      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 8003364:	bf00      	nop
 8003366:	e004      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 8003368:	bf00      	nop
 800336a:	e002      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;   
 800336c:	bf00      	nop
 800336e:	e000      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 8003370:	bf00      	nop
    }
  } 
  
  return status; 
 8003372:	7bfb      	ldrb	r3, [r7, #15]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	; 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	e16b      	b.n	8003674 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800339c:	2201      	movs	r2, #1
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	f040 815a 	bne.w	800366e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d00b      	beq.n	80033da <HAL_GPIO_Init+0x5a>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d007      	beq.n	80033da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ce:	2b11      	cmp	r3, #17
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b12      	cmp	r3, #18
 80033d8:	d130      	bne.n	800343c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2203      	movs	r2, #3
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003410:	2201      	movs	r2, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 0201 	and.w	r2, r3, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d003      	beq.n	800347c <HAL_GPIO_Init+0xfc>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b12      	cmp	r3, #18
 800347a:	d123      	bne.n	80034c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	08da      	lsrs	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3208      	adds	r2, #8
 8003484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	220f      	movs	r2, #15
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	08da      	lsrs	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3208      	adds	r2, #8
 80034be:	69b9      	ldr	r1, [r7, #24]
 80034c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	2203      	movs	r2, #3
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0203 	and.w	r2, r3, #3
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80b4 	beq.w	800366e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	4b5f      	ldr	r3, [pc, #380]	; (8003688 <HAL_GPIO_Init+0x308>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	4a5e      	ldr	r2, [pc, #376]	; (8003688 <HAL_GPIO_Init+0x308>)
 8003510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003514:	6453      	str	r3, [r2, #68]	; 0x44
 8003516:	4b5c      	ldr	r3, [pc, #368]	; (8003688 <HAL_GPIO_Init+0x308>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003522:	4a5a      	ldr	r2, [pc, #360]	; (800368c <HAL_GPIO_Init+0x30c>)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	3302      	adds	r3, #2
 800352a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	220f      	movs	r2, #15
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a51      	ldr	r2, [pc, #324]	; (8003690 <HAL_GPIO_Init+0x310>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d02b      	beq.n	80035a6 <HAL_GPIO_Init+0x226>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a50      	ldr	r2, [pc, #320]	; (8003694 <HAL_GPIO_Init+0x314>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d025      	beq.n	80035a2 <HAL_GPIO_Init+0x222>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4f      	ldr	r2, [pc, #316]	; (8003698 <HAL_GPIO_Init+0x318>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01f      	beq.n	800359e <HAL_GPIO_Init+0x21e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4e      	ldr	r2, [pc, #312]	; (800369c <HAL_GPIO_Init+0x31c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d019      	beq.n	800359a <HAL_GPIO_Init+0x21a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4d      	ldr	r2, [pc, #308]	; (80036a0 <HAL_GPIO_Init+0x320>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d013      	beq.n	8003596 <HAL_GPIO_Init+0x216>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4c      	ldr	r2, [pc, #304]	; (80036a4 <HAL_GPIO_Init+0x324>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00d      	beq.n	8003592 <HAL_GPIO_Init+0x212>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4b      	ldr	r2, [pc, #300]	; (80036a8 <HAL_GPIO_Init+0x328>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <HAL_GPIO_Init+0x20e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4a      	ldr	r2, [pc, #296]	; (80036ac <HAL_GPIO_Init+0x32c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d101      	bne.n	800358a <HAL_GPIO_Init+0x20a>
 8003586:	2307      	movs	r3, #7
 8003588:	e00e      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 800358a:	2308      	movs	r3, #8
 800358c:	e00c      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 800358e:	2306      	movs	r3, #6
 8003590:	e00a      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 8003592:	2305      	movs	r3, #5
 8003594:	e008      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 8003596:	2304      	movs	r3, #4
 8003598:	e006      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 800359a:	2303      	movs	r3, #3
 800359c:	e004      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 800359e:	2302      	movs	r3, #2
 80035a0:	e002      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 80035a6:	2300      	movs	r3, #0
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	f002 0203 	and.w	r2, r2, #3
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	4093      	lsls	r3, r2
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035b8:	4934      	ldr	r1, [pc, #208]	; (800368c <HAL_GPIO_Init+0x30c>)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	089b      	lsrs	r3, r3, #2
 80035be:	3302      	adds	r3, #2
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c6:	4b3a      	ldr	r3, [pc, #232]	; (80036b0 <HAL_GPIO_Init+0x330>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ea:	4a31      	ldr	r2, [pc, #196]	; (80036b0 <HAL_GPIO_Init+0x330>)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035f0:	4b2f      	ldr	r3, [pc, #188]	; (80036b0 <HAL_GPIO_Init+0x330>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003614:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <HAL_GPIO_Init+0x330>)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800361a:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <HAL_GPIO_Init+0x330>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800363e:	4a1c      	ldr	r2, [pc, #112]	; (80036b0 <HAL_GPIO_Init+0x330>)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <HAL_GPIO_Init+0x330>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003668:	4a11      	ldr	r2, [pc, #68]	; (80036b0 <HAL_GPIO_Init+0x330>)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3301      	adds	r3, #1
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	2b0f      	cmp	r3, #15
 8003678:	f67f ae90 	bls.w	800339c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800367c:	bf00      	nop
 800367e:	3724      	adds	r7, #36	; 0x24
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	40023800 	.word	0x40023800
 800368c:	40013800 	.word	0x40013800
 8003690:	40020000 	.word	0x40020000
 8003694:	40020400 	.word	0x40020400
 8003698:	40020800 	.word	0x40020800
 800369c:	40020c00 	.word	0x40020c00
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40021400 	.word	0x40021400
 80036a8:	40021800 	.word	0x40021800
 80036ac:	40021c00 	.word	0x40021c00
 80036b0:	40013c00 	.word	0x40013c00

080036b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	807b      	strh	r3, [r7, #2]
 80036c0:	4613      	mov	r3, r2
 80036c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c4:	787b      	ldrb	r3, [r7, #1]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ca:	887a      	ldrh	r2, [r7, #2]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036d0:	e003      	b.n	80036da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036d2:	887b      	ldrh	r3, [r7, #2]
 80036d4:	041a      	lsls	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	619a      	str	r2, [r3, #24]
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d006      	beq.n	800370c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036fe:	4a05      	ldr	r2, [pc, #20]	; (8003714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	4618      	mov	r0, r3
 8003708:	f006 ffba 	bl	800a680 <HAL_GPIO_EXTI_Callback>
  }
}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40013c00 	.word	0x40013c00

08003718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e11f      	b.n	800396a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f008 ff1c 	bl	800c57c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800376a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800377a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800377c:	f001 fcb6 	bl	80050ec <HAL_RCC_GetPCLK1Freq>
 8003780:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4a7b      	ldr	r2, [pc, #492]	; (8003974 <HAL_I2C_Init+0x25c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d807      	bhi.n	800379c <HAL_I2C_Init+0x84>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4a7a      	ldr	r2, [pc, #488]	; (8003978 <HAL_I2C_Init+0x260>)
 8003790:	4293      	cmp	r3, r2
 8003792:	bf94      	ite	ls
 8003794:	2301      	movls	r3, #1
 8003796:	2300      	movhi	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e006      	b.n	80037aa <HAL_I2C_Init+0x92>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4a77      	ldr	r2, [pc, #476]	; (800397c <HAL_I2C_Init+0x264>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	bf94      	ite	ls
 80037a4:	2301      	movls	r3, #1
 80037a6:	2300      	movhi	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e0db      	b.n	800396a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a72      	ldr	r2, [pc, #456]	; (8003980 <HAL_I2C_Init+0x268>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	0c9b      	lsrs	r3, r3, #18
 80037bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	4a64      	ldr	r2, [pc, #400]	; (8003974 <HAL_I2C_Init+0x25c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d802      	bhi.n	80037ec <HAL_I2C_Init+0xd4>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	3301      	adds	r3, #1
 80037ea:	e009      	b.n	8003800 <HAL_I2C_Init+0xe8>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	4a63      	ldr	r2, [pc, #396]	; (8003984 <HAL_I2C_Init+0x26c>)
 80037f8:	fba2 2303 	umull	r2, r3, r2, r3
 80037fc:	099b      	lsrs	r3, r3, #6
 80037fe:	3301      	adds	r3, #1
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	430b      	orrs	r3, r1
 8003806:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003812:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4956      	ldr	r1, [pc, #344]	; (8003974 <HAL_I2C_Init+0x25c>)
 800381c:	428b      	cmp	r3, r1
 800381e:	d80d      	bhi.n	800383c <HAL_I2C_Init+0x124>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1e59      	subs	r1, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fbb1 f3f3 	udiv	r3, r1, r3
 800382e:	3301      	adds	r3, #1
 8003830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003834:	2b04      	cmp	r3, #4
 8003836:	bf38      	it	cc
 8003838:	2304      	movcc	r3, #4
 800383a:	e04f      	b.n	80038dc <HAL_I2C_Init+0x1c4>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d111      	bne.n	8003868 <HAL_I2C_Init+0x150>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	1e58      	subs	r0, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6859      	ldr	r1, [r3, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	440b      	add	r3, r1
 8003852:	fbb0 f3f3 	udiv	r3, r0, r3
 8003856:	3301      	adds	r3, #1
 8003858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385c:	2b00      	cmp	r3, #0
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	e012      	b.n	800388e <HAL_I2C_Init+0x176>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1e58      	subs	r0, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6859      	ldr	r1, [r3, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	0099      	lsls	r1, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	fbb0 f3f3 	udiv	r3, r0, r3
 800387e:	3301      	adds	r3, #1
 8003880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_I2C_Init+0x17e>
 8003892:	2301      	movs	r3, #1
 8003894:	e022      	b.n	80038dc <HAL_I2C_Init+0x1c4>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10e      	bne.n	80038bc <HAL_I2C_Init+0x1a4>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1e58      	subs	r0, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	460b      	mov	r3, r1
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	440b      	add	r3, r1
 80038ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b0:	3301      	adds	r3, #1
 80038b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ba:	e00f      	b.n	80038dc <HAL_I2C_Init+0x1c4>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1e58      	subs	r0, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	0099      	lsls	r1, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d2:	3301      	adds	r3, #1
 80038d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	6809      	ldr	r1, [r1, #0]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800390a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6911      	ldr	r1, [r2, #16]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68d2      	ldr	r2, [r2, #12]
 8003916:	4311      	orrs	r1, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	430b      	orrs	r3, r1
 800391e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	000186a0 	.word	0x000186a0
 8003978:	001e847f 	.word	0x001e847f
 800397c:	003d08ff 	.word	0x003d08ff
 8003980:	431bde83 	.word	0x431bde83
 8003984:	10624dd3 	.word	0x10624dd3

08003988 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	461a      	mov	r2, r3
 8003994:	460b      	mov	r3, r1
 8003996:	817b      	strh	r3, [r7, #10]
 8003998:	4613      	mov	r3, r2
 800399a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800399c:	f7fd fb3a 	bl	8001014 <HAL_GetTick>
 80039a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	f040 80e0 	bne.w	8003b70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	2319      	movs	r3, #25
 80039b6:	2201      	movs	r2, #1
 80039b8:	4970      	ldr	r1, [pc, #448]	; (8003b7c <HAL_I2C_Master_Transmit+0x1f4>)
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fc56 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
 80039c8:	e0d3      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_I2C_Master_Transmit+0x50>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e0cc      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x1ea>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d007      	beq.n	80039fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0201 	orr.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2221      	movs	r2, #33	; 0x21
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2210      	movs	r2, #16
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	893a      	ldrh	r2, [r7, #8]
 8003a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4a50      	ldr	r2, [pc, #320]	; (8003b80 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a40:	8979      	ldrh	r1, [r7, #10]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fac2 	bl	8003fd0 <I2C_MasterRequestWrite>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e08d      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a6c:	e066      	b.n	8003b3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	6a39      	ldr	r1, [r7, #32]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fcd0 	bl	8004418 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00d      	beq.n	8003a9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d107      	bne.n	8003a96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e06b      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	781a      	ldrb	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d11b      	bne.n	8003b10 <HAL_I2C_Master_Transmit+0x188>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d017      	beq.n	8003b10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	6a39      	ldr	r1, [r7, #32]
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fcc0 	bl	800449a <I2C_WaitOnBTFFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00d      	beq.n	8003b3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d107      	bne.n	8003b38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e01a      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d194      	bne.n	8003a6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e000      	b.n	8003b72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b70:	2302      	movs	r3, #2
  }
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	00100002 	.word	0x00100002
 8003b80:	ffff0000 	.word	0xffff0000

08003b84 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08c      	sub	sp, #48	; 0x30
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	460b      	mov	r3, r1
 8003b92:	817b      	strh	r3, [r7, #10]
 8003b94:	4613      	mov	r3, r2
 8003b96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b98:	f7fd fa3c 	bl	8001014 <HAL_GetTick>
 8003b9c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	f040 820b 	bne.w	8003fc2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	2319      	movs	r3, #25
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	497c      	ldr	r1, [pc, #496]	; (8003da8 <HAL_I2C_Master_Receive+0x224>)
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fb58 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e1fe      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_I2C_Master_Receive+0x50>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e1f7      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d007      	beq.n	8003bfa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2222      	movs	r2, #34	; 0x22
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2210      	movs	r2, #16
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	893a      	ldrh	r2, [r7, #8]
 8003c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a5c      	ldr	r2, [pc, #368]	; (8003dac <HAL_I2C_Master_Receive+0x228>)
 8003c3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c3c:	8979      	ldrh	r1, [r7, #10]
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fa46 	bl	80040d4 <I2C_MasterRequestRead>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e1b8      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d113      	bne.n	8003c82 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	623b      	str	r3, [r7, #32]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	623b      	str	r3, [r7, #32]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	623b      	str	r3, [r7, #32]
 8003c6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	e18c      	b.n	8003f9c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d11b      	bne.n	8003cc2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	e16c      	b.n	8003f9c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d11b      	bne.n	8003d02 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cea:	2300      	movs	r3, #0
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	e14c      	b.n	8003f9c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d28:	e138      	b.n	8003f9c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	f200 80f1 	bhi.w	8003f16 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d123      	bne.n	8003d84 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 fbeb 	bl	800451c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e139      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d82:	e10b      	b.n	8003f9c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d14e      	bne.n	8003e2a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	2200      	movs	r2, #0
 8003d94:	4906      	ldr	r1, [pc, #24]	; (8003db0 <HAL_I2C_Master_Receive+0x22c>)
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 fa68 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e10e      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
 8003da6:	bf00      	nop
 8003da8:	00100002 	.word	0x00100002
 8003dac:	ffff0000 	.word	0xffff0000
 8003db0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e28:	e0b8      	b.n	8003f9c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	2200      	movs	r2, #0
 8003e32:	4966      	ldr	r1, [pc, #408]	; (8003fcc <HAL_I2C_Master_Receive+0x448>)
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 fa19 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0bf      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	494f      	ldr	r1, [pc, #316]	; (8003fcc <HAL_I2C_Master_Receive+0x448>)
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f9eb 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e091      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f14:	e042      	b.n	8003f9c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fafe 	bl	800451c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e04c      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d118      	bne.n	8003f9c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f47f aec2 	bne.w	8003d2a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e000      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
  }
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3728      	adds	r7, #40	; 0x28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	00010004 	.word	0x00010004

08003fd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d006      	beq.n	8003ffa <I2C_MasterRequestWrite+0x2a>
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d003      	beq.n	8003ffa <I2C_MasterRequestWrite+0x2a>
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ff8:	d108      	bne.n	800400c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	e00b      	b.n	8004024 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	2b12      	cmp	r3, #18
 8004012:	d107      	bne.n	8004024 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004022:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f91b 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00c      	beq.n	8004056 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004050:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e035      	b.n	80040c2 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800405e:	d108      	bne.n	8004072 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004060:	897b      	ldrh	r3, [r7, #10]
 8004062:	b2db      	uxtb	r3, r3
 8004064:	461a      	mov	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800406e:	611a      	str	r2, [r3, #16]
 8004070:	e01b      	b.n	80040aa <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004072:	897b      	ldrh	r3, [r7, #10]
 8004074:	11db      	asrs	r3, r3, #7
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f003 0306 	and.w	r3, r3, #6
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f063 030f 	orn	r3, r3, #15
 8004082:	b2da      	uxtb	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	490f      	ldr	r1, [pc, #60]	; (80040cc <I2C_MasterRequestWrite+0xfc>)
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f942 	bl	800431a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e010      	b.n	80040c2 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040a0:	897b      	ldrh	r3, [r7, #10]
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	4908      	ldr	r1, [pc, #32]	; (80040d0 <I2C_MasterRequestWrite+0x100>)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f932 	bl	800431a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	00010008 	.word	0x00010008
 80040d0:	00010002 	.word	0x00010002

080040d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	460b      	mov	r3, r1
 80040e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d006      	beq.n	800410e <I2C_MasterRequestRead+0x3a>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d003      	beq.n	800410e <I2C_MasterRequestRead+0x3a>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800410c:	d108      	bne.n	8004120 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	e00b      	b.n	8004138 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	2b11      	cmp	r3, #17
 8004126:	d107      	bne.n	8004138 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004136:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f891 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00c      	beq.n	800416a <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004164:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e078      	b.n	800425c <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004172:	d108      	bne.n	8004186 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004174:	897b      	ldrh	r3, [r7, #10]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	b2da      	uxtb	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	611a      	str	r2, [r3, #16]
 8004184:	e05e      	b.n	8004244 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004186:	897b      	ldrh	r3, [r7, #10]
 8004188:	11db      	asrs	r3, r3, #7
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f003 0306 	and.w	r3, r3, #6
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f063 030f 	orn	r3, r3, #15
 8004196:	b2da      	uxtb	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4930      	ldr	r1, [pc, #192]	; (8004264 <I2C_MasterRequestRead+0x190>)
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f8b8 	bl	800431a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e053      	b.n	800425c <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041b4:	897b      	ldrh	r3, [r7, #10]
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	4929      	ldr	r1, [pc, #164]	; (8004268 <I2C_MasterRequestRead+0x194>)
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f8a8 	bl	800431a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e043      	b.n	800425c <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d4:	2300      	movs	r3, #0
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041f8:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f830 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00c      	beq.n	800422c <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004226:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e017      	b.n	800425c <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800422c:	897b      	ldrh	r3, [r7, #10]
 800422e:	11db      	asrs	r3, r3, #7
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f003 0306 	and.w	r3, r3, #6
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f063 030e 	orn	r3, r3, #14
 800423c:	b2da      	uxtb	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	4907      	ldr	r1, [pc, #28]	; (8004268 <I2C_MasterRequestRead+0x194>)
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f865 	bl	800431a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	00010008 	.word	0x00010008
 8004268:	00010002 	.word	0x00010002

0800426c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	4613      	mov	r3, r2
 800427a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800427c:	e025      	b.n	80042ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004284:	d021      	beq.n	80042ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004286:	f7fc fec5 	bl	8001014 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d302      	bcc.n	800429c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d116      	bne.n	80042ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f043 0220 	orr.w	r2, r3, #32
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e023      	b.n	8004312 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	0c1b      	lsrs	r3, r3, #16
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d10d      	bne.n	80042f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	43da      	mvns	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4013      	ands	r3, r2
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	bf0c      	ite	eq
 80042e6:	2301      	moveq	r3, #1
 80042e8:	2300      	movne	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	e00c      	b.n	800430a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	43da      	mvns	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4013      	ands	r3, r2
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bf0c      	ite	eq
 8004302:	2301      	moveq	r3, #1
 8004304:	2300      	movne	r3, #0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	429a      	cmp	r2, r3
 800430e:	d0b6      	beq.n	800427e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004328:	e051      	b.n	80043ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004338:	d123      	bne.n	8004382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004348:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004352:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f043 0204 	orr.w	r2, r3, #4
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e046      	b.n	8004410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004388:	d021      	beq.n	80043ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438a:	f7fc fe43 	bl	8001014 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	429a      	cmp	r2, r3
 8004398:	d302      	bcc.n	80043a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d116      	bne.n	80043ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f043 0220 	orr.w	r2, r3, #32
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e020      	b.n	8004410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d10c      	bne.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	43da      	mvns	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4013      	ands	r3, r2
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	bf14      	ite	ne
 80043ea:	2301      	movne	r3, #1
 80043ec:	2300      	moveq	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	e00b      	b.n	800440a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	43da      	mvns	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4013      	ands	r3, r2
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf14      	ite	ne
 8004404:	2301      	movne	r3, #1
 8004406:	2300      	moveq	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d18d      	bne.n	800432a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004424:	e02d      	b.n	8004482 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f8ce 	bl	80045c8 <I2C_IsAcknowledgeFailed>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e02d      	b.n	8004492 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800443c:	d021      	beq.n	8004482 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443e:	f7fc fde9 	bl	8001014 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	429a      	cmp	r2, r3
 800444c:	d302      	bcc.n	8004454 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d116      	bne.n	8004482 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f043 0220 	orr.w	r2, r3, #32
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e007      	b.n	8004492 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448c:	2b80      	cmp	r3, #128	; 0x80
 800448e:	d1ca      	bne.n	8004426 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044a6:	e02d      	b.n	8004504 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f88d 	bl	80045c8 <I2C_IsAcknowledgeFailed>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e02d      	b.n	8004514 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044be:	d021      	beq.n	8004504 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c0:	f7fc fda8 	bl	8001014 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d302      	bcc.n	80044d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d116      	bne.n	8004504 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	f043 0220 	orr.w	r2, r3, #32
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e007      	b.n	8004514 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b04      	cmp	r3, #4
 8004510:	d1ca      	bne.n	80044a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004528:	e042      	b.n	80045b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b10      	cmp	r3, #16
 8004536:	d119      	bne.n	800456c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0210 	mvn.w	r2, #16
 8004540:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e029      	b.n	80045c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456c:	f7fc fd52 	bl	8001014 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	429a      	cmp	r2, r3
 800457a:	d302      	bcc.n	8004582 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d116      	bne.n	80045b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e007      	b.n	80045c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d1b5      	bne.n	800452a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045de:	d11b      	bne.n	8004618 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	f043 0204 	orr.w	r2, r3, #4
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004628:	b08f      	sub	sp, #60	; 0x3c
 800462a:	af0a      	add	r7, sp, #40	; 0x28
 800462c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e10f      	b.n	8004858 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f008 fa4e 	bl	800caf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2203      	movs	r2, #3
 800465c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f003 fe27 	bl	80082ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	687e      	ldr	r6, [r7, #4]
 8004684:	466d      	mov	r5, sp
 8004686:	f106 0410 	add.w	r4, r6, #16
 800468a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800468c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800468e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004692:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004696:	e885 0003 	stmia.w	r5, {r0, r1}
 800469a:	1d33      	adds	r3, r6, #4
 800469c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800469e:	6838      	ldr	r0, [r7, #0]
 80046a0:	f003 fdb2 	bl	8008208 <USB_CoreInit>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e0d0      	b.n	8004858 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2100      	movs	r1, #0
 80046bc:	4618      	mov	r0, r3
 80046be:	f003 fe15 	bl	80082ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
 80046c6:	e04a      	b.n	800475e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046c8:	7bfa      	ldrb	r2, [r7, #15]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	333d      	adds	r3, #61	; 0x3d
 80046d8:	2201      	movs	r2, #1
 80046da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046dc:	7bfa      	ldrb	r2, [r7, #15]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	333c      	adds	r3, #60	; 0x3c
 80046ec:	7bfa      	ldrb	r2, [r7, #15]
 80046ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046f0:	7bfa      	ldrb	r2, [r7, #15]
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	b298      	uxth	r0, r3
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	3342      	adds	r3, #66	; 0x42
 8004704:	4602      	mov	r2, r0
 8004706:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004708:	7bfa      	ldrb	r2, [r7, #15]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	333f      	adds	r3, #63	; 0x3f
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800471c:	7bfa      	ldrb	r2, [r7, #15]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	3344      	adds	r3, #68	; 0x44
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004730:	7bfa      	ldrb	r2, [r7, #15]
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	3348      	adds	r3, #72	; 0x48
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004744:	7bfa      	ldrb	r2, [r7, #15]
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	1a9b      	subs	r3, r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	3350      	adds	r3, #80	; 0x50
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	3301      	adds	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
 800475e:	7bfa      	ldrb	r2, [r7, #15]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	429a      	cmp	r2, r3
 8004766:	d3af      	bcc.n	80046c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004768:	2300      	movs	r3, #0
 800476a:	73fb      	strb	r3, [r7, #15]
 800476c:	e044      	b.n	80047f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800476e:	7bfa      	ldrb	r2, [r7, #15]
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	4613      	mov	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004784:	7bfa      	ldrb	r2, [r7, #15]
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004796:	7bfa      	ldrb	r2, [r7, #15]
 8004798:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800479a:	7bfa      	ldrb	r2, [r7, #15]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80047ac:	2200      	movs	r2, #0
 80047ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047b0:	7bfa      	ldrb	r2, [r7, #15]
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047c6:	7bfa      	ldrb	r2, [r7, #15]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047dc:	7bfa      	ldrb	r2, [r7, #15]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	3301      	adds	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
 80047f8:	7bfa      	ldrb	r2, [r7, #15]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d3b5      	bcc.n	800476e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	687e      	ldr	r6, [r7, #4]
 800480a:	466d      	mov	r5, sp
 800480c:	f106 0410 	add.w	r4, r6, #16
 8004810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004818:	e894 0003 	ldmia.w	r4, {r0, r1}
 800481c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004820:	1d33      	adds	r3, r6, #4
 8004822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004824:	6838      	ldr	r0, [r7, #0]
 8004826:	f003 fd8b 	bl	8008340 <USB_DevInit>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e00d      	b.n	8004858 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f003 ff48 	bl	80086e6 <USB_DevDisconnect>

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004860 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e25b      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d075      	beq.n	800496a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800487e:	4ba3      	ldr	r3, [pc, #652]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 030c 	and.w	r3, r3, #12
 8004886:	2b04      	cmp	r3, #4
 8004888:	d00c      	beq.n	80048a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800488a:	4ba0      	ldr	r3, [pc, #640]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004892:	2b08      	cmp	r3, #8
 8004894:	d112      	bne.n	80048bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004896:	4b9d      	ldr	r3, [pc, #628]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a2:	d10b      	bne.n	80048bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a4:	4b99      	ldr	r3, [pc, #612]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d05b      	beq.n	8004968 <HAL_RCC_OscConfig+0x108>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d157      	bne.n	8004968 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e236      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c4:	d106      	bne.n	80048d4 <HAL_RCC_OscConfig+0x74>
 80048c6:	4b91      	ldr	r3, [pc, #580]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a90      	ldr	r2, [pc, #576]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	e01d      	b.n	8004910 <HAL_RCC_OscConfig+0xb0>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048dc:	d10c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x98>
 80048de:	4b8b      	ldr	r3, [pc, #556]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a8a      	ldr	r2, [pc, #552]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 80048e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	4b88      	ldr	r3, [pc, #544]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a87      	ldr	r2, [pc, #540]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	e00b      	b.n	8004910 <HAL_RCC_OscConfig+0xb0>
 80048f8:	4b84      	ldr	r3, [pc, #528]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a83      	ldr	r2, [pc, #524]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 80048fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	4b81      	ldr	r3, [pc, #516]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a80      	ldr	r2, [pc, #512]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 800490a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800490e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d013      	beq.n	8004940 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7fc fb7c 	bl	8001014 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004920:	f7fc fb78 	bl	8001014 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b64      	cmp	r3, #100	; 0x64
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e1fb      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004932:	4b76      	ldr	r3, [pc, #472]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0xc0>
 800493e:	e014      	b.n	800496a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004940:	f7fc fb68 	bl	8001014 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004948:	f7fc fb64 	bl	8001014 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b64      	cmp	r3, #100	; 0x64
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e1e7      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800495a:	4b6c      	ldr	r3, [pc, #432]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0xe8>
 8004966:	e000      	b.n	800496a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d063      	beq.n	8004a3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004976:	4b65      	ldr	r3, [pc, #404]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 030c 	and.w	r3, r3, #12
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004982:	4b62      	ldr	r3, [pc, #392]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800498a:	2b08      	cmp	r3, #8
 800498c:	d11c      	bne.n	80049c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800498e:	4b5f      	ldr	r3, [pc, #380]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d116      	bne.n	80049c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800499a:	4b5c      	ldr	r3, [pc, #368]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_RCC_OscConfig+0x152>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d001      	beq.n	80049b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e1bb      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b2:	4b56      	ldr	r3, [pc, #344]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	4952      	ldr	r1, [pc, #328]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c6:	e03a      	b.n	8004a3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d020      	beq.n	8004a12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d0:	4b4f      	ldr	r3, [pc, #316]	; (8004b10 <HAL_RCC_OscConfig+0x2b0>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d6:	f7fc fb1d 	bl	8001014 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049de:	f7fc fb19 	bl	8001014 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e19c      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f0:	4b46      	ldr	r3, [pc, #280]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fc:	4b43      	ldr	r3, [pc, #268]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4940      	ldr	r1, [pc, #256]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	600b      	str	r3, [r1, #0]
 8004a10:	e015      	b.n	8004a3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a12:	4b3f      	ldr	r3, [pc, #252]	; (8004b10 <HAL_RCC_OscConfig+0x2b0>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fc fafc 	bl	8001014 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a20:	f7fc faf8 	bl	8001014 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e17b      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a32:	4b36      	ldr	r3, [pc, #216]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d030      	beq.n	8004aac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d016      	beq.n	8004a80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a52:	4b30      	ldr	r3, [pc, #192]	; (8004b14 <HAL_RCC_OscConfig+0x2b4>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a58:	f7fc fadc 	bl	8001014 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a60:	f7fc fad8 	bl	8001014 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e15b      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a72:	4b26      	ldr	r3, [pc, #152]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 8004a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0x200>
 8004a7e:	e015      	b.n	8004aac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a80:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <HAL_RCC_OscConfig+0x2b4>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a86:	f7fc fac5 	bl	8001014 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a8e:	f7fc fac1 	bl	8001014 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e144      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa0:	4b1a      	ldr	r3, [pc, #104]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 8004aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f0      	bne.n	8004a8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80a0 	beq.w	8004bfa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aba:	2300      	movs	r3, #0
 8004abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004abe:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10f      	bne.n	8004aea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	4a0e      	ldr	r2, [pc, #56]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ada:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	60bb      	str	r3, [r7, #8]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aea:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <HAL_RCC_OscConfig+0x2b8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d121      	bne.n	8004b3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004af6:	4b08      	ldr	r3, [pc, #32]	; (8004b18 <HAL_RCC_OscConfig+0x2b8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a07      	ldr	r2, [pc, #28]	; (8004b18 <HAL_RCC_OscConfig+0x2b8>)
 8004afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b02:	f7fc fa87 	bl	8001014 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b08:	e011      	b.n	8004b2e <HAL_RCC_OscConfig+0x2ce>
 8004b0a:	bf00      	nop
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	42470000 	.word	0x42470000
 8004b14:	42470e80 	.word	0x42470e80
 8004b18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b1c:	f7fc fa7a 	bl	8001014 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e0fd      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b2e:	4b81      	ldr	r3, [pc, #516]	; (8004d34 <HAL_RCC_OscConfig+0x4d4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0f0      	beq.n	8004b1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d106      	bne.n	8004b50 <HAL_RCC_OscConfig+0x2f0>
 8004b42:	4b7d      	ldr	r3, [pc, #500]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b46:	4a7c      	ldr	r2, [pc, #496]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b4e:	e01c      	b.n	8004b8a <HAL_RCC_OscConfig+0x32a>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b05      	cmp	r3, #5
 8004b56:	d10c      	bne.n	8004b72 <HAL_RCC_OscConfig+0x312>
 8004b58:	4b77      	ldr	r3, [pc, #476]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5c:	4a76      	ldr	r2, [pc, #472]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004b5e:	f043 0304 	orr.w	r3, r3, #4
 8004b62:	6713      	str	r3, [r2, #112]	; 0x70
 8004b64:	4b74      	ldr	r3, [pc, #464]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b68:	4a73      	ldr	r2, [pc, #460]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004b6a:	f043 0301 	orr.w	r3, r3, #1
 8004b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b70:	e00b      	b.n	8004b8a <HAL_RCC_OscConfig+0x32a>
 8004b72:	4b71      	ldr	r3, [pc, #452]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b76:	4a70      	ldr	r2, [pc, #448]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7e:	4b6e      	ldr	r3, [pc, #440]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b82:	4a6d      	ldr	r2, [pc, #436]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004b84:	f023 0304 	bic.w	r3, r3, #4
 8004b88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d015      	beq.n	8004bbe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b92:	f7fc fa3f 	bl	8001014 <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b98:	e00a      	b.n	8004bb0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b9a:	f7fc fa3b 	bl	8001014 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e0bc      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb0:	4b61      	ldr	r3, [pc, #388]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0ee      	beq.n	8004b9a <HAL_RCC_OscConfig+0x33a>
 8004bbc:	e014      	b.n	8004be8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bbe:	f7fc fa29 	bl	8001014 <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc4:	e00a      	b.n	8004bdc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc6:	f7fc fa25 	bl	8001014 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e0a6      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bdc:	4b56      	ldr	r3, [pc, #344]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1ee      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d105      	bne.n	8004bfa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bee:	4b52      	ldr	r3, [pc, #328]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	4a51      	ldr	r2, [pc, #324]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 8092 	beq.w	8004d28 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c04:	4b4c      	ldr	r3, [pc, #304]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 030c 	and.w	r3, r3, #12
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d05c      	beq.n	8004cca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d141      	bne.n	8004c9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c18:	4b48      	ldr	r3, [pc, #288]	; (8004d3c <HAL_RCC_OscConfig+0x4dc>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1e:	f7fc f9f9 	bl	8001014 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c26:	f7fc f9f5 	bl	8001014 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e078      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c38:	4b3f      	ldr	r3, [pc, #252]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1f0      	bne.n	8004c26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	019b      	lsls	r3, r3, #6
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	085b      	lsrs	r3, r3, #1
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	041b      	lsls	r3, r3, #16
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	061b      	lsls	r3, r3, #24
 8004c68:	4933      	ldr	r1, [pc, #204]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c6e:	4b33      	ldr	r3, [pc, #204]	; (8004d3c <HAL_RCC_OscConfig+0x4dc>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fc f9ce 	bl	8001014 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c7c:	f7fc f9ca 	bl	8001014 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e04d      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8e:	4b2a      	ldr	r3, [pc, #168]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0x41c>
 8004c9a:	e045      	b.n	8004d28 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c9c:	4b27      	ldr	r3, [pc, #156]	; (8004d3c <HAL_RCC_OscConfig+0x4dc>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca2:	f7fc f9b7 	bl	8001014 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004caa:	f7fc f9b3 	bl	8001014 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e036      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cbc:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f0      	bne.n	8004caa <HAL_RCC_OscConfig+0x44a>
 8004cc8:	e02e      	b.n	8004d28 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e029      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cd6:	4b18      	ldr	r3, [pc, #96]	; (8004d38 <HAL_RCC_OscConfig+0x4d8>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d11c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d115      	bne.n	8004d24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cfe:	4013      	ands	r3, r2
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d10d      	bne.n	8004d24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d106      	bne.n	8004d24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d001      	beq.n	8004d28 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e000      	b.n	8004d2a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40007000 	.word	0x40007000
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	42470060 	.word	0x42470060

08004d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e0cc      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d54:	4b68      	ldr	r3, [pc, #416]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d90c      	bls.n	8004d7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d62:	4b65      	ldr	r3, [pc, #404]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6a:	4b63      	ldr	r3, [pc, #396]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e0b8      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d020      	beq.n	8004dca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d94:	4b59      	ldr	r3, [pc, #356]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	4a58      	ldr	r2, [pc, #352]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dac:	4b53      	ldr	r3, [pc, #332]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4a52      	ldr	r2, [pc, #328]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004db6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db8:	4b50      	ldr	r3, [pc, #320]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	494d      	ldr	r1, [pc, #308]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d044      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d107      	bne.n	8004dee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dde:	4b47      	ldr	r3, [pc, #284]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d119      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e07f      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d003      	beq.n	8004dfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d107      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dfe:	4b3f      	ldr	r3, [pc, #252]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e06f      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0e:	4b3b      	ldr	r3, [pc, #236]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e067      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e1e:	4b37      	ldr	r3, [pc, #220]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f023 0203 	bic.w	r2, r3, #3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	4934      	ldr	r1, [pc, #208]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e30:	f7fc f8f0 	bl	8001014 <HAL_GetTick>
 8004e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e36:	e00a      	b.n	8004e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e38:	f7fc f8ec 	bl	8001014 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e04f      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4e:	4b2b      	ldr	r3, [pc, #172]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 020c 	and.w	r2, r3, #12
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d1eb      	bne.n	8004e38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e60:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d20c      	bcs.n	8004e88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6e:	4b22      	ldr	r3, [pc, #136]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e76:	4b20      	ldr	r3, [pc, #128]	; (8004ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e032      	b.n	8004eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e94:	4b19      	ldr	r3, [pc, #100]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	4916      	ldr	r1, [pc, #88]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d009      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eb2:	4b12      	ldr	r3, [pc, #72]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	490e      	ldr	r1, [pc, #56]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ec6:	f000 f82d 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 8004eca:	4601      	mov	r1, r0
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed8:	5cd3      	ldrb	r3, [r2, r3]
 8004eda:	fa21 f303 	lsr.w	r3, r1, r3
 8004ede:	4a09      	ldr	r2, [pc, #36]	; (8004f04 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ee2:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <HAL_RCC_ClockConfig+0x1c8>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fc f850 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40023c00 	.word	0x40023c00
 8004efc:	40023800 	.word	0x40023800
 8004f00:	0800ecf0 	.word	0x0800ecf0
 8004f04:	20000040 	.word	0x20000040
 8004f08:	20000000 	.word	0x20000000

08004f0c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004f10:	4b03      	ldr	r3, [pc, #12]	; (8004f20 <HAL_RCC_EnableCSS+0x14>)
 8004f12:	2201      	movs	r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
}
 8004f16:	bf00      	nop
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	4247004c 	.word	0x4247004c

08004f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	607b      	str	r3, [r7, #4]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	2300      	movs	r3, #0
 8004f34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f3a:	4b63      	ldr	r3, [pc, #396]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d007      	beq.n	8004f56 <HAL_RCC_GetSysClockFreq+0x32>
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d008      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0x38>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f040 80b4 	bne.w	80050b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f50:	4b5e      	ldr	r3, [pc, #376]	; (80050cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f52:	60bb      	str	r3, [r7, #8]
       break;
 8004f54:	e0b3      	b.n	80050be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f56:	4b5e      	ldr	r3, [pc, #376]	; (80050d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004f58:	60bb      	str	r3, [r7, #8]
      break;
 8004f5a:	e0b0      	b.n	80050be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f5c:	4b5a      	ldr	r3, [pc, #360]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f66:	4b58      	ldr	r3, [pc, #352]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d04a      	beq.n	8005008 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f72:	4b55      	ldr	r3, [pc, #340]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	f04f 0400 	mov.w	r4, #0
 8004f7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	ea03 0501 	and.w	r5, r3, r1
 8004f88:	ea04 0602 	and.w	r6, r4, r2
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	4632      	mov	r2, r6
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	f04f 0400 	mov.w	r4, #0
 8004f98:	0154      	lsls	r4, r2, #5
 8004f9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f9e:	014b      	lsls	r3, r1, #5
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4622      	mov	r2, r4
 8004fa4:	1b49      	subs	r1, r1, r5
 8004fa6:	eb62 0206 	sbc.w	r2, r2, r6
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	f04f 0400 	mov.w	r4, #0
 8004fb2:	0194      	lsls	r4, r2, #6
 8004fb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fb8:	018b      	lsls	r3, r1, #6
 8004fba:	1a5b      	subs	r3, r3, r1
 8004fbc:	eb64 0402 	sbc.w	r4, r4, r2
 8004fc0:	f04f 0100 	mov.w	r1, #0
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	00e2      	lsls	r2, r4, #3
 8004fca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004fce:	00d9      	lsls	r1, r3, #3
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4614      	mov	r4, r2
 8004fd4:	195b      	adds	r3, r3, r5
 8004fd6:	eb44 0406 	adc.w	r4, r4, r6
 8004fda:	f04f 0100 	mov.w	r1, #0
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	0262      	lsls	r2, r4, #9
 8004fe4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004fe8:	0259      	lsls	r1, r3, #9
 8004fea:	460b      	mov	r3, r1
 8004fec:	4614      	mov	r4, r2
 8004fee:	4618      	mov	r0, r3
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f04f 0400 	mov.w	r4, #0
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4623      	mov	r3, r4
 8004ffc:	f7fb fe24 	bl	8000c48 <__aeabi_uldivmod>
 8005000:	4603      	mov	r3, r0
 8005002:	460c      	mov	r4, r1
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	e049      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005008:	4b2f      	ldr	r3, [pc, #188]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	099b      	lsrs	r3, r3, #6
 800500e:	f04f 0400 	mov.w	r4, #0
 8005012:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	ea03 0501 	and.w	r5, r3, r1
 800501e:	ea04 0602 	and.w	r6, r4, r2
 8005022:	4629      	mov	r1, r5
 8005024:	4632      	mov	r2, r6
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	f04f 0400 	mov.w	r4, #0
 800502e:	0154      	lsls	r4, r2, #5
 8005030:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005034:	014b      	lsls	r3, r1, #5
 8005036:	4619      	mov	r1, r3
 8005038:	4622      	mov	r2, r4
 800503a:	1b49      	subs	r1, r1, r5
 800503c:	eb62 0206 	sbc.w	r2, r2, r6
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	f04f 0400 	mov.w	r4, #0
 8005048:	0194      	lsls	r4, r2, #6
 800504a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800504e:	018b      	lsls	r3, r1, #6
 8005050:	1a5b      	subs	r3, r3, r1
 8005052:	eb64 0402 	sbc.w	r4, r4, r2
 8005056:	f04f 0100 	mov.w	r1, #0
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	00e2      	lsls	r2, r4, #3
 8005060:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005064:	00d9      	lsls	r1, r3, #3
 8005066:	460b      	mov	r3, r1
 8005068:	4614      	mov	r4, r2
 800506a:	195b      	adds	r3, r3, r5
 800506c:	eb44 0406 	adc.w	r4, r4, r6
 8005070:	f04f 0100 	mov.w	r1, #0
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	02a2      	lsls	r2, r4, #10
 800507a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800507e:	0299      	lsls	r1, r3, #10
 8005080:	460b      	mov	r3, r1
 8005082:	4614      	mov	r4, r2
 8005084:	4618      	mov	r0, r3
 8005086:	4621      	mov	r1, r4
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f04f 0400 	mov.w	r4, #0
 800508e:	461a      	mov	r2, r3
 8005090:	4623      	mov	r3, r4
 8005092:	f7fb fdd9 	bl	8000c48 <__aeabi_uldivmod>
 8005096:	4603      	mov	r3, r0
 8005098:	460c      	mov	r4, r1
 800509a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	0c1b      	lsrs	r3, r3, #16
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	3301      	adds	r3, #1
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b4:	60bb      	str	r3, [r7, #8]
      break;
 80050b6:	e002      	b.n	80050be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050b8:	4b04      	ldr	r3, [pc, #16]	; (80050cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80050ba:	60bb      	str	r3, [r7, #8]
      break;
 80050bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050be:	68bb      	ldr	r3, [r7, #8]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050c8:	40023800 	.word	0x40023800
 80050cc:	00f42400 	.word	0x00f42400
 80050d0:	007a1200 	.word	0x007a1200

080050d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d8:	4b03      	ldr	r3, [pc, #12]	; (80050e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80050da:	681b      	ldr	r3, [r3, #0]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	20000040 	.word	0x20000040

080050ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050f0:	f7ff fff0 	bl	80050d4 <HAL_RCC_GetHCLKFreq>
 80050f4:	4601      	mov	r1, r0
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <HAL_RCC_GetPCLK1Freq+0x20>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	0a9b      	lsrs	r3, r3, #10
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	4a03      	ldr	r2, [pc, #12]	; (8005110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005102:	5cd3      	ldrb	r3, [r2, r3]
 8005104:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005108:	4618      	mov	r0, r3
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40023800 	.word	0x40023800
 8005110:	0800ed00 	.word	0x0800ed00

08005114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005118:	f7ff ffdc 	bl	80050d4 <HAL_RCC_GetHCLKFreq>
 800511c:	4601      	mov	r1, r0
 800511e:	4b05      	ldr	r3, [pc, #20]	; (8005134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	0b5b      	lsrs	r3, r3, #13
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	4a03      	ldr	r2, [pc, #12]	; (8005138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800512a:	5cd3      	ldrb	r3, [r2, r3]
 800512c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005130:	4618      	mov	r0, r3
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40023800 	.word	0x40023800
 8005138:	0800ed00 	.word	0x0800ed00

0800513c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d105      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005160:	2b00      	cmp	r3, #0
 8005162:	d035      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005164:	4b62      	ldr	r3, [pc, #392]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800516a:	f7fb ff53 	bl	8001014 <HAL_GetTick>
 800516e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005170:	e008      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005172:	f7fb ff4f 	bl	8001014 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e0b0      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005184:	4b5b      	ldr	r3, [pc, #364]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1f0      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	019a      	lsls	r2, r3, #6
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	071b      	lsls	r3, r3, #28
 800519c:	4955      	ldr	r1, [pc, #340]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051a4:	4b52      	ldr	r3, [pc, #328]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051aa:	f7fb ff33 	bl	8001014 <HAL_GetTick>
 80051ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051b0:	e008      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051b2:	f7fb ff2f 	bl	8001014 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e090      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051c4:	4b4b      	ldr	r3, [pc, #300]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0f0      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 8083 	beq.w	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	4b44      	ldr	r3, [pc, #272]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	4a43      	ldr	r2, [pc, #268]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ec:	6413      	str	r3, [r2, #64]	; 0x40
 80051ee:	4b41      	ldr	r3, [pc, #260]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051fa:	4b3f      	ldr	r3, [pc, #252]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a3e      	ldr	r2, [pc, #248]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005204:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005206:	f7fb ff05 	bl	8001014 <HAL_GetTick>
 800520a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800520c:	e008      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800520e:	f7fb ff01 	bl	8001014 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e062      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005220:	4b35      	ldr	r3, [pc, #212]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0f0      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800522c:	4b31      	ldr	r3, [pc, #196]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005234:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d02f      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	429a      	cmp	r2, r3
 8005248:	d028      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800524a:	4b2a      	ldr	r3, [pc, #168]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005252:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005254:	4b29      	ldr	r3, [pc, #164]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005256:	2201      	movs	r2, #1
 8005258:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800525a:	4b28      	ldr	r3, [pc, #160]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005260:	4a24      	ldr	r2, [pc, #144]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005266:	4b23      	ldr	r3, [pc, #140]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b01      	cmp	r3, #1
 8005270:	d114      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005272:	f7fb fecf 	bl	8001014 <HAL_GetTick>
 8005276:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005278:	e00a      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800527a:	f7fb fecb 	bl	8001014 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	f241 3288 	movw	r2, #5000	; 0x1388
 8005288:	4293      	cmp	r3, r2
 800528a:	d901      	bls.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e02a      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005290:	4b18      	ldr	r3, [pc, #96]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0ee      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a8:	d10d      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80052aa:	4b12      	ldr	r3, [pc, #72]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052be:	490d      	ldr	r1, [pc, #52]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	608b      	str	r3, [r1, #8]
 80052c4:	e005      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	4a0a      	ldr	r2, [pc, #40]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052d0:	6093      	str	r3, [r2, #8]
 80052d2:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052de:	4905      	ldr	r1, [pc, #20]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	42470068 	.word	0x42470068
 80052f4:	40023800 	.word	0x40023800
 80052f8:	40007000 	.word	0x40007000
 80052fc:	42470e40 	.word	0x42470e40

08005300 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e083      	b.n	800541a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	7f5b      	ldrb	r3, [r3, #29]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d105      	bne.n	8005328 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f007 f9a6 	bl	800c674 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	22ca      	movs	r2, #202	; 0xca
 8005334:	625a      	str	r2, [r3, #36]	; 0x24
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2253      	movs	r2, #83	; 0x53
 800533c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f897 	bl	8005472 <RTC_EnterInitMode>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	22ff      	movs	r2, #255	; 0xff
 8005350:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2204      	movs	r2, #4
 8005356:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e05e      	b.n	800541a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800536a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800536e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6899      	ldr	r1, [r3, #8]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	68d2      	ldr	r2, [r2, #12]
 8005396:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6919      	ldr	r1, [r3, #16]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	041a      	lsls	r2, r3, #16
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053ba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10e      	bne.n	80053e8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f829 	bl	8005422 <HAL_RTC_WaitForSynchro>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	22ff      	movs	r2, #255	; 0xff
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2204      	movs	r2, #4
 80053e2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e018      	b.n	800541a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053f6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699a      	ldr	r2, [r3, #24]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	22ff      	movs	r2, #255	; 0xff
 8005410:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005418:	2300      	movs	r3, #0
  }
}
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800543c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800543e:	f7fb fde9 	bl	8001014 <HAL_GetTick>
 8005442:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005444:	e009      	b.n	800545a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005446:	f7fb fde5 	bl	8001014 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005454:	d901      	bls.n	800545a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e007      	b.n	800546a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0ee      	beq.n	8005446 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b084      	sub	sp, #16
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d119      	bne.n	80054c0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005494:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005496:	f7fb fdbd 	bl	8001014 <HAL_GetTick>
 800549a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800549c:	e009      	b.n	80054b2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800549e:	f7fb fdb9 	bl	8001014 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ac:	d901      	bls.n	80054b2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e007      	b.n	80054c2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0ee      	beq.n	800549e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b082      	sub	sp, #8
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e056      	b.n	800558a <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f007 f8d2 	bl	800c6a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005512:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	ea42 0103 	orr.w	r1, r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	f003 0104 	and.w	r1, r3, #4
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69da      	ldr	r2, [r3, #28]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005578:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b088      	sub	sp, #32
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	603b      	str	r3, [r7, #0]
 800559e:	4613      	mov	r3, r2
 80055a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_SPI_Transmit+0x22>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e11e      	b.n	80057f2 <HAL_SPI_Transmit+0x260>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055bc:	f7fb fd2a 	bl	8001014 <HAL_GetTick>
 80055c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d002      	beq.n	80055d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055d2:	2302      	movs	r3, #2
 80055d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055d6:	e103      	b.n	80057e0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <HAL_SPI_Transmit+0x52>
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d102      	bne.n	80055ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055e8:	e0fa      	b.n	80057e0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2203      	movs	r2, #3
 80055ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	88fa      	ldrh	r2, [r7, #6]
 8005602:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	88fa      	ldrh	r2, [r7, #6]
 8005608:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005630:	d107      	bne.n	8005642 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005640:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564c:	2b40      	cmp	r3, #64	; 0x40
 800564e:	d007      	beq.n	8005660 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800565e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005668:	d14b      	bne.n	8005702 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_SPI_Transmit+0xe6>
 8005672:	8afb      	ldrh	r3, [r7, #22]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d13e      	bne.n	80056f6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567c:	881a      	ldrh	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	1c9a      	adds	r2, r3, #2
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800569c:	e02b      	b.n	80056f6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d112      	bne.n	80056d2 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	881a      	ldrh	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	1c9a      	adds	r2, r3, #2
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80056d0:	e011      	b.n	80056f6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d2:	f7fb fc9f 	bl	8001014 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d803      	bhi.n	80056ea <HAL_SPI_Transmit+0x158>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056e8:	d102      	bne.n	80056f0 <HAL_SPI_Transmit+0x15e>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d102      	bne.n	80056f6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056f4:	e074      	b.n	80057e0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1ce      	bne.n	800569e <HAL_SPI_Transmit+0x10c>
 8005700:	e04c      	b.n	800579c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <HAL_SPI_Transmit+0x17e>
 800570a:	8afb      	ldrh	r3, [r7, #22]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d140      	bne.n	8005792 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	330c      	adds	r3, #12
 800571a:	7812      	ldrb	r2, [r2, #0]
 800571c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005736:	e02c      	b.n	8005792 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b02      	cmp	r3, #2
 8005744:	d113      	bne.n	800576e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	330c      	adds	r3, #12
 8005750:	7812      	ldrb	r2, [r2, #0]
 8005752:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	86da      	strh	r2, [r3, #54]	; 0x36
 800576c:	e011      	b.n	8005792 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800576e:	f7fb fc51 	bl	8001014 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d803      	bhi.n	8005786 <HAL_SPI_Transmit+0x1f4>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005784:	d102      	bne.n	800578c <HAL_SPI_Transmit+0x1fa>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d102      	bne.n	8005792 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005790:	e026      	b.n	80057e0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1cd      	bne.n	8005738 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 fcc3 	bl	800612c <SPI_EndRxTxTransaction>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057ba:	2300      	movs	r3, #0
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	77fb      	strb	r3, [r7, #31]
 80057dc:	e000      	b.n	80057e0 <HAL_SPI_Transmit+0x24e>
  }

error:
 80057de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3720      	adds	r7, #32
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b088      	sub	sp, #32
 80057fe:	af02      	add	r7, sp, #8
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	603b      	str	r3, [r7, #0]
 8005806:	4613      	mov	r3, r2
 8005808:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005816:	d112      	bne.n	800583e <HAL_SPI_Receive+0x44>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10e      	bne.n	800583e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2204      	movs	r2, #4
 8005824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005828:	88fa      	ldrh	r2, [r7, #6]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	4613      	mov	r3, r2
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	68b9      	ldr	r1, [r7, #8]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f8e9 	bl	8005a0c <HAL_SPI_TransmitReceive>
 800583a:	4603      	mov	r3, r0
 800583c:	e0e2      	b.n	8005a04 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_SPI_Receive+0x52>
 8005848:	2302      	movs	r3, #2
 800584a:	e0db      	b.n	8005a04 <HAL_SPI_Receive+0x20a>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005854:	f7fb fbde 	bl	8001014 <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b01      	cmp	r3, #1
 8005864:	d002      	beq.n	800586c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005866:	2302      	movs	r3, #2
 8005868:	75fb      	strb	r3, [r7, #23]
    goto error;
 800586a:	e0c2      	b.n	80059f2 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_SPI_Receive+0x7e>
 8005872:	88fb      	ldrh	r3, [r7, #6]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d102      	bne.n	800587e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800587c:	e0b9      	b.n	80059f2 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2204      	movs	r2, #4
 8005882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	88fa      	ldrh	r2, [r7, #6]
 8005896:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	88fa      	ldrh	r2, [r7, #6]
 800589c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c4:	d107      	bne.n	80058d6 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e0:	2b40      	cmp	r3, #64	; 0x40
 80058e2:	d007      	beq.n	80058f4 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d162      	bne.n	80059c2 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058fc:	e02e      	b.n	800595c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b01      	cmp	r3, #1
 800590a:	d115      	bne.n	8005938 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f103 020c 	add.w	r2, r3, #12
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	7812      	ldrb	r2, [r2, #0]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005936:	e011      	b.n	800595c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005938:	f7fb fb6c 	bl	8001014 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d803      	bhi.n	8005950 <HAL_SPI_Receive+0x156>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800594e:	d102      	bne.n	8005956 <HAL_SPI_Receive+0x15c>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	75fb      	strb	r3, [r7, #23]
          goto error;
 800595a:	e04a      	b.n	80059f2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1cb      	bne.n	80058fe <HAL_SPI_Receive+0x104>
 8005966:	e031      	b.n	80059cc <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b01      	cmp	r3, #1
 8005974:	d113      	bne.n	800599e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	b292      	uxth	r2, r2
 8005982:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	1c9a      	adds	r2, r3, #2
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800599c:	e011      	b.n	80059c2 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800599e:	f7fb fb39 	bl	8001014 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d803      	bhi.n	80059b6 <HAL_SPI_Receive+0x1bc>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059b4:	d102      	bne.n	80059bc <HAL_SPI_Receive+0x1c2>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d102      	bne.n	80059c2 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059c0:	e017      	b.n	80059f2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1cd      	bne.n	8005968 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 fb45 	bl	8006060 <SPI_EndRxTransaction>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2220      	movs	r2, #32
 80059e0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	75fb      	strb	r3, [r7, #23]
 80059ee:	e000      	b.n	80059f2 <HAL_SPI_Receive+0x1f8>
  }

error :
 80059f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08c      	sub	sp, #48	; 0x30
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_SPI_TransmitReceive+0x26>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e18a      	b.n	8005d48 <HAL_SPI_TransmitReceive+0x33c>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a3a:	f7fb faeb 	bl	8001014 <HAL_GetTick>
 8005a3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a50:	887b      	ldrh	r3, [r7, #2]
 8005a52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d00f      	beq.n	8005a7c <HAL_SPI_TransmitReceive+0x70>
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a62:	d107      	bne.n	8005a74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d103      	bne.n	8005a74 <HAL_SPI_TransmitReceive+0x68>
 8005a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d003      	beq.n	8005a7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a74:	2302      	movs	r3, #2
 8005a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a7a:	e15b      	b.n	8005d34 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d005      	beq.n	8005a8e <HAL_SPI_TransmitReceive+0x82>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_SPI_TransmitReceive+0x82>
 8005a88:	887b      	ldrh	r3, [r7, #2]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d103      	bne.n	8005a96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a94:	e14e      	b.n	8005d34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d003      	beq.n	8005aaa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2205      	movs	r2, #5
 8005aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	887a      	ldrh	r2, [r7, #2]
 8005aba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	887a      	ldrh	r2, [r7, #2]
 8005ac0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	887a      	ldrh	r2, [r7, #2]
 8005acc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	887a      	ldrh	r2, [r7, #2]
 8005ad2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aea:	2b40      	cmp	r3, #64	; 0x40
 8005aec:	d007      	beq.n	8005afe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005afc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b06:	d178      	bne.n	8005bfa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_SPI_TransmitReceive+0x10a>
 8005b10:	8b7b      	ldrh	r3, [r7, #26]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d166      	bne.n	8005be4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	881a      	ldrh	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b26:	1c9a      	adds	r2, r3, #2
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b3a:	e053      	b.n	8005be4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d11b      	bne.n	8005b82 <HAL_SPI_TransmitReceive+0x176>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d016      	beq.n	8005b82 <HAL_SPI_TransmitReceive+0x176>
 8005b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d113      	bne.n	8005b82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	881a      	ldrh	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	1c9a      	adds	r2, r3, #2
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d119      	bne.n	8005bc4 <HAL_SPI_TransmitReceive+0x1b8>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d014      	beq.n	8005bc4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	b292      	uxth	r2, r2
 8005ba6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bac:	1c9a      	adds	r2, r3, #2
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bc4:	f7fb fa26 	bl	8001014 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d807      	bhi.n	8005be4 <HAL_SPI_TransmitReceive+0x1d8>
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bda:	d003      	beq.n	8005be4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005be2:	e0a7      	b.n	8005d34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1a6      	bne.n	8005b3c <HAL_SPI_TransmitReceive+0x130>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1a1      	bne.n	8005b3c <HAL_SPI_TransmitReceive+0x130>
 8005bf8:	e07c      	b.n	8005cf4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <HAL_SPI_TransmitReceive+0x1fc>
 8005c02:	8b7b      	ldrh	r3, [r7, #26]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d16b      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	330c      	adds	r3, #12
 8005c12:	7812      	ldrb	r2, [r2, #0]
 8005c14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c2e:	e057      	b.n	8005ce0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d11c      	bne.n	8005c78 <HAL_SPI_TransmitReceive+0x26c>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d017      	beq.n	8005c78 <HAL_SPI_TransmitReceive+0x26c>
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d114      	bne.n	8005c78 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	7812      	ldrb	r2, [r2, #0]
 8005c5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d119      	bne.n	8005cba <HAL_SPI_TransmitReceive+0x2ae>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d014      	beq.n	8005cba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cba:	f7fb f9ab 	bl	8001014 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d803      	bhi.n	8005cd2 <HAL_SPI_TransmitReceive+0x2c6>
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cd0:	d102      	bne.n	8005cd8 <HAL_SPI_TransmitReceive+0x2cc>
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d103      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005cde:	e029      	b.n	8005d34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1a2      	bne.n	8005c30 <HAL_SPI_TransmitReceive+0x224>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d19d      	bne.n	8005c30 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 fa17 	bl	800612c <SPI_EndRxTxTransaction>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d006      	beq.n	8005d12 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d10:	e010      	b.n	8005d34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10b      	bne.n	8005d32 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	617b      	str	r3, [r7, #20]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	e000      	b.n	8005d34 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3730      	adds	r7, #48	; 0x30
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	099b      	lsrs	r3, r3, #6
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10f      	bne.n	8005d94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	099b      	lsrs	r3, r3, #6
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d004      	beq.n	8005d94 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
    return;
 8005d92:	e0d8      	b.n	8005f46 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00a      	beq.n	8005db6 <HAL_SPI_IRQHandler+0x66>
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	09db      	lsrs	r3, r3, #7
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	4798      	blx	r3
    return;
 8005db4:	e0c7      	b.n	8005f46 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	095b      	lsrs	r3, r3, #5
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10c      	bne.n	8005ddc <HAL_SPI_IRQHandler+0x8c>
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	099b      	lsrs	r3, r3, #6
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	0a1b      	lsrs	r3, r3, #8
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 80b5 	beq.w	8005f46 <HAL_SPI_IRQHandler+0x1f6>
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 80ae 	beq.w	8005f46 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	099b      	lsrs	r3, r3, #6
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d023      	beq.n	8005e3e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d011      	beq.n	8005e26 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e06:	f043 0204 	orr.w	r2, r3, #4
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e0e:	2300      	movs	r3, #0
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	e00b      	b.n	8005e3e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e26:	2300      	movs	r3, #0
 8005e28:	613b      	str	r3, [r7, #16]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	693b      	ldr	r3, [r7, #16]
        return;
 8005e3c:	e083      	b.n	8005f46 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	095b      	lsrs	r3, r3, #5
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d014      	beq.n	8005e74 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4e:	f043 0201 	orr.w	r2, r3, #1
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	0a1b      	lsrs	r3, r3, #8
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00c      	beq.n	8005e9a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e84:	f043 0208 	orr.w	r2, r3, #8
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60bb      	str	r3, [r7, #8]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	60bb      	str	r3, [r7, #8]
 8005e98:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d050      	beq.n	8005f44 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005eb0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d104      	bne.n	8005ece <HAL_SPI_IRQHandler+0x17e>
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d034      	beq.n	8005f38 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0203 	bic.w	r2, r2, #3
 8005edc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d011      	beq.n	8005f0a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eea:	4a18      	ldr	r2, [pc, #96]	; (8005f4c <HAL_SPI_IRQHandler+0x1fc>)
 8005eec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fc ff66 	bl	8002dc4 <HAL_DMA_Abort_IT>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d016      	beq.n	8005f40 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f16:	4a0d      	ldr	r2, [pc, #52]	; (8005f4c <HAL_SPI_IRQHandler+0x1fc>)
 8005f18:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fc ff50 	bl	8002dc4 <HAL_DMA_Abort_IT>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005f36:	e003      	b.n	8005f40 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f809 	bl	8005f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f3e:	e000      	b.n	8005f42 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005f40:	bf00      	nop
    return;
 8005f42:	bf00      	nop
 8005f44:	bf00      	nop
  }
}
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	08005f65 	.word	0x08005f65

08005f50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7ff ffe6 	bl	8005f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f9c:	e04c      	b.n	8006038 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fa4:	d048      	beq.n	8006038 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005fa6:	f7fb f835 	bl	8001014 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d902      	bls.n	8005fbc <SPI_WaitFlagStateUntilTimeout+0x30>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d13d      	bne.n	8006038 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fd4:	d111      	bne.n	8005ffa <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fde:	d004      	beq.n	8005fea <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe8:	d107      	bne.n	8005ffa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ff8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006002:	d10f      	bne.n	8006024 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006022:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e00f      	b.n	8006058 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	4013      	ands	r3, r2
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	429a      	cmp	r2, r3
 8006046:	bf0c      	ite	eq
 8006048:	2301      	moveq	r3, #1
 800604a:	2300      	movne	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	461a      	mov	r2, r3
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	429a      	cmp	r2, r3
 8006054:	d1a3      	bne.n	8005f9e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af02      	add	r7, sp, #8
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006074:	d111      	bne.n	800609a <SPI_EndRxTransaction+0x3a>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800607e:	d004      	beq.n	800608a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006088:	d107      	bne.n	800609a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006098:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060a2:	d12a      	bne.n	80060fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ac:	d012      	beq.n	80060d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2200      	movs	r2, #0
 80060b6:	2180      	movs	r1, #128	; 0x80
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff ff67 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d02d      	beq.n	8006120 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c8:	f043 0220 	orr.w	r2, r3, #32
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e026      	b.n	8006122 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2200      	movs	r2, #0
 80060dc:	2101      	movs	r1, #1
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f7ff ff54 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01a      	beq.n	8006120 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ee:	f043 0220 	orr.w	r2, r3, #32
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e013      	b.n	8006122 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2200      	movs	r2, #0
 8006102:	2101      	movs	r1, #1
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7ff ff41 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006114:	f043 0220 	orr.w	r2, r3, #32
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e000      	b.n	8006122 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af02      	add	r7, sp, #8
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006138:	4b1b      	ldr	r3, [pc, #108]	; (80061a8 <SPI_EndRxTxTransaction+0x7c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a1b      	ldr	r2, [pc, #108]	; (80061ac <SPI_EndRxTxTransaction+0x80>)
 800613e:	fba2 2303 	umull	r2, r3, r2, r3
 8006142:	0d5b      	lsrs	r3, r3, #21
 8006144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006148:	fb02 f303 	mul.w	r3, r2, r3
 800614c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006156:	d112      	bne.n	800617e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2200      	movs	r2, #0
 8006160:	2180      	movs	r1, #128	; 0x80
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff ff12 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d016      	beq.n	800619c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006172:	f043 0220 	orr.w	r2, r3, #32
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e00f      	b.n	800619e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00a      	beq.n	800619a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	3b01      	subs	r3, #1
 8006188:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006194:	2b80      	cmp	r3, #128	; 0x80
 8006196:	d0f2      	beq.n	800617e <SPI_EndRxTxTransaction+0x52>
 8006198:	e000      	b.n	800619c <SPI_EndRxTxTransaction+0x70>
        break;
 800619a:	bf00      	nop
  }

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000040 	.word	0x20000040
 80061ac:	165e9f81 	.word	0x165e9f81

080061b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e01d      	b.n	80061fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d106      	bne.n	80061dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f006 fab2 	bl	800c740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f000 fd6a 	bl	8006cc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006206:	b480      	push	{r7}
 8006208:	b085      	sub	sp, #20
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2202      	movs	r2, #2
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b06      	cmp	r3, #6
 8006226:	d007      	beq.n	8006238 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b082      	sub	sp, #8
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e01d      	b.n	800629c <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d106      	bne.n	800627a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f815 	bl	80062a4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2202      	movs	r2, #2
 800627e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3304      	adds	r3, #4
 800628a:	4619      	mov	r1, r3
 800628c:	4610      	mov	r0, r2
 800628e:	f000 fd1b 	bl	8006cc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2201      	movs	r2, #1
 80062c8:	6839      	ldr	r1, [r7, #0]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 ffe6 	bl	800729c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a15      	ldr	r2, [pc, #84]	; (800632c <HAL_TIM_OC_Start+0x74>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d004      	beq.n	80062e4 <HAL_TIM_OC_Start+0x2c>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a14      	ldr	r2, [pc, #80]	; (8006330 <HAL_TIM_OC_Start+0x78>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d101      	bne.n	80062e8 <HAL_TIM_OC_Start+0x30>
 80062e4:	2301      	movs	r3, #1
 80062e6:	e000      	b.n	80062ea <HAL_TIM_OC_Start+0x32>
 80062e8:	2300      	movs	r3, #0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d007      	beq.n	80062fe <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b06      	cmp	r3, #6
 800630e:	d007      	beq.n	8006320 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	40010000 	.word	0x40010000
 8006330:	40010400 	.word	0x40010400

08006334 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e01d      	b.n	8006382 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f815 	bl	800638a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f000 fca8 	bl	8006cc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2201      	movs	r2, #1
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 ff72 	bl	800729c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a15      	ldr	r2, [pc, #84]	; (8006414 <HAL_TIM_PWM_Start+0x74>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d004      	beq.n	80063cc <HAL_TIM_PWM_Start+0x2c>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a14      	ldr	r2, [pc, #80]	; (8006418 <HAL_TIM_PWM_Start+0x78>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d101      	bne.n	80063d0 <HAL_TIM_PWM_Start+0x30>
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <HAL_TIM_PWM_Start+0x32>
 80063d0:	2300      	movs	r3, #0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d007      	beq.n	80063e6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f003 0307 	and.w	r3, r3, #7
 80063f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2b06      	cmp	r3, #6
 80063f6:	d007      	beq.n	8006408 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0201 	orr.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	40010000 	.word	0x40010000
 8006418:	40010400 	.word	0x40010400

0800641c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b0c      	cmp	r3, #12
 800642a:	d841      	bhi.n	80064b0 <HAL_TIM_IC_Start_IT+0x94>
 800642c:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <HAL_TIM_IC_Start_IT+0x18>)
 800642e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006432:	bf00      	nop
 8006434:	08006469 	.word	0x08006469
 8006438:	080064b1 	.word	0x080064b1
 800643c:	080064b1 	.word	0x080064b1
 8006440:	080064b1 	.word	0x080064b1
 8006444:	0800647b 	.word	0x0800647b
 8006448:	080064b1 	.word	0x080064b1
 800644c:	080064b1 	.word	0x080064b1
 8006450:	080064b1 	.word	0x080064b1
 8006454:	0800648d 	.word	0x0800648d
 8006458:	080064b1 	.word	0x080064b1
 800645c:	080064b1 	.word	0x080064b1
 8006460:	080064b1 	.word	0x080064b1
 8006464:	0800649f 	.word	0x0800649f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0202 	orr.w	r2, r2, #2
 8006476:	60da      	str	r2, [r3, #12]
      break;
 8006478:	e01b      	b.n	80064b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0204 	orr.w	r2, r2, #4
 8006488:	60da      	str	r2, [r3, #12]
      break;
 800648a:	e012      	b.n	80064b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0208 	orr.w	r2, r2, #8
 800649a:	60da      	str	r2, [r3, #12]
      break;
 800649c:	e009      	b.n	80064b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f042 0210 	orr.w	r2, r2, #16
 80064ac:	60da      	str	r2, [r3, #12]
      break;
 80064ae:	e000      	b.n	80064b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80064b0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2201      	movs	r2, #1
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 feee 	bl	800729c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b06      	cmp	r3, #6
 80064d0:	d007      	beq.n	80064e2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0201 	orr.w	r2, r2, #1
 80064e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e083      	b.n	8006608 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	d106      	bne.n	800651a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f006 f9a3 	bl	800c860 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2202      	movs	r2, #2
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6812      	ldr	r2, [r2, #0]
 800652c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006530:	f023 0307 	bic.w	r3, r3, #7
 8006534:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3304      	adds	r3, #4
 800653e:	4619      	mov	r1, r3
 8006540:	4610      	mov	r0, r2
 8006542:	f000 fbc1 	bl	8006cc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656e:	f023 0303 	bic.w	r3, r3, #3
 8006572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	4313      	orrs	r3, r2
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800658c:	f023 030c 	bic.w	r3, r3, #12
 8006590:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006598:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800659c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	021b      	lsls	r3, r3, #8
 80065a8:	4313      	orrs	r3, r2
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	011a      	lsls	r2, r3, #4
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	031b      	lsls	r3, r3, #12
 80065bc:	4313      	orrs	r3, r2
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80065ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80065d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	4313      	orrs	r3, r2
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <HAL_TIM_Encoder_Start_IT+0x16>
 8006620:	2b04      	cmp	r3, #4
 8006622:	d010      	beq.n	8006646 <HAL_TIM_Encoder_Start_IT+0x36>
 8006624:	e01f      	b.n	8006666 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2201      	movs	r2, #1
 800662c:	2100      	movs	r1, #0
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fe34 	bl	800729c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0202 	orr.w	r2, r2, #2
 8006642:	60da      	str	r2, [r3, #12]
      break;
 8006644:	e02e      	b.n	80066a4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2201      	movs	r2, #1
 800664c:	2104      	movs	r1, #4
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fe24 	bl	800729c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0204 	orr.w	r2, r2, #4
 8006662:	60da      	str	r2, [r3, #12]
      break;
 8006664:	e01e      	b.n	80066a4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2201      	movs	r2, #1
 800666c:	2100      	movs	r1, #0
 800666e:	4618      	mov	r0, r3
 8006670:	f000 fe14 	bl	800729c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2201      	movs	r2, #1
 800667a:	2104      	movs	r1, #4
 800667c:	4618      	mov	r0, r3
 800667e:	f000 fe0d 	bl	800729c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f042 0202 	orr.w	r2, r2, #2
 8006690:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f042 0204 	orr.w	r2, r2, #4
 80066a0:	60da      	str	r2, [r3, #12]
      break;
 80066a2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0201 	orr.w	r2, r2, #1
 80066b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d122      	bne.n	800671a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d11b      	bne.n	800671a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f06f 0202 	mvn.w	r2, #2
 80066ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	f003 0303 	and.w	r3, r3, #3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f004 fc23 	bl	800af4c <HAL_TIM_IC_CaptureCallback>
 8006706:	e005      	b.n	8006714 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f004 f81b 	bl	800a744 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fac5 	bl	8006c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b04      	cmp	r3, #4
 8006726:	d122      	bne.n	800676e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f003 0304 	and.w	r3, r3, #4
 8006732:	2b04      	cmp	r3, #4
 8006734:	d11b      	bne.n	800676e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f06f 0204 	mvn.w	r2, #4
 800673e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f004 fbf9 	bl	800af4c <HAL_TIM_IC_CaptureCallback>
 800675a:	e005      	b.n	8006768 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f003 fff1 	bl	800a744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fa9b 	bl	8006c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	f003 0308 	and.w	r3, r3, #8
 8006778:	2b08      	cmp	r3, #8
 800677a:	d122      	bne.n	80067c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b08      	cmp	r3, #8
 8006788:	d11b      	bne.n	80067c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f06f 0208 	mvn.w	r2, #8
 8006792:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2204      	movs	r2, #4
 8006798:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	f003 0303 	and.w	r3, r3, #3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f004 fbcf 	bl	800af4c <HAL_TIM_IC_CaptureCallback>
 80067ae:	e005      	b.n	80067bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f003 ffc7 	bl	800a744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fa71 	bl	8006c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	f003 0310 	and.w	r3, r3, #16
 80067cc:	2b10      	cmp	r3, #16
 80067ce:	d122      	bne.n	8006816 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f003 0310 	and.w	r3, r3, #16
 80067da:	2b10      	cmp	r3, #16
 80067dc:	d11b      	bne.n	8006816 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f06f 0210 	mvn.w	r2, #16
 80067e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2208      	movs	r2, #8
 80067ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f004 fba5 	bl	800af4c <HAL_TIM_IC_CaptureCallback>
 8006802:	e005      	b.n	8006810 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f003 ff9d 	bl	800a744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fa47 	bl	8006c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b01      	cmp	r3, #1
 8006822:	d10e      	bne.n	8006842 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b01      	cmp	r3, #1
 8006830:	d107      	bne.n	8006842 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f06f 0201 	mvn.w	r2, #1
 800683a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fa24 	bl	8006c8a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684c:	2b80      	cmp	r3, #128	; 0x80
 800684e:	d10e      	bne.n	800686e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685a:	2b80      	cmp	r3, #128	; 0x80
 800685c:	d107      	bne.n	800686e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fe3f 	bl	80074ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006878:	2b40      	cmp	r3, #64	; 0x40
 800687a:	d10e      	bne.n	800689a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	d107      	bne.n	800689a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fa0c 	bl	8006cb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	f003 0320 	and.w	r3, r3, #32
 80068a4:	2b20      	cmp	r3, #32
 80068a6:	d10e      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f003 0320 	and.w	r3, r3, #32
 80068b2:	2b20      	cmp	r3, #32
 80068b4:	d107      	bne.n	80068c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f06f 0220 	mvn.w	r2, #32
 80068be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fe09 	bl	80074d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068c6:	bf00      	nop
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <HAL_TIM_OC_ConfigChannel+0x1a>
 80068e6:	2302      	movs	r3, #2
 80068e8:	e04e      	b.n	8006988 <HAL_TIM_OC_ConfigChannel+0xb8>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2202      	movs	r2, #2
 80068f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b0c      	cmp	r3, #12
 80068fe:	d839      	bhi.n	8006974 <HAL_TIM_OC_ConfigChannel+0xa4>
 8006900:	a201      	add	r2, pc, #4	; (adr r2, 8006908 <HAL_TIM_OC_ConfigChannel+0x38>)
 8006902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006906:	bf00      	nop
 8006908:	0800693d 	.word	0x0800693d
 800690c:	08006975 	.word	0x08006975
 8006910:	08006975 	.word	0x08006975
 8006914:	08006975 	.word	0x08006975
 8006918:	0800694b 	.word	0x0800694b
 800691c:	08006975 	.word	0x08006975
 8006920:	08006975 	.word	0x08006975
 8006924:	08006975 	.word	0x08006975
 8006928:	08006959 	.word	0x08006959
 800692c:	08006975 	.word	0x08006975
 8006930:	08006975 	.word	0x08006975
 8006934:	08006975 	.word	0x08006975
 8006938:	08006967 	.word	0x08006967
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fa60 	bl	8006e08 <TIM_OC1_SetConfig>
      break;
 8006948:	e015      	b.n	8006976 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68b9      	ldr	r1, [r7, #8]
 8006950:	4618      	mov	r0, r3
 8006952:	f000 fac9 	bl	8006ee8 <TIM_OC2_SetConfig>
      break;
 8006956:	e00e      	b.n	8006976 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fb38 	bl	8006fd4 <TIM_OC3_SetConfig>
      break;
 8006964:	e007      	b.n	8006976 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68b9      	ldr	r1, [r7, #8]
 800696c:	4618      	mov	r0, r3
 800696e:	f000 fba5 	bl	80070bc <TIM_OC4_SetConfig>
      break;
 8006972:	e000      	b.n	8006976 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006974:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80069a6:	2302      	movs	r3, #2
 80069a8:	e0b4      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x184>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2202      	movs	r2, #2
 80069b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b0c      	cmp	r3, #12
 80069be:	f200 809f 	bhi.w	8006b00 <HAL_TIM_PWM_ConfigChannel+0x170>
 80069c2:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80069c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c8:	080069fd 	.word	0x080069fd
 80069cc:	08006b01 	.word	0x08006b01
 80069d0:	08006b01 	.word	0x08006b01
 80069d4:	08006b01 	.word	0x08006b01
 80069d8:	08006a3d 	.word	0x08006a3d
 80069dc:	08006b01 	.word	0x08006b01
 80069e0:	08006b01 	.word	0x08006b01
 80069e4:	08006b01 	.word	0x08006b01
 80069e8:	08006a7f 	.word	0x08006a7f
 80069ec:	08006b01 	.word	0x08006b01
 80069f0:	08006b01 	.word	0x08006b01
 80069f4:	08006b01 	.word	0x08006b01
 80069f8:	08006abf 	.word	0x08006abf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68b9      	ldr	r1, [r7, #8]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fa00 	bl	8006e08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699a      	ldr	r2, [r3, #24]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0208 	orr.w	r2, r2, #8
 8006a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699a      	ldr	r2, [r3, #24]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0204 	bic.w	r2, r2, #4
 8006a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6999      	ldr	r1, [r3, #24]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	691a      	ldr	r2, [r3, #16]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	619a      	str	r2, [r3, #24]
      break;
 8006a3a:	e062      	b.n	8006b02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fa50 	bl	8006ee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699a      	ldr	r2, [r3, #24]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6999      	ldr	r1, [r3, #24]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	021a      	lsls	r2, r3, #8
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	619a      	str	r2, [r3, #24]
      break;
 8006a7c:	e041      	b.n	8006b02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68b9      	ldr	r1, [r7, #8]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 faa5 	bl	8006fd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69da      	ldr	r2, [r3, #28]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f042 0208 	orr.w	r2, r2, #8
 8006a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0204 	bic.w	r2, r2, #4
 8006aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69d9      	ldr	r1, [r3, #28]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	61da      	str	r2, [r3, #28]
      break;
 8006abc:	e021      	b.n	8006b02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68b9      	ldr	r1, [r7, #8]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 faf9 	bl	80070bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69d9      	ldr	r1, [r3, #28]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	021a      	lsls	r2, r3, #8
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	61da      	str	r2, [r3, #28]
      break;
 8006afe:	e000      	b.n	8006b02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006b00:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d101      	bne.n	8006b34 <HAL_TIM_ConfigClockSource+0x18>
 8006b30:	2302      	movs	r3, #2
 8006b32:	e0a6      	b.n	8006c82 <HAL_TIM_ConfigClockSource+0x166>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b40      	cmp	r3, #64	; 0x40
 8006b6a:	d067      	beq.n	8006c3c <HAL_TIM_ConfigClockSource+0x120>
 8006b6c:	2b40      	cmp	r3, #64	; 0x40
 8006b6e:	d80b      	bhi.n	8006b88 <HAL_TIM_ConfigClockSource+0x6c>
 8006b70:	2b10      	cmp	r3, #16
 8006b72:	d073      	beq.n	8006c5c <HAL_TIM_ConfigClockSource+0x140>
 8006b74:	2b10      	cmp	r3, #16
 8006b76:	d802      	bhi.n	8006b7e <HAL_TIM_ConfigClockSource+0x62>
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d06f      	beq.n	8006c5c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006b7c:	e078      	b.n	8006c70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006b7e:	2b20      	cmp	r3, #32
 8006b80:	d06c      	beq.n	8006c5c <HAL_TIM_ConfigClockSource+0x140>
 8006b82:	2b30      	cmp	r3, #48	; 0x30
 8006b84:	d06a      	beq.n	8006c5c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006b86:	e073      	b.n	8006c70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006b88:	2b70      	cmp	r3, #112	; 0x70
 8006b8a:	d00d      	beq.n	8006ba8 <HAL_TIM_ConfigClockSource+0x8c>
 8006b8c:	2b70      	cmp	r3, #112	; 0x70
 8006b8e:	d804      	bhi.n	8006b9a <HAL_TIM_ConfigClockSource+0x7e>
 8006b90:	2b50      	cmp	r3, #80	; 0x50
 8006b92:	d033      	beq.n	8006bfc <HAL_TIM_ConfigClockSource+0xe0>
 8006b94:	2b60      	cmp	r3, #96	; 0x60
 8006b96:	d041      	beq.n	8006c1c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006b98:	e06a      	b.n	8006c70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b9e:	d066      	beq.n	8006c6e <HAL_TIM_ConfigClockSource+0x152>
 8006ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba4:	d017      	beq.n	8006bd6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006ba6:	e063      	b.n	8006c70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6818      	ldr	r0, [r3, #0]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	6899      	ldr	r1, [r3, #8]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f000 fb50 	bl	800725c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	609a      	str	r2, [r3, #8]
      break;
 8006bd4:	e04c      	b.n	8006c70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6818      	ldr	r0, [r3, #0]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	6899      	ldr	r1, [r3, #8]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f000 fb39 	bl	800725c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bf8:	609a      	str	r2, [r3, #8]
      break;
 8006bfa:	e039      	b.n	8006c70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	6859      	ldr	r1, [r3, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	f000 faad 	bl	8007168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2150      	movs	r1, #80	; 0x50
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fb06 	bl	8007226 <TIM_ITRx_SetConfig>
      break;
 8006c1a:	e029      	b.n	8006c70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6818      	ldr	r0, [r3, #0]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	6859      	ldr	r1, [r3, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	f000 facc 	bl	80071c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2160      	movs	r1, #96	; 0x60
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 faf6 	bl	8007226 <TIM_ITRx_SetConfig>
      break;
 8006c3a:	e019      	b.n	8006c70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	6859      	ldr	r1, [r3, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f000 fa8d 	bl	8007168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2140      	movs	r1, #64	; 0x40
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 fae6 	bl	8007226 <TIM_ITRx_SetConfig>
      break;
 8006c5a:	e009      	b.n	8006c70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4619      	mov	r1, r3
 8006c66:	4610      	mov	r0, r2
 8006c68:	f000 fadd 	bl	8007226 <TIM_ITRx_SetConfig>
      break;
 8006c6c:	e000      	b.n	8006c70 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006c6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c92:	bf00      	nop
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b083      	sub	sp, #12
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ca6:	bf00      	nop
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cba:	bf00      	nop
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
	...

08006cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a40      	ldr	r2, [pc, #256]	; (8006ddc <TIM_Base_SetConfig+0x114>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d013      	beq.n	8006d08 <TIM_Base_SetConfig+0x40>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce6:	d00f      	beq.n	8006d08 <TIM_Base_SetConfig+0x40>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a3d      	ldr	r2, [pc, #244]	; (8006de0 <TIM_Base_SetConfig+0x118>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00b      	beq.n	8006d08 <TIM_Base_SetConfig+0x40>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a3c      	ldr	r2, [pc, #240]	; (8006de4 <TIM_Base_SetConfig+0x11c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d007      	beq.n	8006d08 <TIM_Base_SetConfig+0x40>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a3b      	ldr	r2, [pc, #236]	; (8006de8 <TIM_Base_SetConfig+0x120>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d003      	beq.n	8006d08 <TIM_Base_SetConfig+0x40>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a3a      	ldr	r2, [pc, #232]	; (8006dec <TIM_Base_SetConfig+0x124>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d108      	bne.n	8006d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a2f      	ldr	r2, [pc, #188]	; (8006ddc <TIM_Base_SetConfig+0x114>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d02b      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d28:	d027      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a2c      	ldr	r2, [pc, #176]	; (8006de0 <TIM_Base_SetConfig+0x118>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d023      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a2b      	ldr	r2, [pc, #172]	; (8006de4 <TIM_Base_SetConfig+0x11c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d01f      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a2a      	ldr	r2, [pc, #168]	; (8006de8 <TIM_Base_SetConfig+0x120>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d01b      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a29      	ldr	r2, [pc, #164]	; (8006dec <TIM_Base_SetConfig+0x124>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d017      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a28      	ldr	r2, [pc, #160]	; (8006df0 <TIM_Base_SetConfig+0x128>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d013      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a27      	ldr	r2, [pc, #156]	; (8006df4 <TIM_Base_SetConfig+0x12c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d00f      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a26      	ldr	r2, [pc, #152]	; (8006df8 <TIM_Base_SetConfig+0x130>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00b      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a25      	ldr	r2, [pc, #148]	; (8006dfc <TIM_Base_SetConfig+0x134>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d007      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a24      	ldr	r2, [pc, #144]	; (8006e00 <TIM_Base_SetConfig+0x138>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d003      	beq.n	8006d7a <TIM_Base_SetConfig+0xb2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a23      	ldr	r2, [pc, #140]	; (8006e04 <TIM_Base_SetConfig+0x13c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d108      	bne.n	8006d8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a0a      	ldr	r2, [pc, #40]	; (8006ddc <TIM_Base_SetConfig+0x114>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d003      	beq.n	8006dc0 <TIM_Base_SetConfig+0xf8>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a0c      	ldr	r2, [pc, #48]	; (8006dec <TIM_Base_SetConfig+0x124>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d103      	bne.n	8006dc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	691a      	ldr	r2, [r3, #16]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	615a      	str	r2, [r3, #20]
}
 8006dce:	bf00      	nop
 8006dd0:	3714      	adds	r7, #20
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	40010000 	.word	0x40010000
 8006de0:	40000400 	.word	0x40000400
 8006de4:	40000800 	.word	0x40000800
 8006de8:	40000c00 	.word	0x40000c00
 8006dec:	40010400 	.word	0x40010400
 8006df0:	40014000 	.word	0x40014000
 8006df4:	40014400 	.word	0x40014400
 8006df8:	40014800 	.word	0x40014800
 8006dfc:	40001800 	.word	0x40001800
 8006e00:	40001c00 	.word	0x40001c00
 8006e04:	40002000 	.word	0x40002000

08006e08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	f023 0201 	bic.w	r2, r3, #1
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0303 	bic.w	r3, r3, #3
 8006e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f023 0302 	bic.w	r3, r3, #2
 8006e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a20      	ldr	r2, [pc, #128]	; (8006ee0 <TIM_OC1_SetConfig+0xd8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d003      	beq.n	8006e6c <TIM_OC1_SetConfig+0x64>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a1f      	ldr	r2, [pc, #124]	; (8006ee4 <TIM_OC1_SetConfig+0xdc>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d10c      	bne.n	8006e86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f023 0308 	bic.w	r3, r3, #8
 8006e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f023 0304 	bic.w	r3, r3, #4
 8006e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a15      	ldr	r2, [pc, #84]	; (8006ee0 <TIM_OC1_SetConfig+0xd8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d003      	beq.n	8006e96 <TIM_OC1_SetConfig+0x8e>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a14      	ldr	r2, [pc, #80]	; (8006ee4 <TIM_OC1_SetConfig+0xdc>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d111      	bne.n	8006eba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	621a      	str	r2, [r3, #32]
}
 8006ed4:	bf00      	nop
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	40010000 	.word	0x40010000
 8006ee4:	40010400 	.word	0x40010400

08006ee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	f023 0210 	bic.w	r2, r3, #16
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	021b      	lsls	r3, r3, #8
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f023 0320 	bic.w	r3, r3, #32
 8006f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a22      	ldr	r2, [pc, #136]	; (8006fcc <TIM_OC2_SetConfig+0xe4>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d003      	beq.n	8006f50 <TIM_OC2_SetConfig+0x68>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a21      	ldr	r2, [pc, #132]	; (8006fd0 <TIM_OC2_SetConfig+0xe8>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d10d      	bne.n	8006f6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a17      	ldr	r2, [pc, #92]	; (8006fcc <TIM_OC2_SetConfig+0xe4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d003      	beq.n	8006f7c <TIM_OC2_SetConfig+0x94>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a16      	ldr	r2, [pc, #88]	; (8006fd0 <TIM_OC2_SetConfig+0xe8>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d113      	bne.n	8006fa4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	621a      	str	r2, [r3, #32]
}
 8006fbe:	bf00      	nop
 8006fc0:	371c      	adds	r7, #28
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40010400 	.word	0x40010400

08006fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0303 	bic.w	r3, r3, #3
 800700a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800701c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	021b      	lsls	r3, r3, #8
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	4313      	orrs	r3, r2
 8007028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a21      	ldr	r2, [pc, #132]	; (80070b4 <TIM_OC3_SetConfig+0xe0>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d003      	beq.n	800703a <TIM_OC3_SetConfig+0x66>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a20      	ldr	r2, [pc, #128]	; (80070b8 <TIM_OC3_SetConfig+0xe4>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d10d      	bne.n	8007056 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	021b      	lsls	r3, r3, #8
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a16      	ldr	r2, [pc, #88]	; (80070b4 <TIM_OC3_SetConfig+0xe0>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d003      	beq.n	8007066 <TIM_OC3_SetConfig+0x92>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a15      	ldr	r2, [pc, #84]	; (80070b8 <TIM_OC3_SetConfig+0xe4>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d113      	bne.n	800708e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800706c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4313      	orrs	r3, r2
 8007080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	621a      	str	r2, [r3, #32]
}
 80070a8:	bf00      	nop
 80070aa:	371c      	adds	r7, #28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	40010000 	.word	0x40010000
 80070b8:	40010400 	.word	0x40010400

080070bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	021b      	lsls	r3, r3, #8
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	031b      	lsls	r3, r3, #12
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	4313      	orrs	r3, r2
 8007112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a12      	ldr	r2, [pc, #72]	; (8007160 <TIM_OC4_SetConfig+0xa4>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d003      	beq.n	8007124 <TIM_OC4_SetConfig+0x68>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a11      	ldr	r2, [pc, #68]	; (8007164 <TIM_OC4_SetConfig+0xa8>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d109      	bne.n	8007138 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800712a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	019b      	lsls	r3, r3, #6
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	4313      	orrs	r3, r2
 8007136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	621a      	str	r2, [r3, #32]
}
 8007152:	bf00      	nop
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	40010000 	.word	0x40010000
 8007164:	40010400 	.word	0x40010400

08007168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	f023 0201 	bic.w	r2, r3, #1
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	011b      	lsls	r3, r3, #4
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	4313      	orrs	r3, r2
 800719c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f023 030a 	bic.w	r3, r3, #10
 80071a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	621a      	str	r2, [r3, #32]
}
 80071ba:	bf00      	nop
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b087      	sub	sp, #28
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	f023 0210 	bic.w	r2, r3, #16
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	031b      	lsls	r3, r3, #12
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007202:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	4313      	orrs	r3, r2
 800720c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	621a      	str	r2, [r3, #32]
}
 800721a:	bf00      	nop
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007226:	b480      	push	{r7}
 8007228:	b085      	sub	sp, #20
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4313      	orrs	r3, r2
 8007244:	f043 0307 	orr.w	r3, r3, #7
 8007248:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	609a      	str	r2, [r3, #8]
}
 8007250:	bf00      	nop
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007276:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	021a      	lsls	r2, r3, #8
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	431a      	orrs	r2, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	4313      	orrs	r3, r2
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	4313      	orrs	r3, r2
 8007288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	609a      	str	r2, [r3, #8]
}
 8007290:	bf00      	nop
 8007292:	371c      	adds	r7, #28
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	f003 031f 	and.w	r3, r3, #31
 80072ae:	2201      	movs	r2, #1
 80072b0:	fa02 f303 	lsl.w	r3, r2, r3
 80072b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a1a      	ldr	r2, [r3, #32]
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	43db      	mvns	r3, r3
 80072be:	401a      	ands	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a1a      	ldr	r2, [r3, #32]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	fa01 f303 	lsl.w	r3, r1, r3
 80072d4:	431a      	orrs	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	621a      	str	r2, [r3, #32]
}
 80072da:	bf00      	nop
 80072dc:	371c      	adds	r7, #28
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2204      	movs	r2, #4
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 f901 	bl	8007500 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800730c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f003 0307 	and.w	r3, r3, #7
 8007318:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b06      	cmp	r3, #6
 800731e:	d007      	beq.n	8007330 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0201 	orr.w	r2, r2, #1
 800732e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800734c:	2b01      	cmp	r3, #1
 800734e:	d101      	bne.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007350:	2302      	movs	r3, #2
 8007352:	e05a      	b.n	800740a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800737a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a21      	ldr	r2, [pc, #132]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d022      	beq.n	80073de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a0:	d01d      	beq.n	80073de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a1d      	ldr	r2, [pc, #116]	; (800741c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d018      	beq.n	80073de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a1b      	ldr	r2, [pc, #108]	; (8007420 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d013      	beq.n	80073de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a1a      	ldr	r2, [pc, #104]	; (8007424 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d00e      	beq.n	80073de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a18      	ldr	r2, [pc, #96]	; (8007428 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d009      	beq.n	80073de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a17      	ldr	r2, [pc, #92]	; (800742c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d004      	beq.n	80073de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a15      	ldr	r2, [pc, #84]	; (8007430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d10c      	bne.n	80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	40010000 	.word	0x40010000
 800741c:	40000400 	.word	0x40000400
 8007420:	40000800 	.word	0x40000800
 8007424:	40000c00 	.word	0x40000c00
 8007428:	40010400 	.word	0x40010400
 800742c:	40014000 	.word	0x40014000
 8007430:	40001800 	.word	0x40001800

08007434 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800744c:	2302      	movs	r3, #2
 800744e:	e03d      	b.n	80074cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	4313      	orrs	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	4313      	orrs	r3, r2
 8007480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f003 031f 	and.w	r3, r3, #31
 8007512:	2204      	movs	r2, #4
 8007514:	fa02 f303 	lsl.w	r3, r2, r3
 8007518:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6a1a      	ldr	r2, [r3, #32]
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	43db      	mvns	r3, r3
 8007522:	401a      	ands	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a1a      	ldr	r2, [r3, #32]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f003 031f 	and.w	r3, r3, #31
 8007532:	6879      	ldr	r1, [r7, #4]
 8007534:	fa01 f303 	lsl.w	r3, r1, r3
 8007538:	431a      	orrs	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	621a      	str	r2, [r3, #32]
}
 800753e:	bf00      	nop
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b082      	sub	sp, #8
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e03f      	b.n	80075dc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d106      	bne.n	8007576 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f005 fa3d 	bl	800c9f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2224      	movs	r2, #36	; 0x24
 800757a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68da      	ldr	r2, [r3, #12]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800758c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fabe 	bl	8007b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691a      	ldr	r2, [r3, #16]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695a      	ldr	r2, [r3, #20]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68da      	ldr	r2, [r3, #12]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2220      	movs	r2, #32
 80075d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	4613      	mov	r3, r2
 80075f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b20      	cmp	r3, #32
 80075fc:	d140      	bne.n	8007680 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <HAL_UART_Receive_IT+0x26>
 8007604:	88fb      	ldrh	r3, [r7, #6]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e039      	b.n	8007682 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_UART_Receive_IT+0x38>
 8007618:	2302      	movs	r3, #2
 800761a:	e032      	b.n	8007682 <HAL_UART_Receive_IT+0x9e>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	88fa      	ldrh	r2, [r7, #6]
 800762e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	88fa      	ldrh	r2, [r7, #6]
 8007634:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2222      	movs	r2, #34	; 0x22
 8007640:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800765a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	695a      	ldr	r2, [r3, #20]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0201 	orr.w	r2, r2, #1
 800766a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f042 0220 	orr.w	r2, r2, #32
 800767a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	e000      	b.n	8007682 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007680:	2302      	movs	r3, #2
  }
}
 8007682:	4618      	mov	r0, r3
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
	...

08007690 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b088      	sub	sp, #32
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	f003 030f 	and.w	r3, r3, #15
 80076be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10d      	bne.n	80076e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	f003 0320 	and.w	r3, r3, #32
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d008      	beq.n	80076e2 <HAL_UART_IRQHandler+0x52>
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	f003 0320 	and.w	r3, r3, #32
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d003      	beq.n	80076e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f996 	bl	8007a0c <UART_Receive_IT>
      return;
 80076e0:	e0d1      	b.n	8007886 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 80b0 	beq.w	800784a <HAL_UART_IRQHandler+0x1ba>
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d105      	bne.n	8007700 <HAL_UART_IRQHandler+0x70>
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 80a5 	beq.w	800784a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <HAL_UART_IRQHandler+0x90>
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007710:	2b00      	cmp	r3, #0
 8007712:	d005      	beq.n	8007720 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007718:	f043 0201 	orr.w	r2, r3, #1
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	f003 0304 	and.w	r3, r3, #4
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <HAL_UART_IRQHandler+0xb0>
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	d005      	beq.n	8007740 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007738:	f043 0202 	orr.w	r2, r3, #2
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <HAL_UART_IRQHandler+0xd0>
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d005      	beq.n	8007760 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007758:	f043 0204 	orr.w	r2, r3, #4
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	f003 0308 	and.w	r3, r3, #8
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00f      	beq.n	800778a <HAL_UART_IRQHandler+0xfa>
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	f003 0320 	and.w	r3, r3, #32
 8007770:	2b00      	cmp	r3, #0
 8007772:	d104      	bne.n	800777e <HAL_UART_IRQHandler+0xee>
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b00      	cmp	r3, #0
 800777c:	d005      	beq.n	800778a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007782:	f043 0208 	orr.w	r2, r3, #8
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778e:	2b00      	cmp	r3, #0
 8007790:	d078      	beq.n	8007884 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	f003 0320 	and.w	r3, r3, #32
 8007798:	2b00      	cmp	r3, #0
 800779a:	d007      	beq.n	80077ac <HAL_UART_IRQHandler+0x11c>
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f930 	bl	8007a0c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b6:	2b40      	cmp	r3, #64	; 0x40
 80077b8:	bf0c      	ite	eq
 80077ba:	2301      	moveq	r3, #1
 80077bc:	2300      	movne	r3, #0
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d102      	bne.n	80077d4 <HAL_UART_IRQHandler+0x144>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d031      	beq.n	8007838 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f879 	bl	80078cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e4:	2b40      	cmp	r3, #64	; 0x40
 80077e6:	d123      	bne.n	8007830 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	695a      	ldr	r2, [r3, #20]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077f6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d013      	beq.n	8007828 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007804:	4a21      	ldr	r2, [pc, #132]	; (800788c <HAL_UART_IRQHandler+0x1fc>)
 8007806:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780c:	4618      	mov	r0, r3
 800780e:	f7fb fad9 	bl	8002dc4 <HAL_DMA_Abort_IT>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d016      	beq.n	8007846 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007822:	4610      	mov	r0, r2
 8007824:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007826:	e00e      	b.n	8007846 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f845 	bl	80078b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800782e:	e00a      	b.n	8007846 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f841 	bl	80078b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007836:	e006      	b.n	8007846 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f83d 	bl	80078b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007844:	e01e      	b.n	8007884 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007846:	bf00      	nop
    return;
 8007848:	e01c      	b.n	8007884 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007850:	2b00      	cmp	r3, #0
 8007852:	d008      	beq.n	8007866 <HAL_UART_IRQHandler+0x1d6>
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f866 	bl	8007930 <UART_Transmit_IT>
    return;
 8007864:	e00f      	b.n	8007886 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00a      	beq.n	8007886 <HAL_UART_IRQHandler+0x1f6>
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007876:	2b00      	cmp	r3, #0
 8007878:	d005      	beq.n	8007886 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f8ae 	bl	80079dc <UART_EndTransmit_IT>
    return;
 8007880:	bf00      	nop
 8007882:	e000      	b.n	8007886 <HAL_UART_IRQHandler+0x1f6>
    return;
 8007884:	bf00      	nop
  }
}
 8007886:	3720      	adds	r7, #32
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	08007909 	.word	0x08007909

08007890 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68da      	ldr	r2, [r3, #12]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80078e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	695a      	ldr	r2, [r3, #20]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 0201 	bic.w	r2, r2, #1
 80078f2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007914:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f7ff ffc8 	bl	80078b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007928:	bf00      	nop
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b21      	cmp	r3, #33	; 0x21
 8007942:	d144      	bne.n	80079ce <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794c:	d11a      	bne.n	8007984 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	461a      	mov	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007962:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d105      	bne.n	8007978 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	1c9a      	adds	r2, r3, #2
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	621a      	str	r2, [r3, #32]
 8007976:	e00e      	b.n	8007996 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	621a      	str	r2, [r3, #32]
 8007982:	e008      	b.n	8007996 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	1c59      	adds	r1, r3, #1
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	6211      	str	r1, [r2, #32]
 800798e:	781a      	ldrb	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800799a:	b29b      	uxth	r3, r3
 800799c:	3b01      	subs	r3, #1
 800799e:	b29b      	uxth	r3, r3
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	4619      	mov	r1, r3
 80079a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10f      	bne.n	80079ca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	e000      	b.n	80079d0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80079ce:	2302      	movs	r3, #2
  }
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68da      	ldr	r2, [r3, #12]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2220      	movs	r2, #32
 80079f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff ff47 	bl	8007890 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b22      	cmp	r3, #34	; 0x22
 8007a1e:	d171      	bne.n	8007b04 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a28:	d123      	bne.n	8007a72 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10e      	bne.n	8007a56 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4e:	1c9a      	adds	r2, r3, #2
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	629a      	str	r2, [r3, #40]	; 0x28
 8007a54:	e029      	b.n	8007aaa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	629a      	str	r2, [r3, #40]	; 0x28
 8007a70:	e01b      	b.n	8007aaa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10a      	bne.n	8007a90 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6858      	ldr	r0, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a84:	1c59      	adds	r1, r3, #1
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	6291      	str	r1, [r2, #40]	; 0x28
 8007a8a:	b2c2      	uxtb	r2, r0
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	e00c      	b.n	8007aaa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9c:	1c58      	adds	r0, r3, #1
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	6288      	str	r0, [r1, #40]	; 0x28
 8007aa2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007aa6:	b2d2      	uxtb	r2, r2
 8007aa8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d120      	bne.n	8007b00 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 0220 	bic.w	r2, r2, #32
 8007acc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68da      	ldr	r2, [r3, #12]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007adc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	695a      	ldr	r2, [r3, #20]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0201 	bic.w	r2, r2, #1
 8007aec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2220      	movs	r2, #32
 8007af2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff fed4 	bl	80078a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	e002      	b.n	8007b06 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	e000      	b.n	8007b06 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007b04:	2302      	movs	r3, #2
  }
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
	...

08007b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	b085      	sub	sp, #20
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68da      	ldr	r2, [r3, #12]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	69db      	ldr	r3, [r3, #28]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007b52:	f023 030c 	bic.w	r3, r3, #12
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6812      	ldr	r2, [r2, #0]
 8007b5a:	68f9      	ldr	r1, [r7, #12]
 8007b5c:	430b      	orrs	r3, r1
 8007b5e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699a      	ldr	r2, [r3, #24]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b7e:	f040 818b 	bne.w	8007e98 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4ac1      	ldr	r2, [pc, #772]	; (8007e8c <UART_SetConfig+0x37c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d005      	beq.n	8007b98 <UART_SetConfig+0x88>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4abf      	ldr	r2, [pc, #764]	; (8007e90 <UART_SetConfig+0x380>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	f040 80bd 	bne.w	8007d12 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b98:	f7fd fabc 	bl	8005114 <HAL_RCC_GetPCLK2Freq>
 8007b9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	461d      	mov	r5, r3
 8007ba2:	f04f 0600 	mov.w	r6, #0
 8007ba6:	46a8      	mov	r8, r5
 8007ba8:	46b1      	mov	r9, r6
 8007baa:	eb18 0308 	adds.w	r3, r8, r8
 8007bae:	eb49 0409 	adc.w	r4, r9, r9
 8007bb2:	4698      	mov	r8, r3
 8007bb4:	46a1      	mov	r9, r4
 8007bb6:	eb18 0805 	adds.w	r8, r8, r5
 8007bba:	eb49 0906 	adc.w	r9, r9, r6
 8007bbe:	f04f 0100 	mov.w	r1, #0
 8007bc2:	f04f 0200 	mov.w	r2, #0
 8007bc6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007bca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007bce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007bd2:	4688      	mov	r8, r1
 8007bd4:	4691      	mov	r9, r2
 8007bd6:	eb18 0005 	adds.w	r0, r8, r5
 8007bda:	eb49 0106 	adc.w	r1, r9, r6
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	461d      	mov	r5, r3
 8007be4:	f04f 0600 	mov.w	r6, #0
 8007be8:	196b      	adds	r3, r5, r5
 8007bea:	eb46 0406 	adc.w	r4, r6, r6
 8007bee:	461a      	mov	r2, r3
 8007bf0:	4623      	mov	r3, r4
 8007bf2:	f7f9 f829 	bl	8000c48 <__aeabi_uldivmod>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4ba5      	ldr	r3, [pc, #660]	; (8007e94 <UART_SetConfig+0x384>)
 8007bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8007c02:	095b      	lsrs	r3, r3, #5
 8007c04:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	461d      	mov	r5, r3
 8007c0c:	f04f 0600 	mov.w	r6, #0
 8007c10:	46a9      	mov	r9, r5
 8007c12:	46b2      	mov	sl, r6
 8007c14:	eb19 0309 	adds.w	r3, r9, r9
 8007c18:	eb4a 040a 	adc.w	r4, sl, sl
 8007c1c:	4699      	mov	r9, r3
 8007c1e:	46a2      	mov	sl, r4
 8007c20:	eb19 0905 	adds.w	r9, r9, r5
 8007c24:	eb4a 0a06 	adc.w	sl, sl, r6
 8007c28:	f04f 0100 	mov.w	r1, #0
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c3c:	4689      	mov	r9, r1
 8007c3e:	4692      	mov	sl, r2
 8007c40:	eb19 0005 	adds.w	r0, r9, r5
 8007c44:	eb4a 0106 	adc.w	r1, sl, r6
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	461d      	mov	r5, r3
 8007c4e:	f04f 0600 	mov.w	r6, #0
 8007c52:	196b      	adds	r3, r5, r5
 8007c54:	eb46 0406 	adc.w	r4, r6, r6
 8007c58:	461a      	mov	r2, r3
 8007c5a:	4623      	mov	r3, r4
 8007c5c:	f7f8 fff4 	bl	8000c48 <__aeabi_uldivmod>
 8007c60:	4603      	mov	r3, r0
 8007c62:	460c      	mov	r4, r1
 8007c64:	461a      	mov	r2, r3
 8007c66:	4b8b      	ldr	r3, [pc, #556]	; (8007e94 <UART_SetConfig+0x384>)
 8007c68:	fba3 1302 	umull	r1, r3, r3, r2
 8007c6c:	095b      	lsrs	r3, r3, #5
 8007c6e:	2164      	movs	r1, #100	; 0x64
 8007c70:	fb01 f303 	mul.w	r3, r1, r3
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	3332      	adds	r3, #50	; 0x32
 8007c7a:	4a86      	ldr	r2, [pc, #536]	; (8007e94 <UART_SetConfig+0x384>)
 8007c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c80:	095b      	lsrs	r3, r3, #5
 8007c82:	005b      	lsls	r3, r3, #1
 8007c84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c88:	4498      	add	r8, r3
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	461d      	mov	r5, r3
 8007c8e:	f04f 0600 	mov.w	r6, #0
 8007c92:	46a9      	mov	r9, r5
 8007c94:	46b2      	mov	sl, r6
 8007c96:	eb19 0309 	adds.w	r3, r9, r9
 8007c9a:	eb4a 040a 	adc.w	r4, sl, sl
 8007c9e:	4699      	mov	r9, r3
 8007ca0:	46a2      	mov	sl, r4
 8007ca2:	eb19 0905 	adds.w	r9, r9, r5
 8007ca6:	eb4a 0a06 	adc.w	sl, sl, r6
 8007caa:	f04f 0100 	mov.w	r1, #0
 8007cae:	f04f 0200 	mov.w	r2, #0
 8007cb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cbe:	4689      	mov	r9, r1
 8007cc0:	4692      	mov	sl, r2
 8007cc2:	eb19 0005 	adds.w	r0, r9, r5
 8007cc6:	eb4a 0106 	adc.w	r1, sl, r6
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	461d      	mov	r5, r3
 8007cd0:	f04f 0600 	mov.w	r6, #0
 8007cd4:	196b      	adds	r3, r5, r5
 8007cd6:	eb46 0406 	adc.w	r4, r6, r6
 8007cda:	461a      	mov	r2, r3
 8007cdc:	4623      	mov	r3, r4
 8007cde:	f7f8 ffb3 	bl	8000c48 <__aeabi_uldivmod>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	4b6a      	ldr	r3, [pc, #424]	; (8007e94 <UART_SetConfig+0x384>)
 8007cea:	fba3 1302 	umull	r1, r3, r3, r2
 8007cee:	095b      	lsrs	r3, r3, #5
 8007cf0:	2164      	movs	r1, #100	; 0x64
 8007cf2:	fb01 f303 	mul.w	r3, r1, r3
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	00db      	lsls	r3, r3, #3
 8007cfa:	3332      	adds	r3, #50	; 0x32
 8007cfc:	4a65      	ldr	r2, [pc, #404]	; (8007e94 <UART_SetConfig+0x384>)
 8007cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007d02:	095b      	lsrs	r3, r3, #5
 8007d04:	f003 0207 	and.w	r2, r3, #7
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4442      	add	r2, r8
 8007d0e:	609a      	str	r2, [r3, #8]
 8007d10:	e26f      	b.n	80081f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d12:	f7fd f9eb 	bl	80050ec <HAL_RCC_GetPCLK1Freq>
 8007d16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	461d      	mov	r5, r3
 8007d1c:	f04f 0600 	mov.w	r6, #0
 8007d20:	46a8      	mov	r8, r5
 8007d22:	46b1      	mov	r9, r6
 8007d24:	eb18 0308 	adds.w	r3, r8, r8
 8007d28:	eb49 0409 	adc.w	r4, r9, r9
 8007d2c:	4698      	mov	r8, r3
 8007d2e:	46a1      	mov	r9, r4
 8007d30:	eb18 0805 	adds.w	r8, r8, r5
 8007d34:	eb49 0906 	adc.w	r9, r9, r6
 8007d38:	f04f 0100 	mov.w	r1, #0
 8007d3c:	f04f 0200 	mov.w	r2, #0
 8007d40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d4c:	4688      	mov	r8, r1
 8007d4e:	4691      	mov	r9, r2
 8007d50:	eb18 0005 	adds.w	r0, r8, r5
 8007d54:	eb49 0106 	adc.w	r1, r9, r6
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	461d      	mov	r5, r3
 8007d5e:	f04f 0600 	mov.w	r6, #0
 8007d62:	196b      	adds	r3, r5, r5
 8007d64:	eb46 0406 	adc.w	r4, r6, r6
 8007d68:	461a      	mov	r2, r3
 8007d6a:	4623      	mov	r3, r4
 8007d6c:	f7f8 ff6c 	bl	8000c48 <__aeabi_uldivmod>
 8007d70:	4603      	mov	r3, r0
 8007d72:	460c      	mov	r4, r1
 8007d74:	461a      	mov	r2, r3
 8007d76:	4b47      	ldr	r3, [pc, #284]	; (8007e94 <UART_SetConfig+0x384>)
 8007d78:	fba3 2302 	umull	r2, r3, r3, r2
 8007d7c:	095b      	lsrs	r3, r3, #5
 8007d7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	461d      	mov	r5, r3
 8007d86:	f04f 0600 	mov.w	r6, #0
 8007d8a:	46a9      	mov	r9, r5
 8007d8c:	46b2      	mov	sl, r6
 8007d8e:	eb19 0309 	adds.w	r3, r9, r9
 8007d92:	eb4a 040a 	adc.w	r4, sl, sl
 8007d96:	4699      	mov	r9, r3
 8007d98:	46a2      	mov	sl, r4
 8007d9a:	eb19 0905 	adds.w	r9, r9, r5
 8007d9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007da2:	f04f 0100 	mov.w	r1, #0
 8007da6:	f04f 0200 	mov.w	r2, #0
 8007daa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007db2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007db6:	4689      	mov	r9, r1
 8007db8:	4692      	mov	sl, r2
 8007dba:	eb19 0005 	adds.w	r0, r9, r5
 8007dbe:	eb4a 0106 	adc.w	r1, sl, r6
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	461d      	mov	r5, r3
 8007dc8:	f04f 0600 	mov.w	r6, #0
 8007dcc:	196b      	adds	r3, r5, r5
 8007dce:	eb46 0406 	adc.w	r4, r6, r6
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	4623      	mov	r3, r4
 8007dd6:	f7f8 ff37 	bl	8000c48 <__aeabi_uldivmod>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	460c      	mov	r4, r1
 8007dde:	461a      	mov	r2, r3
 8007de0:	4b2c      	ldr	r3, [pc, #176]	; (8007e94 <UART_SetConfig+0x384>)
 8007de2:	fba3 1302 	umull	r1, r3, r3, r2
 8007de6:	095b      	lsrs	r3, r3, #5
 8007de8:	2164      	movs	r1, #100	; 0x64
 8007dea:	fb01 f303 	mul.w	r3, r1, r3
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	3332      	adds	r3, #50	; 0x32
 8007df4:	4a27      	ldr	r2, [pc, #156]	; (8007e94 <UART_SetConfig+0x384>)
 8007df6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfa:	095b      	lsrs	r3, r3, #5
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e02:	4498      	add	r8, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	461d      	mov	r5, r3
 8007e08:	f04f 0600 	mov.w	r6, #0
 8007e0c:	46a9      	mov	r9, r5
 8007e0e:	46b2      	mov	sl, r6
 8007e10:	eb19 0309 	adds.w	r3, r9, r9
 8007e14:	eb4a 040a 	adc.w	r4, sl, sl
 8007e18:	4699      	mov	r9, r3
 8007e1a:	46a2      	mov	sl, r4
 8007e1c:	eb19 0905 	adds.w	r9, r9, r5
 8007e20:	eb4a 0a06 	adc.w	sl, sl, r6
 8007e24:	f04f 0100 	mov.w	r1, #0
 8007e28:	f04f 0200 	mov.w	r2, #0
 8007e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e38:	4689      	mov	r9, r1
 8007e3a:	4692      	mov	sl, r2
 8007e3c:	eb19 0005 	adds.w	r0, r9, r5
 8007e40:	eb4a 0106 	adc.w	r1, sl, r6
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	461d      	mov	r5, r3
 8007e4a:	f04f 0600 	mov.w	r6, #0
 8007e4e:	196b      	adds	r3, r5, r5
 8007e50:	eb46 0406 	adc.w	r4, r6, r6
 8007e54:	461a      	mov	r2, r3
 8007e56:	4623      	mov	r3, r4
 8007e58:	f7f8 fef6 	bl	8000c48 <__aeabi_uldivmod>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	460c      	mov	r4, r1
 8007e60:	461a      	mov	r2, r3
 8007e62:	4b0c      	ldr	r3, [pc, #48]	; (8007e94 <UART_SetConfig+0x384>)
 8007e64:	fba3 1302 	umull	r1, r3, r3, r2
 8007e68:	095b      	lsrs	r3, r3, #5
 8007e6a:	2164      	movs	r1, #100	; 0x64
 8007e6c:	fb01 f303 	mul.w	r3, r1, r3
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	3332      	adds	r3, #50	; 0x32
 8007e76:	4a07      	ldr	r2, [pc, #28]	; (8007e94 <UART_SetConfig+0x384>)
 8007e78:	fba2 2303 	umull	r2, r3, r2, r3
 8007e7c:	095b      	lsrs	r3, r3, #5
 8007e7e:	f003 0207 	and.w	r2, r3, #7
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4442      	add	r2, r8
 8007e88:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007e8a:	e1b2      	b.n	80081f2 <UART_SetConfig+0x6e2>
 8007e8c:	40011000 	.word	0x40011000
 8007e90:	40011400 	.word	0x40011400
 8007e94:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4ad7      	ldr	r2, [pc, #860]	; (80081fc <UART_SetConfig+0x6ec>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d005      	beq.n	8007eae <UART_SetConfig+0x39e>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4ad6      	ldr	r2, [pc, #856]	; (8008200 <UART_SetConfig+0x6f0>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	f040 80d1 	bne.w	8008050 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007eae:	f7fd f931 	bl	8005114 <HAL_RCC_GetPCLK2Freq>
 8007eb2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	469a      	mov	sl, r3
 8007eb8:	f04f 0b00 	mov.w	fp, #0
 8007ebc:	46d0      	mov	r8, sl
 8007ebe:	46d9      	mov	r9, fp
 8007ec0:	eb18 0308 	adds.w	r3, r8, r8
 8007ec4:	eb49 0409 	adc.w	r4, r9, r9
 8007ec8:	4698      	mov	r8, r3
 8007eca:	46a1      	mov	r9, r4
 8007ecc:	eb18 080a 	adds.w	r8, r8, sl
 8007ed0:	eb49 090b 	adc.w	r9, r9, fp
 8007ed4:	f04f 0100 	mov.w	r1, #0
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ee0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ee4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ee8:	4688      	mov	r8, r1
 8007eea:	4691      	mov	r9, r2
 8007eec:	eb1a 0508 	adds.w	r5, sl, r8
 8007ef0:	eb4b 0609 	adc.w	r6, fp, r9
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	f04f 0200 	mov.w	r2, #0
 8007efe:	f04f 0300 	mov.w	r3, #0
 8007f02:	f04f 0400 	mov.w	r4, #0
 8007f06:	0094      	lsls	r4, r2, #2
 8007f08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f0c:	008b      	lsls	r3, r1, #2
 8007f0e:	461a      	mov	r2, r3
 8007f10:	4623      	mov	r3, r4
 8007f12:	4628      	mov	r0, r5
 8007f14:	4631      	mov	r1, r6
 8007f16:	f7f8 fe97 	bl	8000c48 <__aeabi_uldivmod>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	460c      	mov	r4, r1
 8007f1e:	461a      	mov	r2, r3
 8007f20:	4bb8      	ldr	r3, [pc, #736]	; (8008204 <UART_SetConfig+0x6f4>)
 8007f22:	fba3 2302 	umull	r2, r3, r3, r2
 8007f26:	095b      	lsrs	r3, r3, #5
 8007f28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	469b      	mov	fp, r3
 8007f30:	f04f 0c00 	mov.w	ip, #0
 8007f34:	46d9      	mov	r9, fp
 8007f36:	46e2      	mov	sl, ip
 8007f38:	eb19 0309 	adds.w	r3, r9, r9
 8007f3c:	eb4a 040a 	adc.w	r4, sl, sl
 8007f40:	4699      	mov	r9, r3
 8007f42:	46a2      	mov	sl, r4
 8007f44:	eb19 090b 	adds.w	r9, r9, fp
 8007f48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f4c:	f04f 0100 	mov.w	r1, #0
 8007f50:	f04f 0200 	mov.w	r2, #0
 8007f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f60:	4689      	mov	r9, r1
 8007f62:	4692      	mov	sl, r2
 8007f64:	eb1b 0509 	adds.w	r5, fp, r9
 8007f68:	eb4c 060a 	adc.w	r6, ip, sl
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	4619      	mov	r1, r3
 8007f72:	f04f 0200 	mov.w	r2, #0
 8007f76:	f04f 0300 	mov.w	r3, #0
 8007f7a:	f04f 0400 	mov.w	r4, #0
 8007f7e:	0094      	lsls	r4, r2, #2
 8007f80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f84:	008b      	lsls	r3, r1, #2
 8007f86:	461a      	mov	r2, r3
 8007f88:	4623      	mov	r3, r4
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	4631      	mov	r1, r6
 8007f8e:	f7f8 fe5b 	bl	8000c48 <__aeabi_uldivmod>
 8007f92:	4603      	mov	r3, r0
 8007f94:	460c      	mov	r4, r1
 8007f96:	461a      	mov	r2, r3
 8007f98:	4b9a      	ldr	r3, [pc, #616]	; (8008204 <UART_SetConfig+0x6f4>)
 8007f9a:	fba3 1302 	umull	r1, r3, r3, r2
 8007f9e:	095b      	lsrs	r3, r3, #5
 8007fa0:	2164      	movs	r1, #100	; 0x64
 8007fa2:	fb01 f303 	mul.w	r3, r1, r3
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	011b      	lsls	r3, r3, #4
 8007faa:	3332      	adds	r3, #50	; 0x32
 8007fac:	4a95      	ldr	r2, [pc, #596]	; (8008204 <UART_SetConfig+0x6f4>)
 8007fae:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb2:	095b      	lsrs	r3, r3, #5
 8007fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fb8:	4498      	add	r8, r3
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	469b      	mov	fp, r3
 8007fbe:	f04f 0c00 	mov.w	ip, #0
 8007fc2:	46d9      	mov	r9, fp
 8007fc4:	46e2      	mov	sl, ip
 8007fc6:	eb19 0309 	adds.w	r3, r9, r9
 8007fca:	eb4a 040a 	adc.w	r4, sl, sl
 8007fce:	4699      	mov	r9, r3
 8007fd0:	46a2      	mov	sl, r4
 8007fd2:	eb19 090b 	adds.w	r9, r9, fp
 8007fd6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007fda:	f04f 0100 	mov.w	r1, #0
 8007fde:	f04f 0200 	mov.w	r2, #0
 8007fe2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fe6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007fea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fee:	4689      	mov	r9, r1
 8007ff0:	4692      	mov	sl, r2
 8007ff2:	eb1b 0509 	adds.w	r5, fp, r9
 8007ff6:	eb4c 060a 	adc.w	r6, ip, sl
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	4619      	mov	r1, r3
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	f04f 0400 	mov.w	r4, #0
 800800c:	0094      	lsls	r4, r2, #2
 800800e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008012:	008b      	lsls	r3, r1, #2
 8008014:	461a      	mov	r2, r3
 8008016:	4623      	mov	r3, r4
 8008018:	4628      	mov	r0, r5
 800801a:	4631      	mov	r1, r6
 800801c:	f7f8 fe14 	bl	8000c48 <__aeabi_uldivmod>
 8008020:	4603      	mov	r3, r0
 8008022:	460c      	mov	r4, r1
 8008024:	461a      	mov	r2, r3
 8008026:	4b77      	ldr	r3, [pc, #476]	; (8008204 <UART_SetConfig+0x6f4>)
 8008028:	fba3 1302 	umull	r1, r3, r3, r2
 800802c:	095b      	lsrs	r3, r3, #5
 800802e:	2164      	movs	r1, #100	; 0x64
 8008030:	fb01 f303 	mul.w	r3, r1, r3
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	3332      	adds	r3, #50	; 0x32
 800803a:	4a72      	ldr	r2, [pc, #456]	; (8008204 <UART_SetConfig+0x6f4>)
 800803c:	fba2 2303 	umull	r2, r3, r2, r3
 8008040:	095b      	lsrs	r3, r3, #5
 8008042:	f003 020f 	and.w	r2, r3, #15
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4442      	add	r2, r8
 800804c:	609a      	str	r2, [r3, #8]
 800804e:	e0d0      	b.n	80081f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008050:	f7fd f84c 	bl	80050ec <HAL_RCC_GetPCLK1Freq>
 8008054:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	469a      	mov	sl, r3
 800805a:	f04f 0b00 	mov.w	fp, #0
 800805e:	46d0      	mov	r8, sl
 8008060:	46d9      	mov	r9, fp
 8008062:	eb18 0308 	adds.w	r3, r8, r8
 8008066:	eb49 0409 	adc.w	r4, r9, r9
 800806a:	4698      	mov	r8, r3
 800806c:	46a1      	mov	r9, r4
 800806e:	eb18 080a 	adds.w	r8, r8, sl
 8008072:	eb49 090b 	adc.w	r9, r9, fp
 8008076:	f04f 0100 	mov.w	r1, #0
 800807a:	f04f 0200 	mov.w	r2, #0
 800807e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008082:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008086:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800808a:	4688      	mov	r8, r1
 800808c:	4691      	mov	r9, r2
 800808e:	eb1a 0508 	adds.w	r5, sl, r8
 8008092:	eb4b 0609 	adc.w	r6, fp, r9
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	4619      	mov	r1, r3
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	f04f 0400 	mov.w	r4, #0
 80080a8:	0094      	lsls	r4, r2, #2
 80080aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80080ae:	008b      	lsls	r3, r1, #2
 80080b0:	461a      	mov	r2, r3
 80080b2:	4623      	mov	r3, r4
 80080b4:	4628      	mov	r0, r5
 80080b6:	4631      	mov	r1, r6
 80080b8:	f7f8 fdc6 	bl	8000c48 <__aeabi_uldivmod>
 80080bc:	4603      	mov	r3, r0
 80080be:	460c      	mov	r4, r1
 80080c0:	461a      	mov	r2, r3
 80080c2:	4b50      	ldr	r3, [pc, #320]	; (8008204 <UART_SetConfig+0x6f4>)
 80080c4:	fba3 2302 	umull	r2, r3, r3, r2
 80080c8:	095b      	lsrs	r3, r3, #5
 80080ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	469b      	mov	fp, r3
 80080d2:	f04f 0c00 	mov.w	ip, #0
 80080d6:	46d9      	mov	r9, fp
 80080d8:	46e2      	mov	sl, ip
 80080da:	eb19 0309 	adds.w	r3, r9, r9
 80080de:	eb4a 040a 	adc.w	r4, sl, sl
 80080e2:	4699      	mov	r9, r3
 80080e4:	46a2      	mov	sl, r4
 80080e6:	eb19 090b 	adds.w	r9, r9, fp
 80080ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80080ee:	f04f 0100 	mov.w	r1, #0
 80080f2:	f04f 0200 	mov.w	r2, #0
 80080f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80080fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008102:	4689      	mov	r9, r1
 8008104:	4692      	mov	sl, r2
 8008106:	eb1b 0509 	adds.w	r5, fp, r9
 800810a:	eb4c 060a 	adc.w	r6, ip, sl
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	4619      	mov	r1, r3
 8008114:	f04f 0200 	mov.w	r2, #0
 8008118:	f04f 0300 	mov.w	r3, #0
 800811c:	f04f 0400 	mov.w	r4, #0
 8008120:	0094      	lsls	r4, r2, #2
 8008122:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008126:	008b      	lsls	r3, r1, #2
 8008128:	461a      	mov	r2, r3
 800812a:	4623      	mov	r3, r4
 800812c:	4628      	mov	r0, r5
 800812e:	4631      	mov	r1, r6
 8008130:	f7f8 fd8a 	bl	8000c48 <__aeabi_uldivmod>
 8008134:	4603      	mov	r3, r0
 8008136:	460c      	mov	r4, r1
 8008138:	461a      	mov	r2, r3
 800813a:	4b32      	ldr	r3, [pc, #200]	; (8008204 <UART_SetConfig+0x6f4>)
 800813c:	fba3 1302 	umull	r1, r3, r3, r2
 8008140:	095b      	lsrs	r3, r3, #5
 8008142:	2164      	movs	r1, #100	; 0x64
 8008144:	fb01 f303 	mul.w	r3, r1, r3
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	011b      	lsls	r3, r3, #4
 800814c:	3332      	adds	r3, #50	; 0x32
 800814e:	4a2d      	ldr	r2, [pc, #180]	; (8008204 <UART_SetConfig+0x6f4>)
 8008150:	fba2 2303 	umull	r2, r3, r2, r3
 8008154:	095b      	lsrs	r3, r3, #5
 8008156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800815a:	4498      	add	r8, r3
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	469b      	mov	fp, r3
 8008160:	f04f 0c00 	mov.w	ip, #0
 8008164:	46d9      	mov	r9, fp
 8008166:	46e2      	mov	sl, ip
 8008168:	eb19 0309 	adds.w	r3, r9, r9
 800816c:	eb4a 040a 	adc.w	r4, sl, sl
 8008170:	4699      	mov	r9, r3
 8008172:	46a2      	mov	sl, r4
 8008174:	eb19 090b 	adds.w	r9, r9, fp
 8008178:	eb4a 0a0c 	adc.w	sl, sl, ip
 800817c:	f04f 0100 	mov.w	r1, #0
 8008180:	f04f 0200 	mov.w	r2, #0
 8008184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008188:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800818c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008190:	4689      	mov	r9, r1
 8008192:	4692      	mov	sl, r2
 8008194:	eb1b 0509 	adds.w	r5, fp, r9
 8008198:	eb4c 060a 	adc.w	r6, ip, sl
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	4619      	mov	r1, r3
 80081a2:	f04f 0200 	mov.w	r2, #0
 80081a6:	f04f 0300 	mov.w	r3, #0
 80081aa:	f04f 0400 	mov.w	r4, #0
 80081ae:	0094      	lsls	r4, r2, #2
 80081b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80081b4:	008b      	lsls	r3, r1, #2
 80081b6:	461a      	mov	r2, r3
 80081b8:	4623      	mov	r3, r4
 80081ba:	4628      	mov	r0, r5
 80081bc:	4631      	mov	r1, r6
 80081be:	f7f8 fd43 	bl	8000c48 <__aeabi_uldivmod>
 80081c2:	4603      	mov	r3, r0
 80081c4:	460c      	mov	r4, r1
 80081c6:	461a      	mov	r2, r3
 80081c8:	4b0e      	ldr	r3, [pc, #56]	; (8008204 <UART_SetConfig+0x6f4>)
 80081ca:	fba3 1302 	umull	r1, r3, r3, r2
 80081ce:	095b      	lsrs	r3, r3, #5
 80081d0:	2164      	movs	r1, #100	; 0x64
 80081d2:	fb01 f303 	mul.w	r3, r1, r3
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	011b      	lsls	r3, r3, #4
 80081da:	3332      	adds	r3, #50	; 0x32
 80081dc:	4a09      	ldr	r2, [pc, #36]	; (8008204 <UART_SetConfig+0x6f4>)
 80081de:	fba2 2303 	umull	r2, r3, r2, r3
 80081e2:	095b      	lsrs	r3, r3, #5
 80081e4:	f003 020f 	and.w	r2, r3, #15
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4442      	add	r2, r8
 80081ee:	609a      	str	r2, [r3, #8]
}
 80081f0:	e7ff      	b.n	80081f2 <UART_SetConfig+0x6e2>
 80081f2:	bf00      	nop
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fc:	40011000 	.word	0x40011000
 8008200:	40011400 	.word	0x40011400
 8008204:	51eb851f 	.word	0x51eb851f

08008208 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008208:	b084      	sub	sp, #16
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	f107 001c 	add.w	r0, r7, #28
 8008216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800821a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821c:	2b01      	cmp	r3, #1
 800821e:	d122      	bne.n	8008266 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008224:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800824a:	2b01      	cmp	r3, #1
 800824c:	d105      	bne.n	800825a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fa5c 	bl	8008718 <USB_CoreReset>
 8008260:	4603      	mov	r3, r0
 8008262:	73fb      	strb	r3, [r7, #15]
 8008264:	e01a      	b.n	800829c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fa50 	bl	8008718 <USB_CoreReset>
 8008278:	4603      	mov	r3, r0
 800827a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800827c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800827e:	2b00      	cmp	r3, #0
 8008280:	d106      	bne.n	8008290 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008286:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	639a      	str	r2, [r3, #56]	; 0x38
 800828e:	e005      	b.n	800829c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008294:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d10b      	bne.n	80082ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f043 0206 	orr.w	r2, r3, #6
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f043 0220 	orr.w	r2, r3, #32
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082c6:	b004      	add	sp, #16
 80082c8:	4770      	bx	lr

080082ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f023 0201 	bic.w	r2, r3, #1
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d106      	bne.n	8008318 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	60da      	str	r2, [r3, #12]
 8008316:	e00b      	b.n	8008330 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d106      	bne.n	800832c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	60da      	str	r2, [r3, #12]
 800832a:	e001      	b.n	8008330 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e003      	b.n	8008338 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008330:	2032      	movs	r0, #50	; 0x32
 8008332:	f7f8 fe7b 	bl	800102c <HAL_Delay>

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008340:	b084      	sub	sp, #16
 8008342:	b580      	push	{r7, lr}
 8008344:	b086      	sub	sp, #24
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800834e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800835a:	2300      	movs	r3, #0
 800835c:	613b      	str	r3, [r7, #16]
 800835e:	e009      	b.n	8008374 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	3340      	adds	r3, #64	; 0x40
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	2200      	movs	r2, #0
 800836c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	3301      	adds	r3, #1
 8008372:	613b      	str	r3, [r7, #16]
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	2b0e      	cmp	r3, #14
 8008378:	d9f2      	bls.n	8008360 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800837a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800837c:	2b00      	cmp	r3, #0
 800837e:	d112      	bne.n	80083a6 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008384:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008390:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	639a      	str	r2, [r3, #56]	; 0x38
 80083a4:	e00b      	b.n	80083be <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083c4:	461a      	mov	r2, r3
 80083c6:	2300      	movs	r3, #0
 80083c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d0:	4619      	mov	r1, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d8:	461a      	mov	r2, r3
 80083da:	680b      	ldr	r3, [r1, #0]
 80083dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d10c      	bne.n	80083fe <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d104      	bne.n	80083f4 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083ea:	2100      	movs	r1, #0
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f961 	bl	80086b4 <USB_SetDevSpeed>
 80083f2:	e008      	b.n	8008406 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80083f4:	2101      	movs	r1, #1
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f95c 	bl	80086b4 <USB_SetDevSpeed>
 80083fc:	e003      	b.n	8008406 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083fe:	2103      	movs	r1, #3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f957 	bl	80086b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008406:	2110      	movs	r1, #16
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f90b 	bl	8008624 <USB_FlushTxFifo>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f929 	bl	8008670 <USB_FlushRxFifo>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842e:	461a      	mov	r2, r3
 8008430:	2300      	movs	r3, #0
 8008432:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843a:	461a      	mov	r2, r3
 800843c:	2300      	movs	r3, #0
 800843e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008446:	461a      	mov	r2, r3
 8008448:	2300      	movs	r3, #0
 800844a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800844c:	2300      	movs	r3, #0
 800844e:	613b      	str	r3, [r7, #16]
 8008450:	e043      	b.n	80084da <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	4413      	add	r3, r2
 800845a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008464:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008468:	d118      	bne.n	800849c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10a      	bne.n	8008486 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4413      	add	r3, r2
 8008478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800847c:	461a      	mov	r2, r3
 800847e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	e013      	b.n	80084ae <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4413      	add	r3, r2
 800848e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008492:	461a      	mov	r2, r3
 8008494:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	e008      	b.n	80084ae <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a8:	461a      	mov	r2, r3
 80084aa:	2300      	movs	r3, #0
 80084ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ba:	461a      	mov	r2, r3
 80084bc:	2300      	movs	r3, #0
 80084be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084cc:	461a      	mov	r2, r3
 80084ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	3301      	adds	r3, #1
 80084d8:	613b      	str	r3, [r7, #16]
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d3b7      	bcc.n	8008452 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084e2:	2300      	movs	r3, #0
 80084e4:	613b      	str	r3, [r7, #16]
 80084e6:	e043      	b.n	8008570 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084fe:	d118      	bne.n	8008532 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10a      	bne.n	800851c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008512:	461a      	mov	r2, r3
 8008514:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008518:	6013      	str	r3, [r2, #0]
 800851a:	e013      	b.n	8008544 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008528:	461a      	mov	r2, r3
 800852a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	e008      	b.n	8008544 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4413      	add	r3, r2
 800853a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853e:	461a      	mov	r2, r3
 8008540:	2300      	movs	r3, #0
 8008542:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008550:	461a      	mov	r2, r3
 8008552:	2300      	movs	r3, #0
 8008554:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008562:	461a      	mov	r2, r3
 8008564:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008568:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	3301      	adds	r3, #1
 800856e:	613b      	str	r3, [r7, #16]
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	429a      	cmp	r2, r3
 8008576:	d3b7      	bcc.n	80084e8 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008586:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800858a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	2b01      	cmp	r3, #1
 8008590:	d111      	bne.n	80085b6 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008598:	461a      	mov	r2, r3
 800859a:	4b20      	ldr	r3, [pc, #128]	; (800861c <USB_DevInit+0x2dc>)
 800859c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085b0:	f043 0303 	orr.w	r3, r3, #3
 80085b4:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d105      	bne.n	80085d6 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	f043 0210 	orr.w	r2, r3, #16
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	699a      	ldr	r2, [r3, #24]
 80085da:	4b11      	ldr	r3, [pc, #68]	; (8008620 <USB_DevInit+0x2e0>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d005      	beq.n	80085f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	f043 0208 	orr.w	r2, r3, #8
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d107      	bne.n	800860a <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008602:	f043 0304 	orr.w	r3, r3, #4
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800860a:	7dfb      	ldrb	r3, [r7, #23]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008616:	b004      	add	sp, #16
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	00800100 	.word	0x00800100
 8008620:	803c3800 	.word	0x803c3800

08008624 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	019b      	lsls	r3, r3, #6
 8008636:	f043 0220 	orr.w	r2, r3, #32
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	3301      	adds	r3, #1
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	4a09      	ldr	r2, [pc, #36]	; (800866c <USB_FlushTxFifo+0x48>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d901      	bls.n	8008650 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e006      	b.n	800865e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	f003 0320 	and.w	r3, r3, #32
 8008658:	2b20      	cmp	r3, #32
 800865a:	d0f0      	beq.n	800863e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	00030d40 	.word	0x00030d40

08008670 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2210      	movs	r2, #16
 8008680:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3301      	adds	r3, #1
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4a09      	ldr	r2, [pc, #36]	; (80086b0 <USB_FlushRxFifo+0x40>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d901      	bls.n	8008694 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e006      	b.n	80086a2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	f003 0310 	and.w	r3, r3, #16
 800869c:	2b10      	cmp	r3, #16
 800869e:	d0f0      	beq.n	8008682 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	00030d40 	.word	0x00030d40

080086b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	68f9      	ldr	r1, [r7, #12]
 80086d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086d4:	4313      	orrs	r3, r2
 80086d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008700:	f043 0302 	orr.w	r3, r3, #2
 8008704:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008706:	2003      	movs	r0, #3
 8008708:	f7f8 fc90 	bl	800102c <HAL_Delay>

  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
	...

08008718 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3301      	adds	r3, #1
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4a13      	ldr	r2, [pc, #76]	; (800877c <USB_CoreReset+0x64>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d901      	bls.n	8008736 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e01b      	b.n	800876e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	daf2      	bge.n	8008724 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	f043 0201 	orr.w	r2, r3, #1
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3301      	adds	r3, #1
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	4a09      	ldr	r2, [pc, #36]	; (800877c <USB_CoreReset+0x64>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d901      	bls.n	8008760 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e006      	b.n	800876e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b01      	cmp	r3, #1
 800876a:	d0f0      	beq.n	800874e <USB_CoreReset+0x36>

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	00030d40 	.word	0x00030d40

08008780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008780:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008784:	b092      	sub	sp, #72	; 0x48
 8008786:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008788:	f7f8 fbde 	bl	8000f48 <HAL_Init>
	// todo transfer init part of code here

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800878c:	f000 fc48 	bl	8009020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008790:	f001 fb66 	bl	8009e60 <MX_GPIO_Init>
  MX_DMA_Init();
 8008794:	f001 fb1e 	bl	8009dd4 <MX_DMA_Init>
  MX_TIM9_Init();
 8008798:	f001 fa52 	bl	8009c40 <MX_TIM9_Init>
  MX_SPI2_Init();
 800879c:	f001 f82e 	bl	80097fc <MX_SPI2_Init>
  MX_ADC1_Init();
 80087a0:	f000 fcc2 	bl	8009128 <MX_ADC1_Init>
  MX_ADC2_Init();
 80087a4:	f000 fdea 	bl	800937c <MX_ADC2_Init>
  MX_CAN1_Init();
 80087a8:	f000 ff70 	bl	800968c <MX_CAN1_Init>
  MX_I2C1_Init();
 80087ac:	f000 ffa4 	bl	80096f8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80087b0:	f000 ffd0 	bl	8009754 <MX_I2C2_Init>
  MX_TIM1_Init();
 80087b4:	f001 f85a 	bl	800986c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80087b8:	f001 fab4 	bl	8009d24 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 80087bc:	f001 f9e8 	bl	8009b90 <MX_TIM8_Init>
  MX_TIM2_Init();
 80087c0:	f001 f926 	bl	8009a10 <MX_TIM2_Init>
  MX_ADC3_Init();
 80087c4:	f000 fea4 	bl	8009510 <MX_ADC3_Init>
  MX_USB_OTG_FS_PCD_Init();
 80087c8:	f001 fad6 	bl	8009d78 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 80087cc:	f000 fff0 	bl	80097b0 <MX_RTC_Init>
  MX_TIM5_Init();
 80087d0:	f001 f990 	bl	8009af4 <MX_TIM5_Init>
	 *    LOOKUPS
	 *                                                                           *
	 *****************************************************************************
	 */

	calc_lookup(lookup);
 80087d4:	4857      	ldr	r0, [pc, #348]	; (8008934 <main+0x1b4>)
 80087d6:	f001 fe7b 	bl	800a4d0 <calc_lookup>
	calc_sin_lookup(sin_lookup);
 80087da:	4857      	ldr	r0, [pc, #348]	; (8008938 <main+0x1b8>)
 80087dc:	f001 fed8 	bl	800a590 <calc_sin_lookup>
	calc_cos_lookup(cos_lookup);
 80087e0:	4856      	ldr	r0, [pc, #344]	; (800893c <main+0x1bc>)
 80087e2:	f001 ff07 	bl	800a5f4 <calc_cos_lookup>
	 *                                                                           *
	 *    LEDS
	 *                                                                           *
	 *****************************************************************************
	 */
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1); //todo clean up timers
 80087e6:	2100      	movs	r1, #0
 80087e8:	4855      	ldr	r0, [pc, #340]	; (8008940 <main+0x1c0>)
 80087ea:	f7fd fdd9 	bl	80063a0 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2); //todo check versus pwm
 80087ee:	2104      	movs	r1, #4
 80087f0:	4853      	ldr	r0, [pc, #332]	; (8008940 <main+0x1c0>)
 80087f2:	f7fd fd61 	bl	80062b8 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 80087f6:	2100      	movs	r1, #0
 80087f8:	4852      	ldr	r0, [pc, #328]	; (8008944 <main+0x1c4>)
 80087fa:	f7fd fd5d 	bl	80062b8 <HAL_TIM_OC_Start>

	int16_t blink_duration = 100;
 80087fe:	2364      	movs	r3, #100	; 0x64
 8008800:	85fb      	strh	r3, [r7, #46]	; 0x2e
	TIM9->CCR1 = blink_duration;
 8008802:	4a51      	ldr	r2, [pc, #324]	; (8008948 <main+0x1c8>)
 8008804:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008808:	6353      	str	r3, [r2, #52]	; 0x34
	TIM9->CCR2 = blink_duration;
 800880a:	4a4f      	ldr	r2, [pc, #316]	; (8008948 <main+0x1c8>)
 800880c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008810:	6393      	str	r3, [r2, #56]	; 0x38

	GPIOE->BSRR = GPIO_PIN_4; //switches LD2
 8008812:	4b4e      	ldr	r3, [pc, #312]	; (800894c <main+0x1cc>)
 8008814:	2210      	movs	r2, #16
 8008816:	619a      	str	r2, [r3, #24]

	SCB->CPACR |= 0xf00000; //todo understand
 8008818:	4b4d      	ldr	r3, [pc, #308]	; (8008950 <main+0x1d0>)
 800881a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800881e:	4a4c      	ldr	r2, [pc, #304]	; (8008950 <main+0x1d0>)
 8008820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 *                                                                           *
	 *    DRV DRIVER
	 *                                                                           *
	 *****************************************************************************
	 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008828:	2100      	movs	r1, #0
 800882a:	484a      	ldr	r0, [pc, #296]	; (8008954 <main+0x1d4>)
 800882c:	f7fd fdb8 	bl	80063a0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8008830:	2100      	movs	r1, #0
 8008832:	4848      	ldr	r0, [pc, #288]	; (8008954 <main+0x1d4>)
 8008834:	f7fe fd57 	bl	80072e6 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8008838:	2104      	movs	r1, #4
 800883a:	4846      	ldr	r0, [pc, #280]	; (8008954 <main+0x1d4>)
 800883c:	f7fd fdb0 	bl	80063a0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8008840:	2104      	movs	r1, #4
 8008842:	4844      	ldr	r0, [pc, #272]	; (8008954 <main+0x1d4>)
 8008844:	f7fe fd4f 	bl	80072e6 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8008848:	2108      	movs	r1, #8
 800884a:	4842      	ldr	r0, [pc, #264]	; (8008954 <main+0x1d4>)
 800884c:	f7fd fda8 	bl	80063a0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8008850:	2108      	movs	r1, #8
 8008852:	4840      	ldr	r0, [pc, #256]	; (8008954 <main+0x1d4>)
 8008854:	f7fe fd47 	bl	80072e6 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8008858:	210c      	movs	r1, #12
 800885a:	483e      	ldr	r0, [pc, #248]	; (8008954 <main+0x1d4>)
 800885c:	f7fd fd2c 	bl	80062b8 <HAL_TIM_OC_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);//todo check OC versus IC
 8008860:	210c      	movs	r1, #12
 8008862:	483c      	ldr	r0, [pc, #240]	; (8008954 <main+0x1d4>)
 8008864:	f7fd fdda 	bl	800641c <HAL_TIM_IC_Start_IT>

	// --- ENABLE DRV
	HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
 8008868:	2201      	movs	r2, #1
 800886a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800886e:	4837      	ldr	r0, [pc, #220]	; (800894c <main+0x1cc>)
 8008870:	f7fa ff20 	bl	80036b4 <HAL_GPIO_WritePin>
	 *                                                                           *
	 *****************************************************************************
	 */
	// todo check timers
	//HAL_TIM_Base_Start_IT(&htim3);
	HAL_TIM_Base_Start(&htim5);
 8008874:	4838      	ldr	r0, [pc, #224]	; (8008958 <main+0x1d8>)
 8008876:	f7fd fcc6 	bl	8006206 <HAL_TIM_Base_Start>
	uint8_t accel8l;
	uint8_t accel8h;

	char accel_char[20];

	buf[0] = 0x6B; //power register
 800887a:	4b38      	ldr	r3, [pc, #224]	; (800895c <main+0x1dc>)
 800887c:	226b      	movs	r2, #107	; 0x6b
 800887e:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x00; //switch on
 8008880:	4b36      	ldr	r3, [pc, #216]	; (800895c <main+0x1dc>)
 8008882:	2200      	movs	r2, #0
 8008884:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 2, HAL_MAX_DELAY);
 8008886:	23d0      	movs	r3, #208	; 0xd0
 8008888:	b299      	uxth	r1, r3
 800888a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	2302      	movs	r3, #2
 8008892:	4a32      	ldr	r2, [pc, #200]	; (800895c <main+0x1dc>)
 8008894:	4832      	ldr	r0, [pc, #200]	; (8008960 <main+0x1e0>)
 8008896:	f7fb f877 	bl	8003988 <HAL_I2C_Master_Transmit>
 800889a:	4603      	mov	r3, r0
 800889c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (ret != HAL_OK){
 80088a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d009      	beq.n	80088bc <main+0x13c>
		strcpy((char*)buf, "Error IMU T\r\n");
 80088a8:	4a2c      	ldr	r2, [pc, #176]	; (800895c <main+0x1dc>)
 80088aa:	4b2e      	ldr	r3, [pc, #184]	; (8008964 <main+0x1e4>)
 80088ac:	4614      	mov	r4, r2
 80088ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 80088b0:	6020      	str	r0, [r4, #0]
 80088b2:	6061      	str	r1, [r4, #4]
 80088b4:	60a2      	str	r2, [r4, #8]
 80088b6:	881b      	ldrh	r3, [r3, #0]
 80088b8:	81a3      	strh	r3, [r4, #12]
 80088ba:	e002      	b.n	80088c2 <main+0x142>
	} else {
		buf[0] = 0x00;
 80088bc:	4b27      	ldr	r3, [pc, #156]	; (800895c <main+0x1dc>)
 80088be:	2200      	movs	r2, #0
 80088c0:	701a      	strb	r2, [r3, #0]
	}

	buf[0] = 0x3B;
 80088c2:	4b26      	ldr	r3, [pc, #152]	; (800895c <main+0x1dc>)
 80088c4:	223b      	movs	r2, #59	; 0x3b
 80088c6:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 80088c8:	23d0      	movs	r3, #208	; 0xd0
 80088ca:	b299      	uxth	r1, r3
 80088cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	2301      	movs	r3, #1
 80088d4:	4a21      	ldr	r2, [pc, #132]	; (800895c <main+0x1dc>)
 80088d6:	4822      	ldr	r0, [pc, #136]	; (8008960 <main+0x1e0>)
 80088d8:	f7fb f856 	bl	8003988 <HAL_I2C_Master_Transmit>
 80088dc:	4603      	mov	r3, r0
 80088de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (ret != HAL_OK){
 80088e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d009      	beq.n	80088fe <main+0x17e>
		strcpy((char*)buf, "Error IMU T\r\n");
 80088ea:	4a1c      	ldr	r2, [pc, #112]	; (800895c <main+0x1dc>)
 80088ec:	4b1d      	ldr	r3, [pc, #116]	; (8008964 <main+0x1e4>)
 80088ee:	4614      	mov	r4, r2
 80088f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80088f2:	6020      	str	r0, [r4, #0]
 80088f4:	6061      	str	r1, [r4, #4]
 80088f6:	60a2      	str	r2, [r4, #8]
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	e042      	b.n	8008984 <main+0x204>
	} else {
		ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 80088fe:	23d0      	movs	r3, #208	; 0xd0
 8008900:	b299      	uxth	r1, r3
 8008902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	2301      	movs	r3, #1
 800890a:	4a14      	ldr	r2, [pc, #80]	; (800895c <main+0x1dc>)
 800890c:	4814      	ldr	r0, [pc, #80]	; (8008960 <main+0x1e0>)
 800890e:	f7fb f939 	bl	8003b84 <HAL_I2C_Master_Receive>
 8008912:	4603      	mov	r3, r0
 8008914:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret != HAL_OK){
 8008918:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800891c:	2b00      	cmp	r3, #0
 800891e:	d025      	beq.n	800896c <main+0x1ec>
			strcpy((char*)buf, "Error IMU R\r\n");
 8008920:	4a0e      	ldr	r2, [pc, #56]	; (800895c <main+0x1dc>)
 8008922:	4b11      	ldr	r3, [pc, #68]	; (8008968 <main+0x1e8>)
 8008924:	4614      	mov	r4, r2
 8008926:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008928:	6020      	str	r0, [r4, #0]
 800892a:	6061      	str	r1, [r4, #4]
 800892c:	60a2      	str	r2, [r4, #8]
 800892e:	881b      	ldrh	r3, [r3, #0]
 8008930:	81a3      	strh	r3, [r4, #12]
 8008932:	e027      	b.n	8008984 <main+0x204>
 8008934:	200001fc 	.word	0x200001fc
 8008938:	20001b1c 	.word	0x20001b1c
 800893c:	20000e0c 	.word	0x20000e0c
 8008940:	200017dc 	.word	0x200017dc
 8008944:	20001a20 	.word	0x20001a20
 8008948:	40014000 	.word	0x40014000
 800894c:	40021000 	.word	0x40021000
 8008950:	e000ed00 	.word	0xe000ed00
 8008954:	20000dc0 	.word	0x20000dc0
 8008958:	20000b88 	.word	0x20000b88
 800895c:	20001884 	.word	0x20001884
 8008960:	20000a68 	.word	0x20000a68
 8008964:	0800ea20 	.word	0x0800ea20
 8008968:	0800ea30 	.word	0x0800ea30
		} else {
			accel8l = (int8_t)buf[0];
 800896c:	4ba9      	ldr	r3, [pc, #676]	; (8008c14 <main+0x494>)
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			sprintf((char*)accel_char, "%u m\r\n", (int)accel8l);
 8008974:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008978:	f107 0310 	add.w	r3, r7, #16
 800897c:	49a6      	ldr	r1, [pc, #664]	; (8008c18 <main+0x498>)
 800897e:	4618      	mov	r0, r3
 8008980:	f004 fac4 	bl	800cf0c <siprintf>
	 *                                                                           *
	 *    ROTATION SENSOR
	 *                                                                           *
	 *****************************************************************************
	 */
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL );
 8008984:	213c      	movs	r1, #60	; 0x3c
 8008986:	48a5      	ldr	r0, [pc, #660]	; (8008c1c <main+0x49c>)
 8008988:	f7fd fe42 	bl	8006610 <HAL_TIM_Encoder_Start_IT>

	//todo UGLY BUG - Ugly FIX: now i just send the init below twice because somehow the communication of the first transaction does not seem to work-- i sse on the MISO signal the lines just pulls up to 0.5fV instead of 3V but it works fine for the next transmission so it gets initialized correctly if i sent it twice


	// --- set ABI and enable PWM
	spi_address_8[1]= 0x00;//
 800898c:	2300      	movs	r3, #0
 800898e:	737b      	strb	r3, [r7, #13]
	spi_address_8[0]= 0x18;//00000000 00011000
 8008990:	2318      	movs	r3, #24
 8008992:	733b      	strb	r3, [r7, #12]
	spi_value_8[1]= 0x80;
 8008994:	2380      	movs	r3, #128	; 0x80
 8008996:	727b      	strb	r3, [r7, #9]
	spi_value_8[0]= 0x80;  //10000000 10000000
 8008998:	2380      	movs	r3, #128	; 0x80
 800899a:	723b      	strb	r3, [r7, #8]
	delay_SPI();
 800899c:	f001 fd46 	bl	800a42c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80089a0:	2200      	movs	r2, #0
 80089a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80089a6:	489e      	ldr	r0, [pc, #632]	; (8008c20 <main+0x4a0>)
 80089a8:	f7fa fe84 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 80089ac:	f107 010c 	add.w	r1, r7, #12
 80089b0:	2301      	movs	r3, #1
 80089b2:	2201      	movs	r2, #1
 80089b4:	489b      	ldr	r0, [pc, #620]	; (8008c24 <main+0x4a4>)
 80089b6:	f7fc fdec 	bl	8005592 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80089ba:	2201      	movs	r2, #1
 80089bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80089c0:	4897      	ldr	r0, [pc, #604]	; (8008c20 <main+0x4a0>)
 80089c2:	f7fa fe77 	bl	80036b4 <HAL_GPIO_WritePin>
	delay_SPI();
 80089c6:	f001 fd31 	bl	800a42c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80089ca:	2200      	movs	r2, #0
 80089cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80089d0:	4893      	ldr	r0, [pc, #588]	; (8008c20 <main+0x4a0>)
 80089d2:	f7fa fe6f 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 80089d6:	f107 0108 	add.w	r1, r7, #8
 80089da:	2301      	movs	r3, #1
 80089dc:	2201      	movs	r2, #1
 80089de:	4891      	ldr	r0, [pc, #580]	; (8008c24 <main+0x4a4>)
 80089e0:	f7fc fdd7 	bl	8005592 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80089e4:	2201      	movs	r2, #1
 80089e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80089ea:	488d      	ldr	r0, [pc, #564]	; (8008c20 <main+0x4a0>)
 80089ec:	f7fa fe62 	bl	80036b4 <HAL_GPIO_WritePin>

	// --- set steps 2000steps 500 pulses //todo this sometimes seems not to work as I get 4000 steps
	spi_address_8[1]= 0x80;
 80089f0:	2380      	movs	r3, #128	; 0x80
 80089f2:	737b      	strb	r3, [r7, #13]
	spi_address_8[0]= 0x19; //00001000 00011001
 80089f4:	2319      	movs	r3, #25
 80089f6:	733b      	strb	r3, [r7, #12]
	//address = AS_ADDR_SETTINGS2 | AS_WRITE ; // 0x8019
	//value = 0x0020 | AS_ODD; // 0x8020
	//value = 0x00E0 | AS_ODD;
	spi_value_8[1]= 0x00;
 80089f8:	2300      	movs	r3, #0
 80089fa:	727b      	strb	r3, [r7, #9]
	spi_value_8[0]= 0x00;  //was 0x80 and 0x20 10000000 00100000 to get 2000 pulses --> changed to 4000
 80089fc:	2300      	movs	r3, #0
 80089fe:	723b      	strb	r3, [r7, #8]
	delay_SPI();
 8008a00:	f001 fd14 	bl	800a42c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008a04:	2200      	movs	r2, #0
 8008a06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a0a:	4885      	ldr	r0, [pc, #532]	; (8008c20 <main+0x4a0>)
 8008a0c:	f7fa fe52 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008a10:	f107 010c 	add.w	r1, r7, #12
 8008a14:	2301      	movs	r3, #1
 8008a16:	2201      	movs	r2, #1
 8008a18:	4882      	ldr	r0, [pc, #520]	; (8008c24 <main+0x4a4>)
 8008a1a:	f7fc fdba 	bl	8005592 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a24:	487e      	ldr	r0, [pc, #504]	; (8008c20 <main+0x4a0>)
 8008a26:	f7fa fe45 	bl	80036b4 <HAL_GPIO_WritePin>
	delay_SPI();
 8008a2a:	f001 fcff 	bl	800a42c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a34:	487a      	ldr	r0, [pc, #488]	; (8008c20 <main+0x4a0>)
 8008a36:	f7fa fe3d 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008a3a:	f107 0108 	add.w	r1, r7, #8
 8008a3e:	2301      	movs	r3, #1
 8008a40:	2201      	movs	r2, #1
 8008a42:	4878      	ldr	r0, [pc, #480]	; (8008c24 <main+0x4a4>)
 8008a44:	f7fc fda5 	bl	8005592 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a4e:	4874      	ldr	r0, [pc, #464]	; (8008c20 <main+0x4a0>)
 8008a50:	f7fa fe30 	bl	80036b4 <HAL_GPIO_WritePin>

	// --- read angle
	HAL_Delay(1);
 8008a54:	2001      	movs	r0, #1
 8008a56:	f7f8 fae9 	bl	800102c <HAL_Delay>

	uint8_t angle8[2];
	uint16_t angle;

	//for (int i=0; i<4; i++)
	spi_address_8[1]= 0x7F;
 8008a5a:	237f      	movs	r3, #127	; 0x7f
 8008a5c:	737b      	strb	r3, [r7, #13]
	spi_address_8[0]= 0xFE;
 8008a5e:	23fe      	movs	r3, #254	; 0xfe
 8008a60:	733b      	strb	r3, [r7, #12]
	delay_SPI();
 8008a62:	f001 fce3 	bl	800a42c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008a66:	2200      	movs	r2, #0
 8008a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a6c:	486c      	ldr	r0, [pc, #432]	; (8008c20 <main+0x4a0>)
 8008a6e:	f7fa fe21 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008a72:	f107 010c 	add.w	r1, r7, #12
 8008a76:	2301      	movs	r3, #1
 8008a78:	2201      	movs	r2, #1
 8008a7a:	486a      	ldr	r0, [pc, #424]	; (8008c24 <main+0x4a4>)
 8008a7c:	f7fc fd89 	bl	8005592 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008a80:	2201      	movs	r2, #1
 8008a82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a86:	4866      	ldr	r0, [pc, #408]	; (8008c20 <main+0x4a0>)
 8008a88:	f7fa fe14 	bl	80036b4 <HAL_GPIO_WritePin>
	delay_SPI();
 8008a8c:	f001 fcce 	bl	800a42c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008a90:	2200      	movs	r2, #0
 8008a92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a96:	4862      	ldr	r0, [pc, #392]	; (8008c20 <main+0x4a0>)
 8008a98:	f7fa fe0c 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, (uint8_t *)&angle8, 1, 1);
 8008a9c:	1d39      	adds	r1, r7, #4
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	4860      	ldr	r0, [pc, #384]	; (8008c24 <main+0x4a4>)
 8008aa4:	f7fc fea9 	bl	80057fa <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008aae:	485c      	ldr	r0, [pc, #368]	; (8008c20 <main+0x4a0>)
 8008ab0:	f7fa fe00 	bl	80036b4 <HAL_GPIO_WritePin>

	angle = (uint16_t) angle8[0] | (uint16_t) angle8[1] << 8U;
 8008ab4:	793b      	ldrb	r3, [r7, #4]
 8008ab6:	b21a      	sxth	r2, r3
 8008ab8:	797b      	ldrb	r3, [r7, #5]
 8008aba:	021b      	lsls	r3, r3, #8
 8008abc:	b21b      	sxth	r3, r3
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	b21b      	sxth	r3, r3
 8008ac2:	857b      	strh	r3, [r7, #42]	; 0x2a
	angle &= AS_DATA_MASK;
 8008ac4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008ac6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008aca:	857b      	strh	r3, [r7, #42]	; 0x2a


	// --- ROTATION SENSOR 0 POINT SETTING ----------------------------------------------------
	//angle &= AS_DATA_MASK;
	init_EncVal = (uint16_t) ((float)angle /16384.0f * ENC_STEPS_F);
 8008acc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ad6:	eddf 6a54 	vldr	s13, [pc, #336]	; 8008c28 <main+0x4a8>
 8008ada:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008ade:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8008c2c <main+0x4ac>
 8008ae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aea:	ee17 3a90 	vmov	r3, s15
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	461a      	mov	r2, r3
 8008af2:	4b4f      	ldr	r3, [pc, #316]	; (8008c30 <main+0x4b0>)
 8008af4:	601a      	str	r2, [r3, #0]
	last_EncVal_omegaEnc = init_EncVal;
 8008af6:	4b4e      	ldr	r3, [pc, #312]	; (8008c30 <main+0x4b0>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a4e      	ldr	r2, [pc, #312]	; (8008c34 <main+0x4b4>)
 8008afc:	6013      	str	r3, [r2, #0]
	last_EncVal_pwm = init_EncVal;
 8008afe:	4b4c      	ldr	r3, [pc, #304]	; (8008c30 <main+0x4b0>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a4d      	ldr	r2, [pc, #308]	; (8008c38 <main+0x4b8>)
 8008b04:	6013      	str	r3, [r2, #0]
	TIM8->CNT = init_EncVal;
 8008b06:	4b4a      	ldr	r3, [pc, #296]	; (8008c30 <main+0x4b0>)
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	4b4c      	ldr	r3, [pc, #304]	; (8008c3c <main+0x4bc>)
 8008b0c:	625a      	str	r2, [r3, #36]	; 0x24
	 *                                                                           *
	 *    UART DMA
	 *                                                                           *
	 *****************************************************************************
	 */
	HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMAUSARTTransferComplete);
 8008b0e:	4a4c      	ldr	r2, [pc, #304]	; (8008c40 <main+0x4c0>)
 8008b10:	2100      	movs	r1, #0
 8008b12:	484c      	ldr	r0, [pc, #304]	; (8008c44 <main+0x4c4>)
 8008b14:	f7fa fb02 	bl	800311c <HAL_DMA_RegisterCallback>
	 *                                                                           *
	 *    ADC DMA and INJECTED
	 *                                                                           *
	 *****************************************************************************
	 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC1_BUF_LEN); // the length must be multiple of channels otherwise I observed mess in order - even like 2 of one and lots of mess
 8008b18:	2208      	movs	r2, #8
 8008b1a:	494b      	ldr	r1, [pc, #300]	; (8008c48 <main+0x4c8>)
 8008b1c:	484b      	ldr	r0, [pc, #300]	; (8008c4c <main+0x4cc>)
 8008b1e:	f7f8 fc2b 	bl	8001378 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC2_BUF_LEN); // TODO enabling this only leads to no change all values stay zero
 8008b22:	2204      	movs	r2, #4
 8008b24:	494a      	ldr	r1, [pc, #296]	; (8008c50 <main+0x4d0>)
 8008b26:	484b      	ldr	r0, [pc, #300]	; (8008c54 <main+0x4d4>)
 8008b28:	f7f8 fc26 	bl	8001378 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC3_BUF_LEN); // TODO enabling this breaks transmission entirely
 8008b2c:	2204      	movs	r2, #4
 8008b2e:	494a      	ldr	r1, [pc, #296]	; (8008c58 <main+0x4d8>)
 8008b30:	484a      	ldr	r0, [pc, #296]	; (8008c5c <main+0x4dc>)
 8008b32:	f7f8 fc21 	bl	8001378 <HAL_ADC_Start_DMA>

	HAL_ADCEx_InjectedStart (&hadc1);
 8008b36:	4845      	ldr	r0, [pc, #276]	; (8008c4c <main+0x4cc>)
 8008b38:	f7f8 ffd8 	bl	8001aec <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc2);
 8008b3c:	4845      	ldr	r0, [pc, #276]	; (8008c54 <main+0x4d4>)
 8008b3e:	f7f8 ffd5 	bl	8001aec <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc3);
 8008b42:	4846      	ldr	r0, [pc, #280]	; (8008c5c <main+0x4dc>)
 8008b44:	f7f8 ffd2 	bl	8001aec <HAL_ADCEx_InjectedStart>
	 *                                                                           *
	 *    CAN COMMUNICATION
	 *                                                                           *
	 *****************************************************************************
	 */
	pHeader.DLC =6;
 8008b48:	4b45      	ldr	r3, [pc, #276]	; (8008c60 <main+0x4e0>)
 8008b4a:	2206      	movs	r2, #6
 8008b4c:	611a      	str	r2, [r3, #16]
	pHeader.IDE = CAN_ID_STD;
 8008b4e:	4b44      	ldr	r3, [pc, #272]	; (8008c60 <main+0x4e0>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	609a      	str	r2, [r3, #8]
	pHeader.RTR = CAN_RTR_DATA;
 8008b54:	4b42      	ldr	r3, [pc, #264]	; (8008c60 <main+0x4e0>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	60da      	str	r2, [r3, #12]
	pHeader.StdId = 0x001;
 8008b5a:	4b41      	ldr	r3, [pc, #260]	; (8008c60 <main+0x4e0>)
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	601a      	str	r2, [r3, #0]

	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8008b60:	4b40      	ldr	r3, [pc, #256]	; (8008c64 <main+0x4e4>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = CAN_ID<<5;
 8008b66:	4b3f      	ldr	r3, [pc, #252]	; (8008c64 <main+0x4e4>)
 8008b68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b6c:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8008b6e:	4b3d      	ldr	r3, [pc, #244]	; (8008c64 <main+0x4e4>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF;
 8008b74:	4b3b      	ldr	r3, [pc, #236]	; (8008c64 <main+0x4e4>)
 8008b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b7a:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0xFFFF;
 8008b7c:	4b39      	ldr	r3, [pc, #228]	; (8008c64 <main+0x4e4>)
 8008b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b82:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8008b84:	4b37      	ldr	r3, [pc, #220]	; (8008c64 <main+0x4e4>)
 8008b86:	2200      	movs	r2, #0
 8008b88:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8008b8a:	4b36      	ldr	r3, [pc, #216]	; (8008c64 <main+0x4e4>)
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8008b90:	4934      	ldr	r1, [pc, #208]	; (8008c64 <main+0x4e4>)
 8008b92:	4835      	ldr	r0, [pc, #212]	; (8008c68 <main+0x4e8>)
 8008b94:	f7f9 fb80 	bl	8002298 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8008b98:	4833      	ldr	r0, [pc, #204]	; (8008c68 <main+0x4e8>)
 8008b9a:	f7f9 fc5d 	bl	8002458 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8008b9e:	2102      	movs	r1, #2
 8008ba0:	4831      	ldr	r0, [pc, #196]	; (8008c68 <main+0x4e8>)
 8008ba2:	f7f9 fc9d 	bl	80024e0 <HAL_CAN_ActivateNotification>
	 *    SYSTEM CALIBRATION
	 *                                                                           *
	 *****************************************************************************
	 */

	sprintf(buf, "\r\n\r\nWELCOME TO MUSCLEmaster \r\n\r\nangle: %d init_EncVal %d \r\nangle: %u EncVal %u \r\n\r\n",
 8008ba6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008ba8:	4b21      	ldr	r3, [pc, #132]	; (8008c30 <main+0x4b0>)
 8008baa:	6818      	ldr	r0, [r3, #0]
 8008bac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008bae:	4a20      	ldr	r2, [pc, #128]	; (8008c30 <main+0x4b0>)
 8008bb0:	6812      	ldr	r2, [r2, #0]
 8008bb2:	9201      	str	r2, [sp, #4]
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	460a      	mov	r2, r1
 8008bba:	492c      	ldr	r1, [pc, #176]	; (8008c6c <main+0x4ec>)
 8008bbc:	4815      	ldr	r0, [pc, #84]	; (8008c14 <main+0x494>)
 8008bbe:	f004 f9a5 	bl	800cf0c <siprintf>
			angle, init_EncVal ,
			angle, init_EncVal );
	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 8008bc2:	4b2b      	ldr	r3, [pc, #172]	; (8008c70 <main+0x4f0>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	695a      	ldr	r2, [r3, #20]
 8008bc8:	4b29      	ldr	r3, [pc, #164]	; (8008c70 <main+0x4f0>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008bd0:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 8008bd2:	4c10      	ldr	r4, [pc, #64]	; (8008c14 <main+0x494>)
 8008bd4:	4b26      	ldr	r3, [pc, #152]	; (8008c70 <main+0x4f0>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3304      	adds	r3, #4
 8008bda:	461d      	mov	r5, r3
 8008bdc:	480d      	ldr	r0, [pc, #52]	; (8008c14 <main+0x494>)
 8008bde:	f7f7 faf7 	bl	80001d0 <strlen>
 8008be2:	4603      	mov	r3, r0
 8008be4:	462a      	mov	r2, r5
 8008be6:	4621      	mov	r1, r4
 8008be8:	4816      	ldr	r0, [pc, #88]	; (8008c44 <main+0x4c4>)
 8008bea:	f7fa f893 	bl	8002d14 <HAL_DMA_Start_IT>

	HAL_Delay(10); //some delay needed othwise the first print statement in while will overwrite
 8008bee:	200a      	movs	r0, #10
 8008bf0:	f7f8 fa1c 	bl	800102c <HAL_Delay>

	// --- find current sense offsets
	//float acc_I_A = 0.0f;
#if I_CALIB_ENABLED
	A_mean = 0;
 8008bf4:	4b1f      	ldr	r3, [pc, #124]	; (8008c74 <main+0x4f4>)
 8008bf6:	f04f 0200 	mov.w	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]
	B_mean = 0;
 8008bfc:	4b1e      	ldr	r3, [pc, #120]	; (8008c78 <main+0x4f8>)
 8008bfe:	f04f 0200 	mov.w	r2, #0
 8008c02:	601a      	str	r2, [r3, #0]
	C_mean = 0;
 8008c04:	4b1d      	ldr	r3, [pc, #116]	; (8008c7c <main+0x4fc>)
 8008c06:	f04f 0200 	mov.w	r2, #0
 8008c0a:	601a      	str	r2, [r3, #0]
	for (int i=0; i<I_CALIB_N; i++){
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c10:	e06c      	b.n	8008cec <main+0x56c>
 8008c12:	bf00      	nop
 8008c14:	20001884 	.word	0x20001884
 8008c18:	0800ea40 	.word	0x0800ea40
 8008c1c:	20000544 	.word	0x20000544
 8008c20:	40020c00 	.word	0x40020c00
 8008c24:	200001a4 	.word	0x200001a4
 8008c28:	46800000 	.word	0x46800000
 8008c2c:	457a0000 	.word	0x457a0000
 8008c30:	20002520 	.word	0x20002520
 8008c34:	20000bc8 	.word	0x20000bc8
 8008c38:	20000abc 	.word	0x20000abc
 8008c3c:	40010400 	.word	0x40010400
 8008c40:	0800a659 	.word	0x0800a659
 8008c44:	20000b28 	.word	0x20000b28
 8008c48:	20000bd0 	.word	0x20000bd0
 8008c4c:	20000cb0 	.word	0x20000cb0
 8008c50:	20001a18 	.word	0x20001a18
 8008c54:	200005c4 	.word	0x200005c4
 8008c58:	20000e04 	.word	0x20000e04
 8008c5c:	20000cf8 	.word	0x20000cf8
 8008c60:	20001b04 	.word	0x20001b04
 8008c64:	2000017c 	.word	0x2000017c
 8008c68:	20001adc 	.word	0x20001adc
 8008c6c:	0800ea48 	.word	0x0800ea48
 8008c70:	20000584 	.word	0x20000584
 8008c74:	20000030 	.word	0x20000030
 8008c78:	20000034 	.word	0x20000034
 8008c7c:	20000038 	.word	0x20000038
		A_mean += HAL_ADCEx_InjectedGetValue (&hadc1, RANK_I);
 8008c80:	2104      	movs	r1, #4
 8008c82:	48ba      	ldr	r0, [pc, #744]	; (8008f6c <main+0x7ec>)
 8008c84:	f7f8 fff0 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 8008c88:	ee07 0a90 	vmov	s15, r0
 8008c8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c90:	4bb7      	ldr	r3, [pc, #732]	; (8008f70 <main+0x7f0>)
 8008c92:	edd3 7a00 	vldr	s15, [r3]
 8008c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c9a:	4bb5      	ldr	r3, [pc, #724]	; (8008f70 <main+0x7f0>)
 8008c9c:	edc3 7a00 	vstr	s15, [r3]
		B_mean += HAL_ADCEx_InjectedGetValue (&hadc2, RANK_I);
 8008ca0:	2104      	movs	r1, #4
 8008ca2:	48b4      	ldr	r0, [pc, #720]	; (8008f74 <main+0x7f4>)
 8008ca4:	f7f8 ffe0 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 8008ca8:	ee07 0a90 	vmov	s15, r0
 8008cac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cb0:	4bb1      	ldr	r3, [pc, #708]	; (8008f78 <main+0x7f8>)
 8008cb2:	edd3 7a00 	vldr	s15, [r3]
 8008cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cba:	4baf      	ldr	r3, [pc, #700]	; (8008f78 <main+0x7f8>)
 8008cbc:	edc3 7a00 	vstr	s15, [r3]
		C_mean += HAL_ADCEx_InjectedGetValue (&hadc3, RANK_I);
 8008cc0:	2104      	movs	r1, #4
 8008cc2:	48ae      	ldr	r0, [pc, #696]	; (8008f7c <main+0x7fc>)
 8008cc4:	f7f8 ffd0 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 8008cc8:	ee07 0a90 	vmov	s15, r0
 8008ccc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cd0:	4bab      	ldr	r3, [pc, #684]	; (8008f80 <main+0x800>)
 8008cd2:	edd3 7a00 	vldr	s15, [r3]
 8008cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cda:	4ba9      	ldr	r3, [pc, #676]	; (8008f80 <main+0x800>)
 8008cdc:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 8008ce0:	2001      	movs	r0, #1
 8008ce2:	f7f8 f9a3 	bl	800102c <HAL_Delay>
	for (int i=0; i<I_CALIB_N; i++){
 8008ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce8:	3301      	adds	r3, #1
 8008cea:	637b      	str	r3, [r7, #52]	; 0x34
 8008cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cee:	2b7f      	cmp	r3, #127	; 0x7f
 8008cf0:	ddc6      	ble.n	8008c80 <main+0x500>
	}
	A_mean /= I_CALIB_N;
 8008cf2:	4b9f      	ldr	r3, [pc, #636]	; (8008f70 <main+0x7f0>)
 8008cf4:	ed93 7a00 	vldr	s14, [r3]
 8008cf8:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8008f84 <main+0x804>
 8008cfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d00:	4b9b      	ldr	r3, [pc, #620]	; (8008f70 <main+0x7f0>)
 8008d02:	edc3 7a00 	vstr	s15, [r3]
	B_mean /= I_CALIB_N;
 8008d06:	4b9c      	ldr	r3, [pc, #624]	; (8008f78 <main+0x7f8>)
 8008d08:	ed93 7a00 	vldr	s14, [r3]
 8008d0c:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8008f84 <main+0x804>
 8008d10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d14:	4b98      	ldr	r3, [pc, #608]	; (8008f78 <main+0x7f8>)
 8008d16:	edc3 7a00 	vstr	s15, [r3]
	C_mean /= I_CALIB_N;
 8008d1a:	4b99      	ldr	r3, [pc, #612]	; (8008f80 <main+0x800>)
 8008d1c:	ed93 7a00 	vldr	s14, [r3]
 8008d20:	eddf 6a98 	vldr	s13, [pc, #608]	; 8008f84 <main+0x804>
 8008d24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d28:	4b95      	ldr	r3, [pc, #596]	; (8008f80 <main+0x800>)
 8008d2a:	edc3 7a00 	vstr	s15, [r3]

	sprintf(buf, "I_mean: %8.3f %8.3f %8.3f \n", A_mean, B_mean, C_mean );
 8008d2e:	4b90      	ldr	r3, [pc, #576]	; (8008f70 <main+0x7f0>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7f7 fc08 	bl	8000548 <__aeabi_f2d>
 8008d38:	4680      	mov	r8, r0
 8008d3a:	4689      	mov	r9, r1
 8008d3c:	4b8e      	ldr	r3, [pc, #568]	; (8008f78 <main+0x7f8>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7f7 fc01 	bl	8000548 <__aeabi_f2d>
 8008d46:	4604      	mov	r4, r0
 8008d48:	460d      	mov	r5, r1
 8008d4a:	4b8d      	ldr	r3, [pc, #564]	; (8008f80 <main+0x800>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7f7 fbfa 	bl	8000548 <__aeabi_f2d>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d5c:	e9cd 4500 	strd	r4, r5, [sp]
 8008d60:	4642      	mov	r2, r8
 8008d62:	464b      	mov	r3, r9
 8008d64:	4988      	ldr	r1, [pc, #544]	; (8008f88 <main+0x808>)
 8008d66:	4889      	ldr	r0, [pc, #548]	; (8008f8c <main+0x80c>)
 8008d68:	f004 f8d0 	bl	800cf0c <siprintf>
	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 8008d6c:	4b88      	ldr	r3, [pc, #544]	; (8008f90 <main+0x810>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	695a      	ldr	r2, [r3, #20]
 8008d72:	4b87      	ldr	r3, [pc, #540]	; (8008f90 <main+0x810>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d7a:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 8008d7c:	4c83      	ldr	r4, [pc, #524]	; (8008f8c <main+0x80c>)
 8008d7e:	4b84      	ldr	r3, [pc, #528]	; (8008f90 <main+0x810>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3304      	adds	r3, #4
 8008d84:	461d      	mov	r5, r3
 8008d86:	4881      	ldr	r0, [pc, #516]	; (8008f8c <main+0x80c>)
 8008d88:	f7f7 fa22 	bl	80001d0 <strlen>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	462a      	mov	r2, r5
 8008d90:	4621      	mov	r1, r4
 8008d92:	4880      	ldr	r0, [pc, #512]	; (8008f94 <main+0x814>)
 8008d94:	f7f9 ffbe 	bl	8002d14 <HAL_DMA_Start_IT>
	HAL_Delay(10);
 8008d98:	200a      	movs	r0, #10
 8008d9a:	f7f8 f947 	bl	800102c <HAL_Delay>
	 *    SYSTEM CHECK
	 *                                                                           *
	 *****************************************************************************
	 */

	if (adc1_buf[RANK_CONT_Vbus-1]*CONVERT_VBUS_INT2V > VBUS_MAX){
 8008d9e:	4b7e      	ldr	r3, [pc, #504]	; (8008f98 <main+0x818>)
 8008da0:	89db      	ldrh	r3, [r3, #14]
 8008da2:	ee07 3a90 	vmov	s15, r3
 8008da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008daa:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8008f9c <main+0x81c>
 8008dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008db2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8008db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dbe:	dd05      	ble.n	8008dcc <main+0x64c>
		sys_err |= 1 << 0U;
 8008dc0:	4b77      	ldr	r3, [pc, #476]	; (8008fa0 <main+0x820>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f043 0301 	orr.w	r3, r3, #1
 8008dc8:	4a75      	ldr	r2, [pc, #468]	; (8008fa0 <main+0x820>)
 8008dca:	6013      	str	r3, [r2, #0]
	}
	if (adc1_buf[RANK_CONT_Vbus-1]*CONVERT_VBUS_INT2V < VBUS_MIN){
 8008dcc:	4b72      	ldr	r3, [pc, #456]	; (8008f98 <main+0x818>)
 8008dce:	89db      	ldrh	r3, [r3, #14]
 8008dd0:	ee07 3a90 	vmov	s15, r3
 8008dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dd8:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8008f9c <main+0x81c>
 8008ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008de0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8008de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dec:	d505      	bpl.n	8008dfa <main+0x67a>
		sys_err |= 1 << 1U;
 8008dee:	4b6c      	ldr	r3, [pc, #432]	; (8008fa0 <main+0x820>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f043 0302 	orr.w	r3, r3, #2
 8008df6:	4a6a      	ldr	r2, [pc, #424]	; (8008fa0 <main+0x820>)
 8008df8:	6013      	str	r3, [r2, #0]
	}

	if (A_mean < 2030.0f || A_mean > 2060.0f ||
 8008dfa:	4b5d      	ldr	r3, [pc, #372]	; (8008f70 <main+0x7f0>)
 8008dfc:	edd3 7a00 	vldr	s15, [r3]
 8008e00:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8008fa4 <main+0x824>
 8008e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e0c:	d431      	bmi.n	8008e72 <main+0x6f2>
 8008e0e:	4b58      	ldr	r3, [pc, #352]	; (8008f70 <main+0x7f0>)
 8008e10:	edd3 7a00 	vldr	s15, [r3]
 8008e14:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8008fa8 <main+0x828>
 8008e18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e20:	dc27      	bgt.n	8008e72 <main+0x6f2>
			B_mean < 1990.0f || B_mean > 2020.0f ||
 8008e22:	4b55      	ldr	r3, [pc, #340]	; (8008f78 <main+0x7f8>)
 8008e24:	edd3 7a00 	vldr	s15, [r3]
	if (A_mean < 2030.0f || A_mean > 2060.0f ||
 8008e28:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8008fac <main+0x82c>
 8008e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e34:	d41d      	bmi.n	8008e72 <main+0x6f2>
			B_mean < 1990.0f || B_mean > 2020.0f ||
 8008e36:	4b50      	ldr	r3, [pc, #320]	; (8008f78 <main+0x7f8>)
 8008e38:	edd3 7a00 	vldr	s15, [r3]
 8008e3c:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8008fb0 <main+0x830>
 8008e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e48:	dc13      	bgt.n	8008e72 <main+0x6f2>
			C_mean < 1990.0f || C_mean > 2020.0f ){
 8008e4a:	4b4d      	ldr	r3, [pc, #308]	; (8008f80 <main+0x800>)
 8008e4c:	edd3 7a00 	vldr	s15, [r3]
			B_mean < 1990.0f || B_mean > 2020.0f ||
 8008e50:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8008fac <main+0x82c>
 8008e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e5c:	d409      	bmi.n	8008e72 <main+0x6f2>
			C_mean < 1990.0f || C_mean > 2020.0f ){
 8008e5e:	4b48      	ldr	r3, [pc, #288]	; (8008f80 <main+0x800>)
 8008e60:	edd3 7a00 	vldr	s15, [r3]
 8008e64:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8008fb0 <main+0x830>
 8008e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e70:	dd05      	ble.n	8008e7e <main+0x6fe>
		sys_err |= 1 << 2U;
 8008e72:	4b4b      	ldr	r3, [pc, #300]	; (8008fa0 <main+0x820>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f043 0304 	orr.w	r3, r3, #4
 8008e7a:	4a49      	ldr	r2, [pc, #292]	; (8008fa0 <main+0x820>)
 8008e7c:	6013      	str	r3, [r2, #0]
	 *    WELCOME
	 *                                                                           *
	 *****************************************************************************
	 */

	sprintf(buf, "\r\n\r\nWELCOME TO MUSCLEmaster \r\n\r\n angle: %u EncVal %u \r\n error %d \r\n",
 8008e7e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8008e80:	4b4c      	ldr	r3, [pc, #304]	; (8008fb4 <main+0x834>)
 8008e82:	6819      	ldr	r1, [r3, #0]
 8008e84:	4b46      	ldr	r3, [pc, #280]	; (8008fa0 <main+0x820>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	494a      	ldr	r1, [pc, #296]	; (8008fb8 <main+0x838>)
 8008e8e:	483f      	ldr	r0, [pc, #252]	; (8008f8c <main+0x80c>)
 8008e90:	f004 f83c 	bl	800cf0c <siprintf>
			angle, init_EncVal ,
			sys_err);
	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 8008e94:	4b3e      	ldr	r3, [pc, #248]	; (8008f90 <main+0x810>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	695a      	ldr	r2, [r3, #20]
 8008e9a:	4b3d      	ldr	r3, [pc, #244]	; (8008f90 <main+0x810>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ea2:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 8008ea4:	4c39      	ldr	r4, [pc, #228]	; (8008f8c <main+0x80c>)
 8008ea6:	4b3a      	ldr	r3, [pc, #232]	; (8008f90 <main+0x810>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3304      	adds	r3, #4
 8008eac:	461d      	mov	r5, r3
 8008eae:	4837      	ldr	r0, [pc, #220]	; (8008f8c <main+0x80c>)
 8008eb0:	f7f7 f98e 	bl	80001d0 <strlen>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	462a      	mov	r2, r5
 8008eb8:	4621      	mov	r1, r4
 8008eba:	4836      	ldr	r0, [pc, #216]	; (8008f94 <main+0x814>)
 8008ebc:	f7f9 ff2a 	bl	8002d14 <HAL_DMA_Start_IT>

	HAL_Delay(10); //some delay needed othwise the first print statement in while will overwrite
 8008ec0:	200a      	movs	r0, #10
 8008ec2:	f7f8 f8b3 	bl	800102c <HAL_Delay>
	 *                                                                           *
	 *    SYSTEM START
	 *                                                                           *
	 *****************************************************************************
	 */
	playSound( 3, 100, 20);
 8008ec6:	2214      	movs	r2, #20
 8008ec8:	2164      	movs	r1, #100	; 0x64
 8008eca:	2003      	movs	r0, #3
 8008ecc:	f001 fac6 	bl	800a45c <playSound>
	playSound( 2, 100, 40);
 8008ed0:	2228      	movs	r2, #40	; 0x28
 8008ed2:	2164      	movs	r1, #100	; 0x64
 8008ed4:	2002      	movs	r0, #2
 8008ed6:	f001 fac1 	bl	800a45c <playSound>
	playSound( 1, 100, 80);
 8008eda:	2250      	movs	r2, #80	; 0x50
 8008edc:	2164      	movs	r1, #100	; 0x64
 8008ede:	2001      	movs	r0, #1
 8008ee0:	f001 fabc 	bl	800a45c <playSound>
	HAL_Delay(100); // So the system stops vibrating
 8008ee4:	2064      	movs	r0, #100	; 0x64
 8008ee6:	f7f8 f8a1 	bl	800102c <HAL_Delay>

	sw_enable_pwm = true;
 8008eea:	4b34      	ldr	r3, [pc, #208]	; (8008fbc <main+0x83c>)
 8008eec:	2201      	movs	r2, #1
 8008eee:	701a      	strb	r2, [r3, #0]
	amp = 0.01f;
 8008ef0:	4b33      	ldr	r3, [pc, #204]	; (8008fc0 <main+0x840>)
 8008ef2:	4a34      	ldr	r2, [pc, #208]	; (8008fc4 <main+0x844>)
 8008ef4:	601a      	str	r2, [r3, #0]
		 *****************************************************************************
		 *****************************************************************************
		 */

		// --- calling fast control task
		if (analog_samples_counter >= ANALOG_SAMPLES_N){
 8008ef6:	4b34      	ldr	r3, [pc, #208]	; (8008fc8 <main+0x848>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b1f      	cmp	r3, #31
 8008efc:	d913      	bls.n	8008f26 <main+0x7a6>
			fast_control_task();
 8008efe:	f002 f8f3 	bl	800b0e8 <fast_control_task>
			print_prep_task(prep_counter);
 8008f02:	4b32      	ldr	r3, [pc, #200]	; (8008fcc <main+0x84c>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f002 fd50 	bl	800b9ac <print_prep_task>

			analog_samples_counter = 0;
 8008f0c:	4b2e      	ldr	r3, [pc, #184]	; (8008fc8 <main+0x848>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	601a      	str	r2, [r3, #0]
			fast_control_task_counter ++;
 8008f12:	4b2f      	ldr	r3, [pc, #188]	; (8008fd0 <main+0x850>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3301      	adds	r3, #1
 8008f18:	4a2d      	ldr	r2, [pc, #180]	; (8008fd0 <main+0x850>)
 8008f1a:	6013      	str	r3, [r2, #0]
			prep_counter ++;
 8008f1c:	4b2b      	ldr	r3, [pc, #172]	; (8008fcc <main+0x84c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3301      	adds	r3, #1
 8008f22:	4a2a      	ldr	r2, [pc, #168]	; (8008fcc <main+0x84c>)
 8008f24:	6013      	str	r3, [r2, #0]
		}

		// --- calling slow control task
		if(fast_control_task_counter >= FAST_PER_SLOW){
 8008f26:	4b2a      	ldr	r3, [pc, #168]	; (8008fd0 <main+0x850>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b07      	cmp	r3, #7
 8008f2c:	d909      	bls.n	8008f42 <main+0x7c2>
			slow_control_task();
 8008f2e:	f002 faf9 	bl	800b524 <slow_control_task>

			fast_control_task_counter = 0;
 8008f32:	4b27      	ldr	r3, [pc, #156]	; (8008fd0 <main+0x850>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	601a      	str	r2, [r3, #0]
			slow_control_task_counter ++;
 8008f38:	4b26      	ldr	r3, [pc, #152]	; (8008fd4 <main+0x854>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	4a25      	ldr	r2, [pc, #148]	; (8008fd4 <main+0x854>)
 8008f40:	6013      	str	r3, [r2, #0]
		}

		// --- calling print task
		static uint32_t last_ui_task_cnt = 0;
		uint32_t t_since_last_ui_task = TIM5->CNT - last_ui_task_cnt; //TIM5 100kHz = 10mus
 8008f42:	4b25      	ldr	r3, [pc, #148]	; (8008fd8 <main+0x858>)
 8008f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f46:	4b25      	ldr	r3, [pc, #148]	; (8008fdc <main+0x85c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	633b      	str	r3, [r7, #48]	; 0x30
		if (t_since_last_ui_task > 2000000000){
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f50:	4a23      	ldr	r2, [pc, #140]	; (8008fe0 <main+0x860>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d902      	bls.n	8008f5c <main+0x7dc>
			t_since_last_ui_task -= 0xFFFFFFFF; // TODO needs to be checked
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	3301      	adds	r3, #1
 8008f5a:	633b      	str	r3, [r7, #48]	; 0x30
		}
		if(t_since_last_ui_task > 20000){ //5Hz
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d9c7      	bls.n	8008ef6 <main+0x776>
			last_ui_task_cnt = TIM5->CNT;
 8008f66:	4b1c      	ldr	r3, [pc, #112]	; (8008fd8 <main+0x858>)
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	e03b      	b.n	8008fe4 <main+0x864>
 8008f6c:	20000cb0 	.word	0x20000cb0
 8008f70:	20000030 	.word	0x20000030
 8008f74:	200005c4 	.word	0x200005c4
 8008f78:	20000034 	.word	0x20000034
 8008f7c:	20000cf8 	.word	0x20000cf8
 8008f80:	20000038 	.word	0x20000038
 8008f84:	43000000 	.word	0x43000000
 8008f88:	0800ea9c 	.word	0x0800ea9c
 8008f8c:	20001884 	.word	0x20001884
 8008f90:	20000584 	.word	0x20000584
 8008f94:	20000b28 	.word	0x20000b28
 8008f98:	20000bd0 	.word	0x20000bd0
 8008f9c:	3c872b02 	.word	0x3c872b02
 8008fa0:	20000144 	.word	0x20000144
 8008fa4:	44fdc000 	.word	0x44fdc000
 8008fa8:	4500c000 	.word	0x4500c000
 8008fac:	44f8c000 	.word	0x44f8c000
 8008fb0:	44fc8000 	.word	0x44fc8000
 8008fb4:	20002520 	.word	0x20002520
 8008fb8:	0800eab8 	.word	0x0800eab8
 8008fbc:	200000d1 	.word	0x200000d1
 8008fc0:	200000d4 	.word	0x200000d4
 8008fc4:	3c23d70a 	.word	0x3c23d70a
 8008fc8:	20000134 	.word	0x20000134
 8008fcc:	20000140 	.word	0x20000140
 8008fd0:	20000138 	.word	0x20000138
 8008fd4:	2000013c 	.word	0x2000013c
 8008fd8:	40000c00 	.word	0x40000c00
 8008fdc:	20000148 	.word	0x20000148
 8008fe0:	77359400 	.word	0x77359400
 8008fe4:	4a09      	ldr	r2, [pc, #36]	; (800900c <main+0x88c>)
 8008fe6:	6013      	str	r3, [r2, #0]
			uint32_t time10mus = TIM5->CNT;
 8008fe8:	4b09      	ldr	r3, [pc, #36]	; (8009010 <main+0x890>)
 8008fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fec:	627b      	str	r3, [r7, #36]	; 0x24

			keyboard_intake();
 8008fee:	f002 faa1 	bl	800b534 <keyboard_intake>

			if (print2uart){
 8008ff2:	4b08      	ldr	r3, [pc, #32]	; (8009014 <main+0x894>)
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <main+0x87e>
				print_task();
 8008ffa:	f003 f825 	bl	800c048 <print_task>
			}
			prep_counter = 0;
 8008ffe:	4b06      	ldr	r3, [pc, #24]	; (8009018 <main+0x898>)
 8009000:	2200      	movs	r2, #0
 8009002:	601a      	str	r2, [r3, #0]
			ch='.';
 8009004:	4b05      	ldr	r3, [pc, #20]	; (800901c <main+0x89c>)
 8009006:	222e      	movs	r2, #46	; 0x2e
 8009008:	701a      	strb	r2, [r3, #0]
	{
 800900a:	e774      	b.n	8008ef6 <main+0x776>
 800900c:	20000148 	.word	0x20000148
 8009010:	40000c00 	.word	0x40000c00
 8009014:	2000000e 	.word	0x2000000e
 8009018:	20000140 	.word	0x20000140
 800901c:	2000003c 	.word	0x2000003c

08009020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b098      	sub	sp, #96	; 0x60
 8009024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009026:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800902a:	2230      	movs	r2, #48	; 0x30
 800902c:	2100      	movs	r1, #0
 800902e:	4618      	mov	r0, r3
 8009030:	f003 ff30 	bl	800ce94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009034:	f107 031c 	add.w	r3, r7, #28
 8009038:	2200      	movs	r2, #0
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	605a      	str	r2, [r3, #4]
 800903e:	609a      	str	r2, [r3, #8]
 8009040:	60da      	str	r2, [r3, #12]
 8009042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009044:	f107 030c 	add.w	r3, r7, #12
 8009048:	2200      	movs	r2, #0
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	605a      	str	r2, [r3, #4]
 800904e:	609a      	str	r2, [r3, #8]
 8009050:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009052:	2300      	movs	r3, #0
 8009054:	60bb      	str	r3, [r7, #8]
 8009056:	4b32      	ldr	r3, [pc, #200]	; (8009120 <SystemClock_Config+0x100>)
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	4a31      	ldr	r2, [pc, #196]	; (8009120 <SystemClock_Config+0x100>)
 800905c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009060:	6413      	str	r3, [r2, #64]	; 0x40
 8009062:	4b2f      	ldr	r3, [pc, #188]	; (8009120 <SystemClock_Config+0x100>)
 8009064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800906a:	60bb      	str	r3, [r7, #8]
 800906c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800906e:	2300      	movs	r3, #0
 8009070:	607b      	str	r3, [r7, #4]
 8009072:	4b2c      	ldr	r3, [pc, #176]	; (8009124 <SystemClock_Config+0x104>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a2b      	ldr	r2, [pc, #172]	; (8009124 <SystemClock_Config+0x104>)
 8009078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	4b29      	ldr	r3, [pc, #164]	; (8009124 <SystemClock_Config+0x104>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009086:	607b      	str	r3, [r7, #4]
 8009088:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800908a:	2309      	movs	r3, #9
 800908c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800908e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009092:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009094:	2301      	movs	r3, #1
 8009096:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009098:	2302      	movs	r3, #2
 800909a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800909c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80090a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80090a2:	2304      	movs	r3, #4
 80090a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80090a6:	23a8      	movs	r3, #168	; 0xa8
 80090a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80090aa:	2302      	movs	r3, #2
 80090ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80090ae:	2307      	movs	r3, #7
 80090b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80090b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fb fbd2 	bl	8004860 <HAL_RCC_OscConfig>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80090c2:	f002 ffef 	bl	800c0a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80090c6:	230f      	movs	r3, #15
 80090c8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80090ca:	2302      	movs	r3, #2
 80090cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80090ce:	2300      	movs	r3, #0
 80090d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80090d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80090d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80090d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80090de:	f107 031c 	add.w	r3, r7, #28
 80090e2:	2105      	movs	r1, #5
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fb fe2b 	bl	8004d40 <HAL_RCC_ClockConfig>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80090f0:	f002 ffd8 	bl	800c0a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80090f4:	2302      	movs	r3, #2
 80090f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80090f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090fc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80090fe:	f107 030c 	add.w	r3, r7, #12
 8009102:	4618      	mov	r0, r3
 8009104:	f7fc f81a 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d001      	beq.n	8009112 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800910e:	f002 ffc9 	bl	800c0a4 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8009112:	f7fb fefb 	bl	8004f0c <HAL_RCC_EnableCSS>
}
 8009116:	bf00      	nop
 8009118:	3760      	adds	r7, #96	; 0x60
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	40023800 	.word	0x40023800
 8009124:	40007000 	.word	0x40007000

08009128 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b090      	sub	sp, #64	; 0x40
 800912c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800912e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009132:	2200      	movs	r2, #0
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	605a      	str	r2, [r3, #4]
 8009138:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800913a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800913e:	2200      	movs	r2, #0
 8009140:	601a      	str	r2, [r3, #0]
 8009142:	605a      	str	r2, [r3, #4]
 8009144:	609a      	str	r2, [r3, #8]
 8009146:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8009148:	1d3b      	adds	r3, r7, #4
 800914a:	2220      	movs	r2, #32
 800914c:	2100      	movs	r1, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f003 fea0 	bl	800ce94 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8009154:	4b86      	ldr	r3, [pc, #536]	; (8009370 <MX_ADC1_Init+0x248>)
 8009156:	4a87      	ldr	r2, [pc, #540]	; (8009374 <MX_ADC1_Init+0x24c>)
 8009158:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800915a:	4b85      	ldr	r3, [pc, #532]	; (8009370 <MX_ADC1_Init+0x248>)
 800915c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009160:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009162:	4b83      	ldr	r3, [pc, #524]	; (8009370 <MX_ADC1_Init+0x248>)
 8009164:	2200      	movs	r2, #0
 8009166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8009168:	4b81      	ldr	r3, [pc, #516]	; (8009370 <MX_ADC1_Init+0x248>)
 800916a:	2201      	movs	r2, #1
 800916c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800916e:	4b80      	ldr	r3, [pc, #512]	; (8009370 <MX_ADC1_Init+0x248>)
 8009170:	2201      	movs	r2, #1
 8009172:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009174:	4b7e      	ldr	r3, [pc, #504]	; (8009370 <MX_ADC1_Init+0x248>)
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800917c:	4b7c      	ldr	r3, [pc, #496]	; (8009370 <MX_ADC1_Init+0x248>)
 800917e:	2200      	movs	r2, #0
 8009180:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009182:	4b7b      	ldr	r3, [pc, #492]	; (8009370 <MX_ADC1_Init+0x248>)
 8009184:	4a7c      	ldr	r2, [pc, #496]	; (8009378 <MX_ADC1_Init+0x250>)
 8009186:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009188:	4b79      	ldr	r3, [pc, #484]	; (8009370 <MX_ADC1_Init+0x248>)
 800918a:	2200      	movs	r2, #0
 800918c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 800918e:	4b78      	ldr	r3, [pc, #480]	; (8009370 <MX_ADC1_Init+0x248>)
 8009190:	2208      	movs	r2, #8
 8009192:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8009194:	4b76      	ldr	r3, [pc, #472]	; (8009370 <MX_ADC1_Init+0x248>)
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800919c:	4b74      	ldr	r3, [pc, #464]	; (8009370 <MX_ADC1_Init+0x248>)
 800919e:	2200      	movs	r2, #0
 80091a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80091a2:	4873      	ldr	r0, [pc, #460]	; (8009370 <MX_ADC1_Init+0x248>)
 80091a4:	f7f7 ff64 	bl	8001070 <HAL_ADC_Init>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80091ae:	f002 ff79 	bl	800c0a4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_TRIPLEMODE_INJECSIMULT;
 80091b2:	2315      	movs	r3, #21
 80091b4:	637b      	str	r3, [r7, #52]	; 0x34
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80091b6:	2300      	movs	r3, #0
 80091b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80091ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80091be:	4619      	mov	r1, r3
 80091c0:	486b      	ldr	r0, [pc, #428]	; (8009370 <MX_ADC1_Init+0x248>)
 80091c2:	f7f8 ff27 	bl	8002014 <HAL_ADCEx_MultiModeConfigChannel>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80091cc:	f002 ff6a 	bl	800c0a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80091d0:	230b      	movs	r3, #11
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 1;
 80091d4:	2301      	movs	r3, #1
 80091d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80091d8:	2300      	movs	r3, #0
 80091da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80091dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091e0:	4619      	mov	r1, r3
 80091e2:	4863      	ldr	r0, [pc, #396]	; (8009370 <MX_ADC1_Init+0x248>)
 80091e4:	f7f8 f9e2 	bl	80015ac <HAL_ADC_ConfigChannel>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80091ee:	f002 ff59 	bl	800c0a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80091f2:	2305      	movs	r3, #5
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 2;
 80091f6:	2302      	movs	r3, #2
 80091f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80091fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091fe:	4619      	mov	r1, r3
 8009200:	485b      	ldr	r0, [pc, #364]	; (8009370 <MX_ADC1_Init+0x248>)
 8009202:	f7f8 f9d3 	bl	80015ac <HAL_ADC_ConfigChannel>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800920c:	f002 ff4a 	bl	800c0a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009210:	230e      	movs	r3, #14
 8009212:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 3;
 8009214:	2303      	movs	r3, #3
 8009216:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8009218:	2301      	movs	r3, #1
 800921a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800921c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009220:	4619      	mov	r1, r3
 8009222:	4853      	ldr	r0, [pc, #332]	; (8009370 <MX_ADC1_Init+0x248>)
 8009224:	f7f8 f9c2 	bl	80015ac <HAL_ADC_ConfigChannel>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 800922e:	f002 ff39 	bl	800c0a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8009232:	2301      	movs	r3, #1
 8009234:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 4;
 8009236:	2304      	movs	r3, #4
 8009238:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800923a:	2300      	movs	r3, #0
 800923c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800923e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009242:	4619      	mov	r1, r3
 8009244:	484a      	ldr	r0, [pc, #296]	; (8009370 <MX_ADC1_Init+0x248>)
 8009246:	f7f8 f9b1 	bl	80015ac <HAL_ADC_ConfigChannel>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8009250:	f002 ff28 	bl	800c0a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8009254:	2310      	movs	r3, #16
 8009256:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 5;
 8009258:	2305      	movs	r3, #5
 800925a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800925c:	2301      	movs	r3, #1
 800925e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009264:	4619      	mov	r1, r3
 8009266:	4842      	ldr	r0, [pc, #264]	; (8009370 <MX_ADC1_Init+0x248>)
 8009268:	f7f8 f9a0 	bl	80015ac <HAL_ADC_ConfigChannel>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8009272:	f002 ff17 	bl	800c0a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8009276:	2311      	movs	r3, #17
 8009278:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 6;
 800927a:	2306      	movs	r3, #6
 800927c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800927e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009282:	4619      	mov	r1, r3
 8009284:	483a      	ldr	r0, [pc, #232]	; (8009370 <MX_ADC1_Init+0x248>)
 8009286:	f7f8 f991 	bl	80015ac <HAL_ADC_ConfigChannel>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <MX_ADC1_Init+0x16c>
  {
    Error_Handler();
 8009290:	f002 ff08 	bl	800c0a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8009294:	2312      	movs	r3, #18
 8009296:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 7;
 8009298:	2307      	movs	r3, #7
 800929a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800929c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092a0:	4619      	mov	r1, r3
 80092a2:	4833      	ldr	r0, [pc, #204]	; (8009370 <MX_ADC1_Init+0x248>)
 80092a4:	f7f8 f982 	bl	80015ac <HAL_ADC_ConfigChannel>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 80092ae:	f002 fef9 	bl	800c0a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80092b2:	2308      	movs	r3, #8
 80092b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 8;
 80092b6:	2308      	movs	r3, #8
 80092b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80092ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092be:	4619      	mov	r1, r3
 80092c0:	482b      	ldr	r0, [pc, #172]	; (8009370 <MX_ADC1_Init+0x248>)
 80092c2:	f7f8 f973 	bl	80015ac <HAL_ADC_ConfigChannel>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d001      	beq.n	80092d0 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80092cc:	f002 feea 	bl	800c0a4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 80092d0:	230b      	movs	r3, #11
 80092d2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 1;
 80092d4:	2301      	movs	r3, #1
 80092d6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 4;
 80092d8:	2304      	movs	r3, #4
 80092da:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80092dc:	2300      	movs	r3, #0
 80092de:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 80092e0:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80092e4:	623b      	str	r3, [r7, #32]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80092e6:	2300      	movs	r3, #0
 80092e8:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80092ea:	2300      	movs	r3, #0
 80092ec:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80092ee:	2300      	movs	r3, #0
 80092f0:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80092f6:	1d3b      	adds	r3, r7, #4
 80092f8:	4619      	mov	r1, r3
 80092fa:	481d      	ldr	r0, [pc, #116]	; (8009370 <MX_ADC1_Init+0x248>)
 80092fc:	f7f8 fcf6 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 8009306:	f002 fecd 	bl	800c0a4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 800930a:	2305      	movs	r3, #5
 800930c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 2;
 800930e:	2302      	movs	r3, #2
 8009310:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8009312:	1d3b      	adds	r3, r7, #4
 8009314:	4619      	mov	r1, r3
 8009316:	4816      	ldr	r0, [pc, #88]	; (8009370 <MX_ADC1_Init+0x248>)
 8009318:	f7f8 fce8 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <MX_ADC1_Init+0x1fe>
  {
    Error_Handler();
 8009322:	f002 febf 	bl	800c0a4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8009326:	230e      	movs	r3, #14
 8009328:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 3;
 800932a:	2303      	movs	r3, #3
 800932c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 800932e:	2301      	movs	r3, #1
 8009330:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8009332:	1d3b      	adds	r3, r7, #4
 8009334:	4619      	mov	r1, r3
 8009336:	480e      	ldr	r0, [pc, #56]	; (8009370 <MX_ADC1_Init+0x248>)
 8009338:	f7f8 fcd8 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <MX_ADC1_Init+0x21e>
  {
    Error_Handler();
 8009342:	f002 feaf 	bl	800c0a4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8009346:	2301      	movs	r3, #1
 8009348:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 4;
 800934a:	2304      	movs	r3, #4
 800934c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8009352:	1d3b      	adds	r3, r7, #4
 8009354:	4619      	mov	r1, r3
 8009356:	4806      	ldr	r0, [pc, #24]	; (8009370 <MX_ADC1_Init+0x248>)
 8009358:	f7f8 fcc8 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d001      	beq.n	8009366 <MX_ADC1_Init+0x23e>
  {
    Error_Handler();
 8009362:	f002 fe9f 	bl	800c0a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009366:	bf00      	nop
 8009368:	3740      	adds	r7, #64	; 0x40
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	20000cb0 	.word	0x20000cb0
 8009374:	40012000 	.word	0x40012000
 8009378:	0f000001 	.word	0x0f000001

0800937c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08c      	sub	sp, #48	; 0x30
 8009380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009382:	f107 0320 	add.w	r3, r7, #32
 8009386:	2200      	movs	r2, #0
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	605a      	str	r2, [r3, #4]
 800938c:	609a      	str	r2, [r3, #8]
 800938e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8009390:	463b      	mov	r3, r7
 8009392:	2220      	movs	r2, #32
 8009394:	2100      	movs	r1, #0
 8009396:	4618      	mov	r0, r3
 8009398:	f003 fd7c 	bl	800ce94 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800939c:	4b5a      	ldr	r3, [pc, #360]	; (8009508 <MX_ADC2_Init+0x18c>)
 800939e:	4a5b      	ldr	r2, [pc, #364]	; (800950c <MX_ADC2_Init+0x190>)
 80093a0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80093a2:	4b59      	ldr	r3, [pc, #356]	; (8009508 <MX_ADC2_Init+0x18c>)
 80093a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80093a8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80093aa:	4b57      	ldr	r3, [pc, #348]	; (8009508 <MX_ADC2_Init+0x18c>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80093b0:	4b55      	ldr	r3, [pc, #340]	; (8009508 <MX_ADC2_Init+0x18c>)
 80093b2:	2201      	movs	r2, #1
 80093b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80093b6:	4b54      	ldr	r3, [pc, #336]	; (8009508 <MX_ADC2_Init+0x18c>)
 80093b8:	2201      	movs	r2, #1
 80093ba:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80093bc:	4b52      	ldr	r3, [pc, #328]	; (8009508 <MX_ADC2_Init+0x18c>)
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80093c4:	4b50      	ldr	r3, [pc, #320]	; (8009508 <MX_ADC2_Init+0x18c>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80093ca:	4b4f      	ldr	r3, [pc, #316]	; (8009508 <MX_ADC2_Init+0x18c>)
 80093cc:	2204      	movs	r2, #4
 80093ce:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80093d0:	4b4d      	ldr	r3, [pc, #308]	; (8009508 <MX_ADC2_Init+0x18c>)
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80093d8:	4b4b      	ldr	r3, [pc, #300]	; (8009508 <MX_ADC2_Init+0x18c>)
 80093da:	2200      	movs	r2, #0
 80093dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80093de:	484a      	ldr	r0, [pc, #296]	; (8009508 <MX_ADC2_Init+0x18c>)
 80093e0:	f7f7 fe46 	bl	8001070 <HAL_ADC_Init>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 80093ea:	f002 fe5b 	bl	800c0a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80093ee:	230c      	movs	r3, #12
 80093f0:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80093f2:	2301      	movs	r3, #1
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80093f6:	2300      	movs	r3, #0
 80093f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80093fa:	f107 0320 	add.w	r3, r7, #32
 80093fe:	4619      	mov	r1, r3
 8009400:	4841      	ldr	r0, [pc, #260]	; (8009508 <MX_ADC2_Init+0x18c>)
 8009402:	f7f8 f8d3 	bl	80015ac <HAL_ADC_ConfigChannel>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800940c:	f002 fe4a 	bl	800c0a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8009410:	2304      	movs	r3, #4
 8009412:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8009414:	2302      	movs	r3, #2
 8009416:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009418:	f107 0320 	add.w	r3, r7, #32
 800941c:	4619      	mov	r1, r3
 800941e:	483a      	ldr	r0, [pc, #232]	; (8009508 <MX_ADC2_Init+0x18c>)
 8009420:	f7f8 f8c4 	bl	80015ac <HAL_ADC_ConfigChannel>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800942a:	f002 fe3b 	bl	800c0a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800942e:	230f      	movs	r3, #15
 8009430:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 8009432:	2303      	movs	r3, #3
 8009434:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8009436:	2301      	movs	r3, #1
 8009438:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800943a:	f107 0320 	add.w	r3, r7, #32
 800943e:	4619      	mov	r1, r3
 8009440:	4831      	ldr	r0, [pc, #196]	; (8009508 <MX_ADC2_Init+0x18c>)
 8009442:	f7f8 f8b3 	bl	80015ac <HAL_ADC_ConfigChannel>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 800944c:	f002 fe2a 	bl	800c0a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8009450:	2302      	movs	r3, #2
 8009452:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 8009454:	2304      	movs	r3, #4
 8009456:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009458:	2300      	movs	r3, #0
 800945a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800945c:	f107 0320 	add.w	r3, r7, #32
 8009460:	4619      	mov	r1, r3
 8009462:	4829      	ldr	r0, [pc, #164]	; (8009508 <MX_ADC2_Init+0x18c>)
 8009464:	f7f8 f8a2 	bl	80015ac <HAL_ADC_ConfigChannel>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <MX_ADC2_Init+0xf6>
  {
    Error_Handler();
 800946e:	f002 fe19 	bl	800c0a4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8009472:	230c      	movs	r3, #12
 8009474:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8009476:	2301      	movs	r3, #1
 8009478:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800947a:	2304      	movs	r3, #4
 800947c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800947e:	2300      	movs	r3, #0
 8009480:	60bb      	str	r3, [r7, #8]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8009482:	2300      	movs	r3, #0
 8009484:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8009486:	2300      	movs	r3, #0
 8009488:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800948e:	463b      	mov	r3, r7
 8009490:	4619      	mov	r1, r3
 8009492:	481d      	ldr	r0, [pc, #116]	; (8009508 <MX_ADC2_Init+0x18c>)
 8009494:	f7f8 fc2a 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 800949e:	f002 fe01 	bl	800c0a4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80094a2:	2304      	movs	r3, #4
 80094a4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80094a6:	2302      	movs	r3, #2
 80094a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80094aa:	463b      	mov	r3, r7
 80094ac:	4619      	mov	r1, r3
 80094ae:	4816      	ldr	r0, [pc, #88]	; (8009508 <MX_ADC2_Init+0x18c>)
 80094b0:	f7f8 fc1c 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <MX_ADC2_Init+0x142>
  {
    Error_Handler();
 80094ba:	f002 fdf3 	bl	800c0a4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 80094be:	230f      	movs	r3, #15
 80094c0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 80094c2:	2303      	movs	r3, #3
 80094c4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 80094c6:	2301      	movs	r3, #1
 80094c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80094ca:	463b      	mov	r3, r7
 80094cc:	4619      	mov	r1, r3
 80094ce:	480e      	ldr	r0, [pc, #56]	; (8009508 <MX_ADC2_Init+0x18c>)
 80094d0:	f7f8 fc0c 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <MX_ADC2_Init+0x162>
  {
    Error_Handler();
 80094da:	f002 fde3 	bl	800c0a4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80094de:	2302      	movs	r3, #2
 80094e0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 80094e2:	2304      	movs	r3, #4
 80094e4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80094e6:	2300      	movs	r3, #0
 80094e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80094ea:	463b      	mov	r3, r7
 80094ec:	4619      	mov	r1, r3
 80094ee:	4806      	ldr	r0, [pc, #24]	; (8009508 <MX_ADC2_Init+0x18c>)
 80094f0:	f7f8 fbfc 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <MX_ADC2_Init+0x182>
  {
    Error_Handler();
 80094fa:	f002 fdd3 	bl	800c0a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80094fe:	bf00      	nop
 8009500:	3730      	adds	r7, #48	; 0x30
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	200005c4 	.word	0x200005c4
 800950c:	40012100 	.word	0x40012100

08009510 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b08c      	sub	sp, #48	; 0x30
 8009514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009516:	f107 0320 	add.w	r3, r7, #32
 800951a:	2200      	movs	r2, #0
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	605a      	str	r2, [r3, #4]
 8009520:	609a      	str	r2, [r3, #8]
 8009522:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8009524:	463b      	mov	r3, r7
 8009526:	2220      	movs	r2, #32
 8009528:	2100      	movs	r1, #0
 800952a:	4618      	mov	r0, r3
 800952c:	f003 fcb2 	bl	800ce94 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8009530:	4b54      	ldr	r3, [pc, #336]	; (8009684 <MX_ADC3_Init+0x174>)
 8009532:	4a55      	ldr	r2, [pc, #340]	; (8009688 <MX_ADC3_Init+0x178>)
 8009534:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8009536:	4b53      	ldr	r3, [pc, #332]	; (8009684 <MX_ADC3_Init+0x174>)
 8009538:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800953c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800953e:	4b51      	ldr	r3, [pc, #324]	; (8009684 <MX_ADC3_Init+0x174>)
 8009540:	2200      	movs	r2, #0
 8009542:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8009544:	4b4f      	ldr	r3, [pc, #316]	; (8009684 <MX_ADC3_Init+0x174>)
 8009546:	2201      	movs	r2, #1
 8009548:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800954a:	4b4e      	ldr	r3, [pc, #312]	; (8009684 <MX_ADC3_Init+0x174>)
 800954c:	2201      	movs	r2, #1
 800954e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8009550:	4b4c      	ldr	r3, [pc, #304]	; (8009684 <MX_ADC3_Init+0x174>)
 8009552:	2200      	movs	r2, #0
 8009554:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009558:	4b4a      	ldr	r3, [pc, #296]	; (8009684 <MX_ADC3_Init+0x174>)
 800955a:	2200      	movs	r2, #0
 800955c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 4;
 800955e:	4b49      	ldr	r3, [pc, #292]	; (8009684 <MX_ADC3_Init+0x174>)
 8009560:	2204      	movs	r2, #4
 8009562:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8009564:	4b47      	ldr	r3, [pc, #284]	; (8009684 <MX_ADC3_Init+0x174>)
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800956c:	4b45      	ldr	r3, [pc, #276]	; (8009684 <MX_ADC3_Init+0x174>)
 800956e:	2200      	movs	r2, #0
 8009570:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8009572:	4844      	ldr	r0, [pc, #272]	; (8009684 <MX_ADC3_Init+0x174>)
 8009574:	f7f7 fd7c 	bl	8001070 <HAL_ADC_Init>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d001      	beq.n	8009582 <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 800957e:	f002 fd91 	bl	800c0a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8009582:	230d      	movs	r3, #13
 8009584:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8009586:	2301      	movs	r3, #1
 8009588:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800958a:	2301      	movs	r3, #1
 800958c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800958e:	f107 0320 	add.w	r3, r7, #32
 8009592:	4619      	mov	r1, r3
 8009594:	483b      	ldr	r0, [pc, #236]	; (8009684 <MX_ADC3_Init+0x174>)
 8009596:	f7f8 f809 	bl	80015ac <HAL_ADC_ConfigChannel>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 80095a0:	f002 fd80 	bl	800c0a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 2;
 80095a4:	2302      	movs	r3, #2
 80095a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80095a8:	f107 0320 	add.w	r3, r7, #32
 80095ac:	4619      	mov	r1, r3
 80095ae:	4835      	ldr	r0, [pc, #212]	; (8009684 <MX_ADC3_Init+0x174>)
 80095b0:	f7f7 fffc 	bl	80015ac <HAL_ADC_ConfigChannel>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d001      	beq.n	80095be <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 80095ba:	f002 fd73 	bl	800c0a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80095be:	2303      	movs	r3, #3
 80095c0:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 80095c2:	2303      	movs	r3, #3
 80095c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80095c6:	f107 0320 	add.w	r3, r7, #32
 80095ca:	4619      	mov	r1, r3
 80095cc:	482d      	ldr	r0, [pc, #180]	; (8009684 <MX_ADC3_Init+0x174>)
 80095ce:	f7f7 ffed 	bl	80015ac <HAL_ADC_ConfigChannel>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 80095d8:	f002 fd64 	bl	800c0a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 4;
 80095dc:	2304      	movs	r3, #4
 80095de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80095e0:	f107 0320 	add.w	r3, r7, #32
 80095e4:	4619      	mov	r1, r3
 80095e6:	4827      	ldr	r0, [pc, #156]	; (8009684 <MX_ADC3_Init+0x174>)
 80095e8:	f7f7 ffe0 	bl	80015ac <HAL_ADC_ConfigChannel>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <MX_ADC3_Init+0xe6>
  {
    Error_Handler();
 80095f2:	f002 fd57 	bl	800c0a4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 80095f6:	230d      	movs	r3, #13
 80095f8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80095fa:	2301      	movs	r3, #1
 80095fc:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 80095fe:	2304      	movs	r3, #4
 8009600:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009602:	2300      	movs	r3, #0
 8009604:	60bb      	str	r3, [r7, #8]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8009606:	2300      	movs	r3, #0
 8009608:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800960a:	2300      	movs	r3, #0
 800960c:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8009612:	463b      	mov	r3, r7
 8009614:	4619      	mov	r1, r3
 8009616:	481b      	ldr	r0, [pc, #108]	; (8009684 <MX_ADC3_Init+0x174>)
 8009618:	f7f8 fb68 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <MX_ADC3_Init+0x116>
  {
    Error_Handler();
 8009622:	f002 fd3f 	bl	800c0a4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedRank = 2;
 8009626:	2302      	movs	r3, #2
 8009628:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800962a:	463b      	mov	r3, r7
 800962c:	4619      	mov	r1, r3
 800962e:	4815      	ldr	r0, [pc, #84]	; (8009684 <MX_ADC3_Init+0x174>)
 8009630:	f7f8 fb5c 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <MX_ADC3_Init+0x12e>
  {
    Error_Handler();
 800963a:	f002 fd33 	bl	800c0a4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800963e:	2303      	movs	r3, #3
 8009640:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8009642:	2303      	movs	r3, #3
 8009644:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8009646:	2301      	movs	r3, #1
 8009648:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800964a:	463b      	mov	r3, r7
 800964c:	4619      	mov	r1, r3
 800964e:	480d      	ldr	r0, [pc, #52]	; (8009684 <MX_ADC3_Init+0x174>)
 8009650:	f7f8 fb4c 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <MX_ADC3_Init+0x14e>
  {
    Error_Handler();
 800965a:	f002 fd23 	bl	800c0a4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedRank = 4;
 800965e:	2304      	movs	r3, #4
 8009660:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009662:	2300      	movs	r3, #0
 8009664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8009666:	463b      	mov	r3, r7
 8009668:	4619      	mov	r1, r3
 800966a:	4806      	ldr	r0, [pc, #24]	; (8009684 <MX_ADC3_Init+0x174>)
 800966c:	f7f8 fb3e 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <MX_ADC3_Init+0x16a>
  {
    Error_Handler();
 8009676:	f002 fd15 	bl	800c0a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800967a:	bf00      	nop
 800967c:	3730      	adds	r7, #48	; 0x30
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	20000cf8 	.word	0x20000cf8
 8009688:	40012200 	.word	0x40012200

0800968c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8009690:	4b17      	ldr	r3, [pc, #92]	; (80096f0 <MX_CAN1_Init+0x64>)
 8009692:	4a18      	ldr	r2, [pc, #96]	; (80096f4 <MX_CAN1_Init+0x68>)
 8009694:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8009696:	4b16      	ldr	r3, [pc, #88]	; (80096f0 <MX_CAN1_Init+0x64>)
 8009698:	2203      	movs	r2, #3
 800969a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800969c:	4b14      	ldr	r3, [pc, #80]	; (80096f0 <MX_CAN1_Init+0x64>)
 800969e:	2200      	movs	r2, #0
 80096a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80096a2:	4b13      	ldr	r3, [pc, #76]	; (80096f0 <MX_CAN1_Init+0x64>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80096a8:	4b11      	ldr	r3, [pc, #68]	; (80096f0 <MX_CAN1_Init+0x64>)
 80096aa:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80096ae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80096b0:	4b0f      	ldr	r3, [pc, #60]	; (80096f0 <MX_CAN1_Init+0x64>)
 80096b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80096b6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80096b8:	4b0d      	ldr	r3, [pc, #52]	; (80096f0 <MX_CAN1_Init+0x64>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80096be:	4b0c      	ldr	r3, [pc, #48]	; (80096f0 <MX_CAN1_Init+0x64>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80096c4:	4b0a      	ldr	r3, [pc, #40]	; (80096f0 <MX_CAN1_Init+0x64>)
 80096c6:	2200      	movs	r2, #0
 80096c8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80096ca:	4b09      	ldr	r3, [pc, #36]	; (80096f0 <MX_CAN1_Init+0x64>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80096d0:	4b07      	ldr	r3, [pc, #28]	; (80096f0 <MX_CAN1_Init+0x64>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80096d6:	4b06      	ldr	r3, [pc, #24]	; (80096f0 <MX_CAN1_Init+0x64>)
 80096d8:	2200      	movs	r2, #0
 80096da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80096dc:	4804      	ldr	r0, [pc, #16]	; (80096f0 <MX_CAN1_Init+0x64>)
 80096de:	f7f8 fcdf 	bl	80020a0 <HAL_CAN_Init>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80096e8:	f002 fcdc 	bl	800c0a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80096ec:	bf00      	nop
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	20001adc 	.word	0x20001adc
 80096f4:	40006400 	.word	0x40006400

080096f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80096fc:	4b12      	ldr	r3, [pc, #72]	; (8009748 <MX_I2C1_Init+0x50>)
 80096fe:	4a13      	ldr	r2, [pc, #76]	; (800974c <MX_I2C1_Init+0x54>)
 8009700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8009702:	4b11      	ldr	r3, [pc, #68]	; (8009748 <MX_I2C1_Init+0x50>)
 8009704:	4a12      	ldr	r2, [pc, #72]	; (8009750 <MX_I2C1_Init+0x58>)
 8009706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009708:	4b0f      	ldr	r3, [pc, #60]	; (8009748 <MX_I2C1_Init+0x50>)
 800970a:	2200      	movs	r2, #0
 800970c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800970e:	4b0e      	ldr	r3, [pc, #56]	; (8009748 <MX_I2C1_Init+0x50>)
 8009710:	2200      	movs	r2, #0
 8009712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009714:	4b0c      	ldr	r3, [pc, #48]	; (8009748 <MX_I2C1_Init+0x50>)
 8009716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800971a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800971c:	4b0a      	ldr	r3, [pc, #40]	; (8009748 <MX_I2C1_Init+0x50>)
 800971e:	2200      	movs	r2, #0
 8009720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009722:	4b09      	ldr	r3, [pc, #36]	; (8009748 <MX_I2C1_Init+0x50>)
 8009724:	2200      	movs	r2, #0
 8009726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009728:	4b07      	ldr	r3, [pc, #28]	; (8009748 <MX_I2C1_Init+0x50>)
 800972a:	2200      	movs	r2, #0
 800972c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800972e:	4b06      	ldr	r3, [pc, #24]	; (8009748 <MX_I2C1_Init+0x50>)
 8009730:	2200      	movs	r2, #0
 8009732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009734:	4804      	ldr	r0, [pc, #16]	; (8009748 <MX_I2C1_Init+0x50>)
 8009736:	f7f9 ffef 	bl	8003718 <HAL_I2C_Init>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009740:	f002 fcb0 	bl	800c0a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009744:	bf00      	nop
 8009746:	bd80      	pop	{r7, pc}
 8009748:	2000060c 	.word	0x2000060c
 800974c:	40005400 	.word	0x40005400
 8009750:	000186a0 	.word	0x000186a0

08009754 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8009758:	4b12      	ldr	r3, [pc, #72]	; (80097a4 <MX_I2C2_Init+0x50>)
 800975a:	4a13      	ldr	r2, [pc, #76]	; (80097a8 <MX_I2C2_Init+0x54>)
 800975c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800975e:	4b11      	ldr	r3, [pc, #68]	; (80097a4 <MX_I2C2_Init+0x50>)
 8009760:	4a12      	ldr	r2, [pc, #72]	; (80097ac <MX_I2C2_Init+0x58>)
 8009762:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009764:	4b0f      	ldr	r3, [pc, #60]	; (80097a4 <MX_I2C2_Init+0x50>)
 8009766:	2200      	movs	r2, #0
 8009768:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800976a:	4b0e      	ldr	r3, [pc, #56]	; (80097a4 <MX_I2C2_Init+0x50>)
 800976c:	2200      	movs	r2, #0
 800976e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009770:	4b0c      	ldr	r3, [pc, #48]	; (80097a4 <MX_I2C2_Init+0x50>)
 8009772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009776:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009778:	4b0a      	ldr	r3, [pc, #40]	; (80097a4 <MX_I2C2_Init+0x50>)
 800977a:	2200      	movs	r2, #0
 800977c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800977e:	4b09      	ldr	r3, [pc, #36]	; (80097a4 <MX_I2C2_Init+0x50>)
 8009780:	2200      	movs	r2, #0
 8009782:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009784:	4b07      	ldr	r3, [pc, #28]	; (80097a4 <MX_I2C2_Init+0x50>)
 8009786:	2200      	movs	r2, #0
 8009788:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800978a:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <MX_I2C2_Init+0x50>)
 800978c:	2200      	movs	r2, #0
 800978e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009790:	4804      	ldr	r0, [pc, #16]	; (80097a4 <MX_I2C2_Init+0x50>)
 8009792:	f7f9 ffc1 	bl	8003718 <HAL_I2C_Init>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800979c:	f002 fc82 	bl	800c0a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80097a0:	bf00      	nop
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20000a68 	.word	0x20000a68
 80097a8:	40005800 	.word	0x40005800
 80097ac:	000186a0 	.word	0x000186a0

080097b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80097b4:	4b0f      	ldr	r3, [pc, #60]	; (80097f4 <MX_RTC_Init+0x44>)
 80097b6:	4a10      	ldr	r2, [pc, #64]	; (80097f8 <MX_RTC_Init+0x48>)
 80097b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80097ba:	4b0e      	ldr	r3, [pc, #56]	; (80097f4 <MX_RTC_Init+0x44>)
 80097bc:	2200      	movs	r2, #0
 80097be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80097c0:	4b0c      	ldr	r3, [pc, #48]	; (80097f4 <MX_RTC_Init+0x44>)
 80097c2:	227f      	movs	r2, #127	; 0x7f
 80097c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80097c6:	4b0b      	ldr	r3, [pc, #44]	; (80097f4 <MX_RTC_Init+0x44>)
 80097c8:	22ff      	movs	r2, #255	; 0xff
 80097ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80097cc:	4b09      	ldr	r3, [pc, #36]	; (80097f4 <MX_RTC_Init+0x44>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80097d2:	4b08      	ldr	r3, [pc, #32]	; (80097f4 <MX_RTC_Init+0x44>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80097d8:	4b06      	ldr	r3, [pc, #24]	; (80097f4 <MX_RTC_Init+0x44>)
 80097da:	2200      	movs	r2, #0
 80097dc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80097de:	4805      	ldr	r0, [pc, #20]	; (80097f4 <MX_RTC_Init+0x44>)
 80097e0:	f7fb fd8e 	bl	8005300 <HAL_RTC_Init>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d001      	beq.n	80097ee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80097ea:	f002 fc5b 	bl	800c0a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80097ee:	bf00      	nop
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	20000da0 	.word	0x20000da0
 80097f8:	40002800 	.word	0x40002800

080097fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8009800:	4b18      	ldr	r3, [pc, #96]	; (8009864 <MX_SPI2_Init+0x68>)
 8009802:	4a19      	ldr	r2, [pc, #100]	; (8009868 <MX_SPI2_Init+0x6c>)
 8009804:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009806:	4b17      	ldr	r3, [pc, #92]	; (8009864 <MX_SPI2_Init+0x68>)
 8009808:	f44f 7282 	mov.w	r2, #260	; 0x104
 800980c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800980e:	4b15      	ldr	r3, [pc, #84]	; (8009864 <MX_SPI2_Init+0x68>)
 8009810:	2200      	movs	r2, #0
 8009812:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8009814:	4b13      	ldr	r3, [pc, #76]	; (8009864 <MX_SPI2_Init+0x68>)
 8009816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800981a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800981c:	4b11      	ldr	r3, [pc, #68]	; (8009864 <MX_SPI2_Init+0x68>)
 800981e:	2200      	movs	r2, #0
 8009820:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009822:	4b10      	ldr	r3, [pc, #64]	; (8009864 <MX_SPI2_Init+0x68>)
 8009824:	2201      	movs	r2, #1
 8009826:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8009828:	4b0e      	ldr	r3, [pc, #56]	; (8009864 <MX_SPI2_Init+0x68>)
 800982a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800982e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009830:	4b0c      	ldr	r3, [pc, #48]	; (8009864 <MX_SPI2_Init+0x68>)
 8009832:	2220      	movs	r2, #32
 8009834:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009836:	4b0b      	ldr	r3, [pc, #44]	; (8009864 <MX_SPI2_Init+0x68>)
 8009838:	2200      	movs	r2, #0
 800983a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800983c:	4b09      	ldr	r3, [pc, #36]	; (8009864 <MX_SPI2_Init+0x68>)
 800983e:	2200      	movs	r2, #0
 8009840:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009842:	4b08      	ldr	r3, [pc, #32]	; (8009864 <MX_SPI2_Init+0x68>)
 8009844:	2200      	movs	r2, #0
 8009846:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8009848:	4b06      	ldr	r3, [pc, #24]	; (8009864 <MX_SPI2_Init+0x68>)
 800984a:	220a      	movs	r2, #10
 800984c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800984e:	4805      	ldr	r0, [pc, #20]	; (8009864 <MX_SPI2_Init+0x68>)
 8009850:	f7fb fe3b 	bl	80054ca <HAL_SPI_Init>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800985a:	f002 fc23 	bl	800c0a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800985e:	bf00      	nop
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	200001a4 	.word	0x200001a4
 8009868:	40003800 	.word	0x40003800

0800986c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b096      	sub	sp, #88	; 0x58
 8009870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009872:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009876:	2200      	movs	r2, #0
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	605a      	str	r2, [r3, #4]
 800987c:	609a      	str	r2, [r3, #8]
 800987e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009880:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009884:	2200      	movs	r2, #0
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800988a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800988e:	2200      	movs	r2, #0
 8009890:	601a      	str	r2, [r3, #0]
 8009892:	605a      	str	r2, [r3, #4]
 8009894:	609a      	str	r2, [r3, #8]
 8009896:	60da      	str	r2, [r3, #12]
 8009898:	611a      	str	r2, [r3, #16]
 800989a:	615a      	str	r2, [r3, #20]
 800989c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800989e:	1d3b      	adds	r3, r7, #4
 80098a0:	2220      	movs	r2, #32
 80098a2:	2100      	movs	r1, #0
 80098a4:	4618      	mov	r0, r3
 80098a6:	f003 faf5 	bl	800ce94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80098aa:	4b57      	ldr	r3, [pc, #348]	; (8009a08 <MX_TIM1_Init+0x19c>)
 80098ac:	4a57      	ldr	r2, [pc, #348]	; (8009a0c <MX_TIM1_Init+0x1a0>)
 80098ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80098b0:	4b55      	ldr	r3, [pc, #340]	; (8009a08 <MX_TIM1_Init+0x19c>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80098b6:	4b54      	ldr	r3, [pc, #336]	; (8009a08 <MX_TIM1_Init+0x19c>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 80098bc:	4b52      	ldr	r3, [pc, #328]	; (8009a08 <MX_TIM1_Init+0x19c>)
 80098be:	f640 72ff 	movw	r2, #4095	; 0xfff
 80098c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80098c4:	4b50      	ldr	r3, [pc, #320]	; (8009a08 <MX_TIM1_Init+0x19c>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80098ca:	4b4f      	ldr	r3, [pc, #316]	; (8009a08 <MX_TIM1_Init+0x19c>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80098d0:	4b4d      	ldr	r3, [pc, #308]	; (8009a08 <MX_TIM1_Init+0x19c>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80098d6:	484c      	ldr	r0, [pc, #304]	; (8009a08 <MX_TIM1_Init+0x19c>)
 80098d8:	f7fc fc6a 	bl	80061b0 <HAL_TIM_Base_Init>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80098e2:	f002 fbdf 	bl	800c0a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80098e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80098ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80098f0:	4619      	mov	r1, r3
 80098f2:	4845      	ldr	r0, [pc, #276]	; (8009a08 <MX_TIM1_Init+0x19c>)
 80098f4:	f7fd f912 	bl	8006b1c <HAL_TIM_ConfigClockSource>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80098fe:	f002 fbd1 	bl	800c0a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009902:	4841      	ldr	r0, [pc, #260]	; (8009a08 <MX_TIM1_Init+0x19c>)
 8009904:	f7fc fd16 	bl	8006334 <HAL_TIM_PWM_Init>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800990e:	f002 fbc9 	bl	800c0a4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8009912:	483d      	ldr	r0, [pc, #244]	; (8009a08 <MX_TIM1_Init+0x19c>)
 8009914:	f7fc fc9b 	bl	800624e <HAL_TIM_OC_Init>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800991e:	f002 fbc1 	bl	800c0a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009922:	2300      	movs	r3, #0
 8009924:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009926:	2300      	movs	r3, #0
 8009928:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800992a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800992e:	4619      	mov	r1, r3
 8009930:	4835      	ldr	r0, [pc, #212]	; (8009a08 <MX_TIM1_Init+0x19c>)
 8009932:	f7fd fd03 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800993c:	f002 fbb2 	bl	800c0a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009940:	2360      	movs	r3, #96	; 0x60
 8009942:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8009944:	2300      	movs	r3, #0
 8009946:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009948:	2300      	movs	r3, #0
 800994a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800994c:	2300      	movs	r3, #0
 800994e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009950:	2300      	movs	r3, #0
 8009952:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009954:	2300      	movs	r3, #0
 8009956:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009958:	2300      	movs	r3, #0
 800995a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800995c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009960:	2200      	movs	r2, #0
 8009962:	4619      	mov	r1, r3
 8009964:	4828      	ldr	r0, [pc, #160]	; (8009a08 <MX_TIM1_Init+0x19c>)
 8009966:	f7fd f813 	bl	8006990 <HAL_TIM_PWM_ConfigChannel>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8009970:	f002 fb98 	bl	800c0a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009978:	2204      	movs	r2, #4
 800997a:	4619      	mov	r1, r3
 800997c:	4822      	ldr	r0, [pc, #136]	; (8009a08 <MX_TIM1_Init+0x19c>)
 800997e:	f7fd f807 	bl	8006990 <HAL_TIM_PWM_ConfigChannel>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8009988:	f002 fb8c 	bl	800c0a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800998c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009990:	2208      	movs	r2, #8
 8009992:	4619      	mov	r1, r3
 8009994:	481c      	ldr	r0, [pc, #112]	; (8009a08 <MX_TIM1_Init+0x19c>)
 8009996:	f7fc fffb 	bl	8006990 <HAL_TIM_PWM_ConfigChannel>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80099a0:	f002 fb80 	bl	800c0a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80099a4:	2330      	movs	r3, #48	; 0x30
 80099a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4095-1120;
 80099a8:	f640 339f 	movw	r3, #2975	; 0xb9f
 80099ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80099ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099b2:	220c      	movs	r2, #12
 80099b4:	4619      	mov	r1, r3
 80099b6:	4814      	ldr	r0, [pc, #80]	; (8009a08 <MX_TIM1_Init+0x19c>)
 80099b8:	f7fc ff8a 	bl	80068d0 <HAL_TIM_OC_ConfigChannel>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80099c2:	f002 fb6f 	bl	800c0a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80099c6:	2300      	movs	r3, #0
 80099c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80099ca:	2300      	movs	r3, #0
 80099cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80099ce:	2300      	movs	r3, #0
 80099d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80099d6:	2300      	movs	r3, #0
 80099d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80099da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80099de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80099e0:	2300      	movs	r3, #0
 80099e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80099e4:	1d3b      	adds	r3, r7, #4
 80099e6:	4619      	mov	r1, r3
 80099e8:	4807      	ldr	r0, [pc, #28]	; (8009a08 <MX_TIM1_Init+0x19c>)
 80099ea:	f7fd fd23 	bl	8007434 <HAL_TIMEx_ConfigBreakDeadTime>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d001      	beq.n	80099f8 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 80099f4:	f002 fb56 	bl	800c0a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80099f8:	4803      	ldr	r0, [pc, #12]	; (8009a08 <MX_TIM1_Init+0x19c>)
 80099fa:	f002 ff99 	bl	800c930 <HAL_TIM_MspPostInit>

}
 80099fe:	bf00      	nop
 8009a00:	3758      	adds	r7, #88	; 0x58
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	20000dc0 	.word	0x20000dc0
 8009a0c:	40010000 	.word	0x40010000

08009a10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b08e      	sub	sp, #56	; 0x38
 8009a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	601a      	str	r2, [r3, #0]
 8009a1e:	605a      	str	r2, [r3, #4]
 8009a20:	609a      	str	r2, [r3, #8]
 8009a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a24:	f107 0320 	add.w	r3, r7, #32
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009a2e:	1d3b      	adds	r3, r7, #4
 8009a30:	2200      	movs	r2, #0
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	605a      	str	r2, [r3, #4]
 8009a36:	609a      	str	r2, [r3, #8]
 8009a38:	60da      	str	r2, [r3, #12]
 8009a3a:	611a      	str	r2, [r3, #16]
 8009a3c:	615a      	str	r2, [r3, #20]
 8009a3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009a40:	4b2b      	ldr	r3, [pc, #172]	; (8009af0 <MX_TIM2_Init+0xe0>)
 8009a42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009a46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009a48:	4b29      	ldr	r3, [pc, #164]	; (8009af0 <MX_TIM2_Init+0xe0>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a4e:	4b28      	ldr	r3, [pc, #160]	; (8009af0 <MX_TIM2_Init+0xe0>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8009a54:	4b26      	ldr	r3, [pc, #152]	; (8009af0 <MX_TIM2_Init+0xe0>)
 8009a56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a5c:	4b24      	ldr	r3, [pc, #144]	; (8009af0 <MX_TIM2_Init+0xe0>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a62:	4b23      	ldr	r3, [pc, #140]	; (8009af0 <MX_TIM2_Init+0xe0>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009a68:	4821      	ldr	r0, [pc, #132]	; (8009af0 <MX_TIM2_Init+0xe0>)
 8009a6a:	f7fc fba1 	bl	80061b0 <HAL_TIM_Base_Init>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8009a74:	f002 fb16 	bl	800c0a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a82:	4619      	mov	r1, r3
 8009a84:	481a      	ldr	r0, [pc, #104]	; (8009af0 <MX_TIM2_Init+0xe0>)
 8009a86:	f7fd f849 	bl	8006b1c <HAL_TIM_ConfigClockSource>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8009a90:	f002 fb08 	bl	800c0a4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8009a94:	4816      	ldr	r0, [pc, #88]	; (8009af0 <MX_TIM2_Init+0xe0>)
 8009a96:	f7fc fbda 	bl	800624e <HAL_TIM_OC_Init>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d001      	beq.n	8009aa4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8009aa0:	f002 fb00 	bl	800c0a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009aac:	f107 0320 	add.w	r3, r7, #32
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	480f      	ldr	r0, [pc, #60]	; (8009af0 <MX_TIM2_Init+0xe0>)
 8009ab4:	f7fd fc42 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8009abe:	f002 faf1 	bl	800c0a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009aca:	2300      	movs	r3, #0
 8009acc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009ad2:	1d3b      	adds	r3, r7, #4
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	4805      	ldr	r0, [pc, #20]	; (8009af0 <MX_TIM2_Init+0xe0>)
 8009ada:	f7fc fef9 	bl	80068d0 <HAL_TIM_OC_ConfigChannel>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d001      	beq.n	8009ae8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8009ae4:	f002 fade 	bl	800c0a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009ae8:	bf00      	nop
 8009aea:	3738      	adds	r7, #56	; 0x38
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	20001a20 	.word	0x20001a20

08009af4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009afa:	f107 0308 	add.w	r3, r7, #8
 8009afe:	2200      	movs	r2, #0
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	605a      	str	r2, [r3, #4]
 8009b04:	609a      	str	r2, [r3, #8]
 8009b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b08:	463b      	mov	r3, r7
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8009b10:	4b1d      	ldr	r3, [pc, #116]	; (8009b88 <MX_TIM5_Init+0x94>)
 8009b12:	4a1e      	ldr	r2, [pc, #120]	; (8009b8c <MX_TIM5_Init+0x98>)
 8009b14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 839;
 8009b16:	4b1c      	ldr	r3, [pc, #112]	; (8009b88 <MX_TIM5_Init+0x94>)
 8009b18:	f240 3247 	movw	r2, #839	; 0x347
 8009b1c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b1e:	4b1a      	ldr	r3, [pc, #104]	; (8009b88 <MX_TIM5_Init+0x94>)
 8009b20:	2200      	movs	r2, #0
 8009b22:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8009b24:	4b18      	ldr	r3, [pc, #96]	; (8009b88 <MX_TIM5_Init+0x94>)
 8009b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b2a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b2c:	4b16      	ldr	r3, [pc, #88]	; (8009b88 <MX_TIM5_Init+0x94>)
 8009b2e:	2200      	movs	r2, #0
 8009b30:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b32:	4b15      	ldr	r3, [pc, #84]	; (8009b88 <MX_TIM5_Init+0x94>)
 8009b34:	2200      	movs	r2, #0
 8009b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009b38:	4813      	ldr	r0, [pc, #76]	; (8009b88 <MX_TIM5_Init+0x94>)
 8009b3a:	f7fc fb39 	bl	80061b0 <HAL_TIM_Base_Init>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8009b44:	f002 faae 	bl	800c0a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8009b4e:	f107 0308 	add.w	r3, r7, #8
 8009b52:	4619      	mov	r1, r3
 8009b54:	480c      	ldr	r0, [pc, #48]	; (8009b88 <MX_TIM5_Init+0x94>)
 8009b56:	f7fc ffe1 	bl	8006b1c <HAL_TIM_ConfigClockSource>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8009b60:	f002 faa0 	bl	800c0a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b64:	2300      	movs	r3, #0
 8009b66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009b6c:	463b      	mov	r3, r7
 8009b6e:	4619      	mov	r1, r3
 8009b70:	4805      	ldr	r0, [pc, #20]	; (8009b88 <MX_TIM5_Init+0x94>)
 8009b72:	f7fd fbe3 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d001      	beq.n	8009b80 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8009b7c:	f002 fa92 	bl	800c0a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8009b80:	bf00      	nop
 8009b82:	3718      	adds	r7, #24
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	20000b88 	.word	0x20000b88
 8009b8c:	40000c00 	.word	0x40000c00

08009b90 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b08c      	sub	sp, #48	; 0x30
 8009b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009b96:	f107 030c 	add.w	r3, r7, #12
 8009b9a:	2224      	movs	r2, #36	; 0x24
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f003 f978 	bl	800ce94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ba4:	1d3b      	adds	r3, r7, #4
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009bac:	4b22      	ldr	r3, [pc, #136]	; (8009c38 <MX_TIM8_Init+0xa8>)
 8009bae:	4a23      	ldr	r2, [pc, #140]	; (8009c3c <MX_TIM8_Init+0xac>)
 8009bb0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009bb2:	4b21      	ldr	r3, [pc, #132]	; (8009c38 <MX_TIM8_Init+0xa8>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bb8:	4b1f      	ldr	r3, [pc, #124]	; (8009c38 <MX_TIM8_Init+0xa8>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3999;
 8009bbe:	4b1e      	ldr	r3, [pc, #120]	; (8009c38 <MX_TIM8_Init+0xa8>)
 8009bc0:	f640 729f 	movw	r2, #3999	; 0xf9f
 8009bc4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009bc6:	4b1c      	ldr	r3, [pc, #112]	; (8009c38 <MX_TIM8_Init+0xa8>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009bcc:	4b1a      	ldr	r3, [pc, #104]	; (8009c38 <MX_TIM8_Init+0xa8>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bd2:	4b19      	ldr	r3, [pc, #100]	; (8009c38 <MX_TIM8_Init+0xa8>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009be0:	2301      	movs	r3, #1
 8009be2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009be4:	2300      	movs	r3, #0
 8009be6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009bec:	2300      	movs	r3, #0
 8009bee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8009bfc:	f107 030c 	add.w	r3, r7, #12
 8009c00:	4619      	mov	r1, r3
 8009c02:	480d      	ldr	r0, [pc, #52]	; (8009c38 <MX_TIM8_Init+0xa8>)
 8009c04:	f7fc fc72 	bl	80064ec <HAL_TIM_Encoder_Init>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d001      	beq.n	8009c12 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8009c0e:	f002 fa49 	bl	800c0a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009c12:	2320      	movs	r3, #32
 8009c14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c16:	2300      	movs	r3, #0
 8009c18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009c1a:	1d3b      	adds	r3, r7, #4
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	4806      	ldr	r0, [pc, #24]	; (8009c38 <MX_TIM8_Init+0xa8>)
 8009c20:	f7fd fb8c 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8009c2a:	f002 fa3b 	bl	800c0a4 <Error_Handler>
	//HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); // this didn't seem to be necessary


  /* USER CODE END TIM8_Init 2 */

}
 8009c2e:	bf00      	nop
 8009c30:	3730      	adds	r7, #48	; 0x30
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	20000544 	.word	0x20000544
 8009c3c:	40010400 	.word	0x40010400

08009c40 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b08c      	sub	sp, #48	; 0x30
 8009c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009c46:	f107 0320 	add.w	r3, r7, #32
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	601a      	str	r2, [r3, #0]
 8009c4e:	605a      	str	r2, [r3, #4]
 8009c50:	609a      	str	r2, [r3, #8]
 8009c52:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009c54:	1d3b      	adds	r3, r7, #4
 8009c56:	2200      	movs	r2, #0
 8009c58:	601a      	str	r2, [r3, #0]
 8009c5a:	605a      	str	r2, [r3, #4]
 8009c5c:	609a      	str	r2, [r3, #8]
 8009c5e:	60da      	str	r2, [r3, #12]
 8009c60:	611a      	str	r2, [r3, #16]
 8009c62:	615a      	str	r2, [r3, #20]
 8009c64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8009c66:	4b2d      	ldr	r3, [pc, #180]	; (8009d1c <MX_TIM9_Init+0xdc>)
 8009c68:	4a2d      	ldr	r2, [pc, #180]	; (8009d20 <MX_TIM9_Init+0xe0>)
 8009c6a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 8009c6c:	4b2b      	ldr	r3, [pc, #172]	; (8009d1c <MX_TIM9_Init+0xdc>)
 8009c6e:	22a7      	movs	r2, #167	; 0xa7
 8009c70:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c72:	4b2a      	ldr	r3, [pc, #168]	; (8009d1c <MX_TIM9_Init+0xdc>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 8009c78:	4b28      	ldr	r3, [pc, #160]	; (8009d1c <MX_TIM9_Init+0xdc>)
 8009c7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c7e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c80:	4b26      	ldr	r3, [pc, #152]	; (8009d1c <MX_TIM9_Init+0xdc>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c86:	4b25      	ldr	r3, [pc, #148]	; (8009d1c <MX_TIM9_Init+0xdc>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8009c8c:	4823      	ldr	r0, [pc, #140]	; (8009d1c <MX_TIM9_Init+0xdc>)
 8009c8e:	f7fc fa8f 	bl	80061b0 <HAL_TIM_Base_Init>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d001      	beq.n	8009c9c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8009c98:	f002 fa04 	bl	800c0a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ca0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8009ca2:	f107 0320 	add.w	r3, r7, #32
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	481c      	ldr	r0, [pc, #112]	; (8009d1c <MX_TIM9_Init+0xdc>)
 8009caa:	f7fc ff37 	bl	8006b1c <HAL_TIM_ConfigClockSource>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d001      	beq.n	8009cb8 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8009cb4:	f002 f9f6 	bl	800c0a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8009cb8:	4818      	ldr	r0, [pc, #96]	; (8009d1c <MX_TIM9_Init+0xdc>)
 8009cba:	f7fc fb3b 	bl	8006334 <HAL_TIM_PWM_Init>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8009cc4:	f002 f9ee 	bl	800c0a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009cc8:	2360      	movs	r3, #96	; 0x60
 8009cca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8009ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009cda:	1d3b      	adds	r3, r7, #4
 8009cdc:	2200      	movs	r2, #0
 8009cde:	4619      	mov	r1, r3
 8009ce0:	480e      	ldr	r0, [pc, #56]	; (8009d1c <MX_TIM9_Init+0xdc>)
 8009ce2:	f7fc fe55 	bl	8006990 <HAL_TIM_PWM_ConfigChannel>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8009cec:	f002 f9da 	bl	800c0a4 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8009cf0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009cf6:	1d3b      	adds	r3, r7, #4
 8009cf8:	2204      	movs	r2, #4
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	4807      	ldr	r0, [pc, #28]	; (8009d1c <MX_TIM9_Init+0xdc>)
 8009cfe:	f7fc fe47 	bl	8006990 <HAL_TIM_PWM_ConfigChannel>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d001      	beq.n	8009d0c <MX_TIM9_Init+0xcc>
  {
    Error_Handler();
 8009d08:	f002 f9cc 	bl	800c0a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8009d0c:	4803      	ldr	r0, [pc, #12]	; (8009d1c <MX_TIM9_Init+0xdc>)
 8009d0e:	f002 fe0f 	bl	800c930 <HAL_TIM_MspPostInit>

}
 8009d12:	bf00      	nop
 8009d14:	3730      	adds	r7, #48	; 0x30
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	200017dc 	.word	0x200017dc
 8009d20:	40014000 	.word	0x40014000

08009d24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009d28:	4b11      	ldr	r3, [pc, #68]	; (8009d70 <MX_USART3_UART_Init+0x4c>)
 8009d2a:	4a12      	ldr	r2, [pc, #72]	; (8009d74 <MX_USART3_UART_Init+0x50>)
 8009d2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8009d2e:	4b10      	ldr	r3, [pc, #64]	; (8009d70 <MX_USART3_UART_Init+0x4c>)
 8009d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009d34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009d36:	4b0e      	ldr	r3, [pc, #56]	; (8009d70 <MX_USART3_UART_Init+0x4c>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009d3c:	4b0c      	ldr	r3, [pc, #48]	; (8009d70 <MX_USART3_UART_Init+0x4c>)
 8009d3e:	2200      	movs	r2, #0
 8009d40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009d42:	4b0b      	ldr	r3, [pc, #44]	; (8009d70 <MX_USART3_UART_Init+0x4c>)
 8009d44:	2200      	movs	r2, #0
 8009d46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009d48:	4b09      	ldr	r3, [pc, #36]	; (8009d70 <MX_USART3_UART_Init+0x4c>)
 8009d4a:	220c      	movs	r2, #12
 8009d4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009d4e:	4b08      	ldr	r3, [pc, #32]	; (8009d70 <MX_USART3_UART_Init+0x4c>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009d54:	4b06      	ldr	r3, [pc, #24]	; (8009d70 <MX_USART3_UART_Init+0x4c>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009d5a:	4805      	ldr	r0, [pc, #20]	; (8009d70 <MX_USART3_UART_Init+0x4c>)
 8009d5c:	f7fd fbf5 	bl	800754a <HAL_UART_Init>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8009d66:	f002 f99d 	bl	800c0a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8009d6a:	bf00      	nop
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	20000584 	.word	0x20000584
 8009d74:	40004800 	.word	0x40004800

08009d78 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d7c:	4b14      	ldr	r3, [pc, #80]	; (8009dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009d7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009d84:	4b12      	ldr	r3, [pc, #72]	; (8009dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009d86:	2204      	movs	r2, #4
 8009d88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d8a:	4b11      	ldr	r3, [pc, #68]	; (8009dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009d8c:	2202      	movs	r2, #2
 8009d8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d90:	4b0f      	ldr	r3, [pc, #60]	; (8009dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d96:	4b0e      	ldr	r3, [pc, #56]	; (8009dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009d98:	2202      	movs	r2, #2
 8009d9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d9c:	4b0c      	ldr	r3, [pc, #48]	; (8009dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009da2:	4b0b      	ldr	r3, [pc, #44]	; (8009dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009da8:	4b09      	ldr	r3, [pc, #36]	; (8009dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009dae:	4b08      	ldr	r3, [pc, #32]	; (8009dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009db4:	4b06      	ldr	r3, [pc, #24]	; (8009dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009dba:	4805      	ldr	r0, [pc, #20]	; (8009dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009dbc:	f7fa fc33 	bl	8004626 <HAL_PCD_Init>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8009dc6:	f002 f96d 	bl	800c0a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8009dca:	bf00      	nop
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	20000660 	.word	0x20000660

08009dd4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009dda:	2300      	movs	r3, #0
 8009ddc:	607b      	str	r3, [r7, #4]
 8009dde:	4b1f      	ldr	r3, [pc, #124]	; (8009e5c <MX_DMA_Init+0x88>)
 8009de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de2:	4a1e      	ldr	r2, [pc, #120]	; (8009e5c <MX_DMA_Init+0x88>)
 8009de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009de8:	6313      	str	r3, [r2, #48]	; 0x30
 8009dea:	4b1c      	ldr	r3, [pc, #112]	; (8009e5c <MX_DMA_Init+0x88>)
 8009dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009df2:	607b      	str	r3, [r7, #4]
 8009df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009df6:	2300      	movs	r3, #0
 8009df8:	603b      	str	r3, [r7, #0]
 8009dfa:	4b18      	ldr	r3, [pc, #96]	; (8009e5c <MX_DMA_Init+0x88>)
 8009dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfe:	4a17      	ldr	r2, [pc, #92]	; (8009e5c <MX_DMA_Init+0x88>)
 8009e00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009e04:	6313      	str	r3, [r2, #48]	; 0x30
 8009e06:	4b15      	ldr	r3, [pc, #84]	; (8009e5c <MX_DMA_Init+0x88>)
 8009e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e0e:	603b      	str	r3, [r7, #0]
 8009e10:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8009e12:	2200      	movs	r2, #0
 8009e14:	2100      	movs	r1, #0
 8009e16:	200e      	movs	r0, #14
 8009e18:	f7f8 fe97 	bl	8002b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8009e1c:	200e      	movs	r0, #14
 8009e1e:	f7f8 feb0 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8009e22:	2200      	movs	r2, #0
 8009e24:	2100      	movs	r1, #0
 8009e26:	2038      	movs	r0, #56	; 0x38
 8009e28:	f7f8 fe8f 	bl	8002b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8009e2c:	2038      	movs	r0, #56	; 0x38
 8009e2e:	f7f8 fea8 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8009e32:	2200      	movs	r2, #0
 8009e34:	2100      	movs	r1, #0
 8009e36:	2039      	movs	r0, #57	; 0x39
 8009e38:	f7f8 fe87 	bl	8002b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8009e3c:	2039      	movs	r0, #57	; 0x39
 8009e3e:	f7f8 fea0 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8009e42:	2200      	movs	r2, #0
 8009e44:	2100      	movs	r1, #0
 8009e46:	203a      	movs	r0, #58	; 0x3a
 8009e48:	f7f8 fe7f 	bl	8002b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8009e4c:	203a      	movs	r0, #58	; 0x3a
 8009e4e:	f7f8 fe98 	bl	8002b82 <HAL_NVIC_EnableIRQ>

}
 8009e52:	bf00      	nop
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	40023800 	.word	0x40023800

08009e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b08c      	sub	sp, #48	; 0x30
 8009e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e66:	f107 031c 	add.w	r3, r7, #28
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	605a      	str	r2, [r3, #4]
 8009e70:	609a      	str	r2, [r3, #8]
 8009e72:	60da      	str	r2, [r3, #12]
 8009e74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009e76:	2300      	movs	r3, #0
 8009e78:	61bb      	str	r3, [r7, #24]
 8009e7a:	4b69      	ldr	r3, [pc, #420]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e7e:	4a68      	ldr	r2, [pc, #416]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009e80:	f043 0310 	orr.w	r3, r3, #16
 8009e84:	6313      	str	r3, [r2, #48]	; 0x30
 8009e86:	4b66      	ldr	r3, [pc, #408]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8a:	f003 0310 	and.w	r3, r3, #16
 8009e8e:	61bb      	str	r3, [r7, #24]
 8009e90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e92:	2300      	movs	r3, #0
 8009e94:	617b      	str	r3, [r7, #20]
 8009e96:	4b62      	ldr	r3, [pc, #392]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9a:	4a61      	ldr	r2, [pc, #388]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009e9c:	f043 0304 	orr.w	r3, r3, #4
 8009ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8009ea2:	4b5f      	ldr	r3, [pc, #380]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea6:	f003 0304 	and.w	r3, r3, #4
 8009eaa:	617b      	str	r3, [r7, #20]
 8009eac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009eae:	2300      	movs	r3, #0
 8009eb0:	613b      	str	r3, [r7, #16]
 8009eb2:	4b5b      	ldr	r3, [pc, #364]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb6:	4a5a      	ldr	r2, [pc, #360]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8009ebe:	4b58      	ldr	r3, [pc, #352]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ec6:	613b      	str	r3, [r7, #16]
 8009ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009eca:	2300      	movs	r3, #0
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	4b54      	ldr	r3, [pc, #336]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed2:	4a53      	ldr	r2, [pc, #332]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009ed4:	f043 0301 	orr.w	r3, r3, #1
 8009ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8009eda:	4b51      	ldr	r3, [pc, #324]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	60fb      	str	r3, [r7, #12]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60bb      	str	r3, [r7, #8]
 8009eea:	4b4d      	ldr	r3, [pc, #308]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eee:	4a4c      	ldr	r2, [pc, #304]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009ef0:	f043 0302 	orr.w	r3, r3, #2
 8009ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ef6:	4b4a      	ldr	r3, [pc, #296]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efa:	f003 0302 	and.w	r3, r3, #2
 8009efe:	60bb      	str	r3, [r7, #8]
 8009f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009f02:	2300      	movs	r3, #0
 8009f04:	607b      	str	r3, [r7, #4]
 8009f06:	4b46      	ldr	r3, [pc, #280]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0a:	4a45      	ldr	r2, [pc, #276]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009f0c:	f043 0308 	orr.w	r3, r3, #8
 8009f10:	6313      	str	r3, [r2, #48]	; 0x30
 8009f12:	4b43      	ldr	r3, [pc, #268]	; (800a020 <MX_GPIO_Init+0x1c0>)
 8009f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f16:	f003 0308 	and.w	r3, r3, #8
 8009f1a:	607b      	str	r3, [r7, #4]
 8009f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin, GPIO_PIN_RESET);
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f24c 0118 	movw	r1, #49176	; 0xc018
 8009f24:	483f      	ldr	r0, [pc, #252]	; (800a024 <MX_GPIO_Init+0x1c4>)
 8009f26:	f7f9 fbc5 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009f30:	483d      	ldr	r0, [pc, #244]	; (800a028 <MX_GPIO_Init+0x1c8>)
 8009f32:	f7f9 fbbf 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 8009f36:	2200      	movs	r2, #0
 8009f38:	f64b 0180 	movw	r1, #47232	; 0xb880
 8009f3c:	483b      	ldr	r0, [pc, #236]	; (800a02c <MX_GPIO_Init+0x1cc>)
 8009f3e:	f7f9 fbb9 	bl	80036b4 <HAL_GPIO_WritePin>
                          |nSCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin EN_GATE_Pin M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin;
 8009f42:	f24c 0318 	movw	r3, #49176	; 0xc018
 8009f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f50:	2300      	movs	r3, #0
 8009f52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009f54:	f107 031c 	add.w	r3, r7, #28
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4832      	ldr	r0, [pc, #200]	; (800a024 <MX_GPIO_Init+0x1c4>)
 8009f5c:	f7f9 fa10 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009f66:	2301      	movs	r3, #1
 8009f68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f72:	f107 031c 	add.w	r3, r7, #28
 8009f76:	4619      	mov	r1, r3
 8009f78:	482b      	ldr	r0, [pc, #172]	; (800a028 <MX_GPIO_Init+0x1c8>)
 8009f7a:	f7f9 fa01 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009f7e:	2340      	movs	r3, #64	; 0x40
 8009f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f82:	2302      	movs	r3, #2
 8009f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f86:	2300      	movs	r3, #0
 8009f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8009f8e:	2309      	movs	r3, #9
 8009f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f92:	f107 031c 	add.w	r3, r7, #28
 8009f96:	4619      	mov	r1, r3
 8009f98:	4825      	ldr	r0, [pc, #148]	; (800a030 <MX_GPIO_Init+0x1d0>)
 8009f9a:	f7f9 f9f1 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 debug1_out_Pin debug2_out_Pin ROT0_nCS_Pin 
                           nSCS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 8009f9e:	f64b 0380 	movw	r3, #47232	; 0xb880
 8009fa2:	61fb      	str	r3, [r7, #28]
                          |nSCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fac:	2300      	movs	r3, #0
 8009fae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009fb0:	f107 031c 	add.w	r3, r7, #28
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	481d      	ldr	r0, [pc, #116]	; (800a02c <MX_GPIO_Init+0x1cc>)
 8009fb8:	f7f9 f9e2 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pin : debug1_in_Pin */
  GPIO_InitStruct.Pin = debug1_in_Pin;
 8009fbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(debug1_in_GPIO_Port, &GPIO_InitStruct);
 8009fca:	f107 031c 	add.w	r3, r7, #28
 8009fce:	4619      	mov	r1, r3
 8009fd0:	4816      	ldr	r0, [pc, #88]	; (800a02c <MX_GPIO_Init+0x1cc>)
 8009fd2:	f7f9 f9d5 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT0_I_W_Pin */
  GPIO_InitStruct.Pin = ROT0_I_W_Pin;
 8009fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009fdc:	4b15      	ldr	r3, [pc, #84]	; (800a034 <MX_GPIO_Init+0x1d4>)
 8009fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ROT0_I_W_GPIO_Port, &GPIO_InitStruct);
 8009fe4:	f107 031c 	add.w	r3, r7, #28
 8009fe8:	4619      	mov	r1, r3
 8009fea:	480f      	ldr	r0, [pc, #60]	; (800a028 <MX_GPIO_Init+0x1c8>)
 8009fec:	f7f9 f9c8 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 8009ff0:	2370      	movs	r3, #112	; 0x70
 8009ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009ffc:	f107 031c 	add.w	r3, r7, #28
 800a000:	4619      	mov	r1, r3
 800a002:	480a      	ldr	r0, [pc, #40]	; (800a02c <MX_GPIO_Init+0x1cc>)
 800a004:	f7f9 f9bc 	bl	8003380 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800a008:	2200      	movs	r2, #0
 800a00a:	2100      	movs	r1, #0
 800a00c:	2017      	movs	r0, #23
 800a00e:	f7f8 fd9c 	bl	8002b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a012:	2017      	movs	r0, #23
 800a014:	f7f8 fdb5 	bl	8002b82 <HAL_NVIC_EnableIRQ>

}
 800a018:	bf00      	nop
 800a01a:	3730      	adds	r7, #48	; 0x30
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	40023800 	.word	0x40023800
 800a024:	40021000 	.word	0x40021000
 800a028:	40020800 	.word	0x40020800
 800a02c:	40020c00 	.word	0x40020c00
 800a030:	40020000 	.word	0x40020000
 800a034:	10110000 	.word	0x10110000

0800a038 <set_pwm_off>:

/* USER CODE BEGIN 4 */

void set_pwm_off(void){
 800a038:	b480      	push	{r7}
 800a03a:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 800a03c:	4b06      	ldr	r3, [pc, #24]	; (800a058 <set_pwm_off+0x20>)
 800a03e:	2200      	movs	r2, #0
 800a040:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800a042:	4b05      	ldr	r3, [pc, #20]	; (800a058 <set_pwm_off+0x20>)
 800a044:	2200      	movs	r2, #0
 800a046:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800a048:	4b03      	ldr	r3, [pc, #12]	; (800a058 <set_pwm_off+0x20>)
 800a04a:	2200      	movs	r2, #0
 800a04c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a04e:	bf00      	nop
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	40010000 	.word	0x40010000

0800a05c <step_through_pole_angles>:

float av_start_angle;
void step_through_pole_angles(void){
 800a05c:	b5b0      	push	{r4, r5, r7, lr}
 800a05e:	b0e0      	sub	sp, #384	; 0x180
 800a060:	af02      	add	r7, sp, #8
	uint16_t pole_angles[N_PHASES * N_POLES];
	normal_pwm_update = false;
 800a062:	4b87      	ldr	r3, [pc, #540]	; (800a280 <step_through_pole_angles+0x224>)
 800a064:	2200      	movs	r2, #0
 800a066:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800a068:	f7ff ffe6 	bl	800a038 <set_pwm_off>
	HAL_Delay(100);
 800a06c:	2064      	movs	r0, #100	; 0x64
 800a06e:	f7f6 ffdd 	bl	800102c <HAL_Delay>
	uint32_t step_through_amp = 5 * PWM_1PERCENT;
 800a072:	23cd      	movs	r3, #205	; 0xcd
 800a074:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	for (uint8_t pole = 0; pole < N_POLES ; pole++){
 800a078:	2300      	movs	r3, #0
 800a07a:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 800a07e:	e082      	b.n	800a186 <step_through_pole_angles+0x12a>
		for (uint8_t ABC = 0; ABC < N_PHASES ; ABC++){
 800a080:	2300      	movs	r3, #0
 800a082:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 800a086:	e075      	b.n	800a174 <step_through_pole_angles+0x118>
			set_pwm_off();
 800a088:	f7ff ffd6 	bl	800a038 <set_pwm_off>
			if (ABC==0){
 800a08c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800a090:	2b00      	cmp	r3, #0
 800a092:	d104      	bne.n	800a09e <step_through_pole_angles+0x42>
				TIM1->CCR1 = step_through_amp;
 800a094:	4a7b      	ldr	r2, [pc, #492]	; (800a284 <step_through_pole_angles+0x228>)
 800a096:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800a09a:	6353      	str	r3, [r2, #52]	; 0x34
 800a09c:	e00c      	b.n	800a0b8 <step_through_pole_angles+0x5c>
			}
			else if (ABC==1){
 800a09e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d104      	bne.n	800a0b0 <step_through_pole_angles+0x54>
				if (INVERT){
					TIM1->CCR3 = step_through_amp;
				}
				else{
					TIM1->CCR2 = step_through_amp;
 800a0a6:	4a77      	ldr	r2, [pc, #476]	; (800a284 <step_through_pole_angles+0x228>)
 800a0a8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800a0ac:	6393      	str	r3, [r2, #56]	; 0x38
 800a0ae:	e003      	b.n	800a0b8 <step_through_pole_angles+0x5c>
			else {
				if (INVERT){
					TIM1->CCR2 = step_through_amp;
				}
				else{
					TIM1->CCR3 = step_through_amp;
 800a0b0:	4a74      	ldr	r2, [pc, #464]	; (800a284 <step_through_pole_angles+0x228>)
 800a0b2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800a0b6:	63d3      	str	r3, [r2, #60]	; 0x3c
				}
			}
			HAL_Delay(200);
 800a0b8:	20c8      	movs	r0, #200	; 0xc8
 800a0ba:	f7f6 ffb7 	bl	800102c <HAL_Delay>
			pole_angles[pole * N_PHASES + ABC]=TIM8->CNT;
 800a0be:	4b72      	ldr	r3, [pc, #456]	; (800a288 <step_through_pole_angles+0x22c>)
 800a0c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a0c2:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	005b      	lsls	r3, r3, #1
 800a0ca:	441a      	add	r2, r3
 800a0cc:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800a0d0:	4413      	add	r3, r2
 800a0d2:	b28a      	uxth	r2, r1
 800a0d4:	005b      	lsls	r3, r3, #1
 800a0d6:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800a0da:	440b      	add	r3, r1
 800a0dc:	f823 2c48 	strh.w	r2, [r3, #-72]



			uint8_t buf[300];
			buf[0] = '\0';
 800a0e0:	1d3b      	adds	r3, r7, #4
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	701a      	strb	r2, [r3, #0]
			sprintf((char*)buf_msg, "[step_through_pole_angles] pole: %d ABC: %d angle: %d \r\n", pole, ABC, TIM8->CNT);
 800a0e6:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
 800a0ea:	f897 1177 	ldrb.w	r1, [r7, #375]	; 0x177
 800a0ee:	4b66      	ldr	r3, [pc, #408]	; (800a288 <step_through_pole_angles+0x22c>)
 800a0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	4965      	ldr	r1, [pc, #404]	; (800a28c <step_through_pole_angles+0x230>)
 800a0f8:	4865      	ldr	r0, [pc, #404]	; (800a290 <step_through_pole_angles+0x234>)
 800a0fa:	f002 ff07 	bl	800cf0c <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800a0fe:	4864      	ldr	r0, [pc, #400]	; (800a290 <step_through_pole_angles+0x234>)
 800a100:	f7f6 f866 	bl	80001d0 <strlen>
 800a104:	4604      	mov	r4, r0
 800a106:	4863      	ldr	r0, [pc, #396]	; (800a294 <step_through_pole_angles+0x238>)
 800a108:	f7f6 f862 	bl	80001d0 <strlen>
 800a10c:	4603      	mov	r3, r0
 800a10e:	4423      	add	r3, r4
 800a110:	2b63      	cmp	r3, #99	; 0x63
 800a112:	d804      	bhi.n	800a11e <step_through_pole_angles+0xc2>
				strcat(buf_msgs, buf_msg);
 800a114:	495e      	ldr	r1, [pc, #376]	; (800a290 <step_through_pole_angles+0x234>)
 800a116:	485f      	ldr	r0, [pc, #380]	; (800a294 <step_through_pole_angles+0x238>)
 800a118:	f002 ff18 	bl	800cf4c <strcat>
 800a11c:	e002      	b.n	800a124 <step_through_pole_angles+0xc8>
			}
			else {
				buf_msgs[0] = '#';
 800a11e:	4b5d      	ldr	r3, [pc, #372]	; (800a294 <step_through_pole_angles+0x238>)
 800a120:	2223      	movs	r2, #35	; 0x23
 800a122:	701a      	strb	r2, [r3, #0]
			}
			if (buf_msgs[0] != '\0'){
 800a124:	4b5b      	ldr	r3, [pc, #364]	; (800a294 <step_through_pole_angles+0x238>)
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d007      	beq.n	800a13c <step_through_pole_angles+0xe0>
				strcat(buf, buf_msgs);
 800a12c:	1d3b      	adds	r3, r7, #4
 800a12e:	4959      	ldr	r1, [pc, #356]	; (800a294 <step_through_pole_angles+0x238>)
 800a130:	4618      	mov	r0, r3
 800a132:	f002 ff0b 	bl	800cf4c <strcat>
				buf_msgs[0] = '\0';
 800a136:	4b57      	ldr	r3, [pc, #348]	; (800a294 <step_through_pole_angles+0x238>)
 800a138:	2200      	movs	r2, #0
 800a13a:	701a      	strb	r2, [r3, #0]
			}
			//HAL_UART_Transmit_IT(&huart3, buf, strlen((char*)buf)); //WORKS but replaced by DMA below
			huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 800a13c:	4b56      	ldr	r3, [pc, #344]	; (800a298 <step_through_pole_angles+0x23c>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	695a      	ldr	r2, [r3, #20]
 800a142:	4b55      	ldr	r3, [pc, #340]	; (800a298 <step_through_pole_angles+0x23c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a14a:	615a      	str	r2, [r3, #20]
			HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 800a14c:	1d3c      	adds	r4, r7, #4
 800a14e:	4b52      	ldr	r3, [pc, #328]	; (800a298 <step_through_pole_angles+0x23c>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	3304      	adds	r3, #4
 800a154:	461d      	mov	r5, r3
 800a156:	1d3b      	adds	r3, r7, #4
 800a158:	4618      	mov	r0, r3
 800a15a:	f7f6 f839 	bl	80001d0 <strlen>
 800a15e:	4603      	mov	r3, r0
 800a160:	462a      	mov	r2, r5
 800a162:	4621      	mov	r1, r4
 800a164:	484d      	ldr	r0, [pc, #308]	; (800a29c <step_through_pole_angles+0x240>)
 800a166:	f7f8 fdd5 	bl	8002d14 <HAL_DMA_Start_IT>
		for (uint8_t ABC = 0; ABC < N_PHASES ; ABC++){
 800a16a:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800a16e:	3301      	adds	r3, #1
 800a170:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 800a174:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d985      	bls.n	800a088 <step_through_pole_angles+0x2c>
	for (uint8_t pole = 0; pole < N_POLES ; pole++){
 800a17c:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800a180:	3301      	adds	r3, #1
 800a182:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 800a186:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800a18a:	2b06      	cmp	r3, #6
 800a18c:	f67f af78 	bls.w	800a080 <step_through_pole_angles+0x24>

		}
	}
	set_pwm_off();
 800a190:	f7ff ff52 	bl	800a038 <set_pwm_off>
	normal_pwm_update = true;
 800a194:	4b3a      	ldr	r3, [pc, #232]	; (800a280 <step_through_pole_angles+0x224>)
 800a196:	2201      	movs	r2, #1
 800a198:	701a      	strb	r2, [r3, #0]

	float sum = 0.0f;
 800a19a:	f04f 0300 	mov.w	r3, #0
 800a19e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	float enc_steps_per_A2B = (float)ENC_STEPS / (float)(N_POLES * N_PHASES);
 800a1a2:	4b3f      	ldr	r3, [pc, #252]	; (800a2a0 <step_through_pole_angles+0x244>)
 800a1a4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	float enc_steps_per_A2A = (float)ENC_STEPS / (float)N_POLES;
 800a1a8:	4b3e      	ldr	r3, [pc, #248]	; (800a2a4 <step_through_pole_angles+0x248>)
 800a1aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	for (uint8_t i = 0; i < N_POLES * N_PHASES ; i++){
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
 800a1b4:	e05a      	b.n	800a26c <step_through_pole_angles+0x210>
		float reduced_pole_angle = pole_angles[i] - i * enc_steps_per_A2B ;//should be 95.238=ENC_STEPS/21 = ENC_STEPS/ (N_POLES * N_PHASES)
 800a1b6:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800a1ba:	005b      	lsls	r3, r3, #1
 800a1bc:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 800a1c6:	ee07 3a90 	vmov	s15, r3
 800a1ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a1ce:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a1da:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 800a1de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1e6:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c
		if (reduced_pole_angle > -ENC_STEPS_HALF){
 800a1ea:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
 800a1ee:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800a2a8 <step_through_pole_angles+0x24c>
 800a1f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1fa:	dd08      	ble.n	800a20e <step_through_pole_angles+0x1b2>
			sum += reduced_pole_angle;
 800a1fc:	ed97 7a5c 	vldr	s14, [r7, #368]	; 0x170
 800a200:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
 800a204:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a208:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170
 800a20c:	e00b      	b.n	800a226 <step_through_pole_angles+0x1ca>
		}
		else{
			sum += reduced_pole_angle + ENC_STEPS;
 800a20e:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
 800a212:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a2ac <step_through_pole_angles+0x250>
 800a216:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a21a:	ed97 7a5c 	vldr	s14, [r7, #368]	; 0x170
 800a21e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a222:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170
		}
		av_start_angle = sum / (float)(N_POLES * N_PHASES);
 800a226:	ed97 7a5c 	vldr	s14, [r7, #368]	; 0x170
 800a22a:	eef3 6a05 	vmov.f32	s13, #53	; 0x41a80000  21.0
 800a22e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a232:	4b1f      	ldr	r3, [pc, #124]	; (800a2b0 <step_through_pole_angles+0x254>)
 800a234:	edc3 7a00 	vstr	s15, [r3]
		while(av_start_angle > enc_steps_per_A2A){
 800a238:	e009      	b.n	800a24e <step_through_pole_angles+0x1f2>
			av_start_angle -= enc_steps_per_A2A;
 800a23a:	4b1d      	ldr	r3, [pc, #116]	; (800a2b0 <step_through_pole_angles+0x254>)
 800a23c:	ed93 7a00 	vldr	s14, [r3]
 800a240:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 800a244:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a248:	4b19      	ldr	r3, [pc, #100]	; (800a2b0 <step_through_pole_angles+0x254>)
 800a24a:	edc3 7a00 	vstr	s15, [r3]
		while(av_start_angle > enc_steps_per_A2A){
 800a24e:	4b18      	ldr	r3, [pc, #96]	; (800a2b0 <step_through_pole_angles+0x254>)
 800a250:	edd3 7a00 	vldr	s15, [r3]
 800a254:	ed97 7a58 	vldr	s14, [r7, #352]	; 0x160
 800a258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a260:	d4eb      	bmi.n	800a23a <step_through_pole_angles+0x1de>
	for (uint8_t i = 0; i < N_POLES * N_PHASES ; i++){
 800a262:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800a266:	3301      	adds	r3, #1
 800a268:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
 800a26c:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800a270:	2b14      	cmp	r3, #20
 800a272:	d9a0      	bls.n	800a1b6 <step_through_pole_angles+0x15a>
		//float av_angle_first_A =

	}


}
 800a274:	bf00      	nop
 800a276:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bdb0      	pop	{r4, r5, r7, pc}
 800a27e:	bf00      	nop
 800a280:	2000000d 	.word	0x2000000d
 800a284:	40010000 	.word	0x40010000
 800a288:	40010400 	.word	0x40010400
 800a28c:	0800eafc 	.word	0x0800eafc
 800a290:	200024ec 	.word	0x200024ec
 800a294:	20001820 	.word	0x20001820
 800a298:	20000584 	.word	0x20000584
 800a29c:	20000b28 	.word	0x20000b28
 800a2a0:	433e79e8 	.word	0x433e79e8
 800a2a4:	440edb6e 	.word	0x440edb6e
 800a2a8:	c4fa0000 	.word	0xc4fa0000
 800a2ac:	457a0000 	.word	0x457a0000
 800a2b0:	20000e00 	.word	0x20000e00

0800a2b4 <step_through_pwm_percent>:

void step_through_pwm_percent(void){
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b08c      	sub	sp, #48	; 0x30
 800a2b8:	af00      	add	r7, sp, #0
	uint16_t pole_angle_by_amp[20];
	normal_pwm_update = false;
 800a2ba:	4b1a      	ldr	r3, [pc, #104]	; (800a324 <step_through_pwm_percent+0x70>)
 800a2bc:	2200      	movs	r2, #0
 800a2be:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800a2c0:	f7ff feba 	bl	800a038 <set_pwm_off>
	HAL_Delay(100);
 800a2c4:	2064      	movs	r0, #100	; 0x64
 800a2c6:	f7f6 feb1 	bl	800102c <HAL_Delay>
	for (uint8_t percent = 0; percent < 10 ; percent++){
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a2d0:	e01b      	b.n	800a30a <step_through_pwm_percent+0x56>
		TIM1->CCR1 = percent * PWM_1PERCENT;
 800a2d2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	4413      	add	r3, r2
 800a2dc:	00db      	lsls	r3, r3, #3
 800a2de:	441a      	add	r2, r3
 800a2e0:	4b11      	ldr	r3, [pc, #68]	; (800a328 <step_through_pwm_percent+0x74>)
 800a2e2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(200);
 800a2e4:	20c8      	movs	r0, #200	; 0xc8
 800a2e6:	f7f6 fea1 	bl	800102c <HAL_Delay>
		pole_angle_by_amp[percent]=TIM8->CNT;
 800a2ea:	4b10      	ldr	r3, [pc, #64]	; (800a32c <step_through_pwm_percent+0x78>)
 800a2ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2f2:	b292      	uxth	r2, r2
 800a2f4:	005b      	lsls	r3, r3, #1
 800a2f6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a2fa:	440b      	add	r3, r1
 800a2fc:	f823 2c2c 	strh.w	r2, [r3, #-44]
	for (uint8_t percent = 0; percent < 10 ; percent++){
 800a300:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a304:	3301      	adds	r3, #1
 800a306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a30a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a30e:	2b09      	cmp	r3, #9
 800a310:	d9df      	bls.n	800a2d2 <step_through_pwm_percent+0x1e>
	}
	set_pwm_off();
 800a312:	f7ff fe91 	bl	800a038 <set_pwm_off>
	normal_pwm_update = true;
 800a316:	4b03      	ldr	r3, [pc, #12]	; (800a324 <step_through_pwm_percent+0x70>)
 800a318:	2201      	movs	r2, #1
 800a31a:	701a      	strb	r2, [r3, #0]
}
 800a31c:	bf00      	nop
 800a31e:	3730      	adds	r7, #48	; 0x30
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	2000000d 	.word	0x2000000d
 800a328:	40010000 	.word	0x40010000
 800a32c:	40010400 	.word	0x40010400

0800a330 <explore_limits>:

void explore_limits(void){
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
	amp = 0;
 800a336:	4b35      	ldr	r3, [pc, #212]	; (800a40c <explore_limits+0xdc>)
 800a338:	f04f 0200 	mov.w	r2, #0
 800a33c:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800a33e:	2064      	movs	r0, #100	; 0x64
 800a340:	f7f6 fe74 	bl	800102c <HAL_Delay>
	for (int8_t dir=-1;dir<2; dir+=2){
 800a344:	23ff      	movs	r3, #255	; 0xff
 800a346:	73fb      	strb	r3, [r7, #15]
 800a348:	e055      	b.n	800a3f6 <explore_limits+0xc6>
		HAL_Delay(500);
 800a34a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a34e:	f7f6 fe6d 	bl	800102c <HAL_Delay>
		amp= dir * 0.1f;
 800a352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a356:	ee07 3a90 	vmov	s15, r3
 800a35a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a35e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800a410 <explore_limits+0xe0>
 800a362:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a366:	4b29      	ldr	r3, [pc, #164]	; (800a40c <explore_limits+0xdc>)
 800a368:	edc3 7a00 	vstr	s15, [r3]
		for (int32_t i = 0; i<50; i++){
 800a36c:	2300      	movs	r3, #0
 800a36e:	60bb      	str	r3, [r7, #8]
 800a370:	e03a      	b.n	800a3e8 <explore_limits+0xb8>
			HAL_Delay(100);
 800a372:	2064      	movs	r0, #100	; 0x64
 800a374:	f7f6 fe5a 	bl	800102c <HAL_Delay>
			uint32_t val_I = HAL_ADCEx_InjectedGetValue (&hadc1, RANK_I);
 800a378:	2104      	movs	r1, #4
 800a37a:	4826      	ldr	r0, [pc, #152]	; (800a414 <explore_limits+0xe4>)
 800a37c:	f7f7 fc74 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800a380:	6078      	str	r0, [r7, #4]
			if (val_I > 2100 || val_I < 1980){
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f640 0234 	movw	r2, #2100	; 0x834
 800a388:	4293      	cmp	r3, r2
 800a38a:	d804      	bhi.n	800a396 <explore_limits+0x66>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f240 72bb 	movw	r2, #1979	; 0x7bb
 800a392:	4293      	cmp	r3, r2
 800a394:	d825      	bhi.n	800a3e2 <explore_limits+0xb2>
				amp=0;
 800a396:	4b1d      	ldr	r3, [pc, #116]	; (800a40c <explore_limits+0xdc>)
 800a398:	f04f 0200 	mov.w	r2, #0
 800a39c:	601a      	str	r2, [r3, #0]
				uint32_t EncVal_lim = TIM8->CNT;
 800a39e:	4b1e      	ldr	r3, [pc, #120]	; (800a418 <explore_limits+0xe8>)
 800a3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a2:	603b      	str	r3, [r7, #0]
				if (dir==-1){
 800a3a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3ac:	d10c      	bne.n	800a3c8 <explore_limits+0x98>
					Enc_Val_total_lim_m = EncVal_lim + rotation_counter * ENC_STEPS;
 800a3ae:	4b1b      	ldr	r3, [pc, #108]	; (800a41c <explore_limits+0xec>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800a3b6:	fb02 f303 	mul.w	r3, r2, r3
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	4413      	add	r3, r2
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	4b17      	ldr	r3, [pc, #92]	; (800a420 <explore_limits+0xf0>)
 800a3c4:	601a      	str	r2, [r3, #0]
				else{
					Enc_Val_total_lim_p = EncVal_lim + rotation_counter * ENC_STEPS;

				}

				break;
 800a3c6:	e012      	b.n	800a3ee <explore_limits+0xbe>
					Enc_Val_total_lim_p = EncVal_lim + rotation_counter * ENC_STEPS;
 800a3c8:	4b14      	ldr	r3, [pc, #80]	; (800a41c <explore_limits+0xec>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800a3d0:	fb02 f303 	mul.w	r3, r2, r3
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	4413      	add	r3, r2
 800a3da:	461a      	mov	r2, r3
 800a3dc:	4b11      	ldr	r3, [pc, #68]	; (800a424 <explore_limits+0xf4>)
 800a3de:	601a      	str	r2, [r3, #0]
				break;
 800a3e0:	e005      	b.n	800a3ee <explore_limits+0xbe>
		for (int32_t i = 0; i<50; i++){
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	60bb      	str	r3, [r7, #8]
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	2b31      	cmp	r3, #49	; 0x31
 800a3ec:	ddc1      	ble.n	800a372 <explore_limits+0x42>
	for (int8_t dir=-1;dir<2; dir+=2){
 800a3ee:	7bfb      	ldrb	r3, [r7, #15]
 800a3f0:	3302      	adds	r3, #2
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	73fb      	strb	r3, [r7, #15]
 800a3f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	dda5      	ble.n	800a34a <explore_limits+0x1a>
			}
		}
	}

	amp = 0.01f;
 800a3fe:	4b03      	ldr	r3, [pc, #12]	; (800a40c <explore_limits+0xdc>)
 800a400:	4a09      	ldr	r2, [pc, #36]	; (800a428 <explore_limits+0xf8>)
 800a402:	601a      	str	r2, [r3, #0]
}
 800a404:	bf00      	nop
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	200000d4 	.word	0x200000d4
 800a410:	3dcccccd 	.word	0x3dcccccd
 800a414:	20000cb0 	.word	0x20000cb0
 800a418:	40010400 	.word	0x40010400
 800a41c:	200000e0 	.word	0x200000e0
 800a420:	200000e4 	.word	0x200000e4
 800a424:	200000e8 	.word	0x200000e8
 800a428:	3c23d70a 	.word	0x3c23d70a

0800a42c <delay_SPI>:



void delay_SPI(void){
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
	int g =0;
 800a432:	2300      	movs	r3, #0
 800a434:	607b      	str	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800a436:	2300      	movs	r3, #0
 800a438:	603b      	str	r3, [r7, #0]
 800a43a:	e005      	b.n	800a448 <delay_SPI+0x1c>
		g++;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	3301      	adds	r3, #1
 800a440:	607b      	str	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	3301      	adds	r3, #1
 800a446:	603b      	str	r3, [r7, #0]
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	2b13      	cmp	r3, #19
 800a44c:	ddf6      	ble.n	800a43c <delay_SPI+0x10>
	}
}
 800a44e:	bf00      	nop
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
	...

0800a45c <playSound>:


void playSound(uint32_t periode, uint32_t volume, uint32_t cycles){
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
	// TODO disable interrupt for the duration of sound
	//HAL_NVIC_DisableIRQ(TIM8_UP_TIM13_IRQn);
	//HAL_Delay(1000);
	normal_pwm_update = false;
 800a468:	4b16      	ldr	r3, [pc, #88]	; (800a4c4 <playSound+0x68>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800a46e:	f7ff fde3 	bl	800a038 <set_pwm_off>
	HAL_Delay(10);
 800a472:	200a      	movs	r0, #10
 800a474:	f7f6 fdda 	bl	800102c <HAL_Delay>

	for (uint32_t i=0; i<cycles; i++){
 800a478:	2300      	movs	r3, #0
 800a47a:	617b      	str	r3, [r7, #20]
 800a47c:	e014      	b.n	800a4a8 <playSound+0x4c>
		TIM1->CCR1 = 0; //takes<150ns
 800a47e:	4b12      	ldr	r3, [pc, #72]	; (800a4c8 <playSound+0x6c>)
 800a480:	2200      	movs	r2, #0
 800a482:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = volume; //takes<150ns
 800a484:	4a10      	ldr	r2, [pc, #64]	; (800a4c8 <playSound+0x6c>)
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_Delay(periode);
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f7f6 fdce 	bl	800102c <HAL_Delay>
		TIM1->CCR1 = volume; //takes<150ns
 800a490:	4a0d      	ldr	r2, [pc, #52]	; (800a4c8 <playSound+0x6c>)
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = 0; //takes<150ns
 800a496:	4b0c      	ldr	r3, [pc, #48]	; (800a4c8 <playSound+0x6c>)
 800a498:	2200      	movs	r2, #0
 800a49a:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(periode);
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f7f6 fdc5 	bl	800102c <HAL_Delay>
	for (uint32_t i=0; i<cycles; i++){
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	617b      	str	r3, [r7, #20]
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d3e6      	bcc.n	800a47e <playSound+0x22>
	}
	set_pwm_off();
 800a4b0:	f7ff fdc2 	bl	800a038 <set_pwm_off>
	normal_pwm_update = true;
 800a4b4:	4b03      	ldr	r3, [pc, #12]	; (800a4c4 <playSound+0x68>)
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	701a      	strb	r2, [r3, #0]

	//HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
}
 800a4ba:	bf00      	nop
 800a4bc:	3718      	adds	r7, #24
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	2000000d 	.word	0x2000000d
 800a4c8:	40010000 	.word	0x40010000
 800a4cc:	00000000 	.word	0x00000000

0800a4d0 <calc_lookup>:


void calc_lookup(float *lookup){
 800a4d0:	b5b0      	push	{r4, r5, r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
	for (int i=0; i<210; i++){
 800a4d8:	2300      	movs	r3, #0
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	e049      	b.n	800a572 <calc_lookup+0xa2>
		// --- vanilla
		lookup[i] = 0.5773f * (cos((float)i/100.0f) + cos((float)i/100.0f-1.047f));
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	ee07 3a90 	vmov	s15, r3
 800a4e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4e8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800a588 <calc_lookup+0xb8>
 800a4ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a4f0:	ee16 0a90 	vmov	r0, s13
 800a4f4:	f7f6 f828 	bl	8000548 <__aeabi_f2d>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	460c      	mov	r4, r1
 800a4fc:	ec44 3b10 	vmov	d0, r3, r4
 800a500:	f003 f91a 	bl	800d738 <cos>
 800a504:	ec55 4b10 	vmov	r4, r5, d0
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	ee07 3a90 	vmov	s15, r3
 800a50e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a512:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800a588 <calc_lookup+0xb8>
 800a516:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a51a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800a58c <calc_lookup+0xbc>
 800a51e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a522:	ee17 0a90 	vmov	r0, s15
 800a526:	f7f6 f80f 	bl	8000548 <__aeabi_f2d>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	ec43 2b10 	vmov	d0, r2, r3
 800a532:	f003 f901 	bl	800d738 <cos>
 800a536:	ec53 2b10 	vmov	r2, r3, d0
 800a53a:	4620      	mov	r0, r4
 800a53c:	4629      	mov	r1, r5
 800a53e:	f7f5 fea5 	bl	800028c <__adddf3>
 800a542:	4603      	mov	r3, r0
 800a544:	460c      	mov	r4, r1
 800a546:	4618      	mov	r0, r3
 800a548:	4621      	mov	r1, r4
 800a54a:	a30d      	add	r3, pc, #52	; (adr r3, 800a580 <calc_lookup+0xb0>)
 800a54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a550:	f7f6 f852 	bl	80005f8 <__aeabi_dmul>
 800a554:	4603      	mov	r3, r0
 800a556:	460c      	mov	r4, r1
 800a558:	4618      	mov	r0, r3
 800a55a:	4621      	mov	r1, r4
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	18d4      	adds	r4, r2, r3
 800a564:	f7f6 fb20 	bl	8000ba8 <__aeabi_d2f>
 800a568:	4603      	mov	r3, r0
 800a56a:	6023      	str	r3, [r4, #0]
	for (int i=0; i<210; i++){
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	3301      	adds	r3, #1
 800a570:	60fb      	str	r3, [r7, #12]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2bd1      	cmp	r3, #209	; 0xd1
 800a576:	ddb2      	ble.n	800a4de <calc_lookup+0xe>
		//lookup[i] = 0.5773f * (cos((float)i/100.0f)       + amp_harmonic * cos( (float)i/100.0f       * 3.0f)    +  cos((float)i/100.0f-1.047f) + amp_harmonic * cos(((float)i/100.0f-1.047f)* 3.0f)) ;// the harmonic tends to fully cancel out

		// --- power law
		//lookup[i] = 0.5773f * (pow( cos((float)i/100.0f) + cos((float)i/100.0f-1.047f),amp_harmonic)/ pow(amp_harmonic,0.5f)); //looks like 1.0 is already best in terms of overtones
	}
}
 800a578:	bf00      	nop
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bdb0      	pop	{r4, r5, r7, pc}
 800a580:	e0000000 	.word	0xe0000000
 800a584:	3fe2793d 	.word	0x3fe2793d
 800a588:	42c80000 	.word	0x42c80000
 800a58c:	3f860419 	.word	0x3f860419

0800a590 <calc_sin_lookup>:

void calc_sin_lookup(float *sin_lookup){
 800a590:	b590      	push	{r4, r7, lr}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
	for (int i=0; i<628; i++){
 800a598:	2300      	movs	r3, #0
 800a59a:	60fb      	str	r3, [r7, #12]
 800a59c:	e01f      	b.n	800a5de <calc_sin_lookup+0x4e>
		sin_lookup[i] = sin((float)i/100.0f);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	ee07 3a90 	vmov	s15, r3
 800a5a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5a8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800a5f0 <calc_sin_lookup+0x60>
 800a5ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a5b0:	ee16 0a90 	vmov	r0, s13
 800a5b4:	f7f5 ffc8 	bl	8000548 <__aeabi_f2d>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	ec44 3b10 	vmov	d0, r3, r4
 800a5c0:	f003 f8fe 	bl	800d7c0 <sin>
 800a5c4:	ec51 0b10 	vmov	r0, r1, d0
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	18d4      	adds	r4, r2, r3
 800a5d0:	f7f6 faea 	bl	8000ba8 <__aeabi_d2f>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	6023      	str	r3, [r4, #0]
	for (int i=0; i<628; i++){
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	60fb      	str	r3, [r7, #12]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f5b3 7f1d 	cmp.w	r3, #628	; 0x274
 800a5e4:	dbdb      	blt.n	800a59e <calc_sin_lookup+0xe>
	}
}
 800a5e6:	bf00      	nop
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd90      	pop	{r4, r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	42c80000 	.word	0x42c80000

0800a5f4 <calc_cos_lookup>:

void calc_cos_lookup(float *cos_lookup){
 800a5f4:	b590      	push	{r4, r7, lr}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
	for (int i=0; i<628; i++){
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	60fb      	str	r3, [r7, #12]
 800a600:	e01f      	b.n	800a642 <calc_cos_lookup+0x4e>
		cos_lookup[i] = cos((float)i/100.0f);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	ee07 3a90 	vmov	s15, r3
 800a608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a60c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800a654 <calc_cos_lookup+0x60>
 800a610:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a614:	ee16 0a90 	vmov	r0, s13
 800a618:	f7f5 ff96 	bl	8000548 <__aeabi_f2d>
 800a61c:	4603      	mov	r3, r0
 800a61e:	460c      	mov	r4, r1
 800a620:	ec44 3b10 	vmov	d0, r3, r4
 800a624:	f003 f888 	bl	800d738 <cos>
 800a628:	ec51 0b10 	vmov	r0, r1, d0
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	18d4      	adds	r4, r2, r3
 800a634:	f7f6 fab8 	bl	8000ba8 <__aeabi_d2f>
 800a638:	4603      	mov	r3, r0
 800a63a:	6023      	str	r3, [r4, #0]
	for (int i=0; i<628; i++){
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	3301      	adds	r3, #1
 800a640:	60fb      	str	r3, [r7, #12]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f5b3 7f1d 	cmp.w	r3, #628	; 0x274
 800a648:	dbdb      	blt.n	800a602 <calc_cos_lookup+0xe>
	}
}
 800a64a:	bf00      	nop
 800a64c:	3714      	adds	r7, #20
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd90      	pop	{r4, r7, pc}
 800a652:	bf00      	nop
 800a654:	42c80000 	.word	0x42c80000

0800a658 <DMAUSARTTransferComplete>:

void DMAUSARTTransferComplete(DMA_HandleTypeDef *hdma){
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
	huart3.Instance->CR3 &= ~USART_CR3_DMAT;
 800a660:	4b06      	ldr	r3, [pc, #24]	; (800a67c <DMAUSARTTransferComplete+0x24>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	695a      	ldr	r2, [r3, #20]
 800a666:	4b05      	ldr	r3, [pc, #20]	; (800a67c <DMAUSARTTransferComplete+0x24>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a66e:	615a      	str	r2, [r3, #20]
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr
 800a67c:	20000584 	.word	0x20000584

0800a680 <HAL_GPIO_EXTI_Callback>:




// --- Callback when Encoder fires the I at zero point
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800a680:	b590      	push	{r4, r7, lr}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	4603      	mov	r3, r0
 800a688:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT0_I_W_Pin){
 800a68a:	88fb      	ldrh	r3, [r7, #6]
 800a68c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a690:	d147      	bne.n	800a722 <HAL_GPIO_EXTI_Callback+0xa2>
		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
		uint16_t encoder_belief = TIM8->CNT;
 800a692:	4b26      	ldr	r3, [pc, #152]	; (800a72c <HAL_GPIO_EXTI_Callback+0xac>)
 800a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a696:	81fb      	strh	r3, [r7, #14]

		if (counter0ing_at0crossing){
 800a698:	4b25      	ldr	r3, [pc, #148]	; (800a730 <HAL_GPIO_EXTI_Callback+0xb0>)
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d01e      	beq.n	800a6de <HAL_GPIO_EXTI_Callback+0x5e>
			TIM8->CNT = 0;     //TODO: this could lead to an offset of 1 since the CNT value may not be set yet and get incremented thereafter if this interrupt is executed before the CNT increment.
 800a6a0:	4b22      	ldr	r3, [pc, #136]	; (800a72c <HAL_GPIO_EXTI_Callback+0xac>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	625a      	str	r2, [r3, #36]	; 0x24
			counter0ing_at0crossing = false;
 800a6a6:	4b22      	ldr	r3, [pc, #136]	; (800a730 <HAL_GPIO_EXTI_Callback+0xb0>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	701a      	strb	r2, [r3, #0]
			sprintf((char*)buf_msg, "[EXTI_Callback] EncVal at FIRST ZERO: %d \r\n", encoder_belief);
 800a6ac:	89fb      	ldrh	r3, [r7, #14]
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	4920      	ldr	r1, [pc, #128]	; (800a734 <HAL_GPIO_EXTI_Callback+0xb4>)
 800a6b2:	4821      	ldr	r0, [pc, #132]	; (800a738 <HAL_GPIO_EXTI_Callback+0xb8>)
 800a6b4:	f002 fc2a 	bl	800cf0c <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800a6b8:	481f      	ldr	r0, [pc, #124]	; (800a738 <HAL_GPIO_EXTI_Callback+0xb8>)
 800a6ba:	f7f5 fd89 	bl	80001d0 <strlen>
 800a6be:	4604      	mov	r4, r0
 800a6c0:	481e      	ldr	r0, [pc, #120]	; (800a73c <HAL_GPIO_EXTI_Callback+0xbc>)
 800a6c2:	f7f5 fd85 	bl	80001d0 <strlen>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	4423      	add	r3, r4
 800a6ca:	2b63      	cmp	r3, #99	; 0x63
 800a6cc:	d804      	bhi.n	800a6d8 <HAL_GPIO_EXTI_Callback+0x58>
				strcat(buf_msgs, buf_msg);
 800a6ce:	491a      	ldr	r1, [pc, #104]	; (800a738 <HAL_GPIO_EXTI_Callback+0xb8>)
 800a6d0:	481a      	ldr	r0, [pc, #104]	; (800a73c <HAL_GPIO_EXTI_Callback+0xbc>)
 800a6d2:	f002 fc3b 	bl	800cf4c <strcat>
 800a6d6:	e002      	b.n	800a6de <HAL_GPIO_EXTI_Callback+0x5e>
			}
			else {
				buf_msgs[0] = '#';
 800a6d8:	4b18      	ldr	r3, [pc, #96]	; (800a73c <HAL_GPIO_EXTI_Callback+0xbc>)
 800a6da:	2223      	movs	r2, #35	; 0x23
 800a6dc:	701a      	strb	r2, [r3, #0]
			}
		}
		//val_SO1_buf_index = 0;

		if (encoder_belief > ENC_TOLERANCE && encoder_belief < ENC_STEPS - ENC_TOLERANCE){
 800a6de:	89fb      	ldrh	r3, [r7, #14]
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d91f      	bls.n	800a724 <HAL_GPIO_EXTI_Callback+0xa4>
 800a6e4:	89fb      	ldrh	r3, [r7, #14]
 800a6e6:	f640 729d 	movw	r2, #3997	; 0xf9d
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d81a      	bhi.n	800a724 <HAL_GPIO_EXTI_Callback+0xa4>
			sprintf((char*)buf_msg, "[EXTI_Callback] EncVal at ZERO MISMATCH: %d \r\n", encoder_belief);
 800a6ee:	89fb      	ldrh	r3, [r7, #14]
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	4913      	ldr	r1, [pc, #76]	; (800a740 <HAL_GPIO_EXTI_Callback+0xc0>)
 800a6f4:	4810      	ldr	r0, [pc, #64]	; (800a738 <HAL_GPIO_EXTI_Callback+0xb8>)
 800a6f6:	f002 fc09 	bl	800cf0c <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800a6fa:	480f      	ldr	r0, [pc, #60]	; (800a738 <HAL_GPIO_EXTI_Callback+0xb8>)
 800a6fc:	f7f5 fd68 	bl	80001d0 <strlen>
 800a700:	4604      	mov	r4, r0
 800a702:	480e      	ldr	r0, [pc, #56]	; (800a73c <HAL_GPIO_EXTI_Callback+0xbc>)
 800a704:	f7f5 fd64 	bl	80001d0 <strlen>
 800a708:	4603      	mov	r3, r0
 800a70a:	4423      	add	r3, r4
 800a70c:	2b63      	cmp	r3, #99	; 0x63
 800a70e:	d804      	bhi.n	800a71a <HAL_GPIO_EXTI_Callback+0x9a>
				strcat(buf_msgs, buf_msg);
 800a710:	4909      	ldr	r1, [pc, #36]	; (800a738 <HAL_GPIO_EXTI_Callback+0xb8>)
 800a712:	480a      	ldr	r0, [pc, #40]	; (800a73c <HAL_GPIO_EXTI_Callback+0xbc>)
 800a714:	f002 fc1a 	bl	800cf4c <strcat>
		}
	}
	else{
		__NOP();
	}
}
 800a718:	e004      	b.n	800a724 <HAL_GPIO_EXTI_Callback+0xa4>
				buf_msgs[0] = '#';
 800a71a:	4b08      	ldr	r3, [pc, #32]	; (800a73c <HAL_GPIO_EXTI_Callback+0xbc>)
 800a71c:	2223      	movs	r2, #35	; 0x23
 800a71e:	701a      	strb	r2, [r3, #0]
}
 800a720:	e000      	b.n	800a724 <HAL_GPIO_EXTI_Callback+0xa4>
		__NOP();
 800a722:	bf00      	nop
}
 800a724:	bf00      	nop
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd90      	pop	{r4, r7, pc}
 800a72c:	40010400 	.word	0x40010400
 800a730:	2000000f 	.word	0x2000000f
 800a734:	0800eb38 	.word	0x0800eb38
 800a738:	200024ec 	.word	0x200024ec
 800a73c:	20001820 	.word	0x20001820
 800a740:	0800eb64 	.word	0x0800eb64

0800a744 <HAL_TIM_OC_DelayElapsedCallback>:

// -----------------------------------------------------------
// MAIN UPDATE STEP interrupt triggered by timer 1 channel 4 towards end of each pwm cycle
// -----------------------------------------------------------

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 800a744:	b5b0      	push	{r4, r5, r7, lr}
 800a746:	ed2d 8b04 	vpush	{d8-d9}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
	if (htim != &htim1){
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4abc      	ldr	r2, [pc, #752]	; (800aa44 <HAL_TIM_OC_DelayElapsedCallback+0x300>)
 800a754:	4293      	cmp	r3, r2
 800a756:	f040 816f 	bne.w	800aa38 <HAL_TIM_OC_DelayElapsedCallback+0x2f4>
		return;
	}

#if DB_TIMING
	DB1H;
 800a75a:	4bbb      	ldr	r3, [pc, #748]	; (800aa48 <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 800a75c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a760:	619a      	str	r2, [r3, #24]
#endif

	//timing_party();

	// --- get current encoder position
	register int32_t EncVal = TIM8->CNT;
 800a762:	4bba      	ldr	r3, [pc, #744]	; (800aa4c <HAL_TIM_OC_DelayElapsedCallback+0x308>)
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	461d      	mov	r5, r3
	register int32_t delta_EncVal = (int32_t)EncVal - (int32_t)last_EncVal_pwm;
 800a768:	4bb9      	ldr	r3, [pc, #740]	; (800aa50 <HAL_TIM_OC_DelayElapsedCallback+0x30c>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	1aec      	subs	r4, r5, r3
	last_EncVal_pwm = EncVal;
 800a76e:	4bb8      	ldr	r3, [pc, #736]	; (800aa50 <HAL_TIM_OC_DelayElapsedCallback+0x30c>)
 800a770:	601d      	str	r5, [r3, #0]




	// --- determine whether 0 crossing happened and adjust rotation_counter accordingly
	if (delta_EncVal > ENC_STEPS_HALF) {
 800a772:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 800a776:	dd05      	ble.n	800a784 <HAL_TIM_OC_DelayElapsedCallback+0x40>
		rotation_counter--;
 800a778:	4bb6      	ldr	r3, [pc, #728]	; (800aa54 <HAL_TIM_OC_DelayElapsedCallback+0x310>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	3b01      	subs	r3, #1
 800a77e:	4ab5      	ldr	r2, [pc, #724]	; (800aa54 <HAL_TIM_OC_DelayElapsedCallback+0x310>)
 800a780:	6013      	str	r3, [r2, #0]
 800a782:	e007      	b.n	800a794 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	}
	else if (delta_EncVal < -ENC_STEPS_HALF){
 800a784:	f514 6ffa 	cmn.w	r4, #2000	; 0x7d0
 800a788:	da04      	bge.n	800a794 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		rotation_counter++;
 800a78a:	4bb2      	ldr	r3, [pc, #712]	; (800aa54 <HAL_TIM_OC_DelayElapsedCallback+0x310>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	3301      	adds	r3, #1
 800a790:	4ab0      	ldr	r2, [pc, #704]	; (800aa54 <HAL_TIM_OC_DelayElapsedCallback+0x310>)
 800a792:	6013      	str	r3, [r2, #0]
	}// both statements 300ns



	// --- calculate the phase with respect to a pole cycle in 100x int
	pole_phase_int = (int)((PI2 * N_POLES / ENC_STEPS * (float) EncVal - phase0 + PI2) * 100.0f) % 628 ; //400ns when consolidated in one line
 800a794:	ee07 5a90 	vmov	s15, r5
 800a798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a79c:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800aa58 <HAL_TIM_OC_DelayElapsedCallback+0x314>
 800a7a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a7a4:	4bad      	ldr	r3, [pc, #692]	; (800aa5c <HAL_TIM_OC_DelayElapsedCallback+0x318>)
 800a7a6:	edd3 7a00 	vldr	s15, [r3]
 800a7aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7ae:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800aa60 <HAL_TIM_OC_DelayElapsedCallback+0x31c>
 800a7b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a7b6:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800aa64 <HAL_TIM_OC_DelayElapsedCallback+0x320>
 800a7ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a7be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a7c2:	ee17 2a90 	vmov	r2, s15
 800a7c6:	4ba8      	ldr	r3, [pc, #672]	; (800aa68 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 800a7c8:	fb83 1302 	smull	r1, r3, r3, r2
 800a7cc:	11d9      	asrs	r1, r3, #7
 800a7ce:	17d3      	asrs	r3, r2, #31
 800a7d0:	1acb      	subs	r3, r1, r3
 800a7d2:	f44f 711d 	mov.w	r1, #628	; 0x274
 800a7d6:	fb01 f303 	mul.w	r3, r1, r3
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	4aa3      	ldr	r2, [pc, #652]	; (800aa6c <HAL_TIM_OC_DelayElapsedCallback+0x328>)
 800a7de:	6013      	str	r3, [r2, #0]


	register int32_t A = HAL_ADCEx_InjectedGetValue (&hadc1, RANK_I);//500ns
 800a7e0:	2104      	movs	r1, #4
 800a7e2:	48a3      	ldr	r0, [pc, #652]	; (800aa70 <HAL_TIM_OC_DelayElapsedCallback+0x32c>)
 800a7e4:	f7f7 fa40 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	ee09 3a10 	vmov	s18, r3
	register int32_t B = HAL_ADCEx_InjectedGetValue (&hadc2, RANK_I);//500ns
 800a7ee:	2104      	movs	r1, #4
 800a7f0:	48a0      	ldr	r0, [pc, #640]	; (800aa74 <HAL_TIM_OC_DelayElapsedCallback+0x330>)
 800a7f2:	f7f7 fa39 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	ee08 3a90 	vmov	s17, r3
	register int32_t C = HAL_ADCEx_InjectedGetValue (&hadc3, RANK_I);//500ns
 800a7fc:	2104      	movs	r1, #4
 800a7fe:	489e      	ldr	r0, [pc, #632]	; (800aa78 <HAL_TIM_OC_DelayElapsedCallback+0x334>)
 800a800:	f7f7 fa32 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800a804:	4603      	mov	r3, r0
 800a806:	ee08 3a10 	vmov	s16, r3

	register float I_A = ((float)A - A_mean) * 0.134f;
 800a80a:	eeb8 7ac9 	vcvt.f32.s32	s14, s18
 800a80e:	4b9b      	ldr	r3, [pc, #620]	; (800aa7c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 800a810:	edd3 7a00 	vldr	s15, [r3]
 800a814:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a818:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800aa80 <HAL_TIM_OC_DelayElapsedCallback+0x33c>
 800a81c:	ee27 9a87 	vmul.f32	s18, s15, s14
	register float I_B = ((float)B - B_mean) * 0.189f; // 3.3[V]/4095[ticks] /20[gain]/0.0003[ohm] = 0.134 //TODO verify SPI setting in DRV8301 the factor sqrt(2) comes out of thin air
 800a820:	eeb8 7ae8 	vcvt.f32.s32	s14, s17
 800a824:	4b97      	ldr	r3, [pc, #604]	; (800aa84 <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 800a826:	edd3 7a00 	vldr	s15, [r3]
 800a82a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a82e:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800aa88 <HAL_TIM_OC_DelayElapsedCallback+0x344>
 800a832:	ee67 8a87 	vmul.f32	s17, s15, s14
	register float I_C = ((float)C - C_mean) * 0.189f;
 800a836:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
 800a83a:	4b94      	ldr	r3, [pc, #592]	; (800aa8c <HAL_TIM_OC_DelayElapsedCallback+0x348>)
 800a83c:	edd3 7a00 	vldr	s15, [r3]
 800a840:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a844:	ed9f 7a90 	vldr	s14, [pc, #576]	; 800aa88 <HAL_TIM_OC_DelayElapsedCallback+0x344>
 800a848:	ee27 8a87 	vmul.f32	s16, s15, s14



	// --- accumulate analog readings till we have enough samples which is a flag for the heart beat (= all MCU internal control loops)
	if (analog_samples_counter < ANALOG_SAMPLES_N ){  // TODO: if n_samples >= 32
 800a84c:	4b90      	ldr	r3, [pc, #576]	; (800aa90 <HAL_TIM_OC_DelayElapsedCallback+0x34c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b1f      	cmp	r3, #31
 800a852:	d82c      	bhi.n	800a8ae <HAL_TIM_OC_DelayElapsedCallback+0x16a>
		acc_I_tot_squared += (I_A * I_A + I_B * I_B + I_C * I_C) / 1.5f; //todo check 1.5
 800a854:	ee29 7a09 	vmul.f32	s14, s18, s18
 800a858:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800a85c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a860:	ee68 7a08 	vmul.f32	s15, s16, s16
 800a864:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a868:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800a86c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a870:	4b88      	ldr	r3, [pc, #544]	; (800aa94 <HAL_TIM_OC_DelayElapsedCallback+0x350>)
 800a872:	edd3 7a00 	vldr	s15, [r3]
 800a876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a87a:	4b86      	ldr	r3, [pc, #536]	; (800aa94 <HAL_TIM_OC_DelayElapsedCallback+0x350>)
 800a87c:	edc3 7a00 	vstr	s15, [r3]
		acc_STRAIN0 += HAL_ADCEx_InjectedGetValue (&hadc1, RANK_F);
 800a880:	2103      	movs	r1, #3
 800a882:	487b      	ldr	r0, [pc, #492]	; (800aa70 <HAL_TIM_OC_DelayElapsedCallback+0x32c>)
 800a884:	f7f7 f9f0 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800a888:	4602      	mov	r2, r0
 800a88a:	4b83      	ldr	r3, [pc, #524]	; (800aa98 <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4413      	add	r3, r2
 800a890:	4a81      	ldr	r2, [pc, #516]	; (800aa98 <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 800a892:	6013      	str	r3, [r2, #0]
		acc_Vbus += adc1_buf[RANK_CONT_Vbus-1];
 800a894:	4b81      	ldr	r3, [pc, #516]	; (800aa9c <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 800a896:	89db      	ldrh	r3, [r3, #14]
 800a898:	461a      	mov	r2, r3
 800a89a:	4b81      	ldr	r3, [pc, #516]	; (800aaa0 <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4413      	add	r3, r2
 800a8a0:	4a7f      	ldr	r2, [pc, #508]	; (800aaa0 <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 800a8a2:	6013      	str	r3, [r2, #0]
#if DIFF_FORCE
		acc_STRAIN1 += HAL_ADCEx_InjectedGetValue (&hadc2, RANK_F);
#endif
		analog_samples_counter ++;
 800a8a4:	4b7a      	ldr	r3, [pc, #488]	; (800aa90 <HAL_TIM_OC_DelayElapsedCallback+0x34c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	4a79      	ldr	r2, [pc, #484]	; (800aa90 <HAL_TIM_OC_DelayElapsedCallback+0x34c>)
 800a8ac:	6013      	str	r3, [r2, #0]
	}//200ns when not entering presumably

	if (FOC_enabled){
 800a8ae:	4b7d      	ldr	r3, [pc, #500]	; (800aaa4 <HAL_TIM_OC_DelayElapsedCallback+0x360>)
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 80b6 	beq.w	800aa24 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>

		register float a;
		register float b;

		register float direct_component = 0.0f;
 800a8b8:	eddf 9a7b 	vldr	s19, [pc, #492]	; 800aaa8 <HAL_TIM_OC_DelayElapsedCallback+0x364>
		register float quadrature_component = 0.0f;
 800a8bc:	ed9f 9a7a 	vldr	s18, [pc, #488]	; 800aaa8 <HAL_TIM_OC_DelayElapsedCallback+0x364>

		// --- Park transform
		//a = 0.7f * ((float)A-A_mean);
		//b = INV_SQRT_3 * (a + 2.0f * ((float)B-B_mean)); //200ns thanks to precalc of SQRT
		a = I_B; // a and b derived from B and C since they have same DAC (A is on external DAC which may behave differently -- adjust phaseshift accordingly!)
		b = INV_SQRT_3 * (a + 2.0f * I_C); //200ns thanks to precalc of SQRT
 800a8c0:	ee78 7a08 	vadd.f32	s15, s16, s16
 800a8c4:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800a8c8:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800aaac <HAL_TIM_OC_DelayElapsedCallback+0x368>
 800a8cc:	ee27 8a87 	vmul.f32	s16, s15, s14

		// -- Clark transform
		register uint32_t poleB_phase_int = (pole_phase_int - 209 + 628) % 628; //
 800a8d0:	4b66      	ldr	r3, [pc, #408]	; (800aa6c <HAL_TIM_OC_DelayElapsedCallback+0x328>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f203 13a3 	addw	r3, r3, #419	; 0x1a3
 800a8d8:	4a63      	ldr	r2, [pc, #396]	; (800aa68 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 800a8da:	fb82 1203 	smull	r1, r2, r2, r3
 800a8de:	11d1      	asrs	r1, r2, #7
 800a8e0:	17da      	asrs	r2, r3, #31
 800a8e2:	1a8a      	subs	r2, r1, r2
 800a8e4:	f44f 711d 	mov.w	r1, #628	; 0x274
 800a8e8:	fb01 f202 	mul.w	r2, r1, r2
 800a8ec:	1a9a      	subs	r2, r3, r2
 800a8ee:	4614      	mov	r4, r2
		direct_component = a * cos_lookup[poleB_phase_int] + b * sin_lookup[poleB_phase_int];
 800a8f0:	4a6f      	ldr	r2, [pc, #444]	; (800aab0 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800a8f2:	00a3      	lsls	r3, r4, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	edd3 7a00 	vldr	s15, [r3]
 800a8fa:	ee28 7aa7 	vmul.f32	s14, s17, s15
 800a8fe:	4a6d      	ldr	r2, [pc, #436]	; (800aab4 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 800a900:	00a3      	lsls	r3, r4, #2
 800a902:	4413      	add	r3, r2
 800a904:	edd3 7a00 	vldr	s15, [r3]
 800a908:	ee68 7a27 	vmul.f32	s15, s16, s15
 800a90c:	ee77 9a27 	vadd.f32	s19, s14, s15
		quadrature_component = -a * sin_lookup[poleB_phase_int] + b * cos_lookup[poleB_phase_int]; //300ns
 800a910:	eeb1 7a68 	vneg.f32	s14, s17
 800a914:	4a67      	ldr	r2, [pc, #412]	; (800aab4 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 800a916:	00a3      	lsls	r3, r4, #2
 800a918:	4413      	add	r3, r2
 800a91a:	edd3 7a00 	vldr	s15, [r3]
 800a91e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a922:	4a63      	ldr	r2, [pc, #396]	; (800aab0 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800a924:	00a3      	lsls	r3, r4, #2
 800a926:	4413      	add	r3, r2
 800a928:	edd3 7a00 	vldr	s15, [r3]
 800a92c:	ee68 7a27 	vmul.f32	s15, s16, s15
 800a930:	ee37 9a27 	vadd.f32	s18, s14, s15

		// --- low pass filter
		register float lp = 0.001f;
 800a934:	ed9f 8a60 	vldr	s16, [pc, #384]	; 800aab8 <HAL_TIM_OC_DelayElapsedCallback+0x374>
		direct_component_lp = (1-lp) * direct_component_lp + lp * direct_component;
 800a938:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a93c:	ee37 7ac8 	vsub.f32	s14, s15, s16
 800a940:	4b5e      	ldr	r3, [pc, #376]	; (800aabc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800a942:	edd3 7a00 	vldr	s15, [r3]
 800a946:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a94a:	ee68 7a29 	vmul.f32	s15, s16, s19
 800a94e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a952:	4b5a      	ldr	r3, [pc, #360]	; (800aabc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800a954:	edc3 7a00 	vstr	s15, [r3]
		quadrature_component_lp = (1-lp) * quadrature_component_lp + lp * quadrature_component;//with register 240 without register 380ns for the 3 lines
 800a958:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a95c:	ee37 7ac8 	vsub.f32	s14, s15, s16
 800a960:	4b57      	ldr	r3, [pc, #348]	; (800aac0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800a962:	edd3 7a00 	vldr	s15, [r3]
 800a966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a96a:	ee68 7a09 	vmul.f32	s15, s16, s18
 800a96e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a972:	4b53      	ldr	r3, [pc, #332]	; (800aac0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800a974:	edc3 7a00 	vstr	s15, [r3]


		static float direct_component_lp_integral = 0.0f;
		direct_component_lp_integral += direct_component_lp;//150ns for 2lines
 800a978:	4b52      	ldr	r3, [pc, #328]	; (800aac4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800a97a:	ed93 7a00 	vldr	s14, [r3]
 800a97e:	4b4f      	ldr	r3, [pc, #316]	; (800aabc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800a980:	edd3 7a00 	vldr	s15, [r3]
 800a984:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a988:	4b4e      	ldr	r3, [pc, #312]	; (800aac4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800a98a:	edc3 7a00 	vstr	s15, [r3]

		register float direct_component_lp_integral_max = 0.4f / 0.00001f;
 800a98e:	ed9f 8a4e 	vldr	s16, [pc, #312]	; 800aac8 <HAL_TIM_OC_DelayElapsedCallback+0x384>
		if (direct_component_lp_integral > direct_component_lp_integral_max){
 800a992:	4b4c      	ldr	r3, [pc, #304]	; (800aac4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800a994:	edd3 7a00 	vldr	s15, [r3]
 800a998:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9a0:	d502      	bpl.n	800a9a8 <HAL_TIM_OC_DelayElapsedCallback+0x264>
			direct_component_lp_integral = direct_component_lp_integral_max;
 800a9a2:	4b48      	ldr	r3, [pc, #288]	; (800aac4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800a9a4:	ed83 8a00 	vstr	s16, [r3]
		}
		if (direct_component_lp_integral < -direct_component_lp_integral_max){
 800a9a8:	eeb1 7a48 	vneg.f32	s14, s16
 800a9ac:	4b45      	ldr	r3, [pc, #276]	; (800aac4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800a9ae:	edd3 7a00 	vldr	s15, [r3]
 800a9b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ba:	dd04      	ble.n	800a9c6 <HAL_TIM_OC_DelayElapsedCallback+0x282>
			direct_component_lp_integral = -direct_component_lp_integral_max;
 800a9bc:	eef1 7a48 	vneg.f32	s15, s16
 800a9c0:	4b40      	ldr	r3, [pc, #256]	; (800aac4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800a9c2:	edc3 7a00 	vstr	s15, [r3]
		}


		// --- PI controller
		FOC_phase_shift = 0.005f * direct_component_lp + 0.00001f  * direct_component_lp_integral; //220ns//starts oscillating at I = 0.00008f and alternatively at P = 0.03f
 800a9c6:	4b3d      	ldr	r3, [pc, #244]	; (800aabc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800a9c8:	edd3 7a00 	vldr	s15, [r3]
 800a9cc:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800aacc <HAL_TIM_OC_DelayElapsedCallback+0x388>
 800a9d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a9d4:	4b3b      	ldr	r3, [pc, #236]	; (800aac4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800a9d6:	edd3 7a00 	vldr	s15, [r3]
 800a9da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aad0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>
 800a9de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a9e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9e6:	4b3b      	ldr	r3, [pc, #236]	; (800aad4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800a9e8:	edc3 7a00 	vstr	s15, [r3]


		if (FOC_phase_shift > FOC_PHASE_LIM){
 800a9ec:	4b39      	ldr	r3, [pc, #228]	; (800aad4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800a9ee:	edd3 7a00 	vldr	s15, [r3]
 800a9f2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800aad8 <HAL_TIM_OC_DelayElapsedCallback+0x394>
 800a9f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9fe:	dd03      	ble.n	800aa08 <HAL_TIM_OC_DelayElapsedCallback+0x2c4>
			FOC_phase_shift = FOC_PHASE_LIM;
 800aa00:	4b34      	ldr	r3, [pc, #208]	; (800aad4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800aa02:	4a36      	ldr	r2, [pc, #216]	; (800aadc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 800aa04:	601a      	str	r2, [r3, #0]
 800aa06:	e010      	b.n	800aa2a <HAL_TIM_OC_DelayElapsedCallback+0x2e6>
		}
		else if (FOC_phase_shift < -FOC_PHASE_LIM){
 800aa08:	4b32      	ldr	r3, [pc, #200]	; (800aad4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800aa0a:	edd3 7a00 	vldr	s15, [r3]
 800aa0e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800aae0 <HAL_TIM_OC_DelayElapsedCallback+0x39c>
 800aa12:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa1a:	d506      	bpl.n	800aa2a <HAL_TIM_OC_DelayElapsedCallback+0x2e6>
			FOC_phase_shift = -FOC_PHASE_LIM;
 800aa1c:	4b2d      	ldr	r3, [pc, #180]	; (800aad4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800aa1e:	4a31      	ldr	r2, [pc, #196]	; (800aae4 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800aa20:	601a      	str	r2, [r3, #0]
 800aa22:	e002      	b.n	800aa2a <HAL_TIM_OC_DelayElapsedCallback+0x2e6>
		//		FOC_phase_shift = 0.0f;
		//		direct_component_lp_integral = 0.0f;
		//	}//220ns
	}
	else {
		FOC_phase_shift = 0.1f;//empirical good mean of correction
 800aa24:	4b2b      	ldr	r3, [pc, #172]	; (800aad4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800aa26:	4a30      	ldr	r2, [pc, #192]	; (800aae8 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 800aa28:	601a      	str	r2, [r3, #0]
	}


#if DB_TIMING
	DB1L;
 800aa2a:	4b07      	ldr	r3, [pc, #28]	; (800aa48 <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 800aa2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa30:	619a      	str	r2, [r3, #24]
#endif


	update_pwm();
 800aa32:	f000 f85b 	bl	800aaec <update_pwm>
 800aa36:	e000      	b.n	800aa3a <HAL_TIM_OC_DelayElapsedCallback+0x2f6>
		return;
 800aa38:	bf00      	nop

}
 800aa3a:	3708      	adds	r7, #8
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	ecbd 8b04 	vpop	{d8-d9}
 800aa42:	bdb0      	pop	{r4, r5, r7, pc}
 800aa44:	20000dc0 	.word	0x20000dc0
 800aa48:	40020c00 	.word	0x40020c00
 800aa4c:	40010400 	.word	0x40010400
 800aa50:	20000abc 	.word	0x20000abc
 800aa54:	200000e0 	.word	0x200000e0
 800aa58:	3c3426be 	.word	0x3c3426be
 800aa5c:	20000008 	.word	0x20000008
 800aa60:	40c90fd0 	.word	0x40c90fd0
 800aa64:	42c80000 	.word	0x42c80000
 800aa68:	342da7f3 	.word	0x342da7f3
 800aa6c:	20000be0 	.word	0x20000be0
 800aa70:	20000cb0 	.word	0x20000cb0
 800aa74:	200005c4 	.word	0x200005c4
 800aa78:	20000cf8 	.word	0x20000cf8
 800aa7c:	20000030 	.word	0x20000030
 800aa80:	3e09374c 	.word	0x3e09374c
 800aa84:	20000034 	.word	0x20000034
 800aa88:	3e418937 	.word	0x3e418937
 800aa8c:	20000038 	.word	0x20000038
 800aa90:	20000134 	.word	0x20000134
 800aa94:	2000011c 	.word	0x2000011c
 800aa98:	20000100 	.word	0x20000100
 800aa9c:	20000bd0 	.word	0x20000bd0
 800aaa0:	20000108 	.word	0x20000108
 800aaa4:	2000000c 	.word	0x2000000c
 800aaa8:	00000000 	.word	0x00000000
 800aaac:	3f13cd36 	.word	0x3f13cd36
 800aab0:	20000e0c 	.word	0x20000e0c
 800aab4:	20001b1c 	.word	0x20001b1c
 800aab8:	3a83126f 	.word	0x3a83126f
 800aabc:	2000014c 	.word	0x2000014c
 800aac0:	20000150 	.word	0x20000150
 800aac4:	20000154 	.word	0x20000154
 800aac8:	471c4000 	.word	0x471c4000
 800aacc:	3ba3d70a 	.word	0x3ba3d70a
 800aad0:	3727c5ac 	.word	0x3727c5ac
 800aad4:	20000130 	.word	0x20000130
 800aad8:	3e99999a 	.word	0x3e99999a
 800aadc:	3e99999a 	.word	0x3e99999a
 800aae0:	be99999a 	.word	0xbe99999a
 800aae4:	be99999a 	.word	0xbe99999a
 800aae8:	3dcccccd 	.word	0x3dcccccd

0800aaec <update_pwm>:


// -----------------------------------------------------------
// called from MAIN UPDATE STEP to calc and write pwm values to FETdriver
// -----------------------------------------------------------
void update_pwm(void){
 800aaec:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 800aaf0:	ed2d 8b04 	vpush	{d8-d9}
 800aaf4:	af00      	add	r7, sp, #0

#if DB_TIMING
	DB1H;
 800aaf6:	4bbb      	ldr	r3, [pc, #748]	; (800ade4 <update_pwm+0x2f8>)
 800aaf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aafc:	619a      	str	r2, [r3, #24]
#endif

	//register int32_t field_phase_int;
	register int32_t field_phase_int = 0;
 800aafe:	2400      	movs	r4, #0

	// --- stiffness motor
	register float u0 = amp + stiffness * omegaEnc / (float)fast_Vbus * 603.0f ;// * direction; // TODO the abs allows same stiffness to make it softer for both directions - without a signchange is needed BUT turnaround is super aggressive now :( SAME issue with direction - super forceful reverse but sign identical --- looks like v needs to direct also the phase !!!!
 800ab00:	4bb9      	ldr	r3, [pc, #740]	; (800ade8 <update_pwm+0x2fc>)
 800ab02:	ed93 7a00 	vldr	s14, [r3]
 800ab06:	4bb9      	ldr	r3, [pc, #740]	; (800adec <update_pwm+0x300>)
 800ab08:	edd3 7a00 	vldr	s15, [r3]
 800ab0c:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ab10:	4bb7      	ldr	r3, [pc, #732]	; (800adf0 <update_pwm+0x304>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	ee07 3a90 	vmov	s15, r3
 800ab18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab20:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800adf4 <update_pwm+0x308>
 800ab24:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ab28:	4bb3      	ldr	r3, [pc, #716]	; (800adf8 <update_pwm+0x30c>)
 800ab2a:	edd3 7a00 	vldr	s15, [r3]
 800ab2e:	ee37 8a27 	vadd.f32	s16, s14, s15
	// -- invisible motor
	//register float modified_amp = amp + stiffness * lp_omegaEnc + lp_omegaEncDot * 0.00003f * 0.1f * generic_add;// * direction; // TODO the abs allows same stiffness to make it softer for both directions - without a signchange is needed BUT turnaround is super aggressive now :( SAME issue with direction - super forceful reverse but sign identical --- looks like v needs to direct also the phase !!!!
	//AMAZING invisible motor kind of works at generic_add = -8 BUT super unstable at <-9....with both in lp 0.1 it is stable all the way to -25

	// --- signed u0 becomes abs(u0) and direction is encoded in field_phase_int
	if (u0 > 0){
 800ab32:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ab36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab3a:	dd13      	ble.n	800ab64 <update_pwm+0x78>
		field_phase_int = pole_phase_int - (int32_t)((phase_shift + FOC_phase_shift) * 100.0f);
 800ab3c:	4baf      	ldr	r3, [pc, #700]	; (800adfc <update_pwm+0x310>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4aaf      	ldr	r2, [pc, #700]	; (800ae00 <update_pwm+0x314>)
 800ab42:	ed92 7a00 	vldr	s14, [r2]
 800ab46:	4aaf      	ldr	r2, [pc, #700]	; (800ae04 <update_pwm+0x318>)
 800ab48:	edd2 7a00 	vldr	s15, [r2]
 800ab4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab50:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800ae08 <update_pwm+0x31c>
 800ab54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab5c:	ee17 2a90 	vmov	r2, s15
 800ab60:	1a9c      	subs	r4, r3, r2
 800ab62:	e014      	b.n	800ab8e <update_pwm+0xa2>
	}
	else {
		field_phase_int = pole_phase_int + (int32_t)((phase_shift + FOC_phase_shift) * 100.0f);
 800ab64:	4ba6      	ldr	r3, [pc, #664]	; (800ae00 <update_pwm+0x314>)
 800ab66:	ed93 7a00 	vldr	s14, [r3]
 800ab6a:	4ba6      	ldr	r3, [pc, #664]	; (800ae04 <update_pwm+0x318>)
 800ab6c:	edd3 7a00 	vldr	s15, [r3]
 800ab70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab74:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800ae08 <update_pwm+0x31c>
 800ab78:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab80:	ee17 2a90 	vmov	r2, s15
 800ab84:	4b9d      	ldr	r3, [pc, #628]	; (800adfc <update_pwm+0x310>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	18d4      	adds	r4, r2, r3
		u0 = -u0;
 800ab8a:	eeb1 8a48 	vneg.f32	s16, s16
	}

	// --- clamp u0
	if (u0 > AMP_LIMIT){
 800ab8e:	eddf 7a9f 	vldr	s15, [pc, #636]	; 800ae0c <update_pwm+0x320>
 800ab92:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ab96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab9a:	dd01      	ble.n	800aba0 <update_pwm+0xb4>
		u0 = AMP_LIMIT;
 800ab9c:	ed9f 8a9b 	vldr	s16, [pc, #620]	; 800ae0c <update_pwm+0x320>
	}

	if (!sw_enable_pwm){
 800aba0:	4b9b      	ldr	r3, [pc, #620]	; (800ae10 <update_pwm+0x324>)
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	f083 0301 	eor.w	r3, r3, #1
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d001      	beq.n	800abb2 <update_pwm+0xc6>
		u0 = 0;
 800abae:	ed9f 8a99 	vldr	s16, [pc, #612]	; 800ae14 <update_pwm+0x328>
	}

	acc_u0 += u0;
 800abb2:	4b99      	ldr	r3, [pc, #612]	; (800ae18 <update_pwm+0x32c>)
 800abb4:	edd3 7a00 	vldr	s15, [r3]
 800abb8:	ee78 7a27 	vadd.f32	s15, s16, s15
 800abbc:	4b96      	ldr	r3, [pc, #600]	; (800ae18 <update_pwm+0x32c>)
 800abbe:	edc3 7a00 	vstr	s15, [r3]

	if (field_phase_int < 0) {
 800abc2:	2c00      	cmp	r4, #0
 800abc4:	da02      	bge.n	800abcc <update_pwm+0xe0>
		field_phase_int += 628;
 800abc6:	f504 741d 	add.w	r4, r4, #628	; 0x274
 800abca:	e004      	b.n	800abd6 <update_pwm+0xea>
	}
	else if (field_phase_int >= 628) {
 800abcc:	f5b4 7f1d 	cmp.w	r4, #628	; 0x274
 800abd0:	db01      	blt.n	800abd6 <update_pwm+0xea>
		field_phase_int -= 628;
 800abd2:	f5a4 741d 	sub.w	r4, r4, #628	; 0x274
	}//150ns

	register float uA = 0.0f;
 800abd6:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800ae14 <update_pwm+0x328>
	register float uB = 0.0f;
 800abda:	eddf 9a8e 	vldr	s19, [pc, #568]	; 800ae14 <update_pwm+0x328>
	register float uC = 0.0f;
 800abde:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800ae14 <update_pwm+0x328>

	register uint16_t pwmA = 0;
 800abe2:	2500      	movs	r5, #0
	register uint16_t pwmB = 0;
 800abe4:	f04f 0800 	mov.w	r8, #0
	register uint16_t pwmC = 0;
 800abe8:	2600      	movs	r6, #0

	if (!normal_pwm_update){
 800abea:	4b8c      	ldr	r3, [pc, #560]	; (800ae1c <update_pwm+0x330>)
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	f083 0301 	eor.w	r3, r3, #1
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d004      	beq.n	800ac02 <update_pwm+0x116>
#if DB_TIMING
		DB1L;
 800abf8:	4b7a      	ldr	r3, [pc, #488]	; (800ade4 <update_pwm+0x2f8>)
 800abfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abfe:	619a      	str	r2, [r3, #24]
#endif
		return;
 800ac00:	e197      	b.n	800af32 <update_pwm+0x446>
	}

	if (current_mode != freerun ){
 800ac02:	4b87      	ldr	r3, [pc, #540]	; (800ae20 <update_pwm+0x334>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	f000 80ad 	beq.w	800ad66 <update_pwm+0x27a>
		if (current_mode == sinusoidal ){
 800ac0c:	4b84      	ldr	r3, [pc, #528]	; (800ae20 <update_pwm+0x334>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d137      	bne.n	800ac84 <update_pwm+0x198>

			if  (field_phase_int < 210)	{
 800ac14:	2cd1      	cmp	r4, #209	; 0xd1
 800ac16:	dc0e      	bgt.n	800ac36 <update_pwm+0x14a>
				uA = lookup[field_phase_int]; //took<32000ns - with lookup implement it's just 2000ns
 800ac18:	4a82      	ldr	r2, [pc, #520]	; (800ae24 <update_pwm+0x338>)
 800ac1a:	00a3      	lsls	r3, r4, #2
 800ac1c:	4413      	add	r3, r2
 800ac1e:	edd3 8a00 	vldr	s17, [r3]
				uB = lookup[210 - 1 - field_phase_int]; //
 800ac22:	f1c4 03d1 	rsb	r3, r4, #209	; 0xd1
 800ac26:	4a7f      	ldr	r2, [pc, #508]	; (800ae24 <update_pwm+0x338>)
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	edd3 9a00 	vldr	s19, [r3]
				uC = 0;
 800ac30:	ed9f 9a78 	vldr	s18, [pc, #480]	; 800ae14 <update_pwm+0x328>
 800ac34:	e06b      	b.n	800ad0e <update_pwm+0x222>
			}
			else if  (field_phase_int < 420){	 //210...419
 800ac36:	f5b4 7fd2 	cmp.w	r4, #420	; 0x1a4
 800ac3a:	da11      	bge.n	800ac60 <update_pwm+0x174>
				uA = 0;
 800ac3c:	eddf 8a75 	vldr	s17, [pc, #468]	; 800ae14 <update_pwm+0x328>
				uB = lookup[field_phase_int - 210];
 800ac40:	f1a4 03d2 	sub.w	r3, r4, #210	; 0xd2
 800ac44:	4a77      	ldr	r2, [pc, #476]	; (800ae24 <update_pwm+0x338>)
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	edd3 9a00 	vldr	s19, [r3]
				uC = lookup[420 - 1 - field_phase_int];
 800ac4e:	f5c4 73d1 	rsb	r3, r4, #418	; 0x1a2
 800ac52:	3301      	adds	r3, #1
 800ac54:	4a73      	ldr	r2, [pc, #460]	; (800ae24 <update_pwm+0x338>)
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	ed93 9a00 	vldr	s18, [r3]
 800ac5e:	e056      	b.n	800ad0e <update_pwm+0x222>
			}
			else	{  //420...629
				uA = lookup[630 - 1 - field_phase_int];
 800ac60:	f5c4 731d 	rsb	r3, r4, #628	; 0x274
 800ac64:	3301      	adds	r3, #1
 800ac66:	4a6f      	ldr	r2, [pc, #444]	; (800ae24 <update_pwm+0x338>)
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	4413      	add	r3, r2
 800ac6c:	edd3 8a00 	vldr	s17, [r3]
				uB = 0;
 800ac70:	eddf 9a68 	vldr	s19, [pc, #416]	; 800ae14 <update_pwm+0x328>
				uC = lookup[field_phase_int - 420];
 800ac74:	f5a4 73d2 	sub.w	r3, r4, #420	; 0x1a4
 800ac78:	4a6a      	ldr	r2, [pc, #424]	; (800ae24 <update_pwm+0x338>)
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4413      	add	r3, r2
 800ac7e:	ed93 9a00 	vldr	s18, [r3]
 800ac82:	e044      	b.n	800ad0e <update_pwm+0x222>
			}
		}//400ns

		else if (current_mode == trapezoidal){
 800ac84:	4b66      	ldr	r3, [pc, #408]	; (800ae20 <update_pwm+0x334>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d140      	bne.n	800ad0e <update_pwm+0x222>
			if  (field_phase_int < 105-52)	{
 800ac8c:	2c34      	cmp	r4, #52	; 0x34
 800ac8e:	dc06      	bgt.n	800ac9e <update_pwm+0x1b2>
				uA = 1;
 800ac90:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				uB = 0;
 800ac94:	eddf 9a5f 	vldr	s19, [pc, #380]	; 800ae14 <update_pwm+0x328>
				uC = 0;
 800ac98:	ed9f 9a5e 	vldr	s18, [pc, #376]	; 800ae14 <update_pwm+0x328>
 800ac9c:	e037      	b.n	800ad0e <update_pwm+0x222>
			}
			else if  (field_phase_int < 210-52)	{
 800ac9e:	2c9d      	cmp	r4, #157	; 0x9d
 800aca0:	dc06      	bgt.n	800acb0 <update_pwm+0x1c4>
				uA = 1;
 800aca2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				uB = 1;
 800aca6:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
				uC = 0;
 800acaa:	ed9f 9a5a 	vldr	s18, [pc, #360]	; 800ae14 <update_pwm+0x328>
 800acae:	e02e      	b.n	800ad0e <update_pwm+0x222>
			}
			else if  (field_phase_int < 315-52)	{
 800acb0:	f5b4 7f83 	cmp.w	r4, #262	; 0x106
 800acb4:	dc06      	bgt.n	800acc4 <update_pwm+0x1d8>
				uA = 0;
 800acb6:	eddf 8a57 	vldr	s17, [pc, #348]	; 800ae14 <update_pwm+0x328>
				uB = 1;
 800acba:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
				uC = 0;
 800acbe:	ed9f 9a55 	vldr	s18, [pc, #340]	; 800ae14 <update_pwm+0x328>
 800acc2:	e024      	b.n	800ad0e <update_pwm+0x222>
			}
			else if  (field_phase_int < 420-52)	{
 800acc4:	f5b4 7fb8 	cmp.w	r4, #368	; 0x170
 800acc8:	da06      	bge.n	800acd8 <update_pwm+0x1ec>
				uA = 0;
 800acca:	eddf 8a52 	vldr	s17, [pc, #328]	; 800ae14 <update_pwm+0x328>
				uB = 1;
 800acce:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
				uC = 1;
 800acd2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800acd6:	e01a      	b.n	800ad0e <update_pwm+0x222>
			}
			else if  (field_phase_int < 525-52)	{
 800acd8:	f5b4 7fec 	cmp.w	r4, #472	; 0x1d8
 800acdc:	dc06      	bgt.n	800acec <update_pwm+0x200>
				uA = 0;
 800acde:	eddf 8a4d 	vldr	s17, [pc, #308]	; 800ae14 <update_pwm+0x328>
				uB = 0;
 800ace2:	eddf 9a4c 	vldr	s19, [pc, #304]	; 800ae14 <update_pwm+0x328>
				uC = 1;
 800ace6:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800acea:	e010      	b.n	800ad0e <update_pwm+0x222>
			}
			else if  (field_phase_int < 630-52)	{
 800acec:	f240 2341 	movw	r3, #577	; 0x241
 800acf0:	429c      	cmp	r4, r3
 800acf2:	dc06      	bgt.n	800ad02 <update_pwm+0x216>
				uA = 1;
 800acf4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				uB = 0;
 800acf8:	eddf 9a46 	vldr	s19, [pc, #280]	; 800ae14 <update_pwm+0x328>
				uC = 1;
 800acfc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800ad00:	e005      	b.n	800ad0e <update_pwm+0x222>
			}
			else 	{ //same as first half phase
				uA = 1;
 800ad02:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				uB = 0;
 800ad06:	eddf 9a43 	vldr	s19, [pc, #268]	; 800ae14 <update_pwm+0x328>
				uC = 0;
 800ad0a:	ed9f 9a42 	vldr	s18, [pc, #264]	; 800ae14 <update_pwm+0x328>
			}
		}

		pwmA = (uint16_t) (PWM_STEPS_F * u0 * uA); //180ns
 800ad0e:	eddf 7a47 	vldr	s15, [pc, #284]	; 800ae2c <update_pwm+0x340>
 800ad12:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ad16:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800ad1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad1e:	ee17 3a90 	vmov	r3, s15
 800ad22:	b29d      	uxth	r5, r3
		pwmB = (uint16_t) (PWM_STEPS_F * u0 * uB); //180ns
 800ad24:	eddf 7a41 	vldr	s15, [pc, #260]	; 800ae2c <update_pwm+0x340>
 800ad28:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ad2c:	ee69 7aa7 	vmul.f32	s15, s19, s15
 800ad30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad34:	ee17 3a90 	vmov	r3, s15
 800ad38:	fa1f f883 	uxth.w	r8, r3
		pwmC = (uint16_t) (PWM_STEPS_F * u0 * uC); //180ns
 800ad3c:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800ae2c <update_pwm+0x340>
 800ad40:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ad44:	ee69 7a27 	vmul.f32	s15, s18, s15
 800ad48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad4c:	ee17 3a90 	vmov	r3, s15
 800ad50:	b29e      	uxth	r6, r3

		// --- send out PWM pulses 0...2048

		TIM1->CCR1 = pwmA; //takes<150ns
 800ad52:	4b35      	ldr	r3, [pc, #212]	; (800ae28 <update_pwm+0x33c>)
 800ad54:	462a      	mov	r2, r5
 800ad56:	635a      	str	r2, [r3, #52]	; 0x34
		if (INVERT){
			TIM1->CCR3 = pwmB; //takes<150ns
			TIM1->CCR2 = pwmC; //takes<150ns
		}
		else {
			TIM1->CCR2 = pwmB; //takes<150ns
 800ad58:	4b33      	ldr	r3, [pc, #204]	; (800ae28 <update_pwm+0x33c>)
 800ad5a:	4642      	mov	r2, r8
 800ad5c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = pwmC; //takes<150ns
 800ad5e:	4b32      	ldr	r3, [pc, #200]	; (800ae28 <update_pwm+0x33c>)
 800ad60:	4632      	mov	r2, r6
 800ad62:	63da      	str	r2, [r3, #60]	; 0x3c
 800ad64:	e0e1      	b.n	800af2a <update_pwm+0x43e>
		}//300ns for both
	}

	else{ // NOTE this mode is still experimental
		if  (field_phase_int < 105)	{
 800ad66:	2c68      	cmp	r4, #104	; 0x68
 800ad68:	dc1c      	bgt.n	800ada4 <update_pwm+0x2b8>
			uA = 1;
 800ad6a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
			pwmA = (uint16_t) (PWM_STEPS_F * u0 * uA); //takes<2s00ns
 800ad6e:	eddf 7a2f 	vldr	s15, [pc, #188]	; 800ae2c <update_pwm+0x340>
 800ad72:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ad76:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800ad7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad7e:	ee17 3a90 	vmov	r3, s15
 800ad82:	b29d      	uxth	r5, r3
			TIM1->CCR1 = pwmA; //takes<150ns
 800ad84:	4b28      	ldr	r3, [pc, #160]	; (800ae28 <update_pwm+0x33c>)
 800ad86:	462a      	mov	r2, r5
 800ad88:	635a      	str	r2, [r3, #52]	; 0x34
			//			SET_BIT(TIM1->CCMR1, TIM_CCMR1_OC2CE);
			//			CLEAR_BIT(TIM1->CCMR1, TIM_CCMR1_OC2CE);
			//			SET_BIT(TIM1->CCMR2, TIM_CCMR2_OC3CE);
			//			CLEAR_BIT(TIM1->CCMR2, TIM_CCMR2_OC3CE);

			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800ad8a:	4b27      	ldr	r3, [pc, #156]	; (800ae28 <update_pwm+0x33c>)
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	4a26      	ldr	r2, [pc, #152]	; (800ae28 <update_pwm+0x33c>)
 800ad90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad94:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800ad96:	4b24      	ldr	r3, [pc, #144]	; (800ae28 <update_pwm+0x33c>)
 800ad98:	699b      	ldr	r3, [r3, #24]
 800ad9a:	4a23      	ldr	r2, [pc, #140]	; (800ae28 <update_pwm+0x33c>)
 800ad9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ada0:	6193      	str	r3, [r2, #24]
 800ada2:	e0c2      	b.n	800af2a <update_pwm+0x43e>
		}
		else if  (field_phase_int < 210)	{
 800ada4:	2cd1      	cmp	r4, #209	; 0xd1
 800ada6:	dc43      	bgt.n	800ae30 <update_pwm+0x344>
			uB = 1;
 800ada8:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
			pwmB = (uint16_t) (PWM_STEPS_F * u0 * uB); //takes<2s00ns
 800adac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ae2c <update_pwm+0x340>
 800adb0:	ee68 7a27 	vmul.f32	s15, s16, s15
 800adb4:	ee69 7aa7 	vmul.f32	s15, s19, s15
 800adb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adbc:	ee17 3a90 	vmov	r3, s15
 800adc0:	fa1f f883 	uxth.w	r8, r3
			TIM1->CCR2 = pwmB; //takes<150ns
 800adc4:	4b18      	ldr	r3, [pc, #96]	; (800ae28 <update_pwm+0x33c>)
 800adc6:	4642      	mov	r2, r8
 800adc8:	639a      	str	r2, [r3, #56]	; 0x38

			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800adca:	4b17      	ldr	r3, [pc, #92]	; (800ae28 <update_pwm+0x33c>)
 800adcc:	699b      	ldr	r3, [r3, #24]
 800adce:	4a16      	ldr	r2, [pc, #88]	; (800ae28 <update_pwm+0x33c>)
 800add0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800add4:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800add6:	4b14      	ldr	r3, [pc, #80]	; (800ae28 <update_pwm+0x33c>)
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	4a13      	ldr	r2, [pc, #76]	; (800ae28 <update_pwm+0x33c>)
 800addc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ade0:	6193      	str	r3, [r2, #24]
 800ade2:	e0a2      	b.n	800af2a <update_pwm+0x43e>
 800ade4:	40020c00 	.word	0x40020c00
 800ade8:	20000014 	.word	0x20000014
 800adec:	200000f0 	.word	0x200000f0
 800adf0:	2000002c 	.word	0x2000002c
 800adf4:	4416c000 	.word	0x4416c000
 800adf8:	200000d4 	.word	0x200000d4
 800adfc:	20000be0 	.word	0x20000be0
 800ae00:	20000010 	.word	0x20000010
 800ae04:	20000130 	.word	0x20000130
 800ae08:	42c80000 	.word	0x42c80000
 800ae0c:	3f733333 	.word	0x3f733333
 800ae10:	200000d1 	.word	0x200000d1
 800ae14:	00000000 	.word	0x00000000
 800ae18:	20000124 	.word	0x20000124
 800ae1c:	2000000d 	.word	0x2000000d
 800ae20:	200000c8 	.word	0x200000c8
 800ae24:	200001fc 	.word	0x200001fc
 800ae28:	40010000 	.word	0x40010000
 800ae2c:	45800000 	.word	0x45800000
		}
		else if  (field_phase_int < 315)	{
 800ae30:	f5b4 7f9d 	cmp.w	r4, #314	; 0x13a
 800ae34:	dc1d      	bgt.n	800ae72 <update_pwm+0x386>
			uB = 1;
 800ae36:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
			pwmB = (uint16_t) (PWM_STEPS_F * u0 * uB); //takes<2s00ns
 800ae3a:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 800ae2c <update_pwm+0x340>
 800ae3e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ae42:	ee69 7aa7 	vmul.f32	s15, s19, s15
 800ae46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae4a:	ee17 3a90 	vmov	r3, s15
 800ae4e:	fa1f f883 	uxth.w	r8, r3
			TIM1->CCR2 = pwmB; //takes<150ns
 800ae52:	4b3b      	ldr	r3, [pc, #236]	; (800af40 <update_pwm+0x454>)
 800ae54:	4642      	mov	r2, r8
 800ae56:	639a      	str	r2, [r3, #56]	; 0x38

			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800ae58:	4b39      	ldr	r3, [pc, #228]	; (800af40 <update_pwm+0x454>)
 800ae5a:	699b      	ldr	r3, [r3, #24]
 800ae5c:	4a38      	ldr	r2, [pc, #224]	; (800af40 <update_pwm+0x454>)
 800ae5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae62:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800ae64:	4b36      	ldr	r3, [pc, #216]	; (800af40 <update_pwm+0x454>)
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	4a35      	ldr	r2, [pc, #212]	; (800af40 <update_pwm+0x454>)
 800ae6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae6e:	6193      	str	r3, [r2, #24]
 800ae70:	e05b      	b.n	800af2a <update_pwm+0x43e>
		}
		else if  (field_phase_int < 420)	{
 800ae72:	f5b4 7fd2 	cmp.w	r4, #420	; 0x1a4
 800ae76:	da1c      	bge.n	800aeb2 <update_pwm+0x3c6>
			uC = 1;
 800ae78:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
			pwmC = (uint16_t) (PWM_STEPS_F * u0 * uC); //takes<2s00ns
 800ae7c:	eddf 7a31 	vldr	s15, [pc, #196]	; 800af44 <update_pwm+0x458>
 800ae80:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ae84:	ee69 7a27 	vmul.f32	s15, s18, s15
 800ae88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae8c:	ee17 3a90 	vmov	r3, s15
 800ae90:	b29e      	uxth	r6, r3
			TIM1->CCR3 = pwmC; //takes<150ns
 800ae92:	4b2b      	ldr	r3, [pc, #172]	; (800af40 <update_pwm+0x454>)
 800ae94:	4632      	mov	r2, r6
 800ae96:	63da      	str	r2, [r3, #60]	; 0x3c

			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800ae98:	4b29      	ldr	r3, [pc, #164]	; (800af40 <update_pwm+0x454>)
 800ae9a:	699b      	ldr	r3, [r3, #24]
 800ae9c:	4a28      	ldr	r2, [pc, #160]	; (800af40 <update_pwm+0x454>)
 800ae9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aea2:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800aea4:	4b26      	ldr	r3, [pc, #152]	; (800af40 <update_pwm+0x454>)
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	4a25      	ldr	r2, [pc, #148]	; (800af40 <update_pwm+0x454>)
 800aeaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aeae:	6193      	str	r3, [r2, #24]
 800aeb0:	e03b      	b.n	800af2a <update_pwm+0x43e>
		}
		else if  (field_phase_int < 525)	{
 800aeb2:	f5b4 7f03 	cmp.w	r4, #524	; 0x20c
 800aeb6:	dc1c      	bgt.n	800aef2 <update_pwm+0x406>
			uC = 1;
 800aeb8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
			pwmC = (uint16_t) (PWM_STEPS_F * u0 * uC); //takes<2s00ns
 800aebc:	eddf 7a21 	vldr	s15, [pc, #132]	; 800af44 <update_pwm+0x458>
 800aec0:	ee68 7a27 	vmul.f32	s15, s16, s15
 800aec4:	ee69 7a27 	vmul.f32	s15, s18, s15
 800aec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aecc:	ee17 3a90 	vmov	r3, s15
 800aed0:	b29e      	uxth	r6, r3
			TIM1->CCR3 = pwmC; //takes<150ns
 800aed2:	4b1b      	ldr	r3, [pc, #108]	; (800af40 <update_pwm+0x454>)
 800aed4:	4632      	mov	r2, r6
 800aed6:	63da      	str	r2, [r3, #60]	; 0x3c

			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800aed8:	4b19      	ldr	r3, [pc, #100]	; (800af40 <update_pwm+0x454>)
 800aeda:	699b      	ldr	r3, [r3, #24]
 800aedc:	4a18      	ldr	r2, [pc, #96]	; (800af40 <update_pwm+0x454>)
 800aede:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aee2:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800aee4:	4b16      	ldr	r3, [pc, #88]	; (800af40 <update_pwm+0x454>)
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	4a15      	ldr	r2, [pc, #84]	; (800af40 <update_pwm+0x454>)
 800aeea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aeee:	6193      	str	r3, [r2, #24]
 800aef0:	e01b      	b.n	800af2a <update_pwm+0x43e>
		}
		else 	{
			uA = 1;
 800aef2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
			pwmA = (uint16_t) (PWM_STEPS_F * u0 * uA); //takes<2s00ns
 800aef6:	eddf 7a13 	vldr	s15, [pc, #76]	; 800af44 <update_pwm+0x458>
 800aefa:	ee68 7a27 	vmul.f32	s15, s16, s15
 800aefe:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800af02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af06:	ee17 3a90 	vmov	r3, s15
 800af0a:	b29d      	uxth	r5, r3
			TIM1->CCR1 = pwmA; //takes<150ns
 800af0c:	4b0c      	ldr	r3, [pc, #48]	; (800af40 <update_pwm+0x454>)
 800af0e:	462a      	mov	r2, r5
 800af10:	635a      	str	r2, [r3, #52]	; 0x34

			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800af12:	4b0b      	ldr	r3, [pc, #44]	; (800af40 <update_pwm+0x454>)
 800af14:	699b      	ldr	r3, [r3, #24]
 800af16:	4a0a      	ldr	r2, [pc, #40]	; (800af40 <update_pwm+0x454>)
 800af18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800af1c:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800af1e:	4b08      	ldr	r3, [pc, #32]	; (800af40 <update_pwm+0x454>)
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	4a07      	ldr	r2, [pc, #28]	; (800af40 <update_pwm+0x454>)
 800af24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af28:	6193      	str	r3, [r2, #24]
		}

	}

#if DB_TIMING
	DB1L;
 800af2a:	4b07      	ldr	r3, [pc, #28]	; (800af48 <update_pwm+0x45c>)
 800af2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af30:	619a      	str	r2, [r3, #24]
#endif

}
 800af32:	46bd      	mov	sp, r7
 800af34:	ecbd 8b04 	vpop	{d8-d9}
 800af38:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	40010000 	.word	0x40010000
 800af44:	45800000 	.word	0x45800000
 800af48:	40020c00 	.word	0x40020c00

0800af4c <HAL_TIM_IC_CaptureCallback>:



////called every second step of the quadrature encoder was used for pwm update in past

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){ // see https://community.st.com/s/question/0D50X00009XkWUpSAN/encoder-mode-and-rotary-encoder
 800af4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af50:	b082      	sub	sp, #8
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8){
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a3a      	ldr	r2, [pc, #232]	; (800b044 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d16b      	bne.n	800b038 <HAL_TIM_IC_CaptureCallback+0xec>
		omegaEnc_missing_update_counter = 0;
 800af60:	4b39      	ldr	r3, [pc, #228]	; (800b048 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800af62:	2200      	movs	r2, #0
 800af64:	601a      	str	r2, [r3, #0]

		static float omegaEnc_last = 0.0f;
		static uint32_t last_t = 0;
		register uint32_t t_now = TIM2->CNT;
 800af66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af6a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
		register int32_t delta_t;
		if (t_now > last_t){
 800af6c:	4b37      	ldr	r3, [pc, #220]	; (800b04c <HAL_TIM_IC_CaptureCallback+0x100>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	429c      	cmp	r4, r3
 800af72:	d904      	bls.n	800af7e <HAL_TIM_IC_CaptureCallback+0x32>
			delta_t = t_now - last_t;
 800af74:	4b35      	ldr	r3, [pc, #212]	; (800b04c <HAL_TIM_IC_CaptureCallback+0x100>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	1ae3      	subs	r3, r4, r3
 800af7a:	4698      	mov	r8, r3
 800af7c:	e003      	b.n	800af86 <HAL_TIM_IC_CaptureCallback+0x3a>
		}
		else {
			delta_t = t_now - last_t; //todo correct statement
 800af7e:	4b33      	ldr	r3, [pc, #204]	; (800b04c <HAL_TIM_IC_CaptureCallback+0x100>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	1ae3      	subs	r3, r4, r3
 800af84:	4698      	mov	r8, r3
		}

		if (delta_t > 84000){
 800af86:	4b32      	ldr	r3, [pc, #200]	; (800b050 <HAL_TIM_IC_CaptureCallback+0x104>)
 800af88:	4598      	cmp	r8, r3
 800af8a:	dd55      	ble.n	800b038 <HAL_TIM_IC_CaptureCallback+0xec>
			register int32_t EncVal = TIM8->CNT;
 800af8c:	4b2d      	ldr	r3, [pc, #180]	; (800b044 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800af8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af90:	461d      	mov	r5, r3
			register int32_t delta_EncVal = (int32_t)EncVal - (int32_t)last_EncVal_omegaEnc;
 800af92:	4b30      	ldr	r3, [pc, #192]	; (800b054 <HAL_TIM_IC_CaptureCallback+0x108>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	1aee      	subs	r6, r5, r3
			last_EncVal_omegaEnc = EncVal;
 800af98:	4b2e      	ldr	r3, [pc, #184]	; (800b054 <HAL_TIM_IC_CaptureCallback+0x108>)
 800af9a:	601d      	str	r5, [r3, #0]
			last_t = t_now;
 800af9c:	4b2b      	ldr	r3, [pc, #172]	; (800b04c <HAL_TIM_IC_CaptureCallback+0x100>)
 800af9e:	601c      	str	r4, [r3, #0]

			delta_EncVal = encoder_jump_comp(delta_EncVal);
 800afa0:	4630      	mov	r0, r6
 800afa2:	f000 f885 	bl	800b0b0 <encoder_jump_comp>
 800afa6:	4606      	mov	r6, r0

			omegaEnc =  omega_division(delta_EncVal, delta_t);
 800afa8:	4641      	mov	r1, r8
 800afaa:	4630      	mov	r0, r6
 800afac:	f000 f860 	bl	800b070 <omega_division>
 800afb0:	eef0 7a40 	vmov.f32	s15, s0
 800afb4:	4b28      	ldr	r3, [pc, #160]	; (800b058 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800afb6:	edc3 7a00 	vstr	s15, [r3]

			lp_omegaEnc = (1.0f - LP_OMEGA_ENC_CONST) * lp_omegaEnc + LP_OMEGA_ENC_CONST * omegaEnc;
 800afba:	4b28      	ldr	r3, [pc, #160]	; (800b05c <HAL_TIM_IC_CaptureCallback+0x110>)
 800afbc:	edd3 7a00 	vldr	s15, [r3]
 800afc0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800afc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800afc8:	4b23      	ldr	r3, [pc, #140]	; (800b058 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800afca:	edd3 7a00 	vldr	s15, [r3]
 800afce:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800afd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800afd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afda:	4b20      	ldr	r3, [pc, #128]	; (800b05c <HAL_TIM_IC_CaptureCallback+0x110>)
 800afdc:	edc3 7a00 	vstr	s15, [r3]

			omegaEncDot = (omegaEnc - omegaEnc_last) / (float)delta_t * 84000000.0f;
 800afe0:	4b1d      	ldr	r3, [pc, #116]	; (800b058 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800afe2:	ed93 7a00 	vldr	s14, [r3]
 800afe6:	4b1e      	ldr	r3, [pc, #120]	; (800b060 <HAL_TIM_IC_CaptureCallback+0x114>)
 800afe8:	edd3 7a00 	vldr	s15, [r3]
 800afec:	ee77 6a67 	vsub.f32	s13, s14, s15
 800aff0:	ee07 8a90 	vmov	s15, r8
 800aff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800affc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800b064 <HAL_TIM_IC_CaptureCallback+0x118>
 800b000:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b004:	4b18      	ldr	r3, [pc, #96]	; (800b068 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800b006:	edc3 7a00 	vstr	s15, [r3]

			lp_omegaEncDot = (1.0f - LP_OMEGA_ENC_DOT_CONST) * lp_omegaEncDot + LP_OMEGA_ENC_DOT_CONST * omegaEncDot;
 800b00a:	4b18      	ldr	r3, [pc, #96]	; (800b06c <HAL_TIM_IC_CaptureCallback+0x120>)
 800b00c:	edd3 7a00 	vldr	s15, [r3]
 800b010:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b014:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b018:	4b13      	ldr	r3, [pc, #76]	; (800b068 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800b01a:	edd3 7a00 	vldr	s15, [r3]
 800b01e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b022:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b02a:	4b10      	ldr	r3, [pc, #64]	; (800b06c <HAL_TIM_IC_CaptureCallback+0x120>)
 800b02c:	edc3 7a00 	vstr	s15, [r3]
			//alternative todo calc from t directly to save compute

			omegaEnc_last = omegaEnc;
 800b030:	4b09      	ldr	r3, [pc, #36]	; (800b058 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a0a      	ldr	r2, [pc, #40]	; (800b060 <HAL_TIM_IC_CaptureCallback+0x114>)
 800b036:	6013      	str	r3, [r2, #0]
			// todo must be set to 0 if not updated for long otherwise it maintains value from last update forever
		}

	}
}
 800b038:	bf00      	nop
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b042:	bf00      	nop
 800b044:	40010400 	.word	0x40010400
 800b048:	200000ec 	.word	0x200000ec
 800b04c:	20000158 	.word	0x20000158
 800b050:	00014820 	.word	0x00014820
 800b054:	20000bc8 	.word	0x20000bc8
 800b058:	200000f0 	.word	0x200000f0
 800b05c:	200000f4 	.word	0x200000f4
 800b060:	2000015c 	.word	0x2000015c
 800b064:	4ca037a0 	.word	0x4ca037a0
 800b068:	200000f8 	.word	0x200000f8
 800b06c:	200000fc 	.word	0x200000fc

0800b070 <omega_division>:


float omega_division(int32_t delta_EncVal, int32_t delta_t){
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
	return PI2 * 84000000.0f / ENC_STEPS_F * (float)(delta_EncVal) / (float)delta_t;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	ee07 3a90 	vmov	s15, r3
 800b080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b084:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800b0ac <omega_division+0x3c>
 800b088:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	ee07 3a90 	vmov	s15, r3
 800b092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b096:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b09a:	eef0 7a66 	vmov.f32	s15, s13
}
 800b09e:	eeb0 0a67 	vmov.f32	s0, s15
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr
 800b0ac:	4800dab2 	.word	0x4800dab2

0800b0b0 <encoder_jump_comp>:

int32_t encoder_jump_comp(int32_t delta_EncVal){
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
	if (delta_EncVal > ENC_STEPS_HALF){ // if jump is more than a half rotation it's most likely the 0 crossing
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b0be:	dd03      	ble.n	800b0c8 <encoder_jump_comp+0x18>
		return delta_EncVal - ENC_STEPS;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800b0c6:	e008      	b.n	800b0da <encoder_jump_comp+0x2a>
	}
	else if (delta_EncVal < -ENC_STEPS_HALF){
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 800b0ce:	da03      	bge.n	800b0d8 <encoder_jump_comp+0x28>
		return delta_EncVal + ENC_STEPS;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 800b0d6:	e000      	b.n	800b0da <encoder_jump_comp+0x2a>
	}
	else {
		return delta_EncVal;
 800b0d8:	687b      	ldr	r3, [r7, #4]
	}
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
	...

0800b0e8 <fast_control_task>:
 *
 *********************************************************************************************
 */


void fast_control_task(void){
 800b0e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b0ec:	b08e      	sub	sp, #56	; 0x38
 800b0ee:	af08      	add	r7, sp, #32
#if DB_TIMING
	DB2H;
 800b0f0:	4b49      	ldr	r3, [pc, #292]	; (800b218 <fast_control_task+0x130>)
 800b0f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b0f6:	619a      	str	r2, [r3, #24]
#endif

	// --- averaging the quantities read in pwm update
	fast_STRAIN0 = acc_STRAIN0 >> ANALOG_SAMPLES_BITSHIFT;
 800b0f8:	4b48      	ldr	r3, [pc, #288]	; (800b21c <fast_control_task+0x134>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	095b      	lsrs	r3, r3, #5
 800b0fe:	4a48      	ldr	r2, [pc, #288]	; (800b220 <fast_control_task+0x138>)
 800b100:	6013      	str	r3, [r2, #0]
	acc_STRAIN0 = 0;
 800b102:	4b46      	ldr	r3, [pc, #280]	; (800b21c <fast_control_task+0x134>)
 800b104:	2200      	movs	r2, #0
 800b106:	601a      	str	r2, [r3, #0]
	fast_Vbus = acc_Vbus >> ANALOG_SAMPLES_BITSHIFT;
 800b108:	4b46      	ldr	r3, [pc, #280]	; (800b224 <fast_control_task+0x13c>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	095b      	lsrs	r3, r3, #5
 800b10e:	4a46      	ldr	r2, [pc, #280]	; (800b228 <fast_control_task+0x140>)
 800b110:	6013      	str	r3, [r2, #0]
	acc_Vbus = 0;
 800b112:	4b44      	ldr	r3, [pc, #272]	; (800b224 <fast_control_task+0x13c>)
 800b114:	2200      	movs	r2, #0
 800b116:	601a      	str	r2, [r3, #0]
#if DIFF_FORCE
	fast_STRAIN1 = acc_STRAIN1 >> ANALOG_SAMPLES_BITSHIFT;
	acc_STRAIN1 = 0;
#endif

	fast_I_tot = sqrt(acc_I_tot_squared/(float)ANALOG_SAMPLES_N);
 800b118:	4b44      	ldr	r3, [pc, #272]	; (800b22c <fast_control_task+0x144>)
 800b11a:	edd3 7a00 	vldr	s15, [r3]
 800b11e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b230 <fast_control_task+0x148>
 800b122:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b126:	ee16 0a90 	vmov	r0, s13
 800b12a:	f7f5 fa0d 	bl	8000548 <__aeabi_f2d>
 800b12e:	4603      	mov	r3, r0
 800b130:	460c      	mov	r4, r1
 800b132:	ec44 3b10 	vmov	d0, r3, r4
 800b136:	f002 fb8b 	bl	800d850 <sqrt>
 800b13a:	ec54 3b10 	vmov	r3, r4, d0
 800b13e:	4618      	mov	r0, r3
 800b140:	4621      	mov	r1, r4
 800b142:	f7f5 fd31 	bl	8000ba8 <__aeabi_d2f>
 800b146:	4602      	mov	r2, r0
 800b148:	4b3a      	ldr	r3, [pc, #232]	; (800b234 <fast_control_task+0x14c>)
 800b14a:	601a      	str	r2, [r3, #0]
	acc_I_tot_squared = 0.0f;
 800b14c:	4b37      	ldr	r3, [pc, #220]	; (800b22c <fast_control_task+0x144>)
 800b14e:	f04f 0200 	mov.w	r2, #0
 800b152:	601a      	str	r2, [r3, #0]
	fast_u0 = acc_u0 / (float)ANALOG_SAMPLES_N;
 800b154:	4b38      	ldr	r3, [pc, #224]	; (800b238 <fast_control_task+0x150>)
 800b156:	ed93 7a00 	vldr	s14, [r3]
 800b15a:	eddf 6a35 	vldr	s13, [pc, #212]	; 800b230 <fast_control_task+0x148>
 800b15e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b162:	4b36      	ldr	r3, [pc, #216]	; (800b23c <fast_control_task+0x154>)
 800b164:	edc3 7a00 	vstr	s15, [r3]
	acc_u0 = 0.0f;
 800b168:	4b33      	ldr	r3, [pc, #204]	; (800b238 <fast_control_task+0x150>)
 800b16a:	f04f 0200 	mov.w	r2, #0
 800b16e:	601a      	str	r2, [r3, #0]

	// --- deriving quantities
	fast_P_consumed = fast_I_tot * fast_u0 * (float)fast_Vbus * CONVERT_VBUS_INT2V  / WANKEL_ADVANTAGE;
 800b170:	4b30      	ldr	r3, [pc, #192]	; (800b234 <fast_control_task+0x14c>)
 800b172:	ed93 7a00 	vldr	s14, [r3]
 800b176:	4b31      	ldr	r3, [pc, #196]	; (800b23c <fast_control_task+0x154>)
 800b178:	edd3 7a00 	vldr	s15, [r3]
 800b17c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b180:	4b29      	ldr	r3, [pc, #164]	; (800b228 <fast_control_task+0x140>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	ee07 3a90 	vmov	s15, r3
 800b188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b18c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b190:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800b240 <fast_control_task+0x158>
 800b194:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b198:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800b244 <fast_control_task+0x15c>
 800b19c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b1a0:	4b29      	ldr	r3, [pc, #164]	; (800b248 <fast_control_task+0x160>)
 800b1a2:	edc3 7a00 	vstr	s15, [r3]

	// sw current limit switch off
	static uint32_t I_lim_exceeded_counter = 0;
	if (fast_I_tot > I_LIM){
 800b1a6:	4b23      	ldr	r3, [pc, #140]	; (800b234 <fast_control_task+0x14c>)
 800b1a8:	edd3 7a00 	vldr	s15, [r3]
 800b1ac:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800b24c <fast_control_task+0x164>
 800b1b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b8:	dd05      	ble.n	800b1c6 <fast_control_task+0xde>
		I_lim_exceeded_counter++;
 800b1ba:	4b25      	ldr	r3, [pc, #148]	; (800b250 <fast_control_task+0x168>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	4a23      	ldr	r2, [pc, #140]	; (800b250 <fast_control_task+0x168>)
 800b1c2:	6013      	str	r3, [r2, #0]
 800b1c4:	e002      	b.n	800b1cc <fast_control_task+0xe4>
	}
	else {
		I_lim_exceeded_counter = 0;
 800b1c6:	4b22      	ldr	r3, [pc, #136]	; (800b250 <fast_control_task+0x168>)
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	601a      	str	r2, [r3, #0]
	}
	if (I_lim_exceeded_counter > I_LIM_MAX_COUNT){
 800b1cc:	4b20      	ldr	r3, [pc, #128]	; (800b250 <fast_control_task+0x168>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b64      	cmp	r3, #100	; 0x64
 800b1d2:	d902      	bls.n	800b1da <fast_control_task+0xf2>
		sw_enable_pwm = false;
 800b1d4:	4b1f      	ldr	r3, [pc, #124]	; (800b254 <fast_control_task+0x16c>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	701a      	strb	r2, [r3, #0]

	//lp_ESC_TEMP = (1.0f - LP_TEMP) * lp_ESC_TEMP + LP_TEMP * (float)HAL_ADCEx_InjectedGetValue (&hadc1, RANK_T);
	//lp_MOT_TEMP = (1.0f - LP_TEMP) * lp_MOT_TEMP + LP_TEMP * (float)HAL_ADCEx_InjectedGetValue (&hadc2, RANK_T);

	static uint32_t analog_samples_av_counter = 0;
	if (analog_samples_av_counter < ANALOG_SAMPLES_AV_N){
 800b1da:	4b1f      	ldr	r3, [pc, #124]	; (800b258 <fast_control_task+0x170>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2b3f      	cmp	r3, #63	; 0x3f
 800b1e0:	d844      	bhi.n	800b26c <fast_control_task+0x184>
		acc_ESC_TEMP += HAL_ADCEx_InjectedGetValue (&hadc1, RANK_T);
 800b1e2:	2102      	movs	r1, #2
 800b1e4:	481d      	ldr	r0, [pc, #116]	; (800b25c <fast_control_task+0x174>)
 800b1e6:	f7f6 fd3f 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	4b1c      	ldr	r3, [pc, #112]	; (800b260 <fast_control_task+0x178>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	4a1b      	ldr	r2, [pc, #108]	; (800b260 <fast_control_task+0x178>)
 800b1f4:	6013      	str	r3, [r2, #0]
		acc_MOT_TEMP += HAL_ADCEx_InjectedGetValue (&hadc2, RANK_T);
 800b1f6:	2102      	movs	r1, #2
 800b1f8:	481a      	ldr	r0, [pc, #104]	; (800b264 <fast_control_task+0x17c>)
 800b1fa:	f7f6 fd35 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800b1fe:	4602      	mov	r2, r0
 800b200:	4b19      	ldr	r3, [pc, #100]	; (800b268 <fast_control_task+0x180>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4413      	add	r3, r2
 800b206:	4a18      	ldr	r2, [pc, #96]	; (800b268 <fast_control_task+0x180>)
 800b208:	6013      	str	r3, [r2, #0]
		analog_samples_av_counter++;
 800b20a:	4b13      	ldr	r3, [pc, #76]	; (800b258 <fast_control_task+0x170>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	3301      	adds	r3, #1
 800b210:	4a11      	ldr	r2, [pc, #68]	; (800b258 <fast_control_task+0x170>)
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	e03d      	b.n	800b292 <fast_control_task+0x1aa>
 800b216:	bf00      	nop
 800b218:	40020c00 	.word	0x40020c00
 800b21c:	20000100 	.word	0x20000100
 800b220:	20000104 	.word	0x20000104
 800b224:	20000108 	.word	0x20000108
 800b228:	2000002c 	.word	0x2000002c
 800b22c:	2000011c 	.word	0x2000011c
 800b230:	42000000 	.word	0x42000000
 800b234:	20000120 	.word	0x20000120
 800b238:	20000124 	.word	0x20000124
 800b23c:	20000128 	.word	0x20000128
 800b240:	3c872b02 	.word	0x3c872b02
 800b244:	3f93cd36 	.word	0x3f93cd36
 800b248:	2000012c 	.word	0x2000012c
 800b24c:	42480000 	.word	0x42480000
 800b250:	20000160 	.word	0x20000160
 800b254:	200000d1 	.word	0x200000d1
 800b258:	20000164 	.word	0x20000164
 800b25c:	20000cb0 	.word	0x20000cb0
 800b260:	2000010c 	.word	0x2000010c
 800b264:	200005c4 	.word	0x200005c4
 800b268:	20000114 	.word	0x20000114
	}
	else {
		av_ESC_TEMP = acc_ESC_TEMP >> ANALOG_SAMPLES_AV_BITSHIFT;
 800b26c:	4b91      	ldr	r3, [pc, #580]	; (800b4b4 <fast_control_task+0x3cc>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	099b      	lsrs	r3, r3, #6
 800b272:	4a91      	ldr	r2, [pc, #580]	; (800b4b8 <fast_control_task+0x3d0>)
 800b274:	6013      	str	r3, [r2, #0]
		acc_ESC_TEMP = 0;
 800b276:	4b8f      	ldr	r3, [pc, #572]	; (800b4b4 <fast_control_task+0x3cc>)
 800b278:	2200      	movs	r2, #0
 800b27a:	601a      	str	r2, [r3, #0]
		av_MOT_TEMP = acc_MOT_TEMP >> ANALOG_SAMPLES_AV_BITSHIFT;
 800b27c:	4b8f      	ldr	r3, [pc, #572]	; (800b4bc <fast_control_task+0x3d4>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	099b      	lsrs	r3, r3, #6
 800b282:	4a8f      	ldr	r2, [pc, #572]	; (800b4c0 <fast_control_task+0x3d8>)
 800b284:	6013      	str	r3, [r2, #0]
		acc_MOT_TEMP = 0;
 800b286:	4b8d      	ldr	r3, [pc, #564]	; (800b4bc <fast_control_task+0x3d4>)
 800b288:	2200      	movs	r2, #0
 800b28a:	601a      	str	r2, [r3, #0]
		analog_samples_av_counter = 0;
 800b28c:	4b8d      	ldr	r3, [pc, #564]	; (800b4c4 <fast_control_task+0x3dc>)
 800b28e:	2200      	movs	r2, #0
 800b290:	601a      	str	r2, [r3, #0]
	}

	//calc_omega();

	// --- correct for missing update in omecaEnc for very small omega
	if (omegaEnc_missing_update_counter > OMEGAENC_MISSING_UPDATE_MAX){
 800b292:	4b8d      	ldr	r3, [pc, #564]	; (800b4c8 <fast_control_task+0x3e0>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2b64      	cmp	r3, #100	; 0x64
 800b298:	dd07      	ble.n	800b2aa <fast_control_task+0x1c2>
		omegaEnc = 0.0f;
 800b29a:	4b8c      	ldr	r3, [pc, #560]	; (800b4cc <fast_control_task+0x3e4>)
 800b29c:	f04f 0200 	mov.w	r2, #0
 800b2a0:	601a      	str	r2, [r3, #0]
		omegaEncDot = 0.0f;
 800b2a2:	4b8b      	ldr	r3, [pc, #556]	; (800b4d0 <fast_control_task+0x3e8>)
 800b2a4:	f04f 0200 	mov.w	r2, #0
 800b2a8:	601a      	str	r2, [r3, #0]
	}
	omegaEnc_missing_update_counter ++;
 800b2aa:	4b87      	ldr	r3, [pc, #540]	; (800b4c8 <fast_control_task+0x3e0>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	4a85      	ldr	r2, [pc, #532]	; (800b4c8 <fast_control_task+0x3e0>)
 800b2b2:	6013      	str	r3, [r2, #0]

	static uint32_t last_tim5_cnt = 0 ;
	if (control_mode == position_control){
 800b2b4:	4b87      	ldr	r3, [pc, #540]	; (800b4d4 <fast_control_task+0x3ec>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	f040 80ee 	bne.w	800b49a <fast_control_task+0x3b2>

		float t = (float)((TIM5->CNT - last_tim5_cnt) / 100) / 1000.0f;
 800b2be:	4b86      	ldr	r3, [pc, #536]	; (800b4d8 <fast_control_task+0x3f0>)
 800b2c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2c2:	4b86      	ldr	r3, [pc, #536]	; (800b4dc <fast_control_task+0x3f4>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	1ad3      	subs	r3, r2, r3
 800b2c8:	4a85      	ldr	r2, [pc, #532]	; (800b4e0 <fast_control_task+0x3f8>)
 800b2ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ce:	095b      	lsrs	r3, r3, #5
 800b2d0:	ee07 3a90 	vmov	s15, r3
 800b2d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b2d8:	eddf 6a82 	vldr	s13, [pc, #520]	; 800b4e4 <fast_control_task+0x3fc>
 800b2dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b2e0:	edc7 7a04 	vstr	s15, [r7, #16]

		int32_t desired_EncVal = pos_offset + pos_amp * sin(6.28f * pos_freq * t);
 800b2e4:	4b80      	ldr	r3, [pc, #512]	; (800b4e8 <fast_control_task+0x400>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7f5 f91b 	bl	8000524 <__aeabi_i2d>
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	460d      	mov	r5, r1
 800b2f2:	4b7e      	ldr	r3, [pc, #504]	; (800b4ec <fast_control_task+0x404>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7f5 f926 	bl	8000548 <__aeabi_f2d>
 800b2fc:	4680      	mov	r8, r0
 800b2fe:	4689      	mov	r9, r1
 800b300:	4b7b      	ldr	r3, [pc, #492]	; (800b4f0 <fast_control_task+0x408>)
 800b302:	edd3 7a00 	vldr	s15, [r3]
 800b306:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800b4f4 <fast_control_task+0x40c>
 800b30a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b30e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b312:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b316:	ee17 0a90 	vmov	r0, s15
 800b31a:	f7f5 f915 	bl	8000548 <__aeabi_f2d>
 800b31e:	4602      	mov	r2, r0
 800b320:	460b      	mov	r3, r1
 800b322:	ec43 2b10 	vmov	d0, r2, r3
 800b326:	f002 fa4b 	bl	800d7c0 <sin>
 800b32a:	ec53 2b10 	vmov	r2, r3, d0
 800b32e:	4640      	mov	r0, r8
 800b330:	4649      	mov	r1, r9
 800b332:	f7f5 f961 	bl	80005f8 <__aeabi_dmul>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	4620      	mov	r0, r4
 800b33c:	4629      	mov	r1, r5
 800b33e:	f7f4 ffa5 	bl	800028c <__adddf3>
 800b342:	4603      	mov	r3, r0
 800b344:	460c      	mov	r4, r1
 800b346:	4618      	mov	r0, r3
 800b348:	4621      	mov	r1, r4
 800b34a:	f7f5 fc05 	bl	8000b58 <__aeabi_d2iz>
 800b34e:	4603      	mov	r3, r0
 800b350:	60fb      	str	r3, [r7, #12]
		//		else{
		//			desired_EncVal = 0;
		//		}


		int32_t Enc_Val_total = (int32_t)TIM8->CNT + rotation_counter * ENC_STEPS;
 800b352:	4b69      	ldr	r3, [pc, #420]	; (800b4f8 <fast_control_task+0x410>)
 800b354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b356:	4619      	mov	r1, r3
 800b358:	4b68      	ldr	r3, [pc, #416]	; (800b4fc <fast_control_task+0x414>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b360:	fb02 f303 	mul.w	r3, r2, r3
 800b364:	440b      	add	r3, r1
 800b366:	60bb      	str	r3, [r7, #8]
		float raw_amp = (float)(Enc_Val_total - desired_EncVal) * P_gain; //oscillates for P_gain > 0.005f
 800b368:	68ba      	ldr	r2, [r7, #8]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	1ad3      	subs	r3, r2, r3
 800b36e:	ee07 3a90 	vmov	s15, r3
 800b372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b376:	4b62      	ldr	r3, [pc, #392]	; (800b500 <fast_control_task+0x418>)
 800b378:	edd3 7a00 	vldr	s15, [r3]
 800b37c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b380:	edc7 7a05 	vstr	s15, [r7, #20]
		float raw_amp_check = raw_amp;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	607b      	str	r3, [r7, #4]
		//			direction = -1;
		//		}
		//		else{
		//			direction = 1;
		//		}
		if (raw_amp > pos_amp_limit){
 800b388:	4b5e      	ldr	r3, [pc, #376]	; (800b504 <fast_control_task+0x41c>)
 800b38a:	edd3 7a00 	vldr	s15, [r3]
 800b38e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b392:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b39a:	dd02      	ble.n	800b3a2 <fast_control_task+0x2ba>
			raw_amp = pos_amp_limit;
 800b39c:	4b59      	ldr	r3, [pc, #356]	; (800b504 <fast_control_task+0x41c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	617b      	str	r3, [r7, #20]
		}
		if (raw_amp < - pos_amp_limit){
 800b3a2:	4b58      	ldr	r3, [pc, #352]	; (800b504 <fast_control_task+0x41c>)
 800b3a4:	edd3 7a00 	vldr	s15, [r3]
 800b3a8:	eef1 7a67 	vneg.f32	s15, s15
 800b3ac:	ed97 7a05 	vldr	s14, [r7, #20]
 800b3b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3b8:	d506      	bpl.n	800b3c8 <fast_control_task+0x2e0>
			raw_amp = - pos_amp_limit;
 800b3ba:	4b52      	ldr	r3, [pc, #328]	; (800b504 <fast_control_task+0x41c>)
 800b3bc:	edd3 7a00 	vldr	s15, [r3]
 800b3c0:	eef1 7a67 	vneg.f32	s15, s15
 800b3c4:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		amp = raw_amp;
 800b3c8:	4a4f      	ldr	r2, [pc, #316]	; (800b508 <fast_control_task+0x420>)
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	6013      	str	r3, [r2, #0]

		if (buf_msgs[0] == '\0'){
 800b3ce:	4b4f      	ldr	r3, [pc, #316]	; (800b50c <fast_control_task+0x424>)
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d165      	bne.n	800b4a2 <fast_control_task+0x3ba>
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
					(int)((float)(Enc_Val_total - desired_EncVal) * 0.0005f*1000.0f),
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	ee07 3a90 	vmov	s15, r3
 800b3e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3e4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800b510 <fast_control_task+0x428>
 800b3e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3ec:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800b4e4 <fast_control_task+0x3fc>
 800b3f0:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b3f4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
					(int)(raw_amp*1000),
 800b3f8:	edd7 7a05 	vldr	s15, [r7, #20]
 800b3fc:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800b4e4 <fast_control_task+0x3fc>
 800b400:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b404:	eebd 6ae7 	vcvt.s32.f32	s12, s15
					(int)(raw_amp_check*1000),
 800b408:	edd7 7a01 	vldr	s15, [r7, #4]
 800b40c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800b4e4 <fast_control_task+0x3fc>
 800b410:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b418:	ee17 1a90 	vmov	r1, s15
 800b41c:	4b33      	ldr	r3, [pc, #204]	; (800b4ec <fast_control_task+0x404>)
 800b41e:	edd3 7a00 	vldr	s15, [r3]
 800b422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b426:	ee17 0a90 	vmov	r0, s15
					(int)Enc_Val_total,
					(int)(pos_amp),
					(int)(pos_freq*1000),
 800b42a:	4b31      	ldr	r3, [pc, #196]	; (800b4f0 <fast_control_task+0x408>)
 800b42c:	edd3 7a00 	vldr	s15, [r3]
 800b430:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800b4e4 <fast_control_task+0x3fc>
 800b434:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b43c:	ee17 4a90 	vmov	r4, s15
					(int)(pos_amp_limit * 1000),
 800b440:	4b30      	ldr	r3, [pc, #192]	; (800b504 <fast_control_task+0x41c>)
 800b442:	edd3 7a00 	vldr	s15, [r3]
 800b446:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800b4e4 <fast_control_task+0x3fc>
 800b44a:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b44e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b452:	ee17 5a90 	vmov	r5, s15
 800b456:	4b24      	ldr	r3, [pc, #144]	; (800b4e8 <fast_control_task+0x400>)
 800b458:	681b      	ldr	r3, [r3, #0]
					(int)(pos_offset),
					(int)(P_gain*1000000));
 800b45a:	4a29      	ldr	r2, [pc, #164]	; (800b500 <fast_control_task+0x418>)
 800b45c:	edd2 7a00 	vldr	s15, [r2]
 800b460:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800b514 <fast_control_task+0x42c>
 800b464:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b46c:	ee17 2a90 	vmov	r2, s15
 800b470:	9206      	str	r2, [sp, #24]
 800b472:	9305      	str	r3, [sp, #20]
 800b474:	9504      	str	r5, [sp, #16]
 800b476:	9403      	str	r4, [sp, #12]
 800b478:	9002      	str	r0, [sp, #8]
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	9301      	str	r3, [sp, #4]
 800b47e:	9100      	str	r1, [sp, #0]
 800b480:	ee16 3a10 	vmov	r3, s12
 800b484:	ee16 2a90 	vmov	r2, s13
 800b488:	4923      	ldr	r1, [pc, #140]	; (800b518 <fast_control_task+0x430>)
 800b48a:	4824      	ldr	r0, [pc, #144]	; (800b51c <fast_control_task+0x434>)
 800b48c:	f001 fd3e 	bl	800cf0c <siprintf>
			strcat(buf_msgs, buf_msg);
 800b490:	4922      	ldr	r1, [pc, #136]	; (800b51c <fast_control_task+0x434>)
 800b492:	481e      	ldr	r0, [pc, #120]	; (800b50c <fast_control_task+0x424>)
 800b494:	f001 fd5a 	bl	800cf4c <strcat>
 800b498:	e003      	b.n	800b4a2 <fast_control_task+0x3ba>
		}
	}
	else{
		last_tim5_cnt = TIM5->CNT;
 800b49a:	4b0f      	ldr	r3, [pc, #60]	; (800b4d8 <fast_control_task+0x3f0>)
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	4a0f      	ldr	r2, [pc, #60]	; (800b4dc <fast_control_task+0x3f4>)
 800b4a0:	6013      	str	r3, [r2, #0]
	}
#if DB_TIMING
	DB2L;
 800b4a2:	4b1f      	ldr	r3, [pc, #124]	; (800b520 <fast_control_task+0x438>)
 800b4a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b4a8:	619a      	str	r2, [r3, #24]
#endif
}
 800b4aa:	bf00      	nop
 800b4ac:	3718      	adds	r7, #24
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b4b4:	2000010c 	.word	0x2000010c
 800b4b8:	20000110 	.word	0x20000110
 800b4bc:	20000114 	.word	0x20000114
 800b4c0:	20000118 	.word	0x20000118
 800b4c4:	20000164 	.word	0x20000164
 800b4c8:	200000ec 	.word	0x200000ec
 800b4cc:	200000f0 	.word	0x200000f0
 800b4d0:	200000f8 	.word	0x200000f8
 800b4d4:	200000cc 	.word	0x200000cc
 800b4d8:	40000c00 	.word	0x40000c00
 800b4dc:	20000168 	.word	0x20000168
 800b4e0:	51eb851f 	.word	0x51eb851f
 800b4e4:	447a0000 	.word	0x447a0000
 800b4e8:	200000d8 	.word	0x200000d8
 800b4ec:	20000018 	.word	0x20000018
 800b4f0:	2000001c 	.word	0x2000001c
 800b4f4:	40c8f5c3 	.word	0x40c8f5c3
 800b4f8:	40010400 	.word	0x40010400
 800b4fc:	200000e0 	.word	0x200000e0
 800b500:	20000024 	.word	0x20000024
 800b504:	20000020 	.word	0x20000020
 800b508:	200000d4 	.word	0x200000d4
 800b50c:	20001820 	.word	0x20001820
 800b510:	3a03126f 	.word	0x3a03126f
 800b514:	49742400 	.word	0x49742400
 800b518:	0800eb94 	.word	0x0800eb94
 800b51c:	200024ec 	.word	0x200024ec
 800b520:	40020c00 	.word	0x40020c00

0800b524 <slow_control_task>:

void slow_control_task(void){
 800b524:	b480      	push	{r7}
 800b526:	af00      	add	r7, sp, #0
	//can communication update

}
 800b528:	bf00      	nop
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
	...

0800b534 <keyboard_intake>:

void keyboard_intake(void){
 800b534:	b580      	push	{r7, lr}
 800b536:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 800b538:	2201      	movs	r2, #1
 800b53a:	49c6      	ldr	r1, [pc, #792]	; (800b854 <keyboard_intake+0x320>)
 800b53c:	48c6      	ldr	r0, [pc, #792]	; (800b858 <keyboard_intake+0x324>)
 800b53e:	f7fc f851 	bl	80075e4 <HAL_UART_Receive_IT>

	if (rx_character_buffered != '.'){
 800b542:	4bc6      	ldr	r3, [pc, #792]	; (800b85c <keyboard_intake+0x328>)
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	2b2e      	cmp	r3, #46	; 0x2e
 800b548:	d006      	beq.n	800b558 <keyboard_intake+0x24>
		ch = rx_character_buffered;
 800b54a:	4bc4      	ldr	r3, [pc, #784]	; (800b85c <keyboard_intake+0x328>)
 800b54c:	781a      	ldrb	r2, [r3, #0]
 800b54e:	4bc1      	ldr	r3, [pc, #772]	; (800b854 <keyboard_intake+0x320>)
 800b550:	701a      	strb	r2, [r3, #0]
		//rx_character_armed = 0;
		rx_character_buffered = '.';
 800b552:	4bc2      	ldr	r3, [pc, #776]	; (800b85c <keyboard_intake+0x328>)
 800b554:	222e      	movs	r2, #46	; 0x2e
 800b556:	701a      	strb	r2, [r3, #0]
	}//since beginning of slow 1000ns


	switch(ch){
 800b558:	4bbe      	ldr	r3, [pc, #760]	; (800b854 <keyboard_intake+0x320>)
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	3b41      	subs	r3, #65	; 0x41
 800b55e:	2b39      	cmp	r3, #57	; 0x39
 800b560:	f200 820f 	bhi.w	800b982 <keyboard_intake+0x44e>
 800b564:	a201      	add	r2, pc, #4	; (adr r2, 800b56c <keyboard_intake+0x38>)
 800b566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56a:	bf00      	nop
 800b56c:	0800b815 	.word	0x0800b815
 800b570:	0800b901 	.word	0x0800b901
 800b574:	0800b82b 	.word	0x0800b82b
 800b578:	0800b803 	.word	0x0800b803
 800b57c:	0800b8b1 	.word	0x0800b8b1
 800b580:	0800b89d 	.word	0x0800b89d
 800b584:	0800b8f9 	.word	0x0800b8f9
 800b588:	0800b983 	.word	0x0800b983
 800b58c:	0800b983 	.word	0x0800b983
 800b590:	0800b983 	.word	0x0800b983
 800b594:	0800b983 	.word	0x0800b983
 800b598:	0800b909 	.word	0x0800b909
 800b59c:	0800b8c9 	.word	0x0800b8c9
 800b5a0:	0800b8db 	.word	0x0800b8db
 800b5a4:	0800b983 	.word	0x0800b983
 800b5a8:	0800b7bf 	.word	0x0800b7bf
 800b5ac:	0800b8bd 	.word	0x0800b8bd
 800b5b0:	0800b843 	.word	0x0800b843
 800b5b4:	0800b7ed 	.word	0x0800b7ed
 800b5b8:	0800b8f1 	.word	0x0800b8f1
 800b5bc:	0800b983 	.word	0x0800b983
 800b5c0:	0800b983 	.word	0x0800b983
 800b5c4:	0800b7db 	.word	0x0800b7db
 800b5c8:	0800b7b9 	.word	0x0800b7b9
 800b5cc:	0800b983 	.word	0x0800b983
 800b5d0:	0800b963 	.word	0x0800b963
 800b5d4:	0800b983 	.word	0x0800b983
 800b5d8:	0800b983 	.word	0x0800b983
 800b5dc:	0800b983 	.word	0x0800b983
 800b5e0:	0800b983 	.word	0x0800b983
 800b5e4:	0800b983 	.word	0x0800b983
 800b5e8:	0800b983 	.word	0x0800b983
 800b5ec:	0800b67d 	.word	0x0800b67d
 800b5f0:	0800b94d 	.word	0x0800b94d
 800b5f4:	0800b983 	.word	0x0800b983
 800b5f8:	0800b693 	.word	0x0800b693
 800b5fc:	0800b6bf 	.word	0x0800b6bf
 800b600:	0800b709 	.word	0x0800b709
 800b604:	0800b6dd 	.word	0x0800b6dd
 800b608:	0800b6e5 	.word	0x0800b6e5
 800b60c:	0800b7c5 	.word	0x0800b7c5
 800b610:	0800b763 	.word	0x0800b763
 800b614:	0800b7cd 	.word	0x0800b7cd
 800b618:	0800b7a3 	.word	0x0800b7a3
 800b61c:	0800b90f 	.word	0x0800b90f
 800b620:	0800b921 	.word	0x0800b921
 800b624:	0800b799 	.word	0x0800b799
 800b628:	0800b779 	.word	0x0800b779
 800b62c:	0800b6a9 	.word	0x0800b6a9
 800b630:	0800b72f 	.word	0x0800b72f
 800b634:	0800b667 	.word	0x0800b667
 800b638:	0800b6d5 	.word	0x0800b6d5
 800b63c:	0800b74d 	.word	0x0800b74d
 800b640:	0800b937 	.word	0x0800b937
 800b644:	0800b655 	.word	0x0800b655
 800b648:	0800b983 	.word	0x0800b983
 800b64c:	0800b983 	.word	0x0800b983
 800b650:	0800b741 	.word	0x0800b741
	case 'w':
		amp *= 2;
 800b654:	4b82      	ldr	r3, [pc, #520]	; (800b860 <keyboard_intake+0x32c>)
 800b656:	edd3 7a00 	vldr	s15, [r3]
 800b65a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b65e:	4b80      	ldr	r3, [pc, #512]	; (800b860 <keyboard_intake+0x32c>)
 800b660:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b664:	e190      	b.n	800b988 <keyboard_intake+0x454>
	case 's':
		amp /= 2;
 800b666:	4b7e      	ldr	r3, [pc, #504]	; (800b860 <keyboard_intake+0x32c>)
 800b668:	ed93 7a00 	vldr	s14, [r3]
 800b66c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b674:	4b7a      	ldr	r3, [pc, #488]	; (800b860 <keyboard_intake+0x32c>)
 800b676:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b67a:	e185      	b.n	800b988 <keyboard_intake+0x454>
	case 'a':
		phase_shift -= 0.05f;
 800b67c:	4b79      	ldr	r3, [pc, #484]	; (800b864 <keyboard_intake+0x330>)
 800b67e:	edd3 7a00 	vldr	s15, [r3]
 800b682:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800b868 <keyboard_intake+0x334>
 800b686:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b68a:	4b76      	ldr	r3, [pc, #472]	; (800b864 <keyboard_intake+0x330>)
 800b68c:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b690:	e17a      	b.n	800b988 <keyboard_intake+0x454>
	case 'd':
		phase_shift += 0.05f;
 800b692:	4b74      	ldr	r3, [pc, #464]	; (800b864 <keyboard_intake+0x330>)
 800b694:	edd3 7a00 	vldr	s15, [r3]
 800b698:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b868 <keyboard_intake+0x334>
 800b69c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6a0:	4b70      	ldr	r3, [pc, #448]	; (800b864 <keyboard_intake+0x330>)
 800b6a2:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b6a6:	e16f      	b.n	800b988 <keyboard_intake+0x454>
	case 'q':
		phase0 -= 0.05f;
 800b6a8:	4b70      	ldr	r3, [pc, #448]	; (800b86c <keyboard_intake+0x338>)
 800b6aa:	edd3 7a00 	vldr	s15, [r3]
 800b6ae:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800b868 <keyboard_intake+0x334>
 800b6b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b6b6:	4b6d      	ldr	r3, [pc, #436]	; (800b86c <keyboard_intake+0x338>)
 800b6b8:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b6bc:	e164      	b.n	800b988 <keyboard_intake+0x454>
	case 'e':
		phase0 += 0.05f;
 800b6be:	4b6b      	ldr	r3, [pc, #428]	; (800b86c <keyboard_intake+0x338>)
 800b6c0:	edd3 7a00 	vldr	s15, [r3]
 800b6c4:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800b868 <keyboard_intake+0x334>
 800b6c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6cc:	4b67      	ldr	r3, [pc, #412]	; (800b86c <keyboard_intake+0x338>)
 800b6ce:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b6d2:	e159      	b.n	800b988 <keyboard_intake+0x454>
	case 't':
		sw_enable_pwm = true;
 800b6d4:	4b66      	ldr	r3, [pc, #408]	; (800b870 <keyboard_intake+0x33c>)
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	701a      	strb	r2, [r3, #0]
		break;
 800b6da:	e155      	b.n	800b988 <keyboard_intake+0x454>
	case 'g':
		sw_enable_pwm = false;
 800b6dc:	4b64      	ldr	r3, [pc, #400]	; (800b870 <keyboard_intake+0x33c>)
 800b6de:	2200      	movs	r2, #0
 800b6e0:	701a      	strb	r2, [r3, #0]
		break;
 800b6e2:	e151      	b.n	800b988 <keyboard_intake+0x454>
	case 'h':
		amp = abs(amp); //positive should be clockwise == EncVal increases positive :)
 800b6e4:	4b5e      	ldr	r3, [pc, #376]	; (800b860 <keyboard_intake+0x32c>)
 800b6e6:	edd3 7a00 	vldr	s15, [r3]
 800b6ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6ee:	ee17 3a90 	vmov	r3, s15
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	bfb8      	it	lt
 800b6f6:	425b      	neglt	r3, r3
 800b6f8:	ee07 3a90 	vmov	s15, r3
 800b6fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b700:	4b57      	ldr	r3, [pc, #348]	; (800b860 <keyboard_intake+0x32c>)
 800b702:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b706:	e13f      	b.n	800b988 <keyboard_intake+0x454>
	case 'f':
		amp = -abs(amp);
 800b708:	4b55      	ldr	r3, [pc, #340]	; (800b860 <keyboard_intake+0x32c>)
 800b70a:	edd3 7a00 	vldr	s15, [r3]
 800b70e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b712:	ee17 3a90 	vmov	r3, s15
 800b716:	2b00      	cmp	r3, #0
 800b718:	bfb8      	it	lt
 800b71a:	425b      	neglt	r3, r3
 800b71c:	425b      	negs	r3, r3
 800b71e:	ee07 3a90 	vmov	s15, r3
 800b722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b726:	4b4e      	ldr	r3, [pc, #312]	; (800b860 <keyboard_intake+0x32c>)
 800b728:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b72c:	e12c      	b.n	800b988 <keyboard_intake+0x454>
	case 'r':
		amp = -amp;
 800b72e:	4b4c      	ldr	r3, [pc, #304]	; (800b860 <keyboard_intake+0x32c>)
 800b730:	edd3 7a00 	vldr	s15, [r3]
 800b734:	eef1 7a67 	vneg.f32	s15, s15
 800b738:	4b49      	ldr	r3, [pc, #292]	; (800b860 <keyboard_intake+0x32c>)
 800b73a:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b73e:	e123      	b.n	800b988 <keyboard_intake+0x454>
	case 'z':
		playSound( 1, 20, 100);
 800b740:	2264      	movs	r2, #100	; 0x64
 800b742:	2114      	movs	r1, #20
 800b744:	2001      	movs	r0, #1
 800b746:	f7fe fe89 	bl	800a45c <playSound>
		break;
 800b74a:	e11d      	b.n	800b988 <keyboard_intake+0x454>
	case 'u':
		stiffness += 0.0001f;
 800b74c:	4b49      	ldr	r3, [pc, #292]	; (800b874 <keyboard_intake+0x340>)
 800b74e:	edd3 7a00 	vldr	s15, [r3]
 800b752:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b878 <keyboard_intake+0x344>
 800b756:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b75a:	4b46      	ldr	r3, [pc, #280]	; (800b874 <keyboard_intake+0x340>)
 800b75c:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b760:	e112      	b.n	800b988 <keyboard_intake+0x454>
	case 'j':
		stiffness -= 0.0001f;
 800b762:	4b44      	ldr	r3, [pc, #272]	; (800b874 <keyboard_intake+0x340>)
 800b764:	edd3 7a00 	vldr	s15, [r3]
 800b768:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800b878 <keyboard_intake+0x344>
 800b76c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b770:	4b40      	ldr	r3, [pc, #256]	; (800b874 <keyboard_intake+0x340>)
 800b772:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b776:	e107      	b.n	800b988 <keyboard_intake+0x454>
	case 'p':
		//print2uart = false;
		print2uart = !print2uart;
 800b778:	4b40      	ldr	r3, [pc, #256]	; (800b87c <keyboard_intake+0x348>)
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	bf14      	ite	ne
 800b780:	2301      	movne	r3, #1
 800b782:	2300      	moveq	r3, #0
 800b784:	b2db      	uxtb	r3, r3
 800b786:	f083 0301 	eor.w	r3, r3, #1
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	f003 0301 	and.w	r3, r3, #1
 800b790:	b2da      	uxtb	r2, r3
 800b792:	4b3a      	ldr	r3, [pc, #232]	; (800b87c <keyboard_intake+0x348>)
 800b794:	701a      	strb	r2, [r3, #0]
		break;
 800b796:	e0f7      	b.n	800b988 <keyboard_intake+0x454>
	case 'o':
		//HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
		EN_GATE_GPIO_Port->BSRR = (uint32_t)EN_GATE_Pin << 16U;
 800b798:	4b39      	ldr	r3, [pc, #228]	; (800b880 <keyboard_intake+0x34c>)
 800b79a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b79e:	619a      	str	r2, [r3, #24]
		break;
 800b7a0:	e0f2      	b.n	800b988 <keyboard_intake+0x454>
	case 'l':
		HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b7a8:	4835      	ldr	r0, [pc, #212]	; (800b880 <keyboard_intake+0x34c>)
 800b7aa:	f7f7 ff83 	bl	80036b4 <HAL_GPIO_WritePin>
		EN_GATE_GPIO_Port->BSRR = EN_GATE_Pin ;
 800b7ae:	4b34      	ldr	r3, [pc, #208]	; (800b880 <keyboard_intake+0x34c>)
 800b7b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b7b4:	619a      	str	r2, [r3, #24]
		break;
 800b7b6:	e0e7      	b.n	800b988 <keyboard_intake+0x454>
	case 'X':
		step_through_pole_angles();
 800b7b8:	f7fe fc50 	bl	800a05c <step_through_pole_angles>
		break;
 800b7bc:	e0e4      	b.n	800b988 <keyboard_intake+0x454>
	case 'P':
		step_through_pwm_percent();
 800b7be:	f7fe fd79 	bl	800a2b4 <step_through_pwm_percent>
		break;
 800b7c2:	e0e1      	b.n	800b988 <keyboard_intake+0x454>
	case 'i':
		control_mode = position_control;
 800b7c4:	4b2f      	ldr	r3, [pc, #188]	; (800b884 <keyboard_intake+0x350>)
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	601a      	str	r2, [r3, #0]
		break;
 800b7ca:	e0dd      	b.n	800b988 <keyboard_intake+0x454>
	case 'k':
		control_mode = voltage_control;
 800b7cc:	4b2d      	ldr	r3, [pc, #180]	; (800b884 <keyboard_intake+0x350>)
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	601a      	str	r2, [r3, #0]
		amp = 0.05f;
 800b7d2:	4b23      	ldr	r3, [pc, #140]	; (800b860 <keyboard_intake+0x32c>)
 800b7d4:	4a2c      	ldr	r2, [pc, #176]	; (800b888 <keyboard_intake+0x354>)
 800b7d6:	601a      	str	r2, [r3, #0]
		break;
 800b7d8:	e0d6      	b.n	800b988 <keyboard_intake+0x454>

		// pos control
	case 'W':
		pos_amp *= 2;
 800b7da:	4b2c      	ldr	r3, [pc, #176]	; (800b88c <keyboard_intake+0x358>)
 800b7dc:	edd3 7a00 	vldr	s15, [r3]
 800b7e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b7e4:	4b29      	ldr	r3, [pc, #164]	; (800b88c <keyboard_intake+0x358>)
 800b7e6:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b7ea:	e0cd      	b.n	800b988 <keyboard_intake+0x454>
	case 'S':
		pos_amp *= 0.5f;
 800b7ec:	4b27      	ldr	r3, [pc, #156]	; (800b88c <keyboard_intake+0x358>)
 800b7ee:	edd3 7a00 	vldr	s15, [r3]
 800b7f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b7f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7fa:	4b24      	ldr	r3, [pc, #144]	; (800b88c <keyboard_intake+0x358>)
 800b7fc:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b800:	e0c2      	b.n	800b988 <keyboard_intake+0x454>
	case 'D':
		pos_freq *= 2;
 800b802:	4b23      	ldr	r3, [pc, #140]	; (800b890 <keyboard_intake+0x35c>)
 800b804:	edd3 7a00 	vldr	s15, [r3]
 800b808:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b80c:	4b20      	ldr	r3, [pc, #128]	; (800b890 <keyboard_intake+0x35c>)
 800b80e:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b812:	e0b9      	b.n	800b988 <keyboard_intake+0x454>
	case 'A':
		pos_freq *= 0.5f;
 800b814:	4b1e      	ldr	r3, [pc, #120]	; (800b890 <keyboard_intake+0x35c>)
 800b816:	edd3 7a00 	vldr	s15, [r3]
 800b81a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b81e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b822:	4b1b      	ldr	r3, [pc, #108]	; (800b890 <keyboard_intake+0x35c>)
 800b824:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b828:	e0ae      	b.n	800b988 <keyboard_intake+0x454>
	case 'C':
		if (convert2SI){
 800b82a:	4b1a      	ldr	r3, [pc, #104]	; (800b894 <keyboard_intake+0x360>)
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d003      	beq.n	800b83a <keyboard_intake+0x306>
			convert2SI = false;
 800b832:	4b18      	ldr	r3, [pc, #96]	; (800b894 <keyboard_intake+0x360>)
 800b834:	2200      	movs	r2, #0
 800b836:	701a      	strb	r2, [r3, #0]
		}
		else {
			convert2SI = true;
		}
		break;
 800b838:	e0a6      	b.n	800b988 <keyboard_intake+0x454>
			convert2SI = true;
 800b83a:	4b16      	ldr	r3, [pc, #88]	; (800b894 <keyboard_intake+0x360>)
 800b83c:	2201      	movs	r2, #1
 800b83e:	701a      	strb	r2, [r3, #0]
		break;
 800b840:	e0a2      	b.n	800b988 <keyboard_intake+0x454>
	case 'R':
		pos_amp_limit *= 2;
 800b842:	4b15      	ldr	r3, [pc, #84]	; (800b898 <keyboard_intake+0x364>)
 800b844:	edd3 7a00 	vldr	s15, [r3]
 800b848:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b84c:	4b12      	ldr	r3, [pc, #72]	; (800b898 <keyboard_intake+0x364>)
 800b84e:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b852:	e099      	b.n	800b988 <keyboard_intake+0x454>
 800b854:	2000003c 	.word	0x2000003c
 800b858:	20000584 	.word	0x20000584
 800b85c:	20000005 	.word	0x20000005
 800b860:	200000d4 	.word	0x200000d4
 800b864:	20000010 	.word	0x20000010
 800b868:	3d4ccccd 	.word	0x3d4ccccd
 800b86c:	20000008 	.word	0x20000008
 800b870:	200000d1 	.word	0x200000d1
 800b874:	20000014 	.word	0x20000014
 800b878:	38d1b717 	.word	0x38d1b717
 800b87c:	2000000e 	.word	0x2000000e
 800b880:	40021000 	.word	0x40021000
 800b884:	200000cc 	.word	0x200000cc
 800b888:	3d4ccccd 	.word	0x3d4ccccd
 800b88c:	20000018 	.word	0x20000018
 800b890:	2000001c 	.word	0x2000001c
 800b894:	200000d0 	.word	0x200000d0
 800b898:	20000020 	.word	0x20000020
	case 'F':
		pos_amp_limit *= 0.5f;
 800b89c:	4b3b      	ldr	r3, [pc, #236]	; (800b98c <keyboard_intake+0x458>)
 800b89e:	edd3 7a00 	vldr	s15, [r3]
 800b8a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b8a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8aa:	4b38      	ldr	r3, [pc, #224]	; (800b98c <keyboard_intake+0x458>)
 800b8ac:	edc3 7a00 	vstr	s15, [r3]
	case 'E':
		pos_offset += 200;
 800b8b0:	4b37      	ldr	r3, [pc, #220]	; (800b990 <keyboard_intake+0x45c>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	33c8      	adds	r3, #200	; 0xc8
 800b8b6:	4a36      	ldr	r2, [pc, #216]	; (800b990 <keyboard_intake+0x45c>)
 800b8b8:	6013      	str	r3, [r2, #0]
		break;
 800b8ba:	e065      	b.n	800b988 <keyboard_intake+0x454>
	case 'Q':
		pos_offset -= 200;
 800b8bc:	4b34      	ldr	r3, [pc, #208]	; (800b990 <keyboard_intake+0x45c>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	3bc8      	subs	r3, #200	; 0xc8
 800b8c2:	4a33      	ldr	r2, [pc, #204]	; (800b990 <keyboard_intake+0x45c>)
 800b8c4:	6013      	str	r3, [r2, #0]
		break;
 800b8c6:	e05f      	b.n	800b988 <keyboard_intake+0x454>
	case 'M':
		P_gain *= 2;
 800b8c8:	4b32      	ldr	r3, [pc, #200]	; (800b994 <keyboard_intake+0x460>)
 800b8ca:	edd3 7a00 	vldr	s15, [r3]
 800b8ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b8d2:	4b30      	ldr	r3, [pc, #192]	; (800b994 <keyboard_intake+0x460>)
 800b8d4:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b8d8:	e056      	b.n	800b988 <keyboard_intake+0x454>
	case 'N':
		P_gain *= 0.5f;
 800b8da:	4b2e      	ldr	r3, [pc, #184]	; (800b994 <keyboard_intake+0x460>)
 800b8dc:	edd3 7a00 	vldr	s15, [r3]
 800b8e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b8e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8e8:	4b2a      	ldr	r3, [pc, #168]	; (800b994 <keyboard_intake+0x460>)
 800b8ea:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b8ee:	e04b      	b.n	800b988 <keyboard_intake+0x454>
	case 'T':
		current_mode = sinusoidal;
 800b8f0:	4b29      	ldr	r3, [pc, #164]	; (800b998 <keyboard_intake+0x464>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	601a      	str	r2, [r3, #0]
		break;
 800b8f6:	e047      	b.n	800b988 <keyboard_intake+0x454>
	case 'G':
		current_mode = trapezoidal;
 800b8f8:	4b27      	ldr	r3, [pc, #156]	; (800b998 <keyboard_intake+0x464>)
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	601a      	str	r2, [r3, #0]
		break;
 800b8fe:	e043      	b.n	800b988 <keyboard_intake+0x454>
	case 'B':
		current_mode = freerun;
 800b900:	4b25      	ldr	r3, [pc, #148]	; (800b998 <keyboard_intake+0x464>)
 800b902:	2202      	movs	r2, #2
 800b904:	601a      	str	r2, [r3, #0]
		break;
 800b906:	e03f      	b.n	800b988 <keyboard_intake+0x454>
	case 'L':
		explore_limits();
 800b908:	f7fe fd12 	bl	800a330 <explore_limits>
		break;
 800b90c:	e03c      	b.n	800b988 <keyboard_intake+0x454>

	case 'm':
		generic_fac *= 2.0f;
 800b90e:	4b23      	ldr	r3, [pc, #140]	; (800b99c <keyboard_intake+0x468>)
 800b910:	edd3 7a00 	vldr	s15, [r3]
 800b914:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b918:	4b20      	ldr	r3, [pc, #128]	; (800b99c <keyboard_intake+0x468>)
 800b91a:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b91e:	e033      	b.n	800b988 <keyboard_intake+0x454>
	case 'n':
		generic_fac *= 0.5f;
 800b920:	4b1e      	ldr	r3, [pc, #120]	; (800b99c <keyboard_intake+0x468>)
 800b922:	edd3 7a00 	vldr	s15, [r3]
 800b926:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b92a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b92e:	4b1b      	ldr	r3, [pc, #108]	; (800b99c <keyboard_intake+0x468>)
 800b930:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b934:	e028      	b.n	800b988 <keyboard_intake+0x454>
	case 'v':
		generic_add += 1.0f;
 800b936:	4b1a      	ldr	r3, [pc, #104]	; (800b9a0 <keyboard_intake+0x46c>)
 800b938:	edd3 7a00 	vldr	s15, [r3]
 800b93c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b940:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b944:	4b16      	ldr	r3, [pc, #88]	; (800b9a0 <keyboard_intake+0x46c>)
 800b946:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b94a:	e01d      	b.n	800b988 <keyboard_intake+0x454>
	case 'b':
		generic_add -= 1.0f;
 800b94c:	4b14      	ldr	r3, [pc, #80]	; (800b9a0 <keyboard_intake+0x46c>)
 800b94e:	edd3 7a00 	vldr	s15, [r3]
 800b952:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b956:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b95a:	4b11      	ldr	r3, [pc, #68]	; (800b9a0 <keyboard_intake+0x46c>)
 800b95c:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b960:	e012      	b.n	800b988 <keyboard_intake+0x454>
	case 'Z':
		FOC_enabled = !FOC_enabled;
 800b962:	4b10      	ldr	r3, [pc, #64]	; (800b9a4 <keyboard_intake+0x470>)
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	bf14      	ite	ne
 800b96a:	2301      	movne	r3, #1
 800b96c:	2300      	moveq	r3, #0
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	f083 0301 	eor.w	r3, r3, #1
 800b974:	b2db      	uxtb	r3, r3
 800b976:	f003 0301 	and.w	r3, r3, #1
 800b97a:	b2da      	uxtb	r2, r3
 800b97c:	4b09      	ldr	r3, [pc, #36]	; (800b9a4 <keyboard_intake+0x470>)
 800b97e:	701a      	strb	r2, [r3, #0]
		break;
 800b980:	e002      	b.n	800b988 <keyboard_intake+0x454>


	default:
		ch='.';
 800b982:	4b09      	ldr	r3, [pc, #36]	; (800b9a8 <keyboard_intake+0x474>)
 800b984:	222e      	movs	r2, #46	; 0x2e
 800b986:	701a      	strb	r2, [r3, #0]
	}//for case 200ns

}
 800b988:	bf00      	nop
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	20000020 	.word	0x20000020
 800b990:	200000d8 	.word	0x200000d8
 800b994:	20000024 	.word	0x20000024
 800b998:	200000c8 	.word	0x200000c8
 800b99c:	20000028 	.word	0x20000028
 800b9a0:	200000dc 	.word	0x200000dc
 800b9a4:	2000000c 	.word	0x2000000c
 800b9a8:	2000003c 	.word	0x2000003c

0800b9ac <print_prep_task>:

void print_prep_task(int fast_control_task_counter){
 800b9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ae:	b08b      	sub	sp, #44	; 0x2c
 800b9b0:	af04      	add	r7, sp, #16
 800b9b2:	6078      	str	r0, [r7, #4]
#if DB_TIMING
	DB2H;
 800b9b4:	4ba3      	ldr	r3, [pc, #652]	; (800bc44 <print_prep_task+0x298>)
 800b9b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b9ba:	619a      	str	r2, [r3, #24]
	DB2L;
 800b9bc:	4ba1      	ldr	r3, [pc, #644]	; (800bc44 <print_prep_task+0x298>)
 800b9be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b9c2:	619a      	str	r2, [r3, #24]
	DB2H;
 800b9c4:	4b9f      	ldr	r3, [pc, #636]	; (800bc44 <print_prep_task+0x298>)
 800b9c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b9ca:	619a      	str	r2, [r3, #24]
#endif

	int pos = strlen(buf);
 800b9cc:	489e      	ldr	r0, [pc, #632]	; (800bc48 <print_prep_task+0x29c>)
 800b9ce:	f7f4 fbff 	bl	80001d0 <strlen>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	617b      	str	r3, [r7, #20]
	int left  = BUF_LEN - pos;
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 800b9dc:	613b      	str	r3, [r7, #16]
		nn = snprintf(buf+pos, left, fmt, val);  \
		pos += nn;                               \
		left -= nn;


	switch (fast_control_task_counter){
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2b14      	cmp	r3, #20
 800b9e2:	f200 830d 	bhi.w	800c000 <print_prep_task+0x654>
 800b9e6:	a201      	add	r2, pc, #4	; (adr r2, 800b9ec <print_prep_task+0x40>)
 800b9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ec:	0800ba41 	.word	0x0800ba41
 800b9f0:	0800ba71 	.word	0x0800ba71
 800b9f4:	0800bafd 	.word	0x0800bafd
 800b9f8:	0800bb23 	.word	0x0800bb23
 800b9fc:	0800bbdf 	.word	0x0800bbdf
 800ba00:	0800bca9 	.word	0x0800bca9
 800ba04:	0800c001 	.word	0x0800c001
 800ba08:	0800bce1 	.word	0x0800bce1
 800ba0c:	0800bd4f 	.word	0x0800bd4f
 800ba10:	0800bd87 	.word	0x0800bd87
 800ba14:	0800bdbf 	.word	0x0800bdbf
 800ba18:	0800bdef 	.word	0x0800bdef
 800ba1c:	0800be27 	.word	0x0800be27
 800ba20:	0800be4d 	.word	0x0800be4d
 800ba24:	0800be73 	.word	0x0800be73
 800ba28:	0800beab 	.word	0x0800beab
 800ba2c:	0800bed1 	.word	0x0800bed1
 800ba30:	0800c001 	.word	0x0800c001
 800ba34:	0800c001 	.word	0x0800c001
 800ba38:	0800bf79 	.word	0x0800bf79
 800ba3c:	0800bfed 	.word	0x0800bfed
	case 0:
		sprintf(buf, "tx: %c %4d %4d %4d %4d ", ch, tx_msg[0],rx_msg[1],rx_msg[2],rx_msg[3]);//70000ns
 800ba40:	4b82      	ldr	r3, [pc, #520]	; (800bc4c <print_prep_task+0x2a0>)
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	4618      	mov	r0, r3
 800ba46:	4b82      	ldr	r3, [pc, #520]	; (800bc50 <print_prep_task+0x2a4>)
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	461c      	mov	r4, r3
 800ba4c:	4b81      	ldr	r3, [pc, #516]	; (800bc54 <print_prep_task+0x2a8>)
 800ba4e:	785b      	ldrb	r3, [r3, #1]
 800ba50:	461a      	mov	r2, r3
 800ba52:	4b80      	ldr	r3, [pc, #512]	; (800bc54 <print_prep_task+0x2a8>)
 800ba54:	789b      	ldrb	r3, [r3, #2]
 800ba56:	4619      	mov	r1, r3
 800ba58:	4b7e      	ldr	r3, [pc, #504]	; (800bc54 <print_prep_task+0x2a8>)
 800ba5a:	78db      	ldrb	r3, [r3, #3]
 800ba5c:	9302      	str	r3, [sp, #8]
 800ba5e:	9101      	str	r1, [sp, #4]
 800ba60:	9200      	str	r2, [sp, #0]
 800ba62:	4623      	mov	r3, r4
 800ba64:	4602      	mov	r2, r0
 800ba66:	497c      	ldr	r1, [pc, #496]	; (800bc58 <print_prep_task+0x2ac>)
 800ba68:	4877      	ldr	r0, [pc, #476]	; (800bc48 <print_prep_task+0x29c>)
 800ba6a:	f001 fa4f 	bl	800cf0c <siprintf>
		break;
 800ba6e:	e2c7      	b.n	800c000 <print_prep_task+0x654>
	case 1:
		ADD_VAL(" a:%5d",HAL_ADCEx_InjectedGetValue (&hadc1, RANK_U));
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	4a75      	ldr	r2, [pc, #468]	; (800bc48 <print_prep_task+0x29c>)
 800ba74:	189c      	adds	r4, r3, r2
 800ba76:	693d      	ldr	r5, [r7, #16]
 800ba78:	2101      	movs	r1, #1
 800ba7a:	4878      	ldr	r0, [pc, #480]	; (800bc5c <print_prep_task+0x2b0>)
 800ba7c:	f7f6 f8f4 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800ba80:	4603      	mov	r3, r0
 800ba82:	4a77      	ldr	r2, [pc, #476]	; (800bc60 <print_prep_task+0x2b4>)
 800ba84:	4629      	mov	r1, r5
 800ba86:	4620      	mov	r0, r4
 800ba88:	f001 fa0c 	bl	800cea4 <sniprintf>
 800ba8c:	60f8      	str	r0, [r7, #12]
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	4413      	add	r3, r2
 800ba94:	617b      	str	r3, [r7, #20]
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	613b      	str	r3, [r7, #16]
		ADD_VAL(" b:%5d",HAL_ADCEx_InjectedGetValue (&hadc2, RANK_U));
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	4a69      	ldr	r2, [pc, #420]	; (800bc48 <print_prep_task+0x29c>)
 800baa2:	189c      	adds	r4, r3, r2
 800baa4:	693d      	ldr	r5, [r7, #16]
 800baa6:	2101      	movs	r1, #1
 800baa8:	486e      	ldr	r0, [pc, #440]	; (800bc64 <print_prep_task+0x2b8>)
 800baaa:	f7f6 f8dd 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800baae:	4603      	mov	r3, r0
 800bab0:	4a6d      	ldr	r2, [pc, #436]	; (800bc68 <print_prep_task+0x2bc>)
 800bab2:	4629      	mov	r1, r5
 800bab4:	4620      	mov	r0, r4
 800bab6:	f001 f9f5 	bl	800cea4 <sniprintf>
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	697a      	ldr	r2, [r7, #20]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	4413      	add	r3, r2
 800bac2:	617b      	str	r3, [r7, #20]
 800bac4:	693a      	ldr	r2, [r7, #16]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	1ad3      	subs	r3, r2, r3
 800baca:	613b      	str	r3, [r7, #16]
		ADD_VAL(" c:%5d",HAL_ADCEx_InjectedGetValue (&hadc3, RANK_U));
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	4a5e      	ldr	r2, [pc, #376]	; (800bc48 <print_prep_task+0x29c>)
 800bad0:	189c      	adds	r4, r3, r2
 800bad2:	693d      	ldr	r5, [r7, #16]
 800bad4:	2101      	movs	r1, #1
 800bad6:	4865      	ldr	r0, [pc, #404]	; (800bc6c <print_prep_task+0x2c0>)
 800bad8:	f7f6 f8c6 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800badc:	4603      	mov	r3, r0
 800bade:	4a64      	ldr	r2, [pc, #400]	; (800bc70 <print_prep_task+0x2c4>)
 800bae0:	4629      	mov	r1, r5
 800bae2:	4620      	mov	r0, r4
 800bae4:	f001 f9de 	bl	800cea4 <sniprintf>
 800bae8:	60f8      	str	r0, [r7, #12]
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	4413      	add	r3, r2
 800baf0:	617b      	str	r3, [r7, #20]
 800baf2:	693a      	ldr	r2, [r7, #16]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	613b      	str	r3, [r7, #16]
		//ADD_VAL(" p0:%4.2f", phase0);
		break;
 800bafa:	e281      	b.n	800c000 <print_prep_task+0x654>
	case 2:
		//ADD_VAL(" ps:%4.2f", phase_shift);
		ADD_VAL(" TM:%4d", (int) av_MOT_TEMP);
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	4a52      	ldr	r2, [pc, #328]	; (800bc48 <print_prep_task+0x29c>)
 800bb00:	1898      	adds	r0, r3, r2
 800bb02:	6939      	ldr	r1, [r7, #16]
 800bb04:	4b5b      	ldr	r3, [pc, #364]	; (800bc74 <print_prep_task+0x2c8>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a5b      	ldr	r2, [pc, #364]	; (800bc78 <print_prep_task+0x2cc>)
 800bb0a:	f001 f9cb 	bl	800cea4 <sniprintf>
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	697a      	ldr	r2, [r7, #20]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	4413      	add	r3, r2
 800bb16:	617b      	str	r3, [r7, #20]
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	1ad3      	subs	r3, r2, r3
 800bb1e:	613b      	str	r3, [r7, #16]
		break;
 800bb20:	e26e      	b.n	800c000 <print_prep_task+0x654>
	case 3:
		//ADD_VAL(" a:%4.2f", amp);
		//ADD_VAL(" a:%5d", (int)(amp*100.0f));
		ADD_VAL(" A:%5d",HAL_ADCEx_InjectedGetValue (&hadc1, RANK_I)- (int)A_mean);
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	4a48      	ldr	r2, [pc, #288]	; (800bc48 <print_prep_task+0x29c>)
 800bb26:	189c      	adds	r4, r3, r2
 800bb28:	693d      	ldr	r5, [r7, #16]
 800bb2a:	2104      	movs	r1, #4
 800bb2c:	484b      	ldr	r0, [pc, #300]	; (800bc5c <print_prep_task+0x2b0>)
 800bb2e:	f7f6 f89b 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800bb32:	4602      	mov	r2, r0
 800bb34:	4b51      	ldr	r3, [pc, #324]	; (800bc7c <print_prep_task+0x2d0>)
 800bb36:	edd3 7a00 	vldr	s15, [r3]
 800bb3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb3e:	ee17 3a90 	vmov	r3, s15
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	4a4e      	ldr	r2, [pc, #312]	; (800bc80 <print_prep_task+0x2d4>)
 800bb46:	4629      	mov	r1, r5
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f001 f9ab 	bl	800cea4 <sniprintf>
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	697a      	ldr	r2, [r7, #20]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	4413      	add	r3, r2
 800bb56:	617b      	str	r3, [r7, #20]
 800bb58:	693a      	ldr	r2, [r7, #16]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	613b      	str	r3, [r7, #16]
		ADD_VAL(" B:%5d",HAL_ADCEx_InjectedGetValue (&hadc2, RANK_I)- (int)B_mean);
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	4a39      	ldr	r2, [pc, #228]	; (800bc48 <print_prep_task+0x29c>)
 800bb64:	189c      	adds	r4, r3, r2
 800bb66:	693d      	ldr	r5, [r7, #16]
 800bb68:	2104      	movs	r1, #4
 800bb6a:	483e      	ldr	r0, [pc, #248]	; (800bc64 <print_prep_task+0x2b8>)
 800bb6c:	f7f6 f87c 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800bb70:	4602      	mov	r2, r0
 800bb72:	4b44      	ldr	r3, [pc, #272]	; (800bc84 <print_prep_task+0x2d8>)
 800bb74:	edd3 7a00 	vldr	s15, [r3]
 800bb78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb7c:	ee17 3a90 	vmov	r3, s15
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	4a41      	ldr	r2, [pc, #260]	; (800bc88 <print_prep_task+0x2dc>)
 800bb84:	4629      	mov	r1, r5
 800bb86:	4620      	mov	r0, r4
 800bb88:	f001 f98c 	bl	800cea4 <sniprintf>
 800bb8c:	60f8      	str	r0, [r7, #12]
 800bb8e:	697a      	ldr	r2, [r7, #20]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	4413      	add	r3, r2
 800bb94:	617b      	str	r3, [r7, #20]
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	1ad3      	subs	r3, r2, r3
 800bb9c:	613b      	str	r3, [r7, #16]
		ADD_VAL(" C:%5d",HAL_ADCEx_InjectedGetValue (&hadc3, RANK_I)- (int)C_mean);
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	4a29      	ldr	r2, [pc, #164]	; (800bc48 <print_prep_task+0x29c>)
 800bba2:	189c      	adds	r4, r3, r2
 800bba4:	693d      	ldr	r5, [r7, #16]
 800bba6:	2104      	movs	r1, #4
 800bba8:	4830      	ldr	r0, [pc, #192]	; (800bc6c <print_prep_task+0x2c0>)
 800bbaa:	f7f6 f85d 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	4b36      	ldr	r3, [pc, #216]	; (800bc8c <print_prep_task+0x2e0>)
 800bbb2:	edd3 7a00 	vldr	s15, [r3]
 800bbb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbba:	ee17 3a90 	vmov	r3, s15
 800bbbe:	1ad3      	subs	r3, r2, r3
 800bbc0:	4a33      	ldr	r2, [pc, #204]	; (800bc90 <print_prep_task+0x2e4>)
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f001 f96d 	bl	800cea4 <sniprintf>
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	697a      	ldr	r2, [r7, #20]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	617b      	str	r3, [r7, #20]
 800bbd4:	693a      	ldr	r2, [r7, #16]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	613b      	str	r3, [r7, #16]
		break;
 800bbdc:	e210      	b.n	800c000 <print_prep_task+0x654>
	case 4:
		//ADD_VAL(" v:%6.2f", omega);
		ADD_VAL(" oE:%5d", (int)(omegaEnc*100.0f));
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	4a19      	ldr	r2, [pc, #100]	; (800bc48 <print_prep_task+0x29c>)
 800bbe2:	1898      	adds	r0, r3, r2
 800bbe4:	6939      	ldr	r1, [r7, #16]
 800bbe6:	4b2b      	ldr	r3, [pc, #172]	; (800bc94 <print_prep_task+0x2e8>)
 800bbe8:	edd3 7a00 	vldr	s15, [r3]
 800bbec:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800bc98 <print_prep_task+0x2ec>
 800bbf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bbf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbf8:	ee17 3a90 	vmov	r3, s15
 800bbfc:	4a27      	ldr	r2, [pc, #156]	; (800bc9c <print_prep_task+0x2f0>)
 800bbfe:	f001 f951 	bl	800cea4 <sniprintf>
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	697a      	ldr	r2, [r7, #20]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	4413      	add	r3, r2
 800bc0a:	617b      	str	r3, [r7, #20]
 800bc0c:	693a      	ldr	r2, [r7, #16]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	613b      	str	r3, [r7, #16]
		ADD_VAL(" od:%5d", (int)(omegaEncDot*1.0f));
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	4a0c      	ldr	r2, [pc, #48]	; (800bc48 <print_prep_task+0x29c>)
 800bc18:	1898      	adds	r0, r3, r2
 800bc1a:	6939      	ldr	r1, [r7, #16]
 800bc1c:	4b20      	ldr	r3, [pc, #128]	; (800bca0 <print_prep_task+0x2f4>)
 800bc1e:	edd3 7a00 	vldr	s15, [r3]
 800bc22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc26:	ee17 3a90 	vmov	r3, s15
 800bc2a:	4a1e      	ldr	r2, [pc, #120]	; (800bca4 <print_prep_task+0x2f8>)
 800bc2c:	f001 f93a 	bl	800cea4 <sniprintf>
 800bc30:	60f8      	str	r0, [r7, #12]
 800bc32:	697a      	ldr	r2, [r7, #20]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	4413      	add	r3, r2
 800bc38:	617b      	str	r3, [r7, #20]
 800bc3a:	693a      	ldr	r2, [r7, #16]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	613b      	str	r3, [r7, #16]

		//sprintf(buf_add, " E:%5d", (int)TIM8->CNT); strcat(buf, buf_add);
		break;
 800bc42:	e1dd      	b.n	800c000 <print_prep_task+0x654>
 800bc44:	40020c00 	.word	0x40020c00
 800bc48:	20001884 	.word	0x20001884
 800bc4c:	2000003c 	.word	0x2000003c
 800bc50:	20000ac0 	.word	0x20000ac0
 800bc54:	20000bcc 	.word	0x20000bcc
 800bc58:	0800ebdc 	.word	0x0800ebdc
 800bc5c:	20000cb0 	.word	0x20000cb0
 800bc60:	0800ebf4 	.word	0x0800ebf4
 800bc64:	200005c4 	.word	0x200005c4
 800bc68:	0800ebfc 	.word	0x0800ebfc
 800bc6c:	20000cf8 	.word	0x20000cf8
 800bc70:	0800ec04 	.word	0x0800ec04
 800bc74:	20000118 	.word	0x20000118
 800bc78:	0800ec0c 	.word	0x0800ec0c
 800bc7c:	20000030 	.word	0x20000030
 800bc80:	0800ec14 	.word	0x0800ec14
 800bc84:	20000034 	.word	0x20000034
 800bc88:	0800ec1c 	.word	0x0800ec1c
 800bc8c:	20000038 	.word	0x20000038
 800bc90:	0800ec24 	.word	0x0800ec24
 800bc94:	200000f0 	.word	0x200000f0
 800bc98:	42c80000 	.word	0x42c80000
 800bc9c:	0800ec2c 	.word	0x0800ec2c
 800bca0:	200000f8 	.word	0x200000f8
 800bca4:	0800ec34 	.word	0x0800ec34
	case 5:
		//ADD_VAL(" c:%5d", (int)rotation_counter);
		ADD_VAL(" s:%5d", (int)(stiffness*10000.0f));
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	4a97      	ldr	r2, [pc, #604]	; (800bf08 <print_prep_task+0x55c>)
 800bcac:	1898      	adds	r0, r3, r2
 800bcae:	6939      	ldr	r1, [r7, #16]
 800bcb0:	4b96      	ldr	r3, [pc, #600]	; (800bf0c <print_prep_task+0x560>)
 800bcb2:	edd3 7a00 	vldr	s15, [r3]
 800bcb6:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800bf10 <print_prep_task+0x564>
 800bcba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bcc2:	ee17 3a90 	vmov	r3, s15
 800bcc6:	4a93      	ldr	r2, [pc, #588]	; (800bf14 <print_prep_task+0x568>)
 800bcc8:	f001 f8ec 	bl	800cea4 <sniprintf>
 800bccc:	60f8      	str	r0, [r7, #12]
 800bcce:	697a      	ldr	r2, [r7, #20]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	617b      	str	r3, [r7, #20]
 800bcd6:	693a      	ldr	r2, [r7, #16]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	1ad3      	subs	r3, r2, r3
 800bcdc:	613b      	str	r3, [r7, #16]
		break;
 800bcde:	e18f      	b.n	800c000 <print_prep_task+0x654>
	case 6:
		break;
	case 7:
		//ADD_VAL(" ADC:%5d", HAL_ADC_GetValue(&hadc1));
		ADD_VAL(" T_MCU:%5d", adc1_buf[RANK_CONT_TMCU-1]);
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	4a89      	ldr	r2, [pc, #548]	; (800bf08 <print_prep_task+0x55c>)
 800bce4:	1898      	adds	r0, r3, r2
 800bce6:	6939      	ldr	r1, [r7, #16]
 800bce8:	4b8b      	ldr	r3, [pc, #556]	; (800bf18 <print_prep_task+0x56c>)
 800bcea:	891b      	ldrh	r3, [r3, #8]
 800bcec:	4a8b      	ldr	r2, [pc, #556]	; (800bf1c <print_prep_task+0x570>)
 800bcee:	f001 f8d9 	bl	800cea4 <sniprintf>
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	697a      	ldr	r2, [r7, #20]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	617b      	str	r3, [r7, #20]
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	1ad3      	subs	r3, r2, r3
 800bd02:	613b      	str	r3, [r7, #16]
		//ADD_VAL(" Vref:%5d", adc1_buf[RANK_CONT_Vref-1]);
		//ADD_VAL(" Vbat:%5d", adc1_buf[RANK_CONT_Vbat-1]);
		ADD_VAL(" Vbus:%5d", adc1_buf[RANK_CONT_Vbus-1]);
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	4a80      	ldr	r2, [pc, #512]	; (800bf08 <print_prep_task+0x55c>)
 800bd08:	1898      	adds	r0, r3, r2
 800bd0a:	6939      	ldr	r1, [r7, #16]
 800bd0c:	4b82      	ldr	r3, [pc, #520]	; (800bf18 <print_prep_task+0x56c>)
 800bd0e:	89db      	ldrh	r3, [r3, #14]
 800bd10:	4a83      	ldr	r2, [pc, #524]	; (800bf20 <print_prep_task+0x574>)
 800bd12:	f001 f8c7 	bl	800cea4 <sniprintf>
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	617b      	str	r3, [r7, #20]
 800bd20:	693a      	ldr	r2, [r7, #16]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	1ad3      	subs	r3, r2, r3
 800bd26:	613b      	str	r3, [r7, #16]
		ADD_VAL(" fVbus:%5d", fast_Vbus);
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	4a77      	ldr	r2, [pc, #476]	; (800bf08 <print_prep_task+0x55c>)
 800bd2c:	1898      	adds	r0, r3, r2
 800bd2e:	6939      	ldr	r1, [r7, #16]
 800bd30:	4b7c      	ldr	r3, [pc, #496]	; (800bf24 <print_prep_task+0x578>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a7c      	ldr	r2, [pc, #496]	; (800bf28 <print_prep_task+0x57c>)
 800bd36:	f001 f8b5 	bl	800cea4 <sniprintf>
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	697a      	ldr	r2, [r7, #20]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	4413      	add	r3, r2
 800bd42:	617b      	str	r3, [r7, #20]
 800bd44:	693a      	ldr	r2, [r7, #16]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	613b      	str	r3, [r7, #16]


		//ADD_VAL(" pi:%4d", field_phase_int);
		break;
 800bd4c:	e158      	b.n	800c000 <print_prep_task+0x654>
	case 8:
		//ADD_VAL(" dc:%4d", (int)(direct_component*100.0f));
		//ADD_VAL(" qc:%4d", (int)(quadrature_component*100.0f));
		ADD_VAL(" FOC:%4d", (int)(FOC_phase_shift*100.0f));
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	4a6d      	ldr	r2, [pc, #436]	; (800bf08 <print_prep_task+0x55c>)
 800bd52:	1898      	adds	r0, r3, r2
 800bd54:	6939      	ldr	r1, [r7, #16]
 800bd56:	4b75      	ldr	r3, [pc, #468]	; (800bf2c <print_prep_task+0x580>)
 800bd58:	edd3 7a00 	vldr	s15, [r3]
 800bd5c:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800bf30 <print_prep_task+0x584>
 800bd60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd68:	ee17 3a90 	vmov	r3, s15
 800bd6c:	4a71      	ldr	r2, [pc, #452]	; (800bf34 <print_prep_task+0x588>)
 800bd6e:	f001 f899 	bl	800cea4 <sniprintf>
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	697a      	ldr	r2, [r7, #20]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	4413      	add	r3, r2
 800bd7a:	617b      	str	r3, [r7, #20]
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	1ad3      	subs	r3, r2, r3
 800bd82:	613b      	str	r3, [r7, #16]
		break;
 800bd84:	e13c      	b.n	800c000 <print_prep_task+0x654>
	case 9:
		ADD_VAL(" gf:%4d", (int)(generic_fac*100.0f));
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	4a5f      	ldr	r2, [pc, #380]	; (800bf08 <print_prep_task+0x55c>)
 800bd8a:	1898      	adds	r0, r3, r2
 800bd8c:	6939      	ldr	r1, [r7, #16]
 800bd8e:	4b6a      	ldr	r3, [pc, #424]	; (800bf38 <print_prep_task+0x58c>)
 800bd90:	edd3 7a00 	vldr	s15, [r3]
 800bd94:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800bf30 <print_prep_task+0x584>
 800bd98:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bda0:	ee17 3a90 	vmov	r3, s15
 800bda4:	4a65      	ldr	r2, [pc, #404]	; (800bf3c <print_prep_task+0x590>)
 800bda6:	f001 f87d 	bl	800cea4 <sniprintf>
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	697a      	ldr	r2, [r7, #20]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	617b      	str	r3, [r7, #20]
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	1ad3      	subs	r3, r2, r3
 800bdba:	613b      	str	r3, [r7, #16]
		break;
 800bdbc:	e120      	b.n	800c000 <print_prep_task+0x654>
	case 10:
		ADD_VAL(" ga:%4d", (int) generic_add);
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	4a51      	ldr	r2, [pc, #324]	; (800bf08 <print_prep_task+0x55c>)
 800bdc2:	1898      	adds	r0, r3, r2
 800bdc4:	6939      	ldr	r1, [r7, #16]
 800bdc6:	4b5e      	ldr	r3, [pc, #376]	; (800bf40 <print_prep_task+0x594>)
 800bdc8:	edd3 7a00 	vldr	s15, [r3]
 800bdcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdd0:	ee17 3a90 	vmov	r3, s15
 800bdd4:	4a5b      	ldr	r2, [pc, #364]	; (800bf44 <print_prep_task+0x598>)
 800bdd6:	f001 f865 	bl	800cea4 <sniprintf>
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	697a      	ldr	r2, [r7, #20]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	4413      	add	r3, r2
 800bde2:	617b      	str	r3, [r7, #20]
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	613b      	str	r3, [r7, #16]
		break;
 800bdec:	e108      	b.n	800c000 <print_prep_task+0x654>
	case 11:
		ADD_VAL(" P:%5d", (int) (fast_P_consumed*100.0f));
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	4a45      	ldr	r2, [pc, #276]	; (800bf08 <print_prep_task+0x55c>)
 800bdf2:	1898      	adds	r0, r3, r2
 800bdf4:	6939      	ldr	r1, [r7, #16]
 800bdf6:	4b54      	ldr	r3, [pc, #336]	; (800bf48 <print_prep_task+0x59c>)
 800bdf8:	edd3 7a00 	vldr	s15, [r3]
 800bdfc:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800bf30 <print_prep_task+0x584>
 800be00:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be08:	ee17 3a90 	vmov	r3, s15
 800be0c:	4a4f      	ldr	r2, [pc, #316]	; (800bf4c <print_prep_task+0x5a0>)
 800be0e:	f001 f849 	bl	800cea4 <sniprintf>
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	697a      	ldr	r2, [r7, #20]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	4413      	add	r3, r2
 800be1a:	617b      	str	r3, [r7, #20]
 800be1c:	693a      	ldr	r2, [r7, #16]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	1ad3      	subs	r3, r2, r3
 800be22:	613b      	str	r3, [r7, #16]
			//sprintf(buf_add, " It:%5.2fA", I_tot); strcat(buf, buf_add);
		}
		else{
			//sprintf(buf_add, " I:%4d SO1:%4d SO2:%4d", val_I, val_SO1, val_SO2); strcat(buf, buf_add);
		}
		break;
 800be24:	e0ec      	b.n	800c000 <print_prep_task+0x654>
	case 12:
		ADD_VAL(" TM:%4d", (int) av_MOT_TEMP);
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	4a37      	ldr	r2, [pc, #220]	; (800bf08 <print_prep_task+0x55c>)
 800be2a:	1898      	adds	r0, r3, r2
 800be2c:	6939      	ldr	r1, [r7, #16]
 800be2e:	4b48      	ldr	r3, [pc, #288]	; (800bf50 <print_prep_task+0x5a4>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a48      	ldr	r2, [pc, #288]	; (800bf54 <print_prep_task+0x5a8>)
 800be34:	f001 f836 	bl	800cea4 <sniprintf>
 800be38:	60f8      	str	r0, [r7, #12]
 800be3a:	697a      	ldr	r2, [r7, #20]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	4413      	add	r3, r2
 800be40:	617b      	str	r3, [r7, #20]
 800be42:	693a      	ldr	r2, [r7, #16]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	1ad3      	subs	r3, r2, r3
 800be48:	613b      	str	r3, [r7, #16]
		break;
 800be4a:	e0d9      	b.n	800c000 <print_prep_task+0x654>
	case 13:
		ADD_VAL(" TE:%4d", (int) av_ESC_TEMP);
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	4a2e      	ldr	r2, [pc, #184]	; (800bf08 <print_prep_task+0x55c>)
 800be50:	1898      	adds	r0, r3, r2
 800be52:	6939      	ldr	r1, [r7, #16]
 800be54:	4b40      	ldr	r3, [pc, #256]	; (800bf58 <print_prep_task+0x5ac>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4a40      	ldr	r2, [pc, #256]	; (800bf5c <print_prep_task+0x5b0>)
 800be5a:	f001 f823 	bl	800cea4 <sniprintf>
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	697a      	ldr	r2, [r7, #20]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	4413      	add	r3, r2
 800be66:	617b      	str	r3, [r7, #20]
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	613b      	str	r3, [r7, #16]
		break;
 800be70:	e0c6      	b.n	800c000 <print_prep_task+0x654>
	case 14:
		ADD_VAL(" It:%4.2f", fast_I_tot);
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	4a24      	ldr	r2, [pc, #144]	; (800bf08 <print_prep_task+0x55c>)
 800be76:	189d      	adds	r5, r3, r2
 800be78:	693e      	ldr	r6, [r7, #16]
 800be7a:	4b39      	ldr	r3, [pc, #228]	; (800bf60 <print_prep_task+0x5b4>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4618      	mov	r0, r3
 800be80:	f7f4 fb62 	bl	8000548 <__aeabi_f2d>
 800be84:	4603      	mov	r3, r0
 800be86:	460c      	mov	r4, r1
 800be88:	e9cd 3400 	strd	r3, r4, [sp]
 800be8c:	4a35      	ldr	r2, [pc, #212]	; (800bf64 <print_prep_task+0x5b8>)
 800be8e:	4631      	mov	r1, r6
 800be90:	4628      	mov	r0, r5
 800be92:	f001 f807 	bl	800cea4 <sniprintf>
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	697a      	ldr	r2, [r7, #20]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	4413      	add	r3, r2
 800be9e:	617b      	str	r3, [r7, #20]
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	613b      	str	r3, [r7, #16]
		break;
 800bea8:	e0aa      	b.n	800c000 <print_prep_task+0x654>
	case 15:
		ADD_VAL(" F0:%4d", (int) fast_STRAIN0);
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	4a16      	ldr	r2, [pc, #88]	; (800bf08 <print_prep_task+0x55c>)
 800beae:	1898      	adds	r0, r3, r2
 800beb0:	6939      	ldr	r1, [r7, #16]
 800beb2:	4b2d      	ldr	r3, [pc, #180]	; (800bf68 <print_prep_task+0x5bc>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a2d      	ldr	r2, [pc, #180]	; (800bf6c <print_prep_task+0x5c0>)
 800beb8:	f000 fff4 	bl	800cea4 <sniprintf>
 800bebc:	60f8      	str	r0, [r7, #12]
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	4413      	add	r3, r2
 800bec4:	617b      	str	r3, [r7, #20]
 800bec6:	693a      	ldr	r2, [r7, #16]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	1ad3      	subs	r3, r2, r3
 800becc:	613b      	str	r3, [r7, #16]
		break;
 800bece:	e097      	b.n	800c000 <print_prep_task+0x654>
	case 16:
		ADD_VAL(" ps:%4.2f", phase_shift);
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	4a0d      	ldr	r2, [pc, #52]	; (800bf08 <print_prep_task+0x55c>)
 800bed4:	189d      	adds	r5, r3, r2
 800bed6:	693e      	ldr	r6, [r7, #16]
 800bed8:	4b25      	ldr	r3, [pc, #148]	; (800bf70 <print_prep_task+0x5c4>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4618      	mov	r0, r3
 800bede:	f7f4 fb33 	bl	8000548 <__aeabi_f2d>
 800bee2:	4603      	mov	r3, r0
 800bee4:	460c      	mov	r4, r1
 800bee6:	e9cd 3400 	strd	r3, r4, [sp]
 800beea:	4a22      	ldr	r2, [pc, #136]	; (800bf74 <print_prep_task+0x5c8>)
 800beec:	4631      	mov	r1, r6
 800beee:	4628      	mov	r0, r5
 800bef0:	f000 ffd8 	bl	800cea4 <sniprintf>
 800bef4:	60f8      	str	r0, [r7, #12]
 800bef6:	697a      	ldr	r2, [r7, #20]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	4413      	add	r3, r2
 800befc:	617b      	str	r3, [r7, #20]
 800befe:	693a      	ldr	r2, [r7, #16]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	613b      	str	r3, [r7, #16]
		break;
 800bf06:	e07b      	b.n	800c000 <print_prep_task+0x654>
 800bf08:	20001884 	.word	0x20001884
 800bf0c:	20000014 	.word	0x20000014
 800bf10:	461c4000 	.word	0x461c4000
 800bf14:	0800ec3c 	.word	0x0800ec3c
 800bf18:	20000bd0 	.word	0x20000bd0
 800bf1c:	0800ec44 	.word	0x0800ec44
 800bf20:	0800ec50 	.word	0x0800ec50
 800bf24:	2000002c 	.word	0x2000002c
 800bf28:	0800ec5c 	.word	0x0800ec5c
 800bf2c:	20000130 	.word	0x20000130
 800bf30:	42c80000 	.word	0x42c80000
 800bf34:	0800ec68 	.word	0x0800ec68
 800bf38:	20000028 	.word	0x20000028
 800bf3c:	0800ec74 	.word	0x0800ec74
 800bf40:	200000dc 	.word	0x200000dc
 800bf44:	0800ec7c 	.word	0x0800ec7c
 800bf48:	2000012c 	.word	0x2000012c
 800bf4c:	0800ec84 	.word	0x0800ec84
 800bf50:	20000118 	.word	0x20000118
 800bf54:	0800ec0c 	.word	0x0800ec0c
 800bf58:	20000110 	.word	0x20000110
 800bf5c:	0800ec8c 	.word	0x0800ec8c
 800bf60:	20000120 	.word	0x20000120
 800bf64:	0800ec94 	.word	0x0800ec94
 800bf68:	20000104 	.word	0x20000104
 800bf6c:	0800eca0 	.word	0x0800eca0
 800bf70:	20000010 	.word	0x20000010
 800bf74:	0800eca8 	.word	0x0800eca8




	case 19:
		if (av_ESC_TEMP > 1900){
 800bf78:	4b29      	ldr	r3, [pc, #164]	; (800c020 <print_prep_task+0x674>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f240 726c 	movw	r2, #1900	; 0x76c
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d90c      	bls.n	800bf9e <print_prep_task+0x5f2>
			sprintf(buf_add, "* >50C on ESC"); strcat(buf, buf_add);
 800bf84:	4a27      	ldr	r2, [pc, #156]	; (800c024 <print_prep_task+0x678>)
 800bf86:	4b28      	ldr	r3, [pc, #160]	; (800c028 <print_prep_task+0x67c>)
 800bf88:	4614      	mov	r4, r2
 800bf8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf8c:	6020      	str	r0, [r4, #0]
 800bf8e:	6061      	str	r1, [r4, #4]
 800bf90:	60a2      	str	r2, [r4, #8]
 800bf92:	881b      	ldrh	r3, [r3, #0]
 800bf94:	81a3      	strh	r3, [r4, #12]
 800bf96:	4923      	ldr	r1, [pc, #140]	; (800c024 <print_prep_task+0x678>)
 800bf98:	4824      	ldr	r0, [pc, #144]	; (800c02c <print_prep_task+0x680>)
 800bf9a:	f000 ffd7 	bl	800cf4c <strcat>
		}

		if (av_MOT_TEMP > 1900){
 800bf9e:	4b24      	ldr	r3, [pc, #144]	; (800c030 <print_prep_task+0x684>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f240 726c 	movw	r2, #1900	; 0x76c
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d90c      	bls.n	800bfc4 <print_prep_task+0x618>
			sprintf(buf_add, "* >50C on MOTOR"); strcat(buf, buf_add);
 800bfaa:	4a1e      	ldr	r2, [pc, #120]	; (800c024 <print_prep_task+0x678>)
 800bfac:	4b21      	ldr	r3, [pc, #132]	; (800c034 <print_prep_task+0x688>)
 800bfae:	4614      	mov	r4, r2
 800bfb0:	461d      	mov	r5, r3
 800bfb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bfb4:	6020      	str	r0, [r4, #0]
 800bfb6:	6061      	str	r1, [r4, #4]
 800bfb8:	60a2      	str	r2, [r4, #8]
 800bfba:	60e3      	str	r3, [r4, #12]
 800bfbc:	4919      	ldr	r1, [pc, #100]	; (800c024 <print_prep_task+0x678>)
 800bfbe:	481b      	ldr	r0, [pc, #108]	; (800c02c <print_prep_task+0x680>)
 800bfc0:	f000 ffc4 	bl	800cf4c <strcat>
		}

		if (fast_STRAIN0 < 2170){
 800bfc4:	4b1c      	ldr	r3, [pc, #112]	; (800c038 <print_prep_task+0x68c>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f640 0279 	movw	r2, #2169	; 0x879
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d816      	bhi.n	800bffe <print_prep_task+0x652>
			sprintf(buf_add, "* -100N force"); strcat(buf, buf_add);
 800bfd0:	4a14      	ldr	r2, [pc, #80]	; (800c024 <print_prep_task+0x678>)
 800bfd2:	4b1a      	ldr	r3, [pc, #104]	; (800c03c <print_prep_task+0x690>)
 800bfd4:	4614      	mov	r4, r2
 800bfd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bfd8:	6020      	str	r0, [r4, #0]
 800bfda:	6061      	str	r1, [r4, #4]
 800bfdc:	60a2      	str	r2, [r4, #8]
 800bfde:	881b      	ldrh	r3, [r3, #0]
 800bfe0:	81a3      	strh	r3, [r4, #12]
 800bfe2:	4910      	ldr	r1, [pc, #64]	; (800c024 <print_prep_task+0x678>)
 800bfe4:	4811      	ldr	r0, [pc, #68]	; (800c02c <print_prep_task+0x680>)
 800bfe6:	f000 ffb1 	bl	800cf4c <strcat>
		}
		break;
 800bfea:	e008      	b.n	800bffe <print_prep_task+0x652>

	case 20:
		sprintf(buf_add, " \r\n"); strcat(buf, buf_add);
 800bfec:	4b0d      	ldr	r3, [pc, #52]	; (800c024 <print_prep_task+0x678>)
 800bfee:	4a14      	ldr	r2, [pc, #80]	; (800c040 <print_prep_task+0x694>)
 800bff0:	6810      	ldr	r0, [r2, #0]
 800bff2:	6018      	str	r0, [r3, #0]
 800bff4:	490b      	ldr	r1, [pc, #44]	; (800c024 <print_prep_task+0x678>)
 800bff6:	480d      	ldr	r0, [pc, #52]	; (800c02c <print_prep_task+0x680>)
 800bff8:	f000 ffa8 	bl	800cf4c <strcat>
		break;
 800bffc:	e000      	b.n	800c000 <print_prep_task+0x654>
		break;
 800bffe:	bf00      	nop

	//2L //1ms = 1000000ns
#endif

#if DB_TIMING
	DB2L;
 800c000:	4b10      	ldr	r3, [pc, #64]	; (800c044 <print_prep_task+0x698>)
 800c002:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c006:	619a      	str	r2, [r3, #24]
	DB2H;
 800c008:	4b0e      	ldr	r3, [pc, #56]	; (800c044 <print_prep_task+0x698>)
 800c00a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c00e:	619a      	str	r2, [r3, #24]
	DB2L;
 800c010:	4b0c      	ldr	r3, [pc, #48]	; (800c044 <print_prep_task+0x698>)
 800c012:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c016:	619a      	str	r2, [r3, #24]
#endif

}
 800c018:	bf00      	nop
 800c01a:	371c      	adds	r7, #28
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c020:	20000110 	.word	0x20000110
 800c024:	20000be4 	.word	0x20000be4
 800c028:	0800ecb4 	.word	0x0800ecb4
 800c02c:	20001884 	.word	0x20001884
 800c030:	20000118 	.word	0x20000118
 800c034:	0800ecc4 	.word	0x0800ecc4
 800c038:	20000104 	.word	0x20000104
 800c03c:	0800ecd4 	.word	0x0800ecd4
 800c040:	0800ece4 	.word	0x0800ece4
 800c044:	40020c00 	.word	0x40020c00

0800c048 <print_task>:

void print_task(void){
 800c048:	b5b0      	push	{r4, r5, r7, lr}
 800c04a:	af00      	add	r7, sp, #0


	if (buf_msgs[0] != '\0'){
 800c04c:	4b11      	ldr	r3, [pc, #68]	; (800c094 <print_task+0x4c>)
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d006      	beq.n	800c062 <print_task+0x1a>
		strcat(buf, buf_msgs);
 800c054:	490f      	ldr	r1, [pc, #60]	; (800c094 <print_task+0x4c>)
 800c056:	4810      	ldr	r0, [pc, #64]	; (800c098 <print_task+0x50>)
 800c058:	f000 ff78 	bl	800cf4c <strcat>
		buf_msgs[0] = '\0';
 800c05c:	4b0d      	ldr	r3, [pc, #52]	; (800c094 <print_task+0x4c>)
 800c05e:	2200      	movs	r2, #0
 800c060:	701a      	strb	r2, [r3, #0]

	//                   0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5



	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 800c062:	4b0e      	ldr	r3, [pc, #56]	; (800c09c <print_task+0x54>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	695a      	ldr	r2, [r3, #20]
 800c068:	4b0c      	ldr	r3, [pc, #48]	; (800c09c <print_task+0x54>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c070:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 800c072:	4c09      	ldr	r4, [pc, #36]	; (800c098 <print_task+0x50>)
 800c074:	4b09      	ldr	r3, [pc, #36]	; (800c09c <print_task+0x54>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3304      	adds	r3, #4
 800c07a:	461d      	mov	r5, r3
 800c07c:	4806      	ldr	r0, [pc, #24]	; (800c098 <print_task+0x50>)
 800c07e:	f7f4 f8a7 	bl	80001d0 <strlen>
 800c082:	4603      	mov	r3, r0
 800c084:	462a      	mov	r2, r5
 800c086:	4621      	mov	r1, r4
 800c088:	4805      	ldr	r0, [pc, #20]	; (800c0a0 <print_task+0x58>)
 800c08a:	f7f6 fe43 	bl	8002d14 <HAL_DMA_Start_IT>


}
 800c08e:	bf00      	nop
 800c090:	bdb0      	pop	{r4, r5, r7, pc}
 800c092:	bf00      	nop
 800c094:	20001820 	.word	0x20001820
 800c098:	20001884 	.word	0x20001884
 800c09c:	20000584 	.word	0x20000584
 800c0a0:	20000b28 	.word	0x20000b28

0800c0a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c0a8:	bf00      	nop
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr
	...

0800c0b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	607b      	str	r3, [r7, #4]
 800c0be:	4b10      	ldr	r3, [pc, #64]	; (800c100 <HAL_MspInit+0x4c>)
 800c0c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0c2:	4a0f      	ldr	r2, [pc, #60]	; (800c100 <HAL_MspInit+0x4c>)
 800c0c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c0c8:	6453      	str	r3, [r2, #68]	; 0x44
 800c0ca:	4b0d      	ldr	r3, [pc, #52]	; (800c100 <HAL_MspInit+0x4c>)
 800c0cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0d2:	607b      	str	r3, [r7, #4]
 800c0d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	603b      	str	r3, [r7, #0]
 800c0da:	4b09      	ldr	r3, [pc, #36]	; (800c100 <HAL_MspInit+0x4c>)
 800c0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0de:	4a08      	ldr	r2, [pc, #32]	; (800c100 <HAL_MspInit+0x4c>)
 800c0e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0e4:	6413      	str	r3, [r2, #64]	; 0x40
 800c0e6:	4b06      	ldr	r3, [pc, #24]	; (800c100 <HAL_MspInit+0x4c>)
 800c0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0ee:	603b      	str	r3, [r7, #0]
 800c0f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c0f2:	bf00      	nop
 800c0f4:	370c      	adds	r7, #12
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	40023800 	.word	0x40023800

0800c104 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b092      	sub	sp, #72	; 0x48
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c10c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c110:	2200      	movs	r2, #0
 800c112:	601a      	str	r2, [r3, #0]
 800c114:	605a      	str	r2, [r3, #4]
 800c116:	609a      	str	r2, [r3, #8]
 800c118:	60da      	str	r2, [r3, #12]
 800c11a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a9b      	ldr	r2, [pc, #620]	; (800c390 <HAL_ADC_MspInit+0x28c>)
 800c122:	4293      	cmp	r3, r2
 800c124:	f040 8096 	bne.w	800c254 <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c128:	2300      	movs	r3, #0
 800c12a:	633b      	str	r3, [r7, #48]	; 0x30
 800c12c:	4b99      	ldr	r3, [pc, #612]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c12e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c130:	4a98      	ldr	r2, [pc, #608]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c136:	6453      	str	r3, [r2, #68]	; 0x44
 800c138:	4b96      	ldr	r3, [pc, #600]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c13a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c13c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c140:	633b      	str	r3, [r7, #48]	; 0x30
 800c142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c144:	2300      	movs	r3, #0
 800c146:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c148:	4b92      	ldr	r3, [pc, #584]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c14c:	4a91      	ldr	r2, [pc, #580]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c14e:	f043 0304 	orr.w	r3, r3, #4
 800c152:	6313      	str	r3, [r2, #48]	; 0x30
 800c154:	4b8f      	ldr	r3, [pc, #572]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c158:	f003 0304 	and.w	r3, r3, #4
 800c15c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c160:	2300      	movs	r3, #0
 800c162:	62bb      	str	r3, [r7, #40]	; 0x28
 800c164:	4b8b      	ldr	r3, [pc, #556]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c168:	4a8a      	ldr	r2, [pc, #552]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c16a:	f043 0301 	orr.w	r3, r3, #1
 800c16e:	6313      	str	r3, [r2, #48]	; 0x30
 800c170:	4b88      	ldr	r3, [pc, #544]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c174:	f003 0301 	and.w	r3, r3, #1
 800c178:	62bb      	str	r3, [r7, #40]	; 0x28
 800c17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c17c:	2300      	movs	r3, #0
 800c17e:	627b      	str	r3, [r7, #36]	; 0x24
 800c180:	4b84      	ldr	r3, [pc, #528]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c184:	4a83      	ldr	r2, [pc, #524]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c186:	f043 0302 	orr.w	r3, r3, #2
 800c18a:	6313      	str	r3, [r2, #48]	; 0x30
 800c18c:	4b81      	ldr	r3, [pc, #516]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c190:	f003 0302 	and.w	r3, r3, #2
 800c194:	627b      	str	r3, [r7, #36]	; 0x24
 800c196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c198:	233e      	movs	r3, #62	; 0x3e
 800c19a:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c19c:	2303      	movs	r3, #3
 800c19e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c1a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	487b      	ldr	r0, [pc, #492]	; (800c398 <HAL_ADC_MspInit+0x294>)
 800c1ac:	f7f7 f8e8 	bl	8003380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c1b0:	233e      	movs	r3, #62	; 0x3e
 800c1b2:	637b      	str	r3, [r7, #52]	; 0x34
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	4876      	ldr	r0, [pc, #472]	; (800c39c <HAL_ADC_MspInit+0x298>)
 800c1c4:	f7f7 f8dc 	bl	8003380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c1cc:	2303      	movs	r3, #3
 800c1ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c1d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c1d8:	4619      	mov	r1, r3
 800c1da:	4871      	ldr	r0, [pc, #452]	; (800c3a0 <HAL_ADC_MspInit+0x29c>)
 800c1dc:	f7f7 f8d0 	bl	8003380 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800c1e0:	4b70      	ldr	r3, [pc, #448]	; (800c3a4 <HAL_ADC_MspInit+0x2a0>)
 800c1e2:	4a71      	ldr	r2, [pc, #452]	; (800c3a8 <HAL_ADC_MspInit+0x2a4>)
 800c1e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800c1e6:	4b6f      	ldr	r3, [pc, #444]	; (800c3a4 <HAL_ADC_MspInit+0x2a0>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c1ec:	4b6d      	ldr	r3, [pc, #436]	; (800c3a4 <HAL_ADC_MspInit+0x2a0>)
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c1f2:	4b6c      	ldr	r3, [pc, #432]	; (800c3a4 <HAL_ADC_MspInit+0x2a0>)
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c1f8:	4b6a      	ldr	r3, [pc, #424]	; (800c3a4 <HAL_ADC_MspInit+0x2a0>)
 800c1fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c1fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c200:	4b68      	ldr	r3, [pc, #416]	; (800c3a4 <HAL_ADC_MspInit+0x2a0>)
 800c202:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c206:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c208:	4b66      	ldr	r3, [pc, #408]	; (800c3a4 <HAL_ADC_MspInit+0x2a0>)
 800c20a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c20e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800c210:	4b64      	ldr	r3, [pc, #400]	; (800c3a4 <HAL_ADC_MspInit+0x2a0>)
 800c212:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c216:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800c218:	4b62      	ldr	r3, [pc, #392]	; (800c3a4 <HAL_ADC_MspInit+0x2a0>)
 800c21a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c21e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c220:	4b60      	ldr	r3, [pc, #384]	; (800c3a4 <HAL_ADC_MspInit+0x2a0>)
 800c222:	2200      	movs	r2, #0
 800c224:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800c226:	485f      	ldr	r0, [pc, #380]	; (800c3a4 <HAL_ADC_MspInit+0x2a0>)
 800c228:	f7f6 fcc6 	bl	8002bb8 <HAL_DMA_Init>
 800c22c:	4603      	mov	r3, r0
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d001      	beq.n	800c236 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800c232:	f7ff ff37 	bl	800c0a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	4a5a      	ldr	r2, [pc, #360]	; (800c3a4 <HAL_ADC_MspInit+0x2a0>)
 800c23a:	639a      	str	r2, [r3, #56]	; 0x38
 800c23c:	4a59      	ldr	r2, [pc, #356]	; (800c3a4 <HAL_ADC_MspInit+0x2a0>)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c242:	2200      	movs	r2, #0
 800c244:	2100      	movs	r1, #0
 800c246:	2012      	movs	r0, #18
 800c248:	f7f6 fc7f 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c24c:	2012      	movs	r0, #18
 800c24e:	f7f6 fc98 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800c252:	e132      	b.n	800c4ba <HAL_ADC_MspInit+0x3b6>
  else if(hadc->Instance==ADC2)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a54      	ldr	r2, [pc, #336]	; (800c3ac <HAL_ADC_MspInit+0x2a8>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	f040 80ac 	bne.w	800c3b8 <HAL_ADC_MspInit+0x2b4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800c260:	2300      	movs	r3, #0
 800c262:	623b      	str	r3, [r7, #32]
 800c264:	4b4b      	ldr	r3, [pc, #300]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c268:	4a4a      	ldr	r2, [pc, #296]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c26a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c26e:	6453      	str	r3, [r2, #68]	; 0x44
 800c270:	4b48      	ldr	r3, [pc, #288]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c278:	623b      	str	r3, [r7, #32]
 800c27a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c27c:	2300      	movs	r3, #0
 800c27e:	61fb      	str	r3, [r7, #28]
 800c280:	4b44      	ldr	r3, [pc, #272]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c284:	4a43      	ldr	r2, [pc, #268]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c286:	f043 0304 	orr.w	r3, r3, #4
 800c28a:	6313      	str	r3, [r2, #48]	; 0x30
 800c28c:	4b41      	ldr	r3, [pc, #260]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c290:	f003 0304 	and.w	r3, r3, #4
 800c294:	61fb      	str	r3, [r7, #28]
 800c296:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c298:	2300      	movs	r3, #0
 800c29a:	61bb      	str	r3, [r7, #24]
 800c29c:	4b3d      	ldr	r3, [pc, #244]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2a0:	4a3c      	ldr	r2, [pc, #240]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c2a2:	f043 0301 	orr.w	r3, r3, #1
 800c2a6:	6313      	str	r3, [r2, #48]	; 0x30
 800c2a8:	4b3a      	ldr	r3, [pc, #232]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ac:	f003 0301 	and.w	r3, r3, #1
 800c2b0:	61bb      	str	r3, [r7, #24]
 800c2b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	617b      	str	r3, [r7, #20]
 800c2b8:	4b36      	ldr	r3, [pc, #216]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2bc:	4a35      	ldr	r2, [pc, #212]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c2be:	f043 0302 	orr.w	r3, r3, #2
 800c2c2:	6313      	str	r3, [r2, #48]	; 0x30
 800c2c4:	4b33      	ldr	r3, [pc, #204]	; (800c394 <HAL_ADC_MspInit+0x290>)
 800c2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2c8:	f003 0302 	and.w	r3, r3, #2
 800c2cc:	617b      	str	r3, [r7, #20]
 800c2ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c2d0:	233e      	movs	r3, #62	; 0x3e
 800c2d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c2d4:	2303      	movs	r3, #3
 800c2d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c2dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	482d      	ldr	r0, [pc, #180]	; (800c398 <HAL_ADC_MspInit+0x294>)
 800c2e4:	f7f7 f84c 	bl	8003380 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 800c2e8:	2316      	movs	r3, #22
 800c2ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4828      	ldr	r0, [pc, #160]	; (800c39c <HAL_ADC_MspInit+0x298>)
 800c2fc:	f7f7 f840 	bl	8003380 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c300:	2301      	movs	r3, #1
 800c302:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c304:	2303      	movs	r3, #3
 800c306:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c308:	2300      	movs	r3, #0
 800c30a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c30c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c310:	4619      	mov	r1, r3
 800c312:	4823      	ldr	r0, [pc, #140]	; (800c3a0 <HAL_ADC_MspInit+0x29c>)
 800c314:	f7f7 f834 	bl	8003380 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800c318:	4b25      	ldr	r3, [pc, #148]	; (800c3b0 <HAL_ADC_MspInit+0x2ac>)
 800c31a:	4a26      	ldr	r2, [pc, #152]	; (800c3b4 <HAL_ADC_MspInit+0x2b0>)
 800c31c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800c31e:	4b24      	ldr	r3, [pc, #144]	; (800c3b0 <HAL_ADC_MspInit+0x2ac>)
 800c320:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c324:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c326:	4b22      	ldr	r3, [pc, #136]	; (800c3b0 <HAL_ADC_MspInit+0x2ac>)
 800c328:	2200      	movs	r2, #0
 800c32a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800c32c:	4b20      	ldr	r3, [pc, #128]	; (800c3b0 <HAL_ADC_MspInit+0x2ac>)
 800c32e:	2200      	movs	r2, #0
 800c330:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800c332:	4b1f      	ldr	r3, [pc, #124]	; (800c3b0 <HAL_ADC_MspInit+0x2ac>)
 800c334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c338:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c33a:	4b1d      	ldr	r3, [pc, #116]	; (800c3b0 <HAL_ADC_MspInit+0x2ac>)
 800c33c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c340:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c342:	4b1b      	ldr	r3, [pc, #108]	; (800c3b0 <HAL_ADC_MspInit+0x2ac>)
 800c344:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c348:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800c34a:	4b19      	ldr	r3, [pc, #100]	; (800c3b0 <HAL_ADC_MspInit+0x2ac>)
 800c34c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c350:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800c352:	4b17      	ldr	r3, [pc, #92]	; (800c3b0 <HAL_ADC_MspInit+0x2ac>)
 800c354:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c358:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c35a:	4b15      	ldr	r3, [pc, #84]	; (800c3b0 <HAL_ADC_MspInit+0x2ac>)
 800c35c:	2200      	movs	r2, #0
 800c35e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800c360:	4813      	ldr	r0, [pc, #76]	; (800c3b0 <HAL_ADC_MspInit+0x2ac>)
 800c362:	f7f6 fc29 	bl	8002bb8 <HAL_DMA_Init>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <HAL_ADC_MspInit+0x26c>
      Error_Handler();
 800c36c:	f7ff fe9a 	bl	800c0a4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4a0f      	ldr	r2, [pc, #60]	; (800c3b0 <HAL_ADC_MspInit+0x2ac>)
 800c374:	639a      	str	r2, [r3, #56]	; 0x38
 800c376:	4a0e      	ldr	r2, [pc, #56]	; (800c3b0 <HAL_ADC_MspInit+0x2ac>)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c37c:	2200      	movs	r2, #0
 800c37e:	2100      	movs	r1, #0
 800c380:	2012      	movs	r0, #18
 800c382:	f7f6 fbe2 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c386:	2012      	movs	r0, #18
 800c388:	f7f6 fbfb 	bl	8002b82 <HAL_NVIC_EnableIRQ>
}
 800c38c:	e095      	b.n	800c4ba <HAL_ADC_MspInit+0x3b6>
 800c38e:	bf00      	nop
 800c390:	40012000 	.word	0x40012000
 800c394:	40023800 	.word	0x40023800
 800c398:	40020800 	.word	0x40020800
 800c39c:	40020000 	.word	0x40020000
 800c3a0:	40020400 	.word	0x40020400
 800c3a4:	20000d40 	.word	0x20000d40
 800c3a8:	40026410 	.word	0x40026410
 800c3ac:	40012100 	.word	0x40012100
 800c3b0:	20001a7c 	.word	0x20001a7c
 800c3b4:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a41      	ldr	r2, [pc, #260]	; (800c4c4 <HAL_ADC_MspInit+0x3c0>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d17b      	bne.n	800c4ba <HAL_ADC_MspInit+0x3b6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	613b      	str	r3, [r7, #16]
 800c3c6:	4b40      	ldr	r3, [pc, #256]	; (800c4c8 <HAL_ADC_MspInit+0x3c4>)
 800c3c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ca:	4a3f      	ldr	r2, [pc, #252]	; (800c4c8 <HAL_ADC_MspInit+0x3c4>)
 800c3cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c3d0:	6453      	str	r3, [r2, #68]	; 0x44
 800c3d2:	4b3d      	ldr	r3, [pc, #244]	; (800c4c8 <HAL_ADC_MspInit+0x3c4>)
 800c3d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3da:	613b      	str	r3, [r7, #16]
 800c3dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c3de:	2300      	movs	r3, #0
 800c3e0:	60fb      	str	r3, [r7, #12]
 800c3e2:	4b39      	ldr	r3, [pc, #228]	; (800c4c8 <HAL_ADC_MspInit+0x3c4>)
 800c3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e6:	4a38      	ldr	r2, [pc, #224]	; (800c4c8 <HAL_ADC_MspInit+0x3c4>)
 800c3e8:	f043 0304 	orr.w	r3, r3, #4
 800c3ec:	6313      	str	r3, [r2, #48]	; 0x30
 800c3ee:	4b36      	ldr	r3, [pc, #216]	; (800c4c8 <HAL_ADC_MspInit+0x3c4>)
 800c3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3f2:	f003 0304 	and.w	r3, r3, #4
 800c3f6:	60fb      	str	r3, [r7, #12]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	60bb      	str	r3, [r7, #8]
 800c3fe:	4b32      	ldr	r3, [pc, #200]	; (800c4c8 <HAL_ADC_MspInit+0x3c4>)
 800c400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c402:	4a31      	ldr	r2, [pc, #196]	; (800c4c8 <HAL_ADC_MspInit+0x3c4>)
 800c404:	f043 0301 	orr.w	r3, r3, #1
 800c408:	6313      	str	r3, [r2, #48]	; 0x30
 800c40a:	4b2f      	ldr	r3, [pc, #188]	; (800c4c8 <HAL_ADC_MspInit+0x3c4>)
 800c40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c40e:	f003 0301 	and.w	r3, r3, #1
 800c412:	60bb      	str	r3, [r7, #8]
 800c414:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c416:	2308      	movs	r3, #8
 800c418:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c41a:	2303      	movs	r3, #3
 800c41c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c41e:	2300      	movs	r3, #0
 800c420:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c422:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c426:	4619      	mov	r1, r3
 800c428:	4828      	ldr	r0, [pc, #160]	; (800c4cc <HAL_ADC_MspInit+0x3c8>)
 800c42a:	f7f6 ffa9 	bl	8003380 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c42e:	2308      	movs	r3, #8
 800c430:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c432:	2303      	movs	r3, #3
 800c434:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c436:	2300      	movs	r3, #0
 800c438:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c43a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c43e:	4619      	mov	r1, r3
 800c440:	4823      	ldr	r0, [pc, #140]	; (800c4d0 <HAL_ADC_MspInit+0x3cc>)
 800c442:	f7f6 ff9d 	bl	8003380 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800c446:	4b23      	ldr	r3, [pc, #140]	; (800c4d4 <HAL_ADC_MspInit+0x3d0>)
 800c448:	4a23      	ldr	r2, [pc, #140]	; (800c4d8 <HAL_ADC_MspInit+0x3d4>)
 800c44a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800c44c:	4b21      	ldr	r3, [pc, #132]	; (800c4d4 <HAL_ADC_MspInit+0x3d0>)
 800c44e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c452:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c454:	4b1f      	ldr	r3, [pc, #124]	; (800c4d4 <HAL_ADC_MspInit+0x3d0>)
 800c456:	2200      	movs	r2, #0
 800c458:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800c45a:	4b1e      	ldr	r3, [pc, #120]	; (800c4d4 <HAL_ADC_MspInit+0x3d0>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800c460:	4b1c      	ldr	r3, [pc, #112]	; (800c4d4 <HAL_ADC_MspInit+0x3d0>)
 800c462:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c466:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c468:	4b1a      	ldr	r3, [pc, #104]	; (800c4d4 <HAL_ADC_MspInit+0x3d0>)
 800c46a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c46e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c470:	4b18      	ldr	r3, [pc, #96]	; (800c4d4 <HAL_ADC_MspInit+0x3d0>)
 800c472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c476:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800c478:	4b16      	ldr	r3, [pc, #88]	; (800c4d4 <HAL_ADC_MspInit+0x3d0>)
 800c47a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c47e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800c480:	4b14      	ldr	r3, [pc, #80]	; (800c4d4 <HAL_ADC_MspInit+0x3d0>)
 800c482:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c486:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c488:	4b12      	ldr	r3, [pc, #72]	; (800c4d4 <HAL_ADC_MspInit+0x3d0>)
 800c48a:	2200      	movs	r2, #0
 800c48c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800c48e:	4811      	ldr	r0, [pc, #68]	; (800c4d4 <HAL_ADC_MspInit+0x3d0>)
 800c490:	f7f6 fb92 	bl	8002bb8 <HAL_DMA_Init>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <HAL_ADC_MspInit+0x39a>
      Error_Handler();
 800c49a:	f7ff fe03 	bl	800c0a4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4a0c      	ldr	r2, [pc, #48]	; (800c4d4 <HAL_ADC_MspInit+0x3d0>)
 800c4a2:	639a      	str	r2, [r3, #56]	; 0x38
 800c4a4:	4a0b      	ldr	r2, [pc, #44]	; (800c4d4 <HAL_ADC_MspInit+0x3d0>)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	2012      	movs	r0, #18
 800c4b0:	f7f6 fb4b 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c4b4:	2012      	movs	r0, #18
 800c4b6:	f7f6 fb64 	bl	8002b82 <HAL_NVIC_EnableIRQ>
}
 800c4ba:	bf00      	nop
 800c4bc:	3748      	adds	r7, #72	; 0x48
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	40012200 	.word	0x40012200
 800c4c8:	40023800 	.word	0x40023800
 800c4cc:	40020800 	.word	0x40020800
 800c4d0:	40020000 	.word	0x40020000
 800c4d4:	20000ac8 	.word	0x20000ac8
 800c4d8:	40026428 	.word	0x40026428

0800c4dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b08a      	sub	sp, #40	; 0x28
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4e4:	f107 0314 	add.w	r3, r7, #20
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	601a      	str	r2, [r3, #0]
 800c4ec:	605a      	str	r2, [r3, #4]
 800c4ee:	609a      	str	r2, [r3, #8]
 800c4f0:	60da      	str	r2, [r3, #12]
 800c4f2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a1d      	ldr	r2, [pc, #116]	; (800c570 <HAL_CAN_MspInit+0x94>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d133      	bne.n	800c566 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800c4fe:	2300      	movs	r3, #0
 800c500:	613b      	str	r3, [r7, #16]
 800c502:	4b1c      	ldr	r3, [pc, #112]	; (800c574 <HAL_CAN_MspInit+0x98>)
 800c504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c506:	4a1b      	ldr	r2, [pc, #108]	; (800c574 <HAL_CAN_MspInit+0x98>)
 800c508:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c50c:	6413      	str	r3, [r2, #64]	; 0x40
 800c50e:	4b19      	ldr	r3, [pc, #100]	; (800c574 <HAL_CAN_MspInit+0x98>)
 800c510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c516:	613b      	str	r3, [r7, #16]
 800c518:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c51a:	2300      	movs	r3, #0
 800c51c:	60fb      	str	r3, [r7, #12]
 800c51e:	4b15      	ldr	r3, [pc, #84]	; (800c574 <HAL_CAN_MspInit+0x98>)
 800c520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c522:	4a14      	ldr	r2, [pc, #80]	; (800c574 <HAL_CAN_MspInit+0x98>)
 800c524:	f043 0308 	orr.w	r3, r3, #8
 800c528:	6313      	str	r3, [r2, #48]	; 0x30
 800c52a:	4b12      	ldr	r3, [pc, #72]	; (800c574 <HAL_CAN_MspInit+0x98>)
 800c52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c52e:	f003 0308 	and.w	r3, r3, #8
 800c532:	60fb      	str	r3, [r7, #12]
 800c534:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800c536:	2303      	movs	r3, #3
 800c538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c53a:	2302      	movs	r3, #2
 800c53c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c53e:	2300      	movs	r3, #0
 800c540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c542:	2303      	movs	r3, #3
 800c544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800c546:	2309      	movs	r3, #9
 800c548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c54a:	f107 0314 	add.w	r3, r7, #20
 800c54e:	4619      	mov	r1, r3
 800c550:	4809      	ldr	r0, [pc, #36]	; (800c578 <HAL_CAN_MspInit+0x9c>)
 800c552:	f7f6 ff15 	bl	8003380 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800c556:	2200      	movs	r2, #0
 800c558:	2100      	movs	r1, #0
 800c55a:	2014      	movs	r0, #20
 800c55c:	f7f6 faf5 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800c560:	2014      	movs	r0, #20
 800c562:	f7f6 fb0e 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800c566:	bf00      	nop
 800c568:	3728      	adds	r7, #40	; 0x28
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	40006400 	.word	0x40006400
 800c574:	40023800 	.word	0x40023800
 800c578:	40020c00 	.word	0x40020c00

0800c57c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b08c      	sub	sp, #48	; 0x30
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c584:	f107 031c 	add.w	r3, r7, #28
 800c588:	2200      	movs	r2, #0
 800c58a:	601a      	str	r2, [r3, #0]
 800c58c:	605a      	str	r2, [r3, #4]
 800c58e:	609a      	str	r2, [r3, #8]
 800c590:	60da      	str	r2, [r3, #12]
 800c592:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a32      	ldr	r2, [pc, #200]	; (800c664 <HAL_I2C_MspInit+0xe8>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d12c      	bne.n	800c5f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c59e:	2300      	movs	r3, #0
 800c5a0:	61bb      	str	r3, [r7, #24]
 800c5a2:	4b31      	ldr	r3, [pc, #196]	; (800c668 <HAL_I2C_MspInit+0xec>)
 800c5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5a6:	4a30      	ldr	r2, [pc, #192]	; (800c668 <HAL_I2C_MspInit+0xec>)
 800c5a8:	f043 0302 	orr.w	r3, r3, #2
 800c5ac:	6313      	str	r3, [r2, #48]	; 0x30
 800c5ae:	4b2e      	ldr	r3, [pc, #184]	; (800c668 <HAL_I2C_MspInit+0xec>)
 800c5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5b2:	f003 0302 	and.w	r3, r3, #2
 800c5b6:	61bb      	str	r3, [r7, #24]
 800c5b8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c5ba:	23c0      	movs	r3, #192	; 0xc0
 800c5bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c5be:	2312      	movs	r3, #18
 800c5c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800c5ca:	2304      	movs	r3, #4
 800c5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c5ce:	f107 031c 	add.w	r3, r7, #28
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	4825      	ldr	r0, [pc, #148]	; (800c66c <HAL_I2C_MspInit+0xf0>)
 800c5d6:	f7f6 fed3 	bl	8003380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c5da:	2300      	movs	r3, #0
 800c5dc:	617b      	str	r3, [r7, #20]
 800c5de:	4b22      	ldr	r3, [pc, #136]	; (800c668 <HAL_I2C_MspInit+0xec>)
 800c5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e2:	4a21      	ldr	r2, [pc, #132]	; (800c668 <HAL_I2C_MspInit+0xec>)
 800c5e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c5e8:	6413      	str	r3, [r2, #64]	; 0x40
 800c5ea:	4b1f      	ldr	r3, [pc, #124]	; (800c668 <HAL_I2C_MspInit+0xec>)
 800c5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c5f2:	617b      	str	r3, [r7, #20]
 800c5f4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800c5f6:	e031      	b.n	800c65c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a1c      	ldr	r2, [pc, #112]	; (800c670 <HAL_I2C_MspInit+0xf4>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d12c      	bne.n	800c65c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c602:	2300      	movs	r3, #0
 800c604:	613b      	str	r3, [r7, #16]
 800c606:	4b18      	ldr	r3, [pc, #96]	; (800c668 <HAL_I2C_MspInit+0xec>)
 800c608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c60a:	4a17      	ldr	r2, [pc, #92]	; (800c668 <HAL_I2C_MspInit+0xec>)
 800c60c:	f043 0302 	orr.w	r3, r3, #2
 800c610:	6313      	str	r3, [r2, #48]	; 0x30
 800c612:	4b15      	ldr	r3, [pc, #84]	; (800c668 <HAL_I2C_MspInit+0xec>)
 800c614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c616:	f003 0302 	and.w	r3, r3, #2
 800c61a:	613b      	str	r3, [r7, #16]
 800c61c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c61e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c624:	2312      	movs	r3, #18
 800c626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c628:	2301      	movs	r3, #1
 800c62a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c62c:	2303      	movs	r3, #3
 800c62e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800c630:	2304      	movs	r3, #4
 800c632:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c634:	f107 031c 	add.w	r3, r7, #28
 800c638:	4619      	mov	r1, r3
 800c63a:	480c      	ldr	r0, [pc, #48]	; (800c66c <HAL_I2C_MspInit+0xf0>)
 800c63c:	f7f6 fea0 	bl	8003380 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c640:	2300      	movs	r3, #0
 800c642:	60fb      	str	r3, [r7, #12]
 800c644:	4b08      	ldr	r3, [pc, #32]	; (800c668 <HAL_I2C_MspInit+0xec>)
 800c646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c648:	4a07      	ldr	r2, [pc, #28]	; (800c668 <HAL_I2C_MspInit+0xec>)
 800c64a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c64e:	6413      	str	r3, [r2, #64]	; 0x40
 800c650:	4b05      	ldr	r3, [pc, #20]	; (800c668 <HAL_I2C_MspInit+0xec>)
 800c652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c658:	60fb      	str	r3, [r7, #12]
 800c65a:	68fb      	ldr	r3, [r7, #12]
}
 800c65c:	bf00      	nop
 800c65e:	3730      	adds	r7, #48	; 0x30
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	40005400 	.word	0x40005400
 800c668:	40023800 	.word	0x40023800
 800c66c:	40020400 	.word	0x40020400
 800c670:	40005800 	.word	0x40005800

0800c674 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a05      	ldr	r2, [pc, #20]	; (800c698 <HAL_RTC_MspInit+0x24>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d102      	bne.n	800c68c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c686:	4b05      	ldr	r3, [pc, #20]	; (800c69c <HAL_RTC_MspInit+0x28>)
 800c688:	2201      	movs	r2, #1
 800c68a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800c68c:	bf00      	nop
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr
 800c698:	40002800 	.word	0x40002800
 800c69c:	42470e3c 	.word	0x42470e3c

0800c6a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b08a      	sub	sp, #40	; 0x28
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6a8:	f107 0314 	add.w	r3, r7, #20
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	601a      	str	r2, [r3, #0]
 800c6b0:	605a      	str	r2, [r3, #4]
 800c6b2:	609a      	str	r2, [r3, #8]
 800c6b4:	60da      	str	r2, [r3, #12]
 800c6b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a1d      	ldr	r2, [pc, #116]	; (800c734 <HAL_SPI_MspInit+0x94>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d134      	bne.n	800c72c <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	613b      	str	r3, [r7, #16]
 800c6c6:	4b1c      	ldr	r3, [pc, #112]	; (800c738 <HAL_SPI_MspInit+0x98>)
 800c6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ca:	4a1b      	ldr	r2, [pc, #108]	; (800c738 <HAL_SPI_MspInit+0x98>)
 800c6cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c6d0:	6413      	str	r3, [r2, #64]	; 0x40
 800c6d2:	4b19      	ldr	r3, [pc, #100]	; (800c738 <HAL_SPI_MspInit+0x98>)
 800c6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6da:	613b      	str	r3, [r7, #16]
 800c6dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c6de:	2300      	movs	r3, #0
 800c6e0:	60fb      	str	r3, [r7, #12]
 800c6e2:	4b15      	ldr	r3, [pc, #84]	; (800c738 <HAL_SPI_MspInit+0x98>)
 800c6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e6:	4a14      	ldr	r2, [pc, #80]	; (800c738 <HAL_SPI_MspInit+0x98>)
 800c6e8:	f043 0302 	orr.w	r3, r3, #2
 800c6ec:	6313      	str	r3, [r2, #48]	; 0x30
 800c6ee:	4b12      	ldr	r3, [pc, #72]	; (800c738 <HAL_SPI_MspInit+0x98>)
 800c6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6f2:	f003 0302 	and.w	r3, r3, #2
 800c6f6:	60fb      	str	r3, [r7, #12]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800c6fa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800c6fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c700:	2302      	movs	r3, #2
 800c702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c704:	2300      	movs	r3, #0
 800c706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c708:	2303      	movs	r3, #3
 800c70a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c70c:	2305      	movs	r3, #5
 800c70e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c710:	f107 0314 	add.w	r3, r7, #20
 800c714:	4619      	mov	r1, r3
 800c716:	4809      	ldr	r0, [pc, #36]	; (800c73c <HAL_SPI_MspInit+0x9c>)
 800c718:	f7f6 fe32 	bl	8003380 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800c71c:	2200      	movs	r2, #0
 800c71e:	2100      	movs	r1, #0
 800c720:	2024      	movs	r0, #36	; 0x24
 800c722:	f7f6 fa12 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800c726:	2024      	movs	r0, #36	; 0x24
 800c728:	f7f6 fa2b 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800c72c:	bf00      	nop
 800c72e:	3728      	adds	r7, #40	; 0x28
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	40003800 	.word	0x40003800
 800c738:	40023800 	.word	0x40023800
 800c73c:	40020400 	.word	0x40020400

0800c740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b086      	sub	sp, #24
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a40      	ldr	r2, [pc, #256]	; (800c850 <HAL_TIM_Base_MspInit+0x110>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d12e      	bne.n	800c7b0 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c752:	2300      	movs	r3, #0
 800c754:	617b      	str	r3, [r7, #20]
 800c756:	4b3f      	ldr	r3, [pc, #252]	; (800c854 <HAL_TIM_Base_MspInit+0x114>)
 800c758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c75a:	4a3e      	ldr	r2, [pc, #248]	; (800c854 <HAL_TIM_Base_MspInit+0x114>)
 800c75c:	f043 0301 	orr.w	r3, r3, #1
 800c760:	6453      	str	r3, [r2, #68]	; 0x44
 800c762:	4b3c      	ldr	r3, [pc, #240]	; (800c854 <HAL_TIM_Base_MspInit+0x114>)
 800c764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c766:	f003 0301 	and.w	r3, r3, #1
 800c76a:	617b      	str	r3, [r7, #20]
 800c76c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800c76e:	2200      	movs	r2, #0
 800c770:	2100      	movs	r1, #0
 800c772:	2018      	movs	r0, #24
 800c774:	f7f6 f9e9 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800c778:	2018      	movs	r0, #24
 800c77a:	f7f6 fa02 	bl	8002b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800c77e:	2200      	movs	r2, #0
 800c780:	2100      	movs	r1, #0
 800c782:	2019      	movs	r0, #25
 800c784:	f7f6 f9e1 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800c788:	2019      	movs	r0, #25
 800c78a:	f7f6 f9fa 	bl	8002b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800c78e:	2200      	movs	r2, #0
 800c790:	2100      	movs	r1, #0
 800c792:	201a      	movs	r0, #26
 800c794:	f7f6 f9d9 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800c798:	201a      	movs	r0, #26
 800c79a:	f7f6 f9f2 	bl	8002b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800c79e:	2200      	movs	r2, #0
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	201b      	movs	r0, #27
 800c7a4:	f7f6 f9d1 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800c7a8:	201b      	movs	r0, #27
 800c7aa:	f7f6 f9ea 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800c7ae:	e04a      	b.n	800c846 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7b8:	d10e      	bne.n	800c7d8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	613b      	str	r3, [r7, #16]
 800c7be:	4b25      	ldr	r3, [pc, #148]	; (800c854 <HAL_TIM_Base_MspInit+0x114>)
 800c7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c2:	4a24      	ldr	r2, [pc, #144]	; (800c854 <HAL_TIM_Base_MspInit+0x114>)
 800c7c4:	f043 0301 	orr.w	r3, r3, #1
 800c7c8:	6413      	str	r3, [r2, #64]	; 0x40
 800c7ca:	4b22      	ldr	r3, [pc, #136]	; (800c854 <HAL_TIM_Base_MspInit+0x114>)
 800c7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ce:	f003 0301 	and.w	r3, r3, #1
 800c7d2:	613b      	str	r3, [r7, #16]
 800c7d4:	693b      	ldr	r3, [r7, #16]
}
 800c7d6:	e036      	b.n	800c846 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a1e      	ldr	r2, [pc, #120]	; (800c858 <HAL_TIM_Base_MspInit+0x118>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d116      	bne.n	800c810 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	60fb      	str	r3, [r7, #12]
 800c7e6:	4b1b      	ldr	r3, [pc, #108]	; (800c854 <HAL_TIM_Base_MspInit+0x114>)
 800c7e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ea:	4a1a      	ldr	r2, [pc, #104]	; (800c854 <HAL_TIM_Base_MspInit+0x114>)
 800c7ec:	f043 0308 	orr.w	r3, r3, #8
 800c7f0:	6413      	str	r3, [r2, #64]	; 0x40
 800c7f2:	4b18      	ldr	r3, [pc, #96]	; (800c854 <HAL_TIM_Base_MspInit+0x114>)
 800c7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7f6:	f003 0308 	and.w	r3, r3, #8
 800c7fa:	60fb      	str	r3, [r7, #12]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800c7fe:	2200      	movs	r2, #0
 800c800:	2100      	movs	r1, #0
 800c802:	2032      	movs	r0, #50	; 0x32
 800c804:	f7f6 f9a1 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800c808:	2032      	movs	r0, #50	; 0x32
 800c80a:	f7f6 f9ba 	bl	8002b82 <HAL_NVIC_EnableIRQ>
}
 800c80e:	e01a      	b.n	800c846 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM9)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a11      	ldr	r2, [pc, #68]	; (800c85c <HAL_TIM_Base_MspInit+0x11c>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d115      	bne.n	800c846 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800c81a:	2300      	movs	r3, #0
 800c81c:	60bb      	str	r3, [r7, #8]
 800c81e:	4b0d      	ldr	r3, [pc, #52]	; (800c854 <HAL_TIM_Base_MspInit+0x114>)
 800c820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c822:	4a0c      	ldr	r2, [pc, #48]	; (800c854 <HAL_TIM_Base_MspInit+0x114>)
 800c824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c828:	6453      	str	r3, [r2, #68]	; 0x44
 800c82a:	4b0a      	ldr	r3, [pc, #40]	; (800c854 <HAL_TIM_Base_MspInit+0x114>)
 800c82c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c82e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c832:	60bb      	str	r3, [r7, #8]
 800c834:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800c836:	2200      	movs	r2, #0
 800c838:	2100      	movs	r1, #0
 800c83a:	2018      	movs	r0, #24
 800c83c:	f7f6 f985 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800c840:	2018      	movs	r0, #24
 800c842:	f7f6 f99e 	bl	8002b82 <HAL_NVIC_EnableIRQ>
}
 800c846:	bf00      	nop
 800c848:	3718      	adds	r7, #24
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	40010000 	.word	0x40010000
 800c854:	40023800 	.word	0x40023800
 800c858:	40000c00 	.word	0x40000c00
 800c85c:	40014000 	.word	0x40014000

0800c860 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b08a      	sub	sp, #40	; 0x28
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c868:	f107 0314 	add.w	r3, r7, #20
 800c86c:	2200      	movs	r2, #0
 800c86e:	601a      	str	r2, [r3, #0]
 800c870:	605a      	str	r2, [r3, #4]
 800c872:	609a      	str	r2, [r3, #8]
 800c874:	60da      	str	r2, [r3, #12]
 800c876:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a29      	ldr	r2, [pc, #164]	; (800c924 <HAL_TIM_Encoder_MspInit+0xc4>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d14b      	bne.n	800c91a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800c882:	2300      	movs	r3, #0
 800c884:	613b      	str	r3, [r7, #16]
 800c886:	4b28      	ldr	r3, [pc, #160]	; (800c928 <HAL_TIM_Encoder_MspInit+0xc8>)
 800c888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c88a:	4a27      	ldr	r2, [pc, #156]	; (800c928 <HAL_TIM_Encoder_MspInit+0xc8>)
 800c88c:	f043 0302 	orr.w	r3, r3, #2
 800c890:	6453      	str	r3, [r2, #68]	; 0x44
 800c892:	4b25      	ldr	r3, [pc, #148]	; (800c928 <HAL_TIM_Encoder_MspInit+0xc8>)
 800c894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c896:	f003 0302 	and.w	r3, r3, #2
 800c89a:	613b      	str	r3, [r7, #16]
 800c89c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c89e:	2300      	movs	r3, #0
 800c8a0:	60fb      	str	r3, [r7, #12]
 800c8a2:	4b21      	ldr	r3, [pc, #132]	; (800c928 <HAL_TIM_Encoder_MspInit+0xc8>)
 800c8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8a6:	4a20      	ldr	r2, [pc, #128]	; (800c928 <HAL_TIM_Encoder_MspInit+0xc8>)
 800c8a8:	f043 0304 	orr.w	r3, r3, #4
 800c8ac:	6313      	str	r3, [r2, #48]	; 0x30
 800c8ae:	4b1e      	ldr	r3, [pc, #120]	; (800c928 <HAL_TIM_Encoder_MspInit+0xc8>)
 800c8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8b2:	f003 0304 	and.w	r3, r3, #4
 800c8b6:	60fb      	str	r3, [r7, #12]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c8ba:	23c0      	movs	r3, #192	; 0xc0
 800c8bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8be:	2302      	movs	r3, #2
 800c8c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800c8ca:	2303      	movs	r3, #3
 800c8cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c8ce:	f107 0314 	add.w	r3, r7, #20
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	4815      	ldr	r0, [pc, #84]	; (800c92c <HAL_TIM_Encoder_MspInit+0xcc>)
 800c8d6:	f7f6 fd53 	bl	8003380 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800c8da:	2200      	movs	r2, #0
 800c8dc:	2100      	movs	r1, #0
 800c8de:	202b      	movs	r0, #43	; 0x2b
 800c8e0:	f7f6 f933 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800c8e4:	202b      	movs	r0, #43	; 0x2b
 800c8e6:	f7f6 f94c 	bl	8002b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	2100      	movs	r1, #0
 800c8ee:	202c      	movs	r0, #44	; 0x2c
 800c8f0:	f7f6 f92b 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800c8f4:	202c      	movs	r0, #44	; 0x2c
 800c8f6:	f7f6 f944 	bl	8002b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	202d      	movs	r0, #45	; 0x2d
 800c900:	f7f6 f923 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800c904:	202d      	movs	r0, #45	; 0x2d
 800c906:	f7f6 f93c 	bl	8002b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800c90a:	2200      	movs	r2, #0
 800c90c:	2100      	movs	r1, #0
 800c90e:	202e      	movs	r0, #46	; 0x2e
 800c910:	f7f6 f91b 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800c914:	202e      	movs	r0, #46	; 0x2e
 800c916:	f7f6 f934 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800c91a:	bf00      	nop
 800c91c:	3728      	adds	r7, #40	; 0x28
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	40010400 	.word	0x40010400
 800c928:	40023800 	.word	0x40023800
 800c92c:	40020800 	.word	0x40020800

0800c930 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b08a      	sub	sp, #40	; 0x28
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c938:	f107 0314 	add.w	r3, r7, #20
 800c93c:	2200      	movs	r2, #0
 800c93e:	601a      	str	r2, [r3, #0]
 800c940:	605a      	str	r2, [r3, #4]
 800c942:	609a      	str	r2, [r3, #8]
 800c944:	60da      	str	r2, [r3, #12]
 800c946:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a24      	ldr	r2, [pc, #144]	; (800c9e0 <HAL_TIM_MspPostInit+0xb0>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d11f      	bne.n	800c992 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c952:	2300      	movs	r3, #0
 800c954:	613b      	str	r3, [r7, #16]
 800c956:	4b23      	ldr	r3, [pc, #140]	; (800c9e4 <HAL_TIM_MspPostInit+0xb4>)
 800c958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c95a:	4a22      	ldr	r2, [pc, #136]	; (800c9e4 <HAL_TIM_MspPostInit+0xb4>)
 800c95c:	f043 0310 	orr.w	r3, r3, #16
 800c960:	6313      	str	r3, [r2, #48]	; 0x30
 800c962:	4b20      	ldr	r3, [pc, #128]	; (800c9e4 <HAL_TIM_MspPostInit+0xb4>)
 800c964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c966:	f003 0310 	and.w	r3, r3, #16
 800c96a:	613b      	str	r3, [r7, #16]
 800c96c:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800c96e:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 800c972:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c974:	2302      	movs	r3, #2
 800c976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c978:	2300      	movs	r3, #0
 800c97a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c97c:	2300      	movs	r3, #0
 800c97e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800c980:	2301      	movs	r3, #1
 800c982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c984:	f107 0314 	add.w	r3, r7, #20
 800c988:	4619      	mov	r1, r3
 800c98a:	4817      	ldr	r0, [pc, #92]	; (800c9e8 <HAL_TIM_MspPostInit+0xb8>)
 800c98c:	f7f6 fcf8 	bl	8003380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800c990:	e022      	b.n	800c9d8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4a15      	ldr	r2, [pc, #84]	; (800c9ec <HAL_TIM_MspPostInit+0xbc>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d11d      	bne.n	800c9d8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c99c:	2300      	movs	r3, #0
 800c99e:	60fb      	str	r3, [r7, #12]
 800c9a0:	4b10      	ldr	r3, [pc, #64]	; (800c9e4 <HAL_TIM_MspPostInit+0xb4>)
 800c9a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a4:	4a0f      	ldr	r2, [pc, #60]	; (800c9e4 <HAL_TIM_MspPostInit+0xb4>)
 800c9a6:	f043 0310 	orr.w	r3, r3, #16
 800c9aa:	6313      	str	r3, [r2, #48]	; 0x30
 800c9ac:	4b0d      	ldr	r3, [pc, #52]	; (800c9e4 <HAL_TIM_MspPostInit+0xb4>)
 800c9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b0:	f003 0310 	and.w	r3, r3, #16
 800c9b4:	60fb      	str	r3, [r7, #12]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800c9b8:	2360      	movs	r3, #96	; 0x60
 800c9ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9bc:	2302      	movs	r3, #2
 800c9be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800c9c8:	2303      	movs	r3, #3
 800c9ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c9cc:	f107 0314 	add.w	r3, r7, #20
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	4805      	ldr	r0, [pc, #20]	; (800c9e8 <HAL_TIM_MspPostInit+0xb8>)
 800c9d4:	f7f6 fcd4 	bl	8003380 <HAL_GPIO_Init>
}
 800c9d8:	bf00      	nop
 800c9da:	3728      	adds	r7, #40	; 0x28
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	40010000 	.word	0x40010000
 800c9e4:	40023800 	.word	0x40023800
 800c9e8:	40021000 	.word	0x40021000
 800c9ec:	40014000 	.word	0x40014000

0800c9f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b08a      	sub	sp, #40	; 0x28
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9f8:	f107 0314 	add.w	r3, r7, #20
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	605a      	str	r2, [r3, #4]
 800ca02:	609a      	str	r2, [r3, #8]
 800ca04:	60da      	str	r2, [r3, #12]
 800ca06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a34      	ldr	r2, [pc, #208]	; (800cae0 <HAL_UART_MspInit+0xf0>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d162      	bne.n	800cad8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800ca12:	2300      	movs	r3, #0
 800ca14:	613b      	str	r3, [r7, #16]
 800ca16:	4b33      	ldr	r3, [pc, #204]	; (800cae4 <HAL_UART_MspInit+0xf4>)
 800ca18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca1a:	4a32      	ldr	r2, [pc, #200]	; (800cae4 <HAL_UART_MspInit+0xf4>)
 800ca1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca20:	6413      	str	r3, [r2, #64]	; 0x40
 800ca22:	4b30      	ldr	r3, [pc, #192]	; (800cae4 <HAL_UART_MspInit+0xf4>)
 800ca24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca2a:	613b      	str	r3, [r7, #16]
 800ca2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60fb      	str	r3, [r7, #12]
 800ca32:	4b2c      	ldr	r3, [pc, #176]	; (800cae4 <HAL_UART_MspInit+0xf4>)
 800ca34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca36:	4a2b      	ldr	r2, [pc, #172]	; (800cae4 <HAL_UART_MspInit+0xf4>)
 800ca38:	f043 0308 	orr.w	r3, r3, #8
 800ca3c:	6313      	str	r3, [r2, #48]	; 0x30
 800ca3e:	4b29      	ldr	r3, [pc, #164]	; (800cae4 <HAL_UART_MspInit+0xf4>)
 800ca40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca42:	f003 0308 	and.w	r3, r3, #8
 800ca46:	60fb      	str	r3, [r7, #12]
 800ca48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ca4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ca4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca50:	2302      	movs	r3, #2
 800ca52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ca54:	2301      	movs	r3, #1
 800ca56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca58:	2303      	movs	r3, #3
 800ca5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ca5c:	2307      	movs	r3, #7
 800ca5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ca60:	f107 0314 	add.w	r3, r7, #20
 800ca64:	4619      	mov	r1, r3
 800ca66:	4820      	ldr	r0, [pc, #128]	; (800cae8 <HAL_UART_MspInit+0xf8>)
 800ca68:	f7f6 fc8a 	bl	8003380 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800ca6c:	4b1f      	ldr	r3, [pc, #124]	; (800caec <HAL_UART_MspInit+0xfc>)
 800ca6e:	4a20      	ldr	r2, [pc, #128]	; (800caf0 <HAL_UART_MspInit+0x100>)
 800ca70:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800ca72:	4b1e      	ldr	r3, [pc, #120]	; (800caec <HAL_UART_MspInit+0xfc>)
 800ca74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ca78:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ca7a:	4b1c      	ldr	r3, [pc, #112]	; (800caec <HAL_UART_MspInit+0xfc>)
 800ca7c:	2240      	movs	r2, #64	; 0x40
 800ca7e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ca80:	4b1a      	ldr	r3, [pc, #104]	; (800caec <HAL_UART_MspInit+0xfc>)
 800ca82:	2200      	movs	r2, #0
 800ca84:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ca86:	4b19      	ldr	r3, [pc, #100]	; (800caec <HAL_UART_MspInit+0xfc>)
 800ca88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ca8c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ca8e:	4b17      	ldr	r3, [pc, #92]	; (800caec <HAL_UART_MspInit+0xfc>)
 800ca90:	2200      	movs	r2, #0
 800ca92:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ca94:	4b15      	ldr	r3, [pc, #84]	; (800caec <HAL_UART_MspInit+0xfc>)
 800ca96:	2200      	movs	r2, #0
 800ca98:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800ca9a:	4b14      	ldr	r3, [pc, #80]	; (800caec <HAL_UART_MspInit+0xfc>)
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800caa0:	4b12      	ldr	r3, [pc, #72]	; (800caec <HAL_UART_MspInit+0xfc>)
 800caa2:	2200      	movs	r2, #0
 800caa4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800caa6:	4b11      	ldr	r3, [pc, #68]	; (800caec <HAL_UART_MspInit+0xfc>)
 800caa8:	2200      	movs	r2, #0
 800caaa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800caac:	480f      	ldr	r0, [pc, #60]	; (800caec <HAL_UART_MspInit+0xfc>)
 800caae:	f7f6 f883 	bl	8002bb8 <HAL_DMA_Init>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d001      	beq.n	800cabc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800cab8:	f7ff faf4 	bl	800c0a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4a0b      	ldr	r2, [pc, #44]	; (800caec <HAL_UART_MspInit+0xfc>)
 800cac0:	631a      	str	r2, [r3, #48]	; 0x30
 800cac2:	4a0a      	ldr	r2, [pc, #40]	; (800caec <HAL_UART_MspInit+0xfc>)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800cac8:	2200      	movs	r2, #0
 800caca:	2100      	movs	r1, #0
 800cacc:	2027      	movs	r0, #39	; 0x27
 800cace:	f7f6 f83c 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800cad2:	2027      	movs	r0, #39	; 0x27
 800cad4:	f7f6 f855 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800cad8:	bf00      	nop
 800cada:	3728      	adds	r7, #40	; 0x28
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	40004800 	.word	0x40004800
 800cae4:	40023800 	.word	0x40023800
 800cae8:	40020c00 	.word	0x40020c00
 800caec:	20000b28 	.word	0x20000b28
 800caf0:	40026058 	.word	0x40026058

0800caf4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b08a      	sub	sp, #40	; 0x28
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cafc:	f107 0314 	add.w	r3, r7, #20
 800cb00:	2200      	movs	r2, #0
 800cb02:	601a      	str	r2, [r3, #0]
 800cb04:	605a      	str	r2, [r3, #4]
 800cb06:	609a      	str	r2, [r3, #8]
 800cb08:	60da      	str	r2, [r3, #12]
 800cb0a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb14:	d132      	bne.n	800cb7c <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb16:	2300      	movs	r3, #0
 800cb18:	613b      	str	r3, [r7, #16]
 800cb1a:	4b1a      	ldr	r3, [pc, #104]	; (800cb84 <HAL_PCD_MspInit+0x90>)
 800cb1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb1e:	4a19      	ldr	r2, [pc, #100]	; (800cb84 <HAL_PCD_MspInit+0x90>)
 800cb20:	f043 0301 	orr.w	r3, r3, #1
 800cb24:	6313      	str	r3, [r2, #48]	; 0x30
 800cb26:	4b17      	ldr	r3, [pc, #92]	; (800cb84 <HAL_PCD_MspInit+0x90>)
 800cb28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb2a:	f003 0301 	and.w	r3, r3, #1
 800cb2e:	613b      	str	r3, [r7, #16]
 800cb30:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cb32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cb36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb38:	2302      	movs	r3, #2
 800cb3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb40:	2303      	movs	r3, #3
 800cb42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cb44:	230a      	movs	r3, #10
 800cb46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb48:	f107 0314 	add.w	r3, r7, #20
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	480e      	ldr	r0, [pc, #56]	; (800cb88 <HAL_PCD_MspInit+0x94>)
 800cb50:	f7f6 fc16 	bl	8003380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cb54:	4b0b      	ldr	r3, [pc, #44]	; (800cb84 <HAL_PCD_MspInit+0x90>)
 800cb56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb58:	4a0a      	ldr	r2, [pc, #40]	; (800cb84 <HAL_PCD_MspInit+0x90>)
 800cb5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb5e:	6353      	str	r3, [r2, #52]	; 0x34
 800cb60:	2300      	movs	r3, #0
 800cb62:	60fb      	str	r3, [r7, #12]
 800cb64:	4b07      	ldr	r3, [pc, #28]	; (800cb84 <HAL_PCD_MspInit+0x90>)
 800cb66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb68:	4a06      	ldr	r2, [pc, #24]	; (800cb84 <HAL_PCD_MspInit+0x90>)
 800cb6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cb6e:	6453      	str	r3, [r2, #68]	; 0x44
 800cb70:	4b04      	ldr	r3, [pc, #16]	; (800cb84 <HAL_PCD_MspInit+0x90>)
 800cb72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb78:	60fb      	str	r3, [r7, #12]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800cb7c:	bf00      	nop
 800cb7e:	3728      	adds	r7, #40	; 0x28
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	40023800 	.word	0x40023800
 800cb88:	40020000 	.word	0x40020000

0800cb8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800cb90:	bf00      	nop
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr

0800cb9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cb9a:	b480      	push	{r7}
 800cb9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cb9e:	e7fe      	b.n	800cb9e <HardFault_Handler+0x4>

0800cba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cba0:	b480      	push	{r7}
 800cba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cba4:	e7fe      	b.n	800cba4 <MemManage_Handler+0x4>

0800cba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cba6:	b480      	push	{r7}
 800cba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800cbaa:	e7fe      	b.n	800cbaa <BusFault_Handler+0x4>

0800cbac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800cbac:	b480      	push	{r7}
 800cbae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800cbb0:	e7fe      	b.n	800cbb0 <UsageFault_Handler+0x4>

0800cbb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800cbb2:	b480      	push	{r7}
 800cbb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800cbb6:	bf00      	nop
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cbc4:	bf00      	nop
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr

0800cbce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800cbce:	b480      	push	{r7}
 800cbd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cbd2:	bf00      	nop
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cbe0:	f7f4 fa04 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800cbe4:	bf00      	nop
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800cbec:	4802      	ldr	r0, [pc, #8]	; (800cbf8 <DMA1_Stream3_IRQHandler+0x10>)
 800cbee:	f7f6 f90b 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800cbf2:	bf00      	nop
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20000b28 	.word	0x20000b28

0800cbfc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800cc00:	4805      	ldr	r0, [pc, #20]	; (800cc18 <ADC_IRQHandler+0x1c>)
 800cc02:	f7f4 fa78 	bl	80010f6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800cc06:	4805      	ldr	r0, [pc, #20]	; (800cc1c <ADC_IRQHandler+0x20>)
 800cc08:	f7f4 fa75 	bl	80010f6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800cc0c:	4804      	ldr	r0, [pc, #16]	; (800cc20 <ADC_IRQHandler+0x24>)
 800cc0e:	f7f4 fa72 	bl	80010f6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800cc12:	bf00      	nop
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	20000cb0 	.word	0x20000cb0
 800cc1c:	200005c4 	.word	0x200005c4
 800cc20:	20000cf8 	.word	0x20000cf8

0800cc24 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800cc28:	4802      	ldr	r0, [pc, #8]	; (800cc34 <CAN1_RX0_IRQHandler+0x10>)
 800cc2a:	f7f5 fc7f 	bl	800252c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800cc2e:	bf00      	nop
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	20001adc 	.word	0x20001adc

0800cc38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800cc3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cc40:	f7f6 fd52 	bl	80036e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800cc44:	bf00      	nop
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cc4c:	4803      	ldr	r0, [pc, #12]	; (800cc5c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800cc4e:	f7f9 fd36 	bl	80066be <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800cc52:	4803      	ldr	r0, [pc, #12]	; (800cc60 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800cc54:	f7f9 fd33 	bl	80066be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800cc58:	bf00      	nop
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	20000dc0 	.word	0x20000dc0
 800cc60:	200017dc 	.word	0x200017dc

0800cc64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cc68:	4802      	ldr	r0, [pc, #8]	; (800cc74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800cc6a:	f7f9 fd28 	bl	80066be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800cc6e:	bf00      	nop
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	20000dc0 	.word	0x20000dc0

0800cc78 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cc7c:	4802      	ldr	r0, [pc, #8]	; (800cc88 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800cc7e:	f7f9 fd1e 	bl	80066be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800cc82:	bf00      	nop
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	20000dc0 	.word	0x20000dc0

0800cc8c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	//debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
	//debug1_out_GPIO_Port->BSRR = debug1_out_Pin << 16U; //takes 60ns == 5 clock cycles

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cc90:	4802      	ldr	r0, [pc, #8]	; (800cc9c <TIM1_CC_IRQHandler+0x10>)
 800cc92:	f7f9 fd14 	bl	80066be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800cc96:	bf00      	nop
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	20000dc0 	.word	0x20000dc0

0800cca0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800cca4:	4802      	ldr	r0, [pc, #8]	; (800ccb0 <SPI2_IRQHandler+0x10>)
 800cca6:	f7f9 f853 	bl	8005d50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800ccaa:	bf00      	nop
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	200001a4 	.word	0x200001a4

0800ccb4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800ccb8:	4802      	ldr	r0, [pc, #8]	; (800ccc4 <USART3_IRQHandler+0x10>)
 800ccba:	f7fa fce9 	bl	8007690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800ccbe:	bf00      	nop
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	20000584 	.word	0x20000584

0800ccc8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cccc:	4802      	ldr	r0, [pc, #8]	; (800ccd8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800ccce:	f7f9 fcf6 	bl	80066be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800ccd2:	bf00      	nop
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	20000544 	.word	0x20000544

0800ccdc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cce0:	4802      	ldr	r0, [pc, #8]	; (800ccec <TIM8_UP_TIM13_IRQHandler+0x10>)
 800cce2:	f7f9 fcec 	bl	80066be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800cce6:	bf00      	nop
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop
 800ccec:	20000544 	.word	0x20000544

0800ccf0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800ccf4:	4802      	ldr	r0, [pc, #8]	; (800cd00 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800ccf6:	f7f9 fce2 	bl	80066be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800ccfa:	bf00      	nop
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	20000544 	.word	0x20000544

0800cd04 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cd08:	4802      	ldr	r0, [pc, #8]	; (800cd14 <TIM8_CC_IRQHandler+0x10>)
 800cd0a:	f7f9 fcd8 	bl	80066be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800cd0e:	bf00      	nop
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	20000544 	.word	0x20000544

0800cd18 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800cd1c:	4802      	ldr	r0, [pc, #8]	; (800cd28 <TIM5_IRQHandler+0x10>)
 800cd1e:	f7f9 fcce 	bl	80066be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800cd22:	bf00      	nop
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	20000b88 	.word	0x20000b88

0800cd2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800cd30:	4802      	ldr	r0, [pc, #8]	; (800cd3c <DMA2_Stream0_IRQHandler+0x10>)
 800cd32:	f7f6 f869 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800cd36:	bf00      	nop
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	20000d40 	.word	0x20000d40

0800cd40 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800cd44:	4802      	ldr	r0, [pc, #8]	; (800cd50 <DMA2_Stream1_IRQHandler+0x10>)
 800cd46:	f7f6 f85f 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800cd4a:	bf00      	nop
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	20000ac8 	.word	0x20000ac8

0800cd54 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800cd58:	4802      	ldr	r0, [pc, #8]	; (800cd64 <DMA2_Stream2_IRQHandler+0x10>)
 800cd5a:	f7f6 f855 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800cd5e:	bf00      	nop
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	20001a7c 	.word	0x20001a7c

0800cd68 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800cd70:	4b11      	ldr	r3, [pc, #68]	; (800cdb8 <_sbrk+0x50>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d102      	bne.n	800cd7e <_sbrk+0x16>
		heap_end = &end;
 800cd78:	4b0f      	ldr	r3, [pc, #60]	; (800cdb8 <_sbrk+0x50>)
 800cd7a:	4a10      	ldr	r2, [pc, #64]	; (800cdbc <_sbrk+0x54>)
 800cd7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800cd7e:	4b0e      	ldr	r3, [pc, #56]	; (800cdb8 <_sbrk+0x50>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800cd84:	4b0c      	ldr	r3, [pc, #48]	; (800cdb8 <_sbrk+0x50>)
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	466a      	mov	r2, sp
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d907      	bls.n	800cda2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800cd92:	f000 f855 	bl	800ce40 <__errno>
 800cd96:	4602      	mov	r2, r0
 800cd98:	230c      	movs	r3, #12
 800cd9a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800cd9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cda0:	e006      	b.n	800cdb0 <_sbrk+0x48>
	}

	heap_end += incr;
 800cda2:	4b05      	ldr	r3, [pc, #20]	; (800cdb8 <_sbrk+0x50>)
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	4413      	add	r3, r2
 800cdaa:	4a03      	ldr	r2, [pc, #12]	; (800cdb8 <_sbrk+0x50>)
 800cdac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800cdae:	68fb      	ldr	r3, [r7, #12]
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3710      	adds	r7, #16
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	2000016c 	.word	0x2000016c
 800cdbc:	20002528 	.word	0x20002528

0800cdc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cdc4:	4b08      	ldr	r3, [pc, #32]	; (800cde8 <SystemInit+0x28>)
 800cdc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdca:	4a07      	ldr	r2, [pc, #28]	; (800cde8 <SystemInit+0x28>)
 800cdcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cdd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cdd4:	4b04      	ldr	r3, [pc, #16]	; (800cde8 <SystemInit+0x28>)
 800cdd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cdda:	609a      	str	r2, [r3, #8]
#endif
}
 800cddc:	bf00      	nop
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr
 800cde6:	bf00      	nop
 800cde8:	e000ed00 	.word	0xe000ed00

0800cdec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800cdec:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ce24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800cdf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800cdf2:	e003      	b.n	800cdfc <LoopCopyDataInit>

0800cdf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800cdf4:	4b0c      	ldr	r3, [pc, #48]	; (800ce28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800cdf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800cdf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800cdfa:	3104      	adds	r1, #4

0800cdfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800cdfc:	480b      	ldr	r0, [pc, #44]	; (800ce2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800cdfe:	4b0c      	ldr	r3, [pc, #48]	; (800ce30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ce00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ce02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ce04:	d3f6      	bcc.n	800cdf4 <CopyDataInit>
  ldr  r2, =_sbss
 800ce06:	4a0b      	ldr	r2, [pc, #44]	; (800ce34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ce08:	e002      	b.n	800ce10 <LoopFillZerobss>

0800ce0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ce0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ce0c:	f842 3b04 	str.w	r3, [r2], #4

0800ce10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ce10:	4b09      	ldr	r3, [pc, #36]	; (800ce38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ce12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ce14:	d3f9      	bcc.n	800ce0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ce16:	f7ff ffd3 	bl	800cdc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ce1a:	f000 f817 	bl	800ce4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ce1e:	f7fb fcaf 	bl	8008780 <main>
  bx  lr    
 800ce22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800ce24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800ce28:	0800ef28 	.word	0x0800ef28
  ldr  r0, =_sdata
 800ce2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ce30:	200000ac 	.word	0x200000ac
  ldr  r2, =_sbss
 800ce34:	200000ac 	.word	0x200000ac
  ldr  r3, = _ebss
 800ce38:	20002528 	.word	0x20002528

0800ce3c <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ce3c:	e7fe      	b.n	800ce3c <CAN1_RX1_IRQHandler>
	...

0800ce40 <__errno>:
 800ce40:	4b01      	ldr	r3, [pc, #4]	; (800ce48 <__errno+0x8>)
 800ce42:	6818      	ldr	r0, [r3, #0]
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	20000044 	.word	0x20000044

0800ce4c <__libc_init_array>:
 800ce4c:	b570      	push	{r4, r5, r6, lr}
 800ce4e:	4e0d      	ldr	r6, [pc, #52]	; (800ce84 <__libc_init_array+0x38>)
 800ce50:	4c0d      	ldr	r4, [pc, #52]	; (800ce88 <__libc_init_array+0x3c>)
 800ce52:	1ba4      	subs	r4, r4, r6
 800ce54:	10a4      	asrs	r4, r4, #2
 800ce56:	2500      	movs	r5, #0
 800ce58:	42a5      	cmp	r5, r4
 800ce5a:	d109      	bne.n	800ce70 <__libc_init_array+0x24>
 800ce5c:	4e0b      	ldr	r6, [pc, #44]	; (800ce8c <__libc_init_array+0x40>)
 800ce5e:	4c0c      	ldr	r4, [pc, #48]	; (800ce90 <__libc_init_array+0x44>)
 800ce60:	f001 fdd0 	bl	800ea04 <_init>
 800ce64:	1ba4      	subs	r4, r4, r6
 800ce66:	10a4      	asrs	r4, r4, #2
 800ce68:	2500      	movs	r5, #0
 800ce6a:	42a5      	cmp	r5, r4
 800ce6c:	d105      	bne.n	800ce7a <__libc_init_array+0x2e>
 800ce6e:	bd70      	pop	{r4, r5, r6, pc}
 800ce70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce74:	4798      	blx	r3
 800ce76:	3501      	adds	r5, #1
 800ce78:	e7ee      	b.n	800ce58 <__libc_init_array+0xc>
 800ce7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce7e:	4798      	blx	r3
 800ce80:	3501      	adds	r5, #1
 800ce82:	e7f2      	b.n	800ce6a <__libc_init_array+0x1e>
 800ce84:	0800ef20 	.word	0x0800ef20
 800ce88:	0800ef20 	.word	0x0800ef20
 800ce8c:	0800ef20 	.word	0x0800ef20
 800ce90:	0800ef24 	.word	0x0800ef24

0800ce94 <memset>:
 800ce94:	4402      	add	r2, r0
 800ce96:	4603      	mov	r3, r0
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d100      	bne.n	800ce9e <memset+0xa>
 800ce9c:	4770      	bx	lr
 800ce9e:	f803 1b01 	strb.w	r1, [r3], #1
 800cea2:	e7f9      	b.n	800ce98 <memset+0x4>

0800cea4 <sniprintf>:
 800cea4:	b40c      	push	{r2, r3}
 800cea6:	b530      	push	{r4, r5, lr}
 800cea8:	4b17      	ldr	r3, [pc, #92]	; (800cf08 <sniprintf+0x64>)
 800ceaa:	1e0c      	subs	r4, r1, #0
 800ceac:	b09d      	sub	sp, #116	; 0x74
 800ceae:	681d      	ldr	r5, [r3, #0]
 800ceb0:	da08      	bge.n	800cec4 <sniprintf+0x20>
 800ceb2:	238b      	movs	r3, #139	; 0x8b
 800ceb4:	602b      	str	r3, [r5, #0]
 800ceb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ceba:	b01d      	add	sp, #116	; 0x74
 800cebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cec0:	b002      	add	sp, #8
 800cec2:	4770      	bx	lr
 800cec4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cec8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cecc:	bf14      	ite	ne
 800cece:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ced2:	4623      	moveq	r3, r4
 800ced4:	9304      	str	r3, [sp, #16]
 800ced6:	9307      	str	r3, [sp, #28]
 800ced8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cedc:	9002      	str	r0, [sp, #8]
 800cede:	9006      	str	r0, [sp, #24]
 800cee0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cee4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cee6:	ab21      	add	r3, sp, #132	; 0x84
 800cee8:	a902      	add	r1, sp, #8
 800ceea:	4628      	mov	r0, r5
 800ceec:	9301      	str	r3, [sp, #4]
 800ceee:	f000 f897 	bl	800d020 <_svfiprintf_r>
 800cef2:	1c43      	adds	r3, r0, #1
 800cef4:	bfbc      	itt	lt
 800cef6:	238b      	movlt	r3, #139	; 0x8b
 800cef8:	602b      	strlt	r3, [r5, #0]
 800cefa:	2c00      	cmp	r4, #0
 800cefc:	d0dd      	beq.n	800ceba <sniprintf+0x16>
 800cefe:	9b02      	ldr	r3, [sp, #8]
 800cf00:	2200      	movs	r2, #0
 800cf02:	701a      	strb	r2, [r3, #0]
 800cf04:	e7d9      	b.n	800ceba <sniprintf+0x16>
 800cf06:	bf00      	nop
 800cf08:	20000044 	.word	0x20000044

0800cf0c <siprintf>:
 800cf0c:	b40e      	push	{r1, r2, r3}
 800cf0e:	b500      	push	{lr}
 800cf10:	b09c      	sub	sp, #112	; 0x70
 800cf12:	ab1d      	add	r3, sp, #116	; 0x74
 800cf14:	9002      	str	r0, [sp, #8]
 800cf16:	9006      	str	r0, [sp, #24]
 800cf18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cf1c:	4809      	ldr	r0, [pc, #36]	; (800cf44 <siprintf+0x38>)
 800cf1e:	9107      	str	r1, [sp, #28]
 800cf20:	9104      	str	r1, [sp, #16]
 800cf22:	4909      	ldr	r1, [pc, #36]	; (800cf48 <siprintf+0x3c>)
 800cf24:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf28:	9105      	str	r1, [sp, #20]
 800cf2a:	6800      	ldr	r0, [r0, #0]
 800cf2c:	9301      	str	r3, [sp, #4]
 800cf2e:	a902      	add	r1, sp, #8
 800cf30:	f000 f876 	bl	800d020 <_svfiprintf_r>
 800cf34:	9b02      	ldr	r3, [sp, #8]
 800cf36:	2200      	movs	r2, #0
 800cf38:	701a      	strb	r2, [r3, #0]
 800cf3a:	b01c      	add	sp, #112	; 0x70
 800cf3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf40:	b003      	add	sp, #12
 800cf42:	4770      	bx	lr
 800cf44:	20000044 	.word	0x20000044
 800cf48:	ffff0208 	.word	0xffff0208

0800cf4c <strcat>:
 800cf4c:	b510      	push	{r4, lr}
 800cf4e:	4603      	mov	r3, r0
 800cf50:	781a      	ldrb	r2, [r3, #0]
 800cf52:	1c5c      	adds	r4, r3, #1
 800cf54:	b93a      	cbnz	r2, 800cf66 <strcat+0x1a>
 800cf56:	3b01      	subs	r3, #1
 800cf58:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf60:	2a00      	cmp	r2, #0
 800cf62:	d1f9      	bne.n	800cf58 <strcat+0xc>
 800cf64:	bd10      	pop	{r4, pc}
 800cf66:	4623      	mov	r3, r4
 800cf68:	e7f2      	b.n	800cf50 <strcat+0x4>

0800cf6a <__ssputs_r>:
 800cf6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf6e:	688e      	ldr	r6, [r1, #8]
 800cf70:	429e      	cmp	r6, r3
 800cf72:	4682      	mov	sl, r0
 800cf74:	460c      	mov	r4, r1
 800cf76:	4690      	mov	r8, r2
 800cf78:	4699      	mov	r9, r3
 800cf7a:	d837      	bhi.n	800cfec <__ssputs_r+0x82>
 800cf7c:	898a      	ldrh	r2, [r1, #12]
 800cf7e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf82:	d031      	beq.n	800cfe8 <__ssputs_r+0x7e>
 800cf84:	6825      	ldr	r5, [r4, #0]
 800cf86:	6909      	ldr	r1, [r1, #16]
 800cf88:	1a6f      	subs	r7, r5, r1
 800cf8a:	6965      	ldr	r5, [r4, #20]
 800cf8c:	2302      	movs	r3, #2
 800cf8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf92:	fb95 f5f3 	sdiv	r5, r5, r3
 800cf96:	f109 0301 	add.w	r3, r9, #1
 800cf9a:	443b      	add	r3, r7
 800cf9c:	429d      	cmp	r5, r3
 800cf9e:	bf38      	it	cc
 800cfa0:	461d      	movcc	r5, r3
 800cfa2:	0553      	lsls	r3, r2, #21
 800cfa4:	d530      	bpl.n	800d008 <__ssputs_r+0x9e>
 800cfa6:	4629      	mov	r1, r5
 800cfa8:	f000 fb2c 	bl	800d604 <_malloc_r>
 800cfac:	4606      	mov	r6, r0
 800cfae:	b950      	cbnz	r0, 800cfc6 <__ssputs_r+0x5c>
 800cfb0:	230c      	movs	r3, #12
 800cfb2:	f8ca 3000 	str.w	r3, [sl]
 800cfb6:	89a3      	ldrh	r3, [r4, #12]
 800cfb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfbc:	81a3      	strh	r3, [r4, #12]
 800cfbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfc6:	463a      	mov	r2, r7
 800cfc8:	6921      	ldr	r1, [r4, #16]
 800cfca:	f000 faa9 	bl	800d520 <memcpy>
 800cfce:	89a3      	ldrh	r3, [r4, #12]
 800cfd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cfd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfd8:	81a3      	strh	r3, [r4, #12]
 800cfda:	6126      	str	r6, [r4, #16]
 800cfdc:	6165      	str	r5, [r4, #20]
 800cfde:	443e      	add	r6, r7
 800cfe0:	1bed      	subs	r5, r5, r7
 800cfe2:	6026      	str	r6, [r4, #0]
 800cfe4:	60a5      	str	r5, [r4, #8]
 800cfe6:	464e      	mov	r6, r9
 800cfe8:	454e      	cmp	r6, r9
 800cfea:	d900      	bls.n	800cfee <__ssputs_r+0x84>
 800cfec:	464e      	mov	r6, r9
 800cfee:	4632      	mov	r2, r6
 800cff0:	4641      	mov	r1, r8
 800cff2:	6820      	ldr	r0, [r4, #0]
 800cff4:	f000 fa9f 	bl	800d536 <memmove>
 800cff8:	68a3      	ldr	r3, [r4, #8]
 800cffa:	1b9b      	subs	r3, r3, r6
 800cffc:	60a3      	str	r3, [r4, #8]
 800cffe:	6823      	ldr	r3, [r4, #0]
 800d000:	441e      	add	r6, r3
 800d002:	6026      	str	r6, [r4, #0]
 800d004:	2000      	movs	r0, #0
 800d006:	e7dc      	b.n	800cfc2 <__ssputs_r+0x58>
 800d008:	462a      	mov	r2, r5
 800d00a:	f000 fb55 	bl	800d6b8 <_realloc_r>
 800d00e:	4606      	mov	r6, r0
 800d010:	2800      	cmp	r0, #0
 800d012:	d1e2      	bne.n	800cfda <__ssputs_r+0x70>
 800d014:	6921      	ldr	r1, [r4, #16]
 800d016:	4650      	mov	r0, sl
 800d018:	f000 faa6 	bl	800d568 <_free_r>
 800d01c:	e7c8      	b.n	800cfb0 <__ssputs_r+0x46>
	...

0800d020 <_svfiprintf_r>:
 800d020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d024:	461d      	mov	r5, r3
 800d026:	898b      	ldrh	r3, [r1, #12]
 800d028:	061f      	lsls	r7, r3, #24
 800d02a:	b09d      	sub	sp, #116	; 0x74
 800d02c:	4680      	mov	r8, r0
 800d02e:	460c      	mov	r4, r1
 800d030:	4616      	mov	r6, r2
 800d032:	d50f      	bpl.n	800d054 <_svfiprintf_r+0x34>
 800d034:	690b      	ldr	r3, [r1, #16]
 800d036:	b96b      	cbnz	r3, 800d054 <_svfiprintf_r+0x34>
 800d038:	2140      	movs	r1, #64	; 0x40
 800d03a:	f000 fae3 	bl	800d604 <_malloc_r>
 800d03e:	6020      	str	r0, [r4, #0]
 800d040:	6120      	str	r0, [r4, #16]
 800d042:	b928      	cbnz	r0, 800d050 <_svfiprintf_r+0x30>
 800d044:	230c      	movs	r3, #12
 800d046:	f8c8 3000 	str.w	r3, [r8]
 800d04a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d04e:	e0c8      	b.n	800d1e2 <_svfiprintf_r+0x1c2>
 800d050:	2340      	movs	r3, #64	; 0x40
 800d052:	6163      	str	r3, [r4, #20]
 800d054:	2300      	movs	r3, #0
 800d056:	9309      	str	r3, [sp, #36]	; 0x24
 800d058:	2320      	movs	r3, #32
 800d05a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d05e:	2330      	movs	r3, #48	; 0x30
 800d060:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d064:	9503      	str	r5, [sp, #12]
 800d066:	f04f 0b01 	mov.w	fp, #1
 800d06a:	4637      	mov	r7, r6
 800d06c:	463d      	mov	r5, r7
 800d06e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d072:	b10b      	cbz	r3, 800d078 <_svfiprintf_r+0x58>
 800d074:	2b25      	cmp	r3, #37	; 0x25
 800d076:	d13e      	bne.n	800d0f6 <_svfiprintf_r+0xd6>
 800d078:	ebb7 0a06 	subs.w	sl, r7, r6
 800d07c:	d00b      	beq.n	800d096 <_svfiprintf_r+0x76>
 800d07e:	4653      	mov	r3, sl
 800d080:	4632      	mov	r2, r6
 800d082:	4621      	mov	r1, r4
 800d084:	4640      	mov	r0, r8
 800d086:	f7ff ff70 	bl	800cf6a <__ssputs_r>
 800d08a:	3001      	adds	r0, #1
 800d08c:	f000 80a4 	beq.w	800d1d8 <_svfiprintf_r+0x1b8>
 800d090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d092:	4453      	add	r3, sl
 800d094:	9309      	str	r3, [sp, #36]	; 0x24
 800d096:	783b      	ldrb	r3, [r7, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	f000 809d 	beq.w	800d1d8 <_svfiprintf_r+0x1b8>
 800d09e:	2300      	movs	r3, #0
 800d0a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d0a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0a8:	9304      	str	r3, [sp, #16]
 800d0aa:	9307      	str	r3, [sp, #28]
 800d0ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0b0:	931a      	str	r3, [sp, #104]	; 0x68
 800d0b2:	462f      	mov	r7, r5
 800d0b4:	2205      	movs	r2, #5
 800d0b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d0ba:	4850      	ldr	r0, [pc, #320]	; (800d1fc <_svfiprintf_r+0x1dc>)
 800d0bc:	f7f3 f890 	bl	80001e0 <memchr>
 800d0c0:	9b04      	ldr	r3, [sp, #16]
 800d0c2:	b9d0      	cbnz	r0, 800d0fa <_svfiprintf_r+0xda>
 800d0c4:	06d9      	lsls	r1, r3, #27
 800d0c6:	bf44      	itt	mi
 800d0c8:	2220      	movmi	r2, #32
 800d0ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d0ce:	071a      	lsls	r2, r3, #28
 800d0d0:	bf44      	itt	mi
 800d0d2:	222b      	movmi	r2, #43	; 0x2b
 800d0d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d0d8:	782a      	ldrb	r2, [r5, #0]
 800d0da:	2a2a      	cmp	r2, #42	; 0x2a
 800d0dc:	d015      	beq.n	800d10a <_svfiprintf_r+0xea>
 800d0de:	9a07      	ldr	r2, [sp, #28]
 800d0e0:	462f      	mov	r7, r5
 800d0e2:	2000      	movs	r0, #0
 800d0e4:	250a      	movs	r5, #10
 800d0e6:	4639      	mov	r1, r7
 800d0e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0ec:	3b30      	subs	r3, #48	; 0x30
 800d0ee:	2b09      	cmp	r3, #9
 800d0f0:	d94d      	bls.n	800d18e <_svfiprintf_r+0x16e>
 800d0f2:	b1b8      	cbz	r0, 800d124 <_svfiprintf_r+0x104>
 800d0f4:	e00f      	b.n	800d116 <_svfiprintf_r+0xf6>
 800d0f6:	462f      	mov	r7, r5
 800d0f8:	e7b8      	b.n	800d06c <_svfiprintf_r+0x4c>
 800d0fa:	4a40      	ldr	r2, [pc, #256]	; (800d1fc <_svfiprintf_r+0x1dc>)
 800d0fc:	1a80      	subs	r0, r0, r2
 800d0fe:	fa0b f000 	lsl.w	r0, fp, r0
 800d102:	4318      	orrs	r0, r3
 800d104:	9004      	str	r0, [sp, #16]
 800d106:	463d      	mov	r5, r7
 800d108:	e7d3      	b.n	800d0b2 <_svfiprintf_r+0x92>
 800d10a:	9a03      	ldr	r2, [sp, #12]
 800d10c:	1d11      	adds	r1, r2, #4
 800d10e:	6812      	ldr	r2, [r2, #0]
 800d110:	9103      	str	r1, [sp, #12]
 800d112:	2a00      	cmp	r2, #0
 800d114:	db01      	blt.n	800d11a <_svfiprintf_r+0xfa>
 800d116:	9207      	str	r2, [sp, #28]
 800d118:	e004      	b.n	800d124 <_svfiprintf_r+0x104>
 800d11a:	4252      	negs	r2, r2
 800d11c:	f043 0302 	orr.w	r3, r3, #2
 800d120:	9207      	str	r2, [sp, #28]
 800d122:	9304      	str	r3, [sp, #16]
 800d124:	783b      	ldrb	r3, [r7, #0]
 800d126:	2b2e      	cmp	r3, #46	; 0x2e
 800d128:	d10c      	bne.n	800d144 <_svfiprintf_r+0x124>
 800d12a:	787b      	ldrb	r3, [r7, #1]
 800d12c:	2b2a      	cmp	r3, #42	; 0x2a
 800d12e:	d133      	bne.n	800d198 <_svfiprintf_r+0x178>
 800d130:	9b03      	ldr	r3, [sp, #12]
 800d132:	1d1a      	adds	r2, r3, #4
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	9203      	str	r2, [sp, #12]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	bfb8      	it	lt
 800d13c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d140:	3702      	adds	r7, #2
 800d142:	9305      	str	r3, [sp, #20]
 800d144:	4d2e      	ldr	r5, [pc, #184]	; (800d200 <_svfiprintf_r+0x1e0>)
 800d146:	7839      	ldrb	r1, [r7, #0]
 800d148:	2203      	movs	r2, #3
 800d14a:	4628      	mov	r0, r5
 800d14c:	f7f3 f848 	bl	80001e0 <memchr>
 800d150:	b138      	cbz	r0, 800d162 <_svfiprintf_r+0x142>
 800d152:	2340      	movs	r3, #64	; 0x40
 800d154:	1b40      	subs	r0, r0, r5
 800d156:	fa03 f000 	lsl.w	r0, r3, r0
 800d15a:	9b04      	ldr	r3, [sp, #16]
 800d15c:	4303      	orrs	r3, r0
 800d15e:	3701      	adds	r7, #1
 800d160:	9304      	str	r3, [sp, #16]
 800d162:	7839      	ldrb	r1, [r7, #0]
 800d164:	4827      	ldr	r0, [pc, #156]	; (800d204 <_svfiprintf_r+0x1e4>)
 800d166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d16a:	2206      	movs	r2, #6
 800d16c:	1c7e      	adds	r6, r7, #1
 800d16e:	f7f3 f837 	bl	80001e0 <memchr>
 800d172:	2800      	cmp	r0, #0
 800d174:	d038      	beq.n	800d1e8 <_svfiprintf_r+0x1c8>
 800d176:	4b24      	ldr	r3, [pc, #144]	; (800d208 <_svfiprintf_r+0x1e8>)
 800d178:	bb13      	cbnz	r3, 800d1c0 <_svfiprintf_r+0x1a0>
 800d17a:	9b03      	ldr	r3, [sp, #12]
 800d17c:	3307      	adds	r3, #7
 800d17e:	f023 0307 	bic.w	r3, r3, #7
 800d182:	3308      	adds	r3, #8
 800d184:	9303      	str	r3, [sp, #12]
 800d186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d188:	444b      	add	r3, r9
 800d18a:	9309      	str	r3, [sp, #36]	; 0x24
 800d18c:	e76d      	b.n	800d06a <_svfiprintf_r+0x4a>
 800d18e:	fb05 3202 	mla	r2, r5, r2, r3
 800d192:	2001      	movs	r0, #1
 800d194:	460f      	mov	r7, r1
 800d196:	e7a6      	b.n	800d0e6 <_svfiprintf_r+0xc6>
 800d198:	2300      	movs	r3, #0
 800d19a:	3701      	adds	r7, #1
 800d19c:	9305      	str	r3, [sp, #20]
 800d19e:	4619      	mov	r1, r3
 800d1a0:	250a      	movs	r5, #10
 800d1a2:	4638      	mov	r0, r7
 800d1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1a8:	3a30      	subs	r2, #48	; 0x30
 800d1aa:	2a09      	cmp	r2, #9
 800d1ac:	d903      	bls.n	800d1b6 <_svfiprintf_r+0x196>
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d0c8      	beq.n	800d144 <_svfiprintf_r+0x124>
 800d1b2:	9105      	str	r1, [sp, #20]
 800d1b4:	e7c6      	b.n	800d144 <_svfiprintf_r+0x124>
 800d1b6:	fb05 2101 	mla	r1, r5, r1, r2
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	4607      	mov	r7, r0
 800d1be:	e7f0      	b.n	800d1a2 <_svfiprintf_r+0x182>
 800d1c0:	ab03      	add	r3, sp, #12
 800d1c2:	9300      	str	r3, [sp, #0]
 800d1c4:	4622      	mov	r2, r4
 800d1c6:	4b11      	ldr	r3, [pc, #68]	; (800d20c <_svfiprintf_r+0x1ec>)
 800d1c8:	a904      	add	r1, sp, #16
 800d1ca:	4640      	mov	r0, r8
 800d1cc:	f3af 8000 	nop.w
 800d1d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d1d4:	4681      	mov	r9, r0
 800d1d6:	d1d6      	bne.n	800d186 <_svfiprintf_r+0x166>
 800d1d8:	89a3      	ldrh	r3, [r4, #12]
 800d1da:	065b      	lsls	r3, r3, #25
 800d1dc:	f53f af35 	bmi.w	800d04a <_svfiprintf_r+0x2a>
 800d1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1e2:	b01d      	add	sp, #116	; 0x74
 800d1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e8:	ab03      	add	r3, sp, #12
 800d1ea:	9300      	str	r3, [sp, #0]
 800d1ec:	4622      	mov	r2, r4
 800d1ee:	4b07      	ldr	r3, [pc, #28]	; (800d20c <_svfiprintf_r+0x1ec>)
 800d1f0:	a904      	add	r1, sp, #16
 800d1f2:	4640      	mov	r0, r8
 800d1f4:	f000 f882 	bl	800d2fc <_printf_i>
 800d1f8:	e7ea      	b.n	800d1d0 <_svfiprintf_r+0x1b0>
 800d1fa:	bf00      	nop
 800d1fc:	0800ed08 	.word	0x0800ed08
 800d200:	0800ed0e 	.word	0x0800ed0e
 800d204:	0800ed12 	.word	0x0800ed12
 800d208:	00000000 	.word	0x00000000
 800d20c:	0800cf6b 	.word	0x0800cf6b

0800d210 <_printf_common>:
 800d210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d214:	4691      	mov	r9, r2
 800d216:	461f      	mov	r7, r3
 800d218:	688a      	ldr	r2, [r1, #8]
 800d21a:	690b      	ldr	r3, [r1, #16]
 800d21c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d220:	4293      	cmp	r3, r2
 800d222:	bfb8      	it	lt
 800d224:	4613      	movlt	r3, r2
 800d226:	f8c9 3000 	str.w	r3, [r9]
 800d22a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d22e:	4606      	mov	r6, r0
 800d230:	460c      	mov	r4, r1
 800d232:	b112      	cbz	r2, 800d23a <_printf_common+0x2a>
 800d234:	3301      	adds	r3, #1
 800d236:	f8c9 3000 	str.w	r3, [r9]
 800d23a:	6823      	ldr	r3, [r4, #0]
 800d23c:	0699      	lsls	r1, r3, #26
 800d23e:	bf42      	ittt	mi
 800d240:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d244:	3302      	addmi	r3, #2
 800d246:	f8c9 3000 	strmi.w	r3, [r9]
 800d24a:	6825      	ldr	r5, [r4, #0]
 800d24c:	f015 0506 	ands.w	r5, r5, #6
 800d250:	d107      	bne.n	800d262 <_printf_common+0x52>
 800d252:	f104 0a19 	add.w	sl, r4, #25
 800d256:	68e3      	ldr	r3, [r4, #12]
 800d258:	f8d9 2000 	ldr.w	r2, [r9]
 800d25c:	1a9b      	subs	r3, r3, r2
 800d25e:	42ab      	cmp	r3, r5
 800d260:	dc28      	bgt.n	800d2b4 <_printf_common+0xa4>
 800d262:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d266:	6822      	ldr	r2, [r4, #0]
 800d268:	3300      	adds	r3, #0
 800d26a:	bf18      	it	ne
 800d26c:	2301      	movne	r3, #1
 800d26e:	0692      	lsls	r2, r2, #26
 800d270:	d42d      	bmi.n	800d2ce <_printf_common+0xbe>
 800d272:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d276:	4639      	mov	r1, r7
 800d278:	4630      	mov	r0, r6
 800d27a:	47c0      	blx	r8
 800d27c:	3001      	adds	r0, #1
 800d27e:	d020      	beq.n	800d2c2 <_printf_common+0xb2>
 800d280:	6823      	ldr	r3, [r4, #0]
 800d282:	68e5      	ldr	r5, [r4, #12]
 800d284:	f8d9 2000 	ldr.w	r2, [r9]
 800d288:	f003 0306 	and.w	r3, r3, #6
 800d28c:	2b04      	cmp	r3, #4
 800d28e:	bf08      	it	eq
 800d290:	1aad      	subeq	r5, r5, r2
 800d292:	68a3      	ldr	r3, [r4, #8]
 800d294:	6922      	ldr	r2, [r4, #16]
 800d296:	bf0c      	ite	eq
 800d298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d29c:	2500      	movne	r5, #0
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	bfc4      	itt	gt
 800d2a2:	1a9b      	subgt	r3, r3, r2
 800d2a4:	18ed      	addgt	r5, r5, r3
 800d2a6:	f04f 0900 	mov.w	r9, #0
 800d2aa:	341a      	adds	r4, #26
 800d2ac:	454d      	cmp	r5, r9
 800d2ae:	d11a      	bne.n	800d2e6 <_printf_common+0xd6>
 800d2b0:	2000      	movs	r0, #0
 800d2b2:	e008      	b.n	800d2c6 <_printf_common+0xb6>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	4652      	mov	r2, sl
 800d2b8:	4639      	mov	r1, r7
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	47c0      	blx	r8
 800d2be:	3001      	adds	r0, #1
 800d2c0:	d103      	bne.n	800d2ca <_printf_common+0xba>
 800d2c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ca:	3501      	adds	r5, #1
 800d2cc:	e7c3      	b.n	800d256 <_printf_common+0x46>
 800d2ce:	18e1      	adds	r1, r4, r3
 800d2d0:	1c5a      	adds	r2, r3, #1
 800d2d2:	2030      	movs	r0, #48	; 0x30
 800d2d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2d8:	4422      	add	r2, r4
 800d2da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2e2:	3302      	adds	r3, #2
 800d2e4:	e7c5      	b.n	800d272 <_printf_common+0x62>
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	4622      	mov	r2, r4
 800d2ea:	4639      	mov	r1, r7
 800d2ec:	4630      	mov	r0, r6
 800d2ee:	47c0      	blx	r8
 800d2f0:	3001      	adds	r0, #1
 800d2f2:	d0e6      	beq.n	800d2c2 <_printf_common+0xb2>
 800d2f4:	f109 0901 	add.w	r9, r9, #1
 800d2f8:	e7d8      	b.n	800d2ac <_printf_common+0x9c>
	...

0800d2fc <_printf_i>:
 800d2fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d300:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d304:	460c      	mov	r4, r1
 800d306:	7e09      	ldrb	r1, [r1, #24]
 800d308:	b085      	sub	sp, #20
 800d30a:	296e      	cmp	r1, #110	; 0x6e
 800d30c:	4617      	mov	r7, r2
 800d30e:	4606      	mov	r6, r0
 800d310:	4698      	mov	r8, r3
 800d312:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d314:	f000 80b3 	beq.w	800d47e <_printf_i+0x182>
 800d318:	d822      	bhi.n	800d360 <_printf_i+0x64>
 800d31a:	2963      	cmp	r1, #99	; 0x63
 800d31c:	d036      	beq.n	800d38c <_printf_i+0x90>
 800d31e:	d80a      	bhi.n	800d336 <_printf_i+0x3a>
 800d320:	2900      	cmp	r1, #0
 800d322:	f000 80b9 	beq.w	800d498 <_printf_i+0x19c>
 800d326:	2958      	cmp	r1, #88	; 0x58
 800d328:	f000 8083 	beq.w	800d432 <_printf_i+0x136>
 800d32c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d330:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d334:	e032      	b.n	800d39c <_printf_i+0xa0>
 800d336:	2964      	cmp	r1, #100	; 0x64
 800d338:	d001      	beq.n	800d33e <_printf_i+0x42>
 800d33a:	2969      	cmp	r1, #105	; 0x69
 800d33c:	d1f6      	bne.n	800d32c <_printf_i+0x30>
 800d33e:	6820      	ldr	r0, [r4, #0]
 800d340:	6813      	ldr	r3, [r2, #0]
 800d342:	0605      	lsls	r5, r0, #24
 800d344:	f103 0104 	add.w	r1, r3, #4
 800d348:	d52a      	bpl.n	800d3a0 <_printf_i+0xa4>
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	6011      	str	r1, [r2, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	da03      	bge.n	800d35a <_printf_i+0x5e>
 800d352:	222d      	movs	r2, #45	; 0x2d
 800d354:	425b      	negs	r3, r3
 800d356:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d35a:	486f      	ldr	r0, [pc, #444]	; (800d518 <_printf_i+0x21c>)
 800d35c:	220a      	movs	r2, #10
 800d35e:	e039      	b.n	800d3d4 <_printf_i+0xd8>
 800d360:	2973      	cmp	r1, #115	; 0x73
 800d362:	f000 809d 	beq.w	800d4a0 <_printf_i+0x1a4>
 800d366:	d808      	bhi.n	800d37a <_printf_i+0x7e>
 800d368:	296f      	cmp	r1, #111	; 0x6f
 800d36a:	d020      	beq.n	800d3ae <_printf_i+0xb2>
 800d36c:	2970      	cmp	r1, #112	; 0x70
 800d36e:	d1dd      	bne.n	800d32c <_printf_i+0x30>
 800d370:	6823      	ldr	r3, [r4, #0]
 800d372:	f043 0320 	orr.w	r3, r3, #32
 800d376:	6023      	str	r3, [r4, #0]
 800d378:	e003      	b.n	800d382 <_printf_i+0x86>
 800d37a:	2975      	cmp	r1, #117	; 0x75
 800d37c:	d017      	beq.n	800d3ae <_printf_i+0xb2>
 800d37e:	2978      	cmp	r1, #120	; 0x78
 800d380:	d1d4      	bne.n	800d32c <_printf_i+0x30>
 800d382:	2378      	movs	r3, #120	; 0x78
 800d384:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d388:	4864      	ldr	r0, [pc, #400]	; (800d51c <_printf_i+0x220>)
 800d38a:	e055      	b.n	800d438 <_printf_i+0x13c>
 800d38c:	6813      	ldr	r3, [r2, #0]
 800d38e:	1d19      	adds	r1, r3, #4
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	6011      	str	r1, [r2, #0]
 800d394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d39c:	2301      	movs	r3, #1
 800d39e:	e08c      	b.n	800d4ba <_printf_i+0x1be>
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	6011      	str	r1, [r2, #0]
 800d3a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d3a8:	bf18      	it	ne
 800d3aa:	b21b      	sxthne	r3, r3
 800d3ac:	e7cf      	b.n	800d34e <_printf_i+0x52>
 800d3ae:	6813      	ldr	r3, [r2, #0]
 800d3b0:	6825      	ldr	r5, [r4, #0]
 800d3b2:	1d18      	adds	r0, r3, #4
 800d3b4:	6010      	str	r0, [r2, #0]
 800d3b6:	0628      	lsls	r0, r5, #24
 800d3b8:	d501      	bpl.n	800d3be <_printf_i+0xc2>
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	e002      	b.n	800d3c4 <_printf_i+0xc8>
 800d3be:	0668      	lsls	r0, r5, #25
 800d3c0:	d5fb      	bpl.n	800d3ba <_printf_i+0xbe>
 800d3c2:	881b      	ldrh	r3, [r3, #0]
 800d3c4:	4854      	ldr	r0, [pc, #336]	; (800d518 <_printf_i+0x21c>)
 800d3c6:	296f      	cmp	r1, #111	; 0x6f
 800d3c8:	bf14      	ite	ne
 800d3ca:	220a      	movne	r2, #10
 800d3cc:	2208      	moveq	r2, #8
 800d3ce:	2100      	movs	r1, #0
 800d3d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3d4:	6865      	ldr	r5, [r4, #4]
 800d3d6:	60a5      	str	r5, [r4, #8]
 800d3d8:	2d00      	cmp	r5, #0
 800d3da:	f2c0 8095 	blt.w	800d508 <_printf_i+0x20c>
 800d3de:	6821      	ldr	r1, [r4, #0]
 800d3e0:	f021 0104 	bic.w	r1, r1, #4
 800d3e4:	6021      	str	r1, [r4, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d13d      	bne.n	800d466 <_printf_i+0x16a>
 800d3ea:	2d00      	cmp	r5, #0
 800d3ec:	f040 808e 	bne.w	800d50c <_printf_i+0x210>
 800d3f0:	4665      	mov	r5, ip
 800d3f2:	2a08      	cmp	r2, #8
 800d3f4:	d10b      	bne.n	800d40e <_printf_i+0x112>
 800d3f6:	6823      	ldr	r3, [r4, #0]
 800d3f8:	07db      	lsls	r3, r3, #31
 800d3fa:	d508      	bpl.n	800d40e <_printf_i+0x112>
 800d3fc:	6923      	ldr	r3, [r4, #16]
 800d3fe:	6862      	ldr	r2, [r4, #4]
 800d400:	429a      	cmp	r2, r3
 800d402:	bfde      	ittt	le
 800d404:	2330      	movle	r3, #48	; 0x30
 800d406:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d40a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d40e:	ebac 0305 	sub.w	r3, ip, r5
 800d412:	6123      	str	r3, [r4, #16]
 800d414:	f8cd 8000 	str.w	r8, [sp]
 800d418:	463b      	mov	r3, r7
 800d41a:	aa03      	add	r2, sp, #12
 800d41c:	4621      	mov	r1, r4
 800d41e:	4630      	mov	r0, r6
 800d420:	f7ff fef6 	bl	800d210 <_printf_common>
 800d424:	3001      	adds	r0, #1
 800d426:	d14d      	bne.n	800d4c4 <_printf_i+0x1c8>
 800d428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d42c:	b005      	add	sp, #20
 800d42e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d432:	4839      	ldr	r0, [pc, #228]	; (800d518 <_printf_i+0x21c>)
 800d434:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d438:	6813      	ldr	r3, [r2, #0]
 800d43a:	6821      	ldr	r1, [r4, #0]
 800d43c:	1d1d      	adds	r5, r3, #4
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	6015      	str	r5, [r2, #0]
 800d442:	060a      	lsls	r2, r1, #24
 800d444:	d50b      	bpl.n	800d45e <_printf_i+0x162>
 800d446:	07ca      	lsls	r2, r1, #31
 800d448:	bf44      	itt	mi
 800d44a:	f041 0120 	orrmi.w	r1, r1, #32
 800d44e:	6021      	strmi	r1, [r4, #0]
 800d450:	b91b      	cbnz	r3, 800d45a <_printf_i+0x15e>
 800d452:	6822      	ldr	r2, [r4, #0]
 800d454:	f022 0220 	bic.w	r2, r2, #32
 800d458:	6022      	str	r2, [r4, #0]
 800d45a:	2210      	movs	r2, #16
 800d45c:	e7b7      	b.n	800d3ce <_printf_i+0xd2>
 800d45e:	064d      	lsls	r5, r1, #25
 800d460:	bf48      	it	mi
 800d462:	b29b      	uxthmi	r3, r3
 800d464:	e7ef      	b.n	800d446 <_printf_i+0x14a>
 800d466:	4665      	mov	r5, ip
 800d468:	fbb3 f1f2 	udiv	r1, r3, r2
 800d46c:	fb02 3311 	mls	r3, r2, r1, r3
 800d470:	5cc3      	ldrb	r3, [r0, r3]
 800d472:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d476:	460b      	mov	r3, r1
 800d478:	2900      	cmp	r1, #0
 800d47a:	d1f5      	bne.n	800d468 <_printf_i+0x16c>
 800d47c:	e7b9      	b.n	800d3f2 <_printf_i+0xf6>
 800d47e:	6813      	ldr	r3, [r2, #0]
 800d480:	6825      	ldr	r5, [r4, #0]
 800d482:	6961      	ldr	r1, [r4, #20]
 800d484:	1d18      	adds	r0, r3, #4
 800d486:	6010      	str	r0, [r2, #0]
 800d488:	0628      	lsls	r0, r5, #24
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	d501      	bpl.n	800d492 <_printf_i+0x196>
 800d48e:	6019      	str	r1, [r3, #0]
 800d490:	e002      	b.n	800d498 <_printf_i+0x19c>
 800d492:	066a      	lsls	r2, r5, #25
 800d494:	d5fb      	bpl.n	800d48e <_printf_i+0x192>
 800d496:	8019      	strh	r1, [r3, #0]
 800d498:	2300      	movs	r3, #0
 800d49a:	6123      	str	r3, [r4, #16]
 800d49c:	4665      	mov	r5, ip
 800d49e:	e7b9      	b.n	800d414 <_printf_i+0x118>
 800d4a0:	6813      	ldr	r3, [r2, #0]
 800d4a2:	1d19      	adds	r1, r3, #4
 800d4a4:	6011      	str	r1, [r2, #0]
 800d4a6:	681d      	ldr	r5, [r3, #0]
 800d4a8:	6862      	ldr	r2, [r4, #4]
 800d4aa:	2100      	movs	r1, #0
 800d4ac:	4628      	mov	r0, r5
 800d4ae:	f7f2 fe97 	bl	80001e0 <memchr>
 800d4b2:	b108      	cbz	r0, 800d4b8 <_printf_i+0x1bc>
 800d4b4:	1b40      	subs	r0, r0, r5
 800d4b6:	6060      	str	r0, [r4, #4]
 800d4b8:	6863      	ldr	r3, [r4, #4]
 800d4ba:	6123      	str	r3, [r4, #16]
 800d4bc:	2300      	movs	r3, #0
 800d4be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4c2:	e7a7      	b.n	800d414 <_printf_i+0x118>
 800d4c4:	6923      	ldr	r3, [r4, #16]
 800d4c6:	462a      	mov	r2, r5
 800d4c8:	4639      	mov	r1, r7
 800d4ca:	4630      	mov	r0, r6
 800d4cc:	47c0      	blx	r8
 800d4ce:	3001      	adds	r0, #1
 800d4d0:	d0aa      	beq.n	800d428 <_printf_i+0x12c>
 800d4d2:	6823      	ldr	r3, [r4, #0]
 800d4d4:	079b      	lsls	r3, r3, #30
 800d4d6:	d413      	bmi.n	800d500 <_printf_i+0x204>
 800d4d8:	68e0      	ldr	r0, [r4, #12]
 800d4da:	9b03      	ldr	r3, [sp, #12]
 800d4dc:	4298      	cmp	r0, r3
 800d4de:	bfb8      	it	lt
 800d4e0:	4618      	movlt	r0, r3
 800d4e2:	e7a3      	b.n	800d42c <_printf_i+0x130>
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	464a      	mov	r2, r9
 800d4e8:	4639      	mov	r1, r7
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	47c0      	blx	r8
 800d4ee:	3001      	adds	r0, #1
 800d4f0:	d09a      	beq.n	800d428 <_printf_i+0x12c>
 800d4f2:	3501      	adds	r5, #1
 800d4f4:	68e3      	ldr	r3, [r4, #12]
 800d4f6:	9a03      	ldr	r2, [sp, #12]
 800d4f8:	1a9b      	subs	r3, r3, r2
 800d4fa:	42ab      	cmp	r3, r5
 800d4fc:	dcf2      	bgt.n	800d4e4 <_printf_i+0x1e8>
 800d4fe:	e7eb      	b.n	800d4d8 <_printf_i+0x1dc>
 800d500:	2500      	movs	r5, #0
 800d502:	f104 0919 	add.w	r9, r4, #25
 800d506:	e7f5      	b.n	800d4f4 <_printf_i+0x1f8>
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d1ac      	bne.n	800d466 <_printf_i+0x16a>
 800d50c:	7803      	ldrb	r3, [r0, #0]
 800d50e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d512:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d516:	e76c      	b.n	800d3f2 <_printf_i+0xf6>
 800d518:	0800ed19 	.word	0x0800ed19
 800d51c:	0800ed2a 	.word	0x0800ed2a

0800d520 <memcpy>:
 800d520:	b510      	push	{r4, lr}
 800d522:	1e43      	subs	r3, r0, #1
 800d524:	440a      	add	r2, r1
 800d526:	4291      	cmp	r1, r2
 800d528:	d100      	bne.n	800d52c <memcpy+0xc>
 800d52a:	bd10      	pop	{r4, pc}
 800d52c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d530:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d534:	e7f7      	b.n	800d526 <memcpy+0x6>

0800d536 <memmove>:
 800d536:	4288      	cmp	r0, r1
 800d538:	b510      	push	{r4, lr}
 800d53a:	eb01 0302 	add.w	r3, r1, r2
 800d53e:	d807      	bhi.n	800d550 <memmove+0x1a>
 800d540:	1e42      	subs	r2, r0, #1
 800d542:	4299      	cmp	r1, r3
 800d544:	d00a      	beq.n	800d55c <memmove+0x26>
 800d546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d54a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d54e:	e7f8      	b.n	800d542 <memmove+0xc>
 800d550:	4283      	cmp	r3, r0
 800d552:	d9f5      	bls.n	800d540 <memmove+0xa>
 800d554:	1881      	adds	r1, r0, r2
 800d556:	1ad2      	subs	r2, r2, r3
 800d558:	42d3      	cmn	r3, r2
 800d55a:	d100      	bne.n	800d55e <memmove+0x28>
 800d55c:	bd10      	pop	{r4, pc}
 800d55e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d562:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d566:	e7f7      	b.n	800d558 <memmove+0x22>

0800d568 <_free_r>:
 800d568:	b538      	push	{r3, r4, r5, lr}
 800d56a:	4605      	mov	r5, r0
 800d56c:	2900      	cmp	r1, #0
 800d56e:	d045      	beq.n	800d5fc <_free_r+0x94>
 800d570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d574:	1f0c      	subs	r4, r1, #4
 800d576:	2b00      	cmp	r3, #0
 800d578:	bfb8      	it	lt
 800d57a:	18e4      	addlt	r4, r4, r3
 800d57c:	f000 f8d2 	bl	800d724 <__malloc_lock>
 800d580:	4a1f      	ldr	r2, [pc, #124]	; (800d600 <_free_r+0x98>)
 800d582:	6813      	ldr	r3, [r2, #0]
 800d584:	4610      	mov	r0, r2
 800d586:	b933      	cbnz	r3, 800d596 <_free_r+0x2e>
 800d588:	6063      	str	r3, [r4, #4]
 800d58a:	6014      	str	r4, [r2, #0]
 800d58c:	4628      	mov	r0, r5
 800d58e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d592:	f000 b8c8 	b.w	800d726 <__malloc_unlock>
 800d596:	42a3      	cmp	r3, r4
 800d598:	d90c      	bls.n	800d5b4 <_free_r+0x4c>
 800d59a:	6821      	ldr	r1, [r4, #0]
 800d59c:	1862      	adds	r2, r4, r1
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	bf04      	itt	eq
 800d5a2:	681a      	ldreq	r2, [r3, #0]
 800d5a4:	685b      	ldreq	r3, [r3, #4]
 800d5a6:	6063      	str	r3, [r4, #4]
 800d5a8:	bf04      	itt	eq
 800d5aa:	1852      	addeq	r2, r2, r1
 800d5ac:	6022      	streq	r2, [r4, #0]
 800d5ae:	6004      	str	r4, [r0, #0]
 800d5b0:	e7ec      	b.n	800d58c <_free_r+0x24>
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	685a      	ldr	r2, [r3, #4]
 800d5b6:	b10a      	cbz	r2, 800d5bc <_free_r+0x54>
 800d5b8:	42a2      	cmp	r2, r4
 800d5ba:	d9fa      	bls.n	800d5b2 <_free_r+0x4a>
 800d5bc:	6819      	ldr	r1, [r3, #0]
 800d5be:	1858      	adds	r0, r3, r1
 800d5c0:	42a0      	cmp	r0, r4
 800d5c2:	d10b      	bne.n	800d5dc <_free_r+0x74>
 800d5c4:	6820      	ldr	r0, [r4, #0]
 800d5c6:	4401      	add	r1, r0
 800d5c8:	1858      	adds	r0, r3, r1
 800d5ca:	4282      	cmp	r2, r0
 800d5cc:	6019      	str	r1, [r3, #0]
 800d5ce:	d1dd      	bne.n	800d58c <_free_r+0x24>
 800d5d0:	6810      	ldr	r0, [r2, #0]
 800d5d2:	6852      	ldr	r2, [r2, #4]
 800d5d4:	605a      	str	r2, [r3, #4]
 800d5d6:	4401      	add	r1, r0
 800d5d8:	6019      	str	r1, [r3, #0]
 800d5da:	e7d7      	b.n	800d58c <_free_r+0x24>
 800d5dc:	d902      	bls.n	800d5e4 <_free_r+0x7c>
 800d5de:	230c      	movs	r3, #12
 800d5e0:	602b      	str	r3, [r5, #0]
 800d5e2:	e7d3      	b.n	800d58c <_free_r+0x24>
 800d5e4:	6820      	ldr	r0, [r4, #0]
 800d5e6:	1821      	adds	r1, r4, r0
 800d5e8:	428a      	cmp	r2, r1
 800d5ea:	bf04      	itt	eq
 800d5ec:	6811      	ldreq	r1, [r2, #0]
 800d5ee:	6852      	ldreq	r2, [r2, #4]
 800d5f0:	6062      	str	r2, [r4, #4]
 800d5f2:	bf04      	itt	eq
 800d5f4:	1809      	addeq	r1, r1, r0
 800d5f6:	6021      	streq	r1, [r4, #0]
 800d5f8:	605c      	str	r4, [r3, #4]
 800d5fa:	e7c7      	b.n	800d58c <_free_r+0x24>
 800d5fc:	bd38      	pop	{r3, r4, r5, pc}
 800d5fe:	bf00      	nop
 800d600:	20000170 	.word	0x20000170

0800d604 <_malloc_r>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	1ccd      	adds	r5, r1, #3
 800d608:	f025 0503 	bic.w	r5, r5, #3
 800d60c:	3508      	adds	r5, #8
 800d60e:	2d0c      	cmp	r5, #12
 800d610:	bf38      	it	cc
 800d612:	250c      	movcc	r5, #12
 800d614:	2d00      	cmp	r5, #0
 800d616:	4606      	mov	r6, r0
 800d618:	db01      	blt.n	800d61e <_malloc_r+0x1a>
 800d61a:	42a9      	cmp	r1, r5
 800d61c:	d903      	bls.n	800d626 <_malloc_r+0x22>
 800d61e:	230c      	movs	r3, #12
 800d620:	6033      	str	r3, [r6, #0]
 800d622:	2000      	movs	r0, #0
 800d624:	bd70      	pop	{r4, r5, r6, pc}
 800d626:	f000 f87d 	bl	800d724 <__malloc_lock>
 800d62a:	4a21      	ldr	r2, [pc, #132]	; (800d6b0 <_malloc_r+0xac>)
 800d62c:	6814      	ldr	r4, [r2, #0]
 800d62e:	4621      	mov	r1, r4
 800d630:	b991      	cbnz	r1, 800d658 <_malloc_r+0x54>
 800d632:	4c20      	ldr	r4, [pc, #128]	; (800d6b4 <_malloc_r+0xb0>)
 800d634:	6823      	ldr	r3, [r4, #0]
 800d636:	b91b      	cbnz	r3, 800d640 <_malloc_r+0x3c>
 800d638:	4630      	mov	r0, r6
 800d63a:	f000 f863 	bl	800d704 <_sbrk_r>
 800d63e:	6020      	str	r0, [r4, #0]
 800d640:	4629      	mov	r1, r5
 800d642:	4630      	mov	r0, r6
 800d644:	f000 f85e 	bl	800d704 <_sbrk_r>
 800d648:	1c43      	adds	r3, r0, #1
 800d64a:	d124      	bne.n	800d696 <_malloc_r+0x92>
 800d64c:	230c      	movs	r3, #12
 800d64e:	6033      	str	r3, [r6, #0]
 800d650:	4630      	mov	r0, r6
 800d652:	f000 f868 	bl	800d726 <__malloc_unlock>
 800d656:	e7e4      	b.n	800d622 <_malloc_r+0x1e>
 800d658:	680b      	ldr	r3, [r1, #0]
 800d65a:	1b5b      	subs	r3, r3, r5
 800d65c:	d418      	bmi.n	800d690 <_malloc_r+0x8c>
 800d65e:	2b0b      	cmp	r3, #11
 800d660:	d90f      	bls.n	800d682 <_malloc_r+0x7e>
 800d662:	600b      	str	r3, [r1, #0]
 800d664:	50cd      	str	r5, [r1, r3]
 800d666:	18cc      	adds	r4, r1, r3
 800d668:	4630      	mov	r0, r6
 800d66a:	f000 f85c 	bl	800d726 <__malloc_unlock>
 800d66e:	f104 000b 	add.w	r0, r4, #11
 800d672:	1d23      	adds	r3, r4, #4
 800d674:	f020 0007 	bic.w	r0, r0, #7
 800d678:	1ac3      	subs	r3, r0, r3
 800d67a:	d0d3      	beq.n	800d624 <_malloc_r+0x20>
 800d67c:	425a      	negs	r2, r3
 800d67e:	50e2      	str	r2, [r4, r3]
 800d680:	e7d0      	b.n	800d624 <_malloc_r+0x20>
 800d682:	428c      	cmp	r4, r1
 800d684:	684b      	ldr	r3, [r1, #4]
 800d686:	bf16      	itet	ne
 800d688:	6063      	strne	r3, [r4, #4]
 800d68a:	6013      	streq	r3, [r2, #0]
 800d68c:	460c      	movne	r4, r1
 800d68e:	e7eb      	b.n	800d668 <_malloc_r+0x64>
 800d690:	460c      	mov	r4, r1
 800d692:	6849      	ldr	r1, [r1, #4]
 800d694:	e7cc      	b.n	800d630 <_malloc_r+0x2c>
 800d696:	1cc4      	adds	r4, r0, #3
 800d698:	f024 0403 	bic.w	r4, r4, #3
 800d69c:	42a0      	cmp	r0, r4
 800d69e:	d005      	beq.n	800d6ac <_malloc_r+0xa8>
 800d6a0:	1a21      	subs	r1, r4, r0
 800d6a2:	4630      	mov	r0, r6
 800d6a4:	f000 f82e 	bl	800d704 <_sbrk_r>
 800d6a8:	3001      	adds	r0, #1
 800d6aa:	d0cf      	beq.n	800d64c <_malloc_r+0x48>
 800d6ac:	6025      	str	r5, [r4, #0]
 800d6ae:	e7db      	b.n	800d668 <_malloc_r+0x64>
 800d6b0:	20000170 	.word	0x20000170
 800d6b4:	20000174 	.word	0x20000174

0800d6b8 <_realloc_r>:
 800d6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ba:	4607      	mov	r7, r0
 800d6bc:	4614      	mov	r4, r2
 800d6be:	460e      	mov	r6, r1
 800d6c0:	b921      	cbnz	r1, 800d6cc <_realloc_r+0x14>
 800d6c2:	4611      	mov	r1, r2
 800d6c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d6c8:	f7ff bf9c 	b.w	800d604 <_malloc_r>
 800d6cc:	b922      	cbnz	r2, 800d6d8 <_realloc_r+0x20>
 800d6ce:	f7ff ff4b 	bl	800d568 <_free_r>
 800d6d2:	4625      	mov	r5, r4
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6d8:	f000 f826 	bl	800d728 <_malloc_usable_size_r>
 800d6dc:	42a0      	cmp	r0, r4
 800d6de:	d20f      	bcs.n	800d700 <_realloc_r+0x48>
 800d6e0:	4621      	mov	r1, r4
 800d6e2:	4638      	mov	r0, r7
 800d6e4:	f7ff ff8e 	bl	800d604 <_malloc_r>
 800d6e8:	4605      	mov	r5, r0
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	d0f2      	beq.n	800d6d4 <_realloc_r+0x1c>
 800d6ee:	4631      	mov	r1, r6
 800d6f0:	4622      	mov	r2, r4
 800d6f2:	f7ff ff15 	bl	800d520 <memcpy>
 800d6f6:	4631      	mov	r1, r6
 800d6f8:	4638      	mov	r0, r7
 800d6fa:	f7ff ff35 	bl	800d568 <_free_r>
 800d6fe:	e7e9      	b.n	800d6d4 <_realloc_r+0x1c>
 800d700:	4635      	mov	r5, r6
 800d702:	e7e7      	b.n	800d6d4 <_realloc_r+0x1c>

0800d704 <_sbrk_r>:
 800d704:	b538      	push	{r3, r4, r5, lr}
 800d706:	4c06      	ldr	r4, [pc, #24]	; (800d720 <_sbrk_r+0x1c>)
 800d708:	2300      	movs	r3, #0
 800d70a:	4605      	mov	r5, r0
 800d70c:	4608      	mov	r0, r1
 800d70e:	6023      	str	r3, [r4, #0]
 800d710:	f7ff fb2a 	bl	800cd68 <_sbrk>
 800d714:	1c43      	adds	r3, r0, #1
 800d716:	d102      	bne.n	800d71e <_sbrk_r+0x1a>
 800d718:	6823      	ldr	r3, [r4, #0]
 800d71a:	b103      	cbz	r3, 800d71e <_sbrk_r+0x1a>
 800d71c:	602b      	str	r3, [r5, #0]
 800d71e:	bd38      	pop	{r3, r4, r5, pc}
 800d720:	20002524 	.word	0x20002524

0800d724 <__malloc_lock>:
 800d724:	4770      	bx	lr

0800d726 <__malloc_unlock>:
 800d726:	4770      	bx	lr

0800d728 <_malloc_usable_size_r>:
 800d728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d72c:	1f18      	subs	r0, r3, #4
 800d72e:	2b00      	cmp	r3, #0
 800d730:	bfbc      	itt	lt
 800d732:	580b      	ldrlt	r3, [r1, r0]
 800d734:	18c0      	addlt	r0, r0, r3
 800d736:	4770      	bx	lr

0800d738 <cos>:
 800d738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d73a:	ec51 0b10 	vmov	r0, r1, d0
 800d73e:	4a1e      	ldr	r2, [pc, #120]	; (800d7b8 <cos+0x80>)
 800d740:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d744:	4293      	cmp	r3, r2
 800d746:	dc06      	bgt.n	800d756 <cos+0x1e>
 800d748:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800d7b0 <cos+0x78>
 800d74c:	f000 fb80 	bl	800de50 <__kernel_cos>
 800d750:	ec51 0b10 	vmov	r0, r1, d0
 800d754:	e007      	b.n	800d766 <cos+0x2e>
 800d756:	4a19      	ldr	r2, [pc, #100]	; (800d7bc <cos+0x84>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	dd09      	ble.n	800d770 <cos+0x38>
 800d75c:	ee10 2a10 	vmov	r2, s0
 800d760:	460b      	mov	r3, r1
 800d762:	f7f2 fd91 	bl	8000288 <__aeabi_dsub>
 800d766:	ec41 0b10 	vmov	d0, r0, r1
 800d76a:	b005      	add	sp, #20
 800d76c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d770:	4668      	mov	r0, sp
 800d772:	f000 f8c9 	bl	800d908 <__ieee754_rem_pio2>
 800d776:	f000 0003 	and.w	r0, r0, #3
 800d77a:	2801      	cmp	r0, #1
 800d77c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d780:	ed9d 0b00 	vldr	d0, [sp]
 800d784:	d007      	beq.n	800d796 <cos+0x5e>
 800d786:	2802      	cmp	r0, #2
 800d788:	d00e      	beq.n	800d7a8 <cos+0x70>
 800d78a:	2800      	cmp	r0, #0
 800d78c:	d0de      	beq.n	800d74c <cos+0x14>
 800d78e:	2001      	movs	r0, #1
 800d790:	f000 ff66 	bl	800e660 <__kernel_sin>
 800d794:	e7dc      	b.n	800d750 <cos+0x18>
 800d796:	f000 ff63 	bl	800e660 <__kernel_sin>
 800d79a:	ec53 2b10 	vmov	r2, r3, d0
 800d79e:	ee10 0a10 	vmov	r0, s0
 800d7a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d7a6:	e7de      	b.n	800d766 <cos+0x2e>
 800d7a8:	f000 fb52 	bl	800de50 <__kernel_cos>
 800d7ac:	e7f5      	b.n	800d79a <cos+0x62>
 800d7ae:	bf00      	nop
	...
 800d7b8:	3fe921fb 	.word	0x3fe921fb
 800d7bc:	7fefffff 	.word	0x7fefffff

0800d7c0 <sin>:
 800d7c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7c2:	ec51 0b10 	vmov	r0, r1, d0
 800d7c6:	4a20      	ldr	r2, [pc, #128]	; (800d848 <sin+0x88>)
 800d7c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	dc07      	bgt.n	800d7e0 <sin+0x20>
 800d7d0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800d840 <sin+0x80>
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	f000 ff43 	bl	800e660 <__kernel_sin>
 800d7da:	ec51 0b10 	vmov	r0, r1, d0
 800d7de:	e007      	b.n	800d7f0 <sin+0x30>
 800d7e0:	4a1a      	ldr	r2, [pc, #104]	; (800d84c <sin+0x8c>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	dd09      	ble.n	800d7fa <sin+0x3a>
 800d7e6:	ee10 2a10 	vmov	r2, s0
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	f7f2 fd4c 	bl	8000288 <__aeabi_dsub>
 800d7f0:	ec41 0b10 	vmov	d0, r0, r1
 800d7f4:	b005      	add	sp, #20
 800d7f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7fa:	4668      	mov	r0, sp
 800d7fc:	f000 f884 	bl	800d908 <__ieee754_rem_pio2>
 800d800:	f000 0003 	and.w	r0, r0, #3
 800d804:	2801      	cmp	r0, #1
 800d806:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d80a:	ed9d 0b00 	vldr	d0, [sp]
 800d80e:	d004      	beq.n	800d81a <sin+0x5a>
 800d810:	2802      	cmp	r0, #2
 800d812:	d005      	beq.n	800d820 <sin+0x60>
 800d814:	b970      	cbnz	r0, 800d834 <sin+0x74>
 800d816:	2001      	movs	r0, #1
 800d818:	e7dd      	b.n	800d7d6 <sin+0x16>
 800d81a:	f000 fb19 	bl	800de50 <__kernel_cos>
 800d81e:	e7dc      	b.n	800d7da <sin+0x1a>
 800d820:	2001      	movs	r0, #1
 800d822:	f000 ff1d 	bl	800e660 <__kernel_sin>
 800d826:	ec53 2b10 	vmov	r2, r3, d0
 800d82a:	ee10 0a10 	vmov	r0, s0
 800d82e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d832:	e7dd      	b.n	800d7f0 <sin+0x30>
 800d834:	f000 fb0c 	bl	800de50 <__kernel_cos>
 800d838:	e7f5      	b.n	800d826 <sin+0x66>
 800d83a:	bf00      	nop
 800d83c:	f3af 8000 	nop.w
	...
 800d848:	3fe921fb 	.word	0x3fe921fb
 800d84c:	7fefffff 	.word	0x7fefffff

0800d850 <sqrt>:
 800d850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d854:	ed2d 8b02 	vpush	{d8}
 800d858:	b08b      	sub	sp, #44	; 0x2c
 800d85a:	ec55 4b10 	vmov	r4, r5, d0
 800d85e:	f000 fa45 	bl	800dcec <__ieee754_sqrt>
 800d862:	4b26      	ldr	r3, [pc, #152]	; (800d8fc <sqrt+0xac>)
 800d864:	eeb0 8a40 	vmov.f32	s16, s0
 800d868:	eef0 8a60 	vmov.f32	s17, s1
 800d86c:	f993 6000 	ldrsb.w	r6, [r3]
 800d870:	1c73      	adds	r3, r6, #1
 800d872:	d02a      	beq.n	800d8ca <sqrt+0x7a>
 800d874:	4622      	mov	r2, r4
 800d876:	462b      	mov	r3, r5
 800d878:	4620      	mov	r0, r4
 800d87a:	4629      	mov	r1, r5
 800d87c:	f7f3 f956 	bl	8000b2c <__aeabi_dcmpun>
 800d880:	4607      	mov	r7, r0
 800d882:	bb10      	cbnz	r0, 800d8ca <sqrt+0x7a>
 800d884:	f04f 0800 	mov.w	r8, #0
 800d888:	f04f 0900 	mov.w	r9, #0
 800d88c:	4642      	mov	r2, r8
 800d88e:	464b      	mov	r3, r9
 800d890:	4620      	mov	r0, r4
 800d892:	4629      	mov	r1, r5
 800d894:	f7f3 f922 	bl	8000adc <__aeabi_dcmplt>
 800d898:	b1b8      	cbz	r0, 800d8ca <sqrt+0x7a>
 800d89a:	2301      	movs	r3, #1
 800d89c:	9300      	str	r3, [sp, #0]
 800d89e:	4b18      	ldr	r3, [pc, #96]	; (800d900 <sqrt+0xb0>)
 800d8a0:	9301      	str	r3, [sp, #4]
 800d8a2:	9708      	str	r7, [sp, #32]
 800d8a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d8a8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d8ac:	b9b6      	cbnz	r6, 800d8dc <sqrt+0x8c>
 800d8ae:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800d8b2:	4668      	mov	r0, sp
 800d8b4:	f001 f81c 	bl	800e8f0 <matherr>
 800d8b8:	b1d0      	cbz	r0, 800d8f0 <sqrt+0xa0>
 800d8ba:	9b08      	ldr	r3, [sp, #32]
 800d8bc:	b11b      	cbz	r3, 800d8c6 <sqrt+0x76>
 800d8be:	f7ff fabf 	bl	800ce40 <__errno>
 800d8c2:	9b08      	ldr	r3, [sp, #32]
 800d8c4:	6003      	str	r3, [r0, #0]
 800d8c6:	ed9d 8b06 	vldr	d8, [sp, #24]
 800d8ca:	eeb0 0a48 	vmov.f32	s0, s16
 800d8ce:	eef0 0a68 	vmov.f32	s1, s17
 800d8d2:	b00b      	add	sp, #44	; 0x2c
 800d8d4:	ecbd 8b02 	vpop	{d8}
 800d8d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8dc:	4642      	mov	r2, r8
 800d8de:	464b      	mov	r3, r9
 800d8e0:	4640      	mov	r0, r8
 800d8e2:	4649      	mov	r1, r9
 800d8e4:	f7f2 ffb2 	bl	800084c <__aeabi_ddiv>
 800d8e8:	2e02      	cmp	r6, #2
 800d8ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d8ee:	d1e0      	bne.n	800d8b2 <sqrt+0x62>
 800d8f0:	f7ff faa6 	bl	800ce40 <__errno>
 800d8f4:	2321      	movs	r3, #33	; 0x21
 800d8f6:	6003      	str	r3, [r0, #0]
 800d8f8:	e7df      	b.n	800d8ba <sqrt+0x6a>
 800d8fa:	bf00      	nop
 800d8fc:	200000a8 	.word	0x200000a8
 800d900:	0800ed3b 	.word	0x0800ed3b
 800d904:	00000000 	.word	0x00000000

0800d908 <__ieee754_rem_pio2>:
 800d908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d90c:	ec57 6b10 	vmov	r6, r7, d0
 800d910:	4bc3      	ldr	r3, [pc, #780]	; (800dc20 <__ieee754_rem_pio2+0x318>)
 800d912:	b08d      	sub	sp, #52	; 0x34
 800d914:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d918:	4598      	cmp	r8, r3
 800d91a:	4604      	mov	r4, r0
 800d91c:	9704      	str	r7, [sp, #16]
 800d91e:	dc07      	bgt.n	800d930 <__ieee754_rem_pio2+0x28>
 800d920:	2200      	movs	r2, #0
 800d922:	2300      	movs	r3, #0
 800d924:	ed84 0b00 	vstr	d0, [r4]
 800d928:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d92c:	2500      	movs	r5, #0
 800d92e:	e027      	b.n	800d980 <__ieee754_rem_pio2+0x78>
 800d930:	4bbc      	ldr	r3, [pc, #752]	; (800dc24 <__ieee754_rem_pio2+0x31c>)
 800d932:	4598      	cmp	r8, r3
 800d934:	dc75      	bgt.n	800da22 <__ieee754_rem_pio2+0x11a>
 800d936:	9b04      	ldr	r3, [sp, #16]
 800d938:	4dbb      	ldr	r5, [pc, #748]	; (800dc28 <__ieee754_rem_pio2+0x320>)
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	ee10 0a10 	vmov	r0, s0
 800d940:	a3a9      	add	r3, pc, #676	; (adr r3, 800dbe8 <__ieee754_rem_pio2+0x2e0>)
 800d942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d946:	4639      	mov	r1, r7
 800d948:	dd36      	ble.n	800d9b8 <__ieee754_rem_pio2+0xb0>
 800d94a:	f7f2 fc9d 	bl	8000288 <__aeabi_dsub>
 800d94e:	45a8      	cmp	r8, r5
 800d950:	4606      	mov	r6, r0
 800d952:	460f      	mov	r7, r1
 800d954:	d018      	beq.n	800d988 <__ieee754_rem_pio2+0x80>
 800d956:	a3a6      	add	r3, pc, #664	; (adr r3, 800dbf0 <__ieee754_rem_pio2+0x2e8>)
 800d958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95c:	f7f2 fc94 	bl	8000288 <__aeabi_dsub>
 800d960:	4602      	mov	r2, r0
 800d962:	460b      	mov	r3, r1
 800d964:	e9c4 2300 	strd	r2, r3, [r4]
 800d968:	4630      	mov	r0, r6
 800d96a:	4639      	mov	r1, r7
 800d96c:	f7f2 fc8c 	bl	8000288 <__aeabi_dsub>
 800d970:	a39f      	add	r3, pc, #636	; (adr r3, 800dbf0 <__ieee754_rem_pio2+0x2e8>)
 800d972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d976:	f7f2 fc87 	bl	8000288 <__aeabi_dsub>
 800d97a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d97e:	2501      	movs	r5, #1
 800d980:	4628      	mov	r0, r5
 800d982:	b00d      	add	sp, #52	; 0x34
 800d984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d988:	a39b      	add	r3, pc, #620	; (adr r3, 800dbf8 <__ieee754_rem_pio2+0x2f0>)
 800d98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98e:	f7f2 fc7b 	bl	8000288 <__aeabi_dsub>
 800d992:	a39b      	add	r3, pc, #620	; (adr r3, 800dc00 <__ieee754_rem_pio2+0x2f8>)
 800d994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d998:	4606      	mov	r6, r0
 800d99a:	460f      	mov	r7, r1
 800d99c:	f7f2 fc74 	bl	8000288 <__aeabi_dsub>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	e9c4 2300 	strd	r2, r3, [r4]
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	4639      	mov	r1, r7
 800d9ac:	f7f2 fc6c 	bl	8000288 <__aeabi_dsub>
 800d9b0:	a393      	add	r3, pc, #588	; (adr r3, 800dc00 <__ieee754_rem_pio2+0x2f8>)
 800d9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b6:	e7de      	b.n	800d976 <__ieee754_rem_pio2+0x6e>
 800d9b8:	f7f2 fc68 	bl	800028c <__adddf3>
 800d9bc:	45a8      	cmp	r8, r5
 800d9be:	4606      	mov	r6, r0
 800d9c0:	460f      	mov	r7, r1
 800d9c2:	d016      	beq.n	800d9f2 <__ieee754_rem_pio2+0xea>
 800d9c4:	a38a      	add	r3, pc, #552	; (adr r3, 800dbf0 <__ieee754_rem_pio2+0x2e8>)
 800d9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ca:	f7f2 fc5f 	bl	800028c <__adddf3>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	e9c4 2300 	strd	r2, r3, [r4]
 800d9d6:	4630      	mov	r0, r6
 800d9d8:	4639      	mov	r1, r7
 800d9da:	f7f2 fc55 	bl	8000288 <__aeabi_dsub>
 800d9de:	a384      	add	r3, pc, #528	; (adr r3, 800dbf0 <__ieee754_rem_pio2+0x2e8>)
 800d9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e4:	f7f2 fc52 	bl	800028c <__adddf3>
 800d9e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d9ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d9f0:	e7c6      	b.n	800d980 <__ieee754_rem_pio2+0x78>
 800d9f2:	a381      	add	r3, pc, #516	; (adr r3, 800dbf8 <__ieee754_rem_pio2+0x2f0>)
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	f7f2 fc48 	bl	800028c <__adddf3>
 800d9fc:	a380      	add	r3, pc, #512	; (adr r3, 800dc00 <__ieee754_rem_pio2+0x2f8>)
 800d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da02:	4606      	mov	r6, r0
 800da04:	460f      	mov	r7, r1
 800da06:	f7f2 fc41 	bl	800028c <__adddf3>
 800da0a:	4602      	mov	r2, r0
 800da0c:	460b      	mov	r3, r1
 800da0e:	e9c4 2300 	strd	r2, r3, [r4]
 800da12:	4630      	mov	r0, r6
 800da14:	4639      	mov	r1, r7
 800da16:	f7f2 fc37 	bl	8000288 <__aeabi_dsub>
 800da1a:	a379      	add	r3, pc, #484	; (adr r3, 800dc00 <__ieee754_rem_pio2+0x2f8>)
 800da1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da20:	e7e0      	b.n	800d9e4 <__ieee754_rem_pio2+0xdc>
 800da22:	4b82      	ldr	r3, [pc, #520]	; (800dc2c <__ieee754_rem_pio2+0x324>)
 800da24:	4598      	cmp	r8, r3
 800da26:	f300 80d0 	bgt.w	800dbca <__ieee754_rem_pio2+0x2c2>
 800da2a:	f000 fed3 	bl	800e7d4 <fabs>
 800da2e:	ec57 6b10 	vmov	r6, r7, d0
 800da32:	ee10 0a10 	vmov	r0, s0
 800da36:	a374      	add	r3, pc, #464	; (adr r3, 800dc08 <__ieee754_rem_pio2+0x300>)
 800da38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3c:	4639      	mov	r1, r7
 800da3e:	f7f2 fddb 	bl	80005f8 <__aeabi_dmul>
 800da42:	2200      	movs	r2, #0
 800da44:	4b7a      	ldr	r3, [pc, #488]	; (800dc30 <__ieee754_rem_pio2+0x328>)
 800da46:	f7f2 fc21 	bl	800028c <__adddf3>
 800da4a:	f7f3 f885 	bl	8000b58 <__aeabi_d2iz>
 800da4e:	4605      	mov	r5, r0
 800da50:	f7f2 fd68 	bl	8000524 <__aeabi_i2d>
 800da54:	a364      	add	r3, pc, #400	; (adr r3, 800dbe8 <__ieee754_rem_pio2+0x2e0>)
 800da56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da5e:	f7f2 fdcb 	bl	80005f8 <__aeabi_dmul>
 800da62:	4602      	mov	r2, r0
 800da64:	460b      	mov	r3, r1
 800da66:	4630      	mov	r0, r6
 800da68:	4639      	mov	r1, r7
 800da6a:	f7f2 fc0d 	bl	8000288 <__aeabi_dsub>
 800da6e:	a360      	add	r3, pc, #384	; (adr r3, 800dbf0 <__ieee754_rem_pio2+0x2e8>)
 800da70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da74:	4682      	mov	sl, r0
 800da76:	468b      	mov	fp, r1
 800da78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da7c:	f7f2 fdbc 	bl	80005f8 <__aeabi_dmul>
 800da80:	2d1f      	cmp	r5, #31
 800da82:	4606      	mov	r6, r0
 800da84:	460f      	mov	r7, r1
 800da86:	dc0c      	bgt.n	800daa2 <__ieee754_rem_pio2+0x19a>
 800da88:	1e6a      	subs	r2, r5, #1
 800da8a:	4b6a      	ldr	r3, [pc, #424]	; (800dc34 <__ieee754_rem_pio2+0x32c>)
 800da8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da90:	4543      	cmp	r3, r8
 800da92:	d006      	beq.n	800daa2 <__ieee754_rem_pio2+0x19a>
 800da94:	4632      	mov	r2, r6
 800da96:	463b      	mov	r3, r7
 800da98:	4650      	mov	r0, sl
 800da9a:	4659      	mov	r1, fp
 800da9c:	f7f2 fbf4 	bl	8000288 <__aeabi_dsub>
 800daa0:	e00e      	b.n	800dac0 <__ieee754_rem_pio2+0x1b8>
 800daa2:	4632      	mov	r2, r6
 800daa4:	463b      	mov	r3, r7
 800daa6:	4650      	mov	r0, sl
 800daa8:	4659      	mov	r1, fp
 800daaa:	f7f2 fbed 	bl	8000288 <__aeabi_dsub>
 800daae:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dab2:	9305      	str	r3, [sp, #20]
 800dab4:	9a05      	ldr	r2, [sp, #20]
 800dab6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800daba:	1ad3      	subs	r3, r2, r3
 800dabc:	2b10      	cmp	r3, #16
 800dabe:	dc02      	bgt.n	800dac6 <__ieee754_rem_pio2+0x1be>
 800dac0:	e9c4 0100 	strd	r0, r1, [r4]
 800dac4:	e039      	b.n	800db3a <__ieee754_rem_pio2+0x232>
 800dac6:	a34c      	add	r3, pc, #304	; (adr r3, 800dbf8 <__ieee754_rem_pio2+0x2f0>)
 800dac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dacc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dad0:	f7f2 fd92 	bl	80005f8 <__aeabi_dmul>
 800dad4:	4606      	mov	r6, r0
 800dad6:	460f      	mov	r7, r1
 800dad8:	4602      	mov	r2, r0
 800dada:	460b      	mov	r3, r1
 800dadc:	4650      	mov	r0, sl
 800dade:	4659      	mov	r1, fp
 800dae0:	f7f2 fbd2 	bl	8000288 <__aeabi_dsub>
 800dae4:	4602      	mov	r2, r0
 800dae6:	460b      	mov	r3, r1
 800dae8:	4680      	mov	r8, r0
 800daea:	4689      	mov	r9, r1
 800daec:	4650      	mov	r0, sl
 800daee:	4659      	mov	r1, fp
 800daf0:	f7f2 fbca 	bl	8000288 <__aeabi_dsub>
 800daf4:	4632      	mov	r2, r6
 800daf6:	463b      	mov	r3, r7
 800daf8:	f7f2 fbc6 	bl	8000288 <__aeabi_dsub>
 800dafc:	a340      	add	r3, pc, #256	; (adr r3, 800dc00 <__ieee754_rem_pio2+0x2f8>)
 800dafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db02:	4606      	mov	r6, r0
 800db04:	460f      	mov	r7, r1
 800db06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db0a:	f7f2 fd75 	bl	80005f8 <__aeabi_dmul>
 800db0e:	4632      	mov	r2, r6
 800db10:	463b      	mov	r3, r7
 800db12:	f7f2 fbb9 	bl	8000288 <__aeabi_dsub>
 800db16:	4602      	mov	r2, r0
 800db18:	460b      	mov	r3, r1
 800db1a:	4606      	mov	r6, r0
 800db1c:	460f      	mov	r7, r1
 800db1e:	4640      	mov	r0, r8
 800db20:	4649      	mov	r1, r9
 800db22:	f7f2 fbb1 	bl	8000288 <__aeabi_dsub>
 800db26:	9a05      	ldr	r2, [sp, #20]
 800db28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800db2c:	1ad3      	subs	r3, r2, r3
 800db2e:	2b31      	cmp	r3, #49	; 0x31
 800db30:	dc20      	bgt.n	800db74 <__ieee754_rem_pio2+0x26c>
 800db32:	e9c4 0100 	strd	r0, r1, [r4]
 800db36:	46c2      	mov	sl, r8
 800db38:	46cb      	mov	fp, r9
 800db3a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800db3e:	4650      	mov	r0, sl
 800db40:	4642      	mov	r2, r8
 800db42:	464b      	mov	r3, r9
 800db44:	4659      	mov	r1, fp
 800db46:	f7f2 fb9f 	bl	8000288 <__aeabi_dsub>
 800db4a:	463b      	mov	r3, r7
 800db4c:	4632      	mov	r2, r6
 800db4e:	f7f2 fb9b 	bl	8000288 <__aeabi_dsub>
 800db52:	9b04      	ldr	r3, [sp, #16]
 800db54:	2b00      	cmp	r3, #0
 800db56:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800db5a:	f6bf af11 	bge.w	800d980 <__ieee754_rem_pio2+0x78>
 800db5e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800db62:	6063      	str	r3, [r4, #4]
 800db64:	f8c4 8000 	str.w	r8, [r4]
 800db68:	60a0      	str	r0, [r4, #8]
 800db6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db6e:	60e3      	str	r3, [r4, #12]
 800db70:	426d      	negs	r5, r5
 800db72:	e705      	b.n	800d980 <__ieee754_rem_pio2+0x78>
 800db74:	a326      	add	r3, pc, #152	; (adr r3, 800dc10 <__ieee754_rem_pio2+0x308>)
 800db76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db7e:	f7f2 fd3b 	bl	80005f8 <__aeabi_dmul>
 800db82:	4606      	mov	r6, r0
 800db84:	460f      	mov	r7, r1
 800db86:	4602      	mov	r2, r0
 800db88:	460b      	mov	r3, r1
 800db8a:	4640      	mov	r0, r8
 800db8c:	4649      	mov	r1, r9
 800db8e:	f7f2 fb7b 	bl	8000288 <__aeabi_dsub>
 800db92:	4602      	mov	r2, r0
 800db94:	460b      	mov	r3, r1
 800db96:	4682      	mov	sl, r0
 800db98:	468b      	mov	fp, r1
 800db9a:	4640      	mov	r0, r8
 800db9c:	4649      	mov	r1, r9
 800db9e:	f7f2 fb73 	bl	8000288 <__aeabi_dsub>
 800dba2:	4632      	mov	r2, r6
 800dba4:	463b      	mov	r3, r7
 800dba6:	f7f2 fb6f 	bl	8000288 <__aeabi_dsub>
 800dbaa:	a31b      	add	r3, pc, #108	; (adr r3, 800dc18 <__ieee754_rem_pio2+0x310>)
 800dbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb0:	4606      	mov	r6, r0
 800dbb2:	460f      	mov	r7, r1
 800dbb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbb8:	f7f2 fd1e 	bl	80005f8 <__aeabi_dmul>
 800dbbc:	4632      	mov	r2, r6
 800dbbe:	463b      	mov	r3, r7
 800dbc0:	f7f2 fb62 	bl	8000288 <__aeabi_dsub>
 800dbc4:	4606      	mov	r6, r0
 800dbc6:	460f      	mov	r7, r1
 800dbc8:	e764      	b.n	800da94 <__ieee754_rem_pio2+0x18c>
 800dbca:	4b1b      	ldr	r3, [pc, #108]	; (800dc38 <__ieee754_rem_pio2+0x330>)
 800dbcc:	4598      	cmp	r8, r3
 800dbce:	dd35      	ble.n	800dc3c <__ieee754_rem_pio2+0x334>
 800dbd0:	ee10 2a10 	vmov	r2, s0
 800dbd4:	463b      	mov	r3, r7
 800dbd6:	4630      	mov	r0, r6
 800dbd8:	4639      	mov	r1, r7
 800dbda:	f7f2 fb55 	bl	8000288 <__aeabi_dsub>
 800dbde:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dbe2:	e9c4 0100 	strd	r0, r1, [r4]
 800dbe6:	e6a1      	b.n	800d92c <__ieee754_rem_pio2+0x24>
 800dbe8:	54400000 	.word	0x54400000
 800dbec:	3ff921fb 	.word	0x3ff921fb
 800dbf0:	1a626331 	.word	0x1a626331
 800dbf4:	3dd0b461 	.word	0x3dd0b461
 800dbf8:	1a600000 	.word	0x1a600000
 800dbfc:	3dd0b461 	.word	0x3dd0b461
 800dc00:	2e037073 	.word	0x2e037073
 800dc04:	3ba3198a 	.word	0x3ba3198a
 800dc08:	6dc9c883 	.word	0x6dc9c883
 800dc0c:	3fe45f30 	.word	0x3fe45f30
 800dc10:	2e000000 	.word	0x2e000000
 800dc14:	3ba3198a 	.word	0x3ba3198a
 800dc18:	252049c1 	.word	0x252049c1
 800dc1c:	397b839a 	.word	0x397b839a
 800dc20:	3fe921fb 	.word	0x3fe921fb
 800dc24:	4002d97b 	.word	0x4002d97b
 800dc28:	3ff921fb 	.word	0x3ff921fb
 800dc2c:	413921fb 	.word	0x413921fb
 800dc30:	3fe00000 	.word	0x3fe00000
 800dc34:	0800ed40 	.word	0x0800ed40
 800dc38:	7fefffff 	.word	0x7fefffff
 800dc3c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800dc40:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800dc44:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800dc48:	4630      	mov	r0, r6
 800dc4a:	460f      	mov	r7, r1
 800dc4c:	f7f2 ff84 	bl	8000b58 <__aeabi_d2iz>
 800dc50:	f7f2 fc68 	bl	8000524 <__aeabi_i2d>
 800dc54:	4602      	mov	r2, r0
 800dc56:	460b      	mov	r3, r1
 800dc58:	4630      	mov	r0, r6
 800dc5a:	4639      	mov	r1, r7
 800dc5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dc60:	f7f2 fb12 	bl	8000288 <__aeabi_dsub>
 800dc64:	2200      	movs	r2, #0
 800dc66:	4b1f      	ldr	r3, [pc, #124]	; (800dce4 <__ieee754_rem_pio2+0x3dc>)
 800dc68:	f7f2 fcc6 	bl	80005f8 <__aeabi_dmul>
 800dc6c:	460f      	mov	r7, r1
 800dc6e:	4606      	mov	r6, r0
 800dc70:	f7f2 ff72 	bl	8000b58 <__aeabi_d2iz>
 800dc74:	f7f2 fc56 	bl	8000524 <__aeabi_i2d>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	4639      	mov	r1, r7
 800dc80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dc84:	f7f2 fb00 	bl	8000288 <__aeabi_dsub>
 800dc88:	2200      	movs	r2, #0
 800dc8a:	4b16      	ldr	r3, [pc, #88]	; (800dce4 <__ieee754_rem_pio2+0x3dc>)
 800dc8c:	f7f2 fcb4 	bl	80005f8 <__aeabi_dmul>
 800dc90:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dc94:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800dc98:	f04f 0803 	mov.w	r8, #3
 800dc9c:	2600      	movs	r6, #0
 800dc9e:	2700      	movs	r7, #0
 800dca0:	4632      	mov	r2, r6
 800dca2:	463b      	mov	r3, r7
 800dca4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800dca8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800dcac:	f7f2 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcb0:	b9b0      	cbnz	r0, 800dce0 <__ieee754_rem_pio2+0x3d8>
 800dcb2:	4b0d      	ldr	r3, [pc, #52]	; (800dce8 <__ieee754_rem_pio2+0x3e0>)
 800dcb4:	9301      	str	r3, [sp, #4]
 800dcb6:	2302      	movs	r3, #2
 800dcb8:	9300      	str	r3, [sp, #0]
 800dcba:	462a      	mov	r2, r5
 800dcbc:	4643      	mov	r3, r8
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	a806      	add	r0, sp, #24
 800dcc2:	f000 f98d 	bl	800dfe0 <__kernel_rem_pio2>
 800dcc6:	9b04      	ldr	r3, [sp, #16]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	4605      	mov	r5, r0
 800dccc:	f6bf ae58 	bge.w	800d980 <__ieee754_rem_pio2+0x78>
 800dcd0:	6863      	ldr	r3, [r4, #4]
 800dcd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dcd6:	6063      	str	r3, [r4, #4]
 800dcd8:	68e3      	ldr	r3, [r4, #12]
 800dcda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dcde:	e746      	b.n	800db6e <__ieee754_rem_pio2+0x266>
 800dce0:	46d0      	mov	r8, sl
 800dce2:	e7dd      	b.n	800dca0 <__ieee754_rem_pio2+0x398>
 800dce4:	41700000 	.word	0x41700000
 800dce8:	0800edc0 	.word	0x0800edc0

0800dcec <__ieee754_sqrt>:
 800dcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcf0:	4955      	ldr	r1, [pc, #340]	; (800de48 <__ieee754_sqrt+0x15c>)
 800dcf2:	ec55 4b10 	vmov	r4, r5, d0
 800dcf6:	43a9      	bics	r1, r5
 800dcf8:	462b      	mov	r3, r5
 800dcfa:	462a      	mov	r2, r5
 800dcfc:	d112      	bne.n	800dd24 <__ieee754_sqrt+0x38>
 800dcfe:	ee10 2a10 	vmov	r2, s0
 800dd02:	ee10 0a10 	vmov	r0, s0
 800dd06:	4629      	mov	r1, r5
 800dd08:	f7f2 fc76 	bl	80005f8 <__aeabi_dmul>
 800dd0c:	4602      	mov	r2, r0
 800dd0e:	460b      	mov	r3, r1
 800dd10:	4620      	mov	r0, r4
 800dd12:	4629      	mov	r1, r5
 800dd14:	f7f2 faba 	bl	800028c <__adddf3>
 800dd18:	4604      	mov	r4, r0
 800dd1a:	460d      	mov	r5, r1
 800dd1c:	ec45 4b10 	vmov	d0, r4, r5
 800dd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd24:	2d00      	cmp	r5, #0
 800dd26:	ee10 0a10 	vmov	r0, s0
 800dd2a:	4621      	mov	r1, r4
 800dd2c:	dc0f      	bgt.n	800dd4e <__ieee754_sqrt+0x62>
 800dd2e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dd32:	4330      	orrs	r0, r6
 800dd34:	d0f2      	beq.n	800dd1c <__ieee754_sqrt+0x30>
 800dd36:	b155      	cbz	r5, 800dd4e <__ieee754_sqrt+0x62>
 800dd38:	ee10 2a10 	vmov	r2, s0
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	4629      	mov	r1, r5
 800dd40:	f7f2 faa2 	bl	8000288 <__aeabi_dsub>
 800dd44:	4602      	mov	r2, r0
 800dd46:	460b      	mov	r3, r1
 800dd48:	f7f2 fd80 	bl	800084c <__aeabi_ddiv>
 800dd4c:	e7e4      	b.n	800dd18 <__ieee754_sqrt+0x2c>
 800dd4e:	151b      	asrs	r3, r3, #20
 800dd50:	d073      	beq.n	800de3a <__ieee754_sqrt+0x14e>
 800dd52:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dd56:	07dd      	lsls	r5, r3, #31
 800dd58:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800dd5c:	bf48      	it	mi
 800dd5e:	0fc8      	lsrmi	r0, r1, #31
 800dd60:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800dd64:	bf44      	itt	mi
 800dd66:	0049      	lslmi	r1, r1, #1
 800dd68:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800dd6c:	2500      	movs	r5, #0
 800dd6e:	1058      	asrs	r0, r3, #1
 800dd70:	0fcb      	lsrs	r3, r1, #31
 800dd72:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800dd76:	0049      	lsls	r1, r1, #1
 800dd78:	2316      	movs	r3, #22
 800dd7a:	462c      	mov	r4, r5
 800dd7c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800dd80:	19a7      	adds	r7, r4, r6
 800dd82:	4297      	cmp	r7, r2
 800dd84:	bfde      	ittt	le
 800dd86:	19bc      	addle	r4, r7, r6
 800dd88:	1bd2      	suble	r2, r2, r7
 800dd8a:	19ad      	addle	r5, r5, r6
 800dd8c:	0fcf      	lsrs	r7, r1, #31
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800dd94:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dd98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dd9c:	d1f0      	bne.n	800dd80 <__ieee754_sqrt+0x94>
 800dd9e:	f04f 0c20 	mov.w	ip, #32
 800dda2:	469e      	mov	lr, r3
 800dda4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dda8:	42a2      	cmp	r2, r4
 800ddaa:	eb06 070e 	add.w	r7, r6, lr
 800ddae:	dc02      	bgt.n	800ddb6 <__ieee754_sqrt+0xca>
 800ddb0:	d112      	bne.n	800ddd8 <__ieee754_sqrt+0xec>
 800ddb2:	428f      	cmp	r7, r1
 800ddb4:	d810      	bhi.n	800ddd8 <__ieee754_sqrt+0xec>
 800ddb6:	2f00      	cmp	r7, #0
 800ddb8:	eb07 0e06 	add.w	lr, r7, r6
 800ddbc:	da42      	bge.n	800de44 <__ieee754_sqrt+0x158>
 800ddbe:	f1be 0f00 	cmp.w	lr, #0
 800ddc2:	db3f      	blt.n	800de44 <__ieee754_sqrt+0x158>
 800ddc4:	f104 0801 	add.w	r8, r4, #1
 800ddc8:	1b12      	subs	r2, r2, r4
 800ddca:	428f      	cmp	r7, r1
 800ddcc:	bf88      	it	hi
 800ddce:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800ddd2:	1bc9      	subs	r1, r1, r7
 800ddd4:	4433      	add	r3, r6
 800ddd6:	4644      	mov	r4, r8
 800ddd8:	0052      	lsls	r2, r2, #1
 800ddda:	f1bc 0c01 	subs.w	ip, ip, #1
 800ddde:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800dde2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dde6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ddea:	d1dd      	bne.n	800dda8 <__ieee754_sqrt+0xbc>
 800ddec:	430a      	orrs	r2, r1
 800ddee:	d006      	beq.n	800ddfe <__ieee754_sqrt+0x112>
 800ddf0:	1c5c      	adds	r4, r3, #1
 800ddf2:	bf13      	iteet	ne
 800ddf4:	3301      	addne	r3, #1
 800ddf6:	3501      	addeq	r5, #1
 800ddf8:	4663      	moveq	r3, ip
 800ddfa:	f023 0301 	bicne.w	r3, r3, #1
 800ddfe:	106a      	asrs	r2, r5, #1
 800de00:	085b      	lsrs	r3, r3, #1
 800de02:	07e9      	lsls	r1, r5, #31
 800de04:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800de08:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800de0c:	bf48      	it	mi
 800de0e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800de12:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800de16:	461c      	mov	r4, r3
 800de18:	e780      	b.n	800dd1c <__ieee754_sqrt+0x30>
 800de1a:	0aca      	lsrs	r2, r1, #11
 800de1c:	3815      	subs	r0, #21
 800de1e:	0549      	lsls	r1, r1, #21
 800de20:	2a00      	cmp	r2, #0
 800de22:	d0fa      	beq.n	800de1a <__ieee754_sqrt+0x12e>
 800de24:	02d6      	lsls	r6, r2, #11
 800de26:	d50a      	bpl.n	800de3e <__ieee754_sqrt+0x152>
 800de28:	f1c3 0420 	rsb	r4, r3, #32
 800de2c:	fa21 f404 	lsr.w	r4, r1, r4
 800de30:	1e5d      	subs	r5, r3, #1
 800de32:	4099      	lsls	r1, r3
 800de34:	4322      	orrs	r2, r4
 800de36:	1b43      	subs	r3, r0, r5
 800de38:	e78b      	b.n	800dd52 <__ieee754_sqrt+0x66>
 800de3a:	4618      	mov	r0, r3
 800de3c:	e7f0      	b.n	800de20 <__ieee754_sqrt+0x134>
 800de3e:	0052      	lsls	r2, r2, #1
 800de40:	3301      	adds	r3, #1
 800de42:	e7ef      	b.n	800de24 <__ieee754_sqrt+0x138>
 800de44:	46a0      	mov	r8, r4
 800de46:	e7bf      	b.n	800ddc8 <__ieee754_sqrt+0xdc>
 800de48:	7ff00000 	.word	0x7ff00000
 800de4c:	00000000 	.word	0x00000000

0800de50 <__kernel_cos>:
 800de50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de54:	ec59 8b10 	vmov	r8, r9, d0
 800de58:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800de5c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800de60:	ed2d 8b02 	vpush	{d8}
 800de64:	eeb0 8a41 	vmov.f32	s16, s2
 800de68:	eef0 8a61 	vmov.f32	s17, s3
 800de6c:	da07      	bge.n	800de7e <__kernel_cos+0x2e>
 800de6e:	ee10 0a10 	vmov	r0, s0
 800de72:	4649      	mov	r1, r9
 800de74:	f7f2 fe70 	bl	8000b58 <__aeabi_d2iz>
 800de78:	2800      	cmp	r0, #0
 800de7a:	f000 8089 	beq.w	800df90 <__kernel_cos+0x140>
 800de7e:	4642      	mov	r2, r8
 800de80:	464b      	mov	r3, r9
 800de82:	4640      	mov	r0, r8
 800de84:	4649      	mov	r1, r9
 800de86:	f7f2 fbb7 	bl	80005f8 <__aeabi_dmul>
 800de8a:	2200      	movs	r2, #0
 800de8c:	4b4e      	ldr	r3, [pc, #312]	; (800dfc8 <__kernel_cos+0x178>)
 800de8e:	4604      	mov	r4, r0
 800de90:	460d      	mov	r5, r1
 800de92:	f7f2 fbb1 	bl	80005f8 <__aeabi_dmul>
 800de96:	a340      	add	r3, pc, #256	; (adr r3, 800df98 <__kernel_cos+0x148>)
 800de98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9c:	4682      	mov	sl, r0
 800de9e:	468b      	mov	fp, r1
 800dea0:	4620      	mov	r0, r4
 800dea2:	4629      	mov	r1, r5
 800dea4:	f7f2 fba8 	bl	80005f8 <__aeabi_dmul>
 800dea8:	a33d      	add	r3, pc, #244	; (adr r3, 800dfa0 <__kernel_cos+0x150>)
 800deaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deae:	f7f2 f9ed 	bl	800028c <__adddf3>
 800deb2:	4622      	mov	r2, r4
 800deb4:	462b      	mov	r3, r5
 800deb6:	f7f2 fb9f 	bl	80005f8 <__aeabi_dmul>
 800deba:	a33b      	add	r3, pc, #236	; (adr r3, 800dfa8 <__kernel_cos+0x158>)
 800debc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec0:	f7f2 f9e2 	bl	8000288 <__aeabi_dsub>
 800dec4:	4622      	mov	r2, r4
 800dec6:	462b      	mov	r3, r5
 800dec8:	f7f2 fb96 	bl	80005f8 <__aeabi_dmul>
 800decc:	a338      	add	r3, pc, #224	; (adr r3, 800dfb0 <__kernel_cos+0x160>)
 800dece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded2:	f7f2 f9db 	bl	800028c <__adddf3>
 800ded6:	4622      	mov	r2, r4
 800ded8:	462b      	mov	r3, r5
 800deda:	f7f2 fb8d 	bl	80005f8 <__aeabi_dmul>
 800dede:	a336      	add	r3, pc, #216	; (adr r3, 800dfb8 <__kernel_cos+0x168>)
 800dee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee4:	f7f2 f9d0 	bl	8000288 <__aeabi_dsub>
 800dee8:	4622      	mov	r2, r4
 800deea:	462b      	mov	r3, r5
 800deec:	f7f2 fb84 	bl	80005f8 <__aeabi_dmul>
 800def0:	a333      	add	r3, pc, #204	; (adr r3, 800dfc0 <__kernel_cos+0x170>)
 800def2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def6:	f7f2 f9c9 	bl	800028c <__adddf3>
 800defa:	4622      	mov	r2, r4
 800defc:	462b      	mov	r3, r5
 800defe:	f7f2 fb7b 	bl	80005f8 <__aeabi_dmul>
 800df02:	4622      	mov	r2, r4
 800df04:	462b      	mov	r3, r5
 800df06:	f7f2 fb77 	bl	80005f8 <__aeabi_dmul>
 800df0a:	ec53 2b18 	vmov	r2, r3, d8
 800df0e:	4604      	mov	r4, r0
 800df10:	460d      	mov	r5, r1
 800df12:	4640      	mov	r0, r8
 800df14:	4649      	mov	r1, r9
 800df16:	f7f2 fb6f 	bl	80005f8 <__aeabi_dmul>
 800df1a:	460b      	mov	r3, r1
 800df1c:	4602      	mov	r2, r0
 800df1e:	4629      	mov	r1, r5
 800df20:	4620      	mov	r0, r4
 800df22:	f7f2 f9b1 	bl	8000288 <__aeabi_dsub>
 800df26:	4b29      	ldr	r3, [pc, #164]	; (800dfcc <__kernel_cos+0x17c>)
 800df28:	429e      	cmp	r6, r3
 800df2a:	4680      	mov	r8, r0
 800df2c:	4689      	mov	r9, r1
 800df2e:	dc11      	bgt.n	800df54 <__kernel_cos+0x104>
 800df30:	4602      	mov	r2, r0
 800df32:	460b      	mov	r3, r1
 800df34:	4650      	mov	r0, sl
 800df36:	4659      	mov	r1, fp
 800df38:	f7f2 f9a6 	bl	8000288 <__aeabi_dsub>
 800df3c:	460b      	mov	r3, r1
 800df3e:	4924      	ldr	r1, [pc, #144]	; (800dfd0 <__kernel_cos+0x180>)
 800df40:	4602      	mov	r2, r0
 800df42:	2000      	movs	r0, #0
 800df44:	f7f2 f9a0 	bl	8000288 <__aeabi_dsub>
 800df48:	ecbd 8b02 	vpop	{d8}
 800df4c:	ec41 0b10 	vmov	d0, r0, r1
 800df50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df54:	4b1f      	ldr	r3, [pc, #124]	; (800dfd4 <__kernel_cos+0x184>)
 800df56:	491e      	ldr	r1, [pc, #120]	; (800dfd0 <__kernel_cos+0x180>)
 800df58:	429e      	cmp	r6, r3
 800df5a:	bfcc      	ite	gt
 800df5c:	4d1e      	ldrgt	r5, [pc, #120]	; (800dfd8 <__kernel_cos+0x188>)
 800df5e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800df62:	2400      	movs	r4, #0
 800df64:	4622      	mov	r2, r4
 800df66:	462b      	mov	r3, r5
 800df68:	2000      	movs	r0, #0
 800df6a:	f7f2 f98d 	bl	8000288 <__aeabi_dsub>
 800df6e:	4622      	mov	r2, r4
 800df70:	4606      	mov	r6, r0
 800df72:	460f      	mov	r7, r1
 800df74:	462b      	mov	r3, r5
 800df76:	4650      	mov	r0, sl
 800df78:	4659      	mov	r1, fp
 800df7a:	f7f2 f985 	bl	8000288 <__aeabi_dsub>
 800df7e:	4642      	mov	r2, r8
 800df80:	464b      	mov	r3, r9
 800df82:	f7f2 f981 	bl	8000288 <__aeabi_dsub>
 800df86:	4602      	mov	r2, r0
 800df88:	460b      	mov	r3, r1
 800df8a:	4630      	mov	r0, r6
 800df8c:	4639      	mov	r1, r7
 800df8e:	e7d9      	b.n	800df44 <__kernel_cos+0xf4>
 800df90:	2000      	movs	r0, #0
 800df92:	490f      	ldr	r1, [pc, #60]	; (800dfd0 <__kernel_cos+0x180>)
 800df94:	e7d8      	b.n	800df48 <__kernel_cos+0xf8>
 800df96:	bf00      	nop
 800df98:	be8838d4 	.word	0xbe8838d4
 800df9c:	bda8fae9 	.word	0xbda8fae9
 800dfa0:	bdb4b1c4 	.word	0xbdb4b1c4
 800dfa4:	3e21ee9e 	.word	0x3e21ee9e
 800dfa8:	809c52ad 	.word	0x809c52ad
 800dfac:	3e927e4f 	.word	0x3e927e4f
 800dfb0:	19cb1590 	.word	0x19cb1590
 800dfb4:	3efa01a0 	.word	0x3efa01a0
 800dfb8:	16c15177 	.word	0x16c15177
 800dfbc:	3f56c16c 	.word	0x3f56c16c
 800dfc0:	5555554c 	.word	0x5555554c
 800dfc4:	3fa55555 	.word	0x3fa55555
 800dfc8:	3fe00000 	.word	0x3fe00000
 800dfcc:	3fd33332 	.word	0x3fd33332
 800dfd0:	3ff00000 	.word	0x3ff00000
 800dfd4:	3fe90000 	.word	0x3fe90000
 800dfd8:	3fd20000 	.word	0x3fd20000
 800dfdc:	00000000 	.word	0x00000000

0800dfe0 <__kernel_rem_pio2>:
 800dfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe4:	ed2d 8b02 	vpush	{d8}
 800dfe8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800dfec:	1ed4      	subs	r4, r2, #3
 800dfee:	9308      	str	r3, [sp, #32]
 800dff0:	9101      	str	r1, [sp, #4]
 800dff2:	4bc5      	ldr	r3, [pc, #788]	; (800e308 <__kernel_rem_pio2+0x328>)
 800dff4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800dff6:	9009      	str	r0, [sp, #36]	; 0x24
 800dff8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dffc:	9304      	str	r3, [sp, #16]
 800dffe:	9b08      	ldr	r3, [sp, #32]
 800e000:	3b01      	subs	r3, #1
 800e002:	9307      	str	r3, [sp, #28]
 800e004:	2318      	movs	r3, #24
 800e006:	fb94 f4f3 	sdiv	r4, r4, r3
 800e00a:	f06f 0317 	mvn.w	r3, #23
 800e00e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800e012:	fb04 3303 	mla	r3, r4, r3, r3
 800e016:	eb03 0a02 	add.w	sl, r3, r2
 800e01a:	9b04      	ldr	r3, [sp, #16]
 800e01c:	9a07      	ldr	r2, [sp, #28]
 800e01e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800e2f8 <__kernel_rem_pio2+0x318>
 800e022:	eb03 0802 	add.w	r8, r3, r2
 800e026:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e028:	1aa7      	subs	r7, r4, r2
 800e02a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e02e:	ae22      	add	r6, sp, #136	; 0x88
 800e030:	2500      	movs	r5, #0
 800e032:	4545      	cmp	r5, r8
 800e034:	dd13      	ble.n	800e05e <__kernel_rem_pio2+0x7e>
 800e036:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800e2f8 <__kernel_rem_pio2+0x318>
 800e03a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e03e:	2600      	movs	r6, #0
 800e040:	9b04      	ldr	r3, [sp, #16]
 800e042:	429e      	cmp	r6, r3
 800e044:	dc32      	bgt.n	800e0ac <__kernel_rem_pio2+0xcc>
 800e046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e048:	9302      	str	r3, [sp, #8]
 800e04a:	9b08      	ldr	r3, [sp, #32]
 800e04c:	199d      	adds	r5, r3, r6
 800e04e:	ab22      	add	r3, sp, #136	; 0x88
 800e050:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e054:	9306      	str	r3, [sp, #24]
 800e056:	ec59 8b18 	vmov	r8, r9, d8
 800e05a:	2700      	movs	r7, #0
 800e05c:	e01f      	b.n	800e09e <__kernel_rem_pio2+0xbe>
 800e05e:	42ef      	cmn	r7, r5
 800e060:	d407      	bmi.n	800e072 <__kernel_rem_pio2+0x92>
 800e062:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e066:	f7f2 fa5d 	bl	8000524 <__aeabi_i2d>
 800e06a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e06e:	3501      	adds	r5, #1
 800e070:	e7df      	b.n	800e032 <__kernel_rem_pio2+0x52>
 800e072:	ec51 0b18 	vmov	r0, r1, d8
 800e076:	e7f8      	b.n	800e06a <__kernel_rem_pio2+0x8a>
 800e078:	9906      	ldr	r1, [sp, #24]
 800e07a:	9d02      	ldr	r5, [sp, #8]
 800e07c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800e080:	9106      	str	r1, [sp, #24]
 800e082:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800e086:	9502      	str	r5, [sp, #8]
 800e088:	f7f2 fab6 	bl	80005f8 <__aeabi_dmul>
 800e08c:	4602      	mov	r2, r0
 800e08e:	460b      	mov	r3, r1
 800e090:	4640      	mov	r0, r8
 800e092:	4649      	mov	r1, r9
 800e094:	f7f2 f8fa 	bl	800028c <__adddf3>
 800e098:	3701      	adds	r7, #1
 800e09a:	4680      	mov	r8, r0
 800e09c:	4689      	mov	r9, r1
 800e09e:	9b07      	ldr	r3, [sp, #28]
 800e0a0:	429f      	cmp	r7, r3
 800e0a2:	dde9      	ble.n	800e078 <__kernel_rem_pio2+0x98>
 800e0a4:	e8eb 8902 	strd	r8, r9, [fp], #8
 800e0a8:	3601      	adds	r6, #1
 800e0aa:	e7c9      	b.n	800e040 <__kernel_rem_pio2+0x60>
 800e0ac:	9b04      	ldr	r3, [sp, #16]
 800e0ae:	aa0e      	add	r2, sp, #56	; 0x38
 800e0b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e0b4:	930c      	str	r3, [sp, #48]	; 0x30
 800e0b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e0b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e0bc:	9c04      	ldr	r4, [sp, #16]
 800e0be:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0c0:	ab9a      	add	r3, sp, #616	; 0x268
 800e0c2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800e0c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e0ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e0ce:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800e0d2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800e0d6:	ab9a      	add	r3, sp, #616	; 0x268
 800e0d8:	445b      	add	r3, fp
 800e0da:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800e0de:	2500      	movs	r5, #0
 800e0e0:	1b63      	subs	r3, r4, r5
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	dc78      	bgt.n	800e1d8 <__kernel_rem_pio2+0x1f8>
 800e0e6:	4650      	mov	r0, sl
 800e0e8:	ec49 8b10 	vmov	d0, r8, r9
 800e0ec:	f000 fc04 	bl	800e8f8 <scalbn>
 800e0f0:	ec57 6b10 	vmov	r6, r7, d0
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e0fa:	ee10 0a10 	vmov	r0, s0
 800e0fe:	4639      	mov	r1, r7
 800e100:	f7f2 fa7a 	bl	80005f8 <__aeabi_dmul>
 800e104:	ec41 0b10 	vmov	d0, r0, r1
 800e108:	f000 fb6e 	bl	800e7e8 <floor>
 800e10c:	2200      	movs	r2, #0
 800e10e:	ec51 0b10 	vmov	r0, r1, d0
 800e112:	4b7e      	ldr	r3, [pc, #504]	; (800e30c <__kernel_rem_pio2+0x32c>)
 800e114:	f7f2 fa70 	bl	80005f8 <__aeabi_dmul>
 800e118:	4602      	mov	r2, r0
 800e11a:	460b      	mov	r3, r1
 800e11c:	4630      	mov	r0, r6
 800e11e:	4639      	mov	r1, r7
 800e120:	f7f2 f8b2 	bl	8000288 <__aeabi_dsub>
 800e124:	460f      	mov	r7, r1
 800e126:	4606      	mov	r6, r0
 800e128:	f7f2 fd16 	bl	8000b58 <__aeabi_d2iz>
 800e12c:	9006      	str	r0, [sp, #24]
 800e12e:	f7f2 f9f9 	bl	8000524 <__aeabi_i2d>
 800e132:	4602      	mov	r2, r0
 800e134:	460b      	mov	r3, r1
 800e136:	4630      	mov	r0, r6
 800e138:	4639      	mov	r1, r7
 800e13a:	f7f2 f8a5 	bl	8000288 <__aeabi_dsub>
 800e13e:	f1ba 0f00 	cmp.w	sl, #0
 800e142:	4606      	mov	r6, r0
 800e144:	460f      	mov	r7, r1
 800e146:	dd6c      	ble.n	800e222 <__kernel_rem_pio2+0x242>
 800e148:	1e62      	subs	r2, r4, #1
 800e14a:	ab0e      	add	r3, sp, #56	; 0x38
 800e14c:	f1ca 0118 	rsb	r1, sl, #24
 800e150:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e154:	9d06      	ldr	r5, [sp, #24]
 800e156:	fa40 f301 	asr.w	r3, r0, r1
 800e15a:	441d      	add	r5, r3
 800e15c:	408b      	lsls	r3, r1
 800e15e:	1ac0      	subs	r0, r0, r3
 800e160:	ab0e      	add	r3, sp, #56	; 0x38
 800e162:	9506      	str	r5, [sp, #24]
 800e164:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e168:	f1ca 0317 	rsb	r3, sl, #23
 800e16c:	fa40 f303 	asr.w	r3, r0, r3
 800e170:	9302      	str	r3, [sp, #8]
 800e172:	9b02      	ldr	r3, [sp, #8]
 800e174:	2b00      	cmp	r3, #0
 800e176:	dd62      	ble.n	800e23e <__kernel_rem_pio2+0x25e>
 800e178:	9b06      	ldr	r3, [sp, #24]
 800e17a:	2200      	movs	r2, #0
 800e17c:	3301      	adds	r3, #1
 800e17e:	9306      	str	r3, [sp, #24]
 800e180:	4615      	mov	r5, r2
 800e182:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e186:	4294      	cmp	r4, r2
 800e188:	f300 8095 	bgt.w	800e2b6 <__kernel_rem_pio2+0x2d6>
 800e18c:	f1ba 0f00 	cmp.w	sl, #0
 800e190:	dd07      	ble.n	800e1a2 <__kernel_rem_pio2+0x1c2>
 800e192:	f1ba 0f01 	cmp.w	sl, #1
 800e196:	f000 80a2 	beq.w	800e2de <__kernel_rem_pio2+0x2fe>
 800e19a:	f1ba 0f02 	cmp.w	sl, #2
 800e19e:	f000 80c1 	beq.w	800e324 <__kernel_rem_pio2+0x344>
 800e1a2:	9b02      	ldr	r3, [sp, #8]
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	d14a      	bne.n	800e23e <__kernel_rem_pio2+0x25e>
 800e1a8:	4632      	mov	r2, r6
 800e1aa:	463b      	mov	r3, r7
 800e1ac:	2000      	movs	r0, #0
 800e1ae:	4958      	ldr	r1, [pc, #352]	; (800e310 <__kernel_rem_pio2+0x330>)
 800e1b0:	f7f2 f86a 	bl	8000288 <__aeabi_dsub>
 800e1b4:	4606      	mov	r6, r0
 800e1b6:	460f      	mov	r7, r1
 800e1b8:	2d00      	cmp	r5, #0
 800e1ba:	d040      	beq.n	800e23e <__kernel_rem_pio2+0x25e>
 800e1bc:	4650      	mov	r0, sl
 800e1be:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800e300 <__kernel_rem_pio2+0x320>
 800e1c2:	f000 fb99 	bl	800e8f8 <scalbn>
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	4639      	mov	r1, r7
 800e1ca:	ec53 2b10 	vmov	r2, r3, d0
 800e1ce:	f7f2 f85b 	bl	8000288 <__aeabi_dsub>
 800e1d2:	4606      	mov	r6, r0
 800e1d4:	460f      	mov	r7, r1
 800e1d6:	e032      	b.n	800e23e <__kernel_rem_pio2+0x25e>
 800e1d8:	2200      	movs	r2, #0
 800e1da:	4b4e      	ldr	r3, [pc, #312]	; (800e314 <__kernel_rem_pio2+0x334>)
 800e1dc:	4640      	mov	r0, r8
 800e1de:	4649      	mov	r1, r9
 800e1e0:	f7f2 fa0a 	bl	80005f8 <__aeabi_dmul>
 800e1e4:	f7f2 fcb8 	bl	8000b58 <__aeabi_d2iz>
 800e1e8:	f7f2 f99c 	bl	8000524 <__aeabi_i2d>
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	4b4a      	ldr	r3, [pc, #296]	; (800e318 <__kernel_rem_pio2+0x338>)
 800e1f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1f4:	f7f2 fa00 	bl	80005f8 <__aeabi_dmul>
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	4640      	mov	r0, r8
 800e1fe:	4649      	mov	r1, r9
 800e200:	f7f2 f842 	bl	8000288 <__aeabi_dsub>
 800e204:	f7f2 fca8 	bl	8000b58 <__aeabi_d2iz>
 800e208:	ab0e      	add	r3, sp, #56	; 0x38
 800e20a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800e20e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e216:	f7f2 f839 	bl	800028c <__adddf3>
 800e21a:	3501      	adds	r5, #1
 800e21c:	4680      	mov	r8, r0
 800e21e:	4689      	mov	r9, r1
 800e220:	e75e      	b.n	800e0e0 <__kernel_rem_pio2+0x100>
 800e222:	d105      	bne.n	800e230 <__kernel_rem_pio2+0x250>
 800e224:	1e63      	subs	r3, r4, #1
 800e226:	aa0e      	add	r2, sp, #56	; 0x38
 800e228:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e22c:	15c3      	asrs	r3, r0, #23
 800e22e:	e79f      	b.n	800e170 <__kernel_rem_pio2+0x190>
 800e230:	2200      	movs	r2, #0
 800e232:	4b3a      	ldr	r3, [pc, #232]	; (800e31c <__kernel_rem_pio2+0x33c>)
 800e234:	f7f2 fc66 	bl	8000b04 <__aeabi_dcmpge>
 800e238:	2800      	cmp	r0, #0
 800e23a:	d139      	bne.n	800e2b0 <__kernel_rem_pio2+0x2d0>
 800e23c:	9002      	str	r0, [sp, #8]
 800e23e:	2200      	movs	r2, #0
 800e240:	2300      	movs	r3, #0
 800e242:	4630      	mov	r0, r6
 800e244:	4639      	mov	r1, r7
 800e246:	f7f2 fc3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e24a:	2800      	cmp	r0, #0
 800e24c:	f000 80c7 	beq.w	800e3de <__kernel_rem_pio2+0x3fe>
 800e250:	1e65      	subs	r5, r4, #1
 800e252:	462b      	mov	r3, r5
 800e254:	2200      	movs	r2, #0
 800e256:	9904      	ldr	r1, [sp, #16]
 800e258:	428b      	cmp	r3, r1
 800e25a:	da6a      	bge.n	800e332 <__kernel_rem_pio2+0x352>
 800e25c:	2a00      	cmp	r2, #0
 800e25e:	f000 8088 	beq.w	800e372 <__kernel_rem_pio2+0x392>
 800e262:	ab0e      	add	r3, sp, #56	; 0x38
 800e264:	f1aa 0a18 	sub.w	sl, sl, #24
 800e268:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	f000 80b4 	beq.w	800e3da <__kernel_rem_pio2+0x3fa>
 800e272:	4650      	mov	r0, sl
 800e274:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800e300 <__kernel_rem_pio2+0x320>
 800e278:	f000 fb3e 	bl	800e8f8 <scalbn>
 800e27c:	00ec      	lsls	r4, r5, #3
 800e27e:	ab72      	add	r3, sp, #456	; 0x1c8
 800e280:	191e      	adds	r6, r3, r4
 800e282:	ec59 8b10 	vmov	r8, r9, d0
 800e286:	f106 0a08 	add.w	sl, r6, #8
 800e28a:	462f      	mov	r7, r5
 800e28c:	2f00      	cmp	r7, #0
 800e28e:	f280 80df 	bge.w	800e450 <__kernel_rem_pio2+0x470>
 800e292:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800e2f8 <__kernel_rem_pio2+0x318>
 800e296:	f04f 0a00 	mov.w	sl, #0
 800e29a:	eba5 030a 	sub.w	r3, r5, sl
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	f2c0 810a 	blt.w	800e4b8 <__kernel_rem_pio2+0x4d8>
 800e2a4:	f8df b078 	ldr.w	fp, [pc, #120]	; 800e320 <__kernel_rem_pio2+0x340>
 800e2a8:	ec59 8b18 	vmov	r8, r9, d8
 800e2ac:	2700      	movs	r7, #0
 800e2ae:	e0f5      	b.n	800e49c <__kernel_rem_pio2+0x4bc>
 800e2b0:	2302      	movs	r3, #2
 800e2b2:	9302      	str	r3, [sp, #8]
 800e2b4:	e760      	b.n	800e178 <__kernel_rem_pio2+0x198>
 800e2b6:	ab0e      	add	r3, sp, #56	; 0x38
 800e2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2bc:	b94d      	cbnz	r5, 800e2d2 <__kernel_rem_pio2+0x2f2>
 800e2be:	b12b      	cbz	r3, 800e2cc <__kernel_rem_pio2+0x2ec>
 800e2c0:	a80e      	add	r0, sp, #56	; 0x38
 800e2c2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e2c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	3201      	adds	r2, #1
 800e2ce:	461d      	mov	r5, r3
 800e2d0:	e759      	b.n	800e186 <__kernel_rem_pio2+0x1a6>
 800e2d2:	a80e      	add	r0, sp, #56	; 0x38
 800e2d4:	1acb      	subs	r3, r1, r3
 800e2d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e2da:	462b      	mov	r3, r5
 800e2dc:	e7f6      	b.n	800e2cc <__kernel_rem_pio2+0x2ec>
 800e2de:	1e62      	subs	r2, r4, #1
 800e2e0:	ab0e      	add	r3, sp, #56	; 0x38
 800e2e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e2ea:	a90e      	add	r1, sp, #56	; 0x38
 800e2ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e2f0:	e757      	b.n	800e1a2 <__kernel_rem_pio2+0x1c2>
 800e2f2:	bf00      	nop
 800e2f4:	f3af 8000 	nop.w
	...
 800e304:	3ff00000 	.word	0x3ff00000
 800e308:	0800ef08 	.word	0x0800ef08
 800e30c:	40200000 	.word	0x40200000
 800e310:	3ff00000 	.word	0x3ff00000
 800e314:	3e700000 	.word	0x3e700000
 800e318:	41700000 	.word	0x41700000
 800e31c:	3fe00000 	.word	0x3fe00000
 800e320:	0800eec8 	.word	0x0800eec8
 800e324:	1e62      	subs	r2, r4, #1
 800e326:	ab0e      	add	r3, sp, #56	; 0x38
 800e328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e32c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e330:	e7db      	b.n	800e2ea <__kernel_rem_pio2+0x30a>
 800e332:	a90e      	add	r1, sp, #56	; 0x38
 800e334:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e338:	3b01      	subs	r3, #1
 800e33a:	430a      	orrs	r2, r1
 800e33c:	e78b      	b.n	800e256 <__kernel_rem_pio2+0x276>
 800e33e:	3301      	adds	r3, #1
 800e340:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e344:	2900      	cmp	r1, #0
 800e346:	d0fa      	beq.n	800e33e <__kernel_rem_pio2+0x35e>
 800e348:	9a08      	ldr	r2, [sp, #32]
 800e34a:	4422      	add	r2, r4
 800e34c:	00d2      	lsls	r2, r2, #3
 800e34e:	a922      	add	r1, sp, #136	; 0x88
 800e350:	18e3      	adds	r3, r4, r3
 800e352:	9206      	str	r2, [sp, #24]
 800e354:	440a      	add	r2, r1
 800e356:	9302      	str	r3, [sp, #8]
 800e358:	f10b 0108 	add.w	r1, fp, #8
 800e35c:	f102 0308 	add.w	r3, r2, #8
 800e360:	1c66      	adds	r6, r4, #1
 800e362:	910a      	str	r1, [sp, #40]	; 0x28
 800e364:	2500      	movs	r5, #0
 800e366:	930d      	str	r3, [sp, #52]	; 0x34
 800e368:	9b02      	ldr	r3, [sp, #8]
 800e36a:	42b3      	cmp	r3, r6
 800e36c:	da04      	bge.n	800e378 <__kernel_rem_pio2+0x398>
 800e36e:	461c      	mov	r4, r3
 800e370:	e6a6      	b.n	800e0c0 <__kernel_rem_pio2+0xe0>
 800e372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e374:	2301      	movs	r3, #1
 800e376:	e7e3      	b.n	800e340 <__kernel_rem_pio2+0x360>
 800e378:	9b06      	ldr	r3, [sp, #24]
 800e37a:	18ef      	adds	r7, r5, r3
 800e37c:	ab22      	add	r3, sp, #136	; 0x88
 800e37e:	441f      	add	r7, r3
 800e380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e382:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e386:	f7f2 f8cd 	bl	8000524 <__aeabi_i2d>
 800e38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e38c:	461c      	mov	r4, r3
 800e38e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e390:	e9c7 0100 	strd	r0, r1, [r7]
 800e394:	eb03 0b05 	add.w	fp, r3, r5
 800e398:	2700      	movs	r7, #0
 800e39a:	f04f 0800 	mov.w	r8, #0
 800e39e:	f04f 0900 	mov.w	r9, #0
 800e3a2:	9b07      	ldr	r3, [sp, #28]
 800e3a4:	429f      	cmp	r7, r3
 800e3a6:	dd08      	ble.n	800e3ba <__kernel_rem_pio2+0x3da>
 800e3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3aa:	aa72      	add	r2, sp, #456	; 0x1c8
 800e3ac:	18eb      	adds	r3, r5, r3
 800e3ae:	4413      	add	r3, r2
 800e3b0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800e3b4:	3601      	adds	r6, #1
 800e3b6:	3508      	adds	r5, #8
 800e3b8:	e7d6      	b.n	800e368 <__kernel_rem_pio2+0x388>
 800e3ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e3be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e3c2:	f7f2 f919 	bl	80005f8 <__aeabi_dmul>
 800e3c6:	4602      	mov	r2, r0
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	4640      	mov	r0, r8
 800e3cc:	4649      	mov	r1, r9
 800e3ce:	f7f1 ff5d 	bl	800028c <__adddf3>
 800e3d2:	3701      	adds	r7, #1
 800e3d4:	4680      	mov	r8, r0
 800e3d6:	4689      	mov	r9, r1
 800e3d8:	e7e3      	b.n	800e3a2 <__kernel_rem_pio2+0x3c2>
 800e3da:	3d01      	subs	r5, #1
 800e3dc:	e741      	b.n	800e262 <__kernel_rem_pio2+0x282>
 800e3de:	f1ca 0000 	rsb	r0, sl, #0
 800e3e2:	ec47 6b10 	vmov	d0, r6, r7
 800e3e6:	f000 fa87 	bl	800e8f8 <scalbn>
 800e3ea:	ec57 6b10 	vmov	r6, r7, d0
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	4b99      	ldr	r3, [pc, #612]	; (800e658 <__kernel_rem_pio2+0x678>)
 800e3f2:	ee10 0a10 	vmov	r0, s0
 800e3f6:	4639      	mov	r1, r7
 800e3f8:	f7f2 fb84 	bl	8000b04 <__aeabi_dcmpge>
 800e3fc:	b1f8      	cbz	r0, 800e43e <__kernel_rem_pio2+0x45e>
 800e3fe:	2200      	movs	r2, #0
 800e400:	4b96      	ldr	r3, [pc, #600]	; (800e65c <__kernel_rem_pio2+0x67c>)
 800e402:	4630      	mov	r0, r6
 800e404:	4639      	mov	r1, r7
 800e406:	f7f2 f8f7 	bl	80005f8 <__aeabi_dmul>
 800e40a:	f7f2 fba5 	bl	8000b58 <__aeabi_d2iz>
 800e40e:	4680      	mov	r8, r0
 800e410:	f7f2 f888 	bl	8000524 <__aeabi_i2d>
 800e414:	2200      	movs	r2, #0
 800e416:	4b90      	ldr	r3, [pc, #576]	; (800e658 <__kernel_rem_pio2+0x678>)
 800e418:	f7f2 f8ee 	bl	80005f8 <__aeabi_dmul>
 800e41c:	460b      	mov	r3, r1
 800e41e:	4602      	mov	r2, r0
 800e420:	4639      	mov	r1, r7
 800e422:	4630      	mov	r0, r6
 800e424:	f7f1 ff30 	bl	8000288 <__aeabi_dsub>
 800e428:	f7f2 fb96 	bl	8000b58 <__aeabi_d2iz>
 800e42c:	1c65      	adds	r5, r4, #1
 800e42e:	ab0e      	add	r3, sp, #56	; 0x38
 800e430:	f10a 0a18 	add.w	sl, sl, #24
 800e434:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e438:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e43c:	e719      	b.n	800e272 <__kernel_rem_pio2+0x292>
 800e43e:	4630      	mov	r0, r6
 800e440:	4639      	mov	r1, r7
 800e442:	f7f2 fb89 	bl	8000b58 <__aeabi_d2iz>
 800e446:	ab0e      	add	r3, sp, #56	; 0x38
 800e448:	4625      	mov	r5, r4
 800e44a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e44e:	e710      	b.n	800e272 <__kernel_rem_pio2+0x292>
 800e450:	ab0e      	add	r3, sp, #56	; 0x38
 800e452:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e456:	f7f2 f865 	bl	8000524 <__aeabi_i2d>
 800e45a:	4642      	mov	r2, r8
 800e45c:	464b      	mov	r3, r9
 800e45e:	f7f2 f8cb 	bl	80005f8 <__aeabi_dmul>
 800e462:	2200      	movs	r2, #0
 800e464:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e468:	4b7c      	ldr	r3, [pc, #496]	; (800e65c <__kernel_rem_pio2+0x67c>)
 800e46a:	4640      	mov	r0, r8
 800e46c:	4649      	mov	r1, r9
 800e46e:	f7f2 f8c3 	bl	80005f8 <__aeabi_dmul>
 800e472:	3f01      	subs	r7, #1
 800e474:	4680      	mov	r8, r0
 800e476:	4689      	mov	r9, r1
 800e478:	e708      	b.n	800e28c <__kernel_rem_pio2+0x2ac>
 800e47a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800e47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e482:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800e486:	f7f2 f8b7 	bl	80005f8 <__aeabi_dmul>
 800e48a:	4602      	mov	r2, r0
 800e48c:	460b      	mov	r3, r1
 800e48e:	4640      	mov	r0, r8
 800e490:	4649      	mov	r1, r9
 800e492:	f7f1 fefb 	bl	800028c <__adddf3>
 800e496:	3701      	adds	r7, #1
 800e498:	4680      	mov	r8, r0
 800e49a:	4689      	mov	r9, r1
 800e49c:	9b04      	ldr	r3, [sp, #16]
 800e49e:	429f      	cmp	r7, r3
 800e4a0:	dc01      	bgt.n	800e4a6 <__kernel_rem_pio2+0x4c6>
 800e4a2:	45ba      	cmp	sl, r7
 800e4a4:	dae9      	bge.n	800e47a <__kernel_rem_pio2+0x49a>
 800e4a6:	ab4a      	add	r3, sp, #296	; 0x128
 800e4a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e4ac:	e9c3 8900 	strd	r8, r9, [r3]
 800e4b0:	f10a 0a01 	add.w	sl, sl, #1
 800e4b4:	3e08      	subs	r6, #8
 800e4b6:	e6f0      	b.n	800e29a <__kernel_rem_pio2+0x2ba>
 800e4b8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e4ba:	2b03      	cmp	r3, #3
 800e4bc:	d85b      	bhi.n	800e576 <__kernel_rem_pio2+0x596>
 800e4be:	e8df f003 	tbb	[pc, r3]
 800e4c2:	264a      	.short	0x264a
 800e4c4:	0226      	.short	0x0226
 800e4c6:	ab9a      	add	r3, sp, #616	; 0x268
 800e4c8:	441c      	add	r4, r3
 800e4ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e4ce:	46a2      	mov	sl, r4
 800e4d0:	46ab      	mov	fp, r5
 800e4d2:	f1bb 0f00 	cmp.w	fp, #0
 800e4d6:	dc6c      	bgt.n	800e5b2 <__kernel_rem_pio2+0x5d2>
 800e4d8:	46a2      	mov	sl, r4
 800e4da:	46ab      	mov	fp, r5
 800e4dc:	f1bb 0f01 	cmp.w	fp, #1
 800e4e0:	f300 8086 	bgt.w	800e5f0 <__kernel_rem_pio2+0x610>
 800e4e4:	2000      	movs	r0, #0
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	2d01      	cmp	r5, #1
 800e4ea:	f300 80a0 	bgt.w	800e62e <__kernel_rem_pio2+0x64e>
 800e4ee:	9b02      	ldr	r3, [sp, #8]
 800e4f0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800e4f4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	f040 809e 	bne.w	800e63a <__kernel_rem_pio2+0x65a>
 800e4fe:	9b01      	ldr	r3, [sp, #4]
 800e500:	e9c3 7800 	strd	r7, r8, [r3]
 800e504:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e508:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e50c:	e033      	b.n	800e576 <__kernel_rem_pio2+0x596>
 800e50e:	3408      	adds	r4, #8
 800e510:	ab4a      	add	r3, sp, #296	; 0x128
 800e512:	441c      	add	r4, r3
 800e514:	462e      	mov	r6, r5
 800e516:	2000      	movs	r0, #0
 800e518:	2100      	movs	r1, #0
 800e51a:	2e00      	cmp	r6, #0
 800e51c:	da3a      	bge.n	800e594 <__kernel_rem_pio2+0x5b4>
 800e51e:	9b02      	ldr	r3, [sp, #8]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d03d      	beq.n	800e5a0 <__kernel_rem_pio2+0x5c0>
 800e524:	4602      	mov	r2, r0
 800e526:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e52a:	9c01      	ldr	r4, [sp, #4]
 800e52c:	e9c4 2300 	strd	r2, r3, [r4]
 800e530:	4602      	mov	r2, r0
 800e532:	460b      	mov	r3, r1
 800e534:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e538:	f7f1 fea6 	bl	8000288 <__aeabi_dsub>
 800e53c:	ae4c      	add	r6, sp, #304	; 0x130
 800e53e:	2401      	movs	r4, #1
 800e540:	42a5      	cmp	r5, r4
 800e542:	da30      	bge.n	800e5a6 <__kernel_rem_pio2+0x5c6>
 800e544:	9b02      	ldr	r3, [sp, #8]
 800e546:	b113      	cbz	r3, 800e54e <__kernel_rem_pio2+0x56e>
 800e548:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e54c:	4619      	mov	r1, r3
 800e54e:	9b01      	ldr	r3, [sp, #4]
 800e550:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e554:	e00f      	b.n	800e576 <__kernel_rem_pio2+0x596>
 800e556:	ab9a      	add	r3, sp, #616	; 0x268
 800e558:	441c      	add	r4, r3
 800e55a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e55e:	2000      	movs	r0, #0
 800e560:	2100      	movs	r1, #0
 800e562:	2d00      	cmp	r5, #0
 800e564:	da10      	bge.n	800e588 <__kernel_rem_pio2+0x5a8>
 800e566:	9b02      	ldr	r3, [sp, #8]
 800e568:	b113      	cbz	r3, 800e570 <__kernel_rem_pio2+0x590>
 800e56a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e56e:	4619      	mov	r1, r3
 800e570:	9b01      	ldr	r3, [sp, #4]
 800e572:	e9c3 0100 	strd	r0, r1, [r3]
 800e576:	9b06      	ldr	r3, [sp, #24]
 800e578:	f003 0007 	and.w	r0, r3, #7
 800e57c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e580:	ecbd 8b02 	vpop	{d8}
 800e584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e588:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e58c:	f7f1 fe7e 	bl	800028c <__adddf3>
 800e590:	3d01      	subs	r5, #1
 800e592:	e7e6      	b.n	800e562 <__kernel_rem_pio2+0x582>
 800e594:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e598:	f7f1 fe78 	bl	800028c <__adddf3>
 800e59c:	3e01      	subs	r6, #1
 800e59e:	e7bc      	b.n	800e51a <__kernel_rem_pio2+0x53a>
 800e5a0:	4602      	mov	r2, r0
 800e5a2:	460b      	mov	r3, r1
 800e5a4:	e7c1      	b.n	800e52a <__kernel_rem_pio2+0x54a>
 800e5a6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e5aa:	f7f1 fe6f 	bl	800028c <__adddf3>
 800e5ae:	3401      	adds	r4, #1
 800e5b0:	e7c6      	b.n	800e540 <__kernel_rem_pio2+0x560>
 800e5b2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800e5b6:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e5ba:	4640      	mov	r0, r8
 800e5bc:	ec53 2b17 	vmov	r2, r3, d7
 800e5c0:	4649      	mov	r1, r9
 800e5c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e5c6:	f7f1 fe61 	bl	800028c <__adddf3>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	4606      	mov	r6, r0
 800e5d0:	460f      	mov	r7, r1
 800e5d2:	4640      	mov	r0, r8
 800e5d4:	4649      	mov	r1, r9
 800e5d6:	f7f1 fe57 	bl	8000288 <__aeabi_dsub>
 800e5da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5de:	f7f1 fe55 	bl	800028c <__adddf3>
 800e5e2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e5e6:	e9ca 0100 	strd	r0, r1, [sl]
 800e5ea:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800e5ee:	e770      	b.n	800e4d2 <__kernel_rem_pio2+0x4f2>
 800e5f0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800e5f4:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	ec53 2b17 	vmov	r2, r3, d7
 800e5fe:	4639      	mov	r1, r7
 800e600:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e604:	f7f1 fe42 	bl	800028c <__adddf3>
 800e608:	4602      	mov	r2, r0
 800e60a:	460b      	mov	r3, r1
 800e60c:	4680      	mov	r8, r0
 800e60e:	4689      	mov	r9, r1
 800e610:	4630      	mov	r0, r6
 800e612:	4639      	mov	r1, r7
 800e614:	f7f1 fe38 	bl	8000288 <__aeabi_dsub>
 800e618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e61c:	f7f1 fe36 	bl	800028c <__adddf3>
 800e620:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e624:	e9ca 0100 	strd	r0, r1, [sl]
 800e628:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800e62c:	e756      	b.n	800e4dc <__kernel_rem_pio2+0x4fc>
 800e62e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e632:	f7f1 fe2b 	bl	800028c <__adddf3>
 800e636:	3d01      	subs	r5, #1
 800e638:	e756      	b.n	800e4e8 <__kernel_rem_pio2+0x508>
 800e63a:	9b01      	ldr	r3, [sp, #4]
 800e63c:	9a01      	ldr	r2, [sp, #4]
 800e63e:	601f      	str	r7, [r3, #0]
 800e640:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e644:	605c      	str	r4, [r3, #4]
 800e646:	609d      	str	r5, [r3, #8]
 800e648:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e64c:	60d3      	str	r3, [r2, #12]
 800e64e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e652:	6110      	str	r0, [r2, #16]
 800e654:	6153      	str	r3, [r2, #20]
 800e656:	e78e      	b.n	800e576 <__kernel_rem_pio2+0x596>
 800e658:	41700000 	.word	0x41700000
 800e65c:	3e700000 	.word	0x3e700000

0800e660 <__kernel_sin>:
 800e660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e664:	ec55 4b10 	vmov	r4, r5, d0
 800e668:	b085      	sub	sp, #20
 800e66a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e66e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e672:	ed8d 1b00 	vstr	d1, [sp]
 800e676:	9002      	str	r0, [sp, #8]
 800e678:	da06      	bge.n	800e688 <__kernel_sin+0x28>
 800e67a:	ee10 0a10 	vmov	r0, s0
 800e67e:	4629      	mov	r1, r5
 800e680:	f7f2 fa6a 	bl	8000b58 <__aeabi_d2iz>
 800e684:	2800      	cmp	r0, #0
 800e686:	d051      	beq.n	800e72c <__kernel_sin+0xcc>
 800e688:	4622      	mov	r2, r4
 800e68a:	462b      	mov	r3, r5
 800e68c:	4620      	mov	r0, r4
 800e68e:	4629      	mov	r1, r5
 800e690:	f7f1 ffb2 	bl	80005f8 <__aeabi_dmul>
 800e694:	4682      	mov	sl, r0
 800e696:	468b      	mov	fp, r1
 800e698:	4602      	mov	r2, r0
 800e69a:	460b      	mov	r3, r1
 800e69c:	4620      	mov	r0, r4
 800e69e:	4629      	mov	r1, r5
 800e6a0:	f7f1 ffaa 	bl	80005f8 <__aeabi_dmul>
 800e6a4:	a341      	add	r3, pc, #260	; (adr r3, 800e7ac <__kernel_sin+0x14c>)
 800e6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6aa:	4680      	mov	r8, r0
 800e6ac:	4689      	mov	r9, r1
 800e6ae:	4650      	mov	r0, sl
 800e6b0:	4659      	mov	r1, fp
 800e6b2:	f7f1 ffa1 	bl	80005f8 <__aeabi_dmul>
 800e6b6:	a33f      	add	r3, pc, #252	; (adr r3, 800e7b4 <__kernel_sin+0x154>)
 800e6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6bc:	f7f1 fde4 	bl	8000288 <__aeabi_dsub>
 800e6c0:	4652      	mov	r2, sl
 800e6c2:	465b      	mov	r3, fp
 800e6c4:	f7f1 ff98 	bl	80005f8 <__aeabi_dmul>
 800e6c8:	a33c      	add	r3, pc, #240	; (adr r3, 800e7bc <__kernel_sin+0x15c>)
 800e6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ce:	f7f1 fddd 	bl	800028c <__adddf3>
 800e6d2:	4652      	mov	r2, sl
 800e6d4:	465b      	mov	r3, fp
 800e6d6:	f7f1 ff8f 	bl	80005f8 <__aeabi_dmul>
 800e6da:	a33a      	add	r3, pc, #232	; (adr r3, 800e7c4 <__kernel_sin+0x164>)
 800e6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e0:	f7f1 fdd2 	bl	8000288 <__aeabi_dsub>
 800e6e4:	4652      	mov	r2, sl
 800e6e6:	465b      	mov	r3, fp
 800e6e8:	f7f1 ff86 	bl	80005f8 <__aeabi_dmul>
 800e6ec:	a337      	add	r3, pc, #220	; (adr r3, 800e7cc <__kernel_sin+0x16c>)
 800e6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f2:	f7f1 fdcb 	bl	800028c <__adddf3>
 800e6f6:	9b02      	ldr	r3, [sp, #8]
 800e6f8:	4606      	mov	r6, r0
 800e6fa:	460f      	mov	r7, r1
 800e6fc:	b9db      	cbnz	r3, 800e736 <__kernel_sin+0xd6>
 800e6fe:	4602      	mov	r2, r0
 800e700:	460b      	mov	r3, r1
 800e702:	4650      	mov	r0, sl
 800e704:	4659      	mov	r1, fp
 800e706:	f7f1 ff77 	bl	80005f8 <__aeabi_dmul>
 800e70a:	a325      	add	r3, pc, #148	; (adr r3, 800e7a0 <__kernel_sin+0x140>)
 800e70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e710:	f7f1 fdba 	bl	8000288 <__aeabi_dsub>
 800e714:	4642      	mov	r2, r8
 800e716:	464b      	mov	r3, r9
 800e718:	f7f1 ff6e 	bl	80005f8 <__aeabi_dmul>
 800e71c:	4602      	mov	r2, r0
 800e71e:	460b      	mov	r3, r1
 800e720:	4620      	mov	r0, r4
 800e722:	4629      	mov	r1, r5
 800e724:	f7f1 fdb2 	bl	800028c <__adddf3>
 800e728:	4604      	mov	r4, r0
 800e72a:	460d      	mov	r5, r1
 800e72c:	ec45 4b10 	vmov	d0, r4, r5
 800e730:	b005      	add	sp, #20
 800e732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e736:	2200      	movs	r2, #0
 800e738:	4b1b      	ldr	r3, [pc, #108]	; (800e7a8 <__kernel_sin+0x148>)
 800e73a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e73e:	f7f1 ff5b 	bl	80005f8 <__aeabi_dmul>
 800e742:	4632      	mov	r2, r6
 800e744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e748:	463b      	mov	r3, r7
 800e74a:	4640      	mov	r0, r8
 800e74c:	4649      	mov	r1, r9
 800e74e:	f7f1 ff53 	bl	80005f8 <__aeabi_dmul>
 800e752:	4602      	mov	r2, r0
 800e754:	460b      	mov	r3, r1
 800e756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e75a:	f7f1 fd95 	bl	8000288 <__aeabi_dsub>
 800e75e:	4652      	mov	r2, sl
 800e760:	465b      	mov	r3, fp
 800e762:	f7f1 ff49 	bl	80005f8 <__aeabi_dmul>
 800e766:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e76a:	f7f1 fd8d 	bl	8000288 <__aeabi_dsub>
 800e76e:	a30c      	add	r3, pc, #48	; (adr r3, 800e7a0 <__kernel_sin+0x140>)
 800e770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e774:	4606      	mov	r6, r0
 800e776:	460f      	mov	r7, r1
 800e778:	4640      	mov	r0, r8
 800e77a:	4649      	mov	r1, r9
 800e77c:	f7f1 ff3c 	bl	80005f8 <__aeabi_dmul>
 800e780:	4602      	mov	r2, r0
 800e782:	460b      	mov	r3, r1
 800e784:	4630      	mov	r0, r6
 800e786:	4639      	mov	r1, r7
 800e788:	f7f1 fd80 	bl	800028c <__adddf3>
 800e78c:	4602      	mov	r2, r0
 800e78e:	460b      	mov	r3, r1
 800e790:	4620      	mov	r0, r4
 800e792:	4629      	mov	r1, r5
 800e794:	f7f1 fd78 	bl	8000288 <__aeabi_dsub>
 800e798:	e7c6      	b.n	800e728 <__kernel_sin+0xc8>
 800e79a:	bf00      	nop
 800e79c:	f3af 8000 	nop.w
 800e7a0:	55555549 	.word	0x55555549
 800e7a4:	3fc55555 	.word	0x3fc55555
 800e7a8:	3fe00000 	.word	0x3fe00000
 800e7ac:	5acfd57c 	.word	0x5acfd57c
 800e7b0:	3de5d93a 	.word	0x3de5d93a
 800e7b4:	8a2b9ceb 	.word	0x8a2b9ceb
 800e7b8:	3e5ae5e6 	.word	0x3e5ae5e6
 800e7bc:	57b1fe7d 	.word	0x57b1fe7d
 800e7c0:	3ec71de3 	.word	0x3ec71de3
 800e7c4:	19c161d5 	.word	0x19c161d5
 800e7c8:	3f2a01a0 	.word	0x3f2a01a0
 800e7cc:	1110f8a6 	.word	0x1110f8a6
 800e7d0:	3f811111 	.word	0x3f811111

0800e7d4 <fabs>:
 800e7d4:	ec51 0b10 	vmov	r0, r1, d0
 800e7d8:	ee10 2a10 	vmov	r2, s0
 800e7dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e7e0:	ec43 2b10 	vmov	d0, r2, r3
 800e7e4:	4770      	bx	lr
	...

0800e7e8 <floor>:
 800e7e8:	ec51 0b10 	vmov	r0, r1, d0
 800e7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e7f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e7f8:	2e13      	cmp	r6, #19
 800e7fa:	460c      	mov	r4, r1
 800e7fc:	ee10 5a10 	vmov	r5, s0
 800e800:	4680      	mov	r8, r0
 800e802:	dc34      	bgt.n	800e86e <floor+0x86>
 800e804:	2e00      	cmp	r6, #0
 800e806:	da16      	bge.n	800e836 <floor+0x4e>
 800e808:	a335      	add	r3, pc, #212	; (adr r3, 800e8e0 <floor+0xf8>)
 800e80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80e:	f7f1 fd3d 	bl	800028c <__adddf3>
 800e812:	2200      	movs	r2, #0
 800e814:	2300      	movs	r3, #0
 800e816:	f7f2 f97f 	bl	8000b18 <__aeabi_dcmpgt>
 800e81a:	b148      	cbz	r0, 800e830 <floor+0x48>
 800e81c:	2c00      	cmp	r4, #0
 800e81e:	da59      	bge.n	800e8d4 <floor+0xec>
 800e820:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e824:	4a30      	ldr	r2, [pc, #192]	; (800e8e8 <floor+0x100>)
 800e826:	432b      	orrs	r3, r5
 800e828:	2500      	movs	r5, #0
 800e82a:	42ab      	cmp	r3, r5
 800e82c:	bf18      	it	ne
 800e82e:	4614      	movne	r4, r2
 800e830:	4621      	mov	r1, r4
 800e832:	4628      	mov	r0, r5
 800e834:	e025      	b.n	800e882 <floor+0x9a>
 800e836:	4f2d      	ldr	r7, [pc, #180]	; (800e8ec <floor+0x104>)
 800e838:	4137      	asrs	r7, r6
 800e83a:	ea01 0307 	and.w	r3, r1, r7
 800e83e:	4303      	orrs	r3, r0
 800e840:	d01f      	beq.n	800e882 <floor+0x9a>
 800e842:	a327      	add	r3, pc, #156	; (adr r3, 800e8e0 <floor+0xf8>)
 800e844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e848:	f7f1 fd20 	bl	800028c <__adddf3>
 800e84c:	2200      	movs	r2, #0
 800e84e:	2300      	movs	r3, #0
 800e850:	f7f2 f962 	bl	8000b18 <__aeabi_dcmpgt>
 800e854:	2800      	cmp	r0, #0
 800e856:	d0eb      	beq.n	800e830 <floor+0x48>
 800e858:	2c00      	cmp	r4, #0
 800e85a:	bfbe      	ittt	lt
 800e85c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e860:	fa43 f606 	asrlt.w	r6, r3, r6
 800e864:	19a4      	addlt	r4, r4, r6
 800e866:	ea24 0407 	bic.w	r4, r4, r7
 800e86a:	2500      	movs	r5, #0
 800e86c:	e7e0      	b.n	800e830 <floor+0x48>
 800e86e:	2e33      	cmp	r6, #51	; 0x33
 800e870:	dd0b      	ble.n	800e88a <floor+0xa2>
 800e872:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e876:	d104      	bne.n	800e882 <floor+0x9a>
 800e878:	ee10 2a10 	vmov	r2, s0
 800e87c:	460b      	mov	r3, r1
 800e87e:	f7f1 fd05 	bl	800028c <__adddf3>
 800e882:	ec41 0b10 	vmov	d0, r0, r1
 800e886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e88a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e88e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e892:	fa23 f707 	lsr.w	r7, r3, r7
 800e896:	4207      	tst	r7, r0
 800e898:	d0f3      	beq.n	800e882 <floor+0x9a>
 800e89a:	a311      	add	r3, pc, #68	; (adr r3, 800e8e0 <floor+0xf8>)
 800e89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a0:	f7f1 fcf4 	bl	800028c <__adddf3>
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	f7f2 f936 	bl	8000b18 <__aeabi_dcmpgt>
 800e8ac:	2800      	cmp	r0, #0
 800e8ae:	d0bf      	beq.n	800e830 <floor+0x48>
 800e8b0:	2c00      	cmp	r4, #0
 800e8b2:	da02      	bge.n	800e8ba <floor+0xd2>
 800e8b4:	2e14      	cmp	r6, #20
 800e8b6:	d103      	bne.n	800e8c0 <floor+0xd8>
 800e8b8:	3401      	adds	r4, #1
 800e8ba:	ea25 0507 	bic.w	r5, r5, r7
 800e8be:	e7b7      	b.n	800e830 <floor+0x48>
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e8c6:	fa03 f606 	lsl.w	r6, r3, r6
 800e8ca:	4435      	add	r5, r6
 800e8cc:	4545      	cmp	r5, r8
 800e8ce:	bf38      	it	cc
 800e8d0:	18e4      	addcc	r4, r4, r3
 800e8d2:	e7f2      	b.n	800e8ba <floor+0xd2>
 800e8d4:	2500      	movs	r5, #0
 800e8d6:	462c      	mov	r4, r5
 800e8d8:	e7aa      	b.n	800e830 <floor+0x48>
 800e8da:	bf00      	nop
 800e8dc:	f3af 8000 	nop.w
 800e8e0:	8800759c 	.word	0x8800759c
 800e8e4:	7e37e43c 	.word	0x7e37e43c
 800e8e8:	bff00000 	.word	0xbff00000
 800e8ec:	000fffff 	.word	0x000fffff

0800e8f0 <matherr>:
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	4770      	bx	lr
 800e8f4:	0000      	movs	r0, r0
	...

0800e8f8 <scalbn>:
 800e8f8:	b570      	push	{r4, r5, r6, lr}
 800e8fa:	ec55 4b10 	vmov	r4, r5, d0
 800e8fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e902:	4606      	mov	r6, r0
 800e904:	462b      	mov	r3, r5
 800e906:	b9aa      	cbnz	r2, 800e934 <scalbn+0x3c>
 800e908:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e90c:	4323      	orrs	r3, r4
 800e90e:	d03b      	beq.n	800e988 <scalbn+0x90>
 800e910:	4b31      	ldr	r3, [pc, #196]	; (800e9d8 <scalbn+0xe0>)
 800e912:	4629      	mov	r1, r5
 800e914:	2200      	movs	r2, #0
 800e916:	ee10 0a10 	vmov	r0, s0
 800e91a:	f7f1 fe6d 	bl	80005f8 <__aeabi_dmul>
 800e91e:	4b2f      	ldr	r3, [pc, #188]	; (800e9dc <scalbn+0xe4>)
 800e920:	429e      	cmp	r6, r3
 800e922:	4604      	mov	r4, r0
 800e924:	460d      	mov	r5, r1
 800e926:	da12      	bge.n	800e94e <scalbn+0x56>
 800e928:	a327      	add	r3, pc, #156	; (adr r3, 800e9c8 <scalbn+0xd0>)
 800e92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92e:	f7f1 fe63 	bl	80005f8 <__aeabi_dmul>
 800e932:	e009      	b.n	800e948 <scalbn+0x50>
 800e934:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e938:	428a      	cmp	r2, r1
 800e93a:	d10c      	bne.n	800e956 <scalbn+0x5e>
 800e93c:	ee10 2a10 	vmov	r2, s0
 800e940:	4620      	mov	r0, r4
 800e942:	4629      	mov	r1, r5
 800e944:	f7f1 fca2 	bl	800028c <__adddf3>
 800e948:	4604      	mov	r4, r0
 800e94a:	460d      	mov	r5, r1
 800e94c:	e01c      	b.n	800e988 <scalbn+0x90>
 800e94e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e952:	460b      	mov	r3, r1
 800e954:	3a36      	subs	r2, #54	; 0x36
 800e956:	4432      	add	r2, r6
 800e958:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e95c:	428a      	cmp	r2, r1
 800e95e:	dd0b      	ble.n	800e978 <scalbn+0x80>
 800e960:	ec45 4b11 	vmov	d1, r4, r5
 800e964:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800e9d0 <scalbn+0xd8>
 800e968:	f000 f83c 	bl	800e9e4 <copysign>
 800e96c:	a318      	add	r3, pc, #96	; (adr r3, 800e9d0 <scalbn+0xd8>)
 800e96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e972:	ec51 0b10 	vmov	r0, r1, d0
 800e976:	e7da      	b.n	800e92e <scalbn+0x36>
 800e978:	2a00      	cmp	r2, #0
 800e97a:	dd08      	ble.n	800e98e <scalbn+0x96>
 800e97c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e980:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e984:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e988:	ec45 4b10 	vmov	d0, r4, r5
 800e98c:	bd70      	pop	{r4, r5, r6, pc}
 800e98e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e992:	da0d      	bge.n	800e9b0 <scalbn+0xb8>
 800e994:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e998:	429e      	cmp	r6, r3
 800e99a:	ec45 4b11 	vmov	d1, r4, r5
 800e99e:	dce1      	bgt.n	800e964 <scalbn+0x6c>
 800e9a0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800e9c8 <scalbn+0xd0>
 800e9a4:	f000 f81e 	bl	800e9e4 <copysign>
 800e9a8:	a307      	add	r3, pc, #28	; (adr r3, 800e9c8 <scalbn+0xd0>)
 800e9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ae:	e7e0      	b.n	800e972 <scalbn+0x7a>
 800e9b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e9b4:	3236      	adds	r2, #54	; 0x36
 800e9b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e9ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e9be:	4620      	mov	r0, r4
 800e9c0:	4629      	mov	r1, r5
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	4b06      	ldr	r3, [pc, #24]	; (800e9e0 <scalbn+0xe8>)
 800e9c6:	e7b2      	b.n	800e92e <scalbn+0x36>
 800e9c8:	c2f8f359 	.word	0xc2f8f359
 800e9cc:	01a56e1f 	.word	0x01a56e1f
 800e9d0:	8800759c 	.word	0x8800759c
 800e9d4:	7e37e43c 	.word	0x7e37e43c
 800e9d8:	43500000 	.word	0x43500000
 800e9dc:	ffff3cb0 	.word	0xffff3cb0
 800e9e0:	3c900000 	.word	0x3c900000

0800e9e4 <copysign>:
 800e9e4:	ec51 0b10 	vmov	r0, r1, d0
 800e9e8:	ee11 0a90 	vmov	r0, s3
 800e9ec:	ee10 2a10 	vmov	r2, s0
 800e9f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e9f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e9f8:	ea41 0300 	orr.w	r3, r1, r0
 800e9fc:	ec43 2b10 	vmov	d0, r2, r3
 800ea00:	4770      	bx	lr
	...

0800ea04 <_init>:
 800ea04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea06:	bf00      	nop
 800ea08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea0a:	bc08      	pop	{r3}
 800ea0c:	469e      	mov	lr, r3
 800ea0e:	4770      	bx	lr

0800ea10 <_fini>:
 800ea10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea12:	bf00      	nop
 800ea14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea16:	bc08      	pop	{r3}
 800ea18:	469e      	mov	lr, r3
 800ea1a:	4770      	bx	lr
