
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800d448  0800d448  0001d448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7e0  0800d7e0  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7e0  0800d7e0  0001d7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7e8  0800d7e8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7e8  0800d7e8  0001d7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7ec  0800d7ec  0001d7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d7f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b4  20000094  0800d884  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001348  0800d884  00021348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198a3  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e49  00000000  00000000  00039967  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001890  00000000  00000000  0003c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001760  00000000  00000000  0003e040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022b87  00000000  00000000  0003f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012578  00000000  00000000  00062327  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d36d5  00000000  00000000  0007489f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147f74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071e4  00000000  00000000  00147ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d42c 	.word	0x0800d42c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800d42c 	.word	0x0800d42c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 b972 	b.w	8000f58 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9e08      	ldr	r6, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	4688      	mov	r8, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14b      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4615      	mov	r5, r2
 8000c9e:	d967      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0720 	rsb	r7, r2, #32
 8000caa:	fa01 f302 	lsl.w	r3, r1, r2
 8000cae:	fa20 f707 	lsr.w	r7, r0, r7
 8000cb2:	4095      	lsls	r5, r2
 8000cb4:	ea47 0803 	orr.w	r8, r7, r3
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc4:	fa1f fc85 	uxth.w	ip, r5
 8000cc8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ccc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cd0:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18eb      	adds	r3, r5, r3
 8000cda:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cde:	f080 811b 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8118 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000ce8:	3f02      	subs	r7, #2
 8000cea:	442b      	add	r3, r5
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d00:	45a4      	cmp	ip, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x290>
 8000d0e:	45a4      	cmp	ip, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x290>
 8000d14:	3802      	subs	r0, #2
 8000d16:	442c      	add	r4, r5
 8000d18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d1c:	eba4 040c 	sub.w	r4, r4, ip
 8000d20:	2700      	movs	r7, #0
 8000d22:	b11e      	cbz	r6, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xbe>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	f000 80eb 	beq.w	8000f12 <__udivmoddi4+0x286>
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d42:	4638      	mov	r0, r7
 8000d44:	4639      	mov	r1, r7
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f783 	clz	r7, r3
 8000d4e:	2f00      	cmp	r7, #0
 8000d50:	d147      	bne.n	8000de2 <__udivmoddi4+0x156>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd0>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80fa 	bhi.w	8000f50 <__udivmoddi4+0x2c4>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	4698      	mov	r8, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000d6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xe8>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 808f 	bne.w	8000e9c <__udivmoddi4+0x210>
 8000d7e:	1b49      	subs	r1, r1, r5
 8000d80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d84:	fa1f f885 	uxth.w	r8, r5
 8000d88:	2701      	movs	r7, #1
 8000d8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8e:	0c23      	lsrs	r3, r4, #16
 8000d90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb08 f10c 	mul.w	r1, r8, ip
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x124>
 8000da0:	18eb      	adds	r3, r5, r3
 8000da2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x122>
 8000da8:	4299      	cmp	r1, r3
 8000daa:	f200 80cd 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000dae:	4684      	mov	ip, r0
 8000db0:	1a59      	subs	r1, r3, r1
 8000db2:	b2a3      	uxth	r3, r4
 8000db4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dc0:	fb08 f800 	mul.w	r8, r8, r0
 8000dc4:	45a0      	cmp	r8, r4
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0x14c>
 8000dc8:	192c      	adds	r4, r5, r4
 8000dca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x14a>
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	f200 80b6 	bhi.w	8000f42 <__udivmoddi4+0x2b6>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000de0:	e79f      	b.n	8000d22 <__udivmoddi4+0x96>
 8000de2:	f1c7 0c20 	rsb	ip, r7, #32
 8000de6:	40bb      	lsls	r3, r7
 8000de8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000df0:	fa01 f407 	lsl.w	r4, r1, r7
 8000df4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e00:	4325      	orrs	r5, r4
 8000e02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e06:	0c2c      	lsrs	r4, r5, #16
 8000e08:	fb08 3319 	mls	r3, r8, r9, r3
 8000e0c:	fa1f fa8e 	uxth.w	sl, lr
 8000e10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e14:	fb09 f40a 	mul.w	r4, r9, sl
 8000e18:	429c      	cmp	r4, r3
 8000e1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x1b0>
 8000e24:	eb1e 0303 	adds.w	r3, lr, r3
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	f080 8087 	bcs.w	8000f3e <__udivmoddi4+0x2b2>
 8000e30:	429c      	cmp	r4, r3
 8000e32:	f240 8084 	bls.w	8000f3e <__udivmoddi4+0x2b2>
 8000e36:	f1a9 0902 	sub.w	r9, r9, #2
 8000e3a:	4473      	add	r3, lr
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	b2ad      	uxth	r5, r5
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e50:	45a2      	cmp	sl, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1da>
 8000e54:	eb1e 0404 	adds.w	r4, lr, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e5c:	d26b      	bcs.n	8000f36 <__udivmoddi4+0x2aa>
 8000e5e:	45a2      	cmp	sl, r4
 8000e60:	d969      	bls.n	8000f36 <__udivmoddi4+0x2aa>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4474      	add	r4, lr
 8000e66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	eba4 040a 	sub.w	r4, r4, sl
 8000e72:	454c      	cmp	r4, r9
 8000e74:	46c2      	mov	sl, r8
 8000e76:	464b      	mov	r3, r9
 8000e78:	d354      	bcc.n	8000f24 <__udivmoddi4+0x298>
 8000e7a:	d051      	beq.n	8000f20 <__udivmoddi4+0x294>
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d069      	beq.n	8000f54 <__udivmoddi4+0x2c8>
 8000e80:	ebb1 050a 	subs.w	r5, r1, sl
 8000e84:	eb64 0403 	sbc.w	r4, r4, r3
 8000e88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e8c:	40fd      	lsrs	r5, r7
 8000e8e:	40fc      	lsrs	r4, r7
 8000e90:	ea4c 0505 	orr.w	r5, ip, r5
 8000e94:	e9c6 5400 	strd	r5, r4, [r6]
 8000e98:	2700      	movs	r7, #0
 8000e9a:	e747      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea4:	4095      	lsls	r5, r2
 8000ea6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8000eae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eb2:	4338      	orrs	r0, r7
 8000eb4:	0c01      	lsrs	r1, r0, #16
 8000eb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eba:	fa1f f885 	uxth.w	r8, r5
 8000ebe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ec2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec6:	fb07 f308 	mul.w	r3, r7, r8
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x256>
 8000ed2:	1869      	adds	r1, r5, r1
 8000ed4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ed8:	d22f      	bcs.n	8000f3a <__udivmoddi4+0x2ae>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d92d      	bls.n	8000f3a <__udivmoddi4+0x2ae>
 8000ede:	3f02      	subs	r7, #2
 8000ee0:	4429      	add	r1, r5
 8000ee2:	1acb      	subs	r3, r1, r3
 8000ee4:	b281      	uxth	r1, r0
 8000ee6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb00 f308 	mul.w	r3, r0, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x27e>
 8000efa:	1869      	adds	r1, r5, r1
 8000efc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f00:	d217      	bcs.n	8000f32 <__udivmoddi4+0x2a6>
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d915      	bls.n	8000f32 <__udivmoddi4+0x2a6>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4429      	add	r1, r5
 8000f0a:	1ac9      	subs	r1, r1, r3
 8000f0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f10:	e73b      	b.n	8000d8a <__udivmoddi4+0xfe>
 8000f12:	4637      	mov	r7, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e709      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f18:	4607      	mov	r7, r0
 8000f1a:	e6e7      	b.n	8000cec <__udivmoddi4+0x60>
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f20:	4541      	cmp	r1, r8
 8000f22:	d2ab      	bcs.n	8000e7c <__udivmoddi4+0x1f0>
 8000f24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f28:	eb69 020e 	sbc.w	r2, r9, lr
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	4613      	mov	r3, r2
 8000f30:	e7a4      	b.n	8000e7c <__udivmoddi4+0x1f0>
 8000f32:	4660      	mov	r0, ip
 8000f34:	e7e9      	b.n	8000f0a <__udivmoddi4+0x27e>
 8000f36:	4618      	mov	r0, r3
 8000f38:	e795      	b.n	8000e66 <__udivmoddi4+0x1da>
 8000f3a:	4667      	mov	r7, ip
 8000f3c:	e7d1      	b.n	8000ee2 <__udivmoddi4+0x256>
 8000f3e:	4681      	mov	r9, r0
 8000f40:	e77c      	b.n	8000e3c <__udivmoddi4+0x1b0>
 8000f42:	3802      	subs	r0, #2
 8000f44:	442c      	add	r4, r5
 8000f46:	e747      	b.n	8000dd8 <__udivmoddi4+0x14c>
 8000f48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f4c:	442b      	add	r3, r5
 8000f4e:	e72f      	b.n	8000db0 <__udivmoddi4+0x124>
 8000f50:	4638      	mov	r0, r7
 8000f52:	e708      	b.n	8000d66 <__udivmoddi4+0xda>
 8000f54:	4637      	mov	r7, r6
 8000f56:	e6e9      	b.n	8000d2c <__udivmoddi4+0xa0>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <HAL_Init+0x40>)
 8000f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_Init+0x40>)
 8000f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_Init+0x40>)
 8000f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f001 fa07 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f009 fe88 	bl	800aca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023c00 	.word	0x40023c00

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fa1f 	bl	8002402 <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fdc:	f001 f9e7 	bl	80023ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2000002c 	.word	0x2000002c
 8000ff8:	20000004 	.word	0x20000004
 8000ffc:	20000000 	.word	0x20000000

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000004 	.word	0x20000004
 8001024:	20000100 	.word	0x20000100

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000100 	.word	0x20000100

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_Delay+0x40>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffde 	bl	8001028 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000004 	.word	0x20000004

08001084 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e033      	b.n	8001102 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d109      	bne.n	80010b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f009 fe26 	bl	800acf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d118      	bne.n	80010f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010ca:	f023 0302 	bic.w	r3, r3, #2
 80010ce:	f043 0202 	orr.w	r2, r3, #2
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fb80 	bl	80017dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f023 0303 	bic.w	r3, r3, #3
 80010ea:	f043 0201 	orr.w	r2, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40
 80010f2:	e001      	b.n	80010f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b02      	cmp	r3, #2
 8001126:	bf0c      	ite	eq
 8001128:	2301      	moveq	r3, #1
 800112a:	2300      	movne	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0320 	and.w	r3, r3, #32
 800113a:	2b20      	cmp	r3, #32
 800113c:	bf0c      	ite	eq
 800113e:	2301      	moveq	r3, #1
 8001140:	2300      	movne	r3, #0
 8001142:	b2db      	uxtb	r3, r3
 8001144:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d049      	beq.n	80011e0 <HAL_ADC_IRQHandler+0xd6>
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d046      	beq.n	80011e0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	2b00      	cmp	r3, #0
 800115c:	d105      	bne.n	800116a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d12b      	bne.n	80011d0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800117c:	2b00      	cmp	r3, #0
 800117e:	d127      	bne.n	80011d0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001186:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001198:	2b00      	cmp	r3, #0
 800119a:	d119      	bne.n	80011d0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0220 	bic.w	r2, r2, #32
 80011aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f043 0201 	orr.w	r2, r3, #1
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f009 f98b 	bl	800a4ec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f06f 0212 	mvn.w	r2, #18
 80011de:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf0c      	ite	eq
 80011ee:	2301      	moveq	r3, #1
 80011f0:	2300      	movne	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001200:	2b80      	cmp	r3, #128	; 0x80
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
 800120a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d057      	beq.n	80012c2 <HAL_ADC_IRQHandler+0x1b8>
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d054      	beq.n	80012c2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	2b00      	cmp	r3, #0
 8001222:	d105      	bne.n	8001230 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d139      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001244:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001256:	2b00      	cmp	r3, #0
 8001258:	d12b      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001264:	2b00      	cmp	r3, #0
 8001266:	d124      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001272:	2b00      	cmp	r3, #0
 8001274:	d11d      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800127a:	2b00      	cmp	r3, #0
 800127c:	d119      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800128c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d105      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 fd06 	bl	8001cc4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f06f 020c 	mvn.w	r2, #12
 80012c0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e2:	2b40      	cmp	r3, #64	; 0x40
 80012e4:	bf0c      	ite	eq
 80012e6:	2301      	moveq	r3, #1
 80012e8:	2300      	movne	r3, #0
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d017      	beq.n	8001324 <HAL_ADC_IRQHandler+0x21a>
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d014      	beq.n	8001324 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	d10d      	bne.n	8001324 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f92b 	bl	8001570 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f06f 0201 	mvn.w	r2, #1
 8001322:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0320 	and.w	r3, r3, #32
 800132e:	2b20      	cmp	r3, #32
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001348:	bf0c      	ite	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	2300      	movne	r3, #0
 800134e:	b2db      	uxtb	r3, r3
 8001350:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d015      	beq.n	8001384 <HAL_ADC_IRQHandler+0x27a>
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d012      	beq.n	8001384 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f043 0202 	orr.w	r2, r3, #2
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f06f 0220 	mvn.w	r2, #32
 8001372:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f905 	bl	8001584 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f06f 0220 	mvn.w	r2, #32
 8001382:	601a      	str	r2, [r3, #0]
  }
}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <HAL_ADC_Start_DMA+0x1e>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e0cc      	b.n	8001544 <HAL_ADC_Start_DMA+0x1b8>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d018      	beq.n	80013f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0201 	orr.w	r2, r2, #1
 80013ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013d0:	4b5e      	ldr	r3, [pc, #376]	; (800154c <HAL_ADC_Start_DMA+0x1c0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a5e      	ldr	r2, [pc, #376]	; (8001550 <HAL_ADC_Start_DMA+0x1c4>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	0c9a      	lsrs	r2, r3, #18
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80013e4:	e002      	b.n	80013ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f9      	bne.n	80013e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	f040 80a0 	bne.w	8001542 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800140a:	f023 0301 	bic.w	r3, r3, #1
 800140e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001420:	2b00      	cmp	r3, #0
 8001422:	d007      	beq.n	8001434 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800142c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800143c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001440:	d106      	bne.n	8001450 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f023 0206 	bic.w	r2, r3, #6
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	645a      	str	r2, [r3, #68]	; 0x44
 800144e:	e002      	b.n	8001456 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_ADC_Start_DMA+0x1c8>)
 8001460:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001466:	4a3c      	ldr	r2, [pc, #240]	; (8001558 <HAL_ADC_Start_DMA+0x1cc>)
 8001468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146e:	4a3b      	ldr	r2, [pc, #236]	; (800155c <HAL_ADC_Start_DMA+0x1d0>)
 8001470:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001476:	4a3a      	ldr	r2, [pc, #232]	; (8001560 <HAL_ADC_Start_DMA+0x1d4>)
 8001478:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001482:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001492:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	334c      	adds	r3, #76	; 0x4c
 80014ae:	4619      	mov	r1, r3
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f001 f860 	bl	8002578 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d12a      	bne.n	800151a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a26      	ldr	r2, [pc, #152]	; (8001564 <HAL_ADC_Start_DMA+0x1d8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d015      	beq.n	80014fa <HAL_ADC_Start_DMA+0x16e>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a25      	ldr	r2, [pc, #148]	; (8001568 <HAL_ADC_Start_DMA+0x1dc>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d105      	bne.n	80014e4 <HAL_ADC_Start_DMA+0x158>
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_ADC_Start_DMA+0x1c8>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 031f 	and.w	r3, r3, #31
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00a      	beq.n	80014fa <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a20      	ldr	r2, [pc, #128]	; (800156c <HAL_ADC_Start_DMA+0x1e0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d129      	bne.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_ADC_Start_DMA+0x1c8>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 031f 	and.w	r3, r3, #31
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	d823      	bhi.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d11c      	bne.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	e013      	b.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a11      	ldr	r2, [pc, #68]	; (8001564 <HAL_ADC_Start_DMA+0x1d8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d10e      	bne.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d107      	bne.n	8001542 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001540:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000002c 	.word	0x2000002c
 8001550:	431bde83 	.word	0x431bde83
 8001554:	40012300 	.word	0x40012300
 8001558:	080019d5 	.word	0x080019d5
 800155c:	08001a8f 	.word	0x08001a8f
 8001560:	08001aab 	.word	0x08001aab
 8001564:	40012000 	.word	0x40012000
 8001568:	40012100 	.word	0x40012100
 800156c:	40012200 	.word	0x40012200

08001570 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x1c>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e105      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x228>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b09      	cmp	r3, #9
 80015c2:	d925      	bls.n	8001610 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68d9      	ldr	r1, [r3, #12]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	3b1e      	subs	r3, #30
 80015da:	2207      	movs	r2, #7
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43da      	mvns	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	400a      	ands	r2, r1
 80015e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68d9      	ldr	r1, [r3, #12]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	4603      	mov	r3, r0
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4403      	add	r3, r0
 8001602:	3b1e      	subs	r3, #30
 8001604:	409a      	lsls	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	e022      	b.n	8001656 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6919      	ldr	r1, [r3, #16]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	2207      	movs	r2, #7
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	400a      	ands	r2, r1
 8001632:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6919      	ldr	r1, [r3, #16]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	b29b      	uxth	r3, r3
 8001644:	4618      	mov	r0, r3
 8001646:	4603      	mov	r3, r0
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4403      	add	r3, r0
 800164c:	409a      	lsls	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b06      	cmp	r3, #6
 800165c:	d824      	bhi.n	80016a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	3b05      	subs	r3, #5
 8001670:	221f      	movs	r2, #31
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	400a      	ands	r2, r1
 800167e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	b29b      	uxth	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	3b05      	subs	r3, #5
 800169a:	fa00 f203 	lsl.w	r2, r0, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	635a      	str	r2, [r3, #52]	; 0x34
 80016a6:	e04c      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b0c      	cmp	r3, #12
 80016ae:	d824      	bhi.n	80016fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	3b23      	subs	r3, #35	; 0x23
 80016c2:	221f      	movs	r2, #31
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43da      	mvns	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	400a      	ands	r2, r1
 80016d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	3b23      	subs	r3, #35	; 0x23
 80016ec:	fa00 f203 	lsl.w	r2, r0, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	631a      	str	r2, [r3, #48]	; 0x30
 80016f8:	e023      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b41      	subs	r3, #65	; 0x41
 800170c:	221f      	movs	r2, #31
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	400a      	ands	r2, r1
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	3b41      	subs	r3, #65	; 0x41
 8001736:	fa00 f203 	lsl.w	r2, r0, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_ADC_ConfigChannel+0x234>)
 8001744:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a21      	ldr	r2, [pc, #132]	; (80017d0 <HAL_ADC_ConfigChannel+0x238>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d109      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x1cc>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b12      	cmp	r3, #18
 8001756:	d105      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <HAL_ADC_ConfigChannel+0x238>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d123      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x21e>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b10      	cmp	r3, #16
 8001774:	d003      	beq.n	800177e <HAL_ADC_ConfigChannel+0x1e6>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b11      	cmp	r3, #17
 800177c:	d11b      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b10      	cmp	r3, #16
 8001790:	d111      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <HAL_ADC_ConfigChannel+0x240>)
 8001798:	fba2 2303 	umull	r2, r3, r2, r3
 800179c:	0c9a      	lsrs	r2, r3, #18
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017a8:	e002      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f9      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	40012000 	.word	0x40012000
 80017d4:	2000002c 	.word	0x2000002c
 80017d8:	431bde83 	.word	0x431bde83

080017dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e4:	4b79      	ldr	r3, [pc, #484]	; (80019cc <ADC_Init+0x1f0>)
 80017e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	431a      	orrs	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001810:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6859      	ldr	r1, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	021a      	lsls	r2, r3, #8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001834:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001856:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6899      	ldr	r1, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <ADC_Init+0x1f4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d022      	beq.n	80018ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001882:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6899      	ldr	r1, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6899      	ldr	r1, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	e00f      	b.n	80018da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0202 	bic.w	r2, r2, #2
 80018e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6899      	ldr	r1, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7e1b      	ldrb	r3, [r3, #24]
 80018f4:	005a      	lsls	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d01b      	beq.n	8001940 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001916:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001926:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6859      	ldr	r1, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	3b01      	subs	r3, #1
 8001934:	035a      	lsls	r2, r3, #13
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	e007      	b.n	8001950 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800194e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	3b01      	subs	r3, #1
 800196c:	051a      	lsls	r2, r3, #20
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6899      	ldr	r1, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001992:	025a      	lsls	r2, r3, #9
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6899      	ldr	r1, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	029a      	lsls	r2, r3, #10
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	609a      	str	r2, [r3, #8]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	40012300 	.word	0x40012300
 80019d0:	0f000001 	.word	0x0f000001

080019d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d13c      	bne.n	8001a68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d12b      	bne.n	8001a60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d127      	bne.n	8001a60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d119      	bne.n	8001a60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0220 	bic.w	r2, r2, #32
 8001a3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f008 fd43 	bl	800a4ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a66:	e00e      	b.n	8001a86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fd85 	bl	8001584 <HAL_ADC_ErrorCallback>
}
 8001a7a:	e004      	b.n	8001a86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	4798      	blx	r3
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f008 fd15 	bl	800a4cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2240      	movs	r2, #64	; 0x40
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f043 0204 	orr.w	r2, r3, #4
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f7ff fd5a 	bl	8001584 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_ADCEx_InjectedStart+0x22>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e09d      	b.n	8001c36 <HAL_ADCEx_InjectedStart+0x15e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d018      	beq.n	8001b42 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b20:	4b48      	ldr	r3, [pc, #288]	; (8001c44 <HAL_ADCEx_InjectedStart+0x16c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a48      	ldr	r2, [pc, #288]	; (8001c48 <HAL_ADCEx_InjectedStart+0x170>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0c9a      	lsrs	r2, r3, #18
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b34:	e002      	b.n	8001b3c <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f9      	bne.n	8001b36 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d171      	bne.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f06f 0204 	mvn.w	r2, #4
 8001b86:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <HAL_ADCEx_InjectedStart+0x174>)
 8001b8a:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d124      	bne.n	8001be2 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bf0c      	ite	eq
 8001ba6:	2301      	moveq	r3, #1
 8001ba8:	2300      	movne	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d034      	beq.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d031      	beq.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	e028      	b.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf0c      	ite	eq
 8001c06:	2301      	moveq	r3, #1
 8001c08:	2300      	movne	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <HAL_ADCEx_InjectedStart+0x178>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d10d      	bne.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00a      	beq.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d007      	beq.n	8001c34 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c32:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	2000002c 	.word	0x2000002c
 8001c48:	431bde83 	.word	0x431bde83
 8001c4c:	40012300 	.word	0x40012300
 8001c50:	40012000 	.word	0x40012000

08001c54 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f06f 0204 	mvn.w	r2, #4
 8001c6a:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d81f      	bhi.n	8001cb4 <HAL_ADCEx_InjectedGetValue+0x60>
 8001c74:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <HAL_ADCEx_InjectedGetValue+0x28>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001cab 	.word	0x08001cab
 8001c80:	08001ca1 	.word	0x08001ca1
 8001c84:	08001c97 	.word	0x08001c97
 8001c88:	08001c8d 	.word	0x08001c8d
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c92:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001c94:	e00f      	b.n	8001cb6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9c:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001c9e:	e00a      	b.n	8001cb6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001ca8:	e005      	b.n	8001cb6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb0:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001cb2:	e000      	b.n	8001cb6 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8001cb4:	bf00      	nop
  }
  return tmp;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e17a      	b.n	8001fe6 <HAL_ADCEx_InjectedConfigChannel+0x30e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b09      	cmp	r3, #9
 8001cfe:	d925      	bls.n	8001d4c <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68d9      	ldr	r1, [r3, #12]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	3b1e      	subs	r3, #30
 8001d16:	2207      	movs	r2, #7
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43da      	mvns	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	400a      	ands	r2, r1
 8001d24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68d9      	ldr	r1, [r3, #12]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	4603      	mov	r3, r0
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4403      	add	r3, r0
 8001d3e:	3b1e      	subs	r3, #30
 8001d40:	409a      	lsls	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	e022      	b.n	8001d92 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6919      	ldr	r1, [r3, #16]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	2207      	movs	r2, #7
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6919      	ldr	r1, [r3, #16]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	4603      	mov	r3, r0
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4403      	add	r3, r0
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	051a      	lsls	r2, r3, #20
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	3303      	adds	r3, #3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	221f      	movs	r2, #31
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43da      	mvns	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	400a      	ands	r2, r1
 8001de8:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	3303      	adds	r3, #3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	fa00 f203 	lsl.w	r2, r0, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	4a73      	ldr	r2, [pc, #460]	; (8001ff4 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d022      	beq.n	8001e70 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001e38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6899      	ldr	r1, [r3, #8]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	699a      	ldr	r2, [r3, #24]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6899      	ldr	r1, [r3, #8]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	69da      	ldr	r2, [r3, #28]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	e00f      	b.n	8001e90 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001e7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e8e:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	7d5b      	ldrb	r3, [r3, #21]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	e007      	b.n	8001eba <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eb8:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	7d1b      	ldrb	r3, [r3, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d008      	beq.n	8001ed4 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	e007      	b.n	8001ee4 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ee2:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d017      	beq.n	8001f1c <HAL_ADCEx_InjectedConfigChannel+0x244>
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d029      	beq.n	8001f44 <HAL_ADCEx_InjectedConfigChannel+0x26c>
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d13b      	bne.n	8001f6c <HAL_ADCEx_InjectedConfigChannel+0x294>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f02:	f023 030f 	bic.w	r3, r3, #15
 8001f06:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6959      	ldr	r1, [r3, #20]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	615a      	str	r2, [r3, #20]
      break;
 8001f1a:	e03b      	b.n	8001f94 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f2a:	f023 030f 	bic.w	r3, r3, #15
 8001f2e:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6999      	ldr	r1, [r3, #24]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	619a      	str	r2, [r3, #24]
      break;
 8001f42:	e027      	b.n	8001f94 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f52:	f023 030f 	bic.w	r3, r3, #15
 8001f56:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69d9      	ldr	r1, [r3, #28]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	61da      	str	r2, [r3, #28]
      break;
 8001f6a:	e013      	b.n	8001f94 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f7a:	f023 030f 	bic.w	r3, r3, #15
 8001f7e:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6a19      	ldr	r1, [r3, #32]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	621a      	str	r2, [r3, #32]
      break;
 8001f92:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8001f96:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d109      	bne.n	8001fb6 <HAL_ADCEx_InjectedConfigChannel+0x2de>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b12      	cmp	r3, #18
 8001fa8:	d105      	bne.n	8001fb6 <HAL_ADCEx_InjectedConfigChannel+0x2de>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d10d      	bne.n	8001fdc <HAL_ADCEx_InjectedConfigChannel+0x304>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b10      	cmp	r3, #16
 8001fc6:	d003      	beq.n	8001fd0 <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b11      	cmp	r3, #17
 8001fce:	d105      	bne.n	8001fdc <HAL_ADCEx_InjectedConfigChannel+0x304>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	000f0001 	.word	0x000f0001
 8001ff8:	40012300 	.word	0x40012300
 8001ffc:	40012000 	.word	0x40012000

08002000 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0ed      	b.n	80021ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f009 f852 	bl	800b0c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0202 	bic.w	r2, r2, #2
 8002032:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002034:	f7fe fff8 	bl	8001028 <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800203a:	e012      	b.n	8002062 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800203c:	f7fe fff4 	bl	8001028 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b0a      	cmp	r3, #10
 8002048:	d90b      	bls.n	8002062 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2205      	movs	r2, #5
 800205a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e0c5      	b.n	80021ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1e5      	bne.n	800203c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002080:	f7fe ffd2 	bl	8001028 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002086:	e012      	b.n	80020ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002088:	f7fe ffce 	bl	8001028 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b0a      	cmp	r3, #10
 8002094:	d90b      	bls.n	80020ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2205      	movs	r2, #5
 80020a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e09f      	b.n	80021ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0e5      	beq.n	8002088 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	7e1b      	ldrb	r3, [r3, #24]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d108      	bne.n	80020d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e007      	b.n	80020e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7e5b      	ldrb	r3, [r3, #25]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d108      	bne.n	8002100 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e007      	b.n	8002110 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800210e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7e9b      	ldrb	r3, [r3, #26]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d108      	bne.n	800212a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0220 	orr.w	r2, r2, #32
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e007      	b.n	800213a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0220 	bic.w	r2, r2, #32
 8002138:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7edb      	ldrb	r3, [r3, #27]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d108      	bne.n	8002154 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0210 	bic.w	r2, r2, #16
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e007      	b.n	8002164 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0210 	orr.w	r2, r2, #16
 8002162:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7f1b      	ldrb	r3, [r3, #28]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d108      	bne.n	800217e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0208 	orr.w	r2, r2, #8
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e007      	b.n	800218e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0208 	bic.w	r2, r2, #8
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7f5b      	ldrb	r3, [r3, #29]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d108      	bne.n	80021a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0204 	orr.w	r2, r2, #4
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	e007      	b.n	80021b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0204 	bic.w	r2, r2, #4
 80021b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	ea42 0103 	orr.w	r1, r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	1e5a      	subs	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0b      	blt.n	8002286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4907      	ldr	r1, [pc, #28]	; (8002294 <__NVIC_EnableIRQ+0x38>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002378:	f7ff ff8e 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff29 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff3e 	bl	8002240 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff8e 	bl	80022ec <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5d 	bl	8002298 <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff31 	bl	800225c <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffa2 	bl	8002354 <SysTick_Config>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7fe fdfe 	bl	8001028 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e099      	b.n	800256c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002458:	e00f      	b.n	800247a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800245a:	f7fe fde5 	bl	8001028 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b05      	cmp	r3, #5
 8002466:	d908      	bls.n	800247a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2203      	movs	r2, #3
 8002472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e078      	b.n	800256c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e8      	bne.n	800245a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4b38      	ldr	r3, [pc, #224]	; (8002574 <HAL_DMA_Init+0x158>)
 8002494:	4013      	ands	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d107      	bne.n	80024e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	4313      	orrs	r3, r2
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f023 0307 	bic.w	r3, r3, #7
 80024fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	4313      	orrs	r3, r2
 8002504:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	2b04      	cmp	r3, #4
 800250c:	d117      	bne.n	800253e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00e      	beq.n	800253e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fae5 	bl	8002af0 <DMA_CheckFifoParam>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2240      	movs	r2, #64	; 0x40
 8002530:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800253a:	2301      	movs	r3, #1
 800253c:	e016      	b.n	800256c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fa9c 	bl	8002a84 <DMA_CalcBaseAndBitshift>
 800254c:	4603      	mov	r3, r0
 800254e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	223f      	movs	r2, #63	; 0x3f
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	f010803f 	.word	0xf010803f

08002578 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_DMA_Start_IT+0x26>
 800259a:	2302      	movs	r3, #2
 800259c:	e040      	b.n	8002620 <HAL_DMA_Start_IT+0xa8>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d12f      	bne.n	8002612 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2202      	movs	r2, #2
 80025b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fa2e 	bl	8002a28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	223f      	movs	r2, #63	; 0x3f
 80025d2:	409a      	lsls	r2, r3
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0216 	orr.w	r2, r2, #22
 80025e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0208 	orr.w	r2, r2, #8
 80025fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e005      	b.n	800261e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800261a:	2302      	movs	r3, #2
 800261c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800261e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d004      	beq.n	8002646 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e00c      	b.n	8002660 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2205      	movs	r2, #5
 800264a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002678:	4b92      	ldr	r3, [pc, #584]	; (80028c4 <HAL_DMA_IRQHandler+0x258>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a92      	ldr	r2, [pc, #584]	; (80028c8 <HAL_DMA_IRQHandler+0x25c>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0a9b      	lsrs	r3, r3, #10
 8002684:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	2208      	movs	r2, #8
 8002698:	409a      	lsls	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d01a      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0204 	bic.w	r2, r2, #4
 80026be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	2208      	movs	r2, #8
 80026c6:	409a      	lsls	r2, r3
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	2201      	movs	r2, #1
 80026de:	409a      	lsls	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d012      	beq.n	800270e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	2201      	movs	r2, #1
 80026fc:	409a      	lsls	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f043 0202 	orr.w	r2, r3, #2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002712:	2204      	movs	r2, #4
 8002714:	409a      	lsls	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d012      	beq.n	8002744 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00b      	beq.n	8002744 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	2204      	movs	r2, #4
 8002732:	409a      	lsls	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273c:	f043 0204 	orr.w	r2, r3, #4
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	2210      	movs	r2, #16
 800274a:	409a      	lsls	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d043      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d03c      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	2210      	movs	r2, #16
 8002768:	409a      	lsls	r2, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d018      	beq.n	80027ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d108      	bne.n	800279c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d024      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
 800279a:	e01f      	b.n	80027dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01b      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
 80027ac:	e016      	b.n	80027dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d107      	bne.n	80027cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0208 	bic.w	r2, r2, #8
 80027ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	2220      	movs	r2, #32
 80027e2:	409a      	lsls	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 808e 	beq.w	800290a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8086 	beq.w	800290a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	2220      	movs	r2, #32
 8002804:	409a      	lsls	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b05      	cmp	r3, #5
 8002814:	d136      	bne.n	8002884 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0216 	bic.w	r2, r2, #22
 8002824:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002834:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d103      	bne.n	8002846 <HAL_DMA_IRQHandler+0x1da>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0208 	bic.w	r2, r2, #8
 8002854:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	223f      	movs	r2, #63	; 0x3f
 800285c:	409a      	lsls	r2, r3
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002876:	2b00      	cmp	r3, #0
 8002878:	d07d      	beq.n	8002976 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
        }
        return;
 8002882:	e078      	b.n	8002976 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01c      	beq.n	80028cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d108      	bne.n	80028b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d030      	beq.n	800290a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
 80028b0:	e02b      	b.n	800290a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d027      	beq.n	800290a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
 80028c2:	e022      	b.n	800290a <HAL_DMA_IRQHandler+0x29e>
 80028c4:	2000002c 	.word	0x2000002c
 80028c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10f      	bne.n	80028fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0210 	bic.w	r2, r2, #16
 80028e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290e:	2b00      	cmp	r3, #0
 8002910:	d032      	beq.n	8002978 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d022      	beq.n	8002964 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2205      	movs	r2, #5
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0201 	bic.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	3301      	adds	r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	429a      	cmp	r2, r3
 8002940:	d307      	bcc.n	8002952 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f2      	bne.n	8002936 <HAL_DMA_IRQHandler+0x2ca>
 8002950:	e000      	b.n	8002954 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002952:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
 8002974:	e000      	b.n	8002978 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002976:	bf00      	nop
    }
  }
}
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop

08002980 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	460b      	mov	r3, r1
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_DMA_RegisterCallback+0x20>
 800299c:	2302      	movs	r3, #2
 800299e:	e03c      	b.n	8002a1a <HAL_DMA_RegisterCallback+0x9a>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d129      	bne.n	8002a08 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 80029b4:	7afb      	ldrb	r3, [r7, #11]
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d829      	bhi.n	8002a0e <HAL_DMA_RegisterCallback+0x8e>
 80029ba:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <HAL_DMA_RegisterCallback+0x40>)
 80029bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c0:	080029d9 	.word	0x080029d9
 80029c4:	080029e1 	.word	0x080029e1
 80029c8:	080029e9 	.word	0x080029e9
 80029cc:	080029f1 	.word	0x080029f1
 80029d0:	080029f9 	.word	0x080029f9
 80029d4:	08002a01 	.word	0x08002a01
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80029de:	e017      	b.n	8002a10 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80029e6:	e013      	b.n	8002a10 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80029ee:	e00f      	b.n	8002a10 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80029f6:	e00b      	b.n	8002a10 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80029fe:	e007      	b.n	8002a10 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002a06:	e003      	b.n	8002a10 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	75fb      	strb	r3, [r7, #23]
 8002a0c:	e000      	b.n	8002a10 <HAL_DMA_RegisterCallback+0x90>
      break;
 8002a0e:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop

08002a28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b40      	cmp	r3, #64	; 0x40
 8002a54:	d108      	bne.n	8002a68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a66:	e007      	b.n	8002a78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	60da      	str	r2, [r3, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	3b10      	subs	r3, #16
 8002a94:	4a14      	ldr	r2, [pc, #80]	; (8002ae8 <DMA_CalcBaseAndBitshift+0x64>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a9e:	4a13      	ldr	r2, [pc, #76]	; (8002aec <DMA_CalcBaseAndBitshift+0x68>)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d909      	bls.n	8002ac6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aba:	f023 0303 	bic.w	r3, r3, #3
 8002abe:	1d1a      	adds	r2, r3, #4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ac4:	e007      	b.n	8002ad6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	aaaaaaab 	.word	0xaaaaaaab
 8002aec:	0800d5b0 	.word	0x0800d5b0

08002af0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d11f      	bne.n	8002b4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d855      	bhi.n	8002bbc <DMA_CheckFifoParam+0xcc>
 8002b10:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <DMA_CheckFifoParam+0x28>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002b29 	.word	0x08002b29
 8002b1c:	08002b3b 	.word	0x08002b3b
 8002b20:	08002b29 	.word	0x08002b29
 8002b24:	08002bbd 	.word	0x08002bbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d045      	beq.n	8002bc0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b38:	e042      	b.n	8002bc0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b42:	d13f      	bne.n	8002bc4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b48:	e03c      	b.n	8002bc4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b52:	d121      	bne.n	8002b98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d836      	bhi.n	8002bc8 <DMA_CheckFifoParam+0xd8>
 8002b5a:	a201      	add	r2, pc, #4	; (adr r2, 8002b60 <DMA_CheckFifoParam+0x70>)
 8002b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b60:	08002b71 	.word	0x08002b71
 8002b64:	08002b77 	.word	0x08002b77
 8002b68:	08002b71 	.word	0x08002b71
 8002b6c:	08002b89 	.word	0x08002b89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      break;
 8002b74:	e02f      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d024      	beq.n	8002bcc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b86:	e021      	b.n	8002bcc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b90:	d11e      	bne.n	8002bd0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b96:	e01b      	b.n	8002bd0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d902      	bls.n	8002ba4 <DMA_CheckFifoParam+0xb4>
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d003      	beq.n	8002baa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ba2:	e018      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba8:	e015      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00e      	beq.n	8002bd4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8002bba:	e00b      	b.n	8002bd4 <DMA_CheckFifoParam+0xe4>
      break;
 8002bbc:	bf00      	nop
 8002bbe:	e00a      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002bc0:	bf00      	nop
 8002bc2:	e008      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002bc4:	bf00      	nop
 8002bc6:	e006      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002bc8:	bf00      	nop
 8002bca:	e004      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002bcc:	bf00      	nop
 8002bce:	e002      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      break;   
 8002bd0:	bf00      	nop
 8002bd2:	e000      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002bd4:	bf00      	nop
    }
  } 
  
  return status; 
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	e16b      	b.n	8002ed8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c00:	2201      	movs	r2, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4013      	ands	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	f040 815a 	bne.w	8002ed2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d00b      	beq.n	8002c3e <HAL_GPIO_Init+0x5a>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d007      	beq.n	8002c3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c32:	2b11      	cmp	r3, #17
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b12      	cmp	r3, #18
 8002c3c:	d130      	bne.n	8002ca0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	2203      	movs	r2, #3
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c74:	2201      	movs	r2, #1
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 0201 	and.w	r2, r3, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0xfc>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b12      	cmp	r3, #18
 8002cde:	d123      	bne.n	8002d28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	08da      	lsrs	r2, r3, #3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3208      	adds	r2, #8
 8002ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	220f      	movs	r2, #15
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	08da      	lsrs	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3208      	adds	r2, #8
 8002d22:	69b9      	ldr	r1, [r7, #24]
 8002d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2203      	movs	r2, #3
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0203 	and.w	r2, r3, #3
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80b4 	beq.w	8002ed2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	4b5f      	ldr	r3, [pc, #380]	; (8002eec <HAL_GPIO_Init+0x308>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	4a5e      	ldr	r2, [pc, #376]	; (8002eec <HAL_GPIO_Init+0x308>)
 8002d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d78:	6453      	str	r3, [r2, #68]	; 0x44
 8002d7a:	4b5c      	ldr	r3, [pc, #368]	; (8002eec <HAL_GPIO_Init+0x308>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d86:	4a5a      	ldr	r2, [pc, #360]	; (8002ef0 <HAL_GPIO_Init+0x30c>)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	089b      	lsrs	r3, r3, #2
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	220f      	movs	r2, #15
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a51      	ldr	r2, [pc, #324]	; (8002ef4 <HAL_GPIO_Init+0x310>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d02b      	beq.n	8002e0a <HAL_GPIO_Init+0x226>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a50      	ldr	r2, [pc, #320]	; (8002ef8 <HAL_GPIO_Init+0x314>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d025      	beq.n	8002e06 <HAL_GPIO_Init+0x222>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a4f      	ldr	r2, [pc, #316]	; (8002efc <HAL_GPIO_Init+0x318>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01f      	beq.n	8002e02 <HAL_GPIO_Init+0x21e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a4e      	ldr	r2, [pc, #312]	; (8002f00 <HAL_GPIO_Init+0x31c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d019      	beq.n	8002dfe <HAL_GPIO_Init+0x21a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4d      	ldr	r2, [pc, #308]	; (8002f04 <HAL_GPIO_Init+0x320>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_GPIO_Init+0x216>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a4c      	ldr	r2, [pc, #304]	; (8002f08 <HAL_GPIO_Init+0x324>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00d      	beq.n	8002df6 <HAL_GPIO_Init+0x212>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a4b      	ldr	r2, [pc, #300]	; (8002f0c <HAL_GPIO_Init+0x328>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <HAL_GPIO_Init+0x20e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a4a      	ldr	r2, [pc, #296]	; (8002f10 <HAL_GPIO_Init+0x32c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_GPIO_Init+0x20a>
 8002dea:	2307      	movs	r3, #7
 8002dec:	e00e      	b.n	8002e0c <HAL_GPIO_Init+0x228>
 8002dee:	2308      	movs	r3, #8
 8002df0:	e00c      	b.n	8002e0c <HAL_GPIO_Init+0x228>
 8002df2:	2306      	movs	r3, #6
 8002df4:	e00a      	b.n	8002e0c <HAL_GPIO_Init+0x228>
 8002df6:	2305      	movs	r3, #5
 8002df8:	e008      	b.n	8002e0c <HAL_GPIO_Init+0x228>
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	e006      	b.n	8002e0c <HAL_GPIO_Init+0x228>
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e004      	b.n	8002e0c <HAL_GPIO_Init+0x228>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e002      	b.n	8002e0c <HAL_GPIO_Init+0x228>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <HAL_GPIO_Init+0x228>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	f002 0203 	and.w	r2, r2, #3
 8002e12:	0092      	lsls	r2, r2, #2
 8002e14:	4093      	lsls	r3, r2
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e1c:	4934      	ldr	r1, [pc, #208]	; (8002ef0 <HAL_GPIO_Init+0x30c>)
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	089b      	lsrs	r3, r3, #2
 8002e22:	3302      	adds	r3, #2
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e2a:	4b3a      	ldr	r3, [pc, #232]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e4e:	4a31      	ldr	r2, [pc, #196]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e54:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e78:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e7e:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ea2:	4a1c      	ldr	r2, [pc, #112]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ecc:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2b0f      	cmp	r3, #15
 8002edc:	f67f ae90 	bls.w	8002c00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	3724      	adds	r7, #36	; 0x24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40013800 	.word	0x40013800
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	40020400 	.word	0x40020400
 8002efc:	40020800 	.word	0x40020800
 8002f00:	40020c00 	.word	0x40020c00
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40021400 	.word	0x40021400
 8002f0c:	40021800 	.word	0x40021800
 8002f10:	40021c00 	.word	0x40021c00
 8002f14:	40013c00 	.word	0x40013c00

08002f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
 8002f24:	4613      	mov	r3, r2
 8002f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f28:	787b      	ldrb	r3, [r7, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f2e:	887a      	ldrh	r2, [r7, #2]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f34:	e003      	b.n	8002f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f36:	887b      	ldrh	r3, [r7, #2]
 8002f38:	041a      	lsls	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	619a      	str	r2, [r3, #24]
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	460b      	mov	r3, r1
 8002f54:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	887b      	ldrh	r3, [r7, #2]
 8002f5c:	401a      	ands	r2, r3
 8002f5e:	887b      	ldrh	r3, [r7, #2]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d104      	bne.n	8002f6e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f64:	887b      	ldrh	r3, [r7, #2]
 8002f66:	041a      	lsls	r2, r3, #16
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002f6c:	e002      	b.n	8002f74 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	619a      	str	r2, [r3, #24]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d006      	beq.n	8002fa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f96:	4a05      	ldr	r2, [pc, #20]	; (8002fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f9c:	88fb      	ldrh	r3, [r7, #6]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f007 fad0 	bl	800a544 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40013c00 	.word	0x40013c00

08002fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e11f      	b.n	8003202 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f008 f8be 	bl	800b158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2224      	movs	r2, #36	; 0x24
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003002:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003012:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003014:	f001 fcb6 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8003018:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4a7b      	ldr	r2, [pc, #492]	; (800320c <HAL_I2C_Init+0x25c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d807      	bhi.n	8003034 <HAL_I2C_Init+0x84>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a7a      	ldr	r2, [pc, #488]	; (8003210 <HAL_I2C_Init+0x260>)
 8003028:	4293      	cmp	r3, r2
 800302a:	bf94      	ite	ls
 800302c:	2301      	movls	r3, #1
 800302e:	2300      	movhi	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e006      	b.n	8003042 <HAL_I2C_Init+0x92>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a77      	ldr	r2, [pc, #476]	; (8003214 <HAL_I2C_Init+0x264>)
 8003038:	4293      	cmp	r3, r2
 800303a:	bf94      	ite	ls
 800303c:	2301      	movls	r3, #1
 800303e:	2300      	movhi	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0db      	b.n	8003202 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a72      	ldr	r2, [pc, #456]	; (8003218 <HAL_I2C_Init+0x268>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0c9b      	lsrs	r3, r3, #18
 8003054:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a64      	ldr	r2, [pc, #400]	; (800320c <HAL_I2C_Init+0x25c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d802      	bhi.n	8003084 <HAL_I2C_Init+0xd4>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	3301      	adds	r3, #1
 8003082:	e009      	b.n	8003098 <HAL_I2C_Init+0xe8>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	4a63      	ldr	r2, [pc, #396]	; (800321c <HAL_I2C_Init+0x26c>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	3301      	adds	r3, #1
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	430b      	orrs	r3, r1
 800309e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4956      	ldr	r1, [pc, #344]	; (800320c <HAL_I2C_Init+0x25c>)
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d80d      	bhi.n	80030d4 <HAL_I2C_Init+0x124>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1e59      	subs	r1, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c6:	3301      	adds	r3, #1
 80030c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	bf38      	it	cc
 80030d0:	2304      	movcc	r3, #4
 80030d2:	e04f      	b.n	8003174 <HAL_I2C_Init+0x1c4>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d111      	bne.n	8003100 <HAL_I2C_Init+0x150>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	440b      	add	r3, r1
 80030ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e012      	b.n	8003126 <HAL_I2C_Init+0x176>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1e58      	subs	r0, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	0099      	lsls	r1, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Init+0x17e>
 800312a:	2301      	movs	r3, #1
 800312c:	e022      	b.n	8003174 <HAL_I2C_Init+0x1c4>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10e      	bne.n	8003154 <HAL_I2C_Init+0x1a4>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1e58      	subs	r0, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	440b      	add	r3, r1
 8003144:	fbb0 f3f3 	udiv	r3, r0, r3
 8003148:	3301      	adds	r3, #1
 800314a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003152:	e00f      	b.n	8003174 <HAL_I2C_Init+0x1c4>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1e58      	subs	r0, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	0099      	lsls	r1, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	6809      	ldr	r1, [r1, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6911      	ldr	r1, [r2, #16]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	4311      	orrs	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	000186a0 	.word	0x000186a0
 8003210:	001e847f 	.word	0x001e847f
 8003214:	003d08ff 	.word	0x003d08ff
 8003218:	431bde83 	.word	0x431bde83
 800321c:	10624dd3 	.word	0x10624dd3

08003220 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	461a      	mov	r2, r3
 800322c:	460b      	mov	r3, r1
 800322e:	817b      	strh	r3, [r7, #10]
 8003230:	4613      	mov	r3, r2
 8003232:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003234:	f7fd fef8 	bl	8001028 <HAL_GetTick>
 8003238:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	f040 80e0 	bne.w	8003408 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2319      	movs	r3, #25
 800324e:	2201      	movs	r2, #1
 8003250:	4970      	ldr	r1, [pc, #448]	; (8003414 <HAL_I2C_Master_Transmit+0x1f4>)
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fc56 	bl	8003b04 <I2C_WaitOnFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800325e:	2302      	movs	r3, #2
 8003260:	e0d3      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_I2C_Master_Transmit+0x50>
 800326c:	2302      	movs	r3, #2
 800326e:	e0cc      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d007      	beq.n	8003296 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0201 	orr.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2221      	movs	r2, #33	; 0x21
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2210      	movs	r2, #16
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	893a      	ldrh	r2, [r7, #8]
 80032c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4a50      	ldr	r2, [pc, #320]	; (8003418 <HAL_I2C_Master_Transmit+0x1f8>)
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032d8:	8979      	ldrh	r1, [r7, #10]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fac2 	bl	8003868 <I2C_MasterRequestWrite>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e08d      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003304:	e066      	b.n	80033d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	6a39      	ldr	r1, [r7, #32]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fcd0 	bl	8003cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00d      	beq.n	8003332 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b04      	cmp	r3, #4
 800331c:	d107      	bne.n	800332e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e06b      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	781a      	ldrb	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b04      	cmp	r3, #4
 800336e:	d11b      	bne.n	80033a8 <HAL_I2C_Master_Transmit+0x188>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	2b00      	cmp	r3, #0
 8003376:	d017      	beq.n	80033a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	6a39      	ldr	r1, [r7, #32]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fcc0 	bl	8003d32 <I2C_WaitOnBTFFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d107      	bne.n	80033d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e01a      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d194      	bne.n	8003306 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	e000      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003408:	2302      	movs	r3, #2
  }
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	00100002 	.word	0x00100002
 8003418:	ffff0000 	.word	0xffff0000

0800341c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08c      	sub	sp, #48	; 0x30
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	461a      	mov	r2, r3
 8003428:	460b      	mov	r3, r1
 800342a:	817b      	strh	r3, [r7, #10]
 800342c:	4613      	mov	r3, r2
 800342e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003430:	f7fd fdfa 	bl	8001028 <HAL_GetTick>
 8003434:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b20      	cmp	r3, #32
 8003440:	f040 820b 	bne.w	800385a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2319      	movs	r3, #25
 800344a:	2201      	movs	r2, #1
 800344c:	497c      	ldr	r1, [pc, #496]	; (8003640 <HAL_I2C_Master_Receive+0x224>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fb58 	bl	8003b04 <I2C_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
 800345c:	e1fe      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_I2C_Master_Receive+0x50>
 8003468:	2302      	movs	r3, #2
 800346a:	e1f7      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d007      	beq.n	8003492 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2222      	movs	r2, #34	; 0x22
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2210      	movs	r2, #16
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	893a      	ldrh	r2, [r7, #8]
 80034c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a5c      	ldr	r2, [pc, #368]	; (8003644 <HAL_I2C_Master_Receive+0x228>)
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034d4:	8979      	ldrh	r1, [r7, #10]
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fa46 	bl	800396c <I2C_MasterRequestRead>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e1b8      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d113      	bne.n	800351a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f2:	2300      	movs	r3, #0
 80034f4:	623b      	str	r3, [r7, #32]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	623b      	str	r3, [r7, #32]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	623b      	str	r3, [r7, #32]
 8003506:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e18c      	b.n	8003834 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351e:	2b01      	cmp	r3, #1
 8003520:	d11b      	bne.n	800355a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003530:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	e16c      	b.n	8003834 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355e:	2b02      	cmp	r3, #2
 8003560:	d11b      	bne.n	800359a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003570:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003580:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	e14c      	b.n	8003834 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035c0:	e138      	b.n	8003834 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	f200 80f1 	bhi.w	80037ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d123      	bne.n	800361c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fbeb 	bl	8003db4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e139      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	855a      	strh	r2, [r3, #42]	; 0x2a
 800361a:	e10b      	b.n	8003834 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	2b02      	cmp	r3, #2
 8003622:	d14e      	bne.n	80036c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	2200      	movs	r2, #0
 800362c:	4906      	ldr	r1, [pc, #24]	; (8003648 <HAL_I2C_Master_Receive+0x22c>)
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fa68 	bl	8003b04 <I2C_WaitOnFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e10e      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
 800363e:	bf00      	nop
 8003640:	00100002 	.word	0x00100002
 8003644:	ffff0000 	.word	0xffff0000
 8003648:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036c0:	e0b8      	b.n	8003834 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	2200      	movs	r2, #0
 80036ca:	4966      	ldr	r1, [pc, #408]	; (8003864 <HAL_I2C_Master_Receive+0x448>)
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fa19 	bl	8003b04 <I2C_WaitOnFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0bf      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	2200      	movs	r2, #0
 8003726:	494f      	ldr	r1, [pc, #316]	; (8003864 <HAL_I2C_Master_Receive+0x448>)
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f9eb 	bl	8003b04 <I2C_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e091      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037ac:	e042      	b.n	8003834 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 fafe 	bl	8003db4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e04c      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d118      	bne.n	8003834 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003838:	2b00      	cmp	r3, #0
 800383a:	f47f aec2 	bne.w	80035c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	e000      	b.n	800385c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800385a:	2302      	movs	r3, #2
  }
}
 800385c:	4618      	mov	r0, r3
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	00010004 	.word	0x00010004

08003868 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	460b      	mov	r3, r1
 8003876:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d006      	beq.n	8003892 <I2C_MasterRequestWrite+0x2a>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d003      	beq.n	8003892 <I2C_MasterRequestWrite+0x2a>
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003890:	d108      	bne.n	80038a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	e00b      	b.n	80038bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	2b12      	cmp	r3, #18
 80038aa:	d107      	bne.n	80038bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f91b 	bl	8003b04 <I2C_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00c      	beq.n	80038ee <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e035      	b.n	800395a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038f6:	d108      	bne.n	800390a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038f8:	897b      	ldrh	r3, [r7, #10]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003906:	611a      	str	r2, [r3, #16]
 8003908:	e01b      	b.n	8003942 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800390a:	897b      	ldrh	r3, [r7, #10]
 800390c:	11db      	asrs	r3, r3, #7
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 0306 	and.w	r3, r3, #6
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f063 030f 	orn	r3, r3, #15
 800391a:	b2da      	uxtb	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	490f      	ldr	r1, [pc, #60]	; (8003964 <I2C_MasterRequestWrite+0xfc>)
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f942 	bl	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e010      	b.n	800395a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003938:	897b      	ldrh	r3, [r7, #10]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4908      	ldr	r1, [pc, #32]	; (8003968 <I2C_MasterRequestWrite+0x100>)
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f932 	bl	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	00010008 	.word	0x00010008
 8003968:	00010002 	.word	0x00010002

0800396c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	460b      	mov	r3, r1
 800397a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003990:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d006      	beq.n	80039a6 <I2C_MasterRequestRead+0x3a>
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d003      	beq.n	80039a6 <I2C_MasterRequestRead+0x3a>
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039a4:	d108      	bne.n	80039b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	e00b      	b.n	80039d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	2b11      	cmp	r3, #17
 80039be:	d107      	bne.n	80039d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f891 	bl	8003b04 <I2C_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00c      	beq.n	8003a02 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e078      	b.n	8003af4 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a0a:	d108      	bne.n	8003a1e <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a0c:	897b      	ldrh	r3, [r7, #10]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	611a      	str	r2, [r3, #16]
 8003a1c:	e05e      	b.n	8003adc <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a1e:	897b      	ldrh	r3, [r7, #10]
 8003a20:	11db      	asrs	r3, r3, #7
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f003 0306 	and.w	r3, r3, #6
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f063 030f 	orn	r3, r3, #15
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	4930      	ldr	r1, [pc, #192]	; (8003afc <I2C_MasterRequestRead+0x190>)
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f8b8 	bl	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e053      	b.n	8003af4 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a4c:	897b      	ldrh	r3, [r7, #10]
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	4929      	ldr	r1, [pc, #164]	; (8003b00 <I2C_MasterRequestRead+0x194>)
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f8a8 	bl	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e043      	b.n	8003af4 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a90:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f830 	bl	8003b04 <I2C_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00c      	beq.n	8003ac4 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003abe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e017      	b.n	8003af4 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ac4:	897b      	ldrh	r3, [r7, #10]
 8003ac6:	11db      	asrs	r3, r3, #7
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f003 0306 	and.w	r3, r3, #6
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f063 030e 	orn	r3, r3, #14
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4907      	ldr	r1, [pc, #28]	; (8003b00 <I2C_MasterRequestRead+0x194>)
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f865 	bl	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	00010008 	.word	0x00010008
 8003b00:	00010002 	.word	0x00010002

08003b04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	4613      	mov	r3, r2
 8003b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b14:	e025      	b.n	8003b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1c:	d021      	beq.n	8003b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1e:	f7fd fa83 	bl	8001028 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d302      	bcc.n	8003b34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d116      	bne.n	8003b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f043 0220 	orr.w	r2, r3, #32
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e023      	b.n	8003baa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d10d      	bne.n	8003b88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	43da      	mvns	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4013      	ands	r3, r2
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bf0c      	ite	eq
 8003b7e:	2301      	moveq	r3, #1
 8003b80:	2300      	movne	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	e00c      	b.n	8003ba2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d0b6      	beq.n	8003b16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bc0:	e051      	b.n	8003c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd0:	d123      	bne.n	8003c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f043 0204 	orr.w	r2, r3, #4
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e046      	b.n	8003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c20:	d021      	beq.n	8003c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c22:	f7fd fa01 	bl	8001028 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d302      	bcc.n	8003c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d116      	bne.n	8003c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f043 0220 	orr.w	r2, r3, #32
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e020      	b.n	8003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d10c      	bne.n	8003c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	43da      	mvns	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	bf14      	ite	ne
 8003c82:	2301      	movne	r3, #1
 8003c84:	2300      	moveq	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	e00b      	b.n	8003ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	43da      	mvns	r2, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4013      	ands	r3, r2
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf14      	ite	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	2300      	moveq	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d18d      	bne.n	8003bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cbc:	e02d      	b.n	8003d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f8ce 	bl	8003e60 <I2C_IsAcknowledgeFailed>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e02d      	b.n	8003d2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cd4:	d021      	beq.n	8003d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd6:	f7fd f9a7 	bl	8001028 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d302      	bcc.n	8003cec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d116      	bne.n	8003d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f043 0220 	orr.w	r2, r3, #32
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e007      	b.n	8003d2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d24:	2b80      	cmp	r3, #128	; 0x80
 8003d26:	d1ca      	bne.n	8003cbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d3e:	e02d      	b.n	8003d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f88d 	bl	8003e60 <I2C_IsAcknowledgeFailed>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e02d      	b.n	8003dac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d56:	d021      	beq.n	8003d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d58:	f7fd f966 	bl	8001028 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d302      	bcc.n	8003d6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d116      	bne.n	8003d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	f043 0220 	orr.w	r2, r3, #32
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e007      	b.n	8003dac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d1ca      	bne.n	8003d40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dc0:	e042      	b.n	8003e48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b10      	cmp	r3, #16
 8003dce:	d119      	bne.n	8003e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0210 	mvn.w	r2, #16
 8003dd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e029      	b.n	8003e58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e04:	f7fd f910 	bl	8001028 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d302      	bcc.n	8003e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d116      	bne.n	8003e48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	f043 0220 	orr.w	r2, r3, #32
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e007      	b.n	8003e58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e52:	2b40      	cmp	r3, #64	; 0x40
 8003e54:	d1b5      	bne.n	8003dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e76:	d11b      	bne.n	8003eb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	f043 0204 	orr.w	r2, r3, #4
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ec0:	b08f      	sub	sp, #60	; 0x3c
 8003ec2:	af0a      	add	r7, sp, #40	; 0x28
 8003ec4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e10f      	b.n	80040f0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f007 fc90 	bl	800b810 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d102      	bne.n	8003f0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f003 ffdd 	bl	8007ece <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	687e      	ldr	r6, [r7, #4]
 8003f1c:	466d      	mov	r5, sp
 8003f1e:	f106 0410 	add.w	r4, r6, #16
 8003f22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f32:	1d33      	adds	r3, r6, #4
 8003f34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f36:	6838      	ldr	r0, [r7, #0]
 8003f38:	f003 ff68 	bl	8007e0c <USB_CoreInit>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2202      	movs	r2, #2
 8003f46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0d0      	b.n	80040f0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f003 ffcb 	bl	8007ef0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	73fb      	strb	r3, [r7, #15]
 8003f5e:	e04a      	b.n	8003ff6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f60:	7bfa      	ldrb	r2, [r7, #15]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	333d      	adds	r3, #61	; 0x3d
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	333c      	adds	r3, #60	; 0x3c
 8003f84:	7bfa      	ldrb	r2, [r7, #15]
 8003f86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	b298      	uxth	r0, r3
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	3342      	adds	r3, #66	; 0x42
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fa0:	7bfa      	ldrb	r2, [r7, #15]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	333f      	adds	r3, #63	; 0x3f
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fb4:	7bfa      	ldrb	r2, [r7, #15]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3344      	adds	r3, #68	; 0x44
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fc8:	7bfa      	ldrb	r2, [r7, #15]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	3348      	adds	r3, #72	; 0x48
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fdc:	7bfa      	ldrb	r2, [r7, #15]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	3350      	adds	r3, #80	; 0x50
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
 8003ff6:	7bfa      	ldrb	r2, [r7, #15]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d3af      	bcc.n	8003f60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004000:	2300      	movs	r3, #0
 8004002:	73fb      	strb	r3, [r7, #15]
 8004004:	e044      	b.n	8004090 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004006:	7bfa      	ldrb	r2, [r7, #15]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800401c:	7bfa      	ldrb	r2, [r7, #15]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800402e:	7bfa      	ldrb	r2, [r7, #15]
 8004030:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004048:	7bfa      	ldrb	r2, [r7, #15]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800405e:	7bfa      	ldrb	r2, [r7, #15]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004074:	7bfa      	ldrb	r2, [r7, #15]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	3301      	adds	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
 8004090:	7bfa      	ldrb	r2, [r7, #15]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	429a      	cmp	r2, r3
 8004098:	d3b5      	bcc.n	8004006 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	687e      	ldr	r6, [r7, #4]
 80040a2:	466d      	mov	r5, sp
 80040a4:	f106 0410 	add.w	r4, r6, #16
 80040a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80040b8:	1d33      	adds	r3, r6, #4
 80040ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040bc:	6838      	ldr	r0, [r7, #0]
 80040be:	f003 ff41 	bl	8007f44 <USB_DevInit>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e00d      	b.n	80040f0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f004 f8fe 	bl	80082ea <USB_DevDisconnect>

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e25b      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d075      	beq.n	8004202 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004116:	4ba3      	ldr	r3, [pc, #652]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	2b04      	cmp	r3, #4
 8004120:	d00c      	beq.n	800413c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004122:	4ba0      	ldr	r3, [pc, #640]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800412a:	2b08      	cmp	r3, #8
 800412c:	d112      	bne.n	8004154 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800412e:	4b9d      	ldr	r3, [pc, #628]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800413a:	d10b      	bne.n	8004154 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413c:	4b99      	ldr	r3, [pc, #612]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d05b      	beq.n	8004200 <HAL_RCC_OscConfig+0x108>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d157      	bne.n	8004200 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e236      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415c:	d106      	bne.n	800416c <HAL_RCC_OscConfig+0x74>
 800415e:	4b91      	ldr	r3, [pc, #580]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a90      	ldr	r2, [pc, #576]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	e01d      	b.n	80041a8 <HAL_RCC_OscConfig+0xb0>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004174:	d10c      	bne.n	8004190 <HAL_RCC_OscConfig+0x98>
 8004176:	4b8b      	ldr	r3, [pc, #556]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a8a      	ldr	r2, [pc, #552]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	4b88      	ldr	r3, [pc, #544]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a87      	ldr	r2, [pc, #540]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e00b      	b.n	80041a8 <HAL_RCC_OscConfig+0xb0>
 8004190:	4b84      	ldr	r3, [pc, #528]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a83      	ldr	r2, [pc, #524]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	4b81      	ldr	r3, [pc, #516]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a80      	ldr	r2, [pc, #512]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 80041a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d013      	beq.n	80041d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fc ff3a 	bl	8001028 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fc ff36 	bl	8001028 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e1fb      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ca:	4b76      	ldr	r3, [pc, #472]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0xc0>
 80041d6:	e014      	b.n	8004202 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7fc ff26 	bl	8001028 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e0:	f7fc ff22 	bl	8001028 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	; 0x64
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e1e7      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041f2:	4b6c      	ldr	r3, [pc, #432]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0xe8>
 80041fe:	e000      	b.n	8004202 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d063      	beq.n	80042d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800420e:	4b65      	ldr	r3, [pc, #404]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800421a:	4b62      	ldr	r3, [pc, #392]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004222:	2b08      	cmp	r3, #8
 8004224:	d11c      	bne.n	8004260 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004226:	4b5f      	ldr	r3, [pc, #380]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d116      	bne.n	8004260 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004232:	4b5c      	ldr	r3, [pc, #368]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <HAL_RCC_OscConfig+0x152>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d001      	beq.n	800424a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e1bb      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424a:	4b56      	ldr	r3, [pc, #344]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4952      	ldr	r1, [pc, #328]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425e:	e03a      	b.n	80042d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d020      	beq.n	80042aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004268:	4b4f      	ldr	r3, [pc, #316]	; (80043a8 <HAL_RCC_OscConfig+0x2b0>)
 800426a:	2201      	movs	r2, #1
 800426c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426e:	f7fc fedb 	bl	8001028 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004276:	f7fc fed7 	bl	8001028 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e19c      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004288:	4b46      	ldr	r3, [pc, #280]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004294:	4b43      	ldr	r3, [pc, #268]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4940      	ldr	r1, [pc, #256]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	600b      	str	r3, [r1, #0]
 80042a8:	e015      	b.n	80042d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042aa:	4b3f      	ldr	r3, [pc, #252]	; (80043a8 <HAL_RCC_OscConfig+0x2b0>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7fc feba 	bl	8001028 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042b8:	f7fc feb6 	bl	8001028 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e17b      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ca:	4b36      	ldr	r3, [pc, #216]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d030      	beq.n	8004344 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d016      	beq.n	8004318 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ea:	4b30      	ldr	r3, [pc, #192]	; (80043ac <HAL_RCC_OscConfig+0x2b4>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f0:	f7fc fe9a 	bl	8001028 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f8:	f7fc fe96 	bl	8001028 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e15b      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800430a:	4b26      	ldr	r3, [pc, #152]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 800430c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0x200>
 8004316:	e015      	b.n	8004344 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004318:	4b24      	ldr	r3, [pc, #144]	; (80043ac <HAL_RCC_OscConfig+0x2b4>)
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431e:	f7fc fe83 	bl	8001028 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004326:	f7fc fe7f 	bl	8001028 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e144      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004338:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 800433a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f0      	bne.n	8004326 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 80a0 	beq.w	8004492 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004352:	2300      	movs	r3, #0
 8004354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004356:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10f      	bne.n	8004382 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 800436c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004370:	6413      	str	r3, [r2, #64]	; 0x40
 8004372:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <HAL_RCC_OscConfig+0x2ac>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800437e:	2301      	movs	r3, #1
 8004380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_RCC_OscConfig+0x2b8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d121      	bne.n	80043d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <HAL_RCC_OscConfig+0x2b8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a07      	ldr	r2, [pc, #28]	; (80043b0 <HAL_RCC_OscConfig+0x2b8>)
 8004394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800439a:	f7fc fe45 	bl	8001028 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a0:	e011      	b.n	80043c6 <HAL_RCC_OscConfig+0x2ce>
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800
 80043a8:	42470000 	.word	0x42470000
 80043ac:	42470e80 	.word	0x42470e80
 80043b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b4:	f7fc fe38 	bl	8001028 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e0fd      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c6:	4b81      	ldr	r3, [pc, #516]	; (80045cc <HAL_RCC_OscConfig+0x4d4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d106      	bne.n	80043e8 <HAL_RCC_OscConfig+0x2f0>
 80043da:	4b7d      	ldr	r3, [pc, #500]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 80043dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043de:	4a7c      	ldr	r2, [pc, #496]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	6713      	str	r3, [r2, #112]	; 0x70
 80043e6:	e01c      	b.n	8004422 <HAL_RCC_OscConfig+0x32a>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	2b05      	cmp	r3, #5
 80043ee:	d10c      	bne.n	800440a <HAL_RCC_OscConfig+0x312>
 80043f0:	4b77      	ldr	r3, [pc, #476]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 80043f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f4:	4a76      	ldr	r2, [pc, #472]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 80043f6:	f043 0304 	orr.w	r3, r3, #4
 80043fa:	6713      	str	r3, [r2, #112]	; 0x70
 80043fc:	4b74      	ldr	r3, [pc, #464]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004400:	4a73      	ldr	r2, [pc, #460]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	6713      	str	r3, [r2, #112]	; 0x70
 8004408:	e00b      	b.n	8004422 <HAL_RCC_OscConfig+0x32a>
 800440a:	4b71      	ldr	r3, [pc, #452]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	4a70      	ldr	r2, [pc, #448]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	6713      	str	r3, [r2, #112]	; 0x70
 8004416:	4b6e      	ldr	r3, [pc, #440]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	4a6d      	ldr	r2, [pc, #436]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 800441c:	f023 0304 	bic.w	r3, r3, #4
 8004420:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d015      	beq.n	8004456 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442a:	f7fc fdfd 	bl	8001028 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004430:	e00a      	b.n	8004448 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fc fdf9 	bl	8001028 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e0bc      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004448:	4b61      	ldr	r3, [pc, #388]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0ee      	beq.n	8004432 <HAL_RCC_OscConfig+0x33a>
 8004454:	e014      	b.n	8004480 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004456:	f7fc fde7 	bl	8001028 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800445c:	e00a      	b.n	8004474 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800445e:	f7fc fde3 	bl	8001028 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	f241 3288 	movw	r2, #5000	; 0x1388
 800446c:	4293      	cmp	r3, r2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e0a6      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004474:	4b56      	ldr	r3, [pc, #344]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1ee      	bne.n	800445e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d105      	bne.n	8004492 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004486:	4b52      	ldr	r3, [pc, #328]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	4a51      	ldr	r2, [pc, #324]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 800448c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004490:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 8092 	beq.w	80045c0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800449c:	4b4c      	ldr	r3, [pc, #304]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 030c 	and.w	r3, r3, #12
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d05c      	beq.n	8004562 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d141      	bne.n	8004534 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b0:	4b48      	ldr	r3, [pc, #288]	; (80045d4 <HAL_RCC_OscConfig+0x4dc>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b6:	f7fc fdb7 	bl	8001028 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044be:	f7fc fdb3 	bl	8001028 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e078      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d0:	4b3f      	ldr	r3, [pc, #252]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1f0      	bne.n	80044be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	019b      	lsls	r3, r3, #6
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	3b01      	subs	r3, #1
 80044f6:	041b      	lsls	r3, r3, #16
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	061b      	lsls	r3, r3, #24
 8004500:	4933      	ldr	r1, [pc, #204]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 8004502:	4313      	orrs	r3, r2
 8004504:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004506:	4b33      	ldr	r3, [pc, #204]	; (80045d4 <HAL_RCC_OscConfig+0x4dc>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fc fd8c 	bl	8001028 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004514:	f7fc fd88 	bl	8001028 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e04d      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004526:	4b2a      	ldr	r3, [pc, #168]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x41c>
 8004532:	e045      	b.n	80045c0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004534:	4b27      	ldr	r3, [pc, #156]	; (80045d4 <HAL_RCC_OscConfig+0x4dc>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453a:	f7fc fd75 	bl	8001028 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004542:	f7fc fd71 	bl	8001028 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e036      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004554:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f0      	bne.n	8004542 <HAL_RCC_OscConfig+0x44a>
 8004560:	e02e      	b.n	80045c0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e029      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800456e:	4b18      	ldr	r3, [pc, #96]	; (80045d0 <HAL_RCC_OscConfig+0x4d8>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	429a      	cmp	r2, r3
 8004580:	d11c      	bne.n	80045bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800458c:	429a      	cmp	r2, r3
 800458e:	d115      	bne.n	80045bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004596:	4013      	ands	r3, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800459c:	4293      	cmp	r3, r2
 800459e:	d10d      	bne.n	80045bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d106      	bne.n	80045bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40007000 	.word	0x40007000
 80045d0:	40023800 	.word	0x40023800
 80045d4:	42470060 	.word	0x42470060

080045d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0cc      	b.n	8004786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045ec:	4b68      	ldr	r3, [pc, #416]	; (8004790 <HAL_RCC_ClockConfig+0x1b8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 030f 	and.w	r3, r3, #15
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d90c      	bls.n	8004614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fa:	4b65      	ldr	r3, [pc, #404]	; (8004790 <HAL_RCC_ClockConfig+0x1b8>)
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004602:	4b63      	ldr	r3, [pc, #396]	; (8004790 <HAL_RCC_ClockConfig+0x1b8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d001      	beq.n	8004614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e0b8      	b.n	8004786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d020      	beq.n	8004662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800462c:	4b59      	ldr	r3, [pc, #356]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4a58      	ldr	r2, [pc, #352]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004644:	4b53      	ldr	r3, [pc, #332]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	4a52      	ldr	r2, [pc, #328]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800464e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004650:	4b50      	ldr	r3, [pc, #320]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	494d      	ldr	r1, [pc, #308]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d044      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d107      	bne.n	8004686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004676:	4b47      	ldr	r3, [pc, #284]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d119      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e07f      	b.n	8004786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d003      	beq.n	8004696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004692:	2b03      	cmp	r3, #3
 8004694:	d107      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004696:	4b3f      	ldr	r3, [pc, #252]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e06f      	b.n	8004786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a6:	4b3b      	ldr	r3, [pc, #236]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e067      	b.n	8004786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046b6:	4b37      	ldr	r3, [pc, #220]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f023 0203 	bic.w	r2, r3, #3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4934      	ldr	r1, [pc, #208]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046c8:	f7fc fcae 	bl	8001028 <HAL_GetTick>
 80046cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d0:	f7fc fcaa 	bl	8001028 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	; 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e04f      	b.n	8004786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e6:	4b2b      	ldr	r3, [pc, #172]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 020c 	and.w	r2, r3, #12
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d1eb      	bne.n	80046d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046f8:	4b25      	ldr	r3, [pc, #148]	; (8004790 <HAL_RCC_ClockConfig+0x1b8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d20c      	bcs.n	8004720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004706:	4b22      	ldr	r3, [pc, #136]	; (8004790 <HAL_RCC_ClockConfig+0x1b8>)
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800470e:	4b20      	ldr	r3, [pc, #128]	; (8004790 <HAL_RCC_ClockConfig+0x1b8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d001      	beq.n	8004720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e032      	b.n	8004786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800472c:	4b19      	ldr	r3, [pc, #100]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	4916      	ldr	r1, [pc, #88]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	4313      	orrs	r3, r2
 800473c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d009      	beq.n	800475e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800474a:	4b12      	ldr	r3, [pc, #72]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	490e      	ldr	r1, [pc, #56]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	4313      	orrs	r3, r2
 800475c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800475e:	f000 f82d 	bl	80047bc <HAL_RCC_GetSysClockFreq>
 8004762:	4601      	mov	r1, r0
 8004764:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	091b      	lsrs	r3, r3, #4
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <HAL_RCC_ClockConfig+0x1c0>)
 8004770:	5cd3      	ldrb	r3, [r2, r3]
 8004772:	fa21 f303 	lsr.w	r3, r1, r3
 8004776:	4a09      	ldr	r2, [pc, #36]	; (800479c <HAL_RCC_ClockConfig+0x1c4>)
 8004778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800477a:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <HAL_RCC_ClockConfig+0x1c8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f7fc fc0e 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40023c00 	.word	0x40023c00
 8004794:	40023800 	.word	0x40023800
 8004798:	0800d5b8 	.word	0x0800d5b8
 800479c:	2000002c 	.word	0x2000002c
 80047a0:	20000000 	.word	0x20000000

080047a4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80047a8:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <HAL_RCC_EnableCSS+0x14>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
}
 80047ae:	bf00      	nop
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	4247004c 	.word	0x4247004c

080047bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	607b      	str	r3, [r7, #4]
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	2300      	movs	r3, #0
 80047cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047d2:	4b63      	ldr	r3, [pc, #396]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 030c 	and.w	r3, r3, #12
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d007      	beq.n	80047ee <HAL_RCC_GetSysClockFreq+0x32>
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d008      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0x38>
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 80b4 	bne.w	8004950 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047e8:	4b5e      	ldr	r3, [pc, #376]	; (8004964 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047ea:	60bb      	str	r3, [r7, #8]
       break;
 80047ec:	e0b3      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ee:	4b5e      	ldr	r3, [pc, #376]	; (8004968 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80047f0:	60bb      	str	r3, [r7, #8]
      break;
 80047f2:	e0b0      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047f4:	4b5a      	ldr	r3, [pc, #360]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047fe:	4b58      	ldr	r3, [pc, #352]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d04a      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800480a:	4b55      	ldr	r3, [pc, #340]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	099b      	lsrs	r3, r3, #6
 8004810:	f04f 0400 	mov.w	r4, #0
 8004814:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	ea03 0501 	and.w	r5, r3, r1
 8004820:	ea04 0602 	and.w	r6, r4, r2
 8004824:	4629      	mov	r1, r5
 8004826:	4632      	mov	r2, r6
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	f04f 0400 	mov.w	r4, #0
 8004830:	0154      	lsls	r4, r2, #5
 8004832:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004836:	014b      	lsls	r3, r1, #5
 8004838:	4619      	mov	r1, r3
 800483a:	4622      	mov	r2, r4
 800483c:	1b49      	subs	r1, r1, r5
 800483e:	eb62 0206 	sbc.w	r2, r2, r6
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	f04f 0400 	mov.w	r4, #0
 800484a:	0194      	lsls	r4, r2, #6
 800484c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004850:	018b      	lsls	r3, r1, #6
 8004852:	1a5b      	subs	r3, r3, r1
 8004854:	eb64 0402 	sbc.w	r4, r4, r2
 8004858:	f04f 0100 	mov.w	r1, #0
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	00e2      	lsls	r2, r4, #3
 8004862:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004866:	00d9      	lsls	r1, r3, #3
 8004868:	460b      	mov	r3, r1
 800486a:	4614      	mov	r4, r2
 800486c:	195b      	adds	r3, r3, r5
 800486e:	eb44 0406 	adc.w	r4, r4, r6
 8004872:	f04f 0100 	mov.w	r1, #0
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	0262      	lsls	r2, r4, #9
 800487c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004880:	0259      	lsls	r1, r3, #9
 8004882:	460b      	mov	r3, r1
 8004884:	4614      	mov	r4, r2
 8004886:	4618      	mov	r0, r3
 8004888:	4621      	mov	r1, r4
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f04f 0400 	mov.w	r4, #0
 8004890:	461a      	mov	r2, r3
 8004892:	4623      	mov	r3, r4
 8004894:	f7fc f9e2 	bl	8000c5c <__aeabi_uldivmod>
 8004898:	4603      	mov	r3, r0
 800489a:	460c      	mov	r4, r1
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	e049      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a0:	4b2f      	ldr	r3, [pc, #188]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	099b      	lsrs	r3, r3, #6
 80048a6:	f04f 0400 	mov.w	r4, #0
 80048aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	ea03 0501 	and.w	r5, r3, r1
 80048b6:	ea04 0602 	and.w	r6, r4, r2
 80048ba:	4629      	mov	r1, r5
 80048bc:	4632      	mov	r2, r6
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	f04f 0400 	mov.w	r4, #0
 80048c6:	0154      	lsls	r4, r2, #5
 80048c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048cc:	014b      	lsls	r3, r1, #5
 80048ce:	4619      	mov	r1, r3
 80048d0:	4622      	mov	r2, r4
 80048d2:	1b49      	subs	r1, r1, r5
 80048d4:	eb62 0206 	sbc.w	r2, r2, r6
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	f04f 0400 	mov.w	r4, #0
 80048e0:	0194      	lsls	r4, r2, #6
 80048e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048e6:	018b      	lsls	r3, r1, #6
 80048e8:	1a5b      	subs	r3, r3, r1
 80048ea:	eb64 0402 	sbc.w	r4, r4, r2
 80048ee:	f04f 0100 	mov.w	r1, #0
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	00e2      	lsls	r2, r4, #3
 80048f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048fc:	00d9      	lsls	r1, r3, #3
 80048fe:	460b      	mov	r3, r1
 8004900:	4614      	mov	r4, r2
 8004902:	195b      	adds	r3, r3, r5
 8004904:	eb44 0406 	adc.w	r4, r4, r6
 8004908:	f04f 0100 	mov.w	r1, #0
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	02a2      	lsls	r2, r4, #10
 8004912:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004916:	0299      	lsls	r1, r3, #10
 8004918:	460b      	mov	r3, r1
 800491a:	4614      	mov	r4, r2
 800491c:	4618      	mov	r0, r3
 800491e:	4621      	mov	r1, r4
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f04f 0400 	mov.w	r4, #0
 8004926:	461a      	mov	r2, r3
 8004928:	4623      	mov	r3, r4
 800492a:	f7fc f997 	bl	8000c5c <__aeabi_uldivmod>
 800492e:	4603      	mov	r3, r0
 8004930:	460c      	mov	r4, r1
 8004932:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004934:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	0c1b      	lsrs	r3, r3, #16
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	3301      	adds	r3, #1
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	fbb2 f3f3 	udiv	r3, r2, r3
 800494c:	60bb      	str	r3, [r7, #8]
      break;
 800494e:	e002      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004950:	4b04      	ldr	r3, [pc, #16]	; (8004964 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004952:	60bb      	str	r3, [r7, #8]
      break;
 8004954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004956:	68bb      	ldr	r3, [r7, #8]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004960:	40023800 	.word	0x40023800
 8004964:	00f42400 	.word	0x00f42400
 8004968:	007a1200 	.word	0x007a1200

0800496c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <HAL_RCC_GetHCLKFreq+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	2000002c 	.word	0x2000002c

08004984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004988:	f7ff fff0 	bl	800496c <HAL_RCC_GetHCLKFreq>
 800498c:	4601      	mov	r1, r0
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0a9b      	lsrs	r3, r3, #10
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4a03      	ldr	r2, [pc, #12]	; (80049a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800499a:	5cd3      	ldrb	r3, [r2, r3]
 800499c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800
 80049a8:	0800d5c8 	.word	0x0800d5c8

080049ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049b0:	f7ff ffdc 	bl	800496c <HAL_RCC_GetHCLKFreq>
 80049b4:	4601      	mov	r1, r0
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	0b5b      	lsrs	r3, r3, #13
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4a03      	ldr	r2, [pc, #12]	; (80049d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049c2:	5cd3      	ldrb	r3, [r2, r3]
 80049c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	0800d5c8 	.word	0x0800d5c8

080049d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d035      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049fc:	4b62      	ldr	r3, [pc, #392]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a02:	f7fc fb11 	bl	8001028 <HAL_GetTick>
 8004a06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a08:	e008      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a0a:	f7fc fb0d 	bl	8001028 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e0b0      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a1c:	4b5b      	ldr	r3, [pc, #364]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f0      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	019a      	lsls	r2, r3, #6
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	071b      	lsls	r3, r3, #28
 8004a34:	4955      	ldr	r1, [pc, #340]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a3c:	4b52      	ldr	r3, [pc, #328]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a42:	f7fc faf1 	bl	8001028 <HAL_GetTick>
 8004a46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a48:	e008      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a4a:	f7fc faed 	bl	8001028 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e090      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a5c:	4b4b      	ldr	r3, [pc, #300]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 8083 	beq.w	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	4b44      	ldr	r3, [pc, #272]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	4a43      	ldr	r2, [pc, #268]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a84:	6413      	str	r3, [r2, #64]	; 0x40
 8004a86:	4b41      	ldr	r3, [pc, #260]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a92:	4b3f      	ldr	r3, [pc, #252]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a3e      	ldr	r2, [pc, #248]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a9e:	f7fc fac3 	bl	8001028 <HAL_GetTick>
 8004aa2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004aa6:	f7fc fabf 	bl	8001028 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e062      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ab8:	4b35      	ldr	r3, [pc, #212]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ac4:	4b31      	ldr	r3, [pc, #196]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004acc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d02f      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d028      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ae2:	4b2a      	ldr	r3, [pc, #168]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aec:	4b29      	ldr	r3, [pc, #164]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004af2:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004af8:	4a24      	ldr	r2, [pc, #144]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004afe:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d114      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b0a:	f7fc fa8d 	bl	8001028 <HAL_GetTick>
 8004b0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b10:	e00a      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b12:	f7fc fa89 	bl	8001028 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e02a      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b28:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0ee      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b40:	d10d      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b56:	490d      	ldr	r1, [pc, #52]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	608b      	str	r3, [r1, #8]
 8004b5c:	e005      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	4a0a      	ldr	r2, [pc, #40]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b64:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b68:	6093      	str	r3, [r2, #8]
 8004b6a:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b76:	4905      	ldr	r1, [pc, #20]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	42470068 	.word	0x42470068
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	40007000 	.word	0x40007000
 8004b94:	42470e40 	.word	0x42470e40

08004b98 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e083      	b.n	8004cb2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	7f5b      	ldrb	r3, [r3, #29]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d105      	bne.n	8004bc0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f006 fb48 	bl	800b250 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	22ca      	movs	r2, #202	; 0xca
 8004bcc:	625a      	str	r2, [r3, #36]	; 0x24
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2253      	movs	r2, #83	; 0x53
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f897 	bl	8004d0a <RTC_EnterInitMode>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d008      	beq.n	8004bf4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	22ff      	movs	r2, #255	; 0xff
 8004be8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2204      	movs	r2, #4
 8004bee:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e05e      	b.n	8004cb2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c06:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6899      	ldr	r1, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	68d2      	ldr	r2, [r2, #12]
 8004c2e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6919      	ldr	r1, [r3, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	041a      	lsls	r2, r3, #16
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c52:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10e      	bne.n	8004c80 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f829 	bl	8004cba <HAL_RTC_WaitForSynchro>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d008      	beq.n	8004c80 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	22ff      	movs	r2, #255	; 0xff
 8004c74:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2204      	movs	r2, #4
 8004c7a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e018      	b.n	8004cb2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c8e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	22ff      	movs	r2, #255	; 0xff
 8004ca8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
  }
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cd4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cd6:	f7fc f9a7 	bl	8001028 <HAL_GetTick>
 8004cda:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004cdc:	e009      	b.n	8004cf2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cde:	f7fc f9a3 	bl	8001028 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cec:	d901      	bls.n	8004cf2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e007      	b.n	8004d02 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0ee      	beq.n	8004cde <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d119      	bne.n	8004d58 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d2c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d2e:	f7fc f97b 	bl	8001028 <HAL_GetTick>
 8004d32:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004d34:	e009      	b.n	8004d4a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d36:	f7fc f977 	bl	8001028 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d44:	d901      	bls.n	8004d4a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e007      	b.n	8004d5a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0ee      	beq.n	8004d36 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e056      	b.n	8004e22 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f006 fa74 	bl	800b27c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004daa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	ea42 0103 	orr.w	r1, r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	f003 0104 	and.w	r1, r3, #4
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69da      	ldr	r2, [r3, #28]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b088      	sub	sp, #32
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	4613      	mov	r3, r2
 8004e38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_SPI_Transmit+0x22>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e11e      	b.n	800508a <HAL_SPI_Transmit+0x260>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e54:	f7fc f8e8 	bl	8001028 <HAL_GetTick>
 8004e58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d002      	beq.n	8004e70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e6e:	e103      	b.n	8005078 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <HAL_SPI_Transmit+0x52>
 8004e76:	88fb      	ldrh	r3, [r7, #6]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d102      	bne.n	8004e82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e80:	e0fa      	b.n	8005078 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2203      	movs	r2, #3
 8004e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	88fa      	ldrh	r2, [r7, #6]
 8004e9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	88fa      	ldrh	r2, [r7, #6]
 8004ea0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec8:	d107      	bne.n	8004eda <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ed8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee4:	2b40      	cmp	r3, #64	; 0x40
 8004ee6:	d007      	beq.n	8004ef8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ef6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f00:	d14b      	bne.n	8004f9a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <HAL_SPI_Transmit+0xe6>
 8004f0a:	8afb      	ldrh	r3, [r7, #22]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d13e      	bne.n	8004f8e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f14:	881a      	ldrh	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f20:	1c9a      	adds	r2, r3, #2
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f34:	e02b      	b.n	8004f8e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d112      	bne.n	8004f6a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	881a      	ldrh	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	1c9a      	adds	r2, r3, #2
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f68:	e011      	b.n	8004f8e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f6a:	f7fc f85d 	bl	8001028 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d803      	bhi.n	8004f82 <HAL_SPI_Transmit+0x158>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f80:	d102      	bne.n	8004f88 <HAL_SPI_Transmit+0x15e>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f8c:	e074      	b.n	8005078 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1ce      	bne.n	8004f36 <HAL_SPI_Transmit+0x10c>
 8004f98:	e04c      	b.n	8005034 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <HAL_SPI_Transmit+0x17e>
 8004fa2:	8afb      	ldrh	r3, [r7, #22]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d140      	bne.n	800502a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	7812      	ldrb	r2, [r2, #0]
 8004fb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004fce:	e02c      	b.n	800502a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d113      	bne.n	8005006 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	330c      	adds	r3, #12
 8004fe8:	7812      	ldrb	r2, [r2, #0]
 8004fea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	86da      	strh	r2, [r3, #54]	; 0x36
 8005004:	e011      	b.n	800502a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005006:	f7fc f80f 	bl	8001028 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d803      	bhi.n	800501e <HAL_SPI_Transmit+0x1f4>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800501c:	d102      	bne.n	8005024 <HAL_SPI_Transmit+0x1fa>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d102      	bne.n	800502a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005028:	e026      	b.n	8005078 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1cd      	bne.n	8004fd0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	6839      	ldr	r1, [r7, #0]
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 fcc3 	bl	80059c4 <SPI_EndRxTxTransaction>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10a      	bne.n	8005068 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005052:	2300      	movs	r3, #0
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	77fb      	strb	r3, [r7, #31]
 8005074:	e000      	b.n	8005078 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005076:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005088:	7ffb      	ldrb	r3, [r7, #31]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3720      	adds	r7, #32
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b088      	sub	sp, #32
 8005096:	af02      	add	r7, sp, #8
 8005098:	60f8      	str	r0, [r7, #12]
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	603b      	str	r3, [r7, #0]
 800509e:	4613      	mov	r3, r2
 80050a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ae:	d112      	bne.n	80050d6 <HAL_SPI_Receive+0x44>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10e      	bne.n	80050d6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2204      	movs	r2, #4
 80050bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80050c0:	88fa      	ldrh	r2, [r7, #6]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	4613      	mov	r3, r2
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f8e9 	bl	80052a4 <HAL_SPI_TransmitReceive>
 80050d2:	4603      	mov	r3, r0
 80050d4:	e0e2      	b.n	800529c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_SPI_Receive+0x52>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e0db      	b.n	800529c <HAL_SPI_Receive+0x20a>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050ec:	f7fb ff9c 	bl	8001028 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d002      	beq.n	8005104 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80050fe:	2302      	movs	r3, #2
 8005100:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005102:	e0c2      	b.n	800528a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <HAL_SPI_Receive+0x7e>
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d102      	bne.n	8005116 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005114:	e0b9      	b.n	800528a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2204      	movs	r2, #4
 800511a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	88fa      	ldrh	r2, [r7, #6]
 800512e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	88fa      	ldrh	r2, [r7, #6]
 8005134:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800515c:	d107      	bne.n	800516e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800516c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b40      	cmp	r3, #64	; 0x40
 800517a:	d007      	beq.n	800518c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800518a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d162      	bne.n	800525a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005194:	e02e      	b.n	80051f4 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d115      	bne.n	80051d0 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f103 020c 	add.w	r2, r3, #12
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	7812      	ldrb	r2, [r2, #0]
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ce:	e011      	b.n	80051f4 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051d0:	f7fb ff2a 	bl	8001028 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d803      	bhi.n	80051e8 <HAL_SPI_Receive+0x156>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051e6:	d102      	bne.n	80051ee <HAL_SPI_Receive+0x15c>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d102      	bne.n	80051f4 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80051f2:	e04a      	b.n	800528a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1cb      	bne.n	8005196 <HAL_SPI_Receive+0x104>
 80051fe:	e031      	b.n	8005264 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b01      	cmp	r3, #1
 800520c:	d113      	bne.n	8005236 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	b292      	uxth	r2, r2
 800521a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	1c9a      	adds	r2, r3, #2
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005234:	e011      	b.n	800525a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005236:	f7fb fef7 	bl	8001028 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d803      	bhi.n	800524e <HAL_SPI_Receive+0x1bc>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800524c:	d102      	bne.n	8005254 <HAL_SPI_Receive+0x1c2>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d102      	bne.n	800525a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005258:	e017      	b.n	800528a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1cd      	bne.n	8005200 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	6839      	ldr	r1, [r7, #0]
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fb45 	bl	80058f8 <SPI_EndRxTransaction>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	75fb      	strb	r3, [r7, #23]
 8005286:	e000      	b.n	800528a <HAL_SPI_Receive+0x1f8>
  }

error :
 8005288:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800529a:	7dfb      	ldrb	r3, [r7, #23]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08c      	sub	sp, #48	; 0x30
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052b2:	2301      	movs	r3, #1
 80052b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_SPI_TransmitReceive+0x26>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e18a      	b.n	80055e0 <HAL_SPI_TransmitReceive+0x33c>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052d2:	f7fb fea9 	bl	8001028 <HAL_GetTick>
 80052d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80052e8:	887b      	ldrh	r3, [r7, #2]
 80052ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d00f      	beq.n	8005314 <HAL_SPI_TransmitReceive+0x70>
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052fa:	d107      	bne.n	800530c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d103      	bne.n	800530c <HAL_SPI_TransmitReceive+0x68>
 8005304:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005308:	2b04      	cmp	r3, #4
 800530a:	d003      	beq.n	8005314 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800530c:	2302      	movs	r3, #2
 800530e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005312:	e15b      	b.n	80055cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d005      	beq.n	8005326 <HAL_SPI_TransmitReceive+0x82>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <HAL_SPI_TransmitReceive+0x82>
 8005320:	887b      	ldrh	r3, [r7, #2]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d103      	bne.n	800532e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800532c:	e14e      	b.n	80055cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b04      	cmp	r3, #4
 8005338:	d003      	beq.n	8005342 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2205      	movs	r2, #5
 800533e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	887a      	ldrh	r2, [r7, #2]
 8005352:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	887a      	ldrh	r2, [r7, #2]
 8005358:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	887a      	ldrh	r2, [r7, #2]
 8005364:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	887a      	ldrh	r2, [r7, #2]
 800536a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005382:	2b40      	cmp	r3, #64	; 0x40
 8005384:	d007      	beq.n	8005396 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005394:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800539e:	d178      	bne.n	8005492 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <HAL_SPI_TransmitReceive+0x10a>
 80053a8:	8b7b      	ldrh	r3, [r7, #26]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d166      	bne.n	800547c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	881a      	ldrh	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	1c9a      	adds	r2, r3, #2
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053d2:	e053      	b.n	800547c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d11b      	bne.n	800541a <HAL_SPI_TransmitReceive+0x176>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d016      	beq.n	800541a <HAL_SPI_TransmitReceive+0x176>
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d113      	bne.n	800541a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	1c9a      	adds	r2, r3, #2
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b01      	cmp	r3, #1
 8005426:	d119      	bne.n	800545c <HAL_SPI_TransmitReceive+0x1b8>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d014      	beq.n	800545c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	b292      	uxth	r2, r2
 800543e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	1c9a      	adds	r2, r3, #2
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005458:	2301      	movs	r3, #1
 800545a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800545c:	f7fb fde4 	bl	8001028 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005468:	429a      	cmp	r2, r3
 800546a:	d807      	bhi.n	800547c <HAL_SPI_TransmitReceive+0x1d8>
 800546c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005472:	d003      	beq.n	800547c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800547a:	e0a7      	b.n	80055cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1a6      	bne.n	80053d4 <HAL_SPI_TransmitReceive+0x130>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548a:	b29b      	uxth	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1a1      	bne.n	80053d4 <HAL_SPI_TransmitReceive+0x130>
 8005490:	e07c      	b.n	800558c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <HAL_SPI_TransmitReceive+0x1fc>
 800549a:	8b7b      	ldrh	r3, [r7, #26]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d16b      	bne.n	8005578 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	330c      	adds	r3, #12
 80054aa:	7812      	ldrb	r2, [r2, #0]
 80054ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054c6:	e057      	b.n	8005578 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d11c      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x26c>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054da:	b29b      	uxth	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d017      	beq.n	8005510 <HAL_SPI_TransmitReceive+0x26c>
 80054e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d114      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	7812      	ldrb	r2, [r2, #0]
 80054f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b01      	cmp	r3, #1
 800551c:	d119      	bne.n	8005552 <HAL_SPI_TransmitReceive+0x2ae>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d014      	beq.n	8005552 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005544:	b29b      	uxth	r3, r3
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800554e:	2301      	movs	r3, #1
 8005550:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005552:	f7fb fd69 	bl	8001028 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800555e:	429a      	cmp	r2, r3
 8005560:	d803      	bhi.n	800556a <HAL_SPI_TransmitReceive+0x2c6>
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005568:	d102      	bne.n	8005570 <HAL_SPI_TransmitReceive+0x2cc>
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	2b00      	cmp	r3, #0
 800556e:	d103      	bne.n	8005578 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005576:	e029      	b.n	80055cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1a2      	bne.n	80054c8 <HAL_SPI_TransmitReceive+0x224>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d19d      	bne.n	80054c8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800558c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 fa17 	bl	80059c4 <SPI_EndRxTxTransaction>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d006      	beq.n	80055aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80055a8:	e010      	b.n	80055cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10b      	bne.n	80055ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	e000      	b.n	80055cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80055ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3730      	adds	r7, #48	; 0x30
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	099b      	lsrs	r3, r3, #6
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10f      	bne.n	800562c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	099b      	lsrs	r3, r3, #6
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d004      	beq.n	800562c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	4798      	blx	r3
    return;
 800562a:	e0d8      	b.n	80057de <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	085b      	lsrs	r3, r3, #1
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <HAL_SPI_IRQHandler+0x66>
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	09db      	lsrs	r3, r3, #7
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d004      	beq.n	800564e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	4798      	blx	r3
    return;
 800564c:	e0c7      	b.n	80057de <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10c      	bne.n	8005674 <HAL_SPI_IRQHandler+0x8c>
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	099b      	lsrs	r3, r3, #6
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	0a1b      	lsrs	r3, r3, #8
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 80b5 	beq.w	80057de <HAL_SPI_IRQHandler+0x1f6>
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 80ae 	beq.w	80057de <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	099b      	lsrs	r3, r3, #6
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d023      	beq.n	80056d6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b03      	cmp	r3, #3
 8005698:	d011      	beq.n	80056be <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569e:	f043 0204 	orr.w	r2, r3, #4
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	e00b      	b.n	80056d6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	613b      	str	r3, [r7, #16]
 80056d2:	693b      	ldr	r3, [r7, #16]
        return;
 80056d4:	e083      	b.n	80057de <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d014      	beq.n	800570c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e6:	f043 0201 	orr.w	r2, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	0a1b      	lsrs	r3, r3, #8
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00c      	beq.n	8005732 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571c:	f043 0208 	orr.w	r2, r3, #8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005724:	2300      	movs	r3, #0
 8005726:	60bb      	str	r3, [r7, #8]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	60bb      	str	r3, [r7, #8]
 8005730:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005736:	2b00      	cmp	r3, #0
 8005738:	d050      	beq.n	80057dc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005748:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d104      	bne.n	8005766 <HAL_SPI_IRQHandler+0x17e>
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d034      	beq.n	80057d0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0203 	bic.w	r2, r2, #3
 8005774:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577a:	2b00      	cmp	r3, #0
 800577c:	d011      	beq.n	80057a2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005782:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <HAL_SPI_IRQHandler+0x1fc>)
 8005784:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	4618      	mov	r0, r3
 800578c:	f7fc ff4c 	bl	8002628 <HAL_DMA_Abort_IT>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d016      	beq.n	80057d8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ae:	4a0d      	ldr	r2, [pc, #52]	; (80057e4 <HAL_SPI_IRQHandler+0x1fc>)
 80057b0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fc ff36 	bl	8002628 <HAL_DMA_Abort_IT>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80057ce:	e003      	b.n	80057d8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f809 	bl	80057e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80057d6:	e000      	b.n	80057da <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80057d8:	bf00      	nop
    return;
 80057da:	bf00      	nop
 80057dc:	bf00      	nop
  }
}
 80057de:	3720      	adds	r7, #32
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	080057fd 	.word	0x080057fd

080057e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f7ff ffe6 	bl	80057e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800581c:	bf00      	nop
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	4613      	mov	r3, r2
 8005832:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005834:	e04c      	b.n	80058d0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800583c:	d048      	beq.n	80058d0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800583e:	f7fb fbf3 	bl	8001028 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d902      	bls.n	8005854 <SPI_WaitFlagStateUntilTimeout+0x30>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d13d      	bne.n	80058d0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005862:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800586c:	d111      	bne.n	8005892 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005876:	d004      	beq.n	8005882 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005880:	d107      	bne.n	8005892 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005890:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589a:	d10f      	bne.n	80058bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e00f      	b.n	80058f0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4013      	ands	r3, r2
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	429a      	cmp	r2, r3
 80058de:	bf0c      	ite	eq
 80058e0:	2301      	moveq	r3, #1
 80058e2:	2300      	movne	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d1a3      	bne.n	8005836 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800590c:	d111      	bne.n	8005932 <SPI_EndRxTransaction+0x3a>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005916:	d004      	beq.n	8005922 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005920:	d107      	bne.n	8005932 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005930:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800593a:	d12a      	bne.n	8005992 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005944:	d012      	beq.n	800596c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2200      	movs	r2, #0
 800594e:	2180      	movs	r1, #128	; 0x80
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f7ff ff67 	bl	8005824 <SPI_WaitFlagStateUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d02d      	beq.n	80059b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005960:	f043 0220 	orr.w	r2, r3, #32
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e026      	b.n	80059ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2200      	movs	r2, #0
 8005974:	2101      	movs	r1, #1
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f7ff ff54 	bl	8005824 <SPI_WaitFlagStateUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d01a      	beq.n	80059b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005986:	f043 0220 	orr.w	r2, r3, #32
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e013      	b.n	80059ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2200      	movs	r2, #0
 800599a:	2101      	movs	r1, #1
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff ff41 	bl	8005824 <SPI_WaitFlagStateUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ac:	f043 0220 	orr.w	r2, r3, #32
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e000      	b.n	80059ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80059d0:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <SPI_EndRxTxTransaction+0x7c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1b      	ldr	r2, [pc, #108]	; (8005a44 <SPI_EndRxTxTransaction+0x80>)
 80059d6:	fba2 2303 	umull	r2, r3, r2, r3
 80059da:	0d5b      	lsrs	r3, r3, #21
 80059dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059e0:	fb02 f303 	mul.w	r3, r2, r3
 80059e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ee:	d112      	bne.n	8005a16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2200      	movs	r2, #0
 80059f8:	2180      	movs	r1, #128	; 0x80
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f7ff ff12 	bl	8005824 <SPI_WaitFlagStateUntilTimeout>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d016      	beq.n	8005a34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0a:	f043 0220 	orr.w	r2, r3, #32
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e00f      	b.n	8005a36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2c:	2b80      	cmp	r3, #128	; 0x80
 8005a2e:	d0f2      	beq.n	8005a16 <SPI_EndRxTxTransaction+0x52>
 8005a30:	e000      	b.n	8005a34 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a32:	bf00      	nop
  }

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	2000002c 	.word	0x2000002c
 8005a44:	165e9f81 	.word	0x165e9f81

08005a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e01d      	b.n	8005a96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f005 fc54 	bl	800b31c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4619      	mov	r1, r3
 8005a86:	4610      	mov	r0, r2
 8005a88:	f000 fdf6 	bl	8006678 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b06      	cmp	r3, #6
 8005abe:	d007      	beq.n	8005ad0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0201 	orr.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b085      	sub	sp, #20
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f042 0201 	orr.w	r2, r2, #1
 8005afc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2b06      	cmp	r3, #6
 8005b0e:	d007      	beq.n	8005b20 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b082      	sub	sp, #8
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e01d      	b.n	8005b7c <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d106      	bne.n	8005b5a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f815 	bl	8005b84 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	f000 fd83 	bl	8006678 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	6839      	ldr	r1, [r7, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f001 f978 	bl	8006ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a15      	ldr	r2, [pc, #84]	; (8005c0c <HAL_TIM_OC_Start+0x74>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d004      	beq.n	8005bc4 <HAL_TIM_OC_Start+0x2c>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a14      	ldr	r2, [pc, #80]	; (8005c10 <HAL_TIM_OC_Start+0x78>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d101      	bne.n	8005bc8 <HAL_TIM_OC_Start+0x30>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e000      	b.n	8005bca <HAL_TIM_OC_Start+0x32>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d007      	beq.n	8005bde <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b06      	cmp	r3, #6
 8005bee:	d007      	beq.n	8005c00 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0201 	orr.w	r2, r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	40010000 	.word	0x40010000
 8005c10:	40010400 	.word	0x40010400

08005c14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e01d      	b.n	8005c62 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f815 	bl	8005c6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3304      	adds	r3, #4
 8005c50:	4619      	mov	r1, r3
 8005c52:	4610      	mov	r0, r2
 8005c54:	f000 fd10 	bl	8006678 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
	...

08005c80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f001 f904 	bl	8006ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a15      	ldr	r2, [pc, #84]	; (8005cf4 <HAL_TIM_PWM_Start+0x74>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d004      	beq.n	8005cac <HAL_TIM_PWM_Start+0x2c>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a14      	ldr	r2, [pc, #80]	; (8005cf8 <HAL_TIM_PWM_Start+0x78>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d101      	bne.n	8005cb0 <HAL_TIM_PWM_Start+0x30>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <HAL_TIM_PWM_Start+0x32>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b06      	cmp	r3, #6
 8005cd6:	d007      	beq.n	8005ce8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40010400 	.word	0x40010400

08005cfc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e01d      	b.n	8005d4a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f815 	bl	8005d52 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3304      	adds	r3, #4
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	f000 fc9c 	bl	8006678 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b086      	sub	sp, #24
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e083      	b.n	8005e82 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d106      	bne.n	8005d94 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f005 fbf4 	bl	800b57c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6812      	ldr	r2, [r2, #0]
 8005da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005daa:	f023 0307 	bic.w	r3, r3, #7
 8005dae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4619      	mov	r1, r3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	f000 fc5c 	bl	8006678 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de8:	f023 0303 	bic.w	r3, r3, #3
 8005dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005e06:	f023 030c 	bic.w	r3, r3, #12
 8005e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	4313      	orrs	r3, r2
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	011a      	lsls	r2, r3, #4
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	031b      	lsls	r3, r3, #12
 8005e36:	4313      	orrs	r3, r2
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005e44:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005e4c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <HAL_TIM_Encoder_Start_IT+0x16>
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d010      	beq.n	8005ec0 <HAL_TIM_Encoder_Start_IT+0x36>
 8005e9e:	e01f      	b.n	8005ee0 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 fff9 	bl	8006ea0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0202 	orr.w	r2, r2, #2
 8005ebc:	60da      	str	r2, [r3, #12]
      break;
 8005ebe:	e02e      	b.n	8005f1e <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	2104      	movs	r1, #4
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 ffe9 	bl	8006ea0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f042 0204 	orr.w	r2, r2, #4
 8005edc:	60da      	str	r2, [r3, #12]
      break;
 8005ede:	e01e      	b.n	8005f1e <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 ffd9 	bl	8006ea0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	2104      	movs	r1, #4
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 ffd2 	bl	8006ea0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0202 	orr.w	r2, r2, #2
 8005f0a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0204 	orr.w	r2, r2, #4
 8005f1a:	60da      	str	r2, [r3, #12]
      break;
 8005f1c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0201 	orr.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d122      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d11b      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0202 	mvn.w	r2, #2
 8005f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f004 fb4c 	bl	800a618 <HAL_TIM_IC_CaptureCallback>
 8005f80:	e005      	b.n	8005f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fb59 	bl	800663a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 fb60 	bl	800664e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d122      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d11b      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0204 	mvn.w	r2, #4
 8005fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f004 fb22 	bl	800a618 <HAL_TIM_IC_CaptureCallback>
 8005fd4:	e005      	b.n	8005fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fb2f 	bl	800663a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fb36 	bl	800664e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d122      	bne.n	800603c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b08      	cmp	r3, #8
 8006002:	d11b      	bne.n	800603c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0208 	mvn.w	r2, #8
 800600c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2204      	movs	r2, #4
 8006012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f004 faf8 	bl	800a618 <HAL_TIM_IC_CaptureCallback>
 8006028:	e005      	b.n	8006036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fb05 	bl	800663a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fb0c 	bl	800664e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	2b10      	cmp	r3, #16
 8006048:	d122      	bne.n	8006090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f003 0310 	and.w	r3, r3, #16
 8006054:	2b10      	cmp	r3, #16
 8006056:	d11b      	bne.n	8006090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0210 	mvn.w	r2, #16
 8006060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2208      	movs	r2, #8
 8006066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f004 face 	bl	800a618 <HAL_TIM_IC_CaptureCallback>
 800607c:	e005      	b.n	800608a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fadb 	bl	800663a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fae2 	bl	800664e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b01      	cmp	r3, #1
 800609c:	d10e      	bne.n	80060bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d107      	bne.n	80060bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0201 	mvn.w	r2, #1
 80060b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f004 fa28 	bl	800a50c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c6:	2b80      	cmp	r3, #128	; 0x80
 80060c8:	d10e      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d4:	2b80      	cmp	r3, #128	; 0x80
 80060d6:	d107      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f001 f804 	bl	80070f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f2:	2b40      	cmp	r3, #64	; 0x40
 80060f4:	d10e      	bne.n	8006114 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	d107      	bne.n	8006114 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800610c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 faa7 	bl	8006662 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b20      	cmp	r3, #32
 8006120:	d10e      	bne.n	8006140 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b20      	cmp	r3, #32
 800612e:	d107      	bne.n	8006140 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0220 	mvn.w	r2, #32
 8006138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 ffce 	bl	80070dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800615a:	2b01      	cmp	r3, #1
 800615c:	d101      	bne.n	8006162 <HAL_TIM_OC_ConfigChannel+0x1a>
 800615e:	2302      	movs	r3, #2
 8006160:	e04e      	b.n	8006200 <HAL_TIM_OC_ConfigChannel+0xb8>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2202      	movs	r2, #2
 800616e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b0c      	cmp	r3, #12
 8006176:	d839      	bhi.n	80061ec <HAL_TIM_OC_ConfigChannel+0xa4>
 8006178:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <HAL_TIM_OC_ConfigChannel+0x38>)
 800617a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617e:	bf00      	nop
 8006180:	080061b5 	.word	0x080061b5
 8006184:	080061ed 	.word	0x080061ed
 8006188:	080061ed 	.word	0x080061ed
 800618c:	080061ed 	.word	0x080061ed
 8006190:	080061c3 	.word	0x080061c3
 8006194:	080061ed 	.word	0x080061ed
 8006198:	080061ed 	.word	0x080061ed
 800619c:	080061ed 	.word	0x080061ed
 80061a0:	080061d1 	.word	0x080061d1
 80061a4:	080061ed 	.word	0x080061ed
 80061a8:	080061ed 	.word	0x080061ed
 80061ac:	080061ed 	.word	0x080061ed
 80061b0:	080061df 	.word	0x080061df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fafc 	bl	80067b8 <TIM_OC1_SetConfig>
      break;
 80061c0:	e015      	b.n	80061ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fb65 	bl	8006898 <TIM_OC2_SetConfig>
      break;
 80061ce:	e00e      	b.n	80061ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fbd4 	bl	8006984 <TIM_OC3_SetConfig>
      break;
 80061dc:	e007      	b.n	80061ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68b9      	ldr	r1, [r7, #8]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 fc41 	bl	8006a6c <TIM_OC4_SetConfig>
      break;
 80061ea:	e000      	b.n	80061ee <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80061ec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800621a:	2b01      	cmp	r3, #1
 800621c:	d101      	bne.n	8006222 <HAL_TIM_IC_ConfigChannel+0x1a>
 800621e:	2302      	movs	r3, #2
 8006220:	e08a      	b.n	8006338 <HAL_TIM_IC_ConfigChannel+0x130>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2202      	movs	r2, #2
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d11b      	bne.n	8006270 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	6819      	ldr	r1, [r3, #0]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f000 fc66 	bl	8006b18 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 020c 	bic.w	r2, r2, #12
 800625a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6999      	ldr	r1, [r3, #24]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	619a      	str	r2, [r3, #24]
 800626e:	e05a      	b.n	8006326 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b04      	cmp	r3, #4
 8006274:	d11c      	bne.n	80062b0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6818      	ldr	r0, [r3, #0]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	6819      	ldr	r1, [r3, #0]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f000 fcea 	bl	8006c5e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699a      	ldr	r2, [r3, #24]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006298:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6999      	ldr	r1, [r3, #24]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	021a      	lsls	r2, r3, #8
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	619a      	str	r2, [r3, #24]
 80062ae:	e03a      	b.n	8006326 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b08      	cmp	r3, #8
 80062b4:	d11b      	bne.n	80062ee <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6818      	ldr	r0, [r3, #0]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	6819      	ldr	r1, [r3, #0]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f000 fd37 	bl	8006d38 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69da      	ldr	r2, [r3, #28]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 020c 	bic.w	r2, r2, #12
 80062d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69d9      	ldr	r1, [r3, #28]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	61da      	str	r2, [r3, #28]
 80062ec:	e01b      	b.n	8006326 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	6819      	ldr	r1, [r3, #0]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f000 fd57 	bl	8006db0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69da      	ldr	r2, [r3, #28]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006310:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69d9      	ldr	r1, [r3, #28]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	021a      	lsls	r2, r3, #8
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006356:	2302      	movs	r3, #2
 8006358:	e0b4      	b.n	80064c4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2202      	movs	r2, #2
 8006366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b0c      	cmp	r3, #12
 800636e:	f200 809f 	bhi.w	80064b0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006372:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	080063ad 	.word	0x080063ad
 800637c:	080064b1 	.word	0x080064b1
 8006380:	080064b1 	.word	0x080064b1
 8006384:	080064b1 	.word	0x080064b1
 8006388:	080063ed 	.word	0x080063ed
 800638c:	080064b1 	.word	0x080064b1
 8006390:	080064b1 	.word	0x080064b1
 8006394:	080064b1 	.word	0x080064b1
 8006398:	0800642f 	.word	0x0800642f
 800639c:	080064b1 	.word	0x080064b1
 80063a0:	080064b1 	.word	0x080064b1
 80063a4:	080064b1 	.word	0x080064b1
 80063a8:	0800646f 	.word	0x0800646f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fa00 	bl	80067b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699a      	ldr	r2, [r3, #24]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0208 	orr.w	r2, r2, #8
 80063c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0204 	bic.w	r2, r2, #4
 80063d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6999      	ldr	r1, [r3, #24]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	619a      	str	r2, [r3, #24]
      break;
 80063ea:	e062      	b.n	80064b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fa50 	bl	8006898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6999      	ldr	r1, [r3, #24]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	021a      	lsls	r2, r3, #8
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	619a      	str	r2, [r3, #24]
      break;
 800642c:	e041      	b.n	80064b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	4618      	mov	r0, r3
 8006436:	f000 faa5 	bl	8006984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69da      	ldr	r2, [r3, #28]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0208 	orr.w	r2, r2, #8
 8006448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0204 	bic.w	r2, r2, #4
 8006458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69d9      	ldr	r1, [r3, #28]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	61da      	str	r2, [r3, #28]
      break;
 800646c:	e021      	b.n	80064b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 faf9 	bl	8006a6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69d9      	ldr	r1, [r3, #28]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	021a      	lsls	r2, r3, #8
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	61da      	str	r2, [r3, #28]
      break;
 80064ae:	e000      	b.n	80064b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80064b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_TIM_ConfigClockSource+0x18>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e0a6      	b.n	8006632 <HAL_TIM_ConfigClockSource+0x166>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006502:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800650a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b40      	cmp	r3, #64	; 0x40
 800651a:	d067      	beq.n	80065ec <HAL_TIM_ConfigClockSource+0x120>
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d80b      	bhi.n	8006538 <HAL_TIM_ConfigClockSource+0x6c>
 8006520:	2b10      	cmp	r3, #16
 8006522:	d073      	beq.n	800660c <HAL_TIM_ConfigClockSource+0x140>
 8006524:	2b10      	cmp	r3, #16
 8006526:	d802      	bhi.n	800652e <HAL_TIM_ConfigClockSource+0x62>
 8006528:	2b00      	cmp	r3, #0
 800652a:	d06f      	beq.n	800660c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800652c:	e078      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800652e:	2b20      	cmp	r3, #32
 8006530:	d06c      	beq.n	800660c <HAL_TIM_ConfigClockSource+0x140>
 8006532:	2b30      	cmp	r3, #48	; 0x30
 8006534:	d06a      	beq.n	800660c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006536:	e073      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006538:	2b70      	cmp	r3, #112	; 0x70
 800653a:	d00d      	beq.n	8006558 <HAL_TIM_ConfigClockSource+0x8c>
 800653c:	2b70      	cmp	r3, #112	; 0x70
 800653e:	d804      	bhi.n	800654a <HAL_TIM_ConfigClockSource+0x7e>
 8006540:	2b50      	cmp	r3, #80	; 0x50
 8006542:	d033      	beq.n	80065ac <HAL_TIM_ConfigClockSource+0xe0>
 8006544:	2b60      	cmp	r3, #96	; 0x60
 8006546:	d041      	beq.n	80065cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006548:	e06a      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800654a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800654e:	d066      	beq.n	800661e <HAL_TIM_ConfigClockSource+0x152>
 8006550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006554:	d017      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006556:	e063      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6818      	ldr	r0, [r3, #0]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	6899      	ldr	r1, [r3, #8]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f000 fc7a 	bl	8006e60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800657a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	609a      	str	r2, [r3, #8]
      break;
 8006584:	e04c      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6818      	ldr	r0, [r3, #0]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	6899      	ldr	r1, [r3, #8]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f000 fc63 	bl	8006e60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065a8:	609a      	str	r2, [r3, #8]
      break;
 80065aa:	e039      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	6859      	ldr	r1, [r3, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	461a      	mov	r2, r3
 80065ba:	f000 fb21 	bl	8006c00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2150      	movs	r1, #80	; 0x50
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fc30 	bl	8006e2a <TIM_ITRx_SetConfig>
      break;
 80065ca:	e029      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6818      	ldr	r0, [r3, #0]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	6859      	ldr	r1, [r3, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	461a      	mov	r2, r3
 80065da:	f000 fb7d 	bl	8006cd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2160      	movs	r1, #96	; 0x60
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 fc20 	bl	8006e2a <TIM_ITRx_SetConfig>
      break;
 80065ea:	e019      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6818      	ldr	r0, [r3, #0]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	6859      	ldr	r1, [r3, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	461a      	mov	r2, r3
 80065fa:	f000 fb01 	bl	8006c00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2140      	movs	r1, #64	; 0x40
 8006604:	4618      	mov	r0, r3
 8006606:	f000 fc10 	bl	8006e2a <TIM_ITRx_SetConfig>
      break;
 800660a:	e009      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4619      	mov	r1, r3
 8006616:	4610      	mov	r0, r2
 8006618:	f000 fc07 	bl	8006e2a <TIM_ITRx_SetConfig>
      break;
 800661c:	e000      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800661e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
	...

08006678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a40      	ldr	r2, [pc, #256]	; (800678c <TIM_Base_SetConfig+0x114>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d013      	beq.n	80066b8 <TIM_Base_SetConfig+0x40>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006696:	d00f      	beq.n	80066b8 <TIM_Base_SetConfig+0x40>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a3d      	ldr	r2, [pc, #244]	; (8006790 <TIM_Base_SetConfig+0x118>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00b      	beq.n	80066b8 <TIM_Base_SetConfig+0x40>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a3c      	ldr	r2, [pc, #240]	; (8006794 <TIM_Base_SetConfig+0x11c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d007      	beq.n	80066b8 <TIM_Base_SetConfig+0x40>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a3b      	ldr	r2, [pc, #236]	; (8006798 <TIM_Base_SetConfig+0x120>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d003      	beq.n	80066b8 <TIM_Base_SetConfig+0x40>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a3a      	ldr	r2, [pc, #232]	; (800679c <TIM_Base_SetConfig+0x124>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d108      	bne.n	80066ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a2f      	ldr	r2, [pc, #188]	; (800678c <TIM_Base_SetConfig+0x114>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d02b      	beq.n	800672a <TIM_Base_SetConfig+0xb2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d8:	d027      	beq.n	800672a <TIM_Base_SetConfig+0xb2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a2c      	ldr	r2, [pc, #176]	; (8006790 <TIM_Base_SetConfig+0x118>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d023      	beq.n	800672a <TIM_Base_SetConfig+0xb2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a2b      	ldr	r2, [pc, #172]	; (8006794 <TIM_Base_SetConfig+0x11c>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d01f      	beq.n	800672a <TIM_Base_SetConfig+0xb2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a2a      	ldr	r2, [pc, #168]	; (8006798 <TIM_Base_SetConfig+0x120>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d01b      	beq.n	800672a <TIM_Base_SetConfig+0xb2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a29      	ldr	r2, [pc, #164]	; (800679c <TIM_Base_SetConfig+0x124>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d017      	beq.n	800672a <TIM_Base_SetConfig+0xb2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a28      	ldr	r2, [pc, #160]	; (80067a0 <TIM_Base_SetConfig+0x128>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d013      	beq.n	800672a <TIM_Base_SetConfig+0xb2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a27      	ldr	r2, [pc, #156]	; (80067a4 <TIM_Base_SetConfig+0x12c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00f      	beq.n	800672a <TIM_Base_SetConfig+0xb2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a26      	ldr	r2, [pc, #152]	; (80067a8 <TIM_Base_SetConfig+0x130>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00b      	beq.n	800672a <TIM_Base_SetConfig+0xb2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a25      	ldr	r2, [pc, #148]	; (80067ac <TIM_Base_SetConfig+0x134>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d007      	beq.n	800672a <TIM_Base_SetConfig+0xb2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a24      	ldr	r2, [pc, #144]	; (80067b0 <TIM_Base_SetConfig+0x138>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d003      	beq.n	800672a <TIM_Base_SetConfig+0xb2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a23      	ldr	r2, [pc, #140]	; (80067b4 <TIM_Base_SetConfig+0x13c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d108      	bne.n	800673c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4313      	orrs	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	689a      	ldr	r2, [r3, #8]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a0a      	ldr	r2, [pc, #40]	; (800678c <TIM_Base_SetConfig+0x114>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d003      	beq.n	8006770 <TIM_Base_SetConfig+0xf8>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a0c      	ldr	r2, [pc, #48]	; (800679c <TIM_Base_SetConfig+0x124>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d103      	bne.n	8006778 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	691a      	ldr	r2, [r3, #16]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	615a      	str	r2, [r3, #20]
}
 800677e:	bf00      	nop
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40010000 	.word	0x40010000
 8006790:	40000400 	.word	0x40000400
 8006794:	40000800 	.word	0x40000800
 8006798:	40000c00 	.word	0x40000c00
 800679c:	40010400 	.word	0x40010400
 80067a0:	40014000 	.word	0x40014000
 80067a4:	40014400 	.word	0x40014400
 80067a8:	40014800 	.word	0x40014800
 80067ac:	40001800 	.word	0x40001800
 80067b0:	40001c00 	.word	0x40001c00
 80067b4:	40002000 	.word	0x40002000

080067b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f023 0201 	bic.w	r2, r3, #1
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 0303 	bic.w	r3, r3, #3
 80067ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f023 0302 	bic.w	r3, r3, #2
 8006800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a20      	ldr	r2, [pc, #128]	; (8006890 <TIM_OC1_SetConfig+0xd8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d003      	beq.n	800681c <TIM_OC1_SetConfig+0x64>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a1f      	ldr	r2, [pc, #124]	; (8006894 <TIM_OC1_SetConfig+0xdc>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d10c      	bne.n	8006836 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f023 0308 	bic.w	r3, r3, #8
 8006822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f023 0304 	bic.w	r3, r3, #4
 8006834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a15      	ldr	r2, [pc, #84]	; (8006890 <TIM_OC1_SetConfig+0xd8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d003      	beq.n	8006846 <TIM_OC1_SetConfig+0x8e>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a14      	ldr	r2, [pc, #80]	; (8006894 <TIM_OC1_SetConfig+0xdc>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d111      	bne.n	800686a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800684c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4313      	orrs	r3, r2
 8006868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	621a      	str	r2, [r3, #32]
}
 8006884:	bf00      	nop
 8006886:	371c      	adds	r7, #28
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	40010000 	.word	0x40010000
 8006894:	40010400 	.word	0x40010400

08006898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	f023 0210 	bic.w	r2, r3, #16
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	021b      	lsls	r3, r3, #8
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f023 0320 	bic.w	r3, r3, #32
 80068e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a22      	ldr	r2, [pc, #136]	; (800697c <TIM_OC2_SetConfig+0xe4>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d003      	beq.n	8006900 <TIM_OC2_SetConfig+0x68>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a21      	ldr	r2, [pc, #132]	; (8006980 <TIM_OC2_SetConfig+0xe8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d10d      	bne.n	800691c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	4313      	orrs	r3, r2
 8006912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800691a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a17      	ldr	r2, [pc, #92]	; (800697c <TIM_OC2_SetConfig+0xe4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d003      	beq.n	800692c <TIM_OC2_SetConfig+0x94>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a16      	ldr	r2, [pc, #88]	; (8006980 <TIM_OC2_SetConfig+0xe8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d113      	bne.n	8006954 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800693a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	4313      	orrs	r3, r2
 8006952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	621a      	str	r2, [r3, #32]
}
 800696e:	bf00      	nop
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	40010000 	.word	0x40010000
 8006980:	40010400 	.word	0x40010400

08006984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0303 	bic.w	r3, r3, #3
 80069ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	021b      	lsls	r3, r3, #8
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a21      	ldr	r2, [pc, #132]	; (8006a64 <TIM_OC3_SetConfig+0xe0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d003      	beq.n	80069ea <TIM_OC3_SetConfig+0x66>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a20      	ldr	r2, [pc, #128]	; (8006a68 <TIM_OC3_SetConfig+0xe4>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d10d      	bne.n	8006a06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	021b      	lsls	r3, r3, #8
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a16      	ldr	r2, [pc, #88]	; (8006a64 <TIM_OC3_SetConfig+0xe0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d003      	beq.n	8006a16 <TIM_OC3_SetConfig+0x92>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a15      	ldr	r2, [pc, #84]	; (8006a68 <TIM_OC3_SetConfig+0xe4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d113      	bne.n	8006a3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	621a      	str	r2, [r3, #32]
}
 8006a58:	bf00      	nop
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	40010000 	.word	0x40010000
 8006a68:	40010400 	.word	0x40010400

08006a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	021b      	lsls	r3, r3, #8
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	031b      	lsls	r3, r3, #12
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a12      	ldr	r2, [pc, #72]	; (8006b10 <TIM_OC4_SetConfig+0xa4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d003      	beq.n	8006ad4 <TIM_OC4_SetConfig+0x68>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a11      	ldr	r2, [pc, #68]	; (8006b14 <TIM_OC4_SetConfig+0xa8>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d109      	bne.n	8006ae8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	019b      	lsls	r3, r3, #6
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	621a      	str	r2, [r3, #32]
}
 8006b02:	bf00      	nop
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40010000 	.word	0x40010000
 8006b14:	40010400 	.word	0x40010400

08006b18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f023 0201 	bic.w	r2, r3, #1
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4a28      	ldr	r2, [pc, #160]	; (8006be4 <TIM_TI1_SetConfig+0xcc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d01b      	beq.n	8006b7e <TIM_TI1_SetConfig+0x66>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4c:	d017      	beq.n	8006b7e <TIM_TI1_SetConfig+0x66>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4a25      	ldr	r2, [pc, #148]	; (8006be8 <TIM_TI1_SetConfig+0xd0>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d013      	beq.n	8006b7e <TIM_TI1_SetConfig+0x66>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	4a24      	ldr	r2, [pc, #144]	; (8006bec <TIM_TI1_SetConfig+0xd4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00f      	beq.n	8006b7e <TIM_TI1_SetConfig+0x66>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4a23      	ldr	r2, [pc, #140]	; (8006bf0 <TIM_TI1_SetConfig+0xd8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00b      	beq.n	8006b7e <TIM_TI1_SetConfig+0x66>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4a22      	ldr	r2, [pc, #136]	; (8006bf4 <TIM_TI1_SetConfig+0xdc>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d007      	beq.n	8006b7e <TIM_TI1_SetConfig+0x66>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4a21      	ldr	r2, [pc, #132]	; (8006bf8 <TIM_TI1_SetConfig+0xe0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d003      	beq.n	8006b7e <TIM_TI1_SetConfig+0x66>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4a20      	ldr	r2, [pc, #128]	; (8006bfc <TIM_TI1_SetConfig+0xe4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d101      	bne.n	8006b82 <TIM_TI1_SetConfig+0x6a>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e000      	b.n	8006b84 <TIM_TI1_SetConfig+0x6c>
 8006b82:	2300      	movs	r3, #0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d008      	beq.n	8006b9a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f023 0303 	bic.w	r3, r3, #3
 8006b8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	e003      	b.n	8006ba2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f043 0301 	orr.w	r3, r3, #1
 8006ba0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ba8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f023 030a 	bic.w	r3, r3, #10
 8006bbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f003 030a 	and.w	r3, r3, #10
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	621a      	str	r2, [r3, #32]
}
 8006bd6:	bf00      	nop
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40000400 	.word	0x40000400
 8006bec:	40000800 	.word	0x40000800
 8006bf0:	40000c00 	.word	0x40000c00
 8006bf4:	40010400 	.word	0x40010400
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	40001800 	.word	0x40001800

08006c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	f023 0201 	bic.w	r2, r3, #1
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	011b      	lsls	r3, r3, #4
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f023 030a 	bic.w	r3, r3, #10
 8006c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	621a      	str	r2, [r3, #32]
}
 8006c52:	bf00      	nop
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b087      	sub	sp, #28
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
 8006c6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	f023 0210 	bic.w	r2, r3, #16
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	031b      	lsls	r3, r3, #12
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	621a      	str	r2, [r3, #32]
}
 8006ccc:	bf00      	nop
 8006cce:	371c      	adds	r7, #28
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	f023 0210 	bic.w	r2, r3, #16
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	031b      	lsls	r3, r3, #12
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	011b      	lsls	r3, r3, #4
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	621a      	str	r2, [r3, #32]
}
 8006d2c:	bf00      	nop
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f023 0303 	bic.w	r3, r3, #3
 8006d64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	621a      	str	r2, [r3, #32]
}
 8006da4:	bf00      	nop
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ddc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	031b      	lsls	r3, r3, #12
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006e02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	031b      	lsls	r3, r3, #12
 8006e08:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	621a      	str	r2, [r3, #32]
}
 8006e1e:	bf00      	nop
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b085      	sub	sp, #20
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	f043 0307 	orr.w	r3, r3, #7
 8006e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	609a      	str	r2, [r3, #8]
}
 8006e54:	bf00      	nop
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	021a      	lsls	r2, r3, #8
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	431a      	orrs	r2, r3
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	609a      	str	r2, [r3, #8]
}
 8006e94:	bf00      	nop
 8006e96:	371c      	adds	r7, #28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f003 031f 	and.w	r3, r3, #31
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6a1a      	ldr	r2, [r3, #32]
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	43db      	mvns	r3, r3
 8006ec2:	401a      	ands	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a1a      	ldr	r2, [r3, #32]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f003 031f 	and.w	r3, r3, #31
 8006ed2:	6879      	ldr	r1, [r7, #4]
 8006ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	621a      	str	r2, [r3, #32]
}
 8006ede:	bf00      	nop
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2204      	movs	r2, #4
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 f901 	bl	8007104 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f10:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b06      	cmp	r3, #6
 8006f22:	d007      	beq.n	8006f34 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0201 	orr.w	r2, r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
	...

08006f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d101      	bne.n	8006f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f54:	2302      	movs	r3, #2
 8006f56:	e05a      	b.n	800700e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a21      	ldr	r2, [pc, #132]	; (800701c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d022      	beq.n	8006fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa4:	d01d      	beq.n	8006fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a1d      	ldr	r2, [pc, #116]	; (8007020 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d018      	beq.n	8006fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a1b      	ldr	r2, [pc, #108]	; (8007024 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d013      	beq.n	8006fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a1a      	ldr	r2, [pc, #104]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d00e      	beq.n	8006fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a18      	ldr	r2, [pc, #96]	; (800702c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d009      	beq.n	8006fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a17      	ldr	r2, [pc, #92]	; (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d004      	beq.n	8006fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a15      	ldr	r2, [pc, #84]	; (8007034 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d10c      	bne.n	8006ffc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40010000 	.word	0x40010000
 8007020:	40000400 	.word	0x40000400
 8007024:	40000800 	.word	0x40000800
 8007028:	40000c00 	.word	0x40000c00
 800702c:	40010400 	.word	0x40010400
 8007030:	40014000 	.word	0x40014000
 8007034:	40001800 	.word	0x40001800

08007038 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800704c:	2b01      	cmp	r3, #1
 800704e:	d101      	bne.n	8007054 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007050:	2302      	movs	r3, #2
 8007052:	e03d      	b.n	80070d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f003 031f 	and.w	r3, r3, #31
 8007116:	2204      	movs	r2, #4
 8007118:	fa02 f303 	lsl.w	r3, r2, r3
 800711c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a1a      	ldr	r2, [r3, #32]
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	43db      	mvns	r3, r3
 8007126:	401a      	ands	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a1a      	ldr	r2, [r3, #32]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f003 031f 	and.w	r3, r3, #31
 8007136:	6879      	ldr	r1, [r7, #4]
 8007138:	fa01 f303 	lsl.w	r3, r1, r3
 800713c:	431a      	orrs	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	621a      	str	r2, [r3, #32]
}
 8007142:	bf00      	nop
 8007144:	371c      	adds	r7, #28
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e03f      	b.n	80071e0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	d106      	bne.n	800717a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f004 fac9 	bl	800b70c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2224      	movs	r2, #36	; 0x24
 800717e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007190:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fabe 	bl	8007714 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	691a      	ldr	r2, [r3, #16]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	695a      	ldr	r2, [r3, #20]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071b6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2220      	movs	r2, #32
 80071da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	4613      	mov	r3, r2
 80071f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d140      	bne.n	8007284 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <HAL_UART_Receive_IT+0x26>
 8007208:	88fb      	ldrh	r3, [r7, #6]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e039      	b.n	8007286 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007218:	2b01      	cmp	r3, #1
 800721a:	d101      	bne.n	8007220 <HAL_UART_Receive_IT+0x38>
 800721c:	2302      	movs	r3, #2
 800721e:	e032      	b.n	8007286 <HAL_UART_Receive_IT+0x9e>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	88fa      	ldrh	r2, [r7, #6]
 8007232:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	88fa      	ldrh	r2, [r7, #6]
 8007238:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2222      	movs	r2, #34	; 0x22
 8007244:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800725e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695a      	ldr	r2, [r3, #20]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0220 	orr.w	r2, r2, #32
 800727e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	e000      	b.n	8007286 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007284:	2302      	movs	r3, #2
  }
}
 8007286:	4618      	mov	r0, r3
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
	...

08007294 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	f003 030f 	and.w	r3, r3, #15
 80072c2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10d      	bne.n	80072e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	f003 0320 	and.w	r3, r3, #32
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d008      	beq.n	80072e6 <HAL_UART_IRQHandler+0x52>
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	f003 0320 	and.w	r3, r3, #32
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f996 	bl	8007610 <UART_Receive_IT>
      return;
 80072e4:	e0d1      	b.n	800748a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 80b0 	beq.w	800744e <HAL_UART_IRQHandler+0x1ba>
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d105      	bne.n	8007304 <HAL_UART_IRQHandler+0x70>
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 80a5 	beq.w	800744e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <HAL_UART_IRQHandler+0x90>
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731c:	f043 0201 	orr.w	r2, r3, #1
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	f003 0304 	and.w	r3, r3, #4
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <HAL_UART_IRQHandler+0xb0>
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d005      	beq.n	8007344 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733c:	f043 0202 	orr.w	r2, r3, #2
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <HAL_UART_IRQHandler+0xd0>
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d005      	beq.n	8007364 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800735c:	f043 0204 	orr.w	r2, r3, #4
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	f003 0308 	and.w	r3, r3, #8
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00f      	beq.n	800738e <HAL_UART_IRQHandler+0xfa>
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	f003 0320 	and.w	r3, r3, #32
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <HAL_UART_IRQHandler+0xee>
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d005      	beq.n	800738e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007386:	f043 0208 	orr.w	r2, r3, #8
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007392:	2b00      	cmp	r3, #0
 8007394:	d078      	beq.n	8007488 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	f003 0320 	and.w	r3, r3, #32
 800739c:	2b00      	cmp	r3, #0
 800739e:	d007      	beq.n	80073b0 <HAL_UART_IRQHandler+0x11c>
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f003 0320 	and.w	r3, r3, #32
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f930 	bl	8007610 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ba:	2b40      	cmp	r3, #64	; 0x40
 80073bc:	bf0c      	ite	eq
 80073be:	2301      	moveq	r3, #1
 80073c0:	2300      	movne	r3, #0
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d102      	bne.n	80073d8 <HAL_UART_IRQHandler+0x144>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d031      	beq.n	800743c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f879 	bl	80074d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e8:	2b40      	cmp	r3, #64	; 0x40
 80073ea:	d123      	bne.n	8007434 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	695a      	ldr	r2, [r3, #20]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073fa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007400:	2b00      	cmp	r3, #0
 8007402:	d013      	beq.n	800742c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007408:	4a21      	ldr	r2, [pc, #132]	; (8007490 <HAL_UART_IRQHandler+0x1fc>)
 800740a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007410:	4618      	mov	r0, r3
 8007412:	f7fb f909 	bl	8002628 <HAL_DMA_Abort_IT>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d016      	beq.n	800744a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007426:	4610      	mov	r0, r2
 8007428:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800742a:	e00e      	b.n	800744a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f845 	bl	80074bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007432:	e00a      	b.n	800744a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f841 	bl	80074bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800743a:	e006      	b.n	800744a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f83d 	bl	80074bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007448:	e01e      	b.n	8007488 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800744a:	bf00      	nop
    return;
 800744c:	e01c      	b.n	8007488 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007454:	2b00      	cmp	r3, #0
 8007456:	d008      	beq.n	800746a <HAL_UART_IRQHandler+0x1d6>
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f866 	bl	8007534 <UART_Transmit_IT>
    return;
 8007468:	e00f      	b.n	800748a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00a      	beq.n	800748a <HAL_UART_IRQHandler+0x1f6>
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747a:	2b00      	cmp	r3, #0
 800747c:	d005      	beq.n	800748a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f8ae 	bl	80075e0 <UART_EndTransmit_IT>
    return;
 8007484:	bf00      	nop
 8007486:	e000      	b.n	800748a <HAL_UART_IRQHandler+0x1f6>
    return;
 8007488:	bf00      	nop
  }
}
 800748a:	3720      	adds	r7, #32
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	0800750d 	.word	0x0800750d

08007494 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80074e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	695a      	ldr	r2, [r3, #20]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0201 	bic.w	r2, r2, #1
 80074f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2220      	movs	r2, #32
 80074fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007518:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f7ff ffc8 	bl	80074bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800752c:	bf00      	nop
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b21      	cmp	r3, #33	; 0x21
 8007546:	d144      	bne.n	80075d2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007550:	d11a      	bne.n	8007588 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	461a      	mov	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007566:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d105      	bne.n	800757c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	1c9a      	adds	r2, r3, #2
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	621a      	str	r2, [r3, #32]
 800757a:	e00e      	b.n	800759a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	621a      	str	r2, [r3, #32]
 8007586:	e008      	b.n	800759a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	1c59      	adds	r1, r3, #1
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	6211      	str	r1, [r2, #32]
 8007592:	781a      	ldrb	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	4619      	mov	r1, r3
 80075a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10f      	bne.n	80075ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68da      	ldr	r2, [r3, #12]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68da      	ldr	r2, [r3, #12]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	e000      	b.n	80075d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80075d2:	2302      	movs	r3, #2
  }
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2220      	movs	r2, #32
 80075fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7ff ff47 	bl	8007494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b22      	cmp	r3, #34	; 0x22
 8007622:	d171      	bne.n	8007708 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800762c:	d123      	bne.n	8007676 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007632:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10e      	bne.n	800765a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	b29b      	uxth	r3, r3
 8007644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007648:	b29a      	uxth	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007652:	1c9a      	adds	r2, r3, #2
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	629a      	str	r2, [r3, #40]	; 0x28
 8007658:	e029      	b.n	80076ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	b29b      	uxth	r3, r3
 8007662:	b2db      	uxtb	r3, r3
 8007664:	b29a      	uxth	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	629a      	str	r2, [r3, #40]	; 0x28
 8007674:	e01b      	b.n	80076ae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10a      	bne.n	8007694 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6858      	ldr	r0, [r3, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007688:	1c59      	adds	r1, r3, #1
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	6291      	str	r1, [r2, #40]	; 0x28
 800768e:	b2c2      	uxtb	r2, r0
 8007690:	701a      	strb	r2, [r3, #0]
 8007692:	e00c      	b.n	80076ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	b2da      	uxtb	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a0:	1c58      	adds	r0, r3, #1
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	6288      	str	r0, [r1, #40]	; 0x28
 80076a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	4619      	mov	r1, r3
 80076bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d120      	bne.n	8007704 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0220 	bic.w	r2, r2, #32
 80076d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	695a      	ldr	r2, [r3, #20]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 0201 	bic.w	r2, r2, #1
 80076f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7ff fed4 	bl	80074a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	e002      	b.n	800770a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	e000      	b.n	800770a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007708:	2302      	movs	r3, #2
  }
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
	...

08007714 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007718:	b085      	sub	sp, #20
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68da      	ldr	r2, [r3, #12]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689a      	ldr	r2, [r3, #8]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	431a      	orrs	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	4313      	orrs	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007756:	f023 030c 	bic.w	r3, r3, #12
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	6812      	ldr	r2, [r2, #0]
 800775e:	68f9      	ldr	r1, [r7, #12]
 8007760:	430b      	orrs	r3, r1
 8007762:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	699a      	ldr	r2, [r3, #24]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007782:	f040 818b 	bne.w	8007a9c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4ac1      	ldr	r2, [pc, #772]	; (8007a90 <UART_SetConfig+0x37c>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d005      	beq.n	800779c <UART_SetConfig+0x88>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4abf      	ldr	r2, [pc, #764]	; (8007a94 <UART_SetConfig+0x380>)
 8007796:	4293      	cmp	r3, r2
 8007798:	f040 80bd 	bne.w	8007916 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800779c:	f7fd f906 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 80077a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	461d      	mov	r5, r3
 80077a6:	f04f 0600 	mov.w	r6, #0
 80077aa:	46a8      	mov	r8, r5
 80077ac:	46b1      	mov	r9, r6
 80077ae:	eb18 0308 	adds.w	r3, r8, r8
 80077b2:	eb49 0409 	adc.w	r4, r9, r9
 80077b6:	4698      	mov	r8, r3
 80077b8:	46a1      	mov	r9, r4
 80077ba:	eb18 0805 	adds.w	r8, r8, r5
 80077be:	eb49 0906 	adc.w	r9, r9, r6
 80077c2:	f04f 0100 	mov.w	r1, #0
 80077c6:	f04f 0200 	mov.w	r2, #0
 80077ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80077ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80077d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80077d6:	4688      	mov	r8, r1
 80077d8:	4691      	mov	r9, r2
 80077da:	eb18 0005 	adds.w	r0, r8, r5
 80077de:	eb49 0106 	adc.w	r1, r9, r6
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	461d      	mov	r5, r3
 80077e8:	f04f 0600 	mov.w	r6, #0
 80077ec:	196b      	adds	r3, r5, r5
 80077ee:	eb46 0406 	adc.w	r4, r6, r6
 80077f2:	461a      	mov	r2, r3
 80077f4:	4623      	mov	r3, r4
 80077f6:	f7f9 fa31 	bl	8000c5c <__aeabi_uldivmod>
 80077fa:	4603      	mov	r3, r0
 80077fc:	460c      	mov	r4, r1
 80077fe:	461a      	mov	r2, r3
 8007800:	4ba5      	ldr	r3, [pc, #660]	; (8007a98 <UART_SetConfig+0x384>)
 8007802:	fba3 2302 	umull	r2, r3, r3, r2
 8007806:	095b      	lsrs	r3, r3, #5
 8007808:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	461d      	mov	r5, r3
 8007810:	f04f 0600 	mov.w	r6, #0
 8007814:	46a9      	mov	r9, r5
 8007816:	46b2      	mov	sl, r6
 8007818:	eb19 0309 	adds.w	r3, r9, r9
 800781c:	eb4a 040a 	adc.w	r4, sl, sl
 8007820:	4699      	mov	r9, r3
 8007822:	46a2      	mov	sl, r4
 8007824:	eb19 0905 	adds.w	r9, r9, r5
 8007828:	eb4a 0a06 	adc.w	sl, sl, r6
 800782c:	f04f 0100 	mov.w	r1, #0
 8007830:	f04f 0200 	mov.w	r2, #0
 8007834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007838:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800783c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007840:	4689      	mov	r9, r1
 8007842:	4692      	mov	sl, r2
 8007844:	eb19 0005 	adds.w	r0, r9, r5
 8007848:	eb4a 0106 	adc.w	r1, sl, r6
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	461d      	mov	r5, r3
 8007852:	f04f 0600 	mov.w	r6, #0
 8007856:	196b      	adds	r3, r5, r5
 8007858:	eb46 0406 	adc.w	r4, r6, r6
 800785c:	461a      	mov	r2, r3
 800785e:	4623      	mov	r3, r4
 8007860:	f7f9 f9fc 	bl	8000c5c <__aeabi_uldivmod>
 8007864:	4603      	mov	r3, r0
 8007866:	460c      	mov	r4, r1
 8007868:	461a      	mov	r2, r3
 800786a:	4b8b      	ldr	r3, [pc, #556]	; (8007a98 <UART_SetConfig+0x384>)
 800786c:	fba3 1302 	umull	r1, r3, r3, r2
 8007870:	095b      	lsrs	r3, r3, #5
 8007872:	2164      	movs	r1, #100	; 0x64
 8007874:	fb01 f303 	mul.w	r3, r1, r3
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	3332      	adds	r3, #50	; 0x32
 800787e:	4a86      	ldr	r2, [pc, #536]	; (8007a98 <UART_SetConfig+0x384>)
 8007880:	fba2 2303 	umull	r2, r3, r2, r3
 8007884:	095b      	lsrs	r3, r3, #5
 8007886:	005b      	lsls	r3, r3, #1
 8007888:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800788c:	4498      	add	r8, r3
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	461d      	mov	r5, r3
 8007892:	f04f 0600 	mov.w	r6, #0
 8007896:	46a9      	mov	r9, r5
 8007898:	46b2      	mov	sl, r6
 800789a:	eb19 0309 	adds.w	r3, r9, r9
 800789e:	eb4a 040a 	adc.w	r4, sl, sl
 80078a2:	4699      	mov	r9, r3
 80078a4:	46a2      	mov	sl, r4
 80078a6:	eb19 0905 	adds.w	r9, r9, r5
 80078aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80078ae:	f04f 0100 	mov.w	r1, #0
 80078b2:	f04f 0200 	mov.w	r2, #0
 80078b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078c2:	4689      	mov	r9, r1
 80078c4:	4692      	mov	sl, r2
 80078c6:	eb19 0005 	adds.w	r0, r9, r5
 80078ca:	eb4a 0106 	adc.w	r1, sl, r6
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	461d      	mov	r5, r3
 80078d4:	f04f 0600 	mov.w	r6, #0
 80078d8:	196b      	adds	r3, r5, r5
 80078da:	eb46 0406 	adc.w	r4, r6, r6
 80078de:	461a      	mov	r2, r3
 80078e0:	4623      	mov	r3, r4
 80078e2:	f7f9 f9bb 	bl	8000c5c <__aeabi_uldivmod>
 80078e6:	4603      	mov	r3, r0
 80078e8:	460c      	mov	r4, r1
 80078ea:	461a      	mov	r2, r3
 80078ec:	4b6a      	ldr	r3, [pc, #424]	; (8007a98 <UART_SetConfig+0x384>)
 80078ee:	fba3 1302 	umull	r1, r3, r3, r2
 80078f2:	095b      	lsrs	r3, r3, #5
 80078f4:	2164      	movs	r1, #100	; 0x64
 80078f6:	fb01 f303 	mul.w	r3, r1, r3
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	3332      	adds	r3, #50	; 0x32
 8007900:	4a65      	ldr	r2, [pc, #404]	; (8007a98 <UART_SetConfig+0x384>)
 8007902:	fba2 2303 	umull	r2, r3, r2, r3
 8007906:	095b      	lsrs	r3, r3, #5
 8007908:	f003 0207 	and.w	r2, r3, #7
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4442      	add	r2, r8
 8007912:	609a      	str	r2, [r3, #8]
 8007914:	e26f      	b.n	8007df6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007916:	f7fd f835 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 800791a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	461d      	mov	r5, r3
 8007920:	f04f 0600 	mov.w	r6, #0
 8007924:	46a8      	mov	r8, r5
 8007926:	46b1      	mov	r9, r6
 8007928:	eb18 0308 	adds.w	r3, r8, r8
 800792c:	eb49 0409 	adc.w	r4, r9, r9
 8007930:	4698      	mov	r8, r3
 8007932:	46a1      	mov	r9, r4
 8007934:	eb18 0805 	adds.w	r8, r8, r5
 8007938:	eb49 0906 	adc.w	r9, r9, r6
 800793c:	f04f 0100 	mov.w	r1, #0
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007948:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800794c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007950:	4688      	mov	r8, r1
 8007952:	4691      	mov	r9, r2
 8007954:	eb18 0005 	adds.w	r0, r8, r5
 8007958:	eb49 0106 	adc.w	r1, r9, r6
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	461d      	mov	r5, r3
 8007962:	f04f 0600 	mov.w	r6, #0
 8007966:	196b      	adds	r3, r5, r5
 8007968:	eb46 0406 	adc.w	r4, r6, r6
 800796c:	461a      	mov	r2, r3
 800796e:	4623      	mov	r3, r4
 8007970:	f7f9 f974 	bl	8000c5c <__aeabi_uldivmod>
 8007974:	4603      	mov	r3, r0
 8007976:	460c      	mov	r4, r1
 8007978:	461a      	mov	r2, r3
 800797a:	4b47      	ldr	r3, [pc, #284]	; (8007a98 <UART_SetConfig+0x384>)
 800797c:	fba3 2302 	umull	r2, r3, r3, r2
 8007980:	095b      	lsrs	r3, r3, #5
 8007982:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	461d      	mov	r5, r3
 800798a:	f04f 0600 	mov.w	r6, #0
 800798e:	46a9      	mov	r9, r5
 8007990:	46b2      	mov	sl, r6
 8007992:	eb19 0309 	adds.w	r3, r9, r9
 8007996:	eb4a 040a 	adc.w	r4, sl, sl
 800799a:	4699      	mov	r9, r3
 800799c:	46a2      	mov	sl, r4
 800799e:	eb19 0905 	adds.w	r9, r9, r5
 80079a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80079a6:	f04f 0100 	mov.w	r1, #0
 80079aa:	f04f 0200 	mov.w	r2, #0
 80079ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079ba:	4689      	mov	r9, r1
 80079bc:	4692      	mov	sl, r2
 80079be:	eb19 0005 	adds.w	r0, r9, r5
 80079c2:	eb4a 0106 	adc.w	r1, sl, r6
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	461d      	mov	r5, r3
 80079cc:	f04f 0600 	mov.w	r6, #0
 80079d0:	196b      	adds	r3, r5, r5
 80079d2:	eb46 0406 	adc.w	r4, r6, r6
 80079d6:	461a      	mov	r2, r3
 80079d8:	4623      	mov	r3, r4
 80079da:	f7f9 f93f 	bl	8000c5c <__aeabi_uldivmod>
 80079de:	4603      	mov	r3, r0
 80079e0:	460c      	mov	r4, r1
 80079e2:	461a      	mov	r2, r3
 80079e4:	4b2c      	ldr	r3, [pc, #176]	; (8007a98 <UART_SetConfig+0x384>)
 80079e6:	fba3 1302 	umull	r1, r3, r3, r2
 80079ea:	095b      	lsrs	r3, r3, #5
 80079ec:	2164      	movs	r1, #100	; 0x64
 80079ee:	fb01 f303 	mul.w	r3, r1, r3
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	00db      	lsls	r3, r3, #3
 80079f6:	3332      	adds	r3, #50	; 0x32
 80079f8:	4a27      	ldr	r2, [pc, #156]	; (8007a98 <UART_SetConfig+0x384>)
 80079fa:	fba2 2303 	umull	r2, r3, r2, r3
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a06:	4498      	add	r8, r3
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	461d      	mov	r5, r3
 8007a0c:	f04f 0600 	mov.w	r6, #0
 8007a10:	46a9      	mov	r9, r5
 8007a12:	46b2      	mov	sl, r6
 8007a14:	eb19 0309 	adds.w	r3, r9, r9
 8007a18:	eb4a 040a 	adc.w	r4, sl, sl
 8007a1c:	4699      	mov	r9, r3
 8007a1e:	46a2      	mov	sl, r4
 8007a20:	eb19 0905 	adds.w	r9, r9, r5
 8007a24:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a28:	f04f 0100 	mov.w	r1, #0
 8007a2c:	f04f 0200 	mov.w	r2, #0
 8007a30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a3c:	4689      	mov	r9, r1
 8007a3e:	4692      	mov	sl, r2
 8007a40:	eb19 0005 	adds.w	r0, r9, r5
 8007a44:	eb4a 0106 	adc.w	r1, sl, r6
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	461d      	mov	r5, r3
 8007a4e:	f04f 0600 	mov.w	r6, #0
 8007a52:	196b      	adds	r3, r5, r5
 8007a54:	eb46 0406 	adc.w	r4, r6, r6
 8007a58:	461a      	mov	r2, r3
 8007a5a:	4623      	mov	r3, r4
 8007a5c:	f7f9 f8fe 	bl	8000c5c <__aeabi_uldivmod>
 8007a60:	4603      	mov	r3, r0
 8007a62:	460c      	mov	r4, r1
 8007a64:	461a      	mov	r2, r3
 8007a66:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <UART_SetConfig+0x384>)
 8007a68:	fba3 1302 	umull	r1, r3, r3, r2
 8007a6c:	095b      	lsrs	r3, r3, #5
 8007a6e:	2164      	movs	r1, #100	; 0x64
 8007a70:	fb01 f303 	mul.w	r3, r1, r3
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	3332      	adds	r3, #50	; 0x32
 8007a7a:	4a07      	ldr	r2, [pc, #28]	; (8007a98 <UART_SetConfig+0x384>)
 8007a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a80:	095b      	lsrs	r3, r3, #5
 8007a82:	f003 0207 	and.w	r2, r3, #7
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4442      	add	r2, r8
 8007a8c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007a8e:	e1b2      	b.n	8007df6 <UART_SetConfig+0x6e2>
 8007a90:	40011000 	.word	0x40011000
 8007a94:	40011400 	.word	0x40011400
 8007a98:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4ad7      	ldr	r2, [pc, #860]	; (8007e00 <UART_SetConfig+0x6ec>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d005      	beq.n	8007ab2 <UART_SetConfig+0x39e>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4ad6      	ldr	r2, [pc, #856]	; (8007e04 <UART_SetConfig+0x6f0>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	f040 80d1 	bne.w	8007c54 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ab2:	f7fc ff7b 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 8007ab6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	469a      	mov	sl, r3
 8007abc:	f04f 0b00 	mov.w	fp, #0
 8007ac0:	46d0      	mov	r8, sl
 8007ac2:	46d9      	mov	r9, fp
 8007ac4:	eb18 0308 	adds.w	r3, r8, r8
 8007ac8:	eb49 0409 	adc.w	r4, r9, r9
 8007acc:	4698      	mov	r8, r3
 8007ace:	46a1      	mov	r9, r4
 8007ad0:	eb18 080a 	adds.w	r8, r8, sl
 8007ad4:	eb49 090b 	adc.w	r9, r9, fp
 8007ad8:	f04f 0100 	mov.w	r1, #0
 8007adc:	f04f 0200 	mov.w	r2, #0
 8007ae0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ae4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ae8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007aec:	4688      	mov	r8, r1
 8007aee:	4691      	mov	r9, r2
 8007af0:	eb1a 0508 	adds.w	r5, sl, r8
 8007af4:	eb4b 0609 	adc.w	r6, fp, r9
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	4619      	mov	r1, r3
 8007afe:	f04f 0200 	mov.w	r2, #0
 8007b02:	f04f 0300 	mov.w	r3, #0
 8007b06:	f04f 0400 	mov.w	r4, #0
 8007b0a:	0094      	lsls	r4, r2, #2
 8007b0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b10:	008b      	lsls	r3, r1, #2
 8007b12:	461a      	mov	r2, r3
 8007b14:	4623      	mov	r3, r4
 8007b16:	4628      	mov	r0, r5
 8007b18:	4631      	mov	r1, r6
 8007b1a:	f7f9 f89f 	bl	8000c5c <__aeabi_uldivmod>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	460c      	mov	r4, r1
 8007b22:	461a      	mov	r2, r3
 8007b24:	4bb8      	ldr	r3, [pc, #736]	; (8007e08 <UART_SetConfig+0x6f4>)
 8007b26:	fba3 2302 	umull	r2, r3, r3, r2
 8007b2a:	095b      	lsrs	r3, r3, #5
 8007b2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	469b      	mov	fp, r3
 8007b34:	f04f 0c00 	mov.w	ip, #0
 8007b38:	46d9      	mov	r9, fp
 8007b3a:	46e2      	mov	sl, ip
 8007b3c:	eb19 0309 	adds.w	r3, r9, r9
 8007b40:	eb4a 040a 	adc.w	r4, sl, sl
 8007b44:	4699      	mov	r9, r3
 8007b46:	46a2      	mov	sl, r4
 8007b48:	eb19 090b 	adds.w	r9, r9, fp
 8007b4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b50:	f04f 0100 	mov.w	r1, #0
 8007b54:	f04f 0200 	mov.w	r2, #0
 8007b58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b64:	4689      	mov	r9, r1
 8007b66:	4692      	mov	sl, r2
 8007b68:	eb1b 0509 	adds.w	r5, fp, r9
 8007b6c:	eb4c 060a 	adc.w	r6, ip, sl
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	4619      	mov	r1, r3
 8007b76:	f04f 0200 	mov.w	r2, #0
 8007b7a:	f04f 0300 	mov.w	r3, #0
 8007b7e:	f04f 0400 	mov.w	r4, #0
 8007b82:	0094      	lsls	r4, r2, #2
 8007b84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b88:	008b      	lsls	r3, r1, #2
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	4623      	mov	r3, r4
 8007b8e:	4628      	mov	r0, r5
 8007b90:	4631      	mov	r1, r6
 8007b92:	f7f9 f863 	bl	8000c5c <__aeabi_uldivmod>
 8007b96:	4603      	mov	r3, r0
 8007b98:	460c      	mov	r4, r1
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	4b9a      	ldr	r3, [pc, #616]	; (8007e08 <UART_SetConfig+0x6f4>)
 8007b9e:	fba3 1302 	umull	r1, r3, r3, r2
 8007ba2:	095b      	lsrs	r3, r3, #5
 8007ba4:	2164      	movs	r1, #100	; 0x64
 8007ba6:	fb01 f303 	mul.w	r3, r1, r3
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	011b      	lsls	r3, r3, #4
 8007bae:	3332      	adds	r3, #50	; 0x32
 8007bb0:	4a95      	ldr	r2, [pc, #596]	; (8007e08 <UART_SetConfig+0x6f4>)
 8007bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb6:	095b      	lsrs	r3, r3, #5
 8007bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bbc:	4498      	add	r8, r3
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	469b      	mov	fp, r3
 8007bc2:	f04f 0c00 	mov.w	ip, #0
 8007bc6:	46d9      	mov	r9, fp
 8007bc8:	46e2      	mov	sl, ip
 8007bca:	eb19 0309 	adds.w	r3, r9, r9
 8007bce:	eb4a 040a 	adc.w	r4, sl, sl
 8007bd2:	4699      	mov	r9, r3
 8007bd4:	46a2      	mov	sl, r4
 8007bd6:	eb19 090b 	adds.w	r9, r9, fp
 8007bda:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007bde:	f04f 0100 	mov.w	r1, #0
 8007be2:	f04f 0200 	mov.w	r2, #0
 8007be6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007bf2:	4689      	mov	r9, r1
 8007bf4:	4692      	mov	sl, r2
 8007bf6:	eb1b 0509 	adds.w	r5, fp, r9
 8007bfa:	eb4c 060a 	adc.w	r6, ip, sl
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	4619      	mov	r1, r3
 8007c04:	f04f 0200 	mov.w	r2, #0
 8007c08:	f04f 0300 	mov.w	r3, #0
 8007c0c:	f04f 0400 	mov.w	r4, #0
 8007c10:	0094      	lsls	r4, r2, #2
 8007c12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c16:	008b      	lsls	r3, r1, #2
 8007c18:	461a      	mov	r2, r3
 8007c1a:	4623      	mov	r3, r4
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	4631      	mov	r1, r6
 8007c20:	f7f9 f81c 	bl	8000c5c <__aeabi_uldivmod>
 8007c24:	4603      	mov	r3, r0
 8007c26:	460c      	mov	r4, r1
 8007c28:	461a      	mov	r2, r3
 8007c2a:	4b77      	ldr	r3, [pc, #476]	; (8007e08 <UART_SetConfig+0x6f4>)
 8007c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c30:	095b      	lsrs	r3, r3, #5
 8007c32:	2164      	movs	r1, #100	; 0x64
 8007c34:	fb01 f303 	mul.w	r3, r1, r3
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	3332      	adds	r3, #50	; 0x32
 8007c3e:	4a72      	ldr	r2, [pc, #456]	; (8007e08 <UART_SetConfig+0x6f4>)
 8007c40:	fba2 2303 	umull	r2, r3, r2, r3
 8007c44:	095b      	lsrs	r3, r3, #5
 8007c46:	f003 020f 	and.w	r2, r3, #15
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4442      	add	r2, r8
 8007c50:	609a      	str	r2, [r3, #8]
 8007c52:	e0d0      	b.n	8007df6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c54:	f7fc fe96 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8007c58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	469a      	mov	sl, r3
 8007c5e:	f04f 0b00 	mov.w	fp, #0
 8007c62:	46d0      	mov	r8, sl
 8007c64:	46d9      	mov	r9, fp
 8007c66:	eb18 0308 	adds.w	r3, r8, r8
 8007c6a:	eb49 0409 	adc.w	r4, r9, r9
 8007c6e:	4698      	mov	r8, r3
 8007c70:	46a1      	mov	r9, r4
 8007c72:	eb18 080a 	adds.w	r8, r8, sl
 8007c76:	eb49 090b 	adc.w	r9, r9, fp
 8007c7a:	f04f 0100 	mov.w	r1, #0
 8007c7e:	f04f 0200 	mov.w	r2, #0
 8007c82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c8e:	4688      	mov	r8, r1
 8007c90:	4691      	mov	r9, r2
 8007c92:	eb1a 0508 	adds.w	r5, sl, r8
 8007c96:	eb4b 0609 	adc.w	r6, fp, r9
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	f04f 0200 	mov.w	r2, #0
 8007ca4:	f04f 0300 	mov.w	r3, #0
 8007ca8:	f04f 0400 	mov.w	r4, #0
 8007cac:	0094      	lsls	r4, r2, #2
 8007cae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cb2:	008b      	lsls	r3, r1, #2
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	4623      	mov	r3, r4
 8007cb8:	4628      	mov	r0, r5
 8007cba:	4631      	mov	r1, r6
 8007cbc:	f7f8 ffce 	bl	8000c5c <__aeabi_uldivmod>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	4b50      	ldr	r3, [pc, #320]	; (8007e08 <UART_SetConfig+0x6f4>)
 8007cc8:	fba3 2302 	umull	r2, r3, r3, r2
 8007ccc:	095b      	lsrs	r3, r3, #5
 8007cce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	469b      	mov	fp, r3
 8007cd6:	f04f 0c00 	mov.w	ip, #0
 8007cda:	46d9      	mov	r9, fp
 8007cdc:	46e2      	mov	sl, ip
 8007cde:	eb19 0309 	adds.w	r3, r9, r9
 8007ce2:	eb4a 040a 	adc.w	r4, sl, sl
 8007ce6:	4699      	mov	r9, r3
 8007ce8:	46a2      	mov	sl, r4
 8007cea:	eb19 090b 	adds.w	r9, r9, fp
 8007cee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007cf2:	f04f 0100 	mov.w	r1, #0
 8007cf6:	f04f 0200 	mov.w	r2, #0
 8007cfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d06:	4689      	mov	r9, r1
 8007d08:	4692      	mov	sl, r2
 8007d0a:	eb1b 0509 	adds.w	r5, fp, r9
 8007d0e:	eb4c 060a 	adc.w	r6, ip, sl
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	4619      	mov	r1, r3
 8007d18:	f04f 0200 	mov.w	r2, #0
 8007d1c:	f04f 0300 	mov.w	r3, #0
 8007d20:	f04f 0400 	mov.w	r4, #0
 8007d24:	0094      	lsls	r4, r2, #2
 8007d26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d2a:	008b      	lsls	r3, r1, #2
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	4623      	mov	r3, r4
 8007d30:	4628      	mov	r0, r5
 8007d32:	4631      	mov	r1, r6
 8007d34:	f7f8 ff92 	bl	8000c5c <__aeabi_uldivmod>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	4b32      	ldr	r3, [pc, #200]	; (8007e08 <UART_SetConfig+0x6f4>)
 8007d40:	fba3 1302 	umull	r1, r3, r3, r2
 8007d44:	095b      	lsrs	r3, r3, #5
 8007d46:	2164      	movs	r1, #100	; 0x64
 8007d48:	fb01 f303 	mul.w	r3, r1, r3
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	011b      	lsls	r3, r3, #4
 8007d50:	3332      	adds	r3, #50	; 0x32
 8007d52:	4a2d      	ldr	r2, [pc, #180]	; (8007e08 <UART_SetConfig+0x6f4>)
 8007d54:	fba2 2303 	umull	r2, r3, r2, r3
 8007d58:	095b      	lsrs	r3, r3, #5
 8007d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d5e:	4498      	add	r8, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	469b      	mov	fp, r3
 8007d64:	f04f 0c00 	mov.w	ip, #0
 8007d68:	46d9      	mov	r9, fp
 8007d6a:	46e2      	mov	sl, ip
 8007d6c:	eb19 0309 	adds.w	r3, r9, r9
 8007d70:	eb4a 040a 	adc.w	r4, sl, sl
 8007d74:	4699      	mov	r9, r3
 8007d76:	46a2      	mov	sl, r4
 8007d78:	eb19 090b 	adds.w	r9, r9, fp
 8007d7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d80:	f04f 0100 	mov.w	r1, #0
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d94:	4689      	mov	r9, r1
 8007d96:	4692      	mov	sl, r2
 8007d98:	eb1b 0509 	adds.w	r5, fp, r9
 8007d9c:	eb4c 060a 	adc.w	r6, ip, sl
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	4619      	mov	r1, r3
 8007da6:	f04f 0200 	mov.w	r2, #0
 8007daa:	f04f 0300 	mov.w	r3, #0
 8007dae:	f04f 0400 	mov.w	r4, #0
 8007db2:	0094      	lsls	r4, r2, #2
 8007db4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007db8:	008b      	lsls	r3, r1, #2
 8007dba:	461a      	mov	r2, r3
 8007dbc:	4623      	mov	r3, r4
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	4631      	mov	r1, r6
 8007dc2:	f7f8 ff4b 	bl	8000c5c <__aeabi_uldivmod>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	460c      	mov	r4, r1
 8007dca:	461a      	mov	r2, r3
 8007dcc:	4b0e      	ldr	r3, [pc, #56]	; (8007e08 <UART_SetConfig+0x6f4>)
 8007dce:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd2:	095b      	lsrs	r3, r3, #5
 8007dd4:	2164      	movs	r1, #100	; 0x64
 8007dd6:	fb01 f303 	mul.w	r3, r1, r3
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	3332      	adds	r3, #50	; 0x32
 8007de0:	4a09      	ldr	r2, [pc, #36]	; (8007e08 <UART_SetConfig+0x6f4>)
 8007de2:	fba2 2303 	umull	r2, r3, r2, r3
 8007de6:	095b      	lsrs	r3, r3, #5
 8007de8:	f003 020f 	and.w	r2, r3, #15
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4442      	add	r2, r8
 8007df2:	609a      	str	r2, [r3, #8]
}
 8007df4:	e7ff      	b.n	8007df6 <UART_SetConfig+0x6e2>
 8007df6:	bf00      	nop
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e00:	40011000 	.word	0x40011000
 8007e04:	40011400 	.word	0x40011400
 8007e08:	51eb851f 	.word	0x51eb851f

08007e0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	f107 001c 	add.w	r0, r7, #28
 8007e1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d122      	bne.n	8007e6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d105      	bne.n	8007e5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fa5c 	bl	800831c <USB_CoreReset>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]
 8007e68:	e01a      	b.n	8007ea0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fa50 	bl	800831c <USB_CoreReset>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d106      	bne.n	8007e94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	639a      	str	r2, [r3, #56]	; 0x38
 8007e92:	e005      	b.n	8007ea0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d10b      	bne.n	8007ebe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f043 0206 	orr.w	r2, r3, #6
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f043 0220 	orr.w	r2, r3, #32
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007eca:	b004      	add	sp, #16
 8007ecc:	4770      	bx	lr

08007ece <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f023 0201 	bic.w	r2, r3, #1
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f08:	78fb      	ldrb	r3, [r7, #3]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d106      	bne.n	8007f1c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	60da      	str	r2, [r3, #12]
 8007f1a:	e00b      	b.n	8007f34 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d106      	bne.n	8007f30 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	60da      	str	r2, [r3, #12]
 8007f2e:	e001      	b.n	8007f34 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e003      	b.n	8007f3c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007f34:	2032      	movs	r0, #50	; 0x32
 8007f36:	f7f9 f883 	bl	8001040 <HAL_Delay>

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f44:	b084      	sub	sp, #16
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b086      	sub	sp, #24
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f5e:	2300      	movs	r3, #0
 8007f60:	613b      	str	r3, [r7, #16]
 8007f62:	e009      	b.n	8007f78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	3340      	adds	r3, #64	; 0x40
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	2200      	movs	r2, #0
 8007f70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	3301      	adds	r3, #1
 8007f76:	613b      	str	r3, [r7, #16]
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	2b0e      	cmp	r3, #14
 8007f7c:	d9f2      	bls.n	8007f64 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d112      	bne.n	8007faa <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f94:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	639a      	str	r2, [r3, #56]	; 0x38
 8007fa8:	e00b      	b.n	8007fc2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fc8:	461a      	mov	r2, r3
 8007fca:	2300      	movs	r3, #0
 8007fcc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fdc:	461a      	mov	r2, r3
 8007fde:	680b      	ldr	r3, [r1, #0]
 8007fe0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d10c      	bne.n	8008002 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d104      	bne.n	8007ff8 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007fee:	2100      	movs	r1, #0
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f961 	bl	80082b8 <USB_SetDevSpeed>
 8007ff6:	e008      	b.n	800800a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f95c 	bl	80082b8 <USB_SetDevSpeed>
 8008000:	e003      	b.n	800800a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008002:	2103      	movs	r1, #3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f957 	bl	80082b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800800a:	2110      	movs	r1, #16
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f90b 	bl	8008228 <USB_FlushTxFifo>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f929 	bl	8008274 <USB_FlushRxFifo>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008032:	461a      	mov	r2, r3
 8008034:	2300      	movs	r3, #0
 8008036:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800803e:	461a      	mov	r2, r3
 8008040:	2300      	movs	r3, #0
 8008042:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800804a:	461a      	mov	r2, r3
 800804c:	2300      	movs	r3, #0
 800804e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008050:	2300      	movs	r3, #0
 8008052:	613b      	str	r3, [r7, #16]
 8008054:	e043      	b.n	80080de <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	015a      	lsls	r2, r3, #5
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	4413      	add	r3, r2
 800805e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800806c:	d118      	bne.n	80080a0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10a      	bne.n	800808a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4413      	add	r3, r2
 800807c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008080:	461a      	mov	r2, r3
 8008082:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008086:	6013      	str	r3, [r2, #0]
 8008088:	e013      	b.n	80080b2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	4413      	add	r3, r2
 8008092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008096:	461a      	mov	r2, r3
 8008098:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	e008      	b.n	80080b2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ac:	461a      	mov	r2, r3
 80080ae:	2300      	movs	r3, #0
 80080b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080be:	461a      	mov	r2, r3
 80080c0:	2300      	movs	r3, #0
 80080c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d0:	461a      	mov	r2, r3
 80080d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	3301      	adds	r3, #1
 80080dc:	613b      	str	r3, [r7, #16]
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d3b7      	bcc.n	8008056 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080e6:	2300      	movs	r3, #0
 80080e8:	613b      	str	r3, [r7, #16]
 80080ea:	e043      	b.n	8008174 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008102:	d118      	bne.n	8008136 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10a      	bne.n	8008120 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008116:	461a      	mov	r2, r3
 8008118:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	e013      	b.n	8008148 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800812c:	461a      	mov	r2, r3
 800812e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	e008      	b.n	8008148 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	015a      	lsls	r2, r3, #5
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	4413      	add	r3, r2
 800813e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008142:	461a      	mov	r2, r3
 8008144:	2300      	movs	r3, #0
 8008146:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	4413      	add	r3, r2
 8008150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008154:	461a      	mov	r2, r3
 8008156:	2300      	movs	r3, #0
 8008158:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	015a      	lsls	r2, r3, #5
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4413      	add	r3, r2
 8008162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008166:	461a      	mov	r2, r3
 8008168:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800816c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	3301      	adds	r3, #1
 8008172:	613b      	str	r3, [r7, #16]
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	429a      	cmp	r2, r3
 800817a:	d3b7      	bcc.n	80080ec <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800818a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800818e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8008190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008192:	2b01      	cmp	r3, #1
 8008194:	d111      	bne.n	80081ba <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819c:	461a      	mov	r2, r3
 800819e:	4b20      	ldr	r3, [pc, #128]	; (8008220 <USB_DevInit+0x2dc>)
 80081a0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081b4:	f043 0303 	orr.w	r3, r3, #3
 80081b8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80081c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d105      	bne.n	80081da <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	f043 0210 	orr.w	r2, r3, #16
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	4b11      	ldr	r3, [pc, #68]	; (8008224 <USB_DevInit+0x2e0>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80081e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d005      	beq.n	80081f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	f043 0208 	orr.w	r2, r3, #8
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80081f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d107      	bne.n	800820e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008206:	f043 0304 	orr.w	r3, r3, #4
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800821a:	b004      	add	sp, #16
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	00800100 	.word	0x00800100
 8008224:	803c3800 	.word	0x803c3800

08008228 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	019b      	lsls	r3, r3, #6
 800823a:	f043 0220 	orr.w	r2, r3, #32
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3301      	adds	r3, #1
 8008246:	60fb      	str	r3, [r7, #12]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	4a09      	ldr	r2, [pc, #36]	; (8008270 <USB_FlushTxFifo+0x48>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d901      	bls.n	8008254 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008250:	2303      	movs	r3, #3
 8008252:	e006      	b.n	8008262 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	f003 0320 	and.w	r3, r3, #32
 800825c:	2b20      	cmp	r3, #32
 800825e:	d0f0      	beq.n	8008242 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	00030d40 	.word	0x00030d40

08008274 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2210      	movs	r2, #16
 8008284:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	3301      	adds	r3, #1
 800828a:	60fb      	str	r3, [r7, #12]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4a09      	ldr	r2, [pc, #36]	; (80082b4 <USB_FlushRxFifo+0x40>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d901      	bls.n	8008298 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e006      	b.n	80082a6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	f003 0310 	and.w	r3, r3, #16
 80082a0:	2b10      	cmp	r3, #16
 80082a2:	d0f0      	beq.n	8008286 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	00030d40 	.word	0x00030d40

080082b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	78fb      	ldrb	r3, [r7, #3]
 80082d2:	68f9      	ldr	r1, [r7, #12]
 80082d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082d8:	4313      	orrs	r3, r2
 80082da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008304:	f043 0302 	orr.w	r3, r3, #2
 8008308:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800830a:	2003      	movs	r0, #3
 800830c:	f7f8 fe98 	bl	8001040 <HAL_Delay>

  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
	...

0800831c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008324:	2300      	movs	r3, #0
 8008326:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3301      	adds	r3, #1
 800832c:	60fb      	str	r3, [r7, #12]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	4a13      	ldr	r2, [pc, #76]	; (8008380 <USB_CoreReset+0x64>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d901      	bls.n	800833a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e01b      	b.n	8008372 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	daf2      	bge.n	8008328 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f043 0201 	orr.w	r2, r3, #1
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	3301      	adds	r3, #1
 8008356:	60fb      	str	r3, [r7, #12]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4a09      	ldr	r2, [pc, #36]	; (8008380 <USB_CoreReset+0x64>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d901      	bls.n	8008364 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e006      	b.n	8008372 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b01      	cmp	r3, #1
 800836e:	d0f0      	beq.n	8008352 <USB_CoreReset+0x36>

  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	00030d40 	.word	0x00030d40
 8008384:	00000000 	.word	0x00000000

08008388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800838a:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 800838e:	af22      	add	r7, sp, #136	; 0x88
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008390:	f7f8 fde4 	bl	8000f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008394:	f000 fd92 	bl	8008ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008398:	f001 fde6 	bl	8009f68 <MX_GPIO_Init>
  MX_DMA_Init();
 800839c:	f001 fd9e 	bl	8009edc <MX_DMA_Init>
  MX_TIM9_Init();
 80083a0:	f001 fc2c 	bl	8009bfc <MX_TIM9_Init>
  MX_SPI2_Init();
 80083a4:	f001 f95e 	bl	8009664 <MX_SPI2_Init>
  MX_ADC1_Init();
 80083a8:	f000 fe0c 	bl	8008fc4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80083ac:	f000 fee8 	bl	8009180 <MX_ADC2_Init>
  MX_CAN1_Init();
 80083b0:	f001 f8a2 	bl	80094f8 <MX_CAN1_Init>
  MX_I2C1_Init();
 80083b4:	f001 f8d4 	bl	8009560 <MX_I2C1_Init>
  MX_I2C2_Init();
 80083b8:	f001 f900 	bl	80095bc <MX_I2C2_Init>
  MX_TIM1_Init();
 80083bc:	f001 f98a 	bl	80096d4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80083c0:	f001 fd34 	bl	8009e2c <MX_USART3_UART_Init>
  MX_TIM8_Init();
 80083c4:	f001 fbc2 	bl	8009b4c <MX_TIM8_Init>
  MX_TIM13_Init();
 80083c8:	f001 fcea 	bl	8009da0 <MX_TIM13_Init>
  MX_TIM12_Init();
 80083cc:	f001 fc88 	bl	8009ce0 <MX_TIM12_Init>
  MX_TIM2_Init();
 80083d0:	f001 fa52 	bl	8009878 <MX_TIM2_Init>
  MX_ADC3_Init();
 80083d4:	f000 ffb2 	bl	800933c <MX_ADC3_Init>
  MX_USB_OTG_FS_PCD_Init();
 80083d8:	f001 fd52 	bl	8009e80 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 80083dc:	f001 f91c 	bl	8009618 <MX_RTC_Init>
  MX_TIM6_Init();
 80083e0:	f001 fb7e 	bl	8009ae0 <MX_TIM6_Init>
  MX_TIM3_Init();
 80083e4:	f001 faba 	bl	800995c <MX_TIM3_Init>
  MX_TIM5_Init();
 80083e8:	f001 fb2c 	bl	8009a44 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  calc_lookup(lookup);
 80083ec:	4860      	ldr	r0, [pc, #384]	; (8008570 <main+0x1e8>)
 80083ee:	f001 fff3 	bl	800a3d8 <calc_lookup>

	uint8_t buf[300];
	//uint8_t plot[300];

	char ch='q';
 80083f2:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 80083f6:	2271      	movs	r2, #113	; 0x71
 80083f8:	701a      	strb	r2, [r3, #0]
	int16_t accel16;
	uint8_t accel8l;
	uint8_t accel8h;

  // --- SET STATUS LEDS
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80083fa:	2100      	movs	r1, #0
 80083fc:	485d      	ldr	r0, [pc, #372]	; (8008574 <main+0x1ec>)
 80083fe:	f7fd fc3f 	bl	8005c80 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2);
 8008402:	2104      	movs	r1, #4
 8008404:	485b      	ldr	r0, [pc, #364]	; (8008574 <main+0x1ec>)
 8008406:	f7fd fbc7 	bl	8005b98 <HAL_TIM_OC_Start>

  HAL_TIM_OC_Start(&htim12, TIM_CHANNEL_1);
 800840a:	2100      	movs	r1, #0
 800840c:	485a      	ldr	r0, [pc, #360]	; (8008578 <main+0x1f0>)
 800840e:	f7fd fbc3 	bl	8005b98 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8008412:	2100      	movs	r1, #0
 8008414:	4859      	ldr	r0, [pc, #356]	; (800857c <main+0x1f4>)
 8008416:	f7fd fbbf 	bl	8005b98 <HAL_TIM_OC_Start>

  // --- ENABLE DRV
  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 800841a:	2201      	movs	r2, #1
 800841c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008420:	4857      	ldr	r0, [pc, #348]	; (8008580 <main+0x1f8>)
 8008422:	f7fa fd79 	bl	8002f18 <HAL_GPIO_WritePin>


  SCB->CPACR |= 0xf00000;
 8008426:	4b57      	ldr	r3, [pc, #348]	; (8008584 <main+0x1fc>)
 8008428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800842c:	4a55      	ldr	r2, [pc, #340]	; (8008584 <main+0x1fc>)
 800842e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008432:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  int i=0;
 8008436:	2300      	movs	r3, #0
 8008438:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	uint32_t i_fast = 0;
 800843c:	2300      	movs	r3, #0
 800843e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	uint32_t i_slow = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	uint32_t fast2slow = 100;
 8008448:	2364      	movs	r3, #100	; 0x64
 800844a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

	int blink_duration = 100;
 800844e:	2364      	movs	r3, #100	; 0x64
 8008450:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  //  HAL_Delay(2);


	// --- MOTOR DRIVER ----------------------------------------------------
	//EN_GATE
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008454:	2100      	movs	r1, #0
 8008456:	484c      	ldr	r0, [pc, #304]	; (8008588 <main+0x200>)
 8008458:	f7fd fc12 	bl	8005c80 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 800845c:	2100      	movs	r1, #0
 800845e:	484a      	ldr	r0, [pc, #296]	; (8008588 <main+0x200>)
 8008460:	f7fe fd43 	bl	8006eea <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8008464:	2104      	movs	r1, #4
 8008466:	4848      	ldr	r0, [pc, #288]	; (8008588 <main+0x200>)
 8008468:	f7fd fc0a 	bl	8005c80 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 800846c:	2104      	movs	r1, #4
 800846e:	4846      	ldr	r0, [pc, #280]	; (8008588 <main+0x200>)
 8008470:	f7fe fd3b 	bl	8006eea <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8008474:	2108      	movs	r1, #8
 8008476:	4844      	ldr	r0, [pc, #272]	; (8008588 <main+0x200>)
 8008478:	f7fd fc02 	bl	8005c80 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 800847c:	2108      	movs	r1, #8
 800847e:	4842      	ldr	r0, [pc, #264]	; (8008588 <main+0x200>)
 8008480:	f7fe fd33 	bl	8006eea <HAL_TIMEx_PWMN_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8008484:	210c      	movs	r1, #12
 8008486:	4840      	ldr	r0, [pc, #256]	; (8008588 <main+0x200>)
 8008488:	f7fd fb86 	bl	8005b98 <HAL_TIM_OC_Start>

	playSound( 3, 100, 20);
 800848c:	2214      	movs	r2, #20
 800848e:	2164      	movs	r1, #100	; 0x64
 8008490:	2003      	movs	r0, #3
 8008492:	f001 ff63 	bl	800a35c <playSound>

	HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
 8008496:	2201      	movs	r2, #1
 8008498:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800849c:	4838      	ldr	r0, [pc, #224]	; (8008580 <main+0x1f8>)
 800849e:	f7fa fd3b 	bl	8002f18 <HAL_GPIO_WritePin>


	// --- used for heartbeat of microcontroller
	HAL_TIM_Base_Start_IT(&htim3);
 80084a2:	483a      	ldr	r0, [pc, #232]	; (800858c <main+0x204>)
 80084a4:	f7fd fb1f 	bl	8005ae6 <HAL_TIM_Base_Start_IT>
	// --- 32bit timer used to measure time in10mus
	HAL_TIM_Base_Start(&htim5);
 80084a8:	4839      	ldr	r0, [pc, #228]	; (8008590 <main+0x208>)
 80084aa:	f7fd faf8 	bl	8005a9e <HAL_TIM_Base_Start>
	// --- I2C2 IMU ------------------------------------------------
	//see: https://www.youtube.com/watch?v=isOekyygpR8
	//b1101000
	char accel_char[20];

	buf[0] = 0x6B; //power register
 80084ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80084b2:	226b      	movs	r2, #107	; 0x6b
 80084b4:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x00; //switch on
 80084b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80084ba:	2200      	movs	r2, #0
 80084bc:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 2, HAL_MAX_DELAY);
 80084be:	23d0      	movs	r3, #208	; 0xd0
 80084c0:	b299      	uxth	r1, r3
 80084c2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80084c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	2302      	movs	r3, #2
 80084ce:	4831      	ldr	r0, [pc, #196]	; (8008594 <main+0x20c>)
 80084d0:	f7fa fea6 	bl	8003220 <HAL_I2C_Master_Transmit>
 80084d4:	4603      	mov	r3, r0
 80084d6:	f887 31db 	strb.w	r3, [r7, #475]	; 0x1db
	if (ret != HAL_OK){
 80084da:	f897 31db 	ldrb.w	r3, [r7, #475]	; 0x1db
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d008      	beq.n	80084f4 <main+0x16c>
		strcpy((char*)buf, "Error IMU T\r\n");
 80084e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80084e6:	4a2c      	ldr	r2, [pc, #176]	; (8008598 <main+0x210>)
 80084e8:	461c      	mov	r4, r3
 80084ea:	4613      	mov	r3, r2
 80084ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80084ee:	c407      	stmia	r4!, {r0, r1, r2}
 80084f0:	8023      	strh	r3, [r4, #0]
 80084f2:	e003      	b.n	80084fc <main+0x174>
	} else {
		buf[0] = 0x00;
 80084f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80084f8:	2200      	movs	r2, #0
 80084fa:	701a      	strb	r2, [r3, #0]
	}

	buf[0] = 0x3B;
 80084fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008500:	223b      	movs	r2, #59	; 0x3b
 8008502:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8008504:	23d0      	movs	r3, #208	; 0xd0
 8008506:	b299      	uxth	r1, r3
 8008508:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800850c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	2301      	movs	r3, #1
 8008514:	481f      	ldr	r0, [pc, #124]	; (8008594 <main+0x20c>)
 8008516:	f7fa fe83 	bl	8003220 <HAL_I2C_Master_Transmit>
 800851a:	4603      	mov	r3, r0
 800851c:	f887 31db 	strb.w	r3, [r7, #475]	; 0x1db
	if (ret != HAL_OK){
 8008520:	f897 31db 	ldrb.w	r3, [r7, #475]	; 0x1db
 8008524:	2b00      	cmp	r3, #0
 8008526:	d008      	beq.n	800853a <main+0x1b2>
		strcpy((char*)buf, "Error IMU T\r\n");
 8008528:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800852c:	4a1a      	ldr	r2, [pc, #104]	; (8008598 <main+0x210>)
 800852e:	461c      	mov	r4, r3
 8008530:	4613      	mov	r3, r2
 8008532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008534:	c407      	stmia	r4!, {r0, r1, r2}
 8008536:	8023      	strh	r3, [r4, #0]
 8008538:	e03f      	b.n	80085ba <main+0x232>
	} else {
		ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 800853a:	23d0      	movs	r3, #208	; 0xd0
 800853c:	b299      	uxth	r1, r3
 800853e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	2301      	movs	r3, #1
 800854a:	4812      	ldr	r0, [pc, #72]	; (8008594 <main+0x20c>)
 800854c:	f7fa ff66 	bl	800341c <HAL_I2C_Master_Receive>
 8008550:	4603      	mov	r3, r0
 8008552:	f887 31db 	strb.w	r3, [r7, #475]	; 0x1db
		if (ret != HAL_OK){
 8008556:	f897 31db 	ldrb.w	r3, [r7, #475]	; 0x1db
 800855a:	2b00      	cmp	r3, #0
 800855c:	d020      	beq.n	80085a0 <main+0x218>
			strcpy((char*)buf, "Error IMU R\r\n");
 800855e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008562:	4a0e      	ldr	r2, [pc, #56]	; (800859c <main+0x214>)
 8008564:	461c      	mov	r4, r3
 8008566:	4613      	mov	r3, r2
 8008568:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800856a:	c407      	stmia	r4!, {r0, r1, r2}
 800856c:	8023      	strh	r3, [r4, #0]
 800856e:	e024      	b.n	80085ba <main+0x232>
 8008570:	20000188 	.word	0x20000188
 8008574:	20000e08 	.word	0x20000e08
 8008578:	20000fb0 	.word	0x20000fb0
 800857c:	20000ee8 	.word	0x20000ee8
 8008580:	40021000 	.word	0x40021000
 8008584:	e000ed00 	.word	0xe000ed00
 8008588:	20000d60 	.word	0x20000d60
 800858c:	20000b50 	.word	0x20000b50
 8008590:	20000b0c 	.word	0x20000b0c
 8008594:	200009f4 	.word	0x200009f4
 8008598:	0800d448 	.word	0x0800d448
 800859c:	0800d458 	.word	0x0800d458
		} else {
			accel8l = (int8_t)buf[0];
 80085a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	f887 31da 	strb.w	r3, [r7, #474]	; 0x1da
			sprintf((char*)accel_char, "%u m\r\n", (int)accel8l);
 80085aa:	f897 21da 	ldrb.w	r2, [r7, #474]	; 0x1da
 80085ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80085b2:	49c6      	ldr	r1, [pc, #792]	; (80088cc <main+0x544>)
 80085b4:	4618      	mov	r0, r3
 80085b6:	f003 fb15 	bl	800bbe4 <siprintf>
  //					}
  //
  //				}

	// --- TIMERS ----------------------------------------------------
	TIM9->CCR1 = blink_duration;
 80085ba:	4ac5      	ldr	r2, [pc, #788]	; (80088d0 <main+0x548>)
 80085bc:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80085c0:	6353      	str	r3, [r2, #52]	; 0x34
	TIM9->CCR2 = blink_duration;
 80085c2:	4ac3      	ldr	r2, [pc, #780]	; (80088d0 <main+0x548>)
 80085c4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80085c8:	6393      	str	r3, [r2, #56]	; 0x38

	// --- GPIO ----------------------------------------------------

	GPIOE->BSRR = GPIO_PIN_4; //switches LD2
 80085ca:	4bc2      	ldr	r3, [pc, #776]	; (80088d4 <main+0x54c>)
 80085cc:	2210      	movs	r2, #16
 80085ce:	619a      	str	r2, [r3, #24]




	playSound( 2, 100, 40);
 80085d0:	2228      	movs	r2, #40	; 0x28
 80085d2:	2164      	movs	r1, #100	; 0x64
 80085d4:	2002      	movs	r0, #2
 80085d6:	f001 fec1 	bl	800a35c <playSound>
	playSound( 1, 100, 80);
 80085da:	2250      	movs	r2, #80	; 0x50
 80085dc:	2164      	movs	r1, #100	; 0x64
 80085de:	2001      	movs	r0, #1
 80085e0:	f001 febc 	bl	800a35c <playSound>
	HAL_Delay(100); // So the system stops vibrating
 80085e4:	2064      	movs	r0, #100	; 0x64
 80085e6:	f7f8 fd2b 	bl	8001040 <HAL_Delay>




	// --- ROTATION SENSOR INIT ----------------------------------------------------
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL );
 80085ea:	213c      	movs	r1, #60	; 0x3c
 80085ec:	48ba      	ldr	r0, [pc, #744]	; (80088d8 <main+0x550>)
 80085ee:	f7fd fc4c 	bl	8005e8a <HAL_TIM_Encoder_Start_IT>

	uint8_t spi_address_8[2];
	uint8_t spi_value_8[2];

	// --- set ABI and enable PWM
	spi_address_8[1]= 0x00;
 80085f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80085f6:	2200      	movs	r2, #0
 80085f8:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0x18;
 80085fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80085fe:	2218      	movs	r2, #24
 8008600:	701a      	strb	r2, [r3, #0]
	spi_value_8[1]= 0x80;
 8008602:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008606:	2280      	movs	r2, #128	; 0x80
 8008608:	705a      	strb	r2, [r3, #1]
	spi_value_8[0]= 0x80;
 800860a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800860e:	2280      	movs	r2, #128	; 0x80
 8008610:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 8008612:	f001 fe8b 	bl	800a32c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008616:	2200      	movs	r2, #0
 8008618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800861c:	48af      	ldr	r0, [pc, #700]	; (80088dc <main+0x554>)
 800861e:	f7fa fc7b 	bl	8002f18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008622:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8008626:	2301      	movs	r3, #1
 8008628:	2201      	movs	r2, #1
 800862a:	48ad      	ldr	r0, [pc, #692]	; (80088e0 <main+0x558>)
 800862c:	f7fc fbfd 	bl	8004e2a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008630:	2201      	movs	r2, #1
 8008632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008636:	48a9      	ldr	r0, [pc, #676]	; (80088dc <main+0x554>)
 8008638:	f7fa fc6e 	bl	8002f18 <HAL_GPIO_WritePin>
	delay_SPI();
 800863c:	f001 fe76 	bl	800a32c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008640:	2200      	movs	r2, #0
 8008642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008646:	48a5      	ldr	r0, [pc, #660]	; (80088dc <main+0x554>)
 8008648:	f7fa fc66 	bl	8002f18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 800864c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008650:	2301      	movs	r3, #1
 8008652:	2201      	movs	r2, #1
 8008654:	48a2      	ldr	r0, [pc, #648]	; (80088e0 <main+0x558>)
 8008656:	f7fc fbe8 	bl	8004e2a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 800865a:	2201      	movs	r2, #1
 800865c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008660:	489e      	ldr	r0, [pc, #632]	; (80088dc <main+0x554>)
 8008662:	f7fa fc59 	bl	8002f18 <HAL_GPIO_WritePin>

	// --- set steps 2000steps 500 pulses
	spi_address_8[1]= 0x80;
 8008666:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800866a:	2280      	movs	r2, #128	; 0x80
 800866c:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0x19;
 800866e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008672:	2219      	movs	r2, #25
 8008674:	701a      	strb	r2, [r3, #0]
	//address = AS_ADDR_SETTINGS2 | AS_WRITE ; // 0x8019
	//value = 0x0020 | AS_ODD; // 0x8020
	//value = 0x00E0 | AS_ODD;
	spi_value_8[1]= 0x80;
 8008676:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800867a:	2280      	movs	r2, #128	; 0x80
 800867c:	705a      	strb	r2, [r3, #1]
	spi_value_8[0]= 0x20;
 800867e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008682:	2220      	movs	r2, #32
 8008684:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 8008686:	f001 fe51 	bl	800a32c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 800868a:	2200      	movs	r2, #0
 800868c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008690:	4892      	ldr	r0, [pc, #584]	; (80088dc <main+0x554>)
 8008692:	f7fa fc41 	bl	8002f18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008696:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800869a:	2301      	movs	r3, #1
 800869c:	2201      	movs	r2, #1
 800869e:	4890      	ldr	r0, [pc, #576]	; (80088e0 <main+0x558>)
 80086a0:	f7fc fbc3 	bl	8004e2a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80086a4:	2201      	movs	r2, #1
 80086a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086aa:	488c      	ldr	r0, [pc, #560]	; (80088dc <main+0x554>)
 80086ac:	f7fa fc34 	bl	8002f18 <HAL_GPIO_WritePin>
	delay_SPI();
 80086b0:	f001 fe3c 	bl	800a32c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80086b4:	2200      	movs	r2, #0
 80086b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086ba:	4888      	ldr	r0, [pc, #544]	; (80088dc <main+0x554>)
 80086bc:	f7fa fc2c 	bl	8002f18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 80086c0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80086c4:	2301      	movs	r3, #1
 80086c6:	2201      	movs	r2, #1
 80086c8:	4885      	ldr	r0, [pc, #532]	; (80088e0 <main+0x558>)
 80086ca:	f7fc fbae 	bl	8004e2a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80086ce:	2201      	movs	r2, #1
 80086d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086d4:	4881      	ldr	r0, [pc, #516]	; (80088dc <main+0x554>)
 80086d6:	f7fa fc1f 	bl	8002f18 <HAL_GPIO_WritePin>

	// --- read angle
	HAL_Delay(1);
 80086da:	2001      	movs	r0, #1
 80086dc:	f7f8 fcb0 	bl	8001040 <HAL_Delay>

	uint8_t angle8[2];
	uint16_t angle;

	//for (int i=0; i<4; i++)
	spi_address_8[1]= 0x7F;
 80086e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80086e4:	227f      	movs	r2, #127	; 0x7f
 80086e6:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0xFE;
 80086e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80086ec:	22fe      	movs	r2, #254	; 0xfe
 80086ee:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 80086f0:	f001 fe1c 	bl	800a32c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80086f4:	2200      	movs	r2, #0
 80086f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086fa:	4878      	ldr	r0, [pc, #480]	; (80088dc <main+0x554>)
 80086fc:	f7fa fc0c 	bl	8002f18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008700:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8008704:	2301      	movs	r3, #1
 8008706:	2201      	movs	r2, #1
 8008708:	4875      	ldr	r0, [pc, #468]	; (80088e0 <main+0x558>)
 800870a:	f7fc fb8e 	bl	8004e2a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 800870e:	2201      	movs	r2, #1
 8008710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008714:	4871      	ldr	r0, [pc, #452]	; (80088dc <main+0x554>)
 8008716:	f7fa fbff 	bl	8002f18 <HAL_GPIO_WritePin>
	delay_SPI();
 800871a:	f001 fe07 	bl	800a32c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 800871e:	2200      	movs	r2, #0
 8008720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008724:	486d      	ldr	r0, [pc, #436]	; (80088dc <main+0x554>)
 8008726:	f7fa fbf7 	bl	8002f18 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, (uint8_t *)&angle8, 1, 1);
 800872a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800872e:	2301      	movs	r3, #1
 8008730:	2201      	movs	r2, #1
 8008732:	486b      	ldr	r0, [pc, #428]	; (80088e0 <main+0x558>)
 8008734:	f7fc fcad 	bl	8005092 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008738:	2201      	movs	r2, #1
 800873a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800873e:	4867      	ldr	r0, [pc, #412]	; (80088dc <main+0x554>)
 8008740:	f7fa fbea 	bl	8002f18 <HAL_GPIO_WritePin>

	angle = (uint16_t) angle8[0] | (uint16_t) angle8[1] << 8U;
 8008744:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	b21a      	sxth	r2, r3
 800874c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008750:	785b      	ldrb	r3, [r3, #1]
 8008752:	021b      	lsls	r3, r3, #8
 8008754:	b21b      	sxth	r3, r3
 8008756:	4313      	orrs	r3, r2
 8008758:	b21b      	sxth	r3, r3
 800875a:	f8a7 31d8 	strh.w	r3, [r7, #472]	; 0x1d8
	angle &= AS_DATA_MASK;
 800875e:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	; 0x1d8
 8008762:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008766:	f8a7 31d8 	strh.w	r3, [r7, #472]	; 0x1d8


	// --- ROTATION SENSOR 0 POINT SETTING ----------------------------------------------------
	//angle &= AS_DATA_MASK;
	EncVal = (uint16_t) ((float)angle /16384.0 * 2000.0);
 800876a:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	; 0x1d8
 800876e:	ee07 3a90 	vmov	s15, r3
 8008772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008776:	ee17 0a90 	vmov	r0, s15
 800877a:	f7f7 fee5 	bl	8000548 <__aeabi_f2d>
 800877e:	f04f 0200 	mov.w	r2, #0
 8008782:	4b58      	ldr	r3, [pc, #352]	; (80088e4 <main+0x55c>)
 8008784:	f7f8 f862 	bl	800084c <__aeabi_ddiv>
 8008788:	4603      	mov	r3, r0
 800878a:	460c      	mov	r4, r1
 800878c:	4618      	mov	r0, r3
 800878e:	4621      	mov	r1, r4
 8008790:	f04f 0200 	mov.w	r2, #0
 8008794:	4b54      	ldr	r3, [pc, #336]	; (80088e8 <main+0x560>)
 8008796:	f7f7 ff2f 	bl	80005f8 <__aeabi_dmul>
 800879a:	4603      	mov	r3, r0
 800879c:	460c      	mov	r4, r1
 800879e:	4618      	mov	r0, r3
 80087a0:	4621      	mov	r1, r4
 80087a2:	f7f8 f9eb 	bl	8000b7c <__aeabi_d2uiz>
 80087a6:	4603      	mov	r3, r0
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	b21a      	sxth	r2, r3
 80087ac:	4b4f      	ldr	r3, [pc, #316]	; (80088ec <main+0x564>)
 80087ae:	801a      	strh	r2, [r3, #0]
	last_EncVal = EncVal;
 80087b0:	4b4e      	ldr	r3, [pc, #312]	; (80088ec <main+0x564>)
 80087b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80087b6:	4b4e      	ldr	r3, [pc, #312]	; (80088f0 <main+0x568>)
 80087b8:	801a      	strh	r2, [r3, #0]
	last_EncVal_v = EncVal;
 80087ba:	4b4c      	ldr	r3, [pc, #304]	; (80088ec <main+0x564>)
 80087bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80087c0:	4b4c      	ldr	r3, [pc, #304]	; (80088f4 <main+0x56c>)
 80087c2:	801a      	strh	r2, [r3, #0]
	TIM8->CNT = EncVal;
 80087c4:	4b49      	ldr	r3, [pc, #292]	; (80088ec <main+0x564>)
 80087c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80087ca:	4b4b      	ldr	r3, [pc, #300]	; (80088f8 <main+0x570>)
 80087cc:	625a      	str	r2, [r3, #36]	; 0x24
//	EncVal = TIM8->CNT;//takes 200ns
//	TIM1->CCR1 = 0;
//	phase = (float) EncVal * 0.02199 ;

	// --- UART DMA
	HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMAUSARTTransferComplete);
 80087ce:	4a4b      	ldr	r2, [pc, #300]	; (80088fc <main+0x574>)
 80087d0:	2100      	movs	r1, #0
 80087d2:	484b      	ldr	r0, [pc, #300]	; (8008900 <main+0x578>)
 80087d4:	f7fa f8d4 	bl	8002980 <HAL_DMA_RegisterCallback>


	//HAL_TIM_RegisterCallback(&htim8, HAL_TIM_IC_CAPTURE_CB_ID, &EncoderStepCallback );

	// --- ADC DMA
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, 30); // this is the only one working // the length must be multiple of channels otherwise I observed mess in order - even like 2 of one and lots of mess
 80087d8:	221e      	movs	r2, #30
 80087da:	494a      	ldr	r1, [pc, #296]	; (8008904 <main+0x57c>)
 80087dc:	484a      	ldr	r0, [pc, #296]	; (8008908 <main+0x580>)
 80087de:	f7f8 fdd5 	bl	800138c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, 30); // TODO enabling this only leads to no change all values stay zero
 80087e2:	221e      	movs	r2, #30
 80087e4:	4949      	ldr	r1, [pc, #292]	; (800890c <main+0x584>)
 80087e6:	484a      	ldr	r0, [pc, #296]	; (8008910 <main+0x588>)
 80087e8:	f7f8 fdd0 	bl	800138c <HAL_ADC_Start_DMA>
 	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, 30); // TODO enabling this breaks transmission entirely
 80087ec:	221e      	movs	r2, #30
 80087ee:	4949      	ldr	r1, [pc, #292]	; (8008914 <main+0x58c>)
 80087f0:	4849      	ldr	r0, [pc, #292]	; (8008918 <main+0x590>)
 80087f2:	f7f8 fdcb 	bl	800138c <HAL_ADC_Start_DMA>


	HAL_ADCEx_InjectedStart (&hadc1);
 80087f6:	4844      	ldr	r0, [pc, #272]	; (8008908 <main+0x580>)
 80087f8:	f7f9 f96e 	bl	8001ad8 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc2);
 80087fc:	4844      	ldr	r0, [pc, #272]	; (8008910 <main+0x588>)
 80087fe:	f7f9 f96b 	bl	8001ad8 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc3); // again this seems to break  the full loop
 8008802:	4845      	ldr	r0, [pc, #276]	; (8008918 <main+0x590>)
 8008804:	f7f9 f968 	bl	8001ad8 <HAL_ADCEx_InjectedStart>
//
//


	sprintf((char*)buf, "\r\n\r\nWELCOME TO MUSCLEmaster \r\n\r\nangle: %d EncVal %d \r\nangle: %u EncVal %u \r\n\r\n",
 8008808:	f8b7 11d8 	ldrh.w	r1, [r7, #472]	; 0x1d8
 800880c:	4b37      	ldr	r3, [pc, #220]	; (80088ec <main+0x564>)
 800880e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008812:	461c      	mov	r4, r3
 8008814:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	; 0x1d8
 8008818:	4a34      	ldr	r2, [pc, #208]	; (80088ec <main+0x564>)
 800881a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800881e:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8008822:	9201      	str	r2, [sp, #4]
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	4623      	mov	r3, r4
 8008828:	460a      	mov	r2, r1
 800882a:	493c      	ldr	r1, [pc, #240]	; (800891c <main+0x594>)
 800882c:	f003 f9da 	bl	800bbe4 <siprintf>
			angle, EncVal ,
			angle, EncVal );
	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 8008830:	4b3b      	ldr	r3, [pc, #236]	; (8008920 <main+0x598>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	695a      	ldr	r2, [r3, #20]
 8008836:	4b3a      	ldr	r3, [pc, #232]	; (8008920 <main+0x598>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800883e:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 8008840:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8008844:	4b36      	ldr	r3, [pc, #216]	; (8008920 <main+0x598>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3304      	adds	r3, #4
 800884a:	461d      	mov	r5, r3
 800884c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008850:	4618      	mov	r0, r3
 8008852:	f7f7 fcbd 	bl	80001d0 <strlen>
 8008856:	4603      	mov	r3, r0
 8008858:	462a      	mov	r2, r5
 800885a:	4621      	mov	r1, r4
 800885c:	4828      	ldr	r0, [pc, #160]	; (8008900 <main+0x578>)
 800885e:	f7f9 fe8b 	bl	8002578 <HAL_DMA_Start_IT>

	HAL_Delay(10); //some delay needed othwise the first print statement in while will overwrite
 8008862:	200a      	movs	r0, #10
 8008864:	f7f8 fbec 	bl	8001040 <HAL_Delay>
	//HAL_TIM_Base_Start(&htim3);


	//HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);

	mode_of_operation = 1;
 8008868:	4b2e      	ldr	r3, [pc, #184]	; (8008924 <main+0x59c>)
 800886a:	2201      	movs	r2, #1
 800886c:	701a      	strb	r2, [r3, #0]
		// -------------------------------------------------------------
  	//HAL_Delay(1);
  	//debug2_out_GPIO_Port->BSRR = debug2_out_Pin; //takes 60ns == 5 clock cycles
  	//debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin << 16U;

  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 800886e:	4b1b      	ldr	r3, [pc, #108]	; (80088dc <main+0x554>)
 8008870:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008874:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8008876:	4b19      	ldr	r3, [pc, #100]	; (80088dc <main+0x554>)
 8008878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800887c:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 800887e:	4b17      	ldr	r3, [pc, #92]	; (80088dc <main+0x554>)
 8008880:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008884:	619a      	str	r2, [r3, #24]
		debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8008886:	4b15      	ldr	r3, [pc, #84]	; (80088dc <main+0x554>)
 8008888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800888c:	619a      	str	r2, [r3, #24]

	  // -------------------------------------------------------------
	  // --- SLOW PROCESS ----------------------------------------------------
	  // -------------------------------------------------------------

	  if (i_fast%fast2slow == 0){
 800888e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8008892:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8008896:	fbb3 f2f2 	udiv	r2, r3, r2
 800889a:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 800889e:	fb01 f202 	mul.w	r2, r1, r2
 80088a2:	1a9b      	subs	r3, r3, r2
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f040 82fd 	bne.w	8008ea4 <main+0xb1c>

	  	// --- GPIO ----------------------------------------------------
	  	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 80088aa:	2110      	movs	r1, #16
 80088ac:	4809      	ldr	r0, [pc, #36]	; (80088d4 <main+0x54c>)
 80088ae:	f7fa fb4c 	bl	8002f4a <HAL_GPIO_TogglePin>

			// --- UART ----------------------------------------------------


			HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 80088b2:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 80088b6:	2201      	movs	r2, #1
 80088b8:	4619      	mov	r1, r3
 80088ba:	4819      	ldr	r0, [pc, #100]	; (8008920 <main+0x598>)
 80088bc:	f7fe fc94 	bl	80071e8 <HAL_UART_Receive_IT>


			switch(ch){
 80088c0:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	3b50      	subs	r3, #80	; 0x50
 80088c8:	e02e      	b.n	8008928 <main+0x5a0>
 80088ca:	bf00      	nop
 80088cc:	0800d468 	.word	0x0800d468
 80088d0:	40014000 	.word	0x40014000
 80088d4:	40021000 	.word	0x40021000
 80088d8:	200004d0 	.word	0x200004d0
 80088dc:	40020c00 	.word	0x40020c00
 80088e0:	20000130 	.word	0x20000130
 80088e4:	40d00000 	.word	0x40d00000
 80088e8:	409f4000 	.word	0x409f4000
 80088ec:	20000c9c 	.word	0x20000c9c
 80088f0:	20000a48 	.word	0x20000a48
 80088f4:	20000b4c 	.word	0x20000b4c
 80088f8:	40010400 	.word	0x40010400
 80088fc:	0800a4a5 	.word	0x0800a4a5
 8008900:	20000aac 	.word	0x20000aac
 8008904:	20000b90 	.word	0x20000b90
 8008908:	20000bcc 	.word	0x20000bcc
 800890c:	20000eac 	.word	0x20000eac
 8008910:	20000550 	.word	0x20000550
 8008914:	20000dcc 	.word	0x20000dcc
 8008918:	20000c14 	.word	0x20000c14
 800891c:	0800d470 	.word	0x0800d470
 8008920:	20000510 	.word	0x20000510
 8008924:	200000ec 	.word	0x200000ec
 8008928:	2b2a      	cmp	r3, #42	; 0x2a
 800892a:	f200 8117 	bhi.w	8008b5c <main+0x7d4>
 800892e:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <main+0x5ac>)
 8008930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008934:	08008b29 	.word	0x08008b29
 8008938:	08008b5d 	.word	0x08008b5d
 800893c:	08008b5d 	.word	0x08008b5d
 8008940:	08008b23 	.word	0x08008b23
 8008944:	08008b5d 	.word	0x08008b5d
 8008948:	08008b5d 	.word	0x08008b5d
 800894c:	08008b5d 	.word	0x08008b5d
 8008950:	08008b5d 	.word	0x08008b5d
 8008954:	08008b5d 	.word	0x08008b5d
 8008958:	08008b5d 	.word	0x08008b5d
 800895c:	08008b5d 	.word	0x08008b5d
 8008960:	08008b5d 	.word	0x08008b5d
 8008964:	08008b5d 	.word	0x08008b5d
 8008968:	08008b5d 	.word	0x08008b5d
 800896c:	08008b5d 	.word	0x08008b5d
 8008970:	08008b5d 	.word	0x08008b5d
 8008974:	08008b5d 	.word	0x08008b5d
 8008978:	08008a09 	.word	0x08008a09
 800897c:	08008b5d 	.word	0x08008b5d
 8008980:	08008b5d 	.word	0x08008b5d
 8008984:	08008a31 	.word	0x08008a31
 8008988:	08008b5d 	.word	0x08008b5d
 800898c:	08008a71 	.word	0x08008a71
 8008990:	08008a61 	.word	0x08008a61
 8008994:	08008a69 	.word	0x08008a69
 8008998:	08008b5d 	.word	0x08008b5d
 800899c:	08008abb 	.word	0x08008abb
 80089a0:	08008b5d 	.word	0x08008b5d
 80089a4:	08008b0d 	.word	0x08008b0d
 80089a8:	08008b5d 	.word	0x08008b5d
 80089ac:	08008b5d 	.word	0x08008b5d
 80089b0:	08008b03 	.word	0x08008b03
 80089b4:	08008ae3 	.word	0x08008ae3
 80089b8:	08008b5d 	.word	0x08008b5d
 80089bc:	08008a7b 	.word	0x08008a7b
 80089c0:	080089f3 	.word	0x080089f3
 80089c4:	08008a59 	.word	0x08008a59
 80089c8:	08008a93 	.word	0x08008a93
 80089cc:	08008b5d 	.word	0x08008b5d
 80089d0:	080089e1 	.word	0x080089e1
 80089d4:	08008b5d 	.word	0x08008b5d
 80089d8:	08008b5d 	.word	0x08008b5d
 80089dc:	08008a87 	.word	0x08008a87
				case 'w':
					amp *= 2;
 80089e0:	4b57      	ldr	r3, [pc, #348]	; (8008b40 <main+0x7b8>)
 80089e2:	edd3 7a00 	vldr	s15, [r3]
 80089e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80089ea:	4b55      	ldr	r3, [pc, #340]	; (8008b40 <main+0x7b8>)
 80089ec:	edc3 7a00 	vstr	s15, [r3]
					break;
 80089f0:	e0b8      	b.n	8008b64 <main+0x7dc>
				case 's':
					amp /= 2;
 80089f2:	4b53      	ldr	r3, [pc, #332]	; (8008b40 <main+0x7b8>)
 80089f4:	ed93 7a00 	vldr	s14, [r3]
 80089f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80089fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008a00:	4b4f      	ldr	r3, [pc, #316]	; (8008b40 <main+0x7b8>)
 8008a02:	edc3 7a00 	vstr	s15, [r3]
					break;
 8008a06:	e0ad      	b.n	8008b64 <main+0x7dc>
				case 'a':
					phase_shift += 0.05;
 8008a08:	4b4e      	ldr	r3, [pc, #312]	; (8008b44 <main+0x7bc>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7f7 fd9b 	bl	8000548 <__aeabi_f2d>
 8008a12:	a347      	add	r3, pc, #284	; (adr r3, 8008b30 <main+0x7a8>)
 8008a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a18:	f7f7 fc38 	bl	800028c <__adddf3>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	4618      	mov	r0, r3
 8008a22:	4621      	mov	r1, r4
 8008a24:	f7f8 f8ca 	bl	8000bbc <__aeabi_d2f>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	4b46      	ldr	r3, [pc, #280]	; (8008b44 <main+0x7bc>)
 8008a2c:	601a      	str	r2, [r3, #0]
					break;
 8008a2e:	e099      	b.n	8008b64 <main+0x7dc>
				case 'd':
					phase_shift -= 0.05;
 8008a30:	4b44      	ldr	r3, [pc, #272]	; (8008b44 <main+0x7bc>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7f7 fd87 	bl	8000548 <__aeabi_f2d>
 8008a3a:	a33d      	add	r3, pc, #244	; (adr r3, 8008b30 <main+0x7a8>)
 8008a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a40:	f7f7 fc22 	bl	8000288 <__aeabi_dsub>
 8008a44:	4603      	mov	r3, r0
 8008a46:	460c      	mov	r4, r1
 8008a48:	4618      	mov	r0, r3
 8008a4a:	4621      	mov	r1, r4
 8008a4c:	f7f8 f8b6 	bl	8000bbc <__aeabi_d2f>
 8008a50:	4602      	mov	r2, r0
 8008a52:	4b3c      	ldr	r3, [pc, #240]	; (8008b44 <main+0x7bc>)
 8008a54:	601a      	str	r2, [r3, #0]
					break;
 8008a56:	e085      	b.n	8008b64 <main+0x7dc>
				case 't':
					run_motor = 1;
 8008a58:	4b3b      	ldr	r3, [pc, #236]	; (8008b48 <main+0x7c0>)
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	601a      	str	r2, [r3, #0]
					break;
 8008a5e:	e081      	b.n	8008b64 <main+0x7dc>
				case 'g':
					run_motor = 0;
 8008a60:	4b39      	ldr	r3, [pc, #228]	; (8008b48 <main+0x7c0>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]
					break;
 8008a66:	e07d      	b.n	8008b64 <main+0x7dc>
				case 'h':
					direction = 1;
 8008a68:	4b38      	ldr	r3, [pc, #224]	; (8008b4c <main+0x7c4>)
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	601a      	str	r2, [r3, #0]
					break;
 8008a6e:	e079      	b.n	8008b64 <main+0x7dc>
				case 'f':
					direction = -1;
 8008a70:	4b36      	ldr	r3, [pc, #216]	; (8008b4c <main+0x7c4>)
 8008a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a76:	601a      	str	r2, [r3, #0]
					break;
 8008a78:	e074      	b.n	8008b64 <main+0x7dc>
				case 'r':
					direction *= -1;
 8008a7a:	4b34      	ldr	r3, [pc, #208]	; (8008b4c <main+0x7c4>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	425b      	negs	r3, r3
 8008a80:	4a32      	ldr	r2, [pc, #200]	; (8008b4c <main+0x7c4>)
 8008a82:	6013      	str	r3, [r2, #0]
					break;
 8008a84:	e06e      	b.n	8008b64 <main+0x7dc>
				case 'z':
					playSound( 1, 20, 100);
 8008a86:	2264      	movs	r2, #100	; 0x64
 8008a88:	2114      	movs	r1, #20
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	f001 fc66 	bl	800a35c <playSound>
					break;
 8008a90:	e068      	b.n	8008b64 <main+0x7dc>
				case 'u':
					stiffness += 0.001;
 8008a92:	4b2f      	ldr	r3, [pc, #188]	; (8008b50 <main+0x7c8>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7f7 fd56 	bl	8000548 <__aeabi_f2d>
 8008a9c:	a326      	add	r3, pc, #152	; (adr r3, 8008b38 <main+0x7b0>)
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	f7f7 fbf3 	bl	800028c <__adddf3>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	4618      	mov	r0, r3
 8008aac:	4621      	mov	r1, r4
 8008aae:	f7f8 f885 	bl	8000bbc <__aeabi_d2f>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	4b26      	ldr	r3, [pc, #152]	; (8008b50 <main+0x7c8>)
 8008ab6:	601a      	str	r2, [r3, #0]
					break;
 8008ab8:	e054      	b.n	8008b64 <main+0x7dc>
				case 'j':
					stiffness -= 0.001;
 8008aba:	4b25      	ldr	r3, [pc, #148]	; (8008b50 <main+0x7c8>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7f7 fd42 	bl	8000548 <__aeabi_f2d>
 8008ac4:	a31c      	add	r3, pc, #112	; (adr r3, 8008b38 <main+0x7b0>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f7f7 fbdd 	bl	8000288 <__aeabi_dsub>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	f7f8 f871 	bl	8000bbc <__aeabi_d2f>
 8008ada:	4602      	mov	r2, r0
 8008adc:	4b1c      	ldr	r3, [pc, #112]	; (8008b50 <main+0x7c8>)
 8008ade:	601a      	str	r2, [r3, #0]
					break;
 8008ae0:	e040      	b.n	8008b64 <main+0x7dc>
				case 'p':
					//print2uart = false;
					print2uart = !print2uart;
 8008ae2:	4b1c      	ldr	r3, [pc, #112]	; (8008b54 <main+0x7cc>)
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	bf14      	ite	ne
 8008aea:	2301      	movne	r3, #1
 8008aec:	2300      	moveq	r3, #0
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	f083 0301 	eor.w	r3, r3, #1
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	4b15      	ldr	r3, [pc, #84]	; (8008b54 <main+0x7cc>)
 8008afe:	701a      	strb	r2, [r3, #0]
					break;
 8008b00:	e030      	b.n	8008b64 <main+0x7dc>
				case 'o':
					//HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
					EN_GATE_GPIO_Port->BSRR = (uint32_t)EN_GATE_Pin << 16U;
 8008b02:	4b15      	ldr	r3, [pc, #84]	; (8008b58 <main+0x7d0>)
 8008b04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008b08:	619a      	str	r2, [r3, #24]
					break;
 8008b0a:	e02b      	b.n	8008b64 <main+0x7dc>
				case 'l':
					HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008b12:	4811      	ldr	r0, [pc, #68]	; (8008b58 <main+0x7d0>)
 8008b14:	f7fa fa00 	bl	8002f18 <HAL_GPIO_WritePin>
					EN_GATE_GPIO_Port->BSRR = EN_GATE_Pin ;
 8008b18:	4b0f      	ldr	r3, [pc, #60]	; (8008b58 <main+0x7d0>)
 8008b1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b1e:	619a      	str	r2, [r3, #24]
					break;
 8008b20:	e020      	b.n	8008b64 <main+0x7dc>
				case 'S':
					step_through_pole_angles();
 8008b22:	f001 fb0d 	bl	800a140 <step_through_pole_angles>
					break;
 8008b26:	e01d      	b.n	8008b64 <main+0x7dc>
				case 'P':
					step_through_pwm_percent();
 8008b28:	f001 fbc8 	bl	800a2bc <step_through_pwm_percent>
					break;
 8008b2c:	e01a      	b.n	8008b64 <main+0x7dc>
 8008b2e:	bf00      	nop
 8008b30:	9999999a 	.word	0x9999999a
 8008b34:	3fa99999 	.word	0x3fa99999
 8008b38:	d2f1a9fc 	.word	0xd2f1a9fc
 8008b3c:	3f50624d 	.word	0x3f50624d
 8008b40:	20000010 	.word	0x20000010
 8008b44:	2000001c 	.word	0x2000001c
 8008b48:	20000014 	.word	0x20000014
 8008b4c:	20000018 	.word	0x20000018
 8008b50:	200000b0 	.word	0x200000b0
 8008b54:	20000028 	.word	0x20000028
 8008b58:	40021000 	.word	0x40021000
				default:
					ch='q';
 8008b5c:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8008b60:	2271      	movs	r2, #113	; 0x71
 8008b62:	701a      	strb	r2, [r3, #0]
			}

			//HAL_ADCEx_InjectedStart (&hadc1);
			//HAL_ADCEx_InjectedPollForConversion (&hadc1, 1);

			uint32_t val_I = HAL_ADCEx_InjectedGetValue (&hadc1, 1);
 8008b64:	2101      	movs	r1, #1
 8008b66:	48b4      	ldr	r0, [pc, #720]	; (8008e38 <main+0xab0>)
 8008b68:	f7f9 f874 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8008b6c:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
			uint32_t val_ASENSE = HAL_ADCEx_InjectedGetValue (&hadc1, 2);
 8008b70:	2102      	movs	r1, #2
 8008b72:	48b1      	ldr	r0, [pc, #708]	; (8008e38 <main+0xab0>)
 8008b74:	f7f9 f86e 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8008b78:	f8c7 01d0 	str.w	r0, [r7, #464]	; 0x1d0
			uint32_t val_STRAIN0 = HAL_ADCEx_InjectedGetValue (&hadc1, 3);
 8008b7c:	2103      	movs	r1, #3
 8008b7e:	48ae      	ldr	r0, [pc, #696]	; (8008e38 <main+0xab0>)
 8008b80:	f7f9 f868 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8008b84:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
			uint32_t val_M0_TEMP = HAL_ADCEx_InjectedGetValue (&hadc1, 4);
 8008b88:	2104      	movs	r1, #4
 8008b8a:	48ab      	ldr	r0, [pc, #684]	; (8008e38 <main+0xab0>)
 8008b8c:	f7f9 f862 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8008b90:	f8c7 01c8 	str.w	r0, [r7, #456]	; 0x1c8

			uint32_t val_SO1 = HAL_ADCEx_InjectedGetValue (&hadc2, 1);
 8008b94:	2101      	movs	r1, #1
 8008b96:	48a9      	ldr	r0, [pc, #676]	; (8008e3c <main+0xab4>)
 8008b98:	f7f9 f85c 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8008b9c:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
			uint32_t val_BSENSE = HAL_ADCEx_InjectedGetValue (&hadc2, 2);
 8008ba0:	2102      	movs	r1, #2
 8008ba2:	48a6      	ldr	r0, [pc, #664]	; (8008e3c <main+0xab4>)
 8008ba4:	f7f9 f856 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8008ba8:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
			uint32_t val_STRAIN1 = HAL_ADCEx_InjectedGetValue (&hadc2, 3);
 8008bac:	2103      	movs	r1, #3
 8008bae:	48a3      	ldr	r0, [pc, #652]	; (8008e3c <main+0xab4>)
 8008bb0:	f7f9 f850 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8008bb4:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
			uint32_t val_TEMP = HAL_ADCEx_InjectedGetValue (&hadc2, 4);
 8008bb8:	2104      	movs	r1, #4
 8008bba:	48a0      	ldr	r0, [pc, #640]	; (8008e3c <main+0xab4>)
 8008bbc:	f7f9 f84a 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8008bc0:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8

			uint32_t val_SO2 = HAL_ADCEx_InjectedGetValue (&hadc3, 1);
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	489e      	ldr	r0, [pc, #632]	; (8008e40 <main+0xab8>)
 8008bc8:	f7f9 f844 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8008bcc:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
			uint32_t val_CSENSE = HAL_ADCEx_InjectedGetValue (&hadc3, 2);
 8008bd0:	2102      	movs	r1, #2
 8008bd2:	489b      	ldr	r0, [pc, #620]	; (8008e40 <main+0xab8>)
 8008bd4:	f7f9 f83e 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 8008bd8:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0

//			// --- read angle
				//uint8_t spi_address_8[2];
				//uint8_t angle8[2];
				spi_address_8[1]= 0x7F;
 8008bdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008be0:	227f      	movs	r2, #127	; 0x7f
 8008be2:	705a      	strb	r2, [r3, #1]
				spi_address_8[0]= 0xFE;
 8008be4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008be8:	22fe      	movs	r2, #254	; 0xfe
 8008bea:	701a      	strb	r2, [r3, #0]
				//address8 = {0xFE, 0x7F};
				//address = 0x3FFE | AS_READ ;
				delay_SPI();
 8008bec:	f001 fb9e 	bl	800a32c <delay_SPI>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008bf6:	4893      	ldr	r0, [pc, #588]	; (8008e44 <main+0xabc>)
 8008bf8:	f7fa f98e 	bl	8002f18 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008bfc:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8008c00:	2301      	movs	r3, #1
 8008c02:	2201      	movs	r2, #1
 8008c04:	4890      	ldr	r0, [pc, #576]	; (8008e48 <main+0xac0>)
 8008c06:	f7fc f910 	bl	8004e2a <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c10:	488c      	ldr	r0, [pc, #560]	; (8008e44 <main+0xabc>)
 8008c12:	f7fa f981 	bl	8002f18 <HAL_GPIO_WritePin>
				delay_SPI();
 8008c16:	f001 fb89 	bl	800a32c <delay_SPI>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c20:	4888      	ldr	r0, [pc, #544]	; (8008e44 <main+0xabc>)
 8008c22:	f7fa f979 	bl	8002f18 <HAL_GPIO_WritePin>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&angle8, 1, 1);
 8008c26:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	4886      	ldr	r0, [pc, #536]	; (8008e48 <main+0xac0>)
 8008c30:	f7fc fa2f 	bl	8005092 <HAL_SPI_Receive>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008c34:	2201      	movs	r2, #1
 8008c36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c3a:	4882      	ldr	r0, [pc, #520]	; (8008e44 <main+0xabc>)
 8008c3c:	f7fa f96c 	bl	8002f18 <HAL_GPIO_WritePin>
				angle = (uint16_t) angle8[0] | (uint16_t) angle8[1] << 8U;
 8008c40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	b21a      	sxth	r2, r3
 8008c48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008c4c:	785b      	ldrb	r3, [r3, #1]
 8008c4e:	021b      	lsls	r3, r3, #8
 8008c50:	b21b      	sxth	r3, r3
 8008c52:	4313      	orrs	r3, r2
 8008c54:	b21b      	sxth	r3, r3
 8008c56:	f8a7 31d8 	strh.w	r3, [r7, #472]	; 0x1d8
				angle &= AS_DATA_MASK;
 8008c5a:	f8b7 31d8 	ldrh.w	r3, [r7, #472]	; 0x1d8
 8008c5e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008c62:	f8a7 31d8 	strh.w	r3, [r7, #472]	; 0x1d8

				uint32_t time10mus = TIM5->CNT;
 8008c66:	4b79      	ldr	r3, [pc, #484]	; (8008e4c <main+0xac4>)
 8008c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

				if (print2uart){
 8008c6e:	4b78      	ldr	r3, [pc, #480]	; (8008e50 <main+0xac8>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 810d 	beq.w	8008e92 <main+0xb0a>

				//                   0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008c78:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	469c      	mov	ip, r3
						ch, (int)(av_start_angle*1000), time10mus, rotation_counter, angle, (uint32_t)angle, //(int)(amp*100), (int)(phase_shift*100),
 8008c80:	4b74      	ldr	r3, [pc, #464]	; (8008e54 <main+0xacc>)
 8008c82:	edd3 7a00 	vldr	s15, [r3]
 8008c86:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8008e58 <main+0xad0>
 8008c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008c8e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8008c92:	4b72      	ldr	r3, [pc, #456]	; (8008e5c <main+0xad4>)
 8008c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c98:	647b      	str	r3, [r7, #68]	; 0x44
 8008c9a:	f8b7 21d8 	ldrh.w	r2, [r7, #472]	; 0x1d8
 8008c9e:	643a      	str	r2, [r7, #64]	; 0x40
 8008ca0:	f8b7 11d8 	ldrh.w	r1, [r7, #472]	; 0x1d8
 8008ca4:	63f9      	str	r1, [r7, #60]	; 0x3c
						//(int)(stiffness*1000),
						(int)(1000*field_phase_shift), (int)(1000*field_phase_shift_pihalf), field_amplitude,
 8008ca6:	4b6e      	ldr	r3, [pc, #440]	; (8008e60 <main+0xad8>)
 8008ca8:	edd3 7a00 	vldr	s15, [r3]
 8008cac:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8008e58 <main+0xad0>
 8008cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008cb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cb8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
						(int)(1000*field_phase_shift), (int)(1000*field_phase_shift_pihalf), field_amplitude,
 8008cbc:	4b69      	ldr	r3, [pc, #420]	; (8008e64 <main+0xadc>)
 8008cbe:	edd3 7a00 	vldr	s15, [r3]
 8008cc2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8008e58 <main+0xad0>
 8008cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008cca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cce:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8008cd2:	4b65      	ldr	r3, [pc, #404]	; (8008e68 <main+0xae0>)
 8008cd4:	6818      	ldr	r0, [r3, #0]
 8008cd6:	6338      	str	r0, [r7, #48]	; 0x30
						(int)(1000*av_velocity),
 8008cd8:	4b64      	ldr	r3, [pc, #400]	; (8008e6c <main+0xae4>)
 8008cda:	edd3 7a00 	vldr	s15, [r3]
 8008cde:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8008e58 <main+0xad0>
 8008ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008ce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8008cee:	4b60      	ldr	r3, [pc, #384]	; (8008e70 <main+0xae8>)
 8008cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cf4:	62bb      	str	r3, [r7, #40]	; 0x28
						EncVal,
						val_I, val_ASENSE, val_STRAIN0, val_M0_TEMP,
						val_SO1, val_BSENSE, val_STRAIN1, val_TEMP,
						val_SO2, val_CSENSE,
						adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4],
 8008cf6:	4b5f      	ldr	r3, [pc, #380]	; (8008e74 <main+0xaec>)
 8008cf8:	881b      	ldrh	r3, [r3, #0]
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008cfa:	627b      	str	r3, [r7, #36]	; 0x24
						adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4],
 8008cfc:	4b5d      	ldr	r3, [pc, #372]	; (8008e74 <main+0xaec>)
 8008cfe:	885b      	ldrh	r3, [r3, #2]
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008d00:	623b      	str	r3, [r7, #32]
						adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4],
 8008d02:	4b5c      	ldr	r3, [pc, #368]	; (8008e74 <main+0xaec>)
 8008d04:	889b      	ldrh	r3, [r3, #4]
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008d06:	61fb      	str	r3, [r7, #28]
						adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4],
 8008d08:	4b5a      	ldr	r3, [pc, #360]	; (8008e74 <main+0xaec>)
 8008d0a:	88db      	ldrh	r3, [r3, #6]
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008d0c:	61bb      	str	r3, [r7, #24]
						adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4],
 8008d0e:	4b59      	ldr	r3, [pc, #356]	; (8008e74 <main+0xaec>)
 8008d10:	891b      	ldrh	r3, [r3, #8]
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008d12:	617b      	str	r3, [r7, #20]
						//adc1_buf[5], adc1_buf[6], adc1_buf[7], adc1_buf[8], adc1_buf[9],
						//adc1_buf[10], adc1_buf[11], adc1_buf[12], adc1_buf[13], adc1_buf[14]);
						adc2_buf[0], adc2_buf[1], adc2_buf[2], adc2_buf[3], adc2_buf[4],
 8008d14:	4b58      	ldr	r3, [pc, #352]	; (8008e78 <main+0xaf0>)
 8008d16:	881b      	ldrh	r3, [r3, #0]
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008d18:	613b      	str	r3, [r7, #16]
						adc2_buf[0], adc2_buf[1], adc2_buf[2], adc2_buf[3], adc2_buf[4],
 8008d1a:	4b57      	ldr	r3, [pc, #348]	; (8008e78 <main+0xaf0>)
 8008d1c:	885b      	ldrh	r3, [r3, #2]
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008d1e:	60fb      	str	r3, [r7, #12]
						adc2_buf[0], adc2_buf[1], adc2_buf[2], adc2_buf[3], adc2_buf[4],
 8008d20:	4b55      	ldr	r3, [pc, #340]	; (8008e78 <main+0xaf0>)
 8008d22:	889b      	ldrh	r3, [r3, #4]
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008d24:	60bb      	str	r3, [r7, #8]
						adc2_buf[0], adc2_buf[1], adc2_buf[2], adc2_buf[3], adc2_buf[4],
 8008d26:	4b54      	ldr	r3, [pc, #336]	; (8008e78 <main+0xaf0>)
 8008d28:	88db      	ldrh	r3, [r3, #6]
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008d2a:	607b      	str	r3, [r7, #4]
						adc2_buf[0], adc2_buf[1], adc2_buf[2], adc2_buf[3], adc2_buf[4],
 8008d2c:	4b52      	ldr	r3, [pc, #328]	; (8008e78 <main+0xaf0>)
 8008d2e:	891b      	ldrh	r3, [r3, #8]
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008d30:	461e      	mov	r6, r3
						adc3_buf[0], adc3_buf[1], adc3_buf[2], adc3_buf[3], adc3_buf[4]);
 8008d32:	4b52      	ldr	r3, [pc, #328]	; (8008e7c <main+0xaf4>)
 8008d34:	881b      	ldrh	r3, [r3, #0]
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008d36:	461d      	mov	r5, r3
						adc3_buf[0], adc3_buf[1], adc3_buf[2], adc3_buf[3], adc3_buf[4]);
 8008d38:	4b50      	ldr	r3, [pc, #320]	; (8008e7c <main+0xaf4>)
 8008d3a:	885b      	ldrh	r3, [r3, #2]
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008d3c:	461c      	mov	r4, r3
						adc3_buf[0], adc3_buf[1], adc3_buf[2], adc3_buf[3], adc3_buf[4]);
 8008d3e:	4b4f      	ldr	r3, [pc, #316]	; (8008e7c <main+0xaf4>)
 8008d40:	889b      	ldrh	r3, [r3, #4]
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008d42:	4619      	mov	r1, r3
						adc3_buf[0], adc3_buf[1], adc3_buf[2], adc3_buf[3], adc3_buf[4]);
 8008d44:	4b4d      	ldr	r3, [pc, #308]	; (8008e7c <main+0xaf4>)
 8008d46:	88db      	ldrh	r3, [r3, #6]
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008d48:	461a      	mov	r2, r3
						adc3_buf[0], adc3_buf[1], adc3_buf[2], adc3_buf[3], adc3_buf[4]);
 8008d4a:	4b4c      	ldr	r3, [pc, #304]	; (8008e7c <main+0xaf4>)
 8008d4c:	891b      	ldrh	r3, [r3, #8]
				sprintf((char*)buf, "%c %d %d %d %d %d F %d %d %d V %d %d A1I %d %d %d %d A2I %d %d %d %d A3I %d %d A1 %d %d %d %d %d A2 %d %d %d %d %d A3 %d %d %d %d %d             \r\n",
 8008d4e:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8008d52:	9321      	str	r3, [sp, #132]	; 0x84
 8008d54:	9220      	str	r2, [sp, #128]	; 0x80
 8008d56:	911f      	str	r1, [sp, #124]	; 0x7c
 8008d58:	941e      	str	r4, [sp, #120]	; 0x78
 8008d5a:	951d      	str	r5, [sp, #116]	; 0x74
 8008d5c:	961c      	str	r6, [sp, #112]	; 0x70
 8008d5e:	687d      	ldr	r5, [r7, #4]
 8008d60:	951b      	str	r5, [sp, #108]	; 0x6c
 8008d62:	68bd      	ldr	r5, [r7, #8]
 8008d64:	951a      	str	r5, [sp, #104]	; 0x68
 8008d66:	68fd      	ldr	r5, [r7, #12]
 8008d68:	9519      	str	r5, [sp, #100]	; 0x64
 8008d6a:	693d      	ldr	r5, [r7, #16]
 8008d6c:	9518      	str	r5, [sp, #96]	; 0x60
 8008d6e:	697d      	ldr	r5, [r7, #20]
 8008d70:	9517      	str	r5, [sp, #92]	; 0x5c
 8008d72:	69bd      	ldr	r5, [r7, #24]
 8008d74:	9516      	str	r5, [sp, #88]	; 0x58
 8008d76:	69fd      	ldr	r5, [r7, #28]
 8008d78:	9515      	str	r5, [sp, #84]	; 0x54
 8008d7a:	6a3d      	ldr	r5, [r7, #32]
 8008d7c:	9514      	str	r5, [sp, #80]	; 0x50
 8008d7e:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8008d80:	9513      	str	r5, [sp, #76]	; 0x4c
 8008d82:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8008d86:	9312      	str	r3, [sp, #72]	; 0x48
 8008d88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008d8c:	9311      	str	r3, [sp, #68]	; 0x44
 8008d8e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8008d92:	9310      	str	r3, [sp, #64]	; 0x40
 8008d94:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8008d98:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d9a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8008d9e:	930e      	str	r3, [sp, #56]	; 0x38
 8008da0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8008da4:	930d      	str	r3, [sp, #52]	; 0x34
 8008da6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8008daa:	930c      	str	r3, [sp, #48]	; 0x30
 8008dac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008db2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008db6:	930a      	str	r3, [sp, #40]	; 0x28
 8008db8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dbe:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8008dc0:	9508      	str	r5, [sp, #32]
 8008dc2:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008dc4:	9507      	str	r5, [sp, #28]
 8008dc6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8008dc8:	9406      	str	r4, [sp, #24]
 8008dca:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8008dcc:	9405      	str	r4, [sp, #20]
 8008dce:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8008dd0:	9404      	str	r4, [sp, #16]
 8008dd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008dd4:	9103      	str	r1, [sp, #12]
 8008dd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dd8:	9202      	str	r2, [sp, #8]
 8008dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	ee16 3a90 	vmov	r3, s13
 8008de8:	4662      	mov	r2, ip
 8008dea:	4925      	ldr	r1, [pc, #148]	; (8008e80 <main+0xaf8>)
 8008dec:	f002 fefa 	bl	800bbe4 <siprintf>
	//			buf[100] = '.';
	//			buf[50] = '|';
	//			buf[100 + max(-50, min(50, (int)av_velocity))] = 'v';


				if (buf_msgs[0] != '\0'){
 8008df0:	4b24      	ldr	r3, [pc, #144]	; (8008e84 <main+0xafc>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d008      	beq.n	8008e0a <main+0xa82>
					strcat(buf, buf_msgs);
 8008df8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008dfc:	4921      	ldr	r1, [pc, #132]	; (8008e84 <main+0xafc>)
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f002 ff10 	bl	800bc24 <strcat>
					buf_msgs[0] = '\0';
 8008e04:	4b1f      	ldr	r3, [pc, #124]	; (8008e84 <main+0xafc>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	701a      	strb	r2, [r3, #0]
				}



				//HAL_UART_Transmit_IT(&huart3, buf, strlen((char*)buf)); //WORKS but replaced by DMA below
				huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 8008e0a:	4b1f      	ldr	r3, [pc, #124]	; (8008e88 <main+0xb00>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	695a      	ldr	r2, [r3, #20]
 8008e10:	4b1d      	ldr	r3, [pc, #116]	; (8008e88 <main+0xb00>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e18:	615a      	str	r2, [r3, #20]
				HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 8008e1a:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8008e1e:	4b1a      	ldr	r3, [pc, #104]	; (8008e88 <main+0xb00>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3304      	adds	r3, #4
 8008e24:	461d      	mov	r5, r3
 8008e26:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7f7 f9d0 	bl	80001d0 <strlen>
 8008e30:	4603      	mov	r3, r0
 8008e32:	462a      	mov	r2, r5
 8008e34:	4621      	mov	r1, r4
 8008e36:	e029      	b.n	8008e8c <main+0xb04>
 8008e38:	20000bcc 	.word	0x20000bcc
 8008e3c:	20000550 	.word	0x20000550
 8008e40:	20000c14 	.word	0x20000c14
 8008e44:	40020c00 	.word	0x40020c00
 8008e48:	20000130 	.word	0x20000130
 8008e4c:	40000c00 	.word	0x40000c00
 8008e50:	20000028 	.word	0x20000028
 8008e54:	20000dc8 	.word	0x20000dc8
 8008e58:	447a0000 	.word	0x447a0000
 8008e5c:	200000b4 	.word	0x200000b4
 8008e60:	200000e0 	.word	0x200000e0
 8008e64:	200000e4 	.word	0x200000e4
 8008e68:	200000e8 	.word	0x200000e8
 8008e6c:	200000c4 	.word	0x200000c4
 8008e70:	20000c9c 	.word	0x20000c9c
 8008e74:	20000b90 	.word	0x20000b90
 8008e78:	20000eac 	.word	0x20000eac
 8008e7c:	20000dcc 	.word	0x20000dcc
 8008e80:	0800d4c0 	.word	0x0800d4c0
 8008e84:	20000e48 	.word	0x20000e48
 8008e88:	20000510 	.word	0x20000510
 8008e8c:	480a      	ldr	r0, [pc, #40]	; (8008eb8 <main+0xb30>)
 8008e8e:	f7f9 fb73 	bl	8002578 <HAL_DMA_Start_IT>
				}
			ch='q';
 8008e92:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8008e96:	2271      	movs	r2, #113	; 0x71
 8008e98:	701a      	strb	r2, [r3, #0]

			i_slow++;
 8008e9a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	  }

	  i_fast++;
 8008ea4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	  HAL_Delay(1);
 8008eae:	2001      	movs	r0, #1
 8008eb0:	f7f8 f8c6 	bl	8001040 <HAL_Delay>
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8008eb4:	e4db      	b.n	800886e <main+0x4e6>
 8008eb6:	bf00      	nop
 8008eb8:	20000aac 	.word	0x20000aac

08008ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b098      	sub	sp, #96	; 0x60
 8008ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008ec2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ec6:	2230      	movs	r2, #48	; 0x30
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f002 fe82 	bl	800bbd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008ed0:	f107 031c 	add.w	r3, r7, #28
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	605a      	str	r2, [r3, #4]
 8008eda:	609a      	str	r2, [r3, #8]
 8008edc:	60da      	str	r2, [r3, #12]
 8008ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008ee0:	f107 030c 	add.w	r3, r7, #12
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	605a      	str	r2, [r3, #4]
 8008eea:	609a      	str	r2, [r3, #8]
 8008eec:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60bb      	str	r3, [r7, #8]
 8008ef2:	4b32      	ldr	r3, [pc, #200]	; (8008fbc <SystemClock_Config+0x100>)
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef6:	4a31      	ldr	r2, [pc, #196]	; (8008fbc <SystemClock_Config+0x100>)
 8008ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008efc:	6413      	str	r3, [r2, #64]	; 0x40
 8008efe:	4b2f      	ldr	r3, [pc, #188]	; (8008fbc <SystemClock_Config+0x100>)
 8008f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f06:	60bb      	str	r3, [r7, #8]
 8008f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	607b      	str	r3, [r7, #4]
 8008f0e:	4b2c      	ldr	r3, [pc, #176]	; (8008fc0 <SystemClock_Config+0x104>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a2b      	ldr	r2, [pc, #172]	; (8008fc0 <SystemClock_Config+0x104>)
 8008f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f18:	6013      	str	r3, [r2, #0]
 8008f1a:	4b29      	ldr	r3, [pc, #164]	; (8008fc0 <SystemClock_Config+0x104>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f22:	607b      	str	r3, [r7, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8008f26:	2309      	movs	r3, #9
 8008f28:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008f2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008f30:	2301      	movs	r3, #1
 8008f32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008f34:	2302      	movs	r3, #2
 8008f36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008f38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008f3e:	2304      	movs	r3, #4
 8008f40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8008f42:	23a8      	movs	r3, #168	; 0xa8
 8008f44:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008f46:	2302      	movs	r3, #2
 8008f48:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008f4a:	2307      	movs	r3, #7
 8008f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008f4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fb f8d0 	bl	80040f8 <HAL_RCC_OscConfig>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8008f5e:	f001 fe99 	bl	800ac94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008f62:	230f      	movs	r3, #15
 8008f64:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008f66:	2302      	movs	r3, #2
 8008f68:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008f6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008f72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f78:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008f7a:	f107 031c 	add.w	r3, r7, #28
 8008f7e:	2105      	movs	r1, #5
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fb fb29 	bl	80045d8 <HAL_RCC_ClockConfig>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8008f8c:	f001 fe82 	bl	800ac94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008f90:	2302      	movs	r3, #2
 8008f92:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8008f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f98:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008f9a:	f107 030c 	add.w	r3, r7, #12
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fb fd18 	bl	80049d4 <HAL_RCCEx_PeriphCLKConfig>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8008faa:	f001 fe73 	bl	800ac94 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8008fae:	f7fb fbf9 	bl	80047a4 <HAL_RCC_EnableCSS>
}
 8008fb2:	bf00      	nop
 8008fb4:	3760      	adds	r7, #96	; 0x60
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	40023800 	.word	0x40023800
 8008fc0:	40007000 	.word	0x40007000

08008fc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b08c      	sub	sp, #48	; 0x30
 8008fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008fca:	f107 0320 	add.w	r3, r7, #32
 8008fce:	2200      	movs	r2, #0
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	605a      	str	r2, [r3, #4]
 8008fd4:	609a      	str	r2, [r3, #8]
 8008fd6:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8008fd8:	463b      	mov	r3, r7
 8008fda:	2220      	movs	r2, #32
 8008fdc:	2100      	movs	r1, #0
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f002 fdf8 	bl	800bbd4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8008fe4:	4b63      	ldr	r3, [pc, #396]	; (8009174 <MX_ADC1_Init+0x1b0>)
 8008fe6:	4a64      	ldr	r2, [pc, #400]	; (8009178 <MX_ADC1_Init+0x1b4>)
 8008fe8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8008fea:	4b62      	ldr	r3, [pc, #392]	; (8009174 <MX_ADC1_Init+0x1b0>)
 8008fec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008ff0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008ff2:	4b60      	ldr	r3, [pc, #384]	; (8009174 <MX_ADC1_Init+0x1b0>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8008ff8:	4b5e      	ldr	r3, [pc, #376]	; (8009174 <MX_ADC1_Init+0x1b0>)
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008ffe:	4b5d      	ldr	r3, [pc, #372]	; (8009174 <MX_ADC1_Init+0x1b0>)
 8009000:	2201      	movs	r2, #1
 8009002:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009004:	4b5b      	ldr	r3, [pc, #364]	; (8009174 <MX_ADC1_Init+0x1b0>)
 8009006:	2200      	movs	r2, #0
 8009008:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800900c:	4b59      	ldr	r3, [pc, #356]	; (8009174 <MX_ADC1_Init+0x1b0>)
 800900e:	2200      	movs	r2, #0
 8009010:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009012:	4b58      	ldr	r3, [pc, #352]	; (8009174 <MX_ADC1_Init+0x1b0>)
 8009014:	4a59      	ldr	r2, [pc, #356]	; (800917c <MX_ADC1_Init+0x1b8>)
 8009016:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009018:	4b56      	ldr	r3, [pc, #344]	; (8009174 <MX_ADC1_Init+0x1b0>)
 800901a:	2200      	movs	r2, #0
 800901c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800901e:	4b55      	ldr	r3, [pc, #340]	; (8009174 <MX_ADC1_Init+0x1b0>)
 8009020:	2205      	movs	r2, #5
 8009022:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8009024:	4b53      	ldr	r3, [pc, #332]	; (8009174 <MX_ADC1_Init+0x1b0>)
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800902c:	4b51      	ldr	r3, [pc, #324]	; (8009174 <MX_ADC1_Init+0x1b0>)
 800902e:	2201      	movs	r2, #1
 8009030:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009032:	4850      	ldr	r0, [pc, #320]	; (8009174 <MX_ADC1_Init+0x1b0>)
 8009034:	f7f8 f826 	bl	8001084 <HAL_ADC_Init>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800903e:	f001 fe29 	bl	800ac94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8009042:	2301      	movs	r3, #1
 8009044:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8009046:	2301      	movs	r3, #1
 8009048:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800904a:	2301      	movs	r3, #1
 800904c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800904e:	f107 0320 	add.w	r3, r7, #32
 8009052:	4619      	mov	r1, r3
 8009054:	4847      	ldr	r0, [pc, #284]	; (8009174 <MX_ADC1_Init+0x1b0>)
 8009056:	f7f8 fa9f 	bl	8001598 <HAL_ADC_ConfigChannel>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8009060:	f001 fe18 	bl	800ac94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8009064:	230b      	movs	r3, #11
 8009066:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8009068:	2302      	movs	r3, #2
 800906a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800906c:	f107 0320 	add.w	r3, r7, #32
 8009070:	4619      	mov	r1, r3
 8009072:	4840      	ldr	r0, [pc, #256]	; (8009174 <MX_ADC1_Init+0x1b0>)
 8009074:	f7f8 fa90 	bl	8001598 <HAL_ADC_ConfigChannel>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800907e:	f001 fe09 	bl	800ac94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009082:	230e      	movs	r3, #14
 8009084:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 8009086:	2303      	movs	r3, #3
 8009088:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800908a:	f107 0320 	add.w	r3, r7, #32
 800908e:	4619      	mov	r1, r3
 8009090:	4838      	ldr	r0, [pc, #224]	; (8009174 <MX_ADC1_Init+0x1b0>)
 8009092:	f7f8 fa81 	bl	8001598 <HAL_ADC_ConfigChannel>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800909c:	f001 fdfa 	bl	800ac94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80090a0:	2305      	movs	r3, #5
 80090a2:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 80090a4:	2304      	movs	r3, #4
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80090a8:	f107 0320 	add.w	r3, r7, #32
 80090ac:	4619      	mov	r1, r3
 80090ae:	4831      	ldr	r0, [pc, #196]	; (8009174 <MX_ADC1_Init+0x1b0>)
 80090b0:	f7f8 fa72 	bl	8001598 <HAL_ADC_ConfigChannel>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80090ba:	f001 fdeb 	bl	800ac94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80090be:	2310      	movs	r3, #16
 80090c0:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 80090c2:	2305      	movs	r3, #5
 80090c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80090c6:	f107 0320 	add.w	r3, r7, #32
 80090ca:	4619      	mov	r1, r3
 80090cc:	4829      	ldr	r0, [pc, #164]	; (8009174 <MX_ADC1_Init+0x1b0>)
 80090ce:	f7f8 fa63 	bl	8001598 <HAL_ADC_ConfigChannel>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80090d8:	f001 fddc 	bl	800ac94 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80090dc:	2301      	movs	r3, #1
 80090de:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80090e0:	2301      	movs	r3, #1
 80090e2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 80090e4:	2304      	movs	r3, #4
 80090e6:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80090e8:	2300      	movs	r3, #0
 80090ea:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 80090ec:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80090f0:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80090f2:	2300      	movs	r3, #0
 80090f4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80090f6:	2300      	movs	r3, #0
 80090f8:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80090fa:	2300      	movs	r3, #0
 80090fc:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80090fe:	2300      	movs	r3, #0
 8009100:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8009102:	463b      	mov	r3, r7
 8009104:	4619      	mov	r1, r3
 8009106:	481b      	ldr	r0, [pc, #108]	; (8009174 <MX_ADC1_Init+0x1b0>)
 8009108:	f7f8 fde6 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8009112:	f001 fdbf 	bl	800ac94 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8009116:	230b      	movs	r3, #11
 8009118:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800911a:	2302      	movs	r3, #2
 800911c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800911e:	463b      	mov	r3, r7
 8009120:	4619      	mov	r1, r3
 8009122:	4814      	ldr	r0, [pc, #80]	; (8009174 <MX_ADC1_Init+0x1b0>)
 8009124:	f7f8 fdd8 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800912e:	f001 fdb1 	bl	800ac94 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8009132:	230e      	movs	r3, #14
 8009134:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8009136:	2303      	movs	r3, #3
 8009138:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800913a:	463b      	mov	r3, r7
 800913c:	4619      	mov	r1, r3
 800913e:	480d      	ldr	r0, [pc, #52]	; (8009174 <MX_ADC1_Init+0x1b0>)
 8009140:	f7f8 fdca 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 800914a:	f001 fda3 	bl	800ac94 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 800914e:	2305      	movs	r3, #5
 8009150:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 8009152:	2304      	movs	r3, #4
 8009154:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8009156:	463b      	mov	r3, r7
 8009158:	4619      	mov	r1, r3
 800915a:	4806      	ldr	r0, [pc, #24]	; (8009174 <MX_ADC1_Init+0x1b0>)
 800915c:	f7f8 fdbc 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 8009166:	f001 fd95 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800916a:	bf00      	nop
 800916c:	3730      	adds	r7, #48	; 0x30
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20000bcc 	.word	0x20000bcc
 8009178:	40012000 	.word	0x40012000
 800917c:	0f000001 	.word	0x0f000001

08009180 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08c      	sub	sp, #48	; 0x30
 8009184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009186:	f107 0320 	add.w	r3, r7, #32
 800918a:	2200      	movs	r2, #0
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	605a      	str	r2, [r3, #4]
 8009190:	609a      	str	r2, [r3, #8]
 8009192:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8009194:	463b      	mov	r3, r7
 8009196:	2220      	movs	r2, #32
 8009198:	2100      	movs	r1, #0
 800919a:	4618      	mov	r0, r3
 800919c:	f002 fd1a 	bl	800bbd4 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 80091a0:	4b63      	ldr	r3, [pc, #396]	; (8009330 <MX_ADC2_Init+0x1b0>)
 80091a2:	4a64      	ldr	r2, [pc, #400]	; (8009334 <MX_ADC2_Init+0x1b4>)
 80091a4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80091a6:	4b62      	ldr	r3, [pc, #392]	; (8009330 <MX_ADC2_Init+0x1b0>)
 80091a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80091ac:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80091ae:	4b60      	ldr	r3, [pc, #384]	; (8009330 <MX_ADC2_Init+0x1b0>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80091b4:	4b5e      	ldr	r3, [pc, #376]	; (8009330 <MX_ADC2_Init+0x1b0>)
 80091b6:	2201      	movs	r2, #1
 80091b8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80091ba:	4b5d      	ldr	r3, [pc, #372]	; (8009330 <MX_ADC2_Init+0x1b0>)
 80091bc:	2201      	movs	r2, #1
 80091be:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80091c0:	4b5b      	ldr	r3, [pc, #364]	; (8009330 <MX_ADC2_Init+0x1b0>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80091c8:	4b59      	ldr	r3, [pc, #356]	; (8009330 <MX_ADC2_Init+0x1b0>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80091ce:	4b58      	ldr	r3, [pc, #352]	; (8009330 <MX_ADC2_Init+0x1b0>)
 80091d0:	4a59      	ldr	r2, [pc, #356]	; (8009338 <MX_ADC2_Init+0x1b8>)
 80091d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80091d4:	4b56      	ldr	r3, [pc, #344]	; (8009330 <MX_ADC2_Init+0x1b0>)
 80091d6:	2200      	movs	r2, #0
 80091d8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 80091da:	4b55      	ldr	r3, [pc, #340]	; (8009330 <MX_ADC2_Init+0x1b0>)
 80091dc:	2205      	movs	r2, #5
 80091de:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80091e0:	4b53      	ldr	r3, [pc, #332]	; (8009330 <MX_ADC2_Init+0x1b0>)
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80091e8:	4b51      	ldr	r3, [pc, #324]	; (8009330 <MX_ADC2_Init+0x1b0>)
 80091ea:	2201      	movs	r2, #1
 80091ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80091ee:	4850      	ldr	r0, [pc, #320]	; (8009330 <MX_ADC2_Init+0x1b0>)
 80091f0:	f7f7 ff48 	bl	8001084 <HAL_ADC_Init>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80091fa:	f001 fd4b 	bl	800ac94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80091fe:	2302      	movs	r3, #2
 8009200:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8009202:	2301      	movs	r3, #1
 8009204:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8009206:	2301      	movs	r3, #1
 8009208:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800920a:	f107 0320 	add.w	r3, r7, #32
 800920e:	4619      	mov	r1, r3
 8009210:	4847      	ldr	r0, [pc, #284]	; (8009330 <MX_ADC2_Init+0x1b0>)
 8009212:	f7f8 f9c1 	bl	8001598 <HAL_ADC_ConfigChannel>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d001      	beq.n	8009220 <MX_ADC2_Init+0xa0>
  {
    Error_Handler();
 800921c:	f001 fd3a 	bl	800ac94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8009220:	230c      	movs	r3, #12
 8009222:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8009224:	2302      	movs	r3, #2
 8009226:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009228:	f107 0320 	add.w	r3, r7, #32
 800922c:	4619      	mov	r1, r3
 800922e:	4840      	ldr	r0, [pc, #256]	; (8009330 <MX_ADC2_Init+0x1b0>)
 8009230:	f7f8 f9b2 	bl	8001598 <HAL_ADC_ConfigChannel>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 800923a:	f001 fd2b 	bl	800ac94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800923e:	230f      	movs	r3, #15
 8009240:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 8009242:	2303      	movs	r3, #3
 8009244:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009246:	f107 0320 	add.w	r3, r7, #32
 800924a:	4619      	mov	r1, r3
 800924c:	4838      	ldr	r0, [pc, #224]	; (8009330 <MX_ADC2_Init+0x1b0>)
 800924e:	f7f8 f9a3 	bl	8001598 <HAL_ADC_ConfigChannel>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <MX_ADC2_Init+0xdc>
  {
    Error_Handler();
 8009258:	f001 fd1c 	bl	800ac94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800925c:	2304      	movs	r3, #4
 800925e:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 8009260:	2304      	movs	r3, #4
 8009262:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009264:	f107 0320 	add.w	r3, r7, #32
 8009268:	4619      	mov	r1, r3
 800926a:	4831      	ldr	r0, [pc, #196]	; (8009330 <MX_ADC2_Init+0x1b0>)
 800926c:	f7f8 f994 	bl	8001598 <HAL_ADC_ConfigChannel>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <MX_ADC2_Init+0xfa>
  {
    Error_Handler();
 8009276:	f001 fd0d 	bl	800ac94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800927a:	2308      	movs	r3, #8
 800927c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 800927e:	2305      	movs	r3, #5
 8009280:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009282:	f107 0320 	add.w	r3, r7, #32
 8009286:	4619      	mov	r1, r3
 8009288:	4829      	ldr	r0, [pc, #164]	; (8009330 <MX_ADC2_Init+0x1b0>)
 800928a:	f7f8 f985 	bl	8001598 <HAL_ADC_ConfigChannel>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <MX_ADC2_Init+0x118>
  {
    Error_Handler();
 8009294:	f001 fcfe 	bl	800ac94 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8009298:	2302      	movs	r3, #2
 800929a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800929c:	2301      	movs	r3, #1
 800929e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 80092a0:	2304      	movs	r3, #4
 80092a2:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80092a4:	2300      	movs	r3, #0
 80092a6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 80092a8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80092ac:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80092ae:	2300      	movs	r3, #0
 80092b0:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80092b2:	2300      	movs	r3, #0
 80092b4:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80092b6:	2300      	movs	r3, #0
 80092b8:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80092ba:	2300      	movs	r3, #0
 80092bc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80092be:	463b      	mov	r3, r7
 80092c0:	4619      	mov	r1, r3
 80092c2:	481b      	ldr	r0, [pc, #108]	; (8009330 <MX_ADC2_Init+0x1b0>)
 80092c4:	f7f8 fd08 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <MX_ADC2_Init+0x152>
  {
    Error_Handler();
 80092ce:	f001 fce1 	bl	800ac94 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 80092d2:	230c      	movs	r3, #12
 80092d4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80092d6:	2302      	movs	r3, #2
 80092d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80092da:	463b      	mov	r3, r7
 80092dc:	4619      	mov	r1, r3
 80092de:	4814      	ldr	r0, [pc, #80]	; (8009330 <MX_ADC2_Init+0x1b0>)
 80092e0:	f7f8 fcfa 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <MX_ADC2_Init+0x16e>
  {
    Error_Handler();
 80092ea:	f001 fcd3 	bl	800ac94 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 80092ee:	230f      	movs	r3, #15
 80092f0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 80092f2:	2303      	movs	r3, #3
 80092f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80092f6:	463b      	mov	r3, r7
 80092f8:	4619      	mov	r1, r3
 80092fa:	480d      	ldr	r0, [pc, #52]	; (8009330 <MX_ADC2_Init+0x1b0>)
 80092fc:	f7f8 fcec 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <MX_ADC2_Init+0x18a>
  {
    Error_Handler();
 8009306:	f001 fcc5 	bl	800ac94 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800930a:	2304      	movs	r3, #4
 800930c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 800930e:	2304      	movs	r3, #4
 8009310:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8009312:	463b      	mov	r3, r7
 8009314:	4619      	mov	r1, r3
 8009316:	4806      	ldr	r0, [pc, #24]	; (8009330 <MX_ADC2_Init+0x1b0>)
 8009318:	f7f8 fcde 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <MX_ADC2_Init+0x1a6>
  {
    Error_Handler();
 8009322:	f001 fcb7 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8009326:	bf00      	nop
 8009328:	3730      	adds	r7, #48	; 0x30
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	20000550 	.word	0x20000550
 8009334:	40012100 	.word	0x40012100
 8009338:	0f000001 	.word	0x0f000001

0800933c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b08c      	sub	sp, #48	; 0x30
 8009340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009342:	f107 0320 	add.w	r3, r7, #32
 8009346:	2200      	movs	r2, #0
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	605a      	str	r2, [r3, #4]
 800934c:	609a      	str	r2, [r3, #8]
 800934e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8009350:	463b      	mov	r3, r7
 8009352:	2220      	movs	r2, #32
 8009354:	2100      	movs	r1, #0
 8009356:	4618      	mov	r0, r3
 8009358:	f002 fc3c 	bl	800bbd4 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800935c:	4b63      	ldr	r3, [pc, #396]	; (80094ec <MX_ADC3_Init+0x1b0>)
 800935e:	4a64      	ldr	r2, [pc, #400]	; (80094f0 <MX_ADC3_Init+0x1b4>)
 8009360:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8009362:	4b62      	ldr	r3, [pc, #392]	; (80094ec <MX_ADC3_Init+0x1b0>)
 8009364:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009368:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800936a:	4b60      	ldr	r3, [pc, #384]	; (80094ec <MX_ADC3_Init+0x1b0>)
 800936c:	2200      	movs	r2, #0
 800936e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8009370:	4b5e      	ldr	r3, [pc, #376]	; (80094ec <MX_ADC3_Init+0x1b0>)
 8009372:	2201      	movs	r2, #1
 8009374:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8009376:	4b5d      	ldr	r3, [pc, #372]	; (80094ec <MX_ADC3_Init+0x1b0>)
 8009378:	2201      	movs	r2, #1
 800937a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800937c:	4b5b      	ldr	r3, [pc, #364]	; (80094ec <MX_ADC3_Init+0x1b0>)
 800937e:	2200      	movs	r2, #0
 8009380:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009384:	4b59      	ldr	r3, [pc, #356]	; (80094ec <MX_ADC3_Init+0x1b0>)
 8009386:	2200      	movs	r2, #0
 8009388:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800938a:	4b58      	ldr	r3, [pc, #352]	; (80094ec <MX_ADC3_Init+0x1b0>)
 800938c:	4a59      	ldr	r2, [pc, #356]	; (80094f4 <MX_ADC3_Init+0x1b8>)
 800938e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009390:	4b56      	ldr	r3, [pc, #344]	; (80094ec <MX_ADC3_Init+0x1b0>)
 8009392:	2200      	movs	r2, #0
 8009394:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 5;
 8009396:	4b55      	ldr	r3, [pc, #340]	; (80094ec <MX_ADC3_Init+0x1b0>)
 8009398:	2205      	movs	r2, #5
 800939a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800939c:	4b53      	ldr	r3, [pc, #332]	; (80094ec <MX_ADC3_Init+0x1b0>)
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80093a4:	4b51      	ldr	r3, [pc, #324]	; (80094ec <MX_ADC3_Init+0x1b0>)
 80093a6:	2201      	movs	r2, #1
 80093a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80093aa:	4850      	ldr	r0, [pc, #320]	; (80094ec <MX_ADC3_Init+0x1b0>)
 80093ac:	f7f7 fe6a 	bl	8001084 <HAL_ADC_Init>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 80093b6:	f001 fc6d 	bl	800ac94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80093ba:	2303      	movs	r3, #3
 80093bc:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80093be:	2301      	movs	r3, #1
 80093c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80093c2:	2301      	movs	r3, #1
 80093c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80093c6:	f107 0320 	add.w	r3, r7, #32
 80093ca:	4619      	mov	r1, r3
 80093cc:	4847      	ldr	r0, [pc, #284]	; (80094ec <MX_ADC3_Init+0x1b0>)
 80093ce:	f7f8 f8e3 	bl	8001598 <HAL_ADC_ConfigChannel>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 80093d8:	f001 fc5c 	bl	800ac94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80093dc:	230d      	movs	r3, #13
 80093de:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 80093e0:	2302      	movs	r3, #2
 80093e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80093e4:	f107 0320 	add.w	r3, r7, #32
 80093e8:	4619      	mov	r1, r3
 80093ea:	4840      	ldr	r0, [pc, #256]	; (80094ec <MX_ADC3_Init+0x1b0>)
 80093ec:	f7f8 f8d4 	bl	8001598 <HAL_ADC_ConfigChannel>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <MX_ADC3_Init+0xbe>
  {
    Error_Handler();
 80093f6:	f001 fc4d 	bl	800ac94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80093fa:	2303      	movs	r3, #3
 80093fc:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 80093fe:	2303      	movs	r3, #3
 8009400:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8009402:	f107 0320 	add.w	r3, r7, #32
 8009406:	4619      	mov	r1, r3
 8009408:	4838      	ldr	r0, [pc, #224]	; (80094ec <MX_ADC3_Init+0x1b0>)
 800940a:	f7f8 f8c5 	bl	8001598 <HAL_ADC_ConfigChannel>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d001      	beq.n	8009418 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8009414:	f001 fc3e 	bl	800ac94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8009418:	230d      	movs	r3, #13
 800941a:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 800941c:	2304      	movs	r3, #4
 800941e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8009420:	f107 0320 	add.w	r3, r7, #32
 8009424:	4619      	mov	r1, r3
 8009426:	4831      	ldr	r0, [pc, #196]	; (80094ec <MX_ADC3_Init+0x1b0>)
 8009428:	f7f8 f8b6 	bl	8001598 <HAL_ADC_ConfigChannel>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <MX_ADC3_Init+0xfa>
  {
    Error_Handler();
 8009432:	f001 fc2f 	bl	800ac94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8009436:	2303      	movs	r3, #3
 8009438:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 800943a:	2305      	movs	r3, #5
 800943c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800943e:	f107 0320 	add.w	r3, r7, #32
 8009442:	4619      	mov	r1, r3
 8009444:	4829      	ldr	r0, [pc, #164]	; (80094ec <MX_ADC3_Init+0x1b0>)
 8009446:	f7f8 f8a7 	bl	8001598 <HAL_ADC_ConfigChannel>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <MX_ADC3_Init+0x118>
  {
    Error_Handler();
 8009450:	f001 fc20 	bl	800ac94 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8009454:	2303      	movs	r3, #3
 8009456:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8009458:	2301      	movs	r3, #1
 800945a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800945c:	2304      	movs	r3, #4
 800945e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009460:	2300      	movs	r3, #0
 8009462:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 8009464:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8009468:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800946a:	2300      	movs	r3, #0
 800946c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800946e:	2300      	movs	r3, #0
 8009470:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8009472:	2300      	movs	r3, #0
 8009474:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8009476:	2300      	movs	r3, #0
 8009478:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800947a:	463b      	mov	r3, r7
 800947c:	4619      	mov	r1, r3
 800947e:	481b      	ldr	r0, [pc, #108]	; (80094ec <MX_ADC3_Init+0x1b0>)
 8009480:	f7f8 fc2a 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <MX_ADC3_Init+0x152>
  {
    Error_Handler();
 800948a:	f001 fc03 	bl	800ac94 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 800948e:	230d      	movs	r3, #13
 8009490:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8009492:	2302      	movs	r3, #2
 8009494:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8009496:	463b      	mov	r3, r7
 8009498:	4619      	mov	r1, r3
 800949a:	4814      	ldr	r0, [pc, #80]	; (80094ec <MX_ADC3_Init+0x1b0>)
 800949c:	f7f8 fc1c 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <MX_ADC3_Init+0x16e>
  {
    Error_Handler();
 80094a6:	f001 fbf5 	bl	800ac94 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80094aa:	2303      	movs	r3, #3
 80094ac:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 80094ae:	2303      	movs	r3, #3
 80094b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 80094b2:	463b      	mov	r3, r7
 80094b4:	4619      	mov	r1, r3
 80094b6:	480d      	ldr	r0, [pc, #52]	; (80094ec <MX_ADC3_Init+0x1b0>)
 80094b8:	f7f8 fc0e 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <MX_ADC3_Init+0x18a>
  {
    Error_Handler();
 80094c2:	f001 fbe7 	bl	800ac94 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 80094c6:	230d      	movs	r3, #13
 80094c8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 80094ca:	2304      	movs	r3, #4
 80094cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 80094ce:	463b      	mov	r3, r7
 80094d0:	4619      	mov	r1, r3
 80094d2:	4806      	ldr	r0, [pc, #24]	; (80094ec <MX_ADC3_Init+0x1b0>)
 80094d4:	f7f8 fc00 	bl	8001cd8 <HAL_ADCEx_InjectedConfigChannel>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <MX_ADC3_Init+0x1a6>
  {
    Error_Handler();
 80094de:	f001 fbd9 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80094e2:	bf00      	nop
 80094e4:	3730      	adds	r7, #48	; 0x30
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	20000c14 	.word	0x20000c14
 80094f0:	40012200 	.word	0x40012200
 80094f4:	0f000001 	.word	0x0f000001

080094f8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80094fc:	4b16      	ldr	r3, [pc, #88]	; (8009558 <MX_CAN1_Init+0x60>)
 80094fe:	4a17      	ldr	r2, [pc, #92]	; (800955c <MX_CAN1_Init+0x64>)
 8009500:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8009502:	4b15      	ldr	r3, [pc, #84]	; (8009558 <MX_CAN1_Init+0x60>)
 8009504:	2210      	movs	r2, #16
 8009506:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8009508:	4b13      	ldr	r3, [pc, #76]	; (8009558 <MX_CAN1_Init+0x60>)
 800950a:	2200      	movs	r2, #0
 800950c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800950e:	4b12      	ldr	r3, [pc, #72]	; (8009558 <MX_CAN1_Init+0x60>)
 8009510:	2200      	movs	r2, #0
 8009512:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009514:	4b10      	ldr	r3, [pc, #64]	; (8009558 <MX_CAN1_Init+0x60>)
 8009516:	2200      	movs	r2, #0
 8009518:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800951a:	4b0f      	ldr	r3, [pc, #60]	; (8009558 <MX_CAN1_Init+0x60>)
 800951c:	2200      	movs	r2, #0
 800951e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8009520:	4b0d      	ldr	r3, [pc, #52]	; (8009558 <MX_CAN1_Init+0x60>)
 8009522:	2200      	movs	r2, #0
 8009524:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8009526:	4b0c      	ldr	r3, [pc, #48]	; (8009558 <MX_CAN1_Init+0x60>)
 8009528:	2200      	movs	r2, #0
 800952a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800952c:	4b0a      	ldr	r3, [pc, #40]	; (8009558 <MX_CAN1_Init+0x60>)
 800952e:	2200      	movs	r2, #0
 8009530:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8009532:	4b09      	ldr	r3, [pc, #36]	; (8009558 <MX_CAN1_Init+0x60>)
 8009534:	2200      	movs	r2, #0
 8009536:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8009538:	4b07      	ldr	r3, [pc, #28]	; (8009558 <MX_CAN1_Init+0x60>)
 800953a:	2200      	movs	r2, #0
 800953c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800953e:	4b06      	ldr	r3, [pc, #24]	; (8009558 <MX_CAN1_Init+0x60>)
 8009540:	2200      	movs	r2, #0
 8009542:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8009544:	4804      	ldr	r0, [pc, #16]	; (8009558 <MX_CAN1_Init+0x60>)
 8009546:	f7f8 fd5b 	bl	8002000 <HAL_CAN_Init>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8009550:	f001 fba0 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8009554:	bf00      	nop
 8009556:	bd80      	pop	{r7, pc}
 8009558:	20000f88 	.word	0x20000f88
 800955c:	40006400 	.word	0x40006400

08009560 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009564:	4b12      	ldr	r3, [pc, #72]	; (80095b0 <MX_I2C1_Init+0x50>)
 8009566:	4a13      	ldr	r2, [pc, #76]	; (80095b4 <MX_I2C1_Init+0x54>)
 8009568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800956a:	4b11      	ldr	r3, [pc, #68]	; (80095b0 <MX_I2C1_Init+0x50>)
 800956c:	4a12      	ldr	r2, [pc, #72]	; (80095b8 <MX_I2C1_Init+0x58>)
 800956e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009570:	4b0f      	ldr	r3, [pc, #60]	; (80095b0 <MX_I2C1_Init+0x50>)
 8009572:	2200      	movs	r2, #0
 8009574:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009576:	4b0e      	ldr	r3, [pc, #56]	; (80095b0 <MX_I2C1_Init+0x50>)
 8009578:	2200      	movs	r2, #0
 800957a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800957c:	4b0c      	ldr	r3, [pc, #48]	; (80095b0 <MX_I2C1_Init+0x50>)
 800957e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009582:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009584:	4b0a      	ldr	r3, [pc, #40]	; (80095b0 <MX_I2C1_Init+0x50>)
 8009586:	2200      	movs	r2, #0
 8009588:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800958a:	4b09      	ldr	r3, [pc, #36]	; (80095b0 <MX_I2C1_Init+0x50>)
 800958c:	2200      	movs	r2, #0
 800958e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <MX_I2C1_Init+0x50>)
 8009592:	2200      	movs	r2, #0
 8009594:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009596:	4b06      	ldr	r3, [pc, #24]	; (80095b0 <MX_I2C1_Init+0x50>)
 8009598:	2200      	movs	r2, #0
 800959a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800959c:	4804      	ldr	r0, [pc, #16]	; (80095b0 <MX_I2C1_Init+0x50>)
 800959e:	f7f9 fd07 	bl	8002fb0 <HAL_I2C_Init>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80095a8:	f001 fb74 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80095ac:	bf00      	nop
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20000598 	.word	0x20000598
 80095b4:	40005400 	.word	0x40005400
 80095b8:	000186a0 	.word	0x000186a0

080095bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80095c0:	4b12      	ldr	r3, [pc, #72]	; (800960c <MX_I2C2_Init+0x50>)
 80095c2:	4a13      	ldr	r2, [pc, #76]	; (8009610 <MX_I2C2_Init+0x54>)
 80095c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80095c6:	4b11      	ldr	r3, [pc, #68]	; (800960c <MX_I2C2_Init+0x50>)
 80095c8:	4a12      	ldr	r2, [pc, #72]	; (8009614 <MX_I2C2_Init+0x58>)
 80095ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80095cc:	4b0f      	ldr	r3, [pc, #60]	; (800960c <MX_I2C2_Init+0x50>)
 80095ce:	2200      	movs	r2, #0
 80095d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80095d2:	4b0e      	ldr	r3, [pc, #56]	; (800960c <MX_I2C2_Init+0x50>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80095d8:	4b0c      	ldr	r3, [pc, #48]	; (800960c <MX_I2C2_Init+0x50>)
 80095da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80095de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80095e0:	4b0a      	ldr	r3, [pc, #40]	; (800960c <MX_I2C2_Init+0x50>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80095e6:	4b09      	ldr	r3, [pc, #36]	; (800960c <MX_I2C2_Init+0x50>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80095ec:	4b07      	ldr	r3, [pc, #28]	; (800960c <MX_I2C2_Init+0x50>)
 80095ee:	2200      	movs	r2, #0
 80095f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80095f2:	4b06      	ldr	r3, [pc, #24]	; (800960c <MX_I2C2_Init+0x50>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80095f8:	4804      	ldr	r0, [pc, #16]	; (800960c <MX_I2C2_Init+0x50>)
 80095fa:	f7f9 fcd9 	bl	8002fb0 <HAL_I2C_Init>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8009604:	f001 fb46 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8009608:	bf00      	nop
 800960a:	bd80      	pop	{r7, pc}
 800960c:	200009f4 	.word	0x200009f4
 8009610:	40005800 	.word	0x40005800
 8009614:	000186a0 	.word	0x000186a0

08009618 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800961c:	4b0f      	ldr	r3, [pc, #60]	; (800965c <MX_RTC_Init+0x44>)
 800961e:	4a10      	ldr	r2, [pc, #64]	; (8009660 <MX_RTC_Init+0x48>)
 8009620:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009622:	4b0e      	ldr	r3, [pc, #56]	; (800965c <MX_RTC_Init+0x44>)
 8009624:	2200      	movs	r2, #0
 8009626:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009628:	4b0c      	ldr	r3, [pc, #48]	; (800965c <MX_RTC_Init+0x44>)
 800962a:	227f      	movs	r2, #127	; 0x7f
 800962c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800962e:	4b0b      	ldr	r3, [pc, #44]	; (800965c <MX_RTC_Init+0x44>)
 8009630:	22ff      	movs	r2, #255	; 0xff
 8009632:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009634:	4b09      	ldr	r3, [pc, #36]	; (800965c <MX_RTC_Init+0x44>)
 8009636:	2200      	movs	r2, #0
 8009638:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800963a:	4b08      	ldr	r3, [pc, #32]	; (800965c <MX_RTC_Init+0x44>)
 800963c:	2200      	movs	r2, #0
 800963e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009640:	4b06      	ldr	r3, [pc, #24]	; (800965c <MX_RTC_Init+0x44>)
 8009642:	2200      	movs	r2, #0
 8009644:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009646:	4805      	ldr	r0, [pc, #20]	; (800965c <MX_RTC_Init+0x44>)
 8009648:	f7fb faa6 	bl	8004b98 <HAL_RTC_Init>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d001      	beq.n	8009656 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8009652:	f001 fb1f 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009656:	bf00      	nop
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20000d00 	.word	0x20000d00
 8009660:	40002800 	.word	0x40002800

08009664 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8009668:	4b18      	ldr	r3, [pc, #96]	; (80096cc <MX_SPI2_Init+0x68>)
 800966a:	4a19      	ldr	r2, [pc, #100]	; (80096d0 <MX_SPI2_Init+0x6c>)
 800966c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800966e:	4b17      	ldr	r3, [pc, #92]	; (80096cc <MX_SPI2_Init+0x68>)
 8009670:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009674:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009676:	4b15      	ldr	r3, [pc, #84]	; (80096cc <MX_SPI2_Init+0x68>)
 8009678:	2200      	movs	r2, #0
 800967a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800967c:	4b13      	ldr	r3, [pc, #76]	; (80096cc <MX_SPI2_Init+0x68>)
 800967e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009682:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009684:	4b11      	ldr	r3, [pc, #68]	; (80096cc <MX_SPI2_Init+0x68>)
 8009686:	2200      	movs	r2, #0
 8009688:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800968a:	4b10      	ldr	r3, [pc, #64]	; (80096cc <MX_SPI2_Init+0x68>)
 800968c:	2201      	movs	r2, #1
 800968e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8009690:	4b0e      	ldr	r3, [pc, #56]	; (80096cc <MX_SPI2_Init+0x68>)
 8009692:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009696:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009698:	4b0c      	ldr	r3, [pc, #48]	; (80096cc <MX_SPI2_Init+0x68>)
 800969a:	2220      	movs	r2, #32
 800969c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800969e:	4b0b      	ldr	r3, [pc, #44]	; (80096cc <MX_SPI2_Init+0x68>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80096a4:	4b09      	ldr	r3, [pc, #36]	; (80096cc <MX_SPI2_Init+0x68>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096aa:	4b08      	ldr	r3, [pc, #32]	; (80096cc <MX_SPI2_Init+0x68>)
 80096ac:	2200      	movs	r2, #0
 80096ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80096b0:	4b06      	ldr	r3, [pc, #24]	; (80096cc <MX_SPI2_Init+0x68>)
 80096b2:	220a      	movs	r2, #10
 80096b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80096b6:	4805      	ldr	r0, [pc, #20]	; (80096cc <MX_SPI2_Init+0x68>)
 80096b8:	f7fb fb53 	bl	8004d62 <HAL_SPI_Init>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80096c2:	f001 fae7 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80096c6:	bf00      	nop
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	20000130 	.word	0x20000130
 80096d0:	40003800 	.word	0x40003800

080096d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b096      	sub	sp, #88	; 0x58
 80096d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80096da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80096de:	2200      	movs	r2, #0
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	605a      	str	r2, [r3, #4]
 80096e4:	609a      	str	r2, [r3, #8]
 80096e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80096e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80096ec:	2200      	movs	r2, #0
 80096ee:	601a      	str	r2, [r3, #0]
 80096f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80096f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096f6:	2200      	movs	r2, #0
 80096f8:	601a      	str	r2, [r3, #0]
 80096fa:	605a      	str	r2, [r3, #4]
 80096fc:	609a      	str	r2, [r3, #8]
 80096fe:	60da      	str	r2, [r3, #12]
 8009700:	611a      	str	r2, [r3, #16]
 8009702:	615a      	str	r2, [r3, #20]
 8009704:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009706:	1d3b      	adds	r3, r7, #4
 8009708:	2220      	movs	r2, #32
 800970a:	2100      	movs	r1, #0
 800970c:	4618      	mov	r0, r3
 800970e:	f002 fa61 	bl	800bbd4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009712:	4b57      	ldr	r3, [pc, #348]	; (8009870 <MX_TIM1_Init+0x19c>)
 8009714:	4a57      	ldr	r2, [pc, #348]	; (8009874 <MX_TIM1_Init+0x1a0>)
 8009716:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009718:	4b55      	ldr	r3, [pc, #340]	; (8009870 <MX_TIM1_Init+0x19c>)
 800971a:	2200      	movs	r2, #0
 800971c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800971e:	4b54      	ldr	r3, [pc, #336]	; (8009870 <MX_TIM1_Init+0x19c>)
 8009720:	2200      	movs	r2, #0
 8009722:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8009724:	4b52      	ldr	r3, [pc, #328]	; (8009870 <MX_TIM1_Init+0x19c>)
 8009726:	f640 72ff 	movw	r2, #4095	; 0xfff
 800972a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800972c:	4b50      	ldr	r3, [pc, #320]	; (8009870 <MX_TIM1_Init+0x19c>)
 800972e:	2200      	movs	r2, #0
 8009730:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009732:	4b4f      	ldr	r3, [pc, #316]	; (8009870 <MX_TIM1_Init+0x19c>)
 8009734:	2200      	movs	r2, #0
 8009736:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009738:	4b4d      	ldr	r3, [pc, #308]	; (8009870 <MX_TIM1_Init+0x19c>)
 800973a:	2200      	movs	r2, #0
 800973c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800973e:	484c      	ldr	r0, [pc, #304]	; (8009870 <MX_TIM1_Init+0x19c>)
 8009740:	f7fc f982 	bl	8005a48 <HAL_TIM_Base_Init>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800974a:	f001 faa3 	bl	800ac94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800974e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009752:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009754:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009758:	4619      	mov	r1, r3
 800975a:	4845      	ldr	r0, [pc, #276]	; (8009870 <MX_TIM1_Init+0x19c>)
 800975c:	f7fc feb6 	bl	80064cc <HAL_TIM_ConfigClockSource>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8009766:	f001 fa95 	bl	800ac94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800976a:	4841      	ldr	r0, [pc, #260]	; (8009870 <MX_TIM1_Init+0x19c>)
 800976c:	f7fc fa52 	bl	8005c14 <HAL_TIM_PWM_Init>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8009776:	f001 fa8d 	bl	800ac94 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800977a:	483d      	ldr	r0, [pc, #244]	; (8009870 <MX_TIM1_Init+0x19c>)
 800977c:	f7fc f9d7 	bl	8005b2e <HAL_TIM_OC_Init>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8009786:	f001 fa85 	bl	800ac94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800978a:	2300      	movs	r3, #0
 800978c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800978e:	2300      	movs	r3, #0
 8009790:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009792:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009796:	4619      	mov	r1, r3
 8009798:	4835      	ldr	r0, [pc, #212]	; (8009870 <MX_TIM1_Init+0x19c>)
 800979a:	f7fd fbd1 	bl	8006f40 <HAL_TIMEx_MasterConfigSynchronization>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80097a4:	f001 fa76 	bl	800ac94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80097a8:	2360      	movs	r3, #96	; 0x60
 80097aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80097ac:	2300      	movs	r3, #0
 80097ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80097b0:	2300      	movs	r3, #0
 80097b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80097b4:	2300      	movs	r3, #0
 80097b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80097b8:	2300      	movs	r3, #0
 80097ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80097bc:	2300      	movs	r3, #0
 80097be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80097c0:	2300      	movs	r3, #0
 80097c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80097c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097c8:	2200      	movs	r2, #0
 80097ca:	4619      	mov	r1, r3
 80097cc:	4828      	ldr	r0, [pc, #160]	; (8009870 <MX_TIM1_Init+0x19c>)
 80097ce:	f7fc fdb7 	bl	8006340 <HAL_TIM_PWM_ConfigChannel>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d001      	beq.n	80097dc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80097d8:	f001 fa5c 	bl	800ac94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80097dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097e0:	2204      	movs	r2, #4
 80097e2:	4619      	mov	r1, r3
 80097e4:	4822      	ldr	r0, [pc, #136]	; (8009870 <MX_TIM1_Init+0x19c>)
 80097e6:	f7fc fdab 	bl	8006340 <HAL_TIM_PWM_ConfigChannel>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80097f0:	f001 fa50 	bl	800ac94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80097f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097f8:	2208      	movs	r2, #8
 80097fa:	4619      	mov	r1, r3
 80097fc:	481c      	ldr	r0, [pc, #112]	; (8009870 <MX_TIM1_Init+0x19c>)
 80097fe:	f7fc fd9f 	bl	8006340 <HAL_TIM_PWM_ConfigChannel>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8009808:	f001 fa44 	bl	800ac94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800980c:	2330      	movs	r3, #48	; 0x30
 800980e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1900;
 8009810:	f240 736c 	movw	r3, #1900	; 0x76c
 8009814:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800981a:	220c      	movs	r2, #12
 800981c:	4619      	mov	r1, r3
 800981e:	4814      	ldr	r0, [pc, #80]	; (8009870 <MX_TIM1_Init+0x19c>)
 8009820:	f7fc fc92 	bl	8006148 <HAL_TIM_OC_ConfigChannel>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800982a:	f001 fa33 	bl	800ac94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800982e:	2300      	movs	r3, #0
 8009830:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009832:	2300      	movs	r3, #0
 8009834:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009836:	2300      	movs	r3, #0
 8009838:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800983a:	2300      	movs	r3, #0
 800983c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800983e:	2300      	movs	r3, #0
 8009840:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009846:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009848:	2300      	movs	r3, #0
 800984a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800984c:	1d3b      	adds	r3, r7, #4
 800984e:	4619      	mov	r1, r3
 8009850:	4807      	ldr	r0, [pc, #28]	; (8009870 <MX_TIM1_Init+0x19c>)
 8009852:	f7fd fbf1 	bl	8007038 <HAL_TIMEx_ConfigBreakDeadTime>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d001      	beq.n	8009860 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 800985c:	f001 fa1a 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009860:	4803      	ldr	r0, [pc, #12]	; (8009870 <MX_TIM1_Init+0x19c>)
 8009862:	f001 fef3 	bl	800b64c <HAL_TIM_MspPostInit>

}
 8009866:	bf00      	nop
 8009868:	3758      	adds	r7, #88	; 0x58
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20000d60 	.word	0x20000d60
 8009874:	40010000 	.word	0x40010000

08009878 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08e      	sub	sp, #56	; 0x38
 800987c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800987e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009882:	2200      	movs	r2, #0
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	605a      	str	r2, [r3, #4]
 8009888:	609a      	str	r2, [r3, #8]
 800988a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800988c:	f107 0320 	add.w	r3, r7, #32
 8009890:	2200      	movs	r2, #0
 8009892:	601a      	str	r2, [r3, #0]
 8009894:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009896:	1d3b      	adds	r3, r7, #4
 8009898:	2200      	movs	r2, #0
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	605a      	str	r2, [r3, #4]
 800989e:	609a      	str	r2, [r3, #8]
 80098a0:	60da      	str	r2, [r3, #12]
 80098a2:	611a      	str	r2, [r3, #16]
 80098a4:	615a      	str	r2, [r3, #20]
 80098a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80098a8:	4b2b      	ldr	r3, [pc, #172]	; (8009958 <MX_TIM2_Init+0xe0>)
 80098aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80098ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80098b0:	4b29      	ldr	r3, [pc, #164]	; (8009958 <MX_TIM2_Init+0xe0>)
 80098b2:	2207      	movs	r2, #7
 80098b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80098b6:	4b28      	ldr	r3, [pc, #160]	; (8009958 <MX_TIM2_Init+0xe0>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80098bc:	4b26      	ldr	r3, [pc, #152]	; (8009958 <MX_TIM2_Init+0xe0>)
 80098be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80098c4:	4b24      	ldr	r3, [pc, #144]	; (8009958 <MX_TIM2_Init+0xe0>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80098ca:	4b23      	ldr	r3, [pc, #140]	; (8009958 <MX_TIM2_Init+0xe0>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80098d0:	4821      	ldr	r0, [pc, #132]	; (8009958 <MX_TIM2_Init+0xe0>)
 80098d2:	f7fc f8b9 	bl	8005a48 <HAL_TIM_Base_Init>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80098dc:	f001 f9da 	bl	800ac94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80098e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80098e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80098ea:	4619      	mov	r1, r3
 80098ec:	481a      	ldr	r0, [pc, #104]	; (8009958 <MX_TIM2_Init+0xe0>)
 80098ee:	f7fc fded 	bl	80064cc <HAL_TIM_ConfigClockSource>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80098f8:	f001 f9cc 	bl	800ac94 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80098fc:	4816      	ldr	r0, [pc, #88]	; (8009958 <MX_TIM2_Init+0xe0>)
 80098fe:	f7fc f916 	bl	8005b2e <HAL_TIM_OC_Init>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8009908:	f001 f9c4 	bl	800ac94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800990c:	2300      	movs	r3, #0
 800990e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009910:	2300      	movs	r3, #0
 8009912:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009914:	f107 0320 	add.w	r3, r7, #32
 8009918:	4619      	mov	r1, r3
 800991a:	480f      	ldr	r0, [pc, #60]	; (8009958 <MX_TIM2_Init+0xe0>)
 800991c:	f7fd fb10 	bl	8006f40 <HAL_TIMEx_MasterConfigSynchronization>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8009926:	f001 f9b5 	bl	800ac94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800992a:	2300      	movs	r3, #0
 800992c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009932:	2300      	movs	r3, #0
 8009934:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009936:	2300      	movs	r3, #0
 8009938:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800993a:	1d3b      	adds	r3, r7, #4
 800993c:	2200      	movs	r2, #0
 800993e:	4619      	mov	r1, r3
 8009940:	4805      	ldr	r0, [pc, #20]	; (8009958 <MX_TIM2_Init+0xe0>)
 8009942:	f7fc fc01 	bl	8006148 <HAL_TIM_OC_ConfigChannel>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800994c:	f001 f9a2 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009950:	bf00      	nop
 8009952:	3738      	adds	r7, #56	; 0x38
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	20000ee8 	.word	0x20000ee8

0800995c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08e      	sub	sp, #56	; 0x38
 8009960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009962:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009966:	2200      	movs	r2, #0
 8009968:	601a      	str	r2, [r3, #0]
 800996a:	605a      	str	r2, [r3, #4]
 800996c:	609a      	str	r2, [r3, #8]
 800996e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009970:	f107 0320 	add.w	r3, r7, #32
 8009974:	2200      	movs	r2, #0
 8009976:	601a      	str	r2, [r3, #0]
 8009978:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800997a:	1d3b      	adds	r3, r7, #4
 800997c:	2200      	movs	r2, #0
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	605a      	str	r2, [r3, #4]
 8009982:	609a      	str	r2, [r3, #8]
 8009984:	60da      	str	r2, [r3, #12]
 8009986:	611a      	str	r2, [r3, #16]
 8009988:	615a      	str	r2, [r3, #20]
 800998a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800998c:	4b2b      	ldr	r3, [pc, #172]	; (8009a3c <MX_TIM3_Init+0xe0>)
 800998e:	4a2c      	ldr	r2, [pc, #176]	; (8009a40 <MX_TIM3_Init+0xe4>)
 8009990:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8009992:	4b2a      	ldr	r3, [pc, #168]	; (8009a3c <MX_TIM3_Init+0xe0>)
 8009994:	2253      	movs	r2, #83	; 0x53
 8009996:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009998:	4b28      	ldr	r3, [pc, #160]	; (8009a3c <MX_TIM3_Init+0xe0>)
 800999a:	2200      	movs	r2, #0
 800999c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800999e:	4b27      	ldr	r3, [pc, #156]	; (8009a3c <MX_TIM3_Init+0xe0>)
 80099a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80099a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099a6:	4b25      	ldr	r3, [pc, #148]	; (8009a3c <MX_TIM3_Init+0xe0>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099ac:	4b23      	ldr	r3, [pc, #140]	; (8009a3c <MX_TIM3_Init+0xe0>)
 80099ae:	2200      	movs	r2, #0
 80099b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80099b2:	4822      	ldr	r0, [pc, #136]	; (8009a3c <MX_TIM3_Init+0xe0>)
 80099b4:	f7fc f848 	bl	8005a48 <HAL_TIM_Base_Init>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80099be:	f001 f969 	bl	800ac94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80099c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80099c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099cc:	4619      	mov	r1, r3
 80099ce:	481b      	ldr	r0, [pc, #108]	; (8009a3c <MX_TIM3_Init+0xe0>)
 80099d0:	f7fc fd7c 	bl	80064cc <HAL_TIM_ConfigClockSource>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80099da:	f001 f95b 	bl	800ac94 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80099de:	4817      	ldr	r0, [pc, #92]	; (8009a3c <MX_TIM3_Init+0xe0>)
 80099e0:	f7fc f8a5 	bl	8005b2e <HAL_TIM_OC_Init>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80099ea:	f001 f953 	bl	800ac94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80099ee:	2300      	movs	r3, #0
 80099f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099f2:	2300      	movs	r3, #0
 80099f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80099f6:	f107 0320 	add.w	r3, r7, #32
 80099fa:	4619      	mov	r1, r3
 80099fc:	480f      	ldr	r0, [pc, #60]	; (8009a3c <MX_TIM3_Init+0xe0>)
 80099fe:	f7fd fa9f 	bl	8006f40 <HAL_TIMEx_MasterConfigSynchronization>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8009a08:	f001 f944 	bl	800ac94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8009a0c:	2330      	movs	r3, #48	; 0x30
 8009a0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a14:	2300      	movs	r3, #0
 8009a16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009a1c:	1d3b      	adds	r3, r7, #4
 8009a1e:	2200      	movs	r2, #0
 8009a20:	4619      	mov	r1, r3
 8009a22:	4806      	ldr	r0, [pc, #24]	; (8009a3c <MX_TIM3_Init+0xe0>)
 8009a24:	f7fc fb90 	bl	8006148 <HAL_TIM_OC_ConfigChannel>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8009a2e:	f001 f931 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8009a32:	bf00      	nop
 8009a34:	3738      	adds	r7, #56	; 0x38
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20000b50 	.word	0x20000b50
 8009a40:	40000400 	.word	0x40000400

08009a44 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009a4a:	f107 0308 	add.w	r3, r7, #8
 8009a4e:	2200      	movs	r2, #0
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	605a      	str	r2, [r3, #4]
 8009a54:	609a      	str	r2, [r3, #8]
 8009a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a58:	463b      	mov	r3, r7
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]
 8009a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8009a60:	4b1d      	ldr	r3, [pc, #116]	; (8009ad8 <MX_TIM5_Init+0x94>)
 8009a62:	4a1e      	ldr	r2, [pc, #120]	; (8009adc <MX_TIM5_Init+0x98>)
 8009a64:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 839;
 8009a66:	4b1c      	ldr	r3, [pc, #112]	; (8009ad8 <MX_TIM5_Init+0x94>)
 8009a68:	f240 3247 	movw	r2, #839	; 0x347
 8009a6c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a6e:	4b1a      	ldr	r3, [pc, #104]	; (8009ad8 <MX_TIM5_Init+0x94>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8009a74:	4b18      	ldr	r3, [pc, #96]	; (8009ad8 <MX_TIM5_Init+0x94>)
 8009a76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a7a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a7c:	4b16      	ldr	r3, [pc, #88]	; (8009ad8 <MX_TIM5_Init+0x94>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a82:	4b15      	ldr	r3, [pc, #84]	; (8009ad8 <MX_TIM5_Init+0x94>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009a88:	4813      	ldr	r0, [pc, #76]	; (8009ad8 <MX_TIM5_Init+0x94>)
 8009a8a:	f7fb ffdd 	bl	8005a48 <HAL_TIM_Base_Init>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8009a94:	f001 f8fe 	bl	800ac94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8009a9e:	f107 0308 	add.w	r3, r7, #8
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	480c      	ldr	r0, [pc, #48]	; (8009ad8 <MX_TIM5_Init+0x94>)
 8009aa6:	f7fc fd11 	bl	80064cc <HAL_TIM_ConfigClockSource>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8009ab0:	f001 f8f0 	bl	800ac94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009abc:	463b      	mov	r3, r7
 8009abe:	4619      	mov	r1, r3
 8009ac0:	4805      	ldr	r0, [pc, #20]	; (8009ad8 <MX_TIM5_Init+0x94>)
 8009ac2:	f7fd fa3d 	bl	8006f40 <HAL_TIMEx_MasterConfigSynchronization>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d001      	beq.n	8009ad0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8009acc:	f001 f8e2 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8009ad0:	bf00      	nop
 8009ad2:	3718      	adds	r7, #24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	20000b0c 	.word	0x20000b0c
 8009adc:	40000c00 	.word	0x40000c00

08009ae0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ae6:	463b      	mov	r3, r7
 8009ae8:	2200      	movs	r2, #0
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8009aee:	4b15      	ldr	r3, [pc, #84]	; (8009b44 <MX_TIM6_Init+0x64>)
 8009af0:	4a15      	ldr	r2, [pc, #84]	; (8009b48 <MX_TIM6_Init+0x68>)
 8009af2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8009af4:	4b13      	ldr	r3, [pc, #76]	; (8009b44 <MX_TIM6_Init+0x64>)
 8009af6:	2253      	movs	r2, #83	; 0x53
 8009af8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009afa:	4b12      	ldr	r3, [pc, #72]	; (8009b44 <MX_TIM6_Init+0x64>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8009b00:	4b10      	ldr	r3, [pc, #64]	; (8009b44 <MX_TIM6_Init+0x64>)
 8009b02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009b06:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b08:	4b0e      	ldr	r3, [pc, #56]	; (8009b44 <MX_TIM6_Init+0x64>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009b0e:	480d      	ldr	r0, [pc, #52]	; (8009b44 <MX_TIM6_Init+0x64>)
 8009b10:	f7fb ff9a 	bl	8005a48 <HAL_TIM_Base_Init>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8009b1a:	f001 f8bb 	bl	800ac94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b22:	2300      	movs	r3, #0
 8009b24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009b26:	463b      	mov	r3, r7
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4806      	ldr	r0, [pc, #24]	; (8009b44 <MX_TIM6_Init+0x64>)
 8009b2c:	f7fd fa08 	bl	8006f40 <HAL_TIMEx_MasterConfigSynchronization>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8009b36:	f001 f8ad 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009b3a:	bf00      	nop
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20000d20 	.word	0x20000d20
 8009b48:	40001000 	.word	0x40001000

08009b4c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b08c      	sub	sp, #48	; 0x30
 8009b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009b52:	f107 030c 	add.w	r3, r7, #12
 8009b56:	2224      	movs	r2, #36	; 0x24
 8009b58:	2100      	movs	r1, #0
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f002 f83a 	bl	800bbd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b60:	1d3b      	adds	r3, r7, #4
 8009b62:	2200      	movs	r2, #0
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009b68:	4b22      	ldr	r3, [pc, #136]	; (8009bf4 <MX_TIM8_Init+0xa8>)
 8009b6a:	4a23      	ldr	r2, [pc, #140]	; (8009bf8 <MX_TIM8_Init+0xac>)
 8009b6c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009b6e:	4b21      	ldr	r3, [pc, #132]	; (8009bf4 <MX_TIM8_Init+0xa8>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b74:	4b1f      	ldr	r3, [pc, #124]	; (8009bf4 <MX_TIM8_Init+0xa8>)
 8009b76:	2200      	movs	r2, #0
 8009b78:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1999;
 8009b7a:	4b1e      	ldr	r3, [pc, #120]	; (8009bf4 <MX_TIM8_Init+0xa8>)
 8009b7c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8009b80:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b82:	4b1c      	ldr	r3, [pc, #112]	; (8009bf4 <MX_TIM8_Init+0xa8>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009b88:	4b1a      	ldr	r3, [pc, #104]	; (8009bf4 <MX_TIM8_Init+0xa8>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b8e:	4b19      	ldr	r3, [pc, #100]	; (8009bf4 <MX_TIM8_Init+0xa8>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009b94:	2303      	movs	r3, #3
 8009b96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009bac:	2301      	movs	r3, #1
 8009bae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8009bb8:	f107 030c 	add.w	r3, r7, #12
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	480d      	ldr	r0, [pc, #52]	; (8009bf4 <MX_TIM8_Init+0xa8>)
 8009bc0:	f7fc f8d1 	bl	8005d66 <HAL_TIM_Encoder_Init>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8009bca:	f001 f863 	bl	800ac94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009bce:	2320      	movs	r3, #32
 8009bd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009bd6:	1d3b      	adds	r3, r7, #4
 8009bd8:	4619      	mov	r1, r3
 8009bda:	4806      	ldr	r0, [pc, #24]	; (8009bf4 <MX_TIM8_Init+0xa8>)
 8009bdc:	f7fd f9b0 	bl	8006f40 <HAL_TIMEx_MasterConfigSynchronization>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8009be6:	f001 f855 	bl	800ac94 <Error_Handler>
  //HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); // this didn't seem to be necessary


  /* USER CODE END TIM8_Init 2 */

}
 8009bea:	bf00      	nop
 8009bec:	3730      	adds	r7, #48	; 0x30
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	200004d0 	.word	0x200004d0
 8009bf8:	40010400 	.word	0x40010400

08009bfc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08c      	sub	sp, #48	; 0x30
 8009c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009c02:	f107 0320 	add.w	r3, r7, #32
 8009c06:	2200      	movs	r2, #0
 8009c08:	601a      	str	r2, [r3, #0]
 8009c0a:	605a      	str	r2, [r3, #4]
 8009c0c:	609a      	str	r2, [r3, #8]
 8009c0e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009c10:	1d3b      	adds	r3, r7, #4
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]
 8009c16:	605a      	str	r2, [r3, #4]
 8009c18:	609a      	str	r2, [r3, #8]
 8009c1a:	60da      	str	r2, [r3, #12]
 8009c1c:	611a      	str	r2, [r3, #16]
 8009c1e:	615a      	str	r2, [r3, #20]
 8009c20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8009c22:	4b2d      	ldr	r3, [pc, #180]	; (8009cd8 <MX_TIM9_Init+0xdc>)
 8009c24:	4a2d      	ldr	r2, [pc, #180]	; (8009cdc <MX_TIM9_Init+0xe0>)
 8009c26:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 8009c28:	4b2b      	ldr	r3, [pc, #172]	; (8009cd8 <MX_TIM9_Init+0xdc>)
 8009c2a:	22a7      	movs	r2, #167	; 0xa7
 8009c2c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c2e:	4b2a      	ldr	r3, [pc, #168]	; (8009cd8 <MX_TIM9_Init+0xdc>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 8009c34:	4b28      	ldr	r3, [pc, #160]	; (8009cd8 <MX_TIM9_Init+0xdc>)
 8009c36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c3a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c3c:	4b26      	ldr	r3, [pc, #152]	; (8009cd8 <MX_TIM9_Init+0xdc>)
 8009c3e:	2200      	movs	r2, #0
 8009c40:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c42:	4b25      	ldr	r3, [pc, #148]	; (8009cd8 <MX_TIM9_Init+0xdc>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8009c48:	4823      	ldr	r0, [pc, #140]	; (8009cd8 <MX_TIM9_Init+0xdc>)
 8009c4a:	f7fb fefd 	bl	8005a48 <HAL_TIM_Base_Init>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8009c54:	f001 f81e 	bl	800ac94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c5c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8009c5e:	f107 0320 	add.w	r3, r7, #32
 8009c62:	4619      	mov	r1, r3
 8009c64:	481c      	ldr	r0, [pc, #112]	; (8009cd8 <MX_TIM9_Init+0xdc>)
 8009c66:	f7fc fc31 	bl	80064cc <HAL_TIM_ConfigClockSource>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8009c70:	f001 f810 	bl	800ac94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8009c74:	4818      	ldr	r0, [pc, #96]	; (8009cd8 <MX_TIM9_Init+0xdc>)
 8009c76:	f7fb ffcd 	bl	8005c14 <HAL_TIM_PWM_Init>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8009c80:	f001 f808 	bl	800ac94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009c84:	2360      	movs	r3, #96	; 0x60
 8009c86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8009c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009c8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009c92:	2300      	movs	r3, #0
 8009c94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009c96:	1d3b      	adds	r3, r7, #4
 8009c98:	2200      	movs	r2, #0
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	480e      	ldr	r0, [pc, #56]	; (8009cd8 <MX_TIM9_Init+0xdc>)
 8009c9e:	f7fc fb4f 	bl	8006340 <HAL_TIM_PWM_ConfigChannel>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d001      	beq.n	8009cac <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8009ca8:	f000 fff4 	bl	800ac94 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8009cac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009cb2:	1d3b      	adds	r3, r7, #4
 8009cb4:	2204      	movs	r2, #4
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	4807      	ldr	r0, [pc, #28]	; (8009cd8 <MX_TIM9_Init+0xdc>)
 8009cba:	f7fc fb41 	bl	8006340 <HAL_TIM_PWM_ConfigChannel>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <MX_TIM9_Init+0xcc>
  {
    Error_Handler();
 8009cc4:	f000 ffe6 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8009cc8:	4803      	ldr	r0, [pc, #12]	; (8009cd8 <MX_TIM9_Init+0xdc>)
 8009cca:	f001 fcbf 	bl	800b64c <HAL_TIM_MspPostInit>

}
 8009cce:	bf00      	nop
 8009cd0:	3730      	adds	r7, #48	; 0x30
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20000e08 	.word	0x20000e08
 8009cdc:	40014000 	.word	0x40014000

08009ce0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b08c      	sub	sp, #48	; 0x30
 8009ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009ce6:	f107 0320 	add.w	r3, r7, #32
 8009cea:	2200      	movs	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	605a      	str	r2, [r3, #4]
 8009cf0:	609a      	str	r2, [r3, #8]
 8009cf2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009cf4:	1d3b      	adds	r3, r7, #4
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	601a      	str	r2, [r3, #0]
 8009cfa:	605a      	str	r2, [r3, #4]
 8009cfc:	609a      	str	r2, [r3, #8]
 8009cfe:	60da      	str	r2, [r3, #12]
 8009d00:	611a      	str	r2, [r3, #16]
 8009d02:	615a      	str	r2, [r3, #20]
 8009d04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8009d06:	4b24      	ldr	r3, [pc, #144]	; (8009d98 <MX_TIM12_Init+0xb8>)
 8009d08:	4a24      	ldr	r2, [pc, #144]	; (8009d9c <MX_TIM12_Init+0xbc>)
 8009d0a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 7;
 8009d0c:	4b22      	ldr	r3, [pc, #136]	; (8009d98 <MX_TIM12_Init+0xb8>)
 8009d0e:	2207      	movs	r2, #7
 8009d10:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d12:	4b21      	ldr	r3, [pc, #132]	; (8009d98 <MX_TIM12_Init+0xb8>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8009d18:	4b1f      	ldr	r3, [pc, #124]	; (8009d98 <MX_TIM12_Init+0xb8>)
 8009d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d1e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d20:	4b1d      	ldr	r3, [pc, #116]	; (8009d98 <MX_TIM12_Init+0xb8>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009d26:	4b1c      	ldr	r3, [pc, #112]	; (8009d98 <MX_TIM12_Init+0xb8>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8009d2c:	481a      	ldr	r0, [pc, #104]	; (8009d98 <MX_TIM12_Init+0xb8>)
 8009d2e:	f7fb fe8b 	bl	8005a48 <HAL_TIM_Base_Init>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8009d38:	f000 ffac 	bl	800ac94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d40:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8009d42:	f107 0320 	add.w	r3, r7, #32
 8009d46:	4619      	mov	r1, r3
 8009d48:	4813      	ldr	r0, [pc, #76]	; (8009d98 <MX_TIM12_Init+0xb8>)
 8009d4a:	f7fc fbbf 	bl	80064cc <HAL_TIM_ConfigClockSource>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d001      	beq.n	8009d58 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8009d54:	f000 ff9e 	bl	800ac94 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 8009d58:	480f      	ldr	r0, [pc, #60]	; (8009d98 <MX_TIM12_Init+0xb8>)
 8009d5a:	f7fb fee8 	bl	8005b2e <HAL_TIM_OC_Init>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8009d64:	f000 ff96 	bl	800ac94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009d70:	2300      	movs	r3, #0
 8009d72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009d74:	2300      	movs	r3, #0
 8009d76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009d78:	1d3b      	adds	r3, r7, #4
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	4806      	ldr	r0, [pc, #24]	; (8009d98 <MX_TIM12_Init+0xb8>)
 8009d80:	f7fc f9e2 	bl	8006148 <HAL_TIM_OC_ConfigChannel>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8009d8a:	f000 ff83 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8009d8e:	bf00      	nop
 8009d90:	3730      	adds	r7, #48	; 0x30
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20000fb0 	.word	0x20000fb0
 8009d9c:	40001800 	.word	0x40001800

08009da0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8009da6:	463b      	mov	r3, r7
 8009da8:	2200      	movs	r2, #0
 8009daa:	601a      	str	r2, [r3, #0]
 8009dac:	605a      	str	r2, [r3, #4]
 8009dae:	609a      	str	r2, [r3, #8]
 8009db0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8009db2:	4b1c      	ldr	r3, [pc, #112]	; (8009e24 <MX_TIM13_Init+0x84>)
 8009db4:	4a1c      	ldr	r2, [pc, #112]	; (8009e28 <MX_TIM13_Init+0x88>)
 8009db6:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8009db8:	4b1a      	ldr	r3, [pc, #104]	; (8009e24 <MX_TIM13_Init+0x84>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009dbe:	4b19      	ldr	r3, [pc, #100]	; (8009e24 <MX_TIM13_Init+0x84>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8009dc4:	4b17      	ldr	r3, [pc, #92]	; (8009e24 <MX_TIM13_Init+0x84>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009dca:	4b16      	ldr	r3, [pc, #88]	; (8009e24 <MX_TIM13_Init+0x84>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009dd0:	4b14      	ldr	r3, [pc, #80]	; (8009e24 <MX_TIM13_Init+0x84>)
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8009dd6:	4813      	ldr	r0, [pc, #76]	; (8009e24 <MX_TIM13_Init+0x84>)
 8009dd8:	f7fb fe36 	bl	8005a48 <HAL_TIM_Base_Init>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <MX_TIM13_Init+0x46>
  {
    Error_Handler();
 8009de2:	f000 ff57 	bl	800ac94 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8009de6:	480f      	ldr	r0, [pc, #60]	; (8009e24 <MX_TIM13_Init+0x84>)
 8009de8:	f7fb ff88 	bl	8005cfc <HAL_TIM_IC_Init>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <MX_TIM13_Init+0x56>
  {
    Error_Handler();
 8009df2:	f000 ff4f 	bl	800ac94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8009df6:	2300      	movs	r3, #0
 8009df8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8009e02:	2300      	movs	r3, #0
 8009e04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8009e06:	463b      	mov	r3, r7
 8009e08:	2200      	movs	r2, #0
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	4805      	ldr	r0, [pc, #20]	; (8009e24 <MX_TIM13_Init+0x84>)
 8009e0e:	f7fc f9fb 	bl	8006208 <HAL_TIM_IC_ConfigChannel>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <MX_TIM13_Init+0x7c>
  {
    Error_Handler();
 8009e18:	f000 ff3c 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8009e1c:	bf00      	nop
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	20000c5c 	.word	0x20000c5c
 8009e28:	40001c00 	.word	0x40001c00

08009e2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009e30:	4b11      	ldr	r3, [pc, #68]	; (8009e78 <MX_USART3_UART_Init+0x4c>)
 8009e32:	4a12      	ldr	r2, [pc, #72]	; (8009e7c <MX_USART3_UART_Init+0x50>)
 8009e34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8009e36:	4b10      	ldr	r3, [pc, #64]	; (8009e78 <MX_USART3_UART_Init+0x4c>)
 8009e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009e3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009e3e:	4b0e      	ldr	r3, [pc, #56]	; (8009e78 <MX_USART3_UART_Init+0x4c>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009e44:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <MX_USART3_UART_Init+0x4c>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009e4a:	4b0b      	ldr	r3, [pc, #44]	; (8009e78 <MX_USART3_UART_Init+0x4c>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009e50:	4b09      	ldr	r3, [pc, #36]	; (8009e78 <MX_USART3_UART_Init+0x4c>)
 8009e52:	220c      	movs	r2, #12
 8009e54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009e56:	4b08      	ldr	r3, [pc, #32]	; (8009e78 <MX_USART3_UART_Init+0x4c>)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009e5c:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <MX_USART3_UART_Init+0x4c>)
 8009e5e:	2200      	movs	r2, #0
 8009e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009e62:	4805      	ldr	r0, [pc, #20]	; (8009e78 <MX_USART3_UART_Init+0x4c>)
 8009e64:	f7fd f973 	bl	800714e <HAL_UART_Init>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8009e6e:	f000 ff11 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8009e72:	bf00      	nop
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	20000510 	.word	0x20000510
 8009e7c:	40004800 	.word	0x40004800

08009e80 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e84:	4b14      	ldr	r3, [pc, #80]	; (8009ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009e86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009e8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009e8c:	4b12      	ldr	r3, [pc, #72]	; (8009ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009e8e:	2204      	movs	r2, #4
 8009e90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009e92:	4b11      	ldr	r3, [pc, #68]	; (8009ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009e94:	2202      	movs	r2, #2
 8009e96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009e98:	4b0f      	ldr	r3, [pc, #60]	; (8009ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009e9e:	4b0e      	ldr	r3, [pc, #56]	; (8009ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ea4:	4b0c      	ldr	r3, [pc, #48]	; (8009ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009eaa:	4b0b      	ldr	r3, [pc, #44]	; (8009ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009eb0:	4b09      	ldr	r3, [pc, #36]	; (8009ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009eb6:	4b08      	ldr	r3, [pc, #32]	; (8009ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009ebc:	4b06      	ldr	r3, [pc, #24]	; (8009ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009ec2:	4805      	ldr	r0, [pc, #20]	; (8009ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009ec4:	f7f9 fffb 	bl	8003ebe <HAL_PCD_Init>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8009ece:	f000 fee1 	bl	800ac94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8009ed2:	bf00      	nop
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	200005ec 	.word	0x200005ec

08009edc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	607b      	str	r3, [r7, #4]
 8009ee6:	4b1f      	ldr	r3, [pc, #124]	; (8009f64 <MX_DMA_Init+0x88>)
 8009ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eea:	4a1e      	ldr	r2, [pc, #120]	; (8009f64 <MX_DMA_Init+0x88>)
 8009eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8009ef2:	4b1c      	ldr	r3, [pc, #112]	; (8009f64 <MX_DMA_Init+0x88>)
 8009ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009efa:	607b      	str	r3, [r7, #4]
 8009efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009efe:	2300      	movs	r3, #0
 8009f00:	603b      	str	r3, [r7, #0]
 8009f02:	4b18      	ldr	r3, [pc, #96]	; (8009f64 <MX_DMA_Init+0x88>)
 8009f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f06:	4a17      	ldr	r2, [pc, #92]	; (8009f64 <MX_DMA_Init+0x88>)
 8009f08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8009f0e:	4b15      	ldr	r3, [pc, #84]	; (8009f64 <MX_DMA_Init+0x88>)
 8009f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f16:	603b      	str	r3, [r7, #0]
 8009f18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	200e      	movs	r0, #14
 8009f20:	f7f8 fa45 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8009f24:	200e      	movs	r0, #14
 8009f26:	f7f8 fa5e 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	2038      	movs	r0, #56	; 0x38
 8009f30:	f7f8 fa3d 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8009f34:	2038      	movs	r0, #56	; 0x38
 8009f36:	f7f8 fa56 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	2039      	movs	r0, #57	; 0x39
 8009f40:	f7f8 fa35 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8009f44:	2039      	movs	r0, #57	; 0x39
 8009f46:	f7f8 fa4e 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	203a      	movs	r0, #58	; 0x3a
 8009f50:	f7f8 fa2d 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8009f54:	203a      	movs	r0, #58	; 0x3a
 8009f56:	f7f8 fa46 	bl	80023e6 <HAL_NVIC_EnableIRQ>

}
 8009f5a:	bf00      	nop
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	40023800 	.word	0x40023800

08009f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b08c      	sub	sp, #48	; 0x30
 8009f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f6e:	f107 031c 	add.w	r3, r7, #28
 8009f72:	2200      	movs	r2, #0
 8009f74:	601a      	str	r2, [r3, #0]
 8009f76:	605a      	str	r2, [r3, #4]
 8009f78:	609a      	str	r2, [r3, #8]
 8009f7a:	60da      	str	r2, [r3, #12]
 8009f7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009f7e:	2300      	movs	r3, #0
 8009f80:	61bb      	str	r3, [r7, #24]
 8009f82:	4b61      	ldr	r3, [pc, #388]	; (800a108 <MX_GPIO_Init+0x1a0>)
 8009f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f86:	4a60      	ldr	r2, [pc, #384]	; (800a108 <MX_GPIO_Init+0x1a0>)
 8009f88:	f043 0310 	orr.w	r3, r3, #16
 8009f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8009f8e:	4b5e      	ldr	r3, [pc, #376]	; (800a108 <MX_GPIO_Init+0x1a0>)
 8009f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f92:	f003 0310 	and.w	r3, r3, #16
 8009f96:	61bb      	str	r3, [r7, #24]
 8009f98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	617b      	str	r3, [r7, #20]
 8009f9e:	4b5a      	ldr	r3, [pc, #360]	; (800a108 <MX_GPIO_Init+0x1a0>)
 8009fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa2:	4a59      	ldr	r2, [pc, #356]	; (800a108 <MX_GPIO_Init+0x1a0>)
 8009fa4:	f043 0304 	orr.w	r3, r3, #4
 8009fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8009faa:	4b57      	ldr	r3, [pc, #348]	; (800a108 <MX_GPIO_Init+0x1a0>)
 8009fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fae:	f003 0304 	and.w	r3, r3, #4
 8009fb2:	617b      	str	r3, [r7, #20]
 8009fb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	613b      	str	r3, [r7, #16]
 8009fba:	4b53      	ldr	r3, [pc, #332]	; (800a108 <MX_GPIO_Init+0x1a0>)
 8009fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fbe:	4a52      	ldr	r2, [pc, #328]	; (800a108 <MX_GPIO_Init+0x1a0>)
 8009fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8009fc6:	4b50      	ldr	r3, [pc, #320]	; (800a108 <MX_GPIO_Init+0x1a0>)
 8009fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fce:	613b      	str	r3, [r7, #16]
 8009fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60fb      	str	r3, [r7, #12]
 8009fd6:	4b4c      	ldr	r3, [pc, #304]	; (800a108 <MX_GPIO_Init+0x1a0>)
 8009fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fda:	4a4b      	ldr	r2, [pc, #300]	; (800a108 <MX_GPIO_Init+0x1a0>)
 8009fdc:	f043 0301 	orr.w	r3, r3, #1
 8009fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8009fe2:	4b49      	ldr	r3, [pc, #292]	; (800a108 <MX_GPIO_Init+0x1a0>)
 8009fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	60fb      	str	r3, [r7, #12]
 8009fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60bb      	str	r3, [r7, #8]
 8009ff2:	4b45      	ldr	r3, [pc, #276]	; (800a108 <MX_GPIO_Init+0x1a0>)
 8009ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff6:	4a44      	ldr	r2, [pc, #272]	; (800a108 <MX_GPIO_Init+0x1a0>)
 8009ff8:	f043 0302 	orr.w	r3, r3, #2
 8009ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8009ffe:	4b42      	ldr	r3, [pc, #264]	; (800a108 <MX_GPIO_Init+0x1a0>)
 800a000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a002:	f003 0302 	and.w	r3, r3, #2
 800a006:	60bb      	str	r3, [r7, #8]
 800a008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a00a:	2300      	movs	r3, #0
 800a00c:	607b      	str	r3, [r7, #4]
 800a00e:	4b3e      	ldr	r3, [pc, #248]	; (800a108 <MX_GPIO_Init+0x1a0>)
 800a010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a012:	4a3d      	ldr	r2, [pc, #244]	; (800a108 <MX_GPIO_Init+0x1a0>)
 800a014:	f043 0308 	orr.w	r3, r3, #8
 800a018:	6313      	str	r3, [r2, #48]	; 0x30
 800a01a:	4b3b      	ldr	r3, [pc, #236]	; (800a108 <MX_GPIO_Init+0x1a0>)
 800a01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01e:	f003 0308 	and.w	r3, r3, #8
 800a022:	607b      	str	r3, [r7, #4]
 800a024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin, GPIO_PIN_RESET);
 800a026:	2200      	movs	r2, #0
 800a028:	f24c 0118 	movw	r1, #49176	; 0xc018
 800a02c:	4837      	ldr	r0, [pc, #220]	; (800a10c <MX_GPIO_Init+0x1a4>)
 800a02e:	f7f8 ff73 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800a032:	2200      	movs	r2, #0
 800a034:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a038:	4835      	ldr	r0, [pc, #212]	; (800a110 <MX_GPIO_Init+0x1a8>)
 800a03a:	f7f8 ff6d 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 800a03e:	2200      	movs	r2, #0
 800a040:	f64b 0180 	movw	r1, #47232	; 0xb880
 800a044:	4833      	ldr	r0, [pc, #204]	; (800a114 <MX_GPIO_Init+0x1ac>)
 800a046:	f7f8 ff67 	bl	8002f18 <HAL_GPIO_WritePin>
                          |nSCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin EN_GATE_Pin M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin;
 800a04a:	f24c 0318 	movw	r3, #49176	; 0xc018
 800a04e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a050:	2301      	movs	r3, #1
 800a052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a054:	2300      	movs	r3, #0
 800a056:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a058:	2300      	movs	r3, #0
 800a05a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a05c:	f107 031c 	add.w	r3, r7, #28
 800a060:	4619      	mov	r1, r3
 800a062:	482a      	ldr	r0, [pc, #168]	; (800a10c <MX_GPIO_Init+0x1a4>)
 800a064:	f7f8 fdbe 	bl	8002be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a06c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a06e:	2301      	movs	r3, #1
 800a070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a072:	2300      	movs	r3, #0
 800a074:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a076:	2300      	movs	r3, #0
 800a078:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a07a:	f107 031c 	add.w	r3, r7, #28
 800a07e:	4619      	mov	r1, r3
 800a080:	4823      	ldr	r0, [pc, #140]	; (800a110 <MX_GPIO_Init+0x1a8>)
 800a082:	f7f8 fdaf 	bl	8002be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 debug1_out_Pin debug2_out_Pin ROT0_nCS_Pin 
                           nSCS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 800a086:	f64b 0380 	movw	r3, #47232	; 0xb880
 800a08a:	61fb      	str	r3, [r7, #28]
                          |nSCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a08c:	2301      	movs	r3, #1
 800a08e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a090:	2300      	movs	r3, #0
 800a092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a094:	2300      	movs	r3, #0
 800a096:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a098:	f107 031c 	add.w	r3, r7, #28
 800a09c:	4619      	mov	r1, r3
 800a09e:	481d      	ldr	r0, [pc, #116]	; (800a114 <MX_GPIO_Init+0x1ac>)
 800a0a0:	f7f8 fda0 	bl	8002be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : debug1_in_Pin */
  GPIO_InitStruct.Pin = debug1_in_Pin;
 800a0a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a0a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(debug1_in_GPIO_Port, &GPIO_InitStruct);
 800a0b2:	f107 031c 	add.w	r3, r7, #28
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4816      	ldr	r0, [pc, #88]	; (800a114 <MX_GPIO_Init+0x1ac>)
 800a0ba:	f7f8 fd93 	bl	8002be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT0_I_W_Pin */
  GPIO_InitStruct.Pin = ROT0_I_W_Pin;
 800a0be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a0c4:	4b14      	ldr	r3, [pc, #80]	; (800a118 <MX_GPIO_Init+0x1b0>)
 800a0c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ROT0_I_W_GPIO_Port, &GPIO_InitStruct);
 800a0cc:	f107 031c 	add.w	r3, r7, #28
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	480f      	ldr	r0, [pc, #60]	; (800a110 <MX_GPIO_Init+0x1a8>)
 800a0d4:	f7f8 fd86 	bl	8002be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 800a0d8:	2370      	movs	r3, #112	; 0x70
 800a0da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a0e4:	f107 031c 	add.w	r3, r7, #28
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	480a      	ldr	r0, [pc, #40]	; (800a114 <MX_GPIO_Init+0x1ac>)
 800a0ec:	f7f8 fd7a 	bl	8002be4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	2017      	movs	r0, #23
 800a0f6:	f7f8 f95a 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a0fa:	2017      	movs	r0, #23
 800a0fc:	f7f8 f973 	bl	80023e6 <HAL_NVIC_EnableIRQ>

}
 800a100:	bf00      	nop
 800a102:	3730      	adds	r7, #48	; 0x30
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	40023800 	.word	0x40023800
 800a10c:	40021000 	.word	0x40021000
 800a110:	40020800 	.word	0x40020800
 800a114:	40020c00 	.word	0x40020c00
 800a118:	10110000 	.word	0x10110000

0800a11c <set_pwm_off>:

/* USER CODE BEGIN 4 */

void set_pwm_off(void){
 800a11c:	b480      	push	{r7}
 800a11e:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 800a120:	4b06      	ldr	r3, [pc, #24]	; (800a13c <set_pwm_off+0x20>)
 800a122:	2200      	movs	r2, #0
 800a124:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800a126:	4b05      	ldr	r3, [pc, #20]	; (800a13c <set_pwm_off+0x20>)
 800a128:	2200      	movs	r2, #0
 800a12a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800a12c:	4b03      	ldr	r3, [pc, #12]	; (800a13c <set_pwm_off+0x20>)
 800a12e:	2200      	movs	r2, #0
 800a130:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a132:	bf00      	nop
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	40010000 	.word	0x40010000

0800a140 <step_through_pole_angles>:

void step_through_pole_angles(void){
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
	normal_operation_enabled = false;
 800a146:	4b54      	ldr	r3, [pc, #336]	; (800a298 <step_through_pole_angles+0x158>)
 800a148:	2200      	movs	r2, #0
 800a14a:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800a14c:	f7ff ffe6 	bl	800a11c <set_pwm_off>
	//run_motor = 0;
	HAL_Delay(100);
 800a150:	2064      	movs	r0, #100	; 0x64
 800a152:	f7f6 ff75 	bl	8001040 <HAL_Delay>
	uint16_t step_through_amp = 5 * PWM_1PERCENT;
 800a156:	23cd      	movs	r3, #205	; 0xcd
 800a158:	81bb      	strh	r3, [r7, #12]
	for (uint8_t pole = 0; pole < N_POLES ; pole++){
 800a15a:	2300      	movs	r3, #0
 800a15c:	75fb      	strb	r3, [r7, #23]
 800a15e:	e02d      	b.n	800a1bc <step_through_pole_angles+0x7c>
		for (uint8_t ABC = 0; ABC < N_PHASES ; ABC++){
 800a160:	2300      	movs	r3, #0
 800a162:	75bb      	strb	r3, [r7, #22]
 800a164:	e024      	b.n	800a1b0 <step_through_pole_angles+0x70>
			set_pwm_off();
 800a166:	f7ff ffd9 	bl	800a11c <set_pwm_off>
			if (ABC==0){
 800a16a:	7dbb      	ldrb	r3, [r7, #22]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d103      	bne.n	800a178 <step_through_pole_angles+0x38>
				TIM1->CCR1 = step_through_amp;
 800a170:	4a4a      	ldr	r2, [pc, #296]	; (800a29c <step_through_pole_angles+0x15c>)
 800a172:	89bb      	ldrh	r3, [r7, #12]
 800a174:	6353      	str	r3, [r2, #52]	; 0x34
 800a176:	e009      	b.n	800a18c <step_through_pole_angles+0x4c>
			}
			else if (ABC==1){
 800a178:	7dbb      	ldrb	r3, [r7, #22]
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d103      	bne.n	800a186 <step_through_pole_angles+0x46>
				TIM1->CCR2 = step_through_amp;
 800a17e:	4a47      	ldr	r2, [pc, #284]	; (800a29c <step_through_pole_angles+0x15c>)
 800a180:	89bb      	ldrh	r3, [r7, #12]
 800a182:	6393      	str	r3, [r2, #56]	; 0x38
 800a184:	e002      	b.n	800a18c <step_through_pole_angles+0x4c>
			}
			else {
				TIM1->CCR3 = step_through_amp;
 800a186:	4a45      	ldr	r2, [pc, #276]	; (800a29c <step_through_pole_angles+0x15c>)
 800a188:	89bb      	ldrh	r3, [r7, #12]
 800a18a:	63d3      	str	r3, [r2, #60]	; 0x3c
			}
			HAL_Delay(200);
 800a18c:	20c8      	movs	r0, #200	; 0xc8
 800a18e:	f7f6 ff57 	bl	8001040 <HAL_Delay>
			pole_angles[pole * N_PHASES + ABC]=TIM8->CNT;
 800a192:	4b43      	ldr	r3, [pc, #268]	; (800a2a0 <step_through_pole_angles+0x160>)
 800a194:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a196:	7dfa      	ldrb	r2, [r7, #23]
 800a198:	4613      	mov	r3, r2
 800a19a:	005b      	lsls	r3, r3, #1
 800a19c:	441a      	add	r2, r3
 800a19e:	7dbb      	ldrb	r3, [r7, #22]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	b289      	uxth	r1, r1
 800a1a4:	4a3f      	ldr	r2, [pc, #252]	; (800a2a4 <step_through_pole_angles+0x164>)
 800a1a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t ABC = 0; ABC < N_PHASES ; ABC++){
 800a1aa:	7dbb      	ldrb	r3, [r7, #22]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	75bb      	strb	r3, [r7, #22]
 800a1b0:	7dbb      	ldrb	r3, [r7, #22]
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d9d7      	bls.n	800a166 <step_through_pole_angles+0x26>
	for (uint8_t pole = 0; pole < N_POLES ; pole++){
 800a1b6:	7dfb      	ldrb	r3, [r7, #23]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	75fb      	strb	r3, [r7, #23]
 800a1bc:	7dfb      	ldrb	r3, [r7, #23]
 800a1be:	2b06      	cmp	r3, #6
 800a1c0:	d9ce      	bls.n	800a160 <step_through_pole_angles+0x20>
		}
	}
	set_pwm_off();
 800a1c2:	f7ff ffab 	bl	800a11c <set_pwm_off>
	normal_operation_enabled = true;
 800a1c6:	4b34      	ldr	r3, [pc, #208]	; (800a298 <step_through_pole_angles+0x158>)
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	701a      	strb	r2, [r3, #0]

	float sum = 0;
 800a1cc:	f04f 0300 	mov.w	r3, #0
 800a1d0:	613b      	str	r3, [r7, #16]
	float enc_steps_per_A2B = (float)ENC_STEPS / (float)(N_POLES * N_PHASES);
 800a1d2:	4b35      	ldr	r3, [pc, #212]	; (800a2a8 <step_through_pole_angles+0x168>)
 800a1d4:	60bb      	str	r3, [r7, #8]
	float enc_steps_per_A2A = (float)ENC_STEPS / (float)N_POLES;
 800a1d6:	4b35      	ldr	r3, [pc, #212]	; (800a2ac <step_through_pole_angles+0x16c>)
 800a1d8:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < N_POLES * N_PHASES ; i++){
 800a1da:	2300      	movs	r3, #0
 800a1dc:	73fb      	strb	r3, [r7, #15]
 800a1de:	e053      	b.n	800a288 <step_through_pole_angles+0x148>
		float reduced_pole_angle = pole_angles[i] - i * enc_steps_per_A2B ;//should be 95.238=2000/21 = ENC_STEPS/ (N_POLES * N_PHASES)
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
 800a1e2:	4a30      	ldr	r2, [pc, #192]	; (800a2a4 <step_through_pole_angles+0x164>)
 800a1e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1e8:	ee07 3a90 	vmov	s15, r3
 800a1ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a1f0:	7bfb      	ldrb	r3, [r7, #15]
 800a1f2:	ee07 3a90 	vmov	s15, r3
 800a1f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a1fa:	edd7 7a02 	vldr	s15, [r7, #8]
 800a1fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a202:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a206:	edc7 7a00 	vstr	s15, [r7]
		if (reduced_pole_angle > -ENC_STEPS_HALF){
 800a20a:	edd7 7a00 	vldr	s15, [r7]
 800a20e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a2b0 <step_through_pole_angles+0x170>
 800a212:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a21a:	dd08      	ble.n	800a22e <step_through_pole_angles+0xee>
			sum += reduced_pole_angle;
 800a21c:	ed97 7a04 	vldr	s14, [r7, #16]
 800a220:	edd7 7a00 	vldr	s15, [r7]
 800a224:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a228:	edc7 7a04 	vstr	s15, [r7, #16]
 800a22c:	e00b      	b.n	800a246 <step_through_pole_angles+0x106>
		}
		else{
			sum += reduced_pole_angle + ENC_STEPS;
 800a22e:	edd7 7a00 	vldr	s15, [r7]
 800a232:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a2b4 <step_through_pole_angles+0x174>
 800a236:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a23a:	ed97 7a04 	vldr	s14, [r7, #16]
 800a23e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a242:	edc7 7a04 	vstr	s15, [r7, #16]
		}
		av_start_angle = sum / (float)(N_POLES * N_PHASES);
 800a246:	ed97 7a04 	vldr	s14, [r7, #16]
 800a24a:	eef3 6a05 	vmov.f32	s13, #53	; 0x41a80000  21.0
 800a24e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a252:	4b19      	ldr	r3, [pc, #100]	; (800a2b8 <step_through_pole_angles+0x178>)
 800a254:	edc3 7a00 	vstr	s15, [r3]
		while(av_start_angle > enc_steps_per_A2A){
 800a258:	e009      	b.n	800a26e <step_through_pole_angles+0x12e>
			av_start_angle -= enc_steps_per_A2A;
 800a25a:	4b17      	ldr	r3, [pc, #92]	; (800a2b8 <step_through_pole_angles+0x178>)
 800a25c:	ed93 7a00 	vldr	s14, [r3]
 800a260:	edd7 7a01 	vldr	s15, [r7, #4]
 800a264:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a268:	4b13      	ldr	r3, [pc, #76]	; (800a2b8 <step_through_pole_angles+0x178>)
 800a26a:	edc3 7a00 	vstr	s15, [r3]
		while(av_start_angle > enc_steps_per_A2A){
 800a26e:	4b12      	ldr	r3, [pc, #72]	; (800a2b8 <step_through_pole_angles+0x178>)
 800a270:	edd3 7a00 	vldr	s15, [r3]
 800a274:	ed97 7a01 	vldr	s14, [r7, #4]
 800a278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a280:	d4eb      	bmi.n	800a25a <step_through_pole_angles+0x11a>
	for (uint8_t i = 0; i < N_POLES * N_PHASES ; i++){
 800a282:	7bfb      	ldrb	r3, [r7, #15]
 800a284:	3301      	adds	r3, #1
 800a286:	73fb      	strb	r3, [r7, #15]
 800a288:	7bfb      	ldrb	r3, [r7, #15]
 800a28a:	2b14      	cmp	r3, #20
 800a28c:	d9a8      	bls.n	800a1e0 <step_through_pole_angles+0xa0>
		//float av_angle_first_A =

	}


}
 800a28e:	bf00      	nop
 800a290:	3718      	adds	r7, #24
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	20000029 	.word	0x20000029
 800a29c:	40010000 	.word	0x40010000
 800a2a0:	40010400 	.word	0x40010400
 800a2a4:	20000104 	.word	0x20000104
 800a2a8:	42be79e8 	.word	0x42be79e8
 800a2ac:	438edb6e 	.word	0x438edb6e
 800a2b0:	c47a0000 	.word	0xc47a0000
 800a2b4:	44fa0000 	.word	0x44fa0000
 800a2b8:	20000dc8 	.word	0x20000dc8

0800a2bc <step_through_pwm_percent>:

void step_through_pwm_percent(void){
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
	normal_operation_enabled = false;
 800a2c2:	4b16      	ldr	r3, [pc, #88]	; (800a31c <step_through_pwm_percent+0x60>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800a2c8:	f7ff ff28 	bl	800a11c <set_pwm_off>
	HAL_Delay(100);
 800a2cc:	2064      	movs	r0, #100	; 0x64
 800a2ce:	f7f6 feb7 	bl	8001040 <HAL_Delay>
	for (uint8_t percent = 0; percent < 10 ; percent++){
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	71fb      	strb	r3, [r7, #7]
 800a2d6:	e014      	b.n	800a302 <step_through_pwm_percent+0x46>
		TIM1->CCR1 = percent * PWM_1PERCENT;
 800a2d8:	79fa      	ldrb	r2, [r7, #7]
 800a2da:	4613      	mov	r3, r2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	4413      	add	r3, r2
 800a2e0:	00db      	lsls	r3, r3, #3
 800a2e2:	441a      	add	r2, r3
 800a2e4:	4b0e      	ldr	r3, [pc, #56]	; (800a320 <step_through_pwm_percent+0x64>)
 800a2e6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(200);
 800a2e8:	20c8      	movs	r0, #200	; 0xc8
 800a2ea:	f7f6 fea9 	bl	8001040 <HAL_Delay>
		pole_angle_by_amp[percent]=TIM8->CNT;
 800a2ee:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <step_through_pwm_percent+0x68>)
 800a2f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2f2:	79fb      	ldrb	r3, [r7, #7]
 800a2f4:	b291      	uxth	r1, r2
 800a2f6:	4a0c      	ldr	r2, [pc, #48]	; (800a328 <step_through_pwm_percent+0x6c>)
 800a2f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t percent = 0; percent < 10 ; percent++){
 800a2fc:	79fb      	ldrb	r3, [r7, #7]
 800a2fe:	3301      	adds	r3, #1
 800a300:	71fb      	strb	r3, [r7, #7]
 800a302:	79fb      	ldrb	r3, [r7, #7]
 800a304:	2b09      	cmp	r3, #9
 800a306:	d9e7      	bls.n	800a2d8 <step_through_pwm_percent+0x1c>
	}
	set_pwm_off();
 800a308:	f7ff ff08 	bl	800a11c <set_pwm_off>
	normal_operation_enabled = true;
 800a30c:	4b03      	ldr	r3, [pc, #12]	; (800a31c <step_through_pwm_percent+0x60>)
 800a30e:	2201      	movs	r2, #1
 800a310:	701a      	strb	r2, [r3, #0]
}
 800a312:	bf00      	nop
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	20000029 	.word	0x20000029
 800a320:	40010000 	.word	0x40010000
 800a324:	40010400 	.word	0x40010400
 800a328:	20000da0 	.word	0x20000da0

0800a32c <delay_SPI>:
    //for (i=0; i<3195; i++);
  	for (i=0; i<1; i++);
  }
}

void delay_SPI(void){
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
	int g =0;
 800a332:	2300      	movs	r3, #0
 800a334:	607b      	str	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800a336:	2300      	movs	r3, #0
 800a338:	603b      	str	r3, [r7, #0]
 800a33a:	e005      	b.n	800a348 <delay_SPI+0x1c>
		g++;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	3301      	adds	r3, #1
 800a340:	607b      	str	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	3301      	adds	r3, #1
 800a346:	603b      	str	r3, [r7, #0]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	2b13      	cmp	r3, #19
 800a34c:	ddf6      	ble.n	800a33c <delay_SPI+0x10>
	}
}
 800a34e:	bf00      	nop
 800a350:	370c      	adds	r7, #12
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
	...

0800a35c <playSound>:
void myDelay(void){
	HAL_Delay(1);

}

void playSound(uint16_t periode, uint16_t volume, uint16_t cycles){
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	4603      	mov	r3, r0
 800a364:	80fb      	strh	r3, [r7, #6]
 800a366:	460b      	mov	r3, r1
 800a368:	80bb      	strh	r3, [r7, #4]
 800a36a:	4613      	mov	r3, r2
 800a36c:	807b      	strh	r3, [r7, #2]
	// TODO disable interrupt for the duration of sound
	//HAL_NVIC_DisableIRQ(TIM8_UP_TIM13_IRQn);
	//HAL_Delay(1000);
	normal_operation_enabled = false;
 800a36e:	4b17      	ldr	r3, [pc, #92]	; (800a3cc <playSound+0x70>)
 800a370:	2200      	movs	r2, #0
 800a372:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800a374:	f7ff fed2 	bl	800a11c <set_pwm_off>
	HAL_Delay(10);
 800a378:	200a      	movs	r0, #10
 800a37a:	f7f6 fe61 	bl	8001040 <HAL_Delay>

	for (uint16_t i=0; i<cycles; i++){
 800a37e:	2300      	movs	r3, #0
 800a380:	81fb      	strh	r3, [r7, #14]
 800a382:	e016      	b.n	800a3b2 <playSound+0x56>
		TIM1->CCR1 = 0; //takes<150ns
 800a384:	4b12      	ldr	r3, [pc, #72]	; (800a3d0 <playSound+0x74>)
 800a386:	2200      	movs	r2, #0
 800a388:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = volume; //takes<150ns
 800a38a:	4a11      	ldr	r2, [pc, #68]	; (800a3d0 <playSound+0x74>)
 800a38c:	88bb      	ldrh	r3, [r7, #4]
 800a38e:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_Delay(periode);
 800a390:	88fb      	ldrh	r3, [r7, #6]
 800a392:	4618      	mov	r0, r3
 800a394:	f7f6 fe54 	bl	8001040 <HAL_Delay>
		TIM1->CCR1 = volume; //takes<150ns
 800a398:	4a0d      	ldr	r2, [pc, #52]	; (800a3d0 <playSound+0x74>)
 800a39a:	88bb      	ldrh	r3, [r7, #4]
 800a39c:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = 0; //takes<150ns
 800a39e:	4b0c      	ldr	r3, [pc, #48]	; (800a3d0 <playSound+0x74>)
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(periode);
 800a3a4:	88fb      	ldrh	r3, [r7, #6]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7f6 fe4a 	bl	8001040 <HAL_Delay>
	for (uint16_t i=0; i<cycles; i++){
 800a3ac:	89fb      	ldrh	r3, [r7, #14]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	81fb      	strh	r3, [r7, #14]
 800a3b2:	89fa      	ldrh	r2, [r7, #14]
 800a3b4:	887b      	ldrh	r3, [r7, #2]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d3e4      	bcc.n	800a384 <playSound+0x28>
	}
	set_pwm_off();
 800a3ba:	f7ff feaf 	bl	800a11c <set_pwm_off>
	normal_operation_enabled = true;
 800a3be:	4b03      	ldr	r3, [pc, #12]	; (800a3cc <playSound+0x70>)
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	701a      	strb	r2, [r3, #0]



	//HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
}
 800a3c4:	bf00      	nop
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	20000029 	.word	0x20000029
 800a3d0:	40010000 	.word	0x40010000
 800a3d4:	00000000 	.word	0x00000000

0800a3d8 <calc_lookup>:

void calc_lookup(float *lookup){
 800a3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
	// TODO plug in a higher order harmonic and see if system gets more energy efficient or more silent
	for (int i=0; i<210; i++){
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	e051      	b.n	800a48a <calc_lookup+0xb2>
	    lookup[i] = cos((float)i/100.0) + cos((float)i/100.0-1.047);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	ee07 3a90 	vmov	s15, r3
 800a3ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3f0:	ee17 0a90 	vmov	r0, s15
 800a3f4:	f7f6 f8a8 	bl	8000548 <__aeabi_f2d>
 800a3f8:	f04f 0200 	mov.w	r2, #0
 800a3fc:	4b28      	ldr	r3, [pc, #160]	; (800a4a0 <calc_lookup+0xc8>)
 800a3fe:	f7f6 fa25 	bl	800084c <__aeabi_ddiv>
 800a402:	4603      	mov	r3, r0
 800a404:	460c      	mov	r4, r1
 800a406:	ec44 3b17 	vmov	d7, r3, r4
 800a40a:	eeb0 0a47 	vmov.f32	s0, s14
 800a40e:	eef0 0a67 	vmov.f32	s1, s15
 800a412:	f001 fffd 	bl	800c410 <cos>
 800a416:	ec56 5b10 	vmov	r5, r6, d0
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	ee07 3a90 	vmov	s15, r3
 800a420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a424:	ee17 0a90 	vmov	r0, s15
 800a428:	f7f6 f88e 	bl	8000548 <__aeabi_f2d>
 800a42c:	f04f 0200 	mov.w	r2, #0
 800a430:	4b1b      	ldr	r3, [pc, #108]	; (800a4a0 <calc_lookup+0xc8>)
 800a432:	f7f6 fa0b 	bl	800084c <__aeabi_ddiv>
 800a436:	4603      	mov	r3, r0
 800a438:	460c      	mov	r4, r1
 800a43a:	4618      	mov	r0, r3
 800a43c:	4621      	mov	r1, r4
 800a43e:	a316      	add	r3, pc, #88	; (adr r3, 800a498 <calc_lookup+0xc0>)
 800a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a444:	f7f5 ff20 	bl	8000288 <__aeabi_dsub>
 800a448:	4603      	mov	r3, r0
 800a44a:	460c      	mov	r4, r1
 800a44c:	ec44 3b17 	vmov	d7, r3, r4
 800a450:	eeb0 0a47 	vmov.f32	s0, s14
 800a454:	eef0 0a67 	vmov.f32	s1, s15
 800a458:	f001 ffda 	bl	800c410 <cos>
 800a45c:	ec54 3b10 	vmov	r3, r4, d0
 800a460:	461a      	mov	r2, r3
 800a462:	4623      	mov	r3, r4
 800a464:	4628      	mov	r0, r5
 800a466:	4631      	mov	r1, r6
 800a468:	f7f5 ff10 	bl	800028c <__adddf3>
 800a46c:	4603      	mov	r3, r0
 800a46e:	460c      	mov	r4, r1
 800a470:	4618      	mov	r0, r3
 800a472:	4621      	mov	r1, r4
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	18d4      	adds	r4, r2, r3
 800a47c:	f7f6 fb9e 	bl	8000bbc <__aeabi_d2f>
 800a480:	4603      	mov	r3, r0
 800a482:	6023      	str	r3, [r4, #0]
	for (int i=0; i<210; i++){
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	3301      	adds	r3, #1
 800a488:	60fb      	str	r3, [r7, #12]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2bd1      	cmp	r3, #209	; 0xd1
 800a48e:	ddaa      	ble.n	800a3e6 <calc_lookup+0xe>
	}
}
 800a490:	bf00      	nop
 800a492:	3714      	adds	r7, #20
 800a494:	46bd      	mov	sp, r7
 800a496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a498:	126e978d 	.word	0x126e978d
 800a49c:	3ff0c083 	.word	0x3ff0c083
 800a4a0:	40590000 	.word	0x40590000

0800a4a4 <DMAUSARTTransferComplete>:

void DMAUSARTTransferComplete(DMA_HandleTypeDef *hdma){
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
	huart3.Instance->CR3 &= ~USART_CR3_DMAT;
 800a4ac:	4b06      	ldr	r3, [pc, #24]	; (800a4c8 <DMAUSARTTransferComplete+0x24>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	695a      	ldr	r2, [r3, #20]
 800a4b2:	4b05      	ldr	r3, [pc, #20]	; (800a4c8 <DMAUSARTTransferComplete+0x24>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4ba:	615a      	str	r2, [r3, #20]
}
 800a4bc:	bf00      	nop
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	20000510 	.word	0x20000510

0800a4cc <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
	debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin;
 800a4d4:	4b04      	ldr	r3, [pc, #16]	; (800a4e8 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800a4d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a4da:	619a      	str	r2, [r3, #24]
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	40020c00 	.word	0x40020c00

0800a4ec <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
	debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin << 16U;
 800a4f4:	4b04      	ldr	r3, [pc, #16]	; (800a508 <HAL_ADC_ConvCpltCallback+0x1c>)
 800a4f6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a4fa:	619a      	str	r2, [r3, #24]
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	40020c00 	.word	0x40020c00

0800a50c <HAL_TIM_PeriodElapsedCallback>:
//	}
//}


// --- 1ms heartbeat of the microcontroller
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim3){
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]

	if (TIM5->CNT - time_of_last_pwm_update  > 95){ //100 time time_step = heartbeat
 800a514:	4b08      	ldr	r3, [pc, #32]	; (800a538 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800a516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a518:	4a08      	ldr	r2, [pc, #32]	; (800a53c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800a51a:	6812      	ldr	r2, [r2, #0]
 800a51c:	1a9b      	subs	r3, r3, r2
 800a51e:	2b5f      	cmp	r3, #95	; 0x5f
 800a520:	d905      	bls.n	800a52e <HAL_TIM_PeriodElapsedCallback+0x22>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 800a522:	2108      	movs	r1, #8
 800a524:	4806      	ldr	r0, [pc, #24]	; (800a540 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800a526:	f7f8 fd10 	bl	8002f4a <HAL_GPIO_TogglePin>
		update_pwm();
 800a52a:	f000 fa35 	bl	800a998 <update_pwm>
	}


}
 800a52e:	bf00      	nop
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	40000c00 	.word	0x40000c00
 800a53c:	200000f0 	.word	0x200000f0
 800a540:	40021000 	.word	0x40021000

0800a544 <HAL_GPIO_EXTI_Callback>:

// --- Callback when Encoder fires the I at zero point
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800a544:	b590      	push	{r4, r7, lr}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT0_I_W_Pin){
 800a54e:	88fb      	ldrh	r3, [r7, #6]
 800a550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a554:	d14a      	bne.n	800a5ec <HAL_GPIO_EXTI_Callback+0xa8>
		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
		uint16_t encoder_belief = TIM8->CNT;
 800a556:	4b28      	ldr	r3, [pc, #160]	; (800a5f8 <HAL_GPIO_EXTI_Callback+0xb4>)
 800a558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55a:	81fb      	strh	r3, [r7, #14]

		if (counter0ing_at0crossing){
 800a55c:	4b27      	ldr	r3, [pc, #156]	; (800a5fc <HAL_GPIO_EXTI_Callback+0xb8>)
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d01e      	beq.n	800a5a2 <HAL_GPIO_EXTI_Callback+0x5e>
			TIM8->CNT = 0;     //TODO: this could lead to an offset of 1 since the CNT value may not be set yet and get incremented thereafter if this interrupt is executed before the CNT increment.
 800a564:	4b24      	ldr	r3, [pc, #144]	; (800a5f8 <HAL_GPIO_EXTI_Callback+0xb4>)
 800a566:	2200      	movs	r2, #0
 800a568:	625a      	str	r2, [r3, #36]	; 0x24
			counter0ing_at0crossing = false;
 800a56a:	4b24      	ldr	r3, [pc, #144]	; (800a5fc <HAL_GPIO_EXTI_Callback+0xb8>)
 800a56c:	2200      	movs	r2, #0
 800a56e:	701a      	strb	r2, [r3, #0]
			sprintf((char*)buf_msg, "[EXTI_Callback] EncVal at FIRST ZERO: %d \r\n", encoder_belief);
 800a570:	89fb      	ldrh	r3, [r7, #14]
 800a572:	461a      	mov	r2, r3
 800a574:	4922      	ldr	r1, [pc, #136]	; (800a600 <HAL_GPIO_EXTI_Callback+0xbc>)
 800a576:	4823      	ldr	r0, [pc, #140]	; (800a604 <HAL_GPIO_EXTI_Callback+0xc0>)
 800a578:	f001 fb34 	bl	800bbe4 <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800a57c:	4821      	ldr	r0, [pc, #132]	; (800a604 <HAL_GPIO_EXTI_Callback+0xc0>)
 800a57e:	f7f5 fe27 	bl	80001d0 <strlen>
 800a582:	4604      	mov	r4, r0
 800a584:	4820      	ldr	r0, [pc, #128]	; (800a608 <HAL_GPIO_EXTI_Callback+0xc4>)
 800a586:	f7f5 fe23 	bl	80001d0 <strlen>
 800a58a:	4603      	mov	r3, r0
 800a58c:	4423      	add	r3, r4
 800a58e:	2b63      	cmp	r3, #99	; 0x63
 800a590:	d804      	bhi.n	800a59c <HAL_GPIO_EXTI_Callback+0x58>
				strcat(buf_msgs, buf_msg);
 800a592:	491c      	ldr	r1, [pc, #112]	; (800a604 <HAL_GPIO_EXTI_Callback+0xc0>)
 800a594:	481c      	ldr	r0, [pc, #112]	; (800a608 <HAL_GPIO_EXTI_Callback+0xc4>)
 800a596:	f001 fb45 	bl	800bc24 <strcat>
 800a59a:	e002      	b.n	800a5a2 <HAL_GPIO_EXTI_Callback+0x5e>
			}
			else {
				buf_msgs[0] = '#';
 800a59c:	4b1a      	ldr	r3, [pc, #104]	; (800a608 <HAL_GPIO_EXTI_Callback+0xc4>)
 800a59e:	2223      	movs	r2, #35	; 0x23
 800a5a0:	701a      	strb	r2, [r3, #0]
			}
		}
		val_SO1_buf_index = 0;
 800a5a2:	4b1a      	ldr	r3, [pc, #104]	; (800a60c <HAL_GPIO_EXTI_Callback+0xc8>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	801a      	strh	r2, [r3, #0]

		if (encoder_belief > ENC_TOLERANCE && encoder_belief < ENC_STEPS - ENC_TOLERANCE){
 800a5a8:	89fb      	ldrh	r3, [r7, #14]
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d91f      	bls.n	800a5ee <HAL_GPIO_EXTI_Callback+0xaa>
 800a5ae:	89fb      	ldrh	r3, [r7, #14]
 800a5b0:	f240 72cd 	movw	r2, #1997	; 0x7cd
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d81a      	bhi.n	800a5ee <HAL_GPIO_EXTI_Callback+0xaa>
			sprintf((char*)buf_msg, "[EXTI_Callback] EncVal at ZERO MISMATCH: %d \r\n", encoder_belief);
 800a5b8:	89fb      	ldrh	r3, [r7, #14]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	4914      	ldr	r1, [pc, #80]	; (800a610 <HAL_GPIO_EXTI_Callback+0xcc>)
 800a5be:	4811      	ldr	r0, [pc, #68]	; (800a604 <HAL_GPIO_EXTI_Callback+0xc0>)
 800a5c0:	f001 fb10 	bl	800bbe4 <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800a5c4:	480f      	ldr	r0, [pc, #60]	; (800a604 <HAL_GPIO_EXTI_Callback+0xc0>)
 800a5c6:	f7f5 fe03 	bl	80001d0 <strlen>
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	480e      	ldr	r0, [pc, #56]	; (800a608 <HAL_GPIO_EXTI_Callback+0xc4>)
 800a5ce:	f7f5 fdff 	bl	80001d0 <strlen>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	4423      	add	r3, r4
 800a5d6:	2b63      	cmp	r3, #99	; 0x63
 800a5d8:	d804      	bhi.n	800a5e4 <HAL_GPIO_EXTI_Callback+0xa0>
				strcat(buf_msgs, buf_msg);
 800a5da:	490a      	ldr	r1, [pc, #40]	; (800a604 <HAL_GPIO_EXTI_Callback+0xc0>)
 800a5dc:	480a      	ldr	r0, [pc, #40]	; (800a608 <HAL_GPIO_EXTI_Callback+0xc4>)
 800a5de:	f001 fb21 	bl	800bc24 <strcat>
		}
	}
	else{
		__NOP();
	}
}
 800a5e2:	e004      	b.n	800a5ee <HAL_GPIO_EXTI_Callback+0xaa>
				buf_msgs[0] = '#';
 800a5e4:	4b08      	ldr	r3, [pc, #32]	; (800a608 <HAL_GPIO_EXTI_Callback+0xc4>)
 800a5e6:	2223      	movs	r2, #35	; 0x23
 800a5e8:	701a      	strb	r2, [r3, #0]
}
 800a5ea:	e000      	b.n	800a5ee <HAL_GPIO_EXTI_Callback+0xaa>
		__NOP();
 800a5ec:	bf00      	nop
}
 800a5ee:	bf00      	nop
 800a5f0:	3714      	adds	r7, #20
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd90      	pop	{r4, r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	40010400 	.word	0x40010400
 800a5fc:	20000020 	.word	0x20000020
 800a600:	0800d554 	.word	0x0800d554
 800a604:	20000ff0 	.word	0x20000ff0
 800a608:	20000e48 	.word	0x20000e48
 800a60c:	200000dc 	.word	0x200000dc
 800a610:	0800d580 	.word	0x0800d580
 800a614:	00000000 	.word	0x00000000

0800a618 <HAL_TIM_IC_CaptureCallback>:




//this is it
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800a618:	b5b0      	push	{r4, r5, r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
	// see https://community.st.com/s/question/0D50X00009XkWUpSAN/encoder-mode-and-rotary-encoder

	//debug2_out_GPIO_Port->BSRR = debug2_out_Pin; //takes 60ns == 5 clock cycles
	//debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin << 16U;
	//HAL_GPIO_TogglePin(debug2_out_GPIO_Port, debug2_out_Pin);
	if(htim->Instance == TIM8){
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a92      	ldr	r2, [pc, #584]	; (800a870 <HAL_TIM_IC_CaptureCallback+0x258>)
 800a626:	4293      	cmp	r3, r2
 800a628:	f040 8198 	bne.w	800a95c <HAL_TIM_IC_CaptureCallback+0x344>

		if (skip_update){ //TODO somehow the Callback is triggered at this strange 25% duty cycle so we just look at every second update to get a constant frequency
 800a62c:	4b91      	ldr	r3, [pc, #580]	; (800a874 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d003      	beq.n	800a63c <HAL_TIM_IC_CaptureCallback+0x24>
			skip_update = 0;
 800a634:	4b8f      	ldr	r3, [pc, #572]	; (800a874 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800a636:	2200      	movs	r2, #0
 800a638:	601a      	str	r2, [r3, #0]
	}


	//counterISR++;

}
 800a63a:	e18f      	b.n	800a95c <HAL_TIM_IC_CaptureCallback+0x344>
			skip_update = 1;
 800a63c:	4b8d      	ldr	r3, [pc, #564]	; (800a874 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800a63e:	2201      	movs	r2, #1
 800a640:	601a      	str	r2, [r3, #0]
			debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 800a642:	4b8d      	ldr	r3, [pc, #564]	; (800a878 <HAL_TIM_IC_CaptureCallback+0x260>)
 800a644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a648:	619a      	str	r2, [r3, #24]
			debug1_out_GPIO_Port->BSRR = debug1_out_Pin << 16U; //takes 60ns == 5 clock cycles
 800a64a:	4b8b      	ldr	r3, [pc, #556]	; (800a878 <HAL_TIM_IC_CaptureCallback+0x260>)
 800a64c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a650:	619a      	str	r2, [r3, #24]
			last_EncVal = EncVal;
 800a652:	4b8a      	ldr	r3, [pc, #552]	; (800a87c <HAL_TIM_IC_CaptureCallback+0x264>)
 800a654:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a658:	4b89      	ldr	r3, [pc, #548]	; (800a880 <HAL_TIM_IC_CaptureCallback+0x268>)
 800a65a:	801a      	strh	r2, [r3, #0]
			EncVal = TIM8->CNT;//takes 200ns
 800a65c:	4b84      	ldr	r3, [pc, #528]	; (800a870 <HAL_TIM_IC_CaptureCallback+0x258>)
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	b21a      	sxth	r2, r3
 800a662:	4b86      	ldr	r3, [pc, #536]	; (800a87c <HAL_TIM_IC_CaptureCallback+0x264>)
 800a664:	801a      	strh	r2, [r3, #0]
			if (EncVal - last_EncVal > ENC_STEPS_HALF){
 800a666:	4b85      	ldr	r3, [pc, #532]	; (800a87c <HAL_TIM_IC_CaptureCallback+0x264>)
 800a668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a66c:	461a      	mov	r2, r3
 800a66e:	4b84      	ldr	r3, [pc, #528]	; (800a880 <HAL_TIM_IC_CaptureCallback+0x268>)
 800a670:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a67a:	dd09      	ble.n	800a690 <HAL_TIM_IC_CaptureCallback+0x78>
				rotation_counter--;
 800a67c:	4b81      	ldr	r3, [pc, #516]	; (800a884 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800a67e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a682:	b29b      	uxth	r3, r3
 800a684:	3b01      	subs	r3, #1
 800a686:	b29b      	uxth	r3, r3
 800a688:	b21a      	sxth	r2, r3
 800a68a:	4b7e      	ldr	r3, [pc, #504]	; (800a884 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800a68c:	801a      	strh	r2, [r3, #0]
 800a68e:	e013      	b.n	800a6b8 <HAL_TIM_IC_CaptureCallback+0xa0>
			else if (last_EncVal - EncVal > ENC_STEPS_HALF){
 800a690:	4b7b      	ldr	r3, [pc, #492]	; (800a880 <HAL_TIM_IC_CaptureCallback+0x268>)
 800a692:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a696:	461a      	mov	r2, r3
 800a698:	4b78      	ldr	r3, [pc, #480]	; (800a87c <HAL_TIM_IC_CaptureCallback+0x264>)
 800a69a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6a4:	dd08      	ble.n	800a6b8 <HAL_TIM_IC_CaptureCallback+0xa0>
				rotation_counter++;
 800a6a6:	4b77      	ldr	r3, [pc, #476]	; (800a884 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800a6a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	b21a      	sxth	r2, r3
 800a6b4:	4b73      	ldr	r3, [pc, #460]	; (800a884 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800a6b6:	801a      	strh	r2, [r3, #0]
			if (val_SO1_buf_index < 72){
 800a6b8:	4b73      	ldr	r3, [pc, #460]	; (800a888 <HAL_TIM_IC_CaptureCallback+0x270>)
 800a6ba:	881b      	ldrh	r3, [r3, #0]
 800a6bc:	2b47      	cmp	r3, #71	; 0x47
 800a6be:	d810      	bhi.n	800a6e2 <HAL_TIM_IC_CaptureCallback+0xca>
				val_SO1_buf[val_SO1_buf_index] = HAL_ADCEx_InjectedGetValue (&hadc2, 1);
 800a6c0:	4b71      	ldr	r3, [pc, #452]	; (800a888 <HAL_TIM_IC_CaptureCallback+0x270>)
 800a6c2:	881b      	ldrh	r3, [r3, #0]
 800a6c4:	461c      	mov	r4, r3
 800a6c6:	2101      	movs	r1, #1
 800a6c8:	4870      	ldr	r0, [pc, #448]	; (800a88c <HAL_TIM_IC_CaptureCallback+0x274>)
 800a6ca:	f7f7 fac3 	bl	8001c54 <HAL_ADCEx_InjectedGetValue>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	4b6f      	ldr	r3, [pc, #444]	; (800a890 <HAL_TIM_IC_CaptureCallback+0x278>)
 800a6d2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				val_SO1_buf_index++;
 800a6d6:	4b6c      	ldr	r3, [pc, #432]	; (800a888 <HAL_TIM_IC_CaptureCallback+0x270>)
 800a6d8:	881b      	ldrh	r3, [r3, #0]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	4b6a      	ldr	r3, [pc, #424]	; (800a888 <HAL_TIM_IC_CaptureCallback+0x270>)
 800a6e0:	801a      	strh	r2, [r3, #0]
			if (val_SO1_buf_index == 72){  // some hints that this takes 10mus
 800a6e2:	4b69      	ldr	r3, [pc, #420]	; (800a888 <HAL_TIM_IC_CaptureCallback+0x270>)
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	2b48      	cmp	r3, #72	; 0x48
 800a6e8:	f040 8081 	bne.w	800a7ee <HAL_TIM_IC_CaptureCallback+0x1d6>
				int32_t cos_part = 0;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	617b      	str	r3, [r7, #20]
				int32_t sin_part = 0;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	613b      	str	r3, [r7, #16]
				for (int i=0; i< 72; i++){
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	60fb      	str	r3, [r7, #12]
 800a6f8:	e046      	b.n	800a788 <HAL_TIM_IC_CaptureCallback+0x170>
				    if (i<18){
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2b11      	cmp	r3, #17
 800a6fe:	dc0e      	bgt.n	800a71e <HAL_TIM_IC_CaptureCallback+0x106>
				      cos_part += val_SO1_buf[i];
 800a700:	4a63      	ldr	r2, [pc, #396]	; (800a890 <HAL_TIM_IC_CaptureCallback+0x278>)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	4413      	add	r3, r2
 800a70c:	617b      	str	r3, [r7, #20]
				      sin_part += val_SO1_buf[i];}
 800a70e:	4a60      	ldr	r2, [pc, #384]	; (800a890 <HAL_TIM_IC_CaptureCallback+0x278>)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	4413      	add	r3, r2
 800a71a:	613b      	str	r3, [r7, #16]
 800a71c:	e031      	b.n	800a782 <HAL_TIM_IC_CaptureCallback+0x16a>
				    else if (i<36){
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2b23      	cmp	r3, #35	; 0x23
 800a722:	dc0e      	bgt.n	800a742 <HAL_TIM_IC_CaptureCallback+0x12a>
				      cos_part -= val_SO1_buf[i];
 800a724:	697a      	ldr	r2, [r7, #20]
 800a726:	495a      	ldr	r1, [pc, #360]	; (800a890 <HAL_TIM_IC_CaptureCallback+0x278>)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	617b      	str	r3, [r7, #20]
				      sin_part += val_SO1_buf[i];}
 800a732:	4a57      	ldr	r2, [pc, #348]	; (800a890 <HAL_TIM_IC_CaptureCallback+0x278>)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	4413      	add	r3, r2
 800a73e:	613b      	str	r3, [r7, #16]
 800a740:	e01f      	b.n	800a782 <HAL_TIM_IC_CaptureCallback+0x16a>
				    else if (i<54){
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2b35      	cmp	r3, #53	; 0x35
 800a746:	dc0e      	bgt.n	800a766 <HAL_TIM_IC_CaptureCallback+0x14e>
				      cos_part -= val_SO1_buf[i];
 800a748:	697a      	ldr	r2, [r7, #20]
 800a74a:	4951      	ldr	r1, [pc, #324]	; (800a890 <HAL_TIM_IC_CaptureCallback+0x278>)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a752:	1ad3      	subs	r3, r2, r3
 800a754:	617b      	str	r3, [r7, #20]
				      sin_part -= val_SO1_buf[i];}
 800a756:	693a      	ldr	r2, [r7, #16]
 800a758:	494d      	ldr	r1, [pc, #308]	; (800a890 <HAL_TIM_IC_CaptureCallback+0x278>)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	613b      	str	r3, [r7, #16]
 800a764:	e00d      	b.n	800a782 <HAL_TIM_IC_CaptureCallback+0x16a>
				      cos_part += val_SO1_buf[i];
 800a766:	4a4a      	ldr	r2, [pc, #296]	; (800a890 <HAL_TIM_IC_CaptureCallback+0x278>)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	4413      	add	r3, r2
 800a772:	617b      	str	r3, [r7, #20]
				      sin_part -= val_SO1_buf[i];}
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	4946      	ldr	r1, [pc, #280]	; (800a890 <HAL_TIM_IC_CaptureCallback+0x278>)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	613b      	str	r3, [r7, #16]
				for (int i=0; i< 72; i++){
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	3301      	adds	r3, #1
 800a786:	60fb      	str	r3, [r7, #12]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2b47      	cmp	r3, #71	; 0x47
 800a78c:	ddb5      	ble.n	800a6fa <HAL_TIM_IC_CaptureCallback+0xe2>
				field_amplitude = cos_part*cos_part + sin_part*sin_part;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	fb02 f203 	mul.w	r2, r2, r3
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	6939      	ldr	r1, [r7, #16]
 800a79a:	fb01 f303 	mul.w	r3, r1, r3
 800a79e:	4413      	add	r3, r2
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4b3c      	ldr	r3, [pc, #240]	; (800a894 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800a7a4:	601a      	str	r2, [r3, #0]
				field_phase_shift = (float) cos_part / (float) sin_part;
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	ee07 3a90 	vmov	s15, r3
 800a7ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	ee07 3a90 	vmov	s15, r3
 800a7b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7be:	4b36      	ldr	r3, [pc, #216]	; (800a898 <HAL_TIM_IC_CaptureCallback+0x280>)
 800a7c0:	edc3 7a00 	vstr	s15, [r3]
				field_phase_shift_pihalf = (float) sin_part / (float) cos_part;
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	ee07 3a90 	vmov	s15, r3
 800a7ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	ee07 3a90 	vmov	s15, r3
 800a7d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7dc:	4b2f      	ldr	r3, [pc, #188]	; (800a89c <HAL_TIM_IC_CaptureCallback+0x284>)
 800a7de:	edc3 7a00 	vstr	s15, [r3]
				val_SO1_buf_index++;
 800a7e2:	4b29      	ldr	r3, [pc, #164]	; (800a888 <HAL_TIM_IC_CaptureCallback+0x270>)
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	b29a      	uxth	r2, r3
 800a7ea:	4b27      	ldr	r3, [pc, #156]	; (800a888 <HAL_TIM_IC_CaptureCallback+0x270>)
 800a7ec:	801a      	strh	r2, [r3, #0]
			if (abs(av_velocity) > 5 &&  skip_update_high_v == 1){
 800a7ee:	4b2c      	ldr	r3, [pc, #176]	; (800a8a0 <HAL_TIM_IC_CaptureCallback+0x288>)
 800a7f0:	edd3 7a00 	vldr	s15, [r3]
 800a7f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a7f8:	ee17 3a90 	vmov	r3, s15
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	bfb8      	it	lt
 800a800:	425b      	neglt	r3, r3
 800a802:	2b05      	cmp	r3, #5
 800a804:	dd07      	ble.n	800a816 <HAL_TIM_IC_CaptureCallback+0x1fe>
 800a806:	4b27      	ldr	r3, [pc, #156]	; (800a8a4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d103      	bne.n	800a816 <HAL_TIM_IC_CaptureCallback+0x1fe>
				skip_update_high_v = 0;
 800a80e:	4b25      	ldr	r3, [pc, #148]	; (800a8a4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800a810:	2200      	movs	r2, #0
 800a812:	601a      	str	r2, [r3, #0]
}
 800a814:	e0a2      	b.n	800a95c <HAL_TIM_IC_CaptureCallback+0x344>
				debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 800a816:	4b18      	ldr	r3, [pc, #96]	; (800a878 <HAL_TIM_IC_CaptureCallback+0x260>)
 800a818:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a81c:	619a      	str	r2, [r3, #24]
				GPIOC->BSRR = GPIO_PIN_13; // DEBUG
 800a81e:	4b22      	ldr	r3, [pc, #136]	; (800a8a8 <HAL_TIM_IC_CaptureCallback+0x290>)
 800a820:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a824:	619a      	str	r2, [r3, #24]
				skip_update_high_v = 1;
 800a826:	4b1f      	ldr	r3, [pc, #124]	; (800a8a4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800a828:	2201      	movs	r2, #1
 800a82a:	601a      	str	r2, [r3, #0]
				tim12_counter = TIM2->CNT;
 800a82c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a832:	4a1e      	ldr	r2, [pc, #120]	; (800a8ac <HAL_TIM_IC_CaptureCallback+0x294>)
 800a834:	6013      	str	r3, [r2, #0]
				if (tim12_counter > 2000){ // TODO fix the issue that this gets almost never called when velocity is super low.
 800a836:	4b1d      	ldr	r3, [pc, #116]	; (800a8ac <HAL_TIM_IC_CaptureCallback+0x294>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a83e:	f240 8087 	bls.w	800a950 <HAL_TIM_IC_CaptureCallback+0x338>
					TIM2->CNT = 0;
 800a842:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a846:	2200      	movs	r2, #0
 800a848:	625a      	str	r2, [r3, #36]	; 0x24
					int EncDiff = EncVal-last_EncVal_v;
 800a84a:	4b0c      	ldr	r3, [pc, #48]	; (800a87c <HAL_TIM_IC_CaptureCallback+0x264>)
 800a84c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a850:	461a      	mov	r2, r3
 800a852:	4b17      	ldr	r3, [pc, #92]	; (800a8b0 <HAL_TIM_IC_CaptureCallback+0x298>)
 800a854:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	60bb      	str	r3, [r7, #8]
					if (EncDiff > 1000){ // if jump is more than a half rotation it's most likely the 0 crossing
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a862:	dd27      	ble.n	800a8b4 <HAL_TIM_IC_CaptureCallback+0x29c>
						EncDiff -= 2000;
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800a86a:	60bb      	str	r3, [r7, #8]
 800a86c:	e02a      	b.n	800a8c4 <HAL_TIM_IC_CaptureCallback+0x2ac>
 800a86e:	bf00      	nop
 800a870:	40010400 	.word	0x40010400
 800a874:	200000d4 	.word	0x200000d4
 800a878:	40020c00 	.word	0x40020c00
 800a87c:	20000c9c 	.word	0x20000c9c
 800a880:	20000a48 	.word	0x20000a48
 800a884:	200000b4 	.word	0x200000b4
 800a888:	200000dc 	.word	0x200000dc
 800a88c:	20000550 	.word	0x20000550
 800a890:	20001024 	.word	0x20001024
 800a894:	200000e8 	.word	0x200000e8
 800a898:	200000e0 	.word	0x200000e0
 800a89c:	200000e4 	.word	0x200000e4
 800a8a0:	200000c4 	.word	0x200000c4
 800a8a4:	200000d8 	.word	0x200000d8
 800a8a8:	40020800 	.word	0x40020800
 800a8ac:	20000024 	.word	0x20000024
 800a8b0:	20000b4c 	.word	0x20000b4c
					else if (EncDiff < -1000){
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800a8ba:	da03      	bge.n	800a8c4 <HAL_TIM_IC_CaptureCallback+0x2ac>
						EncDiff += 2000;
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a8c2:	60bb      	str	r3, [r7, #8]
					velocity = (float)(EncDiff) / (float)tim12_counter; //[steps/counts]
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	ee07 3a90 	vmov	s15, r3
 800a8ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a8ce:	4b2a      	ldr	r3, [pc, #168]	; (800a978 <HAL_TIM_IC_CaptureCallback+0x360>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a8da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8de:	4b27      	ldr	r3, [pc, #156]	; (800a97c <HAL_TIM_IC_CaptureCallback+0x364>)
 800a8e0:	edc3 7a00 	vstr	s15, [r3]
					velocity *= 10500; // /2000 steps/round * 21000000 counts/sec --> [round/sec]  //TODO velocity seems too high by factor of 2 or 3 maybe same clock frequency issue that we actually run at 42 MHz. !!! TODO check clock frequency  // TODO divided by 10 as well
 800a8e4:	4b25      	ldr	r3, [pc, #148]	; (800a97c <HAL_TIM_IC_CaptureCallback+0x364>)
 800a8e6:	edd3 7a00 	vldr	s15, [r3]
 800a8ea:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800a980 <HAL_TIM_IC_CaptureCallback+0x368>
 800a8ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a8f2:	4b22      	ldr	r3, [pc, #136]	; (800a97c <HAL_TIM_IC_CaptureCallback+0x364>)
 800a8f4:	edc3 7a00 	vstr	s15, [r3]
					av_velocity = 0.95 * av_velocity + 0.05 * velocity;
 800a8f8:	4b22      	ldr	r3, [pc, #136]	; (800a984 <HAL_TIM_IC_CaptureCallback+0x36c>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7f5 fe23 	bl	8000548 <__aeabi_f2d>
 800a902:	a319      	add	r3, pc, #100	; (adr r3, 800a968 <HAL_TIM_IC_CaptureCallback+0x350>)
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	f7f5 fe76 	bl	80005f8 <__aeabi_dmul>
 800a90c:	4603      	mov	r3, r0
 800a90e:	460c      	mov	r4, r1
 800a910:	4625      	mov	r5, r4
 800a912:	461c      	mov	r4, r3
 800a914:	4b19      	ldr	r3, [pc, #100]	; (800a97c <HAL_TIM_IC_CaptureCallback+0x364>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4618      	mov	r0, r3
 800a91a:	f7f5 fe15 	bl	8000548 <__aeabi_f2d>
 800a91e:	a314      	add	r3, pc, #80	; (adr r3, 800a970 <HAL_TIM_IC_CaptureCallback+0x358>)
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	f7f5 fe68 	bl	80005f8 <__aeabi_dmul>
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4620      	mov	r0, r4
 800a92e:	4629      	mov	r1, r5
 800a930:	f7f5 fcac 	bl	800028c <__adddf3>
 800a934:	4603      	mov	r3, r0
 800a936:	460c      	mov	r4, r1
 800a938:	4618      	mov	r0, r3
 800a93a:	4621      	mov	r1, r4
 800a93c:	f7f6 f93e 	bl	8000bbc <__aeabi_d2f>
 800a940:	4602      	mov	r2, r0
 800a942:	4b10      	ldr	r3, [pc, #64]	; (800a984 <HAL_TIM_IC_CaptureCallback+0x36c>)
 800a944:	601a      	str	r2, [r3, #0]
					last_EncVal_v = EncVal;
 800a946:	4b10      	ldr	r3, [pc, #64]	; (800a988 <HAL_TIM_IC_CaptureCallback+0x370>)
 800a948:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a94c:	4b0f      	ldr	r3, [pc, #60]	; (800a98c <HAL_TIM_IC_CaptureCallback+0x374>)
 800a94e:	801a      	strh	r2, [r3, #0]
				update_pwm();
 800a950:	f000 f822 	bl	800a998 <update_pwm>
				GPIOC->BSRR = GPIO_PIN_13  << 16U ; // DEBUG
 800a954:	4b0e      	ldr	r3, [pc, #56]	; (800a990 <HAL_TIM_IC_CaptureCallback+0x378>)
 800a956:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a95a:	619a      	str	r2, [r3, #24]
}
 800a95c:	bf00      	nop
 800a95e:	3718      	adds	r7, #24
 800a960:	46bd      	mov	sp, r7
 800a962:	bdb0      	pop	{r4, r5, r7, pc}
 800a964:	f3af 8000 	nop.w
 800a968:	66666666 	.word	0x66666666
 800a96c:	3fee6666 	.word	0x3fee6666
 800a970:	9999999a 	.word	0x9999999a
 800a974:	3fa99999 	.word	0x3fa99999
 800a978:	20000024 	.word	0x20000024
 800a97c:	200000c0 	.word	0x200000c0
 800a980:	46241000 	.word	0x46241000
 800a984:	200000c4 	.word	0x200000c4
 800a988:	20000c9c 	.word	0x20000c9c
 800a98c:	20000b4c 	.word	0x20000b4c
 800a990:	40020800 	.word	0x40020800
 800a994:	00000000 	.word	0x00000000

0800a998 <update_pwm>:

void update_pwm(void){
 800a998:	b590      	push	{r4, r7, lr}
 800a99a:	b087      	sub	sp, #28
 800a99c:	af00      	add	r7, sp, #0

	//dtime_since_last_pwm_update = TIM5->CNT - time_of_last_pwm_update;
	time_of_last_pwm_update = TIM5->CNT;
 800a99e:	4ba6      	ldr	r3, [pc, #664]	; (800ac38 <update_pwm+0x2a0>)
 800a9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	4ba5      	ldr	r3, [pc, #660]	; (800ac3c <update_pwm+0x2a4>)
 800a9a6:	601a      	str	r2, [r3, #0]

	phase = (float) EncVal * 0.02199 ; //(float) EncVal / 2000.0 * 2*PI * 7 ; //takes 1500ns
 800a9a8:	4ba5      	ldr	r3, [pc, #660]	; (800ac40 <update_pwm+0x2a8>)
 800a9aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9ae:	ee07 3a90 	vmov	s15, r3
 800a9b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9b6:	ee17 0a90 	vmov	r0, s15
 800a9ba:	f7f5 fdc5 	bl	8000548 <__aeabi_f2d>
 800a9be:	a39c      	add	r3, pc, #624	; (adr r3, 800ac30 <update_pwm+0x298>)
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	f7f5 fe18 	bl	80005f8 <__aeabi_dmul>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	f7f6 f8f4 	bl	8000bbc <__aeabi_d2f>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	4b9b      	ldr	r3, [pc, #620]	; (800ac44 <update_pwm+0x2ac>)
 800a9d8:	601a      	str	r2, [r3, #0]
	phase -= phase0;
 800a9da:	4b9a      	ldr	r3, [pc, #616]	; (800ac44 <update_pwm+0x2ac>)
 800a9dc:	ed93 7a00 	vldr	s14, [r3]
 800a9e0:	4b99      	ldr	r3, [pc, #612]	; (800ac48 <update_pwm+0x2b0>)
 800a9e2:	edd3 7a00 	vldr	s15, [r3]
 800a9e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9ea:	4b96      	ldr	r3, [pc, #600]	; (800ac44 <update_pwm+0x2ac>)
 800a9ec:	edc3 7a00 	vstr	s15, [r3]

	float u0 = 0.5773; //0.5 * 2.0 / 1.73205;// maximal possible U on one coil thanks to wankel //takes<200ns
 800a9f0:	4b96      	ldr	r3, [pc, #600]	; (800ac4c <update_pwm+0x2b4>)
 800a9f2:	60bb      	str	r3, [r7, #8]
	float modified_amp = amp + stiffness * av_velocity * direction; // TODO the abs allows same stiffness to make it softer for both directions - without a signchange is needed BUT turnaround is super aggressive now :( SAME issue with direction - super forceful reverse but sign identical --- looks like v needs to direct also the phase !!!!
 800a9f4:	4b96      	ldr	r3, [pc, #600]	; (800ac50 <update_pwm+0x2b8>)
 800a9f6:	ed93 7a00 	vldr	s14, [r3]
 800a9fa:	4b96      	ldr	r3, [pc, #600]	; (800ac54 <update_pwm+0x2bc>)
 800a9fc:	edd3 7a00 	vldr	s15, [r3]
 800aa00:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa04:	4b94      	ldr	r3, [pc, #592]	; (800ac58 <update_pwm+0x2c0>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	ee07 3a90 	vmov	s15, r3
 800aa0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa14:	4b91      	ldr	r3, [pc, #580]	; (800ac5c <update_pwm+0x2c4>)
 800aa16:	edd3 7a00 	vldr	s15, [r3]
 800aa1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa1e:	edc7 7a01 	vstr	s15, [r7, #4]
	//u0 *= amp;  //takes<200ns
	u0 *= modified_amp;  //takes<200ns
 800aa22:	ed97 7a02 	vldr	s14, [r7, #8]
 800aa26:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa2e:	edc7 7a02 	vstr	s15, [r7, #8]
	u0 *= run_motor;  //takes<200ns
 800aa32:	4b8b      	ldr	r3, [pc, #556]	; (800ac60 <update_pwm+0x2c8>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	ee07 3a90 	vmov	s15, r3
 800aa3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa3e:	ed97 7a02 	vldr	s14, [r7, #8]
 800aa42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa46:	edc7 7a02 	vstr	s15, [r7, #8]

	if (direction == 1){
 800aa4a:	4b83      	ldr	r3, [pc, #524]	; (800ac58 <update_pwm+0x2c0>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d10b      	bne.n	800aa6a <update_pwm+0xd2>
		phase -= phase_shift;  //takes<200ns
 800aa52:	4b7c      	ldr	r3, [pc, #496]	; (800ac44 <update_pwm+0x2ac>)
 800aa54:	ed93 7a00 	vldr	s14, [r3]
 800aa58:	4b82      	ldr	r3, [pc, #520]	; (800ac64 <update_pwm+0x2cc>)
 800aa5a:	edd3 7a00 	vldr	s15, [r3]
 800aa5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa62:	4b78      	ldr	r3, [pc, #480]	; (800ac44 <update_pwm+0x2ac>)
 800aa64:	edc3 7a00 	vstr	s15, [r3]
 800aa68:	e00a      	b.n	800aa80 <update_pwm+0xe8>
	}
	else {
		phase += phase_shift;
 800aa6a:	4b76      	ldr	r3, [pc, #472]	; (800ac44 <update_pwm+0x2ac>)
 800aa6c:	ed93 7a00 	vldr	s14, [r3]
 800aa70:	4b7c      	ldr	r3, [pc, #496]	; (800ac64 <update_pwm+0x2cc>)
 800aa72:	edd3 7a00 	vldr	s15, [r3]
 800aa76:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa7a:	4b72      	ldr	r3, [pc, #456]	; (800ac44 <update_pwm+0x2ac>)
 800aa7c:	edc3 7a00 	vstr	s15, [r3]

//



	phase *= 100;
 800aa80:	4b70      	ldr	r3, [pc, #448]	; (800ac44 <update_pwm+0x2ac>)
 800aa82:	edd3 7a00 	vldr	s15, [r3]
 800aa86:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800ac68 <update_pwm+0x2d0>
 800aa8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa8e:	4b6d      	ldr	r3, [pc, #436]	; (800ac44 <update_pwm+0x2ac>)
 800aa90:	edc3 7a00 	vstr	s15, [r3]
	int_phase = (int) phase;
 800aa94:	4b6b      	ldr	r3, [pc, #428]	; (800ac44 <update_pwm+0x2ac>)
 800aa96:	edd3 7a00 	vldr	s15, [r3]
 800aa9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa9e:	ee17 2a90 	vmov	r2, s15
 800aaa2:	4b72      	ldr	r3, [pc, #456]	; (800ac6c <update_pwm+0x2d4>)
 800aaa4:	601a      	str	r2, [r3, #0]
	int_phase = int_phase % 628;
 800aaa6:	4b71      	ldr	r3, [pc, #452]	; (800ac6c <update_pwm+0x2d4>)
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	4b71      	ldr	r3, [pc, #452]	; (800ac70 <update_pwm+0x2d8>)
 800aaac:	fb83 1302 	smull	r1, r3, r3, r2
 800aab0:	11d9      	asrs	r1, r3, #7
 800aab2:	17d3      	asrs	r3, r2, #31
 800aab4:	1acb      	subs	r3, r1, r3
 800aab6:	f44f 711d 	mov.w	r1, #628	; 0x274
 800aaba:	fb01 f303 	mul.w	r3, r1, r3
 800aabe:	1ad3      	subs	r3, r2, r3
 800aac0:	4a6a      	ldr	r2, [pc, #424]	; (800ac6c <update_pwm+0x2d4>)
 800aac2:	6013      	str	r3, [r2, #0]
	if (int_phase < 0) {
 800aac4:	4b69      	ldr	r3, [pc, #420]	; (800ac6c <update_pwm+0x2d4>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	da05      	bge.n	800aad8 <update_pwm+0x140>
		int_phase += 628;
 800aacc:	4b67      	ldr	r3, [pc, #412]	; (800ac6c <update_pwm+0x2d4>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800aad4:	4a65      	ldr	r2, [pc, #404]	; (800ac6c <update_pwm+0x2d4>)
 800aad6:	6013      	str	r3, [r2, #0]
	}

	float uA = 0;
 800aad8:	f04f 0300 	mov.w	r3, #0
 800aadc:	617b      	str	r3, [r7, #20]
	float uB = 0;
 800aade:	f04f 0300 	mov.w	r3, #0
 800aae2:	613b      	str	r3, [r7, #16]
	float uC = 0;
 800aae4:	f04f 0300 	mov.w	r3, #0
 800aae8:	60fb      	str	r3, [r7, #12]
//    			uB = lookup[2]; // takes 3mus
//    			uC = 0;

	// ---- lookup  this optimized routine brings roundtrip down to 5mus

	if  (int_phase < 210)	{ //0...209
 800aaea:	4b60      	ldr	r3, [pc, #384]	; (800ac6c <update_pwm+0x2d4>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2bd1      	cmp	r3, #209	; 0xd1
 800aaf0:	dc13      	bgt.n	800ab1a <update_pwm+0x182>
		uA = lookup[int_phase]; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 800aaf2:	4b5e      	ldr	r3, [pc, #376]	; (800ac6c <update_pwm+0x2d4>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a5f      	ldr	r2, [pc, #380]	; (800ac74 <update_pwm+0x2dc>)
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	617b      	str	r3, [r7, #20]
		uB = lookup[210 - 1 - int_phase]; // takes 3mus
 800ab00:	4b5a      	ldr	r3, [pc, #360]	; (800ac6c <update_pwm+0x2d4>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f1c3 03d1 	rsb	r3, r3, #209	; 0xd1
 800ab08:	4a5a      	ldr	r2, [pc, #360]	; (800ac74 <update_pwm+0x2dc>)
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4413      	add	r3, r2
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	613b      	str	r3, [r7, #16]
		uC = 0;
 800ab12:	f04f 0300 	mov.w	r3, #0
 800ab16:	60fb      	str	r3, [r7, #12]
 800ab18:	e030      	b.n	800ab7c <update_pwm+0x1e4>
	}
 else if  (int_phase < 420){	 //210...419
 800ab1a:	4b54      	ldr	r3, [pc, #336]	; (800ac6c <update_pwm+0x2d4>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800ab22:	da15      	bge.n	800ab50 <update_pwm+0x1b8>
		uA = 0; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 800ab24:	f04f 0300 	mov.w	r3, #0
 800ab28:	617b      	str	r3, [r7, #20]
		uB = lookup[int_phase - 210]; // takes 3mus
 800ab2a:	4b50      	ldr	r3, [pc, #320]	; (800ac6c <update_pwm+0x2d4>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	3bd2      	subs	r3, #210	; 0xd2
 800ab30:	4a50      	ldr	r2, [pc, #320]	; (800ac74 <update_pwm+0x2dc>)
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	4413      	add	r3, r2
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	613b      	str	r3, [r7, #16]
		uC = lookup[420 - 1 - int_phase];
 800ab3a:	4b4c      	ldr	r3, [pc, #304]	; (800ac6c <update_pwm+0x2d4>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f5c3 73d1 	rsb	r3, r3, #418	; 0x1a2
 800ab42:	3301      	adds	r3, #1
 800ab44:	4a4b      	ldr	r2, [pc, #300]	; (800ac74 <update_pwm+0x2dc>)
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	60fb      	str	r3, [r7, #12]
 800ab4e:	e015      	b.n	800ab7c <update_pwm+0x1e4>
 }
 else	{  //420...629
		uA = lookup[630 - 1 - int_phase]; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 800ab50:	4b46      	ldr	r3, [pc, #280]	; (800ac6c <update_pwm+0x2d4>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f5c3 731d 	rsb	r3, r3, #628	; 0x274
 800ab58:	3301      	adds	r3, #1
 800ab5a:	4a46      	ldr	r2, [pc, #280]	; (800ac74 <update_pwm+0x2dc>)
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	4413      	add	r3, r2
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	617b      	str	r3, [r7, #20]
		uB = 0; // takes 3mus
 800ab64:	f04f 0300 	mov.w	r3, #0
 800ab68:	613b      	str	r3, [r7, #16]
		uC = lookup[int_phase - 420];
 800ab6a:	4b40      	ldr	r3, [pc, #256]	; (800ac6c <update_pwm+0x2d4>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800ab72:	4a40      	ldr	r2, [pc, #256]	; (800ac74 <update_pwm+0x2dc>)
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	4413      	add	r3, r2
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	60fb      	str	r3, [r7, #12]
	}


	pwmA = (uint16_t) (pwm * u0 * uA); //takes<2s00ns
 800ab7c:	4b3e      	ldr	r3, [pc, #248]	; (800ac78 <update_pwm+0x2e0>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	ee07 3a90 	vmov	s15, r3
 800ab84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ab88:	edd7 7a02 	vldr	s15, [r7, #8]
 800ab8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab90:	edd7 7a05 	vldr	s15, [r7, #20]
 800ab94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab9c:	ee17 3a90 	vmov	r3, s15
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	461a      	mov	r2, r3
 800aba4:	4b35      	ldr	r3, [pc, #212]	; (800ac7c <update_pwm+0x2e4>)
 800aba6:	601a      	str	r2, [r3, #0]
	pwmB = (uint16_t) (pwm * u0 * uB); //takes<200ns
 800aba8:	4b33      	ldr	r3, [pc, #204]	; (800ac78 <update_pwm+0x2e0>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	ee07 3a90 	vmov	s15, r3
 800abb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800abb4:	edd7 7a02 	vldr	s15, [r7, #8]
 800abb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abbc:	edd7 7a04 	vldr	s15, [r7, #16]
 800abc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abc8:	ee17 3a90 	vmov	r3, s15
 800abcc:	b29b      	uxth	r3, r3
 800abce:	461a      	mov	r2, r3
 800abd0:	4b2b      	ldr	r3, [pc, #172]	; (800ac80 <update_pwm+0x2e8>)
 800abd2:	601a      	str	r2, [r3, #0]
	pwmC = (uint16_t) (pwm * u0 * uC); //takes<200ns
 800abd4:	4b28      	ldr	r3, [pc, #160]	; (800ac78 <update_pwm+0x2e0>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	ee07 3a90 	vmov	s15, r3
 800abdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800abe0:	edd7 7a02 	vldr	s15, [r7, #8]
 800abe4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abe8:	edd7 7a03 	vldr	s15, [r7, #12]
 800abec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abf4:	ee17 3a90 	vmov	r3, s15
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	461a      	mov	r2, r3
 800abfc:	4b21      	ldr	r3, [pc, #132]	; (800ac84 <update_pwm+0x2ec>)
 800abfe:	601a      	str	r2, [r3, #0]

	// ---- end lookup

	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 800ac00:	4b21      	ldr	r3, [pc, #132]	; (800ac88 <update_pwm+0x2f0>)
 800ac02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac06:	619a      	str	r2, [r3, #24]

	// --- MOTOR DRIVER ----------------------------------------------------
	// --- PWM pulses 0...2048
	if (normal_operation_enabled){
 800ac08:	4b20      	ldr	r3, [pc, #128]	; (800ac8c <update_pwm+0x2f4>)
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00b      	beq.n	800ac28 <update_pwm+0x290>
		TIM1->CCR1 = pwmA; //takes<150ns
 800ac10:	4b1a      	ldr	r3, [pc, #104]	; (800ac7c <update_pwm+0x2e4>)
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	4b1e      	ldr	r3, [pc, #120]	; (800ac90 <update_pwm+0x2f8>)
 800ac16:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = pwmB; //takes<150ns
 800ac18:	4b19      	ldr	r3, [pc, #100]	; (800ac80 <update_pwm+0x2e8>)
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	4b1c      	ldr	r3, [pc, #112]	; (800ac90 <update_pwm+0x2f8>)
 800ac1e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = pwmC; //takes<150ns
 800ac20:	4b18      	ldr	r3, [pc, #96]	; (800ac84 <update_pwm+0x2ec>)
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	4b1a      	ldr	r3, [pc, #104]	; (800ac90 <update_pwm+0x2f8>)
 800ac26:	63da      	str	r2, [r3, #60]	; 0x3c
	}

}
 800ac28:	bf00      	nop
 800ac2a:	371c      	adds	r7, #28
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd90      	pop	{r4, r7, pc}
 800ac30:	eb5b2d4d 	.word	0xeb5b2d4d
 800ac34:	3f96848b 	.word	0x3f96848b
 800ac38:	40000c00 	.word	0x40000c00
 800ac3c:	200000f0 	.word	0x200000f0
 800ac40:	20000c9c 	.word	0x20000c9c
 800ac44:	200000b8 	.word	0x200000b8
 800ac48:	20000008 	.word	0x20000008
 800ac4c:	3f13c9ef 	.word	0x3f13c9ef
 800ac50:	200000b0 	.word	0x200000b0
 800ac54:	200000c4 	.word	0x200000c4
 800ac58:	20000018 	.word	0x20000018
 800ac5c:	20000010 	.word	0x20000010
 800ac60:	20000014 	.word	0x20000014
 800ac64:	2000001c 	.word	0x2000001c
 800ac68:	42c80000 	.word	0x42c80000
 800ac6c:	200000bc 	.word	0x200000bc
 800ac70:	342da7f3 	.word	0x342da7f3
 800ac74:	20000188 	.word	0x20000188
 800ac78:	2000000c 	.word	0x2000000c
 800ac7c:	200000c8 	.word	0x200000c8
 800ac80:	200000cc 	.word	0x200000cc
 800ac84:	200000d0 	.word	0x200000d0
 800ac88:	40020c00 	.word	0x40020c00
 800ac8c:	20000029 	.word	0x20000029
 800ac90:	40010000 	.word	0x40010000

0800ac94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ac94:	b480      	push	{r7}
 800ac96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ac98:	bf00      	nop
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
	...

0800aca4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acaa:	2300      	movs	r3, #0
 800acac:	607b      	str	r3, [r7, #4]
 800acae:	4b10      	ldr	r3, [pc, #64]	; (800acf0 <HAL_MspInit+0x4c>)
 800acb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acb2:	4a0f      	ldr	r2, [pc, #60]	; (800acf0 <HAL_MspInit+0x4c>)
 800acb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800acb8:	6453      	str	r3, [r2, #68]	; 0x44
 800acba:	4b0d      	ldr	r3, [pc, #52]	; (800acf0 <HAL_MspInit+0x4c>)
 800acbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acc2:	607b      	str	r3, [r7, #4]
 800acc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800acc6:	2300      	movs	r3, #0
 800acc8:	603b      	str	r3, [r7, #0]
 800acca:	4b09      	ldr	r3, [pc, #36]	; (800acf0 <HAL_MspInit+0x4c>)
 800accc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acce:	4a08      	ldr	r2, [pc, #32]	; (800acf0 <HAL_MspInit+0x4c>)
 800acd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acd4:	6413      	str	r3, [r2, #64]	; 0x40
 800acd6:	4b06      	ldr	r3, [pc, #24]	; (800acf0 <HAL_MspInit+0x4c>)
 800acd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acde:	603b      	str	r3, [r7, #0]
 800ace0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ace2:	bf00      	nop
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	40023800 	.word	0x40023800

0800acf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b092      	sub	sp, #72	; 0x48
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ad00:	2200      	movs	r2, #0
 800ad02:	601a      	str	r2, [r3, #0]
 800ad04:	605a      	str	r2, [r3, #4]
 800ad06:	609a      	str	r2, [r3, #8]
 800ad08:	60da      	str	r2, [r3, #12]
 800ad0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a9b      	ldr	r2, [pc, #620]	; (800af80 <HAL_ADC_MspInit+0x28c>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	f040 8096 	bne.w	800ae44 <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ad18:	2300      	movs	r3, #0
 800ad1a:	633b      	str	r3, [r7, #48]	; 0x30
 800ad1c:	4b99      	ldr	r3, [pc, #612]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ad1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad20:	4a98      	ldr	r2, [pc, #608]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ad22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad26:	6453      	str	r3, [r2, #68]	; 0x44
 800ad28:	4b96      	ldr	r3, [pc, #600]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ad2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad30:	633b      	str	r3, [r7, #48]	; 0x30
 800ad32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad34:	2300      	movs	r3, #0
 800ad36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad38:	4b92      	ldr	r3, [pc, #584]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ad3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad3c:	4a91      	ldr	r2, [pc, #580]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ad3e:	f043 0304 	orr.w	r3, r3, #4
 800ad42:	6313      	str	r3, [r2, #48]	; 0x30
 800ad44:	4b8f      	ldr	r3, [pc, #572]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ad46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad48:	f003 0304 	and.w	r3, r3, #4
 800ad4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad50:	2300      	movs	r3, #0
 800ad52:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad54:	4b8b      	ldr	r3, [pc, #556]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ad56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad58:	4a8a      	ldr	r2, [pc, #552]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ad5a:	f043 0301 	orr.w	r3, r3, #1
 800ad5e:	6313      	str	r3, [r2, #48]	; 0x30
 800ad60:	4b88      	ldr	r3, [pc, #544]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ad62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad64:	f003 0301 	and.w	r3, r3, #1
 800ad68:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	627b      	str	r3, [r7, #36]	; 0x24
 800ad70:	4b84      	ldr	r3, [pc, #528]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ad72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad74:	4a83      	ldr	r2, [pc, #524]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ad76:	f043 0302 	orr.w	r3, r3, #2
 800ad7a:	6313      	str	r3, [r2, #48]	; 0x30
 800ad7c:	4b81      	ldr	r3, [pc, #516]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ad7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad80:	f003 0302 	and.w	r3, r3, #2
 800ad84:	627b      	str	r3, [r7, #36]	; 0x24
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800ad88:	233e      	movs	r3, #62	; 0x3e
 800ad8a:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ad8c:	2303      	movs	r3, #3
 800ad8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad90:	2300      	movs	r3, #0
 800ad92:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ad98:	4619      	mov	r1, r3
 800ad9a:	487b      	ldr	r0, [pc, #492]	; (800af88 <HAL_ADC_MspInit+0x294>)
 800ad9c:	f7f7 ff22 	bl	8002be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800ada0:	233e      	movs	r3, #62	; 0x3e
 800ada2:	637b      	str	r3, [r7, #52]	; 0x34
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ada4:	2303      	movs	r3, #3
 800ada6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ada8:	2300      	movs	r3, #0
 800adaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800adb0:	4619      	mov	r1, r3
 800adb2:	4876      	ldr	r0, [pc, #472]	; (800af8c <HAL_ADC_MspInit+0x298>)
 800adb4:	f7f7 ff16 	bl	8002be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800adb8:	2301      	movs	r3, #1
 800adba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800adbc:	2303      	movs	r3, #3
 800adbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adc0:	2300      	movs	r3, #0
 800adc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800adc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800adc8:	4619      	mov	r1, r3
 800adca:	4871      	ldr	r0, [pc, #452]	; (800af90 <HAL_ADC_MspInit+0x29c>)
 800adcc:	f7f7 ff0a 	bl	8002be4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800add0:	4b70      	ldr	r3, [pc, #448]	; (800af94 <HAL_ADC_MspInit+0x2a0>)
 800add2:	4a71      	ldr	r2, [pc, #452]	; (800af98 <HAL_ADC_MspInit+0x2a4>)
 800add4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800add6:	4b6f      	ldr	r3, [pc, #444]	; (800af94 <HAL_ADC_MspInit+0x2a0>)
 800add8:	2200      	movs	r2, #0
 800adda:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800addc:	4b6d      	ldr	r3, [pc, #436]	; (800af94 <HAL_ADC_MspInit+0x2a0>)
 800adde:	2200      	movs	r2, #0
 800ade0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ade2:	4b6c      	ldr	r3, [pc, #432]	; (800af94 <HAL_ADC_MspInit+0x2a0>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800ade8:	4b6a      	ldr	r3, [pc, #424]	; (800af94 <HAL_ADC_MspInit+0x2a0>)
 800adea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800adee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800adf0:	4b68      	ldr	r3, [pc, #416]	; (800af94 <HAL_ADC_MspInit+0x2a0>)
 800adf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adf6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800adf8:	4b66      	ldr	r3, [pc, #408]	; (800af94 <HAL_ADC_MspInit+0x2a0>)
 800adfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800adfe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800ae00:	4b64      	ldr	r3, [pc, #400]	; (800af94 <HAL_ADC_MspInit+0x2a0>)
 800ae02:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae06:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800ae08:	4b62      	ldr	r3, [pc, #392]	; (800af94 <HAL_ADC_MspInit+0x2a0>)
 800ae0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ae0e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ae10:	4b60      	ldr	r3, [pc, #384]	; (800af94 <HAL_ADC_MspInit+0x2a0>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800ae16:	485f      	ldr	r0, [pc, #380]	; (800af94 <HAL_ADC_MspInit+0x2a0>)
 800ae18:	f7f7 fb00 	bl	800241c <HAL_DMA_Init>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800ae22:	f7ff ff37 	bl	800ac94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a5a      	ldr	r2, [pc, #360]	; (800af94 <HAL_ADC_MspInit+0x2a0>)
 800ae2a:	639a      	str	r2, [r3, #56]	; 0x38
 800ae2c:	4a59      	ldr	r2, [pc, #356]	; (800af94 <HAL_ADC_MspInit+0x2a0>)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800ae32:	2200      	movs	r2, #0
 800ae34:	2100      	movs	r1, #0
 800ae36:	2012      	movs	r0, #18
 800ae38:	f7f7 fab9 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800ae3c:	2012      	movs	r0, #18
 800ae3e:	f7f7 fad2 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800ae42:	e131      	b.n	800b0a8 <HAL_ADC_MspInit+0x3b4>
  else if(hadc->Instance==ADC2)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a54      	ldr	r2, [pc, #336]	; (800af9c <HAL_ADC_MspInit+0x2a8>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	f040 80ac 	bne.w	800afa8 <HAL_ADC_MspInit+0x2b4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800ae50:	2300      	movs	r3, #0
 800ae52:	623b      	str	r3, [r7, #32]
 800ae54:	4b4b      	ldr	r3, [pc, #300]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ae56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae58:	4a4a      	ldr	r2, [pc, #296]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ae5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae5e:	6453      	str	r3, [r2, #68]	; 0x44
 800ae60:	4b48      	ldr	r3, [pc, #288]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ae62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae68:	623b      	str	r3, [r7, #32]
 800ae6a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	61fb      	str	r3, [r7, #28]
 800ae70:	4b44      	ldr	r3, [pc, #272]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ae72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae74:	4a43      	ldr	r2, [pc, #268]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ae76:	f043 0304 	orr.w	r3, r3, #4
 800ae7a:	6313      	str	r3, [r2, #48]	; 0x30
 800ae7c:	4b41      	ldr	r3, [pc, #260]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ae7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae80:	f003 0304 	and.w	r3, r3, #4
 800ae84:	61fb      	str	r3, [r7, #28]
 800ae86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae88:	2300      	movs	r3, #0
 800ae8a:	61bb      	str	r3, [r7, #24]
 800ae8c:	4b3d      	ldr	r3, [pc, #244]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ae8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae90:	4a3c      	ldr	r2, [pc, #240]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ae92:	f043 0301 	orr.w	r3, r3, #1
 800ae96:	6313      	str	r3, [r2, #48]	; 0x30
 800ae98:	4b3a      	ldr	r3, [pc, #232]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800ae9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae9c:	f003 0301 	and.w	r3, r3, #1
 800aea0:	61bb      	str	r3, [r7, #24]
 800aea2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aea4:	2300      	movs	r3, #0
 800aea6:	617b      	str	r3, [r7, #20]
 800aea8:	4b36      	ldr	r3, [pc, #216]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800aeaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeac:	4a35      	ldr	r2, [pc, #212]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800aeae:	f043 0302 	orr.w	r3, r3, #2
 800aeb2:	6313      	str	r3, [r2, #48]	; 0x30
 800aeb4:	4b33      	ldr	r3, [pc, #204]	; (800af84 <HAL_ADC_MspInit+0x290>)
 800aeb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb8:	f003 0302 	and.w	r3, r3, #2
 800aebc:	617b      	str	r3, [r7, #20]
 800aebe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800aec0:	233e      	movs	r3, #62	; 0x3e
 800aec2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800aec4:	2303      	movs	r3, #3
 800aec6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aec8:	2300      	movs	r3, #0
 800aeca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aecc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aed0:	4619      	mov	r1, r3
 800aed2:	482d      	ldr	r0, [pc, #180]	; (800af88 <HAL_ADC_MspInit+0x294>)
 800aed4:	f7f7 fe86 	bl	8002be4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 800aed8:	2316      	movs	r3, #22
 800aeda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800aedc:	2303      	movs	r3, #3
 800aede:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aee0:	2300      	movs	r3, #0
 800aee2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aee4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aee8:	4619      	mov	r1, r3
 800aeea:	4828      	ldr	r0, [pc, #160]	; (800af8c <HAL_ADC_MspInit+0x298>)
 800aeec:	f7f7 fe7a 	bl	8002be4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800aef0:	2301      	movs	r3, #1
 800aef2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800aef4:	2303      	movs	r3, #3
 800aef6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aef8:	2300      	movs	r3, #0
 800aefa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aefc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800af00:	4619      	mov	r1, r3
 800af02:	4823      	ldr	r0, [pc, #140]	; (800af90 <HAL_ADC_MspInit+0x29c>)
 800af04:	f7f7 fe6e 	bl	8002be4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800af08:	4b25      	ldr	r3, [pc, #148]	; (800afa0 <HAL_ADC_MspInit+0x2ac>)
 800af0a:	4a26      	ldr	r2, [pc, #152]	; (800afa4 <HAL_ADC_MspInit+0x2b0>)
 800af0c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800af0e:	4b24      	ldr	r3, [pc, #144]	; (800afa0 <HAL_ADC_MspInit+0x2ac>)
 800af10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800af14:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800af16:	4b22      	ldr	r3, [pc, #136]	; (800afa0 <HAL_ADC_MspInit+0x2ac>)
 800af18:	2200      	movs	r2, #0
 800af1a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800af1c:	4b20      	ldr	r3, [pc, #128]	; (800afa0 <HAL_ADC_MspInit+0x2ac>)
 800af1e:	2200      	movs	r2, #0
 800af20:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800af22:	4b1f      	ldr	r3, [pc, #124]	; (800afa0 <HAL_ADC_MspInit+0x2ac>)
 800af24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af28:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800af2a:	4b1d      	ldr	r3, [pc, #116]	; (800afa0 <HAL_ADC_MspInit+0x2ac>)
 800af2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af30:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800af32:	4b1b      	ldr	r3, [pc, #108]	; (800afa0 <HAL_ADC_MspInit+0x2ac>)
 800af34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800af38:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800af3a:	4b19      	ldr	r3, [pc, #100]	; (800afa0 <HAL_ADC_MspInit+0x2ac>)
 800af3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af40:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800af42:	4b17      	ldr	r3, [pc, #92]	; (800afa0 <HAL_ADC_MspInit+0x2ac>)
 800af44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800af48:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800af4a:	4b15      	ldr	r3, [pc, #84]	; (800afa0 <HAL_ADC_MspInit+0x2ac>)
 800af4c:	2200      	movs	r2, #0
 800af4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800af50:	4813      	ldr	r0, [pc, #76]	; (800afa0 <HAL_ADC_MspInit+0x2ac>)
 800af52:	f7f7 fa63 	bl	800241c <HAL_DMA_Init>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d001      	beq.n	800af60 <HAL_ADC_MspInit+0x26c>
      Error_Handler();
 800af5c:	f7ff fe9a 	bl	800ac94 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a0f      	ldr	r2, [pc, #60]	; (800afa0 <HAL_ADC_MspInit+0x2ac>)
 800af64:	639a      	str	r2, [r3, #56]	; 0x38
 800af66:	4a0e      	ldr	r2, [pc, #56]	; (800afa0 <HAL_ADC_MspInit+0x2ac>)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800af6c:	2200      	movs	r2, #0
 800af6e:	2100      	movs	r1, #0
 800af70:	2012      	movs	r0, #18
 800af72:	f7f7 fa1c 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800af76:	2012      	movs	r0, #18
 800af78:	f7f7 fa35 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 800af7c:	e094      	b.n	800b0a8 <HAL_ADC_MspInit+0x3b4>
 800af7e:	bf00      	nop
 800af80:	40012000 	.word	0x40012000
 800af84:	40023800 	.word	0x40023800
 800af88:	40020800 	.word	0x40020800
 800af8c:	40020000 	.word	0x40020000
 800af90:	40020400 	.word	0x40020400
 800af94:	20000ca0 	.word	0x20000ca0
 800af98:	40026410 	.word	0x40026410
 800af9c:	40012100 	.word	0x40012100
 800afa0:	20000f28 	.word	0x20000f28
 800afa4:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a40      	ldr	r2, [pc, #256]	; (800b0b0 <HAL_ADC_MspInit+0x3bc>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d17a      	bne.n	800b0a8 <HAL_ADC_MspInit+0x3b4>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800afb2:	2300      	movs	r3, #0
 800afb4:	613b      	str	r3, [r7, #16]
 800afb6:	4b3f      	ldr	r3, [pc, #252]	; (800b0b4 <HAL_ADC_MspInit+0x3c0>)
 800afb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afba:	4a3e      	ldr	r2, [pc, #248]	; (800b0b4 <HAL_ADC_MspInit+0x3c0>)
 800afbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800afc0:	6453      	str	r3, [r2, #68]	; 0x44
 800afc2:	4b3c      	ldr	r3, [pc, #240]	; (800b0b4 <HAL_ADC_MspInit+0x3c0>)
 800afc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afca:	613b      	str	r3, [r7, #16]
 800afcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800afce:	2300      	movs	r3, #0
 800afd0:	60fb      	str	r3, [r7, #12]
 800afd2:	4b38      	ldr	r3, [pc, #224]	; (800b0b4 <HAL_ADC_MspInit+0x3c0>)
 800afd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd6:	4a37      	ldr	r2, [pc, #220]	; (800b0b4 <HAL_ADC_MspInit+0x3c0>)
 800afd8:	f043 0304 	orr.w	r3, r3, #4
 800afdc:	6313      	str	r3, [r2, #48]	; 0x30
 800afde:	4b35      	ldr	r3, [pc, #212]	; (800b0b4 <HAL_ADC_MspInit+0x3c0>)
 800afe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe2:	f003 0304 	and.w	r3, r3, #4
 800afe6:	60fb      	str	r3, [r7, #12]
 800afe8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800afea:	2300      	movs	r3, #0
 800afec:	60bb      	str	r3, [r7, #8]
 800afee:	4b31      	ldr	r3, [pc, #196]	; (800b0b4 <HAL_ADC_MspInit+0x3c0>)
 800aff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff2:	4a30      	ldr	r2, [pc, #192]	; (800b0b4 <HAL_ADC_MspInit+0x3c0>)
 800aff4:	f043 0301 	orr.w	r3, r3, #1
 800aff8:	6313      	str	r3, [r2, #48]	; 0x30
 800affa:	4b2e      	ldr	r3, [pc, #184]	; (800b0b4 <HAL_ADC_MspInit+0x3c0>)
 800affc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affe:	f003 0301 	and.w	r3, r3, #1
 800b002:	60bb      	str	r3, [r7, #8]
 800b004:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b006:	2308      	movs	r3, #8
 800b008:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b00a:	2303      	movs	r3, #3
 800b00c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b00e:	2300      	movs	r3, #0
 800b010:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b012:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b016:	4619      	mov	r1, r3
 800b018:	4827      	ldr	r0, [pc, #156]	; (800b0b8 <HAL_ADC_MspInit+0x3c4>)
 800b01a:	f7f7 fde3 	bl	8002be4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b01e:	2308      	movs	r3, #8
 800b020:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b022:	2303      	movs	r3, #3
 800b024:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b026:	2300      	movs	r3, #0
 800b028:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b02a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b02e:	4619      	mov	r1, r3
 800b030:	4822      	ldr	r0, [pc, #136]	; (800b0bc <HAL_ADC_MspInit+0x3c8>)
 800b032:	f7f7 fdd7 	bl	8002be4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800b036:	4b22      	ldr	r3, [pc, #136]	; (800b0c0 <HAL_ADC_MspInit+0x3cc>)
 800b038:	4a22      	ldr	r2, [pc, #136]	; (800b0c4 <HAL_ADC_MspInit+0x3d0>)
 800b03a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800b03c:	4b20      	ldr	r3, [pc, #128]	; (800b0c0 <HAL_ADC_MspInit+0x3cc>)
 800b03e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b042:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b044:	4b1e      	ldr	r3, [pc, #120]	; (800b0c0 <HAL_ADC_MspInit+0x3cc>)
 800b046:	2200      	movs	r2, #0
 800b048:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800b04a:	4b1d      	ldr	r3, [pc, #116]	; (800b0c0 <HAL_ADC_MspInit+0x3cc>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800b050:	4b1b      	ldr	r3, [pc, #108]	; (800b0c0 <HAL_ADC_MspInit+0x3cc>)
 800b052:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b056:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b058:	4b19      	ldr	r3, [pc, #100]	; (800b0c0 <HAL_ADC_MspInit+0x3cc>)
 800b05a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b05e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b060:	4b17      	ldr	r3, [pc, #92]	; (800b0c0 <HAL_ADC_MspInit+0x3cc>)
 800b062:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b066:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800b068:	4b15      	ldr	r3, [pc, #84]	; (800b0c0 <HAL_ADC_MspInit+0x3cc>)
 800b06a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b06e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800b070:	4b13      	ldr	r3, [pc, #76]	; (800b0c0 <HAL_ADC_MspInit+0x3cc>)
 800b072:	2200      	movs	r2, #0
 800b074:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b076:	4b12      	ldr	r3, [pc, #72]	; (800b0c0 <HAL_ADC_MspInit+0x3cc>)
 800b078:	2200      	movs	r2, #0
 800b07a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800b07c:	4810      	ldr	r0, [pc, #64]	; (800b0c0 <HAL_ADC_MspInit+0x3cc>)
 800b07e:	f7f7 f9cd 	bl	800241c <HAL_DMA_Init>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <HAL_ADC_MspInit+0x398>
      Error_Handler();
 800b088:	f7ff fe04 	bl	800ac94 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a0c      	ldr	r2, [pc, #48]	; (800b0c0 <HAL_ADC_MspInit+0x3cc>)
 800b090:	639a      	str	r2, [r3, #56]	; 0x38
 800b092:	4a0b      	ldr	r2, [pc, #44]	; (800b0c0 <HAL_ADC_MspInit+0x3cc>)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800b098:	2200      	movs	r2, #0
 800b09a:	2100      	movs	r1, #0
 800b09c:	2012      	movs	r0, #18
 800b09e:	f7f7 f986 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800b0a2:	2012      	movs	r0, #18
 800b0a4:	f7f7 f99f 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 800b0a8:	bf00      	nop
 800b0aa:	3748      	adds	r7, #72	; 0x48
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	40012200 	.word	0x40012200
 800b0b4:	40023800 	.word	0x40023800
 800b0b8:	40020800 	.word	0x40020800
 800b0bc:	40020000 	.word	0x40020000
 800b0c0:	20000a4c 	.word	0x20000a4c
 800b0c4:	40026428 	.word	0x40026428

0800b0c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b08a      	sub	sp, #40	; 0x28
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0d0:	f107 0314 	add.w	r3, r7, #20
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	601a      	str	r2, [r3, #0]
 800b0d8:	605a      	str	r2, [r3, #4]
 800b0da:	609a      	str	r2, [r3, #8]
 800b0dc:	60da      	str	r2, [r3, #12]
 800b0de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a19      	ldr	r2, [pc, #100]	; (800b14c <HAL_CAN_MspInit+0x84>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d12b      	bne.n	800b142 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	613b      	str	r3, [r7, #16]
 800b0ee:	4b18      	ldr	r3, [pc, #96]	; (800b150 <HAL_CAN_MspInit+0x88>)
 800b0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f2:	4a17      	ldr	r2, [pc, #92]	; (800b150 <HAL_CAN_MspInit+0x88>)
 800b0f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b0f8:	6413      	str	r3, [r2, #64]	; 0x40
 800b0fa:	4b15      	ldr	r3, [pc, #84]	; (800b150 <HAL_CAN_MspInit+0x88>)
 800b0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b102:	613b      	str	r3, [r7, #16]
 800b104:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b106:	2300      	movs	r3, #0
 800b108:	60fb      	str	r3, [r7, #12]
 800b10a:	4b11      	ldr	r3, [pc, #68]	; (800b150 <HAL_CAN_MspInit+0x88>)
 800b10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10e:	4a10      	ldr	r2, [pc, #64]	; (800b150 <HAL_CAN_MspInit+0x88>)
 800b110:	f043 0308 	orr.w	r3, r3, #8
 800b114:	6313      	str	r3, [r2, #48]	; 0x30
 800b116:	4b0e      	ldr	r3, [pc, #56]	; (800b150 <HAL_CAN_MspInit+0x88>)
 800b118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b11a:	f003 0308 	and.w	r3, r3, #8
 800b11e:	60fb      	str	r3, [r7, #12]
 800b120:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b122:	2303      	movs	r3, #3
 800b124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b126:	2302      	movs	r3, #2
 800b128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b12a:	2300      	movs	r3, #0
 800b12c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b12e:	2303      	movs	r3, #3
 800b130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800b132:	2309      	movs	r3, #9
 800b134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b136:	f107 0314 	add.w	r3, r7, #20
 800b13a:	4619      	mov	r1, r3
 800b13c:	4805      	ldr	r0, [pc, #20]	; (800b154 <HAL_CAN_MspInit+0x8c>)
 800b13e:	f7f7 fd51 	bl	8002be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800b142:	bf00      	nop
 800b144:	3728      	adds	r7, #40	; 0x28
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	40006400 	.word	0x40006400
 800b150:	40023800 	.word	0x40023800
 800b154:	40020c00 	.word	0x40020c00

0800b158 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b08c      	sub	sp, #48	; 0x30
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b160:	f107 031c 	add.w	r3, r7, #28
 800b164:	2200      	movs	r2, #0
 800b166:	601a      	str	r2, [r3, #0]
 800b168:	605a      	str	r2, [r3, #4]
 800b16a:	609a      	str	r2, [r3, #8]
 800b16c:	60da      	str	r2, [r3, #12]
 800b16e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a32      	ldr	r2, [pc, #200]	; (800b240 <HAL_I2C_MspInit+0xe8>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d12c      	bne.n	800b1d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b17a:	2300      	movs	r3, #0
 800b17c:	61bb      	str	r3, [r7, #24]
 800b17e:	4b31      	ldr	r3, [pc, #196]	; (800b244 <HAL_I2C_MspInit+0xec>)
 800b180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b182:	4a30      	ldr	r2, [pc, #192]	; (800b244 <HAL_I2C_MspInit+0xec>)
 800b184:	f043 0302 	orr.w	r3, r3, #2
 800b188:	6313      	str	r3, [r2, #48]	; 0x30
 800b18a:	4b2e      	ldr	r3, [pc, #184]	; (800b244 <HAL_I2C_MspInit+0xec>)
 800b18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18e:	f003 0302 	and.w	r3, r3, #2
 800b192:	61bb      	str	r3, [r7, #24]
 800b194:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b196:	23c0      	movs	r3, #192	; 0xc0
 800b198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b19a:	2312      	movs	r3, #18
 800b19c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b1a6:	2304      	movs	r3, #4
 800b1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b1aa:	f107 031c 	add.w	r3, r7, #28
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	4825      	ldr	r0, [pc, #148]	; (800b248 <HAL_I2C_MspInit+0xf0>)
 800b1b2:	f7f7 fd17 	bl	8002be4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	617b      	str	r3, [r7, #20]
 800b1ba:	4b22      	ldr	r3, [pc, #136]	; (800b244 <HAL_I2C_MspInit+0xec>)
 800b1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1be:	4a21      	ldr	r2, [pc, #132]	; (800b244 <HAL_I2C_MspInit+0xec>)
 800b1c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b1c4:	6413      	str	r3, [r2, #64]	; 0x40
 800b1c6:	4b1f      	ldr	r3, [pc, #124]	; (800b244 <HAL_I2C_MspInit+0xec>)
 800b1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1ce:	617b      	str	r3, [r7, #20]
 800b1d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800b1d2:	e031      	b.n	800b238 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a1c      	ldr	r2, [pc, #112]	; (800b24c <HAL_I2C_MspInit+0xf4>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d12c      	bne.n	800b238 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b1de:	2300      	movs	r3, #0
 800b1e0:	613b      	str	r3, [r7, #16]
 800b1e2:	4b18      	ldr	r3, [pc, #96]	; (800b244 <HAL_I2C_MspInit+0xec>)
 800b1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e6:	4a17      	ldr	r2, [pc, #92]	; (800b244 <HAL_I2C_MspInit+0xec>)
 800b1e8:	f043 0302 	orr.w	r3, r3, #2
 800b1ec:	6313      	str	r3, [r2, #48]	; 0x30
 800b1ee:	4b15      	ldr	r3, [pc, #84]	; (800b244 <HAL_I2C_MspInit+0xec>)
 800b1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f2:	f003 0302 	and.w	r3, r3, #2
 800b1f6:	613b      	str	r3, [r7, #16]
 800b1f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b1fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b1fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b200:	2312      	movs	r3, #18
 800b202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b204:	2301      	movs	r3, #1
 800b206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b208:	2303      	movs	r3, #3
 800b20a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b20c:	2304      	movs	r3, #4
 800b20e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b210:	f107 031c 	add.w	r3, r7, #28
 800b214:	4619      	mov	r1, r3
 800b216:	480c      	ldr	r0, [pc, #48]	; (800b248 <HAL_I2C_MspInit+0xf0>)
 800b218:	f7f7 fce4 	bl	8002be4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b21c:	2300      	movs	r3, #0
 800b21e:	60fb      	str	r3, [r7, #12]
 800b220:	4b08      	ldr	r3, [pc, #32]	; (800b244 <HAL_I2C_MspInit+0xec>)
 800b222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b224:	4a07      	ldr	r2, [pc, #28]	; (800b244 <HAL_I2C_MspInit+0xec>)
 800b226:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b22a:	6413      	str	r3, [r2, #64]	; 0x40
 800b22c:	4b05      	ldr	r3, [pc, #20]	; (800b244 <HAL_I2C_MspInit+0xec>)
 800b22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b234:	60fb      	str	r3, [r7, #12]
 800b236:	68fb      	ldr	r3, [r7, #12]
}
 800b238:	bf00      	nop
 800b23a:	3730      	adds	r7, #48	; 0x30
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	40005400 	.word	0x40005400
 800b244:	40023800 	.word	0x40023800
 800b248:	40020400 	.word	0x40020400
 800b24c:	40005800 	.word	0x40005800

0800b250 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a05      	ldr	r2, [pc, #20]	; (800b274 <HAL_RTC_MspInit+0x24>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d102      	bne.n	800b268 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b262:	4b05      	ldr	r3, [pc, #20]	; (800b278 <HAL_RTC_MspInit+0x28>)
 800b264:	2201      	movs	r2, #1
 800b266:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b268:	bf00      	nop
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr
 800b274:	40002800 	.word	0x40002800
 800b278:	42470e3c 	.word	0x42470e3c

0800b27c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b08a      	sub	sp, #40	; 0x28
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b284:	f107 0314 	add.w	r3, r7, #20
 800b288:	2200      	movs	r2, #0
 800b28a:	601a      	str	r2, [r3, #0]
 800b28c:	605a      	str	r2, [r3, #4]
 800b28e:	609a      	str	r2, [r3, #8]
 800b290:	60da      	str	r2, [r3, #12]
 800b292:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a1d      	ldr	r2, [pc, #116]	; (800b310 <HAL_SPI_MspInit+0x94>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d134      	bne.n	800b308 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b29e:	2300      	movs	r3, #0
 800b2a0:	613b      	str	r3, [r7, #16]
 800b2a2:	4b1c      	ldr	r3, [pc, #112]	; (800b314 <HAL_SPI_MspInit+0x98>)
 800b2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a6:	4a1b      	ldr	r2, [pc, #108]	; (800b314 <HAL_SPI_MspInit+0x98>)
 800b2a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b2ac:	6413      	str	r3, [r2, #64]	; 0x40
 800b2ae:	4b19      	ldr	r3, [pc, #100]	; (800b314 <HAL_SPI_MspInit+0x98>)
 800b2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2b6:	613b      	str	r3, [r7, #16]
 800b2b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	60fb      	str	r3, [r7, #12]
 800b2be:	4b15      	ldr	r3, [pc, #84]	; (800b314 <HAL_SPI_MspInit+0x98>)
 800b2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c2:	4a14      	ldr	r2, [pc, #80]	; (800b314 <HAL_SPI_MspInit+0x98>)
 800b2c4:	f043 0302 	orr.w	r3, r3, #2
 800b2c8:	6313      	str	r3, [r2, #48]	; 0x30
 800b2ca:	4b12      	ldr	r3, [pc, #72]	; (800b314 <HAL_SPI_MspInit+0x98>)
 800b2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ce:	f003 0302 	and.w	r3, r3, #2
 800b2d2:	60fb      	str	r3, [r7, #12]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800b2d6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b2da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2dc:	2302      	movs	r3, #2
 800b2de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2e4:	2303      	movs	r3, #3
 800b2e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b2e8:	2305      	movs	r3, #5
 800b2ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2ec:	f107 0314 	add.w	r3, r7, #20
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	4809      	ldr	r0, [pc, #36]	; (800b318 <HAL_SPI_MspInit+0x9c>)
 800b2f4:	f7f7 fc76 	bl	8002be4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	2024      	movs	r0, #36	; 0x24
 800b2fe:	f7f7 f856 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800b302:	2024      	movs	r0, #36	; 0x24
 800b304:	f7f7 f86f 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800b308:	bf00      	nop
 800b30a:	3728      	adds	r7, #40	; 0x28
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	40003800 	.word	0x40003800
 800b314:	40023800 	.word	0x40023800
 800b318:	40020400 	.word	0x40020400

0800b31c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b090      	sub	sp, #64	; 0x40
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b328:	2200      	movs	r2, #0
 800b32a:	601a      	str	r2, [r3, #0]
 800b32c:	605a      	str	r2, [r3, #4]
 800b32e:	609a      	str	r2, [r3, #8]
 800b330:	60da      	str	r2, [r3, #12]
 800b332:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a87      	ldr	r2, [pc, #540]	; (800b558 <HAL_TIM_Base_MspInit+0x23c>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d12e      	bne.n	800b39c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b33e:	2300      	movs	r3, #0
 800b340:	62bb      	str	r3, [r7, #40]	; 0x28
 800b342:	4b86      	ldr	r3, [pc, #536]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b346:	4a85      	ldr	r2, [pc, #532]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b348:	f043 0301 	orr.w	r3, r3, #1
 800b34c:	6453      	str	r3, [r2, #68]	; 0x44
 800b34e:	4b83      	ldr	r3, [pc, #524]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	62bb      	str	r3, [r7, #40]	; 0x28
 800b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800b35a:	2200      	movs	r2, #0
 800b35c:	2100      	movs	r1, #0
 800b35e:	2018      	movs	r0, #24
 800b360:	f7f7 f825 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800b364:	2018      	movs	r0, #24
 800b366:	f7f7 f83e 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800b36a:	2200      	movs	r2, #0
 800b36c:	2100      	movs	r1, #0
 800b36e:	2019      	movs	r0, #25
 800b370:	f7f7 f81d 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800b374:	2019      	movs	r0, #25
 800b376:	f7f7 f836 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800b37a:	2200      	movs	r2, #0
 800b37c:	2100      	movs	r1, #0
 800b37e:	201a      	movs	r0, #26
 800b380:	f7f7 f815 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800b384:	201a      	movs	r0, #26
 800b386:	f7f7 f82e 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800b38a:	2200      	movs	r2, #0
 800b38c:	2100      	movs	r1, #0
 800b38e:	201b      	movs	r0, #27
 800b390:	f7f7 f80d 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800b394:	201b      	movs	r0, #27
 800b396:	f7f7 f826 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800b39a:	e0d8      	b.n	800b54e <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM2)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3a4:	d10e      	bne.n	800b3c4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	627b      	str	r3, [r7, #36]	; 0x24
 800b3aa:	4b6c      	ldr	r3, [pc, #432]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ae:	4a6b      	ldr	r2, [pc, #428]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b3b0:	f043 0301 	orr.w	r3, r3, #1
 800b3b4:	6413      	str	r3, [r2, #64]	; 0x40
 800b3b6:	4b69      	ldr	r3, [pc, #420]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	627b      	str	r3, [r7, #36]	; 0x24
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b3c2:	e0c4      	b.n	800b54e <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM3)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a65      	ldr	r2, [pc, #404]	; (800b560 <HAL_TIM_Base_MspInit+0x244>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d116      	bne.n	800b3fc <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	623b      	str	r3, [r7, #32]
 800b3d2:	4b62      	ldr	r3, [pc, #392]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d6:	4a61      	ldr	r2, [pc, #388]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b3d8:	f043 0302 	orr.w	r3, r3, #2
 800b3dc:	6413      	str	r3, [r2, #64]	; 0x40
 800b3de:	4b5f      	ldr	r3, [pc, #380]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e2:	f003 0302 	and.w	r3, r3, #2
 800b3e6:	623b      	str	r3, [r7, #32]
 800b3e8:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	201d      	movs	r0, #29
 800b3f0:	f7f6 ffdd 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b3f4:	201d      	movs	r0, #29
 800b3f6:	f7f6 fff6 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 800b3fa:	e0a8      	b.n	800b54e <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM5)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a58      	ldr	r2, [pc, #352]	; (800b564 <HAL_TIM_Base_MspInit+0x248>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d116      	bne.n	800b434 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800b406:	2300      	movs	r3, #0
 800b408:	61fb      	str	r3, [r7, #28]
 800b40a:	4b54      	ldr	r3, [pc, #336]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b40e:	4a53      	ldr	r2, [pc, #332]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b410:	f043 0308 	orr.w	r3, r3, #8
 800b414:	6413      	str	r3, [r2, #64]	; 0x40
 800b416:	4b51      	ldr	r3, [pc, #324]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b41a:	f003 0308 	and.w	r3, r3, #8
 800b41e:	61fb      	str	r3, [r7, #28]
 800b420:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800b422:	2200      	movs	r2, #0
 800b424:	2100      	movs	r1, #0
 800b426:	2032      	movs	r0, #50	; 0x32
 800b428:	f7f6 ffc1 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800b42c:	2032      	movs	r0, #50	; 0x32
 800b42e:	f7f6 ffda 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 800b432:	e08c      	b.n	800b54e <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM6)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a4b      	ldr	r2, [pc, #300]	; (800b568 <HAL_TIM_Base_MspInit+0x24c>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d116      	bne.n	800b46c <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b43e:	2300      	movs	r3, #0
 800b440:	61bb      	str	r3, [r7, #24]
 800b442:	4b46      	ldr	r3, [pc, #280]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b446:	4a45      	ldr	r2, [pc, #276]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b448:	f043 0310 	orr.w	r3, r3, #16
 800b44c:	6413      	str	r3, [r2, #64]	; 0x40
 800b44e:	4b43      	ldr	r3, [pc, #268]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b452:	f003 0310 	and.w	r3, r3, #16
 800b456:	61bb      	str	r3, [r7, #24]
 800b458:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800b45a:	2200      	movs	r2, #0
 800b45c:	2100      	movs	r1, #0
 800b45e:	2036      	movs	r0, #54	; 0x36
 800b460:	f7f6 ffa5 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b464:	2036      	movs	r0, #54	; 0x36
 800b466:	f7f6 ffbe 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 800b46a:	e070      	b.n	800b54e <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM9)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a3e      	ldr	r2, [pc, #248]	; (800b56c <HAL_TIM_Base_MspInit+0x250>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d116      	bne.n	800b4a4 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800b476:	2300      	movs	r3, #0
 800b478:	617b      	str	r3, [r7, #20]
 800b47a:	4b38      	ldr	r3, [pc, #224]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b47c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b47e:	4a37      	ldr	r2, [pc, #220]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b484:	6453      	str	r3, [r2, #68]	; 0x44
 800b486:	4b35      	ldr	r3, [pc, #212]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b48a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b48e:	617b      	str	r3, [r7, #20]
 800b490:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800b492:	2200      	movs	r2, #0
 800b494:	2100      	movs	r1, #0
 800b496:	2018      	movs	r0, #24
 800b498:	f7f6 ff89 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800b49c:	2018      	movs	r0, #24
 800b49e:	f7f6 ffa2 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 800b4a2:	e054      	b.n	800b54e <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM12)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a31      	ldr	r2, [pc, #196]	; (800b570 <HAL_TIM_Base_MspInit+0x254>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d116      	bne.n	800b4dc <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	613b      	str	r3, [r7, #16]
 800b4b2:	4b2a      	ldr	r3, [pc, #168]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b6:	4a29      	ldr	r2, [pc, #164]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b4b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4bc:	6413      	str	r3, [r2, #64]	; 0x40
 800b4be:	4b27      	ldr	r3, [pc, #156]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4c6:	613b      	str	r3, [r7, #16]
 800b4c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	202b      	movs	r0, #43	; 0x2b
 800b4d0:	f7f6 ff6d 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800b4d4:	202b      	movs	r0, #43	; 0x2b
 800b4d6:	f7f6 ff86 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 800b4da:	e038      	b.n	800b54e <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM13)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a24      	ldr	r2, [pc, #144]	; (800b574 <HAL_TIM_Base_MspInit+0x258>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d133      	bne.n	800b54e <HAL_TIM_Base_MspInit+0x232>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	60fb      	str	r3, [r7, #12]
 800b4ea:	4b1c      	ldr	r3, [pc, #112]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ee:	4a1b      	ldr	r2, [pc, #108]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b4f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4f4:	6413      	str	r3, [r2, #64]	; 0x40
 800b4f6:	4b19      	ldr	r3, [pc, #100]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4fe:	60fb      	str	r3, [r7, #12]
 800b500:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b502:	2300      	movs	r3, #0
 800b504:	60bb      	str	r3, [r7, #8]
 800b506:	4b15      	ldr	r3, [pc, #84]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b50a:	4a14      	ldr	r2, [pc, #80]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b50c:	f043 0301 	orr.w	r3, r3, #1
 800b510:	6313      	str	r3, [r2, #48]	; 0x30
 800b512:	4b12      	ldr	r3, [pc, #72]	; (800b55c <HAL_TIM_Base_MspInit+0x240>)
 800b514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b516:	f003 0301 	and.w	r3, r3, #1
 800b51a:	60bb      	str	r3, [r7, #8]
 800b51c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b51e:	2340      	movs	r3, #64	; 0x40
 800b520:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b522:	2302      	movs	r3, #2
 800b524:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b526:	2300      	movs	r3, #0
 800b528:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b52a:	2300      	movs	r3, #0
 800b52c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800b52e:	2309      	movs	r3, #9
 800b530:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b536:	4619      	mov	r1, r3
 800b538:	480f      	ldr	r0, [pc, #60]	; (800b578 <HAL_TIM_Base_MspInit+0x25c>)
 800b53a:	f7f7 fb53 	bl	8002be4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800b53e:	2200      	movs	r2, #0
 800b540:	2100      	movs	r1, #0
 800b542:	202c      	movs	r0, #44	; 0x2c
 800b544:	f7f6 ff33 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800b548:	202c      	movs	r0, #44	; 0x2c
 800b54a:	f7f6 ff4c 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 800b54e:	bf00      	nop
 800b550:	3740      	adds	r7, #64	; 0x40
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	40010000 	.word	0x40010000
 800b55c:	40023800 	.word	0x40023800
 800b560:	40000400 	.word	0x40000400
 800b564:	40000c00 	.word	0x40000c00
 800b568:	40001000 	.word	0x40001000
 800b56c:	40014000 	.word	0x40014000
 800b570:	40001800 	.word	0x40001800
 800b574:	40001c00 	.word	0x40001c00
 800b578:	40020000 	.word	0x40020000

0800b57c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b08a      	sub	sp, #40	; 0x28
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b584:	f107 0314 	add.w	r3, r7, #20
 800b588:	2200      	movs	r2, #0
 800b58a:	601a      	str	r2, [r3, #0]
 800b58c:	605a      	str	r2, [r3, #4]
 800b58e:	609a      	str	r2, [r3, #8]
 800b590:	60da      	str	r2, [r3, #12]
 800b592:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a29      	ldr	r2, [pc, #164]	; (800b640 <HAL_TIM_Encoder_MspInit+0xc4>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d14b      	bne.n	800b636 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800b59e:	2300      	movs	r3, #0
 800b5a0:	613b      	str	r3, [r7, #16]
 800b5a2:	4b28      	ldr	r3, [pc, #160]	; (800b644 <HAL_TIM_Encoder_MspInit+0xc8>)
 800b5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5a6:	4a27      	ldr	r2, [pc, #156]	; (800b644 <HAL_TIM_Encoder_MspInit+0xc8>)
 800b5a8:	f043 0302 	orr.w	r3, r3, #2
 800b5ac:	6453      	str	r3, [r2, #68]	; 0x44
 800b5ae:	4b25      	ldr	r3, [pc, #148]	; (800b644 <HAL_TIM_Encoder_MspInit+0xc8>)
 800b5b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5b2:	f003 0302 	and.w	r3, r3, #2
 800b5b6:	613b      	str	r3, [r7, #16]
 800b5b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	60fb      	str	r3, [r7, #12]
 800b5be:	4b21      	ldr	r3, [pc, #132]	; (800b644 <HAL_TIM_Encoder_MspInit+0xc8>)
 800b5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c2:	4a20      	ldr	r2, [pc, #128]	; (800b644 <HAL_TIM_Encoder_MspInit+0xc8>)
 800b5c4:	f043 0304 	orr.w	r3, r3, #4
 800b5c8:	6313      	str	r3, [r2, #48]	; 0x30
 800b5ca:	4b1e      	ldr	r3, [pc, #120]	; (800b644 <HAL_TIM_Encoder_MspInit+0xc8>)
 800b5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ce:	f003 0304 	and.w	r3, r3, #4
 800b5d2:	60fb      	str	r3, [r7, #12]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b5d6:	23c0      	movs	r3, #192	; 0xc0
 800b5d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5da:	2302      	movs	r3, #2
 800b5dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800b5e6:	2303      	movs	r3, #3
 800b5e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b5ea:	f107 0314 	add.w	r3, r7, #20
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	4815      	ldr	r0, [pc, #84]	; (800b648 <HAL_TIM_Encoder_MspInit+0xcc>)
 800b5f2:	f7f7 faf7 	bl	8002be4 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	202b      	movs	r0, #43	; 0x2b
 800b5fc:	f7f6 fed7 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800b600:	202b      	movs	r0, #43	; 0x2b
 800b602:	f7f6 fef0 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800b606:	2200      	movs	r2, #0
 800b608:	2100      	movs	r1, #0
 800b60a:	202c      	movs	r0, #44	; 0x2c
 800b60c:	f7f6 fecf 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800b610:	202c      	movs	r0, #44	; 0x2c
 800b612:	f7f6 fee8 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800b616:	2200      	movs	r2, #0
 800b618:	2100      	movs	r1, #0
 800b61a:	202d      	movs	r0, #45	; 0x2d
 800b61c:	f7f6 fec7 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800b620:	202d      	movs	r0, #45	; 0x2d
 800b622:	f7f6 fee0 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800b626:	2200      	movs	r2, #0
 800b628:	2100      	movs	r1, #0
 800b62a:	202e      	movs	r0, #46	; 0x2e
 800b62c:	f7f6 febf 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800b630:	202e      	movs	r0, #46	; 0x2e
 800b632:	f7f6 fed8 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800b636:	bf00      	nop
 800b638:	3728      	adds	r7, #40	; 0x28
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	40010400 	.word	0x40010400
 800b644:	40023800 	.word	0x40023800
 800b648:	40020800 	.word	0x40020800

0800b64c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b08a      	sub	sp, #40	; 0x28
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b654:	f107 0314 	add.w	r3, r7, #20
 800b658:	2200      	movs	r2, #0
 800b65a:	601a      	str	r2, [r3, #0]
 800b65c:	605a      	str	r2, [r3, #4]
 800b65e:	609a      	str	r2, [r3, #8]
 800b660:	60da      	str	r2, [r3, #12]
 800b662:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a24      	ldr	r2, [pc, #144]	; (800b6fc <HAL_TIM_MspPostInit+0xb0>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d11f      	bne.n	800b6ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b66e:	2300      	movs	r3, #0
 800b670:	613b      	str	r3, [r7, #16]
 800b672:	4b23      	ldr	r3, [pc, #140]	; (800b700 <HAL_TIM_MspPostInit+0xb4>)
 800b674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b676:	4a22      	ldr	r2, [pc, #136]	; (800b700 <HAL_TIM_MspPostInit+0xb4>)
 800b678:	f043 0310 	orr.w	r3, r3, #16
 800b67c:	6313      	str	r3, [r2, #48]	; 0x30
 800b67e:	4b20      	ldr	r3, [pc, #128]	; (800b700 <HAL_TIM_MspPostInit+0xb4>)
 800b680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b682:	f003 0310 	and.w	r3, r3, #16
 800b686:	613b      	str	r3, [r7, #16]
 800b688:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800b68a:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 800b68e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b690:	2302      	movs	r3, #2
 800b692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b694:	2300      	movs	r3, #0
 800b696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b698:	2300      	movs	r3, #0
 800b69a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b69c:	2301      	movs	r3, #1
 800b69e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b6a0:	f107 0314 	add.w	r3, r7, #20
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	4817      	ldr	r0, [pc, #92]	; (800b704 <HAL_TIM_MspPostInit+0xb8>)
 800b6a8:	f7f7 fa9c 	bl	8002be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800b6ac:	e022      	b.n	800b6f4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a15      	ldr	r2, [pc, #84]	; (800b708 <HAL_TIM_MspPostInit+0xbc>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d11d      	bne.n	800b6f4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	60fb      	str	r3, [r7, #12]
 800b6bc:	4b10      	ldr	r3, [pc, #64]	; (800b700 <HAL_TIM_MspPostInit+0xb4>)
 800b6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c0:	4a0f      	ldr	r2, [pc, #60]	; (800b700 <HAL_TIM_MspPostInit+0xb4>)
 800b6c2:	f043 0310 	orr.w	r3, r3, #16
 800b6c6:	6313      	str	r3, [r2, #48]	; 0x30
 800b6c8:	4b0d      	ldr	r3, [pc, #52]	; (800b700 <HAL_TIM_MspPostInit+0xb4>)
 800b6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6cc:	f003 0310 	and.w	r3, r3, #16
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800b6d4:	2360      	movs	r3, #96	; 0x60
 800b6d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6d8:	2302      	movs	r3, #2
 800b6da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b6e8:	f107 0314 	add.w	r3, r7, #20
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	4805      	ldr	r0, [pc, #20]	; (800b704 <HAL_TIM_MspPostInit+0xb8>)
 800b6f0:	f7f7 fa78 	bl	8002be4 <HAL_GPIO_Init>
}
 800b6f4:	bf00      	nop
 800b6f6:	3728      	adds	r7, #40	; 0x28
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	40010000 	.word	0x40010000
 800b700:	40023800 	.word	0x40023800
 800b704:	40021000 	.word	0x40021000
 800b708:	40014000 	.word	0x40014000

0800b70c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b08a      	sub	sp, #40	; 0x28
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b714:	f107 0314 	add.w	r3, r7, #20
 800b718:	2200      	movs	r2, #0
 800b71a:	601a      	str	r2, [r3, #0]
 800b71c:	605a      	str	r2, [r3, #4]
 800b71e:	609a      	str	r2, [r3, #8]
 800b720:	60da      	str	r2, [r3, #12]
 800b722:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a34      	ldr	r2, [pc, #208]	; (800b7fc <HAL_UART_MspInit+0xf0>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d162      	bne.n	800b7f4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b72e:	2300      	movs	r3, #0
 800b730:	613b      	str	r3, [r7, #16]
 800b732:	4b33      	ldr	r3, [pc, #204]	; (800b800 <HAL_UART_MspInit+0xf4>)
 800b734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b736:	4a32      	ldr	r2, [pc, #200]	; (800b800 <HAL_UART_MspInit+0xf4>)
 800b738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b73c:	6413      	str	r3, [r2, #64]	; 0x40
 800b73e:	4b30      	ldr	r3, [pc, #192]	; (800b800 <HAL_UART_MspInit+0xf4>)
 800b740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b746:	613b      	str	r3, [r7, #16]
 800b748:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b74a:	2300      	movs	r3, #0
 800b74c:	60fb      	str	r3, [r7, #12]
 800b74e:	4b2c      	ldr	r3, [pc, #176]	; (800b800 <HAL_UART_MspInit+0xf4>)
 800b750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b752:	4a2b      	ldr	r2, [pc, #172]	; (800b800 <HAL_UART_MspInit+0xf4>)
 800b754:	f043 0308 	orr.w	r3, r3, #8
 800b758:	6313      	str	r3, [r2, #48]	; 0x30
 800b75a:	4b29      	ldr	r3, [pc, #164]	; (800b800 <HAL_UART_MspInit+0xf4>)
 800b75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75e:	f003 0308 	and.w	r3, r3, #8
 800b762:	60fb      	str	r3, [r7, #12]
 800b764:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800b766:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b76a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b76c:	2302      	movs	r3, #2
 800b76e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b770:	2301      	movs	r3, #1
 800b772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b774:	2303      	movs	r3, #3
 800b776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b778:	2307      	movs	r3, #7
 800b77a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b77c:	f107 0314 	add.w	r3, r7, #20
 800b780:	4619      	mov	r1, r3
 800b782:	4820      	ldr	r0, [pc, #128]	; (800b804 <HAL_UART_MspInit+0xf8>)
 800b784:	f7f7 fa2e 	bl	8002be4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800b788:	4b1f      	ldr	r3, [pc, #124]	; (800b808 <HAL_UART_MspInit+0xfc>)
 800b78a:	4a20      	ldr	r2, [pc, #128]	; (800b80c <HAL_UART_MspInit+0x100>)
 800b78c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800b78e:	4b1e      	ldr	r3, [pc, #120]	; (800b808 <HAL_UART_MspInit+0xfc>)
 800b790:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b794:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b796:	4b1c      	ldr	r3, [pc, #112]	; (800b808 <HAL_UART_MspInit+0xfc>)
 800b798:	2240      	movs	r2, #64	; 0x40
 800b79a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b79c:	4b1a      	ldr	r3, [pc, #104]	; (800b808 <HAL_UART_MspInit+0xfc>)
 800b79e:	2200      	movs	r2, #0
 800b7a0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b7a2:	4b19      	ldr	r3, [pc, #100]	; (800b808 <HAL_UART_MspInit+0xfc>)
 800b7a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b7a8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b7aa:	4b17      	ldr	r3, [pc, #92]	; (800b808 <HAL_UART_MspInit+0xfc>)
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7b0:	4b15      	ldr	r3, [pc, #84]	; (800b808 <HAL_UART_MspInit+0xfc>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800b7b6:	4b14      	ldr	r3, [pc, #80]	; (800b808 <HAL_UART_MspInit+0xfc>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b7bc:	4b12      	ldr	r3, [pc, #72]	; (800b808 <HAL_UART_MspInit+0xfc>)
 800b7be:	2200      	movs	r2, #0
 800b7c0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b7c2:	4b11      	ldr	r3, [pc, #68]	; (800b808 <HAL_UART_MspInit+0xfc>)
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800b7c8:	480f      	ldr	r0, [pc, #60]	; (800b808 <HAL_UART_MspInit+0xfc>)
 800b7ca:	f7f6 fe27 	bl	800241c <HAL_DMA_Init>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d001      	beq.n	800b7d8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800b7d4:	f7ff fa5e 	bl	800ac94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a0b      	ldr	r2, [pc, #44]	; (800b808 <HAL_UART_MspInit+0xfc>)
 800b7dc:	631a      	str	r2, [r3, #48]	; 0x30
 800b7de:	4a0a      	ldr	r2, [pc, #40]	; (800b808 <HAL_UART_MspInit+0xfc>)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	2027      	movs	r0, #39	; 0x27
 800b7ea:	f7f6 fde0 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800b7ee:	2027      	movs	r0, #39	; 0x27
 800b7f0:	f7f6 fdf9 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b7f4:	bf00      	nop
 800b7f6:	3728      	adds	r7, #40	; 0x28
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	40004800 	.word	0x40004800
 800b800:	40023800 	.word	0x40023800
 800b804:	40020c00 	.word	0x40020c00
 800b808:	20000aac 	.word	0x20000aac
 800b80c:	40026058 	.word	0x40026058

0800b810 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b08a      	sub	sp, #40	; 0x28
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b818:	f107 0314 	add.w	r3, r7, #20
 800b81c:	2200      	movs	r2, #0
 800b81e:	601a      	str	r2, [r3, #0]
 800b820:	605a      	str	r2, [r3, #4]
 800b822:	609a      	str	r2, [r3, #8]
 800b824:	60da      	str	r2, [r3, #12]
 800b826:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b830:	d132      	bne.n	800b898 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b832:	2300      	movs	r3, #0
 800b834:	613b      	str	r3, [r7, #16]
 800b836:	4b1a      	ldr	r3, [pc, #104]	; (800b8a0 <HAL_PCD_MspInit+0x90>)
 800b838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b83a:	4a19      	ldr	r2, [pc, #100]	; (800b8a0 <HAL_PCD_MspInit+0x90>)
 800b83c:	f043 0301 	orr.w	r3, r3, #1
 800b840:	6313      	str	r3, [r2, #48]	; 0x30
 800b842:	4b17      	ldr	r3, [pc, #92]	; (800b8a0 <HAL_PCD_MspInit+0x90>)
 800b844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b846:	f003 0301 	and.w	r3, r3, #1
 800b84a:	613b      	str	r3, [r7, #16]
 800b84c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b84e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b854:	2302      	movs	r3, #2
 800b856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b858:	2300      	movs	r3, #0
 800b85a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b85c:	2303      	movs	r3, #3
 800b85e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b860:	230a      	movs	r3, #10
 800b862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b864:	f107 0314 	add.w	r3, r7, #20
 800b868:	4619      	mov	r1, r3
 800b86a:	480e      	ldr	r0, [pc, #56]	; (800b8a4 <HAL_PCD_MspInit+0x94>)
 800b86c:	f7f7 f9ba 	bl	8002be4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b870:	4b0b      	ldr	r3, [pc, #44]	; (800b8a0 <HAL_PCD_MspInit+0x90>)
 800b872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b874:	4a0a      	ldr	r2, [pc, #40]	; (800b8a0 <HAL_PCD_MspInit+0x90>)
 800b876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b87a:	6353      	str	r3, [r2, #52]	; 0x34
 800b87c:	2300      	movs	r3, #0
 800b87e:	60fb      	str	r3, [r7, #12]
 800b880:	4b07      	ldr	r3, [pc, #28]	; (800b8a0 <HAL_PCD_MspInit+0x90>)
 800b882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b884:	4a06      	ldr	r2, [pc, #24]	; (800b8a0 <HAL_PCD_MspInit+0x90>)
 800b886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b88a:	6453      	str	r3, [r2, #68]	; 0x44
 800b88c:	4b04      	ldr	r3, [pc, #16]	; (800b8a0 <HAL_PCD_MspInit+0x90>)
 800b88e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b894:	60fb      	str	r3, [r7, #12]
 800b896:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800b898:	bf00      	nop
 800b89a:	3728      	adds	r7, #40	; 0x28
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	40023800 	.word	0x40023800
 800b8a4:	40020000 	.word	0x40020000

0800b8a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b8ac:	bf00      	nop
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr

0800b8b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b8b6:	b480      	push	{r7}
 800b8b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b8ba:	e7fe      	b.n	800b8ba <HardFault_Handler+0x4>

0800b8bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b8c0:	e7fe      	b.n	800b8c0 <MemManage_Handler+0x4>

0800b8c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b8c6:	e7fe      	b.n	800b8c6 <BusFault_Handler+0x4>

0800b8c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b8cc:	e7fe      	b.n	800b8cc <UsageFault_Handler+0x4>

0800b8ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b8ce:	b480      	push	{r7}
 800b8d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b8d2:	bf00      	nop
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b8e0:	bf00      	nop
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b8ea:	b480      	push	{r7}
 800b8ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b8ee:	bf00      	nop
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b8fc:	f7f5 fb80 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b900:	bf00      	nop
 800b902:	bd80      	pop	{r7, pc}

0800b904 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800b908:	4802      	ldr	r0, [pc, #8]	; (800b914 <DMA1_Stream3_IRQHandler+0x10>)
 800b90a:	f7f6 feaf 	bl	800266c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800b90e:	bf00      	nop
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	20000aac 	.word	0x20000aac

0800b918 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800b91c:	4805      	ldr	r0, [pc, #20]	; (800b934 <ADC_IRQHandler+0x1c>)
 800b91e:	f7f5 fbf4 	bl	800110a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800b922:	4805      	ldr	r0, [pc, #20]	; (800b938 <ADC_IRQHandler+0x20>)
 800b924:	f7f5 fbf1 	bl	800110a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800b928:	4804      	ldr	r0, [pc, #16]	; (800b93c <ADC_IRQHandler+0x24>)
 800b92a:	f7f5 fbee 	bl	800110a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800b92e:	bf00      	nop
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	20000bcc 	.word	0x20000bcc
 800b938:	20000550 	.word	0x20000550
 800b93c:	20000c14 	.word	0x20000c14

0800b940 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800b944:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b948:	f7f7 fb1a 	bl	8002f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800b94c:	bf00      	nop
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b954:	4803      	ldr	r0, [pc, #12]	; (800b964 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800b956:	f7fa faef 	bl	8005f38 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800b95a:	4803      	ldr	r0, [pc, #12]	; (800b968 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800b95c:	f7fa faec 	bl	8005f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800b960:	bf00      	nop
 800b962:	bd80      	pop	{r7, pc}
 800b964:	20000d60 	.word	0x20000d60
 800b968:	20000e08 	.word	0x20000e08

0800b96c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b970:	4802      	ldr	r0, [pc, #8]	; (800b97c <TIM1_UP_TIM10_IRQHandler+0x10>)
 800b972:	f7fa fae1 	bl	8005f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800b976:	bf00      	nop
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	20000d60 	.word	0x20000d60

0800b980 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b984:	4802      	ldr	r0, [pc, #8]	; (800b990 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800b986:	f7fa fad7 	bl	8005f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800b98a:	bf00      	nop
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	20000d60 	.word	0x20000d60

0800b994 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b998:	4802      	ldr	r0, [pc, #8]	; (800b9a4 <TIM1_CC_IRQHandler+0x10>)
 800b99a:	f7fa facd 	bl	8005f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800b99e:	bf00      	nop
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	20000d60 	.word	0x20000d60

0800b9a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b9ac:	4802      	ldr	r0, [pc, #8]	; (800b9b8 <TIM3_IRQHandler+0x10>)
 800b9ae:	f7fa fac3 	bl	8005f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
  /* USER CODE END TIM3_IRQn 1 */
}
 800b9b2:	bf00      	nop
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	20000b50 	.word	0x20000b50

0800b9bc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800b9c0:	4802      	ldr	r0, [pc, #8]	; (800b9cc <SPI2_IRQHandler+0x10>)
 800b9c2:	f7f9 fe11 	bl	80055e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800b9c6:	bf00      	nop
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	20000130 	.word	0x20000130

0800b9d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800b9d4:	4802      	ldr	r0, [pc, #8]	; (800b9e0 <USART3_IRQHandler+0x10>)
 800b9d6:	f7fb fc5d 	bl	8007294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800b9da:	bf00      	nop
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	20000510 	.word	0x20000510

0800b9e4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800b9e8:	4803      	ldr	r0, [pc, #12]	; (800b9f8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800b9ea:	f7fa faa5 	bl	8005f38 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800b9ee:	4803      	ldr	r0, [pc, #12]	; (800b9fc <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800b9f0:	f7fa faa2 	bl	8005f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800b9f4:	bf00      	nop
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	200004d0 	.word	0x200004d0
 800b9fc:	20000fb0 	.word	0x20000fb0

0800ba00 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800ba04:	4803      	ldr	r0, [pc, #12]	; (800ba14 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800ba06:	f7fa fa97 	bl	8005f38 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800ba0a:	4803      	ldr	r0, [pc, #12]	; (800ba18 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800ba0c:	f7fa fa94 	bl	8005f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800ba10:	bf00      	nop
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	200004d0 	.word	0x200004d0
 800ba18:	20000c5c 	.word	0x20000c5c

0800ba1c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800ba20:	4802      	ldr	r0, [pc, #8]	; (800ba2c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800ba22:	f7fa fa89 	bl	8005f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800ba26:	bf00      	nop
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	200004d0 	.word	0x200004d0

0800ba30 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800ba34:	4802      	ldr	r0, [pc, #8]	; (800ba40 <TIM8_CC_IRQHandler+0x10>)
 800ba36:	f7fa fa7f 	bl	8005f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800ba3a:	bf00      	nop
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	200004d0 	.word	0x200004d0

0800ba44 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800ba48:	4802      	ldr	r0, [pc, #8]	; (800ba54 <TIM5_IRQHandler+0x10>)
 800ba4a:	f7fa fa75 	bl	8005f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800ba4e:	bf00      	nop
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	20000b0c 	.word	0x20000b0c

0800ba58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800ba5c:	4802      	ldr	r0, [pc, #8]	; (800ba68 <TIM6_DAC_IRQHandler+0x10>)
 800ba5e:	f7fa fa6b 	bl	8005f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800ba62:	bf00      	nop
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	20000d20 	.word	0x20000d20

0800ba6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800ba70:	4802      	ldr	r0, [pc, #8]	; (800ba7c <DMA2_Stream0_IRQHandler+0x10>)
 800ba72:	f7f6 fdfb 	bl	800266c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800ba76:	bf00      	nop
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	20000ca0 	.word	0x20000ca0

0800ba80 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800ba84:	4802      	ldr	r0, [pc, #8]	; (800ba90 <DMA2_Stream1_IRQHandler+0x10>)
 800ba86:	f7f6 fdf1 	bl	800266c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800ba8a:	bf00      	nop
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	20000a4c 	.word	0x20000a4c

0800ba94 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800ba98:	4802      	ldr	r0, [pc, #8]	; (800baa4 <DMA2_Stream2_IRQHandler+0x10>)
 800ba9a:	f7f6 fde7 	bl	800266c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800ba9e:	bf00      	nop
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	20000f28 	.word	0x20000f28

0800baa8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800bab0:	4b11      	ldr	r3, [pc, #68]	; (800baf8 <_sbrk+0x50>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d102      	bne.n	800babe <_sbrk+0x16>
		heap_end = &end;
 800bab8:	4b0f      	ldr	r3, [pc, #60]	; (800baf8 <_sbrk+0x50>)
 800baba:	4a10      	ldr	r2, [pc, #64]	; (800bafc <_sbrk+0x54>)
 800babc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800babe:	4b0e      	ldr	r3, [pc, #56]	; (800baf8 <_sbrk+0x50>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800bac4:	4b0c      	ldr	r3, [pc, #48]	; (800baf8 <_sbrk+0x50>)
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	4413      	add	r3, r2
 800bacc:	466a      	mov	r2, sp
 800bace:	4293      	cmp	r3, r2
 800bad0:	d907      	bls.n	800bae2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800bad2:	f000 f855 	bl	800bb80 <__errno>
 800bad6:	4602      	mov	r2, r0
 800bad8:	230c      	movs	r3, #12
 800bada:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800badc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bae0:	e006      	b.n	800baf0 <_sbrk+0x48>
	}

	heap_end += incr;
 800bae2:	4b05      	ldr	r3, [pc, #20]	; (800baf8 <_sbrk+0x50>)
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4413      	add	r3, r2
 800baea:	4a03      	ldr	r2, [pc, #12]	; (800baf8 <_sbrk+0x50>)
 800baec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800baee:	68fb      	ldr	r3, [r7, #12]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	200000f4 	.word	0x200000f4
 800bafc:	20001348 	.word	0x20001348

0800bb00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bb00:	b480      	push	{r7}
 800bb02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bb04:	4b08      	ldr	r3, [pc, #32]	; (800bb28 <SystemInit+0x28>)
 800bb06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb0a:	4a07      	ldr	r2, [pc, #28]	; (800bb28 <SystemInit+0x28>)
 800bb0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bb14:	4b04      	ldr	r3, [pc, #16]	; (800bb28 <SystemInit+0x28>)
 800bb16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bb1a:	609a      	str	r2, [r3, #8]
#endif
}
 800bb1c:	bf00      	nop
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	e000ed00 	.word	0xe000ed00

0800bb2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800bb2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bb64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bb30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bb32:	e003      	b.n	800bb3c <LoopCopyDataInit>

0800bb34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bb34:	4b0c      	ldr	r3, [pc, #48]	; (800bb68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bb36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bb38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bb3a:	3104      	adds	r1, #4

0800bb3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bb3c:	480b      	ldr	r0, [pc, #44]	; (800bb6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bb3e:	4b0c      	ldr	r3, [pc, #48]	; (800bb70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bb40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bb42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bb44:	d3f6      	bcc.n	800bb34 <CopyDataInit>
  ldr  r2, =_sbss
 800bb46:	4a0b      	ldr	r2, [pc, #44]	; (800bb74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bb48:	e002      	b.n	800bb50 <LoopFillZerobss>

0800bb4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bb4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bb4c:	f842 3b04 	str.w	r3, [r2], #4

0800bb50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bb50:	4b09      	ldr	r3, [pc, #36]	; (800bb78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bb52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bb54:	d3f9      	bcc.n	800bb4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bb56:	f7ff ffd3 	bl	800bb00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bb5a:	f000 f817 	bl	800bb8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bb5e:	f7fc fc13 	bl	8008388 <main>
  bx  lr    
 800bb62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800bb64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800bb68:	0800d7f0 	.word	0x0800d7f0
  ldr  r0, =_sdata
 800bb6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bb70:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 800bb74:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800bb78:	20001348 	.word	0x20001348

0800bb7c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bb7c:	e7fe      	b.n	800bb7c <CAN1_RX0_IRQHandler>
	...

0800bb80 <__errno>:
 800bb80:	4b01      	ldr	r3, [pc, #4]	; (800bb88 <__errno+0x8>)
 800bb82:	6818      	ldr	r0, [r3, #0]
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	20000030 	.word	0x20000030

0800bb8c <__libc_init_array>:
 800bb8c:	b570      	push	{r4, r5, r6, lr}
 800bb8e:	4e0d      	ldr	r6, [pc, #52]	; (800bbc4 <__libc_init_array+0x38>)
 800bb90:	4c0d      	ldr	r4, [pc, #52]	; (800bbc8 <__libc_init_array+0x3c>)
 800bb92:	1ba4      	subs	r4, r4, r6
 800bb94:	10a4      	asrs	r4, r4, #2
 800bb96:	2500      	movs	r5, #0
 800bb98:	42a5      	cmp	r5, r4
 800bb9a:	d109      	bne.n	800bbb0 <__libc_init_array+0x24>
 800bb9c:	4e0b      	ldr	r6, [pc, #44]	; (800bbcc <__libc_init_array+0x40>)
 800bb9e:	4c0c      	ldr	r4, [pc, #48]	; (800bbd0 <__libc_init_array+0x44>)
 800bba0:	f001 fc44 	bl	800d42c <_init>
 800bba4:	1ba4      	subs	r4, r4, r6
 800bba6:	10a4      	asrs	r4, r4, #2
 800bba8:	2500      	movs	r5, #0
 800bbaa:	42a5      	cmp	r5, r4
 800bbac:	d105      	bne.n	800bbba <__libc_init_array+0x2e>
 800bbae:	bd70      	pop	{r4, r5, r6, pc}
 800bbb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbb4:	4798      	blx	r3
 800bbb6:	3501      	adds	r5, #1
 800bbb8:	e7ee      	b.n	800bb98 <__libc_init_array+0xc>
 800bbba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbbe:	4798      	blx	r3
 800bbc0:	3501      	adds	r5, #1
 800bbc2:	e7f2      	b.n	800bbaa <__libc_init_array+0x1e>
 800bbc4:	0800d7e8 	.word	0x0800d7e8
 800bbc8:	0800d7e8 	.word	0x0800d7e8
 800bbcc:	0800d7e8 	.word	0x0800d7e8
 800bbd0:	0800d7ec 	.word	0x0800d7ec

0800bbd4 <memset>:
 800bbd4:	4402      	add	r2, r0
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d100      	bne.n	800bbde <memset+0xa>
 800bbdc:	4770      	bx	lr
 800bbde:	f803 1b01 	strb.w	r1, [r3], #1
 800bbe2:	e7f9      	b.n	800bbd8 <memset+0x4>

0800bbe4 <siprintf>:
 800bbe4:	b40e      	push	{r1, r2, r3}
 800bbe6:	b500      	push	{lr}
 800bbe8:	b09c      	sub	sp, #112	; 0x70
 800bbea:	ab1d      	add	r3, sp, #116	; 0x74
 800bbec:	9002      	str	r0, [sp, #8]
 800bbee:	9006      	str	r0, [sp, #24]
 800bbf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bbf4:	4809      	ldr	r0, [pc, #36]	; (800bc1c <siprintf+0x38>)
 800bbf6:	9107      	str	r1, [sp, #28]
 800bbf8:	9104      	str	r1, [sp, #16]
 800bbfa:	4909      	ldr	r1, [pc, #36]	; (800bc20 <siprintf+0x3c>)
 800bbfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc00:	9105      	str	r1, [sp, #20]
 800bc02:	6800      	ldr	r0, [r0, #0]
 800bc04:	9301      	str	r3, [sp, #4]
 800bc06:	a902      	add	r1, sp, #8
 800bc08:	f000 f876 	bl	800bcf8 <_svfiprintf_r>
 800bc0c:	9b02      	ldr	r3, [sp, #8]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	701a      	strb	r2, [r3, #0]
 800bc12:	b01c      	add	sp, #112	; 0x70
 800bc14:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc18:	b003      	add	sp, #12
 800bc1a:	4770      	bx	lr
 800bc1c:	20000030 	.word	0x20000030
 800bc20:	ffff0208 	.word	0xffff0208

0800bc24 <strcat>:
 800bc24:	b510      	push	{r4, lr}
 800bc26:	4603      	mov	r3, r0
 800bc28:	781a      	ldrb	r2, [r3, #0]
 800bc2a:	1c5c      	adds	r4, r3, #1
 800bc2c:	b93a      	cbnz	r2, 800bc3e <strcat+0x1a>
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc34:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc38:	2a00      	cmp	r2, #0
 800bc3a:	d1f9      	bne.n	800bc30 <strcat+0xc>
 800bc3c:	bd10      	pop	{r4, pc}
 800bc3e:	4623      	mov	r3, r4
 800bc40:	e7f2      	b.n	800bc28 <strcat+0x4>

0800bc42 <__ssputs_r>:
 800bc42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc46:	688e      	ldr	r6, [r1, #8]
 800bc48:	429e      	cmp	r6, r3
 800bc4a:	4682      	mov	sl, r0
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	4690      	mov	r8, r2
 800bc50:	4699      	mov	r9, r3
 800bc52:	d837      	bhi.n	800bcc4 <__ssputs_r+0x82>
 800bc54:	898a      	ldrh	r2, [r1, #12]
 800bc56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc5a:	d031      	beq.n	800bcc0 <__ssputs_r+0x7e>
 800bc5c:	6825      	ldr	r5, [r4, #0]
 800bc5e:	6909      	ldr	r1, [r1, #16]
 800bc60:	1a6f      	subs	r7, r5, r1
 800bc62:	6965      	ldr	r5, [r4, #20]
 800bc64:	2302      	movs	r3, #2
 800bc66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc6a:	fb95 f5f3 	sdiv	r5, r5, r3
 800bc6e:	f109 0301 	add.w	r3, r9, #1
 800bc72:	443b      	add	r3, r7
 800bc74:	429d      	cmp	r5, r3
 800bc76:	bf38      	it	cc
 800bc78:	461d      	movcc	r5, r3
 800bc7a:	0553      	lsls	r3, r2, #21
 800bc7c:	d530      	bpl.n	800bce0 <__ssputs_r+0x9e>
 800bc7e:	4629      	mov	r1, r5
 800bc80:	f000 fb2c 	bl	800c2dc <_malloc_r>
 800bc84:	4606      	mov	r6, r0
 800bc86:	b950      	cbnz	r0, 800bc9e <__ssputs_r+0x5c>
 800bc88:	230c      	movs	r3, #12
 800bc8a:	f8ca 3000 	str.w	r3, [sl]
 800bc8e:	89a3      	ldrh	r3, [r4, #12]
 800bc90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc94:	81a3      	strh	r3, [r4, #12]
 800bc96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc9e:	463a      	mov	r2, r7
 800bca0:	6921      	ldr	r1, [r4, #16]
 800bca2:	f000 faa9 	bl	800c1f8 <memcpy>
 800bca6:	89a3      	ldrh	r3, [r4, #12]
 800bca8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bcac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcb0:	81a3      	strh	r3, [r4, #12]
 800bcb2:	6126      	str	r6, [r4, #16]
 800bcb4:	6165      	str	r5, [r4, #20]
 800bcb6:	443e      	add	r6, r7
 800bcb8:	1bed      	subs	r5, r5, r7
 800bcba:	6026      	str	r6, [r4, #0]
 800bcbc:	60a5      	str	r5, [r4, #8]
 800bcbe:	464e      	mov	r6, r9
 800bcc0:	454e      	cmp	r6, r9
 800bcc2:	d900      	bls.n	800bcc6 <__ssputs_r+0x84>
 800bcc4:	464e      	mov	r6, r9
 800bcc6:	4632      	mov	r2, r6
 800bcc8:	4641      	mov	r1, r8
 800bcca:	6820      	ldr	r0, [r4, #0]
 800bccc:	f000 fa9f 	bl	800c20e <memmove>
 800bcd0:	68a3      	ldr	r3, [r4, #8]
 800bcd2:	1b9b      	subs	r3, r3, r6
 800bcd4:	60a3      	str	r3, [r4, #8]
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	441e      	add	r6, r3
 800bcda:	6026      	str	r6, [r4, #0]
 800bcdc:	2000      	movs	r0, #0
 800bcde:	e7dc      	b.n	800bc9a <__ssputs_r+0x58>
 800bce0:	462a      	mov	r2, r5
 800bce2:	f000 fb55 	bl	800c390 <_realloc_r>
 800bce6:	4606      	mov	r6, r0
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d1e2      	bne.n	800bcb2 <__ssputs_r+0x70>
 800bcec:	6921      	ldr	r1, [r4, #16]
 800bcee:	4650      	mov	r0, sl
 800bcf0:	f000 faa6 	bl	800c240 <_free_r>
 800bcf4:	e7c8      	b.n	800bc88 <__ssputs_r+0x46>
	...

0800bcf8 <_svfiprintf_r>:
 800bcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfc:	461d      	mov	r5, r3
 800bcfe:	898b      	ldrh	r3, [r1, #12]
 800bd00:	061f      	lsls	r7, r3, #24
 800bd02:	b09d      	sub	sp, #116	; 0x74
 800bd04:	4680      	mov	r8, r0
 800bd06:	460c      	mov	r4, r1
 800bd08:	4616      	mov	r6, r2
 800bd0a:	d50f      	bpl.n	800bd2c <_svfiprintf_r+0x34>
 800bd0c:	690b      	ldr	r3, [r1, #16]
 800bd0e:	b96b      	cbnz	r3, 800bd2c <_svfiprintf_r+0x34>
 800bd10:	2140      	movs	r1, #64	; 0x40
 800bd12:	f000 fae3 	bl	800c2dc <_malloc_r>
 800bd16:	6020      	str	r0, [r4, #0]
 800bd18:	6120      	str	r0, [r4, #16]
 800bd1a:	b928      	cbnz	r0, 800bd28 <_svfiprintf_r+0x30>
 800bd1c:	230c      	movs	r3, #12
 800bd1e:	f8c8 3000 	str.w	r3, [r8]
 800bd22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd26:	e0c8      	b.n	800beba <_svfiprintf_r+0x1c2>
 800bd28:	2340      	movs	r3, #64	; 0x40
 800bd2a:	6163      	str	r3, [r4, #20]
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd30:	2320      	movs	r3, #32
 800bd32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd36:	2330      	movs	r3, #48	; 0x30
 800bd38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd3c:	9503      	str	r5, [sp, #12]
 800bd3e:	f04f 0b01 	mov.w	fp, #1
 800bd42:	4637      	mov	r7, r6
 800bd44:	463d      	mov	r5, r7
 800bd46:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bd4a:	b10b      	cbz	r3, 800bd50 <_svfiprintf_r+0x58>
 800bd4c:	2b25      	cmp	r3, #37	; 0x25
 800bd4e:	d13e      	bne.n	800bdce <_svfiprintf_r+0xd6>
 800bd50:	ebb7 0a06 	subs.w	sl, r7, r6
 800bd54:	d00b      	beq.n	800bd6e <_svfiprintf_r+0x76>
 800bd56:	4653      	mov	r3, sl
 800bd58:	4632      	mov	r2, r6
 800bd5a:	4621      	mov	r1, r4
 800bd5c:	4640      	mov	r0, r8
 800bd5e:	f7ff ff70 	bl	800bc42 <__ssputs_r>
 800bd62:	3001      	adds	r0, #1
 800bd64:	f000 80a4 	beq.w	800beb0 <_svfiprintf_r+0x1b8>
 800bd68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd6a:	4453      	add	r3, sl
 800bd6c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd6e:	783b      	ldrb	r3, [r7, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 809d 	beq.w	800beb0 <_svfiprintf_r+0x1b8>
 800bd76:	2300      	movs	r3, #0
 800bd78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd80:	9304      	str	r3, [sp, #16]
 800bd82:	9307      	str	r3, [sp, #28]
 800bd84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd88:	931a      	str	r3, [sp, #104]	; 0x68
 800bd8a:	462f      	mov	r7, r5
 800bd8c:	2205      	movs	r2, #5
 800bd8e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bd92:	4850      	ldr	r0, [pc, #320]	; (800bed4 <_svfiprintf_r+0x1dc>)
 800bd94:	f7f4 fa24 	bl	80001e0 <memchr>
 800bd98:	9b04      	ldr	r3, [sp, #16]
 800bd9a:	b9d0      	cbnz	r0, 800bdd2 <_svfiprintf_r+0xda>
 800bd9c:	06d9      	lsls	r1, r3, #27
 800bd9e:	bf44      	itt	mi
 800bda0:	2220      	movmi	r2, #32
 800bda2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bda6:	071a      	lsls	r2, r3, #28
 800bda8:	bf44      	itt	mi
 800bdaa:	222b      	movmi	r2, #43	; 0x2b
 800bdac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bdb0:	782a      	ldrb	r2, [r5, #0]
 800bdb2:	2a2a      	cmp	r2, #42	; 0x2a
 800bdb4:	d015      	beq.n	800bde2 <_svfiprintf_r+0xea>
 800bdb6:	9a07      	ldr	r2, [sp, #28]
 800bdb8:	462f      	mov	r7, r5
 800bdba:	2000      	movs	r0, #0
 800bdbc:	250a      	movs	r5, #10
 800bdbe:	4639      	mov	r1, r7
 800bdc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdc4:	3b30      	subs	r3, #48	; 0x30
 800bdc6:	2b09      	cmp	r3, #9
 800bdc8:	d94d      	bls.n	800be66 <_svfiprintf_r+0x16e>
 800bdca:	b1b8      	cbz	r0, 800bdfc <_svfiprintf_r+0x104>
 800bdcc:	e00f      	b.n	800bdee <_svfiprintf_r+0xf6>
 800bdce:	462f      	mov	r7, r5
 800bdd0:	e7b8      	b.n	800bd44 <_svfiprintf_r+0x4c>
 800bdd2:	4a40      	ldr	r2, [pc, #256]	; (800bed4 <_svfiprintf_r+0x1dc>)
 800bdd4:	1a80      	subs	r0, r0, r2
 800bdd6:	fa0b f000 	lsl.w	r0, fp, r0
 800bdda:	4318      	orrs	r0, r3
 800bddc:	9004      	str	r0, [sp, #16]
 800bdde:	463d      	mov	r5, r7
 800bde0:	e7d3      	b.n	800bd8a <_svfiprintf_r+0x92>
 800bde2:	9a03      	ldr	r2, [sp, #12]
 800bde4:	1d11      	adds	r1, r2, #4
 800bde6:	6812      	ldr	r2, [r2, #0]
 800bde8:	9103      	str	r1, [sp, #12]
 800bdea:	2a00      	cmp	r2, #0
 800bdec:	db01      	blt.n	800bdf2 <_svfiprintf_r+0xfa>
 800bdee:	9207      	str	r2, [sp, #28]
 800bdf0:	e004      	b.n	800bdfc <_svfiprintf_r+0x104>
 800bdf2:	4252      	negs	r2, r2
 800bdf4:	f043 0302 	orr.w	r3, r3, #2
 800bdf8:	9207      	str	r2, [sp, #28]
 800bdfa:	9304      	str	r3, [sp, #16]
 800bdfc:	783b      	ldrb	r3, [r7, #0]
 800bdfe:	2b2e      	cmp	r3, #46	; 0x2e
 800be00:	d10c      	bne.n	800be1c <_svfiprintf_r+0x124>
 800be02:	787b      	ldrb	r3, [r7, #1]
 800be04:	2b2a      	cmp	r3, #42	; 0x2a
 800be06:	d133      	bne.n	800be70 <_svfiprintf_r+0x178>
 800be08:	9b03      	ldr	r3, [sp, #12]
 800be0a:	1d1a      	adds	r2, r3, #4
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	9203      	str	r2, [sp, #12]
 800be10:	2b00      	cmp	r3, #0
 800be12:	bfb8      	it	lt
 800be14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800be18:	3702      	adds	r7, #2
 800be1a:	9305      	str	r3, [sp, #20]
 800be1c:	4d2e      	ldr	r5, [pc, #184]	; (800bed8 <_svfiprintf_r+0x1e0>)
 800be1e:	7839      	ldrb	r1, [r7, #0]
 800be20:	2203      	movs	r2, #3
 800be22:	4628      	mov	r0, r5
 800be24:	f7f4 f9dc 	bl	80001e0 <memchr>
 800be28:	b138      	cbz	r0, 800be3a <_svfiprintf_r+0x142>
 800be2a:	2340      	movs	r3, #64	; 0x40
 800be2c:	1b40      	subs	r0, r0, r5
 800be2e:	fa03 f000 	lsl.w	r0, r3, r0
 800be32:	9b04      	ldr	r3, [sp, #16]
 800be34:	4303      	orrs	r3, r0
 800be36:	3701      	adds	r7, #1
 800be38:	9304      	str	r3, [sp, #16]
 800be3a:	7839      	ldrb	r1, [r7, #0]
 800be3c:	4827      	ldr	r0, [pc, #156]	; (800bedc <_svfiprintf_r+0x1e4>)
 800be3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be42:	2206      	movs	r2, #6
 800be44:	1c7e      	adds	r6, r7, #1
 800be46:	f7f4 f9cb 	bl	80001e0 <memchr>
 800be4a:	2800      	cmp	r0, #0
 800be4c:	d038      	beq.n	800bec0 <_svfiprintf_r+0x1c8>
 800be4e:	4b24      	ldr	r3, [pc, #144]	; (800bee0 <_svfiprintf_r+0x1e8>)
 800be50:	bb13      	cbnz	r3, 800be98 <_svfiprintf_r+0x1a0>
 800be52:	9b03      	ldr	r3, [sp, #12]
 800be54:	3307      	adds	r3, #7
 800be56:	f023 0307 	bic.w	r3, r3, #7
 800be5a:	3308      	adds	r3, #8
 800be5c:	9303      	str	r3, [sp, #12]
 800be5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be60:	444b      	add	r3, r9
 800be62:	9309      	str	r3, [sp, #36]	; 0x24
 800be64:	e76d      	b.n	800bd42 <_svfiprintf_r+0x4a>
 800be66:	fb05 3202 	mla	r2, r5, r2, r3
 800be6a:	2001      	movs	r0, #1
 800be6c:	460f      	mov	r7, r1
 800be6e:	e7a6      	b.n	800bdbe <_svfiprintf_r+0xc6>
 800be70:	2300      	movs	r3, #0
 800be72:	3701      	adds	r7, #1
 800be74:	9305      	str	r3, [sp, #20]
 800be76:	4619      	mov	r1, r3
 800be78:	250a      	movs	r5, #10
 800be7a:	4638      	mov	r0, r7
 800be7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be80:	3a30      	subs	r2, #48	; 0x30
 800be82:	2a09      	cmp	r2, #9
 800be84:	d903      	bls.n	800be8e <_svfiprintf_r+0x196>
 800be86:	2b00      	cmp	r3, #0
 800be88:	d0c8      	beq.n	800be1c <_svfiprintf_r+0x124>
 800be8a:	9105      	str	r1, [sp, #20]
 800be8c:	e7c6      	b.n	800be1c <_svfiprintf_r+0x124>
 800be8e:	fb05 2101 	mla	r1, r5, r1, r2
 800be92:	2301      	movs	r3, #1
 800be94:	4607      	mov	r7, r0
 800be96:	e7f0      	b.n	800be7a <_svfiprintf_r+0x182>
 800be98:	ab03      	add	r3, sp, #12
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	4622      	mov	r2, r4
 800be9e:	4b11      	ldr	r3, [pc, #68]	; (800bee4 <_svfiprintf_r+0x1ec>)
 800bea0:	a904      	add	r1, sp, #16
 800bea2:	4640      	mov	r0, r8
 800bea4:	f3af 8000 	nop.w
 800bea8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800beac:	4681      	mov	r9, r0
 800beae:	d1d6      	bne.n	800be5e <_svfiprintf_r+0x166>
 800beb0:	89a3      	ldrh	r3, [r4, #12]
 800beb2:	065b      	lsls	r3, r3, #25
 800beb4:	f53f af35 	bmi.w	800bd22 <_svfiprintf_r+0x2a>
 800beb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800beba:	b01d      	add	sp, #116	; 0x74
 800bebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec0:	ab03      	add	r3, sp, #12
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	4622      	mov	r2, r4
 800bec6:	4b07      	ldr	r3, [pc, #28]	; (800bee4 <_svfiprintf_r+0x1ec>)
 800bec8:	a904      	add	r1, sp, #16
 800beca:	4640      	mov	r0, r8
 800becc:	f000 f882 	bl	800bfd4 <_printf_i>
 800bed0:	e7ea      	b.n	800bea8 <_svfiprintf_r+0x1b0>
 800bed2:	bf00      	nop
 800bed4:	0800d5d0 	.word	0x0800d5d0
 800bed8:	0800d5d6 	.word	0x0800d5d6
 800bedc:	0800d5da 	.word	0x0800d5da
 800bee0:	00000000 	.word	0x00000000
 800bee4:	0800bc43 	.word	0x0800bc43

0800bee8 <_printf_common>:
 800bee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beec:	4691      	mov	r9, r2
 800beee:	461f      	mov	r7, r3
 800bef0:	688a      	ldr	r2, [r1, #8]
 800bef2:	690b      	ldr	r3, [r1, #16]
 800bef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bef8:	4293      	cmp	r3, r2
 800befa:	bfb8      	it	lt
 800befc:	4613      	movlt	r3, r2
 800befe:	f8c9 3000 	str.w	r3, [r9]
 800bf02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf06:	4606      	mov	r6, r0
 800bf08:	460c      	mov	r4, r1
 800bf0a:	b112      	cbz	r2, 800bf12 <_printf_common+0x2a>
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	f8c9 3000 	str.w	r3, [r9]
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	0699      	lsls	r1, r3, #26
 800bf16:	bf42      	ittt	mi
 800bf18:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bf1c:	3302      	addmi	r3, #2
 800bf1e:	f8c9 3000 	strmi.w	r3, [r9]
 800bf22:	6825      	ldr	r5, [r4, #0]
 800bf24:	f015 0506 	ands.w	r5, r5, #6
 800bf28:	d107      	bne.n	800bf3a <_printf_common+0x52>
 800bf2a:	f104 0a19 	add.w	sl, r4, #25
 800bf2e:	68e3      	ldr	r3, [r4, #12]
 800bf30:	f8d9 2000 	ldr.w	r2, [r9]
 800bf34:	1a9b      	subs	r3, r3, r2
 800bf36:	42ab      	cmp	r3, r5
 800bf38:	dc28      	bgt.n	800bf8c <_printf_common+0xa4>
 800bf3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bf3e:	6822      	ldr	r2, [r4, #0]
 800bf40:	3300      	adds	r3, #0
 800bf42:	bf18      	it	ne
 800bf44:	2301      	movne	r3, #1
 800bf46:	0692      	lsls	r2, r2, #26
 800bf48:	d42d      	bmi.n	800bfa6 <_printf_common+0xbe>
 800bf4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf4e:	4639      	mov	r1, r7
 800bf50:	4630      	mov	r0, r6
 800bf52:	47c0      	blx	r8
 800bf54:	3001      	adds	r0, #1
 800bf56:	d020      	beq.n	800bf9a <_printf_common+0xb2>
 800bf58:	6823      	ldr	r3, [r4, #0]
 800bf5a:	68e5      	ldr	r5, [r4, #12]
 800bf5c:	f8d9 2000 	ldr.w	r2, [r9]
 800bf60:	f003 0306 	and.w	r3, r3, #6
 800bf64:	2b04      	cmp	r3, #4
 800bf66:	bf08      	it	eq
 800bf68:	1aad      	subeq	r5, r5, r2
 800bf6a:	68a3      	ldr	r3, [r4, #8]
 800bf6c:	6922      	ldr	r2, [r4, #16]
 800bf6e:	bf0c      	ite	eq
 800bf70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf74:	2500      	movne	r5, #0
 800bf76:	4293      	cmp	r3, r2
 800bf78:	bfc4      	itt	gt
 800bf7a:	1a9b      	subgt	r3, r3, r2
 800bf7c:	18ed      	addgt	r5, r5, r3
 800bf7e:	f04f 0900 	mov.w	r9, #0
 800bf82:	341a      	adds	r4, #26
 800bf84:	454d      	cmp	r5, r9
 800bf86:	d11a      	bne.n	800bfbe <_printf_common+0xd6>
 800bf88:	2000      	movs	r0, #0
 800bf8a:	e008      	b.n	800bf9e <_printf_common+0xb6>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	4652      	mov	r2, sl
 800bf90:	4639      	mov	r1, r7
 800bf92:	4630      	mov	r0, r6
 800bf94:	47c0      	blx	r8
 800bf96:	3001      	adds	r0, #1
 800bf98:	d103      	bne.n	800bfa2 <_printf_common+0xba>
 800bf9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfa2:	3501      	adds	r5, #1
 800bfa4:	e7c3      	b.n	800bf2e <_printf_common+0x46>
 800bfa6:	18e1      	adds	r1, r4, r3
 800bfa8:	1c5a      	adds	r2, r3, #1
 800bfaa:	2030      	movs	r0, #48	; 0x30
 800bfac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bfb0:	4422      	add	r2, r4
 800bfb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bfb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bfba:	3302      	adds	r3, #2
 800bfbc:	e7c5      	b.n	800bf4a <_printf_common+0x62>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	4622      	mov	r2, r4
 800bfc2:	4639      	mov	r1, r7
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	47c0      	blx	r8
 800bfc8:	3001      	adds	r0, #1
 800bfca:	d0e6      	beq.n	800bf9a <_printf_common+0xb2>
 800bfcc:	f109 0901 	add.w	r9, r9, #1
 800bfd0:	e7d8      	b.n	800bf84 <_printf_common+0x9c>
	...

0800bfd4 <_printf_i>:
 800bfd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bfdc:	460c      	mov	r4, r1
 800bfde:	7e09      	ldrb	r1, [r1, #24]
 800bfe0:	b085      	sub	sp, #20
 800bfe2:	296e      	cmp	r1, #110	; 0x6e
 800bfe4:	4617      	mov	r7, r2
 800bfe6:	4606      	mov	r6, r0
 800bfe8:	4698      	mov	r8, r3
 800bfea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfec:	f000 80b3 	beq.w	800c156 <_printf_i+0x182>
 800bff0:	d822      	bhi.n	800c038 <_printf_i+0x64>
 800bff2:	2963      	cmp	r1, #99	; 0x63
 800bff4:	d036      	beq.n	800c064 <_printf_i+0x90>
 800bff6:	d80a      	bhi.n	800c00e <_printf_i+0x3a>
 800bff8:	2900      	cmp	r1, #0
 800bffa:	f000 80b9 	beq.w	800c170 <_printf_i+0x19c>
 800bffe:	2958      	cmp	r1, #88	; 0x58
 800c000:	f000 8083 	beq.w	800c10a <_printf_i+0x136>
 800c004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c008:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c00c:	e032      	b.n	800c074 <_printf_i+0xa0>
 800c00e:	2964      	cmp	r1, #100	; 0x64
 800c010:	d001      	beq.n	800c016 <_printf_i+0x42>
 800c012:	2969      	cmp	r1, #105	; 0x69
 800c014:	d1f6      	bne.n	800c004 <_printf_i+0x30>
 800c016:	6820      	ldr	r0, [r4, #0]
 800c018:	6813      	ldr	r3, [r2, #0]
 800c01a:	0605      	lsls	r5, r0, #24
 800c01c:	f103 0104 	add.w	r1, r3, #4
 800c020:	d52a      	bpl.n	800c078 <_printf_i+0xa4>
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	6011      	str	r1, [r2, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	da03      	bge.n	800c032 <_printf_i+0x5e>
 800c02a:	222d      	movs	r2, #45	; 0x2d
 800c02c:	425b      	negs	r3, r3
 800c02e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c032:	486f      	ldr	r0, [pc, #444]	; (800c1f0 <_printf_i+0x21c>)
 800c034:	220a      	movs	r2, #10
 800c036:	e039      	b.n	800c0ac <_printf_i+0xd8>
 800c038:	2973      	cmp	r1, #115	; 0x73
 800c03a:	f000 809d 	beq.w	800c178 <_printf_i+0x1a4>
 800c03e:	d808      	bhi.n	800c052 <_printf_i+0x7e>
 800c040:	296f      	cmp	r1, #111	; 0x6f
 800c042:	d020      	beq.n	800c086 <_printf_i+0xb2>
 800c044:	2970      	cmp	r1, #112	; 0x70
 800c046:	d1dd      	bne.n	800c004 <_printf_i+0x30>
 800c048:	6823      	ldr	r3, [r4, #0]
 800c04a:	f043 0320 	orr.w	r3, r3, #32
 800c04e:	6023      	str	r3, [r4, #0]
 800c050:	e003      	b.n	800c05a <_printf_i+0x86>
 800c052:	2975      	cmp	r1, #117	; 0x75
 800c054:	d017      	beq.n	800c086 <_printf_i+0xb2>
 800c056:	2978      	cmp	r1, #120	; 0x78
 800c058:	d1d4      	bne.n	800c004 <_printf_i+0x30>
 800c05a:	2378      	movs	r3, #120	; 0x78
 800c05c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c060:	4864      	ldr	r0, [pc, #400]	; (800c1f4 <_printf_i+0x220>)
 800c062:	e055      	b.n	800c110 <_printf_i+0x13c>
 800c064:	6813      	ldr	r3, [r2, #0]
 800c066:	1d19      	adds	r1, r3, #4
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	6011      	str	r1, [r2, #0]
 800c06c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c074:	2301      	movs	r3, #1
 800c076:	e08c      	b.n	800c192 <_printf_i+0x1be>
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	6011      	str	r1, [r2, #0]
 800c07c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c080:	bf18      	it	ne
 800c082:	b21b      	sxthne	r3, r3
 800c084:	e7cf      	b.n	800c026 <_printf_i+0x52>
 800c086:	6813      	ldr	r3, [r2, #0]
 800c088:	6825      	ldr	r5, [r4, #0]
 800c08a:	1d18      	adds	r0, r3, #4
 800c08c:	6010      	str	r0, [r2, #0]
 800c08e:	0628      	lsls	r0, r5, #24
 800c090:	d501      	bpl.n	800c096 <_printf_i+0xc2>
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	e002      	b.n	800c09c <_printf_i+0xc8>
 800c096:	0668      	lsls	r0, r5, #25
 800c098:	d5fb      	bpl.n	800c092 <_printf_i+0xbe>
 800c09a:	881b      	ldrh	r3, [r3, #0]
 800c09c:	4854      	ldr	r0, [pc, #336]	; (800c1f0 <_printf_i+0x21c>)
 800c09e:	296f      	cmp	r1, #111	; 0x6f
 800c0a0:	bf14      	ite	ne
 800c0a2:	220a      	movne	r2, #10
 800c0a4:	2208      	moveq	r2, #8
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0ac:	6865      	ldr	r5, [r4, #4]
 800c0ae:	60a5      	str	r5, [r4, #8]
 800c0b0:	2d00      	cmp	r5, #0
 800c0b2:	f2c0 8095 	blt.w	800c1e0 <_printf_i+0x20c>
 800c0b6:	6821      	ldr	r1, [r4, #0]
 800c0b8:	f021 0104 	bic.w	r1, r1, #4
 800c0bc:	6021      	str	r1, [r4, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d13d      	bne.n	800c13e <_printf_i+0x16a>
 800c0c2:	2d00      	cmp	r5, #0
 800c0c4:	f040 808e 	bne.w	800c1e4 <_printf_i+0x210>
 800c0c8:	4665      	mov	r5, ip
 800c0ca:	2a08      	cmp	r2, #8
 800c0cc:	d10b      	bne.n	800c0e6 <_printf_i+0x112>
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	07db      	lsls	r3, r3, #31
 800c0d2:	d508      	bpl.n	800c0e6 <_printf_i+0x112>
 800c0d4:	6923      	ldr	r3, [r4, #16]
 800c0d6:	6862      	ldr	r2, [r4, #4]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	bfde      	ittt	le
 800c0dc:	2330      	movle	r3, #48	; 0x30
 800c0de:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0e2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c0e6:	ebac 0305 	sub.w	r3, ip, r5
 800c0ea:	6123      	str	r3, [r4, #16]
 800c0ec:	f8cd 8000 	str.w	r8, [sp]
 800c0f0:	463b      	mov	r3, r7
 800c0f2:	aa03      	add	r2, sp, #12
 800c0f4:	4621      	mov	r1, r4
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	f7ff fef6 	bl	800bee8 <_printf_common>
 800c0fc:	3001      	adds	r0, #1
 800c0fe:	d14d      	bne.n	800c19c <_printf_i+0x1c8>
 800c100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c104:	b005      	add	sp, #20
 800c106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c10a:	4839      	ldr	r0, [pc, #228]	; (800c1f0 <_printf_i+0x21c>)
 800c10c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c110:	6813      	ldr	r3, [r2, #0]
 800c112:	6821      	ldr	r1, [r4, #0]
 800c114:	1d1d      	adds	r5, r3, #4
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	6015      	str	r5, [r2, #0]
 800c11a:	060a      	lsls	r2, r1, #24
 800c11c:	d50b      	bpl.n	800c136 <_printf_i+0x162>
 800c11e:	07ca      	lsls	r2, r1, #31
 800c120:	bf44      	itt	mi
 800c122:	f041 0120 	orrmi.w	r1, r1, #32
 800c126:	6021      	strmi	r1, [r4, #0]
 800c128:	b91b      	cbnz	r3, 800c132 <_printf_i+0x15e>
 800c12a:	6822      	ldr	r2, [r4, #0]
 800c12c:	f022 0220 	bic.w	r2, r2, #32
 800c130:	6022      	str	r2, [r4, #0]
 800c132:	2210      	movs	r2, #16
 800c134:	e7b7      	b.n	800c0a6 <_printf_i+0xd2>
 800c136:	064d      	lsls	r5, r1, #25
 800c138:	bf48      	it	mi
 800c13a:	b29b      	uxthmi	r3, r3
 800c13c:	e7ef      	b.n	800c11e <_printf_i+0x14a>
 800c13e:	4665      	mov	r5, ip
 800c140:	fbb3 f1f2 	udiv	r1, r3, r2
 800c144:	fb02 3311 	mls	r3, r2, r1, r3
 800c148:	5cc3      	ldrb	r3, [r0, r3]
 800c14a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c14e:	460b      	mov	r3, r1
 800c150:	2900      	cmp	r1, #0
 800c152:	d1f5      	bne.n	800c140 <_printf_i+0x16c>
 800c154:	e7b9      	b.n	800c0ca <_printf_i+0xf6>
 800c156:	6813      	ldr	r3, [r2, #0]
 800c158:	6825      	ldr	r5, [r4, #0]
 800c15a:	6961      	ldr	r1, [r4, #20]
 800c15c:	1d18      	adds	r0, r3, #4
 800c15e:	6010      	str	r0, [r2, #0]
 800c160:	0628      	lsls	r0, r5, #24
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	d501      	bpl.n	800c16a <_printf_i+0x196>
 800c166:	6019      	str	r1, [r3, #0]
 800c168:	e002      	b.n	800c170 <_printf_i+0x19c>
 800c16a:	066a      	lsls	r2, r5, #25
 800c16c:	d5fb      	bpl.n	800c166 <_printf_i+0x192>
 800c16e:	8019      	strh	r1, [r3, #0]
 800c170:	2300      	movs	r3, #0
 800c172:	6123      	str	r3, [r4, #16]
 800c174:	4665      	mov	r5, ip
 800c176:	e7b9      	b.n	800c0ec <_printf_i+0x118>
 800c178:	6813      	ldr	r3, [r2, #0]
 800c17a:	1d19      	adds	r1, r3, #4
 800c17c:	6011      	str	r1, [r2, #0]
 800c17e:	681d      	ldr	r5, [r3, #0]
 800c180:	6862      	ldr	r2, [r4, #4]
 800c182:	2100      	movs	r1, #0
 800c184:	4628      	mov	r0, r5
 800c186:	f7f4 f82b 	bl	80001e0 <memchr>
 800c18a:	b108      	cbz	r0, 800c190 <_printf_i+0x1bc>
 800c18c:	1b40      	subs	r0, r0, r5
 800c18e:	6060      	str	r0, [r4, #4]
 800c190:	6863      	ldr	r3, [r4, #4]
 800c192:	6123      	str	r3, [r4, #16]
 800c194:	2300      	movs	r3, #0
 800c196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c19a:	e7a7      	b.n	800c0ec <_printf_i+0x118>
 800c19c:	6923      	ldr	r3, [r4, #16]
 800c19e:	462a      	mov	r2, r5
 800c1a0:	4639      	mov	r1, r7
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	47c0      	blx	r8
 800c1a6:	3001      	adds	r0, #1
 800c1a8:	d0aa      	beq.n	800c100 <_printf_i+0x12c>
 800c1aa:	6823      	ldr	r3, [r4, #0]
 800c1ac:	079b      	lsls	r3, r3, #30
 800c1ae:	d413      	bmi.n	800c1d8 <_printf_i+0x204>
 800c1b0:	68e0      	ldr	r0, [r4, #12]
 800c1b2:	9b03      	ldr	r3, [sp, #12]
 800c1b4:	4298      	cmp	r0, r3
 800c1b6:	bfb8      	it	lt
 800c1b8:	4618      	movlt	r0, r3
 800c1ba:	e7a3      	b.n	800c104 <_printf_i+0x130>
 800c1bc:	2301      	movs	r3, #1
 800c1be:	464a      	mov	r2, r9
 800c1c0:	4639      	mov	r1, r7
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	47c0      	blx	r8
 800c1c6:	3001      	adds	r0, #1
 800c1c8:	d09a      	beq.n	800c100 <_printf_i+0x12c>
 800c1ca:	3501      	adds	r5, #1
 800c1cc:	68e3      	ldr	r3, [r4, #12]
 800c1ce:	9a03      	ldr	r2, [sp, #12]
 800c1d0:	1a9b      	subs	r3, r3, r2
 800c1d2:	42ab      	cmp	r3, r5
 800c1d4:	dcf2      	bgt.n	800c1bc <_printf_i+0x1e8>
 800c1d6:	e7eb      	b.n	800c1b0 <_printf_i+0x1dc>
 800c1d8:	2500      	movs	r5, #0
 800c1da:	f104 0919 	add.w	r9, r4, #25
 800c1de:	e7f5      	b.n	800c1cc <_printf_i+0x1f8>
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d1ac      	bne.n	800c13e <_printf_i+0x16a>
 800c1e4:	7803      	ldrb	r3, [r0, #0]
 800c1e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1ee:	e76c      	b.n	800c0ca <_printf_i+0xf6>
 800c1f0:	0800d5e1 	.word	0x0800d5e1
 800c1f4:	0800d5f2 	.word	0x0800d5f2

0800c1f8 <memcpy>:
 800c1f8:	b510      	push	{r4, lr}
 800c1fa:	1e43      	subs	r3, r0, #1
 800c1fc:	440a      	add	r2, r1
 800c1fe:	4291      	cmp	r1, r2
 800c200:	d100      	bne.n	800c204 <memcpy+0xc>
 800c202:	bd10      	pop	{r4, pc}
 800c204:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c208:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c20c:	e7f7      	b.n	800c1fe <memcpy+0x6>

0800c20e <memmove>:
 800c20e:	4288      	cmp	r0, r1
 800c210:	b510      	push	{r4, lr}
 800c212:	eb01 0302 	add.w	r3, r1, r2
 800c216:	d807      	bhi.n	800c228 <memmove+0x1a>
 800c218:	1e42      	subs	r2, r0, #1
 800c21a:	4299      	cmp	r1, r3
 800c21c:	d00a      	beq.n	800c234 <memmove+0x26>
 800c21e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c222:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c226:	e7f8      	b.n	800c21a <memmove+0xc>
 800c228:	4283      	cmp	r3, r0
 800c22a:	d9f5      	bls.n	800c218 <memmove+0xa>
 800c22c:	1881      	adds	r1, r0, r2
 800c22e:	1ad2      	subs	r2, r2, r3
 800c230:	42d3      	cmn	r3, r2
 800c232:	d100      	bne.n	800c236 <memmove+0x28>
 800c234:	bd10      	pop	{r4, pc}
 800c236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c23a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c23e:	e7f7      	b.n	800c230 <memmove+0x22>

0800c240 <_free_r>:
 800c240:	b538      	push	{r3, r4, r5, lr}
 800c242:	4605      	mov	r5, r0
 800c244:	2900      	cmp	r1, #0
 800c246:	d045      	beq.n	800c2d4 <_free_r+0x94>
 800c248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c24c:	1f0c      	subs	r4, r1, #4
 800c24e:	2b00      	cmp	r3, #0
 800c250:	bfb8      	it	lt
 800c252:	18e4      	addlt	r4, r4, r3
 800c254:	f000 f8d2 	bl	800c3fc <__malloc_lock>
 800c258:	4a1f      	ldr	r2, [pc, #124]	; (800c2d8 <_free_r+0x98>)
 800c25a:	6813      	ldr	r3, [r2, #0]
 800c25c:	4610      	mov	r0, r2
 800c25e:	b933      	cbnz	r3, 800c26e <_free_r+0x2e>
 800c260:	6063      	str	r3, [r4, #4]
 800c262:	6014      	str	r4, [r2, #0]
 800c264:	4628      	mov	r0, r5
 800c266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c26a:	f000 b8c8 	b.w	800c3fe <__malloc_unlock>
 800c26e:	42a3      	cmp	r3, r4
 800c270:	d90c      	bls.n	800c28c <_free_r+0x4c>
 800c272:	6821      	ldr	r1, [r4, #0]
 800c274:	1862      	adds	r2, r4, r1
 800c276:	4293      	cmp	r3, r2
 800c278:	bf04      	itt	eq
 800c27a:	681a      	ldreq	r2, [r3, #0]
 800c27c:	685b      	ldreq	r3, [r3, #4]
 800c27e:	6063      	str	r3, [r4, #4]
 800c280:	bf04      	itt	eq
 800c282:	1852      	addeq	r2, r2, r1
 800c284:	6022      	streq	r2, [r4, #0]
 800c286:	6004      	str	r4, [r0, #0]
 800c288:	e7ec      	b.n	800c264 <_free_r+0x24>
 800c28a:	4613      	mov	r3, r2
 800c28c:	685a      	ldr	r2, [r3, #4]
 800c28e:	b10a      	cbz	r2, 800c294 <_free_r+0x54>
 800c290:	42a2      	cmp	r2, r4
 800c292:	d9fa      	bls.n	800c28a <_free_r+0x4a>
 800c294:	6819      	ldr	r1, [r3, #0]
 800c296:	1858      	adds	r0, r3, r1
 800c298:	42a0      	cmp	r0, r4
 800c29a:	d10b      	bne.n	800c2b4 <_free_r+0x74>
 800c29c:	6820      	ldr	r0, [r4, #0]
 800c29e:	4401      	add	r1, r0
 800c2a0:	1858      	adds	r0, r3, r1
 800c2a2:	4282      	cmp	r2, r0
 800c2a4:	6019      	str	r1, [r3, #0]
 800c2a6:	d1dd      	bne.n	800c264 <_free_r+0x24>
 800c2a8:	6810      	ldr	r0, [r2, #0]
 800c2aa:	6852      	ldr	r2, [r2, #4]
 800c2ac:	605a      	str	r2, [r3, #4]
 800c2ae:	4401      	add	r1, r0
 800c2b0:	6019      	str	r1, [r3, #0]
 800c2b2:	e7d7      	b.n	800c264 <_free_r+0x24>
 800c2b4:	d902      	bls.n	800c2bc <_free_r+0x7c>
 800c2b6:	230c      	movs	r3, #12
 800c2b8:	602b      	str	r3, [r5, #0]
 800c2ba:	e7d3      	b.n	800c264 <_free_r+0x24>
 800c2bc:	6820      	ldr	r0, [r4, #0]
 800c2be:	1821      	adds	r1, r4, r0
 800c2c0:	428a      	cmp	r2, r1
 800c2c2:	bf04      	itt	eq
 800c2c4:	6811      	ldreq	r1, [r2, #0]
 800c2c6:	6852      	ldreq	r2, [r2, #4]
 800c2c8:	6062      	str	r2, [r4, #4]
 800c2ca:	bf04      	itt	eq
 800c2cc:	1809      	addeq	r1, r1, r0
 800c2ce:	6021      	streq	r1, [r4, #0]
 800c2d0:	605c      	str	r4, [r3, #4]
 800c2d2:	e7c7      	b.n	800c264 <_free_r+0x24>
 800c2d4:	bd38      	pop	{r3, r4, r5, pc}
 800c2d6:	bf00      	nop
 800c2d8:	200000f8 	.word	0x200000f8

0800c2dc <_malloc_r>:
 800c2dc:	b570      	push	{r4, r5, r6, lr}
 800c2de:	1ccd      	adds	r5, r1, #3
 800c2e0:	f025 0503 	bic.w	r5, r5, #3
 800c2e4:	3508      	adds	r5, #8
 800c2e6:	2d0c      	cmp	r5, #12
 800c2e8:	bf38      	it	cc
 800c2ea:	250c      	movcc	r5, #12
 800c2ec:	2d00      	cmp	r5, #0
 800c2ee:	4606      	mov	r6, r0
 800c2f0:	db01      	blt.n	800c2f6 <_malloc_r+0x1a>
 800c2f2:	42a9      	cmp	r1, r5
 800c2f4:	d903      	bls.n	800c2fe <_malloc_r+0x22>
 800c2f6:	230c      	movs	r3, #12
 800c2f8:	6033      	str	r3, [r6, #0]
 800c2fa:	2000      	movs	r0, #0
 800c2fc:	bd70      	pop	{r4, r5, r6, pc}
 800c2fe:	f000 f87d 	bl	800c3fc <__malloc_lock>
 800c302:	4a21      	ldr	r2, [pc, #132]	; (800c388 <_malloc_r+0xac>)
 800c304:	6814      	ldr	r4, [r2, #0]
 800c306:	4621      	mov	r1, r4
 800c308:	b991      	cbnz	r1, 800c330 <_malloc_r+0x54>
 800c30a:	4c20      	ldr	r4, [pc, #128]	; (800c38c <_malloc_r+0xb0>)
 800c30c:	6823      	ldr	r3, [r4, #0]
 800c30e:	b91b      	cbnz	r3, 800c318 <_malloc_r+0x3c>
 800c310:	4630      	mov	r0, r6
 800c312:	f000 f863 	bl	800c3dc <_sbrk_r>
 800c316:	6020      	str	r0, [r4, #0]
 800c318:	4629      	mov	r1, r5
 800c31a:	4630      	mov	r0, r6
 800c31c:	f000 f85e 	bl	800c3dc <_sbrk_r>
 800c320:	1c43      	adds	r3, r0, #1
 800c322:	d124      	bne.n	800c36e <_malloc_r+0x92>
 800c324:	230c      	movs	r3, #12
 800c326:	6033      	str	r3, [r6, #0]
 800c328:	4630      	mov	r0, r6
 800c32a:	f000 f868 	bl	800c3fe <__malloc_unlock>
 800c32e:	e7e4      	b.n	800c2fa <_malloc_r+0x1e>
 800c330:	680b      	ldr	r3, [r1, #0]
 800c332:	1b5b      	subs	r3, r3, r5
 800c334:	d418      	bmi.n	800c368 <_malloc_r+0x8c>
 800c336:	2b0b      	cmp	r3, #11
 800c338:	d90f      	bls.n	800c35a <_malloc_r+0x7e>
 800c33a:	600b      	str	r3, [r1, #0]
 800c33c:	50cd      	str	r5, [r1, r3]
 800c33e:	18cc      	adds	r4, r1, r3
 800c340:	4630      	mov	r0, r6
 800c342:	f000 f85c 	bl	800c3fe <__malloc_unlock>
 800c346:	f104 000b 	add.w	r0, r4, #11
 800c34a:	1d23      	adds	r3, r4, #4
 800c34c:	f020 0007 	bic.w	r0, r0, #7
 800c350:	1ac3      	subs	r3, r0, r3
 800c352:	d0d3      	beq.n	800c2fc <_malloc_r+0x20>
 800c354:	425a      	negs	r2, r3
 800c356:	50e2      	str	r2, [r4, r3]
 800c358:	e7d0      	b.n	800c2fc <_malloc_r+0x20>
 800c35a:	428c      	cmp	r4, r1
 800c35c:	684b      	ldr	r3, [r1, #4]
 800c35e:	bf16      	itet	ne
 800c360:	6063      	strne	r3, [r4, #4]
 800c362:	6013      	streq	r3, [r2, #0]
 800c364:	460c      	movne	r4, r1
 800c366:	e7eb      	b.n	800c340 <_malloc_r+0x64>
 800c368:	460c      	mov	r4, r1
 800c36a:	6849      	ldr	r1, [r1, #4]
 800c36c:	e7cc      	b.n	800c308 <_malloc_r+0x2c>
 800c36e:	1cc4      	adds	r4, r0, #3
 800c370:	f024 0403 	bic.w	r4, r4, #3
 800c374:	42a0      	cmp	r0, r4
 800c376:	d005      	beq.n	800c384 <_malloc_r+0xa8>
 800c378:	1a21      	subs	r1, r4, r0
 800c37a:	4630      	mov	r0, r6
 800c37c:	f000 f82e 	bl	800c3dc <_sbrk_r>
 800c380:	3001      	adds	r0, #1
 800c382:	d0cf      	beq.n	800c324 <_malloc_r+0x48>
 800c384:	6025      	str	r5, [r4, #0]
 800c386:	e7db      	b.n	800c340 <_malloc_r+0x64>
 800c388:	200000f8 	.word	0x200000f8
 800c38c:	200000fc 	.word	0x200000fc

0800c390 <_realloc_r>:
 800c390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c392:	4607      	mov	r7, r0
 800c394:	4614      	mov	r4, r2
 800c396:	460e      	mov	r6, r1
 800c398:	b921      	cbnz	r1, 800c3a4 <_realloc_r+0x14>
 800c39a:	4611      	mov	r1, r2
 800c39c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c3a0:	f7ff bf9c 	b.w	800c2dc <_malloc_r>
 800c3a4:	b922      	cbnz	r2, 800c3b0 <_realloc_r+0x20>
 800c3a6:	f7ff ff4b 	bl	800c240 <_free_r>
 800c3aa:	4625      	mov	r5, r4
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3b0:	f000 f826 	bl	800c400 <_malloc_usable_size_r>
 800c3b4:	42a0      	cmp	r0, r4
 800c3b6:	d20f      	bcs.n	800c3d8 <_realloc_r+0x48>
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	4638      	mov	r0, r7
 800c3bc:	f7ff ff8e 	bl	800c2dc <_malloc_r>
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	d0f2      	beq.n	800c3ac <_realloc_r+0x1c>
 800c3c6:	4631      	mov	r1, r6
 800c3c8:	4622      	mov	r2, r4
 800c3ca:	f7ff ff15 	bl	800c1f8 <memcpy>
 800c3ce:	4631      	mov	r1, r6
 800c3d0:	4638      	mov	r0, r7
 800c3d2:	f7ff ff35 	bl	800c240 <_free_r>
 800c3d6:	e7e9      	b.n	800c3ac <_realloc_r+0x1c>
 800c3d8:	4635      	mov	r5, r6
 800c3da:	e7e7      	b.n	800c3ac <_realloc_r+0x1c>

0800c3dc <_sbrk_r>:
 800c3dc:	b538      	push	{r3, r4, r5, lr}
 800c3de:	4c06      	ldr	r4, [pc, #24]	; (800c3f8 <_sbrk_r+0x1c>)
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	4605      	mov	r5, r0
 800c3e4:	4608      	mov	r0, r1
 800c3e6:	6023      	str	r3, [r4, #0]
 800c3e8:	f7ff fb5e 	bl	800baa8 <_sbrk>
 800c3ec:	1c43      	adds	r3, r0, #1
 800c3ee:	d102      	bne.n	800c3f6 <_sbrk_r+0x1a>
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	b103      	cbz	r3, 800c3f6 <_sbrk_r+0x1a>
 800c3f4:	602b      	str	r3, [r5, #0]
 800c3f6:	bd38      	pop	{r3, r4, r5, pc}
 800c3f8:	20001344 	.word	0x20001344

0800c3fc <__malloc_lock>:
 800c3fc:	4770      	bx	lr

0800c3fe <__malloc_unlock>:
 800c3fe:	4770      	bx	lr

0800c400 <_malloc_usable_size_r>:
 800c400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c404:	1f18      	subs	r0, r3, #4
 800c406:	2b00      	cmp	r3, #0
 800c408:	bfbc      	itt	lt
 800c40a:	580b      	ldrlt	r3, [r1, r0]
 800c40c:	18c0      	addlt	r0, r0, r3
 800c40e:	4770      	bx	lr

0800c410 <cos>:
 800c410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c412:	ec51 0b10 	vmov	r0, r1, d0
 800c416:	4a1e      	ldr	r2, [pc, #120]	; (800c490 <cos+0x80>)
 800c418:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c41c:	4293      	cmp	r3, r2
 800c41e:	dc06      	bgt.n	800c42e <cos+0x1e>
 800c420:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800c488 <cos+0x78>
 800c424:	f000 fa2c 	bl	800c880 <__kernel_cos>
 800c428:	ec51 0b10 	vmov	r0, r1, d0
 800c42c:	e007      	b.n	800c43e <cos+0x2e>
 800c42e:	4a19      	ldr	r2, [pc, #100]	; (800c494 <cos+0x84>)
 800c430:	4293      	cmp	r3, r2
 800c432:	dd09      	ble.n	800c448 <cos+0x38>
 800c434:	ee10 2a10 	vmov	r2, s0
 800c438:	460b      	mov	r3, r1
 800c43a:	f7f3 ff25 	bl	8000288 <__aeabi_dsub>
 800c43e:	ec41 0b10 	vmov	d0, r0, r1
 800c442:	b005      	add	sp, #20
 800c444:	f85d fb04 	ldr.w	pc, [sp], #4
 800c448:	4668      	mov	r0, sp
 800c44a:	f000 f825 	bl	800c498 <__ieee754_rem_pio2>
 800c44e:	f000 0003 	and.w	r0, r0, #3
 800c452:	2801      	cmp	r0, #1
 800c454:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c458:	ed9d 0b00 	vldr	d0, [sp]
 800c45c:	d007      	beq.n	800c46e <cos+0x5e>
 800c45e:	2802      	cmp	r0, #2
 800c460:	d00e      	beq.n	800c480 <cos+0x70>
 800c462:	2800      	cmp	r0, #0
 800c464:	d0de      	beq.n	800c424 <cos+0x14>
 800c466:	2001      	movs	r0, #1
 800c468:	f000 fe12 	bl	800d090 <__kernel_sin>
 800c46c:	e7dc      	b.n	800c428 <cos+0x18>
 800c46e:	f000 fe0f 	bl	800d090 <__kernel_sin>
 800c472:	ec53 2b10 	vmov	r2, r3, d0
 800c476:	ee10 0a10 	vmov	r0, s0
 800c47a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c47e:	e7de      	b.n	800c43e <cos+0x2e>
 800c480:	f000 f9fe 	bl	800c880 <__kernel_cos>
 800c484:	e7f5      	b.n	800c472 <cos+0x62>
 800c486:	bf00      	nop
	...
 800c490:	3fe921fb 	.word	0x3fe921fb
 800c494:	7fefffff 	.word	0x7fefffff

0800c498 <__ieee754_rem_pio2>:
 800c498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49c:	ec57 6b10 	vmov	r6, r7, d0
 800c4a0:	4bc3      	ldr	r3, [pc, #780]	; (800c7b0 <__ieee754_rem_pio2+0x318>)
 800c4a2:	b08d      	sub	sp, #52	; 0x34
 800c4a4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c4a8:	4598      	cmp	r8, r3
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	9704      	str	r7, [sp, #16]
 800c4ae:	dc07      	bgt.n	800c4c0 <__ieee754_rem_pio2+0x28>
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	ed84 0b00 	vstr	d0, [r4]
 800c4b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c4bc:	2500      	movs	r5, #0
 800c4be:	e027      	b.n	800c510 <__ieee754_rem_pio2+0x78>
 800c4c0:	4bbc      	ldr	r3, [pc, #752]	; (800c7b4 <__ieee754_rem_pio2+0x31c>)
 800c4c2:	4598      	cmp	r8, r3
 800c4c4:	dc75      	bgt.n	800c5b2 <__ieee754_rem_pio2+0x11a>
 800c4c6:	9b04      	ldr	r3, [sp, #16]
 800c4c8:	4dbb      	ldr	r5, [pc, #748]	; (800c7b8 <__ieee754_rem_pio2+0x320>)
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	ee10 0a10 	vmov	r0, s0
 800c4d0:	a3a9      	add	r3, pc, #676	; (adr r3, 800c778 <__ieee754_rem_pio2+0x2e0>)
 800c4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d6:	4639      	mov	r1, r7
 800c4d8:	dd36      	ble.n	800c548 <__ieee754_rem_pio2+0xb0>
 800c4da:	f7f3 fed5 	bl	8000288 <__aeabi_dsub>
 800c4de:	45a8      	cmp	r8, r5
 800c4e0:	4606      	mov	r6, r0
 800c4e2:	460f      	mov	r7, r1
 800c4e4:	d018      	beq.n	800c518 <__ieee754_rem_pio2+0x80>
 800c4e6:	a3a6      	add	r3, pc, #664	; (adr r3, 800c780 <__ieee754_rem_pio2+0x2e8>)
 800c4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ec:	f7f3 fecc 	bl	8000288 <__aeabi_dsub>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	e9c4 2300 	strd	r2, r3, [r4]
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	4639      	mov	r1, r7
 800c4fc:	f7f3 fec4 	bl	8000288 <__aeabi_dsub>
 800c500:	a39f      	add	r3, pc, #636	; (adr r3, 800c780 <__ieee754_rem_pio2+0x2e8>)
 800c502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c506:	f7f3 febf 	bl	8000288 <__aeabi_dsub>
 800c50a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c50e:	2501      	movs	r5, #1
 800c510:	4628      	mov	r0, r5
 800c512:	b00d      	add	sp, #52	; 0x34
 800c514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c518:	a39b      	add	r3, pc, #620	; (adr r3, 800c788 <__ieee754_rem_pio2+0x2f0>)
 800c51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51e:	f7f3 feb3 	bl	8000288 <__aeabi_dsub>
 800c522:	a39b      	add	r3, pc, #620	; (adr r3, 800c790 <__ieee754_rem_pio2+0x2f8>)
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	4606      	mov	r6, r0
 800c52a:	460f      	mov	r7, r1
 800c52c:	f7f3 feac 	bl	8000288 <__aeabi_dsub>
 800c530:	4602      	mov	r2, r0
 800c532:	460b      	mov	r3, r1
 800c534:	e9c4 2300 	strd	r2, r3, [r4]
 800c538:	4630      	mov	r0, r6
 800c53a:	4639      	mov	r1, r7
 800c53c:	f7f3 fea4 	bl	8000288 <__aeabi_dsub>
 800c540:	a393      	add	r3, pc, #588	; (adr r3, 800c790 <__ieee754_rem_pio2+0x2f8>)
 800c542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c546:	e7de      	b.n	800c506 <__ieee754_rem_pio2+0x6e>
 800c548:	f7f3 fea0 	bl	800028c <__adddf3>
 800c54c:	45a8      	cmp	r8, r5
 800c54e:	4606      	mov	r6, r0
 800c550:	460f      	mov	r7, r1
 800c552:	d016      	beq.n	800c582 <__ieee754_rem_pio2+0xea>
 800c554:	a38a      	add	r3, pc, #552	; (adr r3, 800c780 <__ieee754_rem_pio2+0x2e8>)
 800c556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55a:	f7f3 fe97 	bl	800028c <__adddf3>
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	e9c4 2300 	strd	r2, r3, [r4]
 800c566:	4630      	mov	r0, r6
 800c568:	4639      	mov	r1, r7
 800c56a:	f7f3 fe8d 	bl	8000288 <__aeabi_dsub>
 800c56e:	a384      	add	r3, pc, #528	; (adr r3, 800c780 <__ieee754_rem_pio2+0x2e8>)
 800c570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c574:	f7f3 fe8a 	bl	800028c <__adddf3>
 800c578:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c57c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c580:	e7c6      	b.n	800c510 <__ieee754_rem_pio2+0x78>
 800c582:	a381      	add	r3, pc, #516	; (adr r3, 800c788 <__ieee754_rem_pio2+0x2f0>)
 800c584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c588:	f7f3 fe80 	bl	800028c <__adddf3>
 800c58c:	a380      	add	r3, pc, #512	; (adr r3, 800c790 <__ieee754_rem_pio2+0x2f8>)
 800c58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c592:	4606      	mov	r6, r0
 800c594:	460f      	mov	r7, r1
 800c596:	f7f3 fe79 	bl	800028c <__adddf3>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	e9c4 2300 	strd	r2, r3, [r4]
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	4639      	mov	r1, r7
 800c5a6:	f7f3 fe6f 	bl	8000288 <__aeabi_dsub>
 800c5aa:	a379      	add	r3, pc, #484	; (adr r3, 800c790 <__ieee754_rem_pio2+0x2f8>)
 800c5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b0:	e7e0      	b.n	800c574 <__ieee754_rem_pio2+0xdc>
 800c5b2:	4b82      	ldr	r3, [pc, #520]	; (800c7bc <__ieee754_rem_pio2+0x324>)
 800c5b4:	4598      	cmp	r8, r3
 800c5b6:	f300 80d0 	bgt.w	800c75a <__ieee754_rem_pio2+0x2c2>
 800c5ba:	f000 fe23 	bl	800d204 <fabs>
 800c5be:	ec57 6b10 	vmov	r6, r7, d0
 800c5c2:	ee10 0a10 	vmov	r0, s0
 800c5c6:	a374      	add	r3, pc, #464	; (adr r3, 800c798 <__ieee754_rem_pio2+0x300>)
 800c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5cc:	4639      	mov	r1, r7
 800c5ce:	f7f4 f813 	bl	80005f8 <__aeabi_dmul>
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	4b7a      	ldr	r3, [pc, #488]	; (800c7c0 <__ieee754_rem_pio2+0x328>)
 800c5d6:	f7f3 fe59 	bl	800028c <__adddf3>
 800c5da:	f7f4 faa7 	bl	8000b2c <__aeabi_d2iz>
 800c5de:	4605      	mov	r5, r0
 800c5e0:	f7f3 ffa0 	bl	8000524 <__aeabi_i2d>
 800c5e4:	a364      	add	r3, pc, #400	; (adr r3, 800c778 <__ieee754_rem_pio2+0x2e0>)
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5ee:	f7f4 f803 	bl	80005f8 <__aeabi_dmul>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	4630      	mov	r0, r6
 800c5f8:	4639      	mov	r1, r7
 800c5fa:	f7f3 fe45 	bl	8000288 <__aeabi_dsub>
 800c5fe:	a360      	add	r3, pc, #384	; (adr r3, 800c780 <__ieee754_rem_pio2+0x2e8>)
 800c600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c604:	4682      	mov	sl, r0
 800c606:	468b      	mov	fp, r1
 800c608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c60c:	f7f3 fff4 	bl	80005f8 <__aeabi_dmul>
 800c610:	2d1f      	cmp	r5, #31
 800c612:	4606      	mov	r6, r0
 800c614:	460f      	mov	r7, r1
 800c616:	dc0c      	bgt.n	800c632 <__ieee754_rem_pio2+0x19a>
 800c618:	1e6a      	subs	r2, r5, #1
 800c61a:	4b6a      	ldr	r3, [pc, #424]	; (800c7c4 <__ieee754_rem_pio2+0x32c>)
 800c61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c620:	4543      	cmp	r3, r8
 800c622:	d006      	beq.n	800c632 <__ieee754_rem_pio2+0x19a>
 800c624:	4632      	mov	r2, r6
 800c626:	463b      	mov	r3, r7
 800c628:	4650      	mov	r0, sl
 800c62a:	4659      	mov	r1, fp
 800c62c:	f7f3 fe2c 	bl	8000288 <__aeabi_dsub>
 800c630:	e00e      	b.n	800c650 <__ieee754_rem_pio2+0x1b8>
 800c632:	4632      	mov	r2, r6
 800c634:	463b      	mov	r3, r7
 800c636:	4650      	mov	r0, sl
 800c638:	4659      	mov	r1, fp
 800c63a:	f7f3 fe25 	bl	8000288 <__aeabi_dsub>
 800c63e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c642:	9305      	str	r3, [sp, #20]
 800c644:	9a05      	ldr	r2, [sp, #20]
 800c646:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c64a:	1ad3      	subs	r3, r2, r3
 800c64c:	2b10      	cmp	r3, #16
 800c64e:	dc02      	bgt.n	800c656 <__ieee754_rem_pio2+0x1be>
 800c650:	e9c4 0100 	strd	r0, r1, [r4]
 800c654:	e039      	b.n	800c6ca <__ieee754_rem_pio2+0x232>
 800c656:	a34c      	add	r3, pc, #304	; (adr r3, 800c788 <__ieee754_rem_pio2+0x2f0>)
 800c658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c660:	f7f3 ffca 	bl	80005f8 <__aeabi_dmul>
 800c664:	4606      	mov	r6, r0
 800c666:	460f      	mov	r7, r1
 800c668:	4602      	mov	r2, r0
 800c66a:	460b      	mov	r3, r1
 800c66c:	4650      	mov	r0, sl
 800c66e:	4659      	mov	r1, fp
 800c670:	f7f3 fe0a 	bl	8000288 <__aeabi_dsub>
 800c674:	4602      	mov	r2, r0
 800c676:	460b      	mov	r3, r1
 800c678:	4680      	mov	r8, r0
 800c67a:	4689      	mov	r9, r1
 800c67c:	4650      	mov	r0, sl
 800c67e:	4659      	mov	r1, fp
 800c680:	f7f3 fe02 	bl	8000288 <__aeabi_dsub>
 800c684:	4632      	mov	r2, r6
 800c686:	463b      	mov	r3, r7
 800c688:	f7f3 fdfe 	bl	8000288 <__aeabi_dsub>
 800c68c:	a340      	add	r3, pc, #256	; (adr r3, 800c790 <__ieee754_rem_pio2+0x2f8>)
 800c68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c692:	4606      	mov	r6, r0
 800c694:	460f      	mov	r7, r1
 800c696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c69a:	f7f3 ffad 	bl	80005f8 <__aeabi_dmul>
 800c69e:	4632      	mov	r2, r6
 800c6a0:	463b      	mov	r3, r7
 800c6a2:	f7f3 fdf1 	bl	8000288 <__aeabi_dsub>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4606      	mov	r6, r0
 800c6ac:	460f      	mov	r7, r1
 800c6ae:	4640      	mov	r0, r8
 800c6b0:	4649      	mov	r1, r9
 800c6b2:	f7f3 fde9 	bl	8000288 <__aeabi_dsub>
 800c6b6:	9a05      	ldr	r2, [sp, #20]
 800c6b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	2b31      	cmp	r3, #49	; 0x31
 800c6c0:	dc20      	bgt.n	800c704 <__ieee754_rem_pio2+0x26c>
 800c6c2:	e9c4 0100 	strd	r0, r1, [r4]
 800c6c6:	46c2      	mov	sl, r8
 800c6c8:	46cb      	mov	fp, r9
 800c6ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c6ce:	4650      	mov	r0, sl
 800c6d0:	4642      	mov	r2, r8
 800c6d2:	464b      	mov	r3, r9
 800c6d4:	4659      	mov	r1, fp
 800c6d6:	f7f3 fdd7 	bl	8000288 <__aeabi_dsub>
 800c6da:	463b      	mov	r3, r7
 800c6dc:	4632      	mov	r2, r6
 800c6de:	f7f3 fdd3 	bl	8000288 <__aeabi_dsub>
 800c6e2:	9b04      	ldr	r3, [sp, #16]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c6ea:	f6bf af11 	bge.w	800c510 <__ieee754_rem_pio2+0x78>
 800c6ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c6f2:	6063      	str	r3, [r4, #4]
 800c6f4:	f8c4 8000 	str.w	r8, [r4]
 800c6f8:	60a0      	str	r0, [r4, #8]
 800c6fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6fe:	60e3      	str	r3, [r4, #12]
 800c700:	426d      	negs	r5, r5
 800c702:	e705      	b.n	800c510 <__ieee754_rem_pio2+0x78>
 800c704:	a326      	add	r3, pc, #152	; (adr r3, 800c7a0 <__ieee754_rem_pio2+0x308>)
 800c706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c70e:	f7f3 ff73 	bl	80005f8 <__aeabi_dmul>
 800c712:	4606      	mov	r6, r0
 800c714:	460f      	mov	r7, r1
 800c716:	4602      	mov	r2, r0
 800c718:	460b      	mov	r3, r1
 800c71a:	4640      	mov	r0, r8
 800c71c:	4649      	mov	r1, r9
 800c71e:	f7f3 fdb3 	bl	8000288 <__aeabi_dsub>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	4682      	mov	sl, r0
 800c728:	468b      	mov	fp, r1
 800c72a:	4640      	mov	r0, r8
 800c72c:	4649      	mov	r1, r9
 800c72e:	f7f3 fdab 	bl	8000288 <__aeabi_dsub>
 800c732:	4632      	mov	r2, r6
 800c734:	463b      	mov	r3, r7
 800c736:	f7f3 fda7 	bl	8000288 <__aeabi_dsub>
 800c73a:	a31b      	add	r3, pc, #108	; (adr r3, 800c7a8 <__ieee754_rem_pio2+0x310>)
 800c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c740:	4606      	mov	r6, r0
 800c742:	460f      	mov	r7, r1
 800c744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c748:	f7f3 ff56 	bl	80005f8 <__aeabi_dmul>
 800c74c:	4632      	mov	r2, r6
 800c74e:	463b      	mov	r3, r7
 800c750:	f7f3 fd9a 	bl	8000288 <__aeabi_dsub>
 800c754:	4606      	mov	r6, r0
 800c756:	460f      	mov	r7, r1
 800c758:	e764      	b.n	800c624 <__ieee754_rem_pio2+0x18c>
 800c75a:	4b1b      	ldr	r3, [pc, #108]	; (800c7c8 <__ieee754_rem_pio2+0x330>)
 800c75c:	4598      	cmp	r8, r3
 800c75e:	dd35      	ble.n	800c7cc <__ieee754_rem_pio2+0x334>
 800c760:	ee10 2a10 	vmov	r2, s0
 800c764:	463b      	mov	r3, r7
 800c766:	4630      	mov	r0, r6
 800c768:	4639      	mov	r1, r7
 800c76a:	f7f3 fd8d 	bl	8000288 <__aeabi_dsub>
 800c76e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c772:	e9c4 0100 	strd	r0, r1, [r4]
 800c776:	e6a1      	b.n	800c4bc <__ieee754_rem_pio2+0x24>
 800c778:	54400000 	.word	0x54400000
 800c77c:	3ff921fb 	.word	0x3ff921fb
 800c780:	1a626331 	.word	0x1a626331
 800c784:	3dd0b461 	.word	0x3dd0b461
 800c788:	1a600000 	.word	0x1a600000
 800c78c:	3dd0b461 	.word	0x3dd0b461
 800c790:	2e037073 	.word	0x2e037073
 800c794:	3ba3198a 	.word	0x3ba3198a
 800c798:	6dc9c883 	.word	0x6dc9c883
 800c79c:	3fe45f30 	.word	0x3fe45f30
 800c7a0:	2e000000 	.word	0x2e000000
 800c7a4:	3ba3198a 	.word	0x3ba3198a
 800c7a8:	252049c1 	.word	0x252049c1
 800c7ac:	397b839a 	.word	0x397b839a
 800c7b0:	3fe921fb 	.word	0x3fe921fb
 800c7b4:	4002d97b 	.word	0x4002d97b
 800c7b8:	3ff921fb 	.word	0x3ff921fb
 800c7bc:	413921fb 	.word	0x413921fb
 800c7c0:	3fe00000 	.word	0x3fe00000
 800c7c4:	0800d604 	.word	0x0800d604
 800c7c8:	7fefffff 	.word	0x7fefffff
 800c7cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c7d0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c7d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c7d8:	4630      	mov	r0, r6
 800c7da:	460f      	mov	r7, r1
 800c7dc:	f7f4 f9a6 	bl	8000b2c <__aeabi_d2iz>
 800c7e0:	f7f3 fea0 	bl	8000524 <__aeabi_i2d>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	4639      	mov	r1, r7
 800c7ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c7f0:	f7f3 fd4a 	bl	8000288 <__aeabi_dsub>
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	4b1f      	ldr	r3, [pc, #124]	; (800c874 <__ieee754_rem_pio2+0x3dc>)
 800c7f8:	f7f3 fefe 	bl	80005f8 <__aeabi_dmul>
 800c7fc:	460f      	mov	r7, r1
 800c7fe:	4606      	mov	r6, r0
 800c800:	f7f4 f994 	bl	8000b2c <__aeabi_d2iz>
 800c804:	f7f3 fe8e 	bl	8000524 <__aeabi_i2d>
 800c808:	4602      	mov	r2, r0
 800c80a:	460b      	mov	r3, r1
 800c80c:	4630      	mov	r0, r6
 800c80e:	4639      	mov	r1, r7
 800c810:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c814:	f7f3 fd38 	bl	8000288 <__aeabi_dsub>
 800c818:	2200      	movs	r2, #0
 800c81a:	4b16      	ldr	r3, [pc, #88]	; (800c874 <__ieee754_rem_pio2+0x3dc>)
 800c81c:	f7f3 feec 	bl	80005f8 <__aeabi_dmul>
 800c820:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c824:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c828:	f04f 0803 	mov.w	r8, #3
 800c82c:	2600      	movs	r6, #0
 800c82e:	2700      	movs	r7, #0
 800c830:	4632      	mov	r2, r6
 800c832:	463b      	mov	r3, r7
 800c834:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c838:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800c83c:	f7f4 f944 	bl	8000ac8 <__aeabi_dcmpeq>
 800c840:	b9b0      	cbnz	r0, 800c870 <__ieee754_rem_pio2+0x3d8>
 800c842:	4b0d      	ldr	r3, [pc, #52]	; (800c878 <__ieee754_rem_pio2+0x3e0>)
 800c844:	9301      	str	r3, [sp, #4]
 800c846:	2302      	movs	r3, #2
 800c848:	9300      	str	r3, [sp, #0]
 800c84a:	462a      	mov	r2, r5
 800c84c:	4643      	mov	r3, r8
 800c84e:	4621      	mov	r1, r4
 800c850:	a806      	add	r0, sp, #24
 800c852:	f000 f8dd 	bl	800ca10 <__kernel_rem_pio2>
 800c856:	9b04      	ldr	r3, [sp, #16]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	4605      	mov	r5, r0
 800c85c:	f6bf ae58 	bge.w	800c510 <__ieee754_rem_pio2+0x78>
 800c860:	6863      	ldr	r3, [r4, #4]
 800c862:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c866:	6063      	str	r3, [r4, #4]
 800c868:	68e3      	ldr	r3, [r4, #12]
 800c86a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c86e:	e746      	b.n	800c6fe <__ieee754_rem_pio2+0x266>
 800c870:	46d0      	mov	r8, sl
 800c872:	e7dd      	b.n	800c830 <__ieee754_rem_pio2+0x398>
 800c874:	41700000 	.word	0x41700000
 800c878:	0800d684 	.word	0x0800d684
 800c87c:	00000000 	.word	0x00000000

0800c880 <__kernel_cos>:
 800c880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c884:	ec59 8b10 	vmov	r8, r9, d0
 800c888:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800c88c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c890:	ed2d 8b02 	vpush	{d8}
 800c894:	eeb0 8a41 	vmov.f32	s16, s2
 800c898:	eef0 8a61 	vmov.f32	s17, s3
 800c89c:	da07      	bge.n	800c8ae <__kernel_cos+0x2e>
 800c89e:	ee10 0a10 	vmov	r0, s0
 800c8a2:	4649      	mov	r1, r9
 800c8a4:	f7f4 f942 	bl	8000b2c <__aeabi_d2iz>
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	f000 8089 	beq.w	800c9c0 <__kernel_cos+0x140>
 800c8ae:	4642      	mov	r2, r8
 800c8b0:	464b      	mov	r3, r9
 800c8b2:	4640      	mov	r0, r8
 800c8b4:	4649      	mov	r1, r9
 800c8b6:	f7f3 fe9f 	bl	80005f8 <__aeabi_dmul>
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	4b4e      	ldr	r3, [pc, #312]	; (800c9f8 <__kernel_cos+0x178>)
 800c8be:	4604      	mov	r4, r0
 800c8c0:	460d      	mov	r5, r1
 800c8c2:	f7f3 fe99 	bl	80005f8 <__aeabi_dmul>
 800c8c6:	a340      	add	r3, pc, #256	; (adr r3, 800c9c8 <__kernel_cos+0x148>)
 800c8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8cc:	4682      	mov	sl, r0
 800c8ce:	468b      	mov	fp, r1
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	4629      	mov	r1, r5
 800c8d4:	f7f3 fe90 	bl	80005f8 <__aeabi_dmul>
 800c8d8:	a33d      	add	r3, pc, #244	; (adr r3, 800c9d0 <__kernel_cos+0x150>)
 800c8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8de:	f7f3 fcd5 	bl	800028c <__adddf3>
 800c8e2:	4622      	mov	r2, r4
 800c8e4:	462b      	mov	r3, r5
 800c8e6:	f7f3 fe87 	bl	80005f8 <__aeabi_dmul>
 800c8ea:	a33b      	add	r3, pc, #236	; (adr r3, 800c9d8 <__kernel_cos+0x158>)
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	f7f3 fcca 	bl	8000288 <__aeabi_dsub>
 800c8f4:	4622      	mov	r2, r4
 800c8f6:	462b      	mov	r3, r5
 800c8f8:	f7f3 fe7e 	bl	80005f8 <__aeabi_dmul>
 800c8fc:	a338      	add	r3, pc, #224	; (adr r3, 800c9e0 <__kernel_cos+0x160>)
 800c8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c902:	f7f3 fcc3 	bl	800028c <__adddf3>
 800c906:	4622      	mov	r2, r4
 800c908:	462b      	mov	r3, r5
 800c90a:	f7f3 fe75 	bl	80005f8 <__aeabi_dmul>
 800c90e:	a336      	add	r3, pc, #216	; (adr r3, 800c9e8 <__kernel_cos+0x168>)
 800c910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c914:	f7f3 fcb8 	bl	8000288 <__aeabi_dsub>
 800c918:	4622      	mov	r2, r4
 800c91a:	462b      	mov	r3, r5
 800c91c:	f7f3 fe6c 	bl	80005f8 <__aeabi_dmul>
 800c920:	a333      	add	r3, pc, #204	; (adr r3, 800c9f0 <__kernel_cos+0x170>)
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	f7f3 fcb1 	bl	800028c <__adddf3>
 800c92a:	4622      	mov	r2, r4
 800c92c:	462b      	mov	r3, r5
 800c92e:	f7f3 fe63 	bl	80005f8 <__aeabi_dmul>
 800c932:	4622      	mov	r2, r4
 800c934:	462b      	mov	r3, r5
 800c936:	f7f3 fe5f 	bl	80005f8 <__aeabi_dmul>
 800c93a:	ec53 2b18 	vmov	r2, r3, d8
 800c93e:	4604      	mov	r4, r0
 800c940:	460d      	mov	r5, r1
 800c942:	4640      	mov	r0, r8
 800c944:	4649      	mov	r1, r9
 800c946:	f7f3 fe57 	bl	80005f8 <__aeabi_dmul>
 800c94a:	460b      	mov	r3, r1
 800c94c:	4602      	mov	r2, r0
 800c94e:	4629      	mov	r1, r5
 800c950:	4620      	mov	r0, r4
 800c952:	f7f3 fc99 	bl	8000288 <__aeabi_dsub>
 800c956:	4b29      	ldr	r3, [pc, #164]	; (800c9fc <__kernel_cos+0x17c>)
 800c958:	429e      	cmp	r6, r3
 800c95a:	4680      	mov	r8, r0
 800c95c:	4689      	mov	r9, r1
 800c95e:	dc11      	bgt.n	800c984 <__kernel_cos+0x104>
 800c960:	4602      	mov	r2, r0
 800c962:	460b      	mov	r3, r1
 800c964:	4650      	mov	r0, sl
 800c966:	4659      	mov	r1, fp
 800c968:	f7f3 fc8e 	bl	8000288 <__aeabi_dsub>
 800c96c:	460b      	mov	r3, r1
 800c96e:	4924      	ldr	r1, [pc, #144]	; (800ca00 <__kernel_cos+0x180>)
 800c970:	4602      	mov	r2, r0
 800c972:	2000      	movs	r0, #0
 800c974:	f7f3 fc88 	bl	8000288 <__aeabi_dsub>
 800c978:	ecbd 8b02 	vpop	{d8}
 800c97c:	ec41 0b10 	vmov	d0, r0, r1
 800c980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c984:	4b1f      	ldr	r3, [pc, #124]	; (800ca04 <__kernel_cos+0x184>)
 800c986:	491e      	ldr	r1, [pc, #120]	; (800ca00 <__kernel_cos+0x180>)
 800c988:	429e      	cmp	r6, r3
 800c98a:	bfcc      	ite	gt
 800c98c:	4d1e      	ldrgt	r5, [pc, #120]	; (800ca08 <__kernel_cos+0x188>)
 800c98e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c992:	2400      	movs	r4, #0
 800c994:	4622      	mov	r2, r4
 800c996:	462b      	mov	r3, r5
 800c998:	2000      	movs	r0, #0
 800c99a:	f7f3 fc75 	bl	8000288 <__aeabi_dsub>
 800c99e:	4622      	mov	r2, r4
 800c9a0:	4606      	mov	r6, r0
 800c9a2:	460f      	mov	r7, r1
 800c9a4:	462b      	mov	r3, r5
 800c9a6:	4650      	mov	r0, sl
 800c9a8:	4659      	mov	r1, fp
 800c9aa:	f7f3 fc6d 	bl	8000288 <__aeabi_dsub>
 800c9ae:	4642      	mov	r2, r8
 800c9b0:	464b      	mov	r3, r9
 800c9b2:	f7f3 fc69 	bl	8000288 <__aeabi_dsub>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	4639      	mov	r1, r7
 800c9be:	e7d9      	b.n	800c974 <__kernel_cos+0xf4>
 800c9c0:	2000      	movs	r0, #0
 800c9c2:	490f      	ldr	r1, [pc, #60]	; (800ca00 <__kernel_cos+0x180>)
 800c9c4:	e7d8      	b.n	800c978 <__kernel_cos+0xf8>
 800c9c6:	bf00      	nop
 800c9c8:	be8838d4 	.word	0xbe8838d4
 800c9cc:	bda8fae9 	.word	0xbda8fae9
 800c9d0:	bdb4b1c4 	.word	0xbdb4b1c4
 800c9d4:	3e21ee9e 	.word	0x3e21ee9e
 800c9d8:	809c52ad 	.word	0x809c52ad
 800c9dc:	3e927e4f 	.word	0x3e927e4f
 800c9e0:	19cb1590 	.word	0x19cb1590
 800c9e4:	3efa01a0 	.word	0x3efa01a0
 800c9e8:	16c15177 	.word	0x16c15177
 800c9ec:	3f56c16c 	.word	0x3f56c16c
 800c9f0:	5555554c 	.word	0x5555554c
 800c9f4:	3fa55555 	.word	0x3fa55555
 800c9f8:	3fe00000 	.word	0x3fe00000
 800c9fc:	3fd33332 	.word	0x3fd33332
 800ca00:	3ff00000 	.word	0x3ff00000
 800ca04:	3fe90000 	.word	0x3fe90000
 800ca08:	3fd20000 	.word	0x3fd20000
 800ca0c:	00000000 	.word	0x00000000

0800ca10 <__kernel_rem_pio2>:
 800ca10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca14:	ed2d 8b02 	vpush	{d8}
 800ca18:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ca1c:	1ed4      	subs	r4, r2, #3
 800ca1e:	9308      	str	r3, [sp, #32]
 800ca20:	9101      	str	r1, [sp, #4]
 800ca22:	4bc5      	ldr	r3, [pc, #788]	; (800cd38 <__kernel_rem_pio2+0x328>)
 800ca24:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ca26:	9009      	str	r0, [sp, #36]	; 0x24
 800ca28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca2c:	9304      	str	r3, [sp, #16]
 800ca2e:	9b08      	ldr	r3, [sp, #32]
 800ca30:	3b01      	subs	r3, #1
 800ca32:	9307      	str	r3, [sp, #28]
 800ca34:	2318      	movs	r3, #24
 800ca36:	fb94 f4f3 	sdiv	r4, r4, r3
 800ca3a:	f06f 0317 	mvn.w	r3, #23
 800ca3e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800ca42:	fb04 3303 	mla	r3, r4, r3, r3
 800ca46:	eb03 0a02 	add.w	sl, r3, r2
 800ca4a:	9b04      	ldr	r3, [sp, #16]
 800ca4c:	9a07      	ldr	r2, [sp, #28]
 800ca4e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800cd28 <__kernel_rem_pio2+0x318>
 800ca52:	eb03 0802 	add.w	r8, r3, r2
 800ca56:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ca58:	1aa7      	subs	r7, r4, r2
 800ca5a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ca5e:	ae22      	add	r6, sp, #136	; 0x88
 800ca60:	2500      	movs	r5, #0
 800ca62:	4545      	cmp	r5, r8
 800ca64:	dd13      	ble.n	800ca8e <__kernel_rem_pio2+0x7e>
 800ca66:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800cd28 <__kernel_rem_pio2+0x318>
 800ca6a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ca6e:	2600      	movs	r6, #0
 800ca70:	9b04      	ldr	r3, [sp, #16]
 800ca72:	429e      	cmp	r6, r3
 800ca74:	dc32      	bgt.n	800cadc <__kernel_rem_pio2+0xcc>
 800ca76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca78:	9302      	str	r3, [sp, #8]
 800ca7a:	9b08      	ldr	r3, [sp, #32]
 800ca7c:	199d      	adds	r5, r3, r6
 800ca7e:	ab22      	add	r3, sp, #136	; 0x88
 800ca80:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ca84:	9306      	str	r3, [sp, #24]
 800ca86:	ec59 8b18 	vmov	r8, r9, d8
 800ca8a:	2700      	movs	r7, #0
 800ca8c:	e01f      	b.n	800cace <__kernel_rem_pio2+0xbe>
 800ca8e:	42ef      	cmn	r7, r5
 800ca90:	d407      	bmi.n	800caa2 <__kernel_rem_pio2+0x92>
 800ca92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ca96:	f7f3 fd45 	bl	8000524 <__aeabi_i2d>
 800ca9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ca9e:	3501      	adds	r5, #1
 800caa0:	e7df      	b.n	800ca62 <__kernel_rem_pio2+0x52>
 800caa2:	ec51 0b18 	vmov	r0, r1, d8
 800caa6:	e7f8      	b.n	800ca9a <__kernel_rem_pio2+0x8a>
 800caa8:	9906      	ldr	r1, [sp, #24]
 800caaa:	9d02      	ldr	r5, [sp, #8]
 800caac:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800cab0:	9106      	str	r1, [sp, #24]
 800cab2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800cab6:	9502      	str	r5, [sp, #8]
 800cab8:	f7f3 fd9e 	bl	80005f8 <__aeabi_dmul>
 800cabc:	4602      	mov	r2, r0
 800cabe:	460b      	mov	r3, r1
 800cac0:	4640      	mov	r0, r8
 800cac2:	4649      	mov	r1, r9
 800cac4:	f7f3 fbe2 	bl	800028c <__adddf3>
 800cac8:	3701      	adds	r7, #1
 800caca:	4680      	mov	r8, r0
 800cacc:	4689      	mov	r9, r1
 800cace:	9b07      	ldr	r3, [sp, #28]
 800cad0:	429f      	cmp	r7, r3
 800cad2:	dde9      	ble.n	800caa8 <__kernel_rem_pio2+0x98>
 800cad4:	e8eb 8902 	strd	r8, r9, [fp], #8
 800cad8:	3601      	adds	r6, #1
 800cada:	e7c9      	b.n	800ca70 <__kernel_rem_pio2+0x60>
 800cadc:	9b04      	ldr	r3, [sp, #16]
 800cade:	aa0e      	add	r2, sp, #56	; 0x38
 800cae0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cae4:	930c      	str	r3, [sp, #48]	; 0x30
 800cae6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800cae8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800caec:	9c04      	ldr	r4, [sp, #16]
 800caee:	930b      	str	r3, [sp, #44]	; 0x2c
 800caf0:	ab9a      	add	r3, sp, #616	; 0x268
 800caf2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800caf6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cafa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cafe:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800cb02:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800cb06:	ab9a      	add	r3, sp, #616	; 0x268
 800cb08:	445b      	add	r3, fp
 800cb0a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800cb0e:	2500      	movs	r5, #0
 800cb10:	1b63      	subs	r3, r4, r5
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	dc78      	bgt.n	800cc08 <__kernel_rem_pio2+0x1f8>
 800cb16:	4650      	mov	r0, sl
 800cb18:	ec49 8b10 	vmov	d0, r8, r9
 800cb1c:	f000 fc00 	bl	800d320 <scalbn>
 800cb20:	ec57 6b10 	vmov	r6, r7, d0
 800cb24:	2200      	movs	r2, #0
 800cb26:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cb2a:	ee10 0a10 	vmov	r0, s0
 800cb2e:	4639      	mov	r1, r7
 800cb30:	f7f3 fd62 	bl	80005f8 <__aeabi_dmul>
 800cb34:	ec41 0b10 	vmov	d0, r0, r1
 800cb38:	f000 fb6e 	bl	800d218 <floor>
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	ec51 0b10 	vmov	r0, r1, d0
 800cb42:	4b7e      	ldr	r3, [pc, #504]	; (800cd3c <__kernel_rem_pio2+0x32c>)
 800cb44:	f7f3 fd58 	bl	80005f8 <__aeabi_dmul>
 800cb48:	4602      	mov	r2, r0
 800cb4a:	460b      	mov	r3, r1
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	4639      	mov	r1, r7
 800cb50:	f7f3 fb9a 	bl	8000288 <__aeabi_dsub>
 800cb54:	460f      	mov	r7, r1
 800cb56:	4606      	mov	r6, r0
 800cb58:	f7f3 ffe8 	bl	8000b2c <__aeabi_d2iz>
 800cb5c:	9006      	str	r0, [sp, #24]
 800cb5e:	f7f3 fce1 	bl	8000524 <__aeabi_i2d>
 800cb62:	4602      	mov	r2, r0
 800cb64:	460b      	mov	r3, r1
 800cb66:	4630      	mov	r0, r6
 800cb68:	4639      	mov	r1, r7
 800cb6a:	f7f3 fb8d 	bl	8000288 <__aeabi_dsub>
 800cb6e:	f1ba 0f00 	cmp.w	sl, #0
 800cb72:	4606      	mov	r6, r0
 800cb74:	460f      	mov	r7, r1
 800cb76:	dd6c      	ble.n	800cc52 <__kernel_rem_pio2+0x242>
 800cb78:	1e62      	subs	r2, r4, #1
 800cb7a:	ab0e      	add	r3, sp, #56	; 0x38
 800cb7c:	f1ca 0118 	rsb	r1, sl, #24
 800cb80:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cb84:	9d06      	ldr	r5, [sp, #24]
 800cb86:	fa40 f301 	asr.w	r3, r0, r1
 800cb8a:	441d      	add	r5, r3
 800cb8c:	408b      	lsls	r3, r1
 800cb8e:	1ac0      	subs	r0, r0, r3
 800cb90:	ab0e      	add	r3, sp, #56	; 0x38
 800cb92:	9506      	str	r5, [sp, #24]
 800cb94:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cb98:	f1ca 0317 	rsb	r3, sl, #23
 800cb9c:	fa40 f303 	asr.w	r3, r0, r3
 800cba0:	9302      	str	r3, [sp, #8]
 800cba2:	9b02      	ldr	r3, [sp, #8]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	dd62      	ble.n	800cc6e <__kernel_rem_pio2+0x25e>
 800cba8:	9b06      	ldr	r3, [sp, #24]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	3301      	adds	r3, #1
 800cbae:	9306      	str	r3, [sp, #24]
 800cbb0:	4615      	mov	r5, r2
 800cbb2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cbb6:	4294      	cmp	r4, r2
 800cbb8:	f300 8095 	bgt.w	800cce6 <__kernel_rem_pio2+0x2d6>
 800cbbc:	f1ba 0f00 	cmp.w	sl, #0
 800cbc0:	dd07      	ble.n	800cbd2 <__kernel_rem_pio2+0x1c2>
 800cbc2:	f1ba 0f01 	cmp.w	sl, #1
 800cbc6:	f000 80a2 	beq.w	800cd0e <__kernel_rem_pio2+0x2fe>
 800cbca:	f1ba 0f02 	cmp.w	sl, #2
 800cbce:	f000 80c1 	beq.w	800cd54 <__kernel_rem_pio2+0x344>
 800cbd2:	9b02      	ldr	r3, [sp, #8]
 800cbd4:	2b02      	cmp	r3, #2
 800cbd6:	d14a      	bne.n	800cc6e <__kernel_rem_pio2+0x25e>
 800cbd8:	4632      	mov	r2, r6
 800cbda:	463b      	mov	r3, r7
 800cbdc:	2000      	movs	r0, #0
 800cbde:	4958      	ldr	r1, [pc, #352]	; (800cd40 <__kernel_rem_pio2+0x330>)
 800cbe0:	f7f3 fb52 	bl	8000288 <__aeabi_dsub>
 800cbe4:	4606      	mov	r6, r0
 800cbe6:	460f      	mov	r7, r1
 800cbe8:	2d00      	cmp	r5, #0
 800cbea:	d040      	beq.n	800cc6e <__kernel_rem_pio2+0x25e>
 800cbec:	4650      	mov	r0, sl
 800cbee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800cd30 <__kernel_rem_pio2+0x320>
 800cbf2:	f000 fb95 	bl	800d320 <scalbn>
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	4639      	mov	r1, r7
 800cbfa:	ec53 2b10 	vmov	r2, r3, d0
 800cbfe:	f7f3 fb43 	bl	8000288 <__aeabi_dsub>
 800cc02:	4606      	mov	r6, r0
 800cc04:	460f      	mov	r7, r1
 800cc06:	e032      	b.n	800cc6e <__kernel_rem_pio2+0x25e>
 800cc08:	2200      	movs	r2, #0
 800cc0a:	4b4e      	ldr	r3, [pc, #312]	; (800cd44 <__kernel_rem_pio2+0x334>)
 800cc0c:	4640      	mov	r0, r8
 800cc0e:	4649      	mov	r1, r9
 800cc10:	f7f3 fcf2 	bl	80005f8 <__aeabi_dmul>
 800cc14:	f7f3 ff8a 	bl	8000b2c <__aeabi_d2iz>
 800cc18:	f7f3 fc84 	bl	8000524 <__aeabi_i2d>
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	4b4a      	ldr	r3, [pc, #296]	; (800cd48 <__kernel_rem_pio2+0x338>)
 800cc20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc24:	f7f3 fce8 	bl	80005f8 <__aeabi_dmul>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	4640      	mov	r0, r8
 800cc2e:	4649      	mov	r1, r9
 800cc30:	f7f3 fb2a 	bl	8000288 <__aeabi_dsub>
 800cc34:	f7f3 ff7a 	bl	8000b2c <__aeabi_d2iz>
 800cc38:	ab0e      	add	r3, sp, #56	; 0x38
 800cc3a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800cc3e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800cc42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc46:	f7f3 fb21 	bl	800028c <__adddf3>
 800cc4a:	3501      	adds	r5, #1
 800cc4c:	4680      	mov	r8, r0
 800cc4e:	4689      	mov	r9, r1
 800cc50:	e75e      	b.n	800cb10 <__kernel_rem_pio2+0x100>
 800cc52:	d105      	bne.n	800cc60 <__kernel_rem_pio2+0x250>
 800cc54:	1e63      	subs	r3, r4, #1
 800cc56:	aa0e      	add	r2, sp, #56	; 0x38
 800cc58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cc5c:	15c3      	asrs	r3, r0, #23
 800cc5e:	e79f      	b.n	800cba0 <__kernel_rem_pio2+0x190>
 800cc60:	2200      	movs	r2, #0
 800cc62:	4b3a      	ldr	r3, [pc, #232]	; (800cd4c <__kernel_rem_pio2+0x33c>)
 800cc64:	f7f3 ff4e 	bl	8000b04 <__aeabi_dcmpge>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d139      	bne.n	800cce0 <__kernel_rem_pio2+0x2d0>
 800cc6c:	9002      	str	r0, [sp, #8]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	2300      	movs	r3, #0
 800cc72:	4630      	mov	r0, r6
 800cc74:	4639      	mov	r1, r7
 800cc76:	f7f3 ff27 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	f000 80c7 	beq.w	800ce0e <__kernel_rem_pio2+0x3fe>
 800cc80:	1e65      	subs	r5, r4, #1
 800cc82:	462b      	mov	r3, r5
 800cc84:	2200      	movs	r2, #0
 800cc86:	9904      	ldr	r1, [sp, #16]
 800cc88:	428b      	cmp	r3, r1
 800cc8a:	da6a      	bge.n	800cd62 <__kernel_rem_pio2+0x352>
 800cc8c:	2a00      	cmp	r2, #0
 800cc8e:	f000 8088 	beq.w	800cda2 <__kernel_rem_pio2+0x392>
 800cc92:	ab0e      	add	r3, sp, #56	; 0x38
 800cc94:	f1aa 0a18 	sub.w	sl, sl, #24
 800cc98:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f000 80b4 	beq.w	800ce0a <__kernel_rem_pio2+0x3fa>
 800cca2:	4650      	mov	r0, sl
 800cca4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800cd30 <__kernel_rem_pio2+0x320>
 800cca8:	f000 fb3a 	bl	800d320 <scalbn>
 800ccac:	00ec      	lsls	r4, r5, #3
 800ccae:	ab72      	add	r3, sp, #456	; 0x1c8
 800ccb0:	191e      	adds	r6, r3, r4
 800ccb2:	ec59 8b10 	vmov	r8, r9, d0
 800ccb6:	f106 0a08 	add.w	sl, r6, #8
 800ccba:	462f      	mov	r7, r5
 800ccbc:	2f00      	cmp	r7, #0
 800ccbe:	f280 80df 	bge.w	800ce80 <__kernel_rem_pio2+0x470>
 800ccc2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800cd28 <__kernel_rem_pio2+0x318>
 800ccc6:	f04f 0a00 	mov.w	sl, #0
 800ccca:	eba5 030a 	sub.w	r3, r5, sl
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f2c0 810a 	blt.w	800cee8 <__kernel_rem_pio2+0x4d8>
 800ccd4:	f8df b078 	ldr.w	fp, [pc, #120]	; 800cd50 <__kernel_rem_pio2+0x340>
 800ccd8:	ec59 8b18 	vmov	r8, r9, d8
 800ccdc:	2700      	movs	r7, #0
 800ccde:	e0f5      	b.n	800cecc <__kernel_rem_pio2+0x4bc>
 800cce0:	2302      	movs	r3, #2
 800cce2:	9302      	str	r3, [sp, #8]
 800cce4:	e760      	b.n	800cba8 <__kernel_rem_pio2+0x198>
 800cce6:	ab0e      	add	r3, sp, #56	; 0x38
 800cce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccec:	b94d      	cbnz	r5, 800cd02 <__kernel_rem_pio2+0x2f2>
 800ccee:	b12b      	cbz	r3, 800ccfc <__kernel_rem_pio2+0x2ec>
 800ccf0:	a80e      	add	r0, sp, #56	; 0x38
 800ccf2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ccf6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	3201      	adds	r2, #1
 800ccfe:	461d      	mov	r5, r3
 800cd00:	e759      	b.n	800cbb6 <__kernel_rem_pio2+0x1a6>
 800cd02:	a80e      	add	r0, sp, #56	; 0x38
 800cd04:	1acb      	subs	r3, r1, r3
 800cd06:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800cd0a:	462b      	mov	r3, r5
 800cd0c:	e7f6      	b.n	800ccfc <__kernel_rem_pio2+0x2ec>
 800cd0e:	1e62      	subs	r2, r4, #1
 800cd10:	ab0e      	add	r3, sp, #56	; 0x38
 800cd12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd16:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cd1a:	a90e      	add	r1, sp, #56	; 0x38
 800cd1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cd20:	e757      	b.n	800cbd2 <__kernel_rem_pio2+0x1c2>
 800cd22:	bf00      	nop
 800cd24:	f3af 8000 	nop.w
	...
 800cd34:	3ff00000 	.word	0x3ff00000
 800cd38:	0800d7d0 	.word	0x0800d7d0
 800cd3c:	40200000 	.word	0x40200000
 800cd40:	3ff00000 	.word	0x3ff00000
 800cd44:	3e700000 	.word	0x3e700000
 800cd48:	41700000 	.word	0x41700000
 800cd4c:	3fe00000 	.word	0x3fe00000
 800cd50:	0800d790 	.word	0x0800d790
 800cd54:	1e62      	subs	r2, r4, #1
 800cd56:	ab0e      	add	r3, sp, #56	; 0x38
 800cd58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd5c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cd60:	e7db      	b.n	800cd1a <__kernel_rem_pio2+0x30a>
 800cd62:	a90e      	add	r1, sp, #56	; 0x38
 800cd64:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	430a      	orrs	r2, r1
 800cd6c:	e78b      	b.n	800cc86 <__kernel_rem_pio2+0x276>
 800cd6e:	3301      	adds	r3, #1
 800cd70:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cd74:	2900      	cmp	r1, #0
 800cd76:	d0fa      	beq.n	800cd6e <__kernel_rem_pio2+0x35e>
 800cd78:	9a08      	ldr	r2, [sp, #32]
 800cd7a:	4422      	add	r2, r4
 800cd7c:	00d2      	lsls	r2, r2, #3
 800cd7e:	a922      	add	r1, sp, #136	; 0x88
 800cd80:	18e3      	adds	r3, r4, r3
 800cd82:	9206      	str	r2, [sp, #24]
 800cd84:	440a      	add	r2, r1
 800cd86:	9302      	str	r3, [sp, #8]
 800cd88:	f10b 0108 	add.w	r1, fp, #8
 800cd8c:	f102 0308 	add.w	r3, r2, #8
 800cd90:	1c66      	adds	r6, r4, #1
 800cd92:	910a      	str	r1, [sp, #40]	; 0x28
 800cd94:	2500      	movs	r5, #0
 800cd96:	930d      	str	r3, [sp, #52]	; 0x34
 800cd98:	9b02      	ldr	r3, [sp, #8]
 800cd9a:	42b3      	cmp	r3, r6
 800cd9c:	da04      	bge.n	800cda8 <__kernel_rem_pio2+0x398>
 800cd9e:	461c      	mov	r4, r3
 800cda0:	e6a6      	b.n	800caf0 <__kernel_rem_pio2+0xe0>
 800cda2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cda4:	2301      	movs	r3, #1
 800cda6:	e7e3      	b.n	800cd70 <__kernel_rem_pio2+0x360>
 800cda8:	9b06      	ldr	r3, [sp, #24]
 800cdaa:	18ef      	adds	r7, r5, r3
 800cdac:	ab22      	add	r3, sp, #136	; 0x88
 800cdae:	441f      	add	r7, r3
 800cdb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdb2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cdb6:	f7f3 fbb5 	bl	8000524 <__aeabi_i2d>
 800cdba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdbc:	461c      	mov	r4, r3
 800cdbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdc0:	e9c7 0100 	strd	r0, r1, [r7]
 800cdc4:	eb03 0b05 	add.w	fp, r3, r5
 800cdc8:	2700      	movs	r7, #0
 800cdca:	f04f 0800 	mov.w	r8, #0
 800cdce:	f04f 0900 	mov.w	r9, #0
 800cdd2:	9b07      	ldr	r3, [sp, #28]
 800cdd4:	429f      	cmp	r7, r3
 800cdd6:	dd08      	ble.n	800cdea <__kernel_rem_pio2+0x3da>
 800cdd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdda:	aa72      	add	r2, sp, #456	; 0x1c8
 800cddc:	18eb      	adds	r3, r5, r3
 800cdde:	4413      	add	r3, r2
 800cde0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800cde4:	3601      	adds	r6, #1
 800cde6:	3508      	adds	r5, #8
 800cde8:	e7d6      	b.n	800cd98 <__kernel_rem_pio2+0x388>
 800cdea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800cdee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800cdf2:	f7f3 fc01 	bl	80005f8 <__aeabi_dmul>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	4649      	mov	r1, r9
 800cdfe:	f7f3 fa45 	bl	800028c <__adddf3>
 800ce02:	3701      	adds	r7, #1
 800ce04:	4680      	mov	r8, r0
 800ce06:	4689      	mov	r9, r1
 800ce08:	e7e3      	b.n	800cdd2 <__kernel_rem_pio2+0x3c2>
 800ce0a:	3d01      	subs	r5, #1
 800ce0c:	e741      	b.n	800cc92 <__kernel_rem_pio2+0x282>
 800ce0e:	f1ca 0000 	rsb	r0, sl, #0
 800ce12:	ec47 6b10 	vmov	d0, r6, r7
 800ce16:	f000 fa83 	bl	800d320 <scalbn>
 800ce1a:	ec57 6b10 	vmov	r6, r7, d0
 800ce1e:	2200      	movs	r2, #0
 800ce20:	4b99      	ldr	r3, [pc, #612]	; (800d088 <__kernel_rem_pio2+0x678>)
 800ce22:	ee10 0a10 	vmov	r0, s0
 800ce26:	4639      	mov	r1, r7
 800ce28:	f7f3 fe6c 	bl	8000b04 <__aeabi_dcmpge>
 800ce2c:	b1f8      	cbz	r0, 800ce6e <__kernel_rem_pio2+0x45e>
 800ce2e:	2200      	movs	r2, #0
 800ce30:	4b96      	ldr	r3, [pc, #600]	; (800d08c <__kernel_rem_pio2+0x67c>)
 800ce32:	4630      	mov	r0, r6
 800ce34:	4639      	mov	r1, r7
 800ce36:	f7f3 fbdf 	bl	80005f8 <__aeabi_dmul>
 800ce3a:	f7f3 fe77 	bl	8000b2c <__aeabi_d2iz>
 800ce3e:	4680      	mov	r8, r0
 800ce40:	f7f3 fb70 	bl	8000524 <__aeabi_i2d>
 800ce44:	2200      	movs	r2, #0
 800ce46:	4b90      	ldr	r3, [pc, #576]	; (800d088 <__kernel_rem_pio2+0x678>)
 800ce48:	f7f3 fbd6 	bl	80005f8 <__aeabi_dmul>
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	4602      	mov	r2, r0
 800ce50:	4639      	mov	r1, r7
 800ce52:	4630      	mov	r0, r6
 800ce54:	f7f3 fa18 	bl	8000288 <__aeabi_dsub>
 800ce58:	f7f3 fe68 	bl	8000b2c <__aeabi_d2iz>
 800ce5c:	1c65      	adds	r5, r4, #1
 800ce5e:	ab0e      	add	r3, sp, #56	; 0x38
 800ce60:	f10a 0a18 	add.w	sl, sl, #24
 800ce64:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ce68:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ce6c:	e719      	b.n	800cca2 <__kernel_rem_pio2+0x292>
 800ce6e:	4630      	mov	r0, r6
 800ce70:	4639      	mov	r1, r7
 800ce72:	f7f3 fe5b 	bl	8000b2c <__aeabi_d2iz>
 800ce76:	ab0e      	add	r3, sp, #56	; 0x38
 800ce78:	4625      	mov	r5, r4
 800ce7a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ce7e:	e710      	b.n	800cca2 <__kernel_rem_pio2+0x292>
 800ce80:	ab0e      	add	r3, sp, #56	; 0x38
 800ce82:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ce86:	f7f3 fb4d 	bl	8000524 <__aeabi_i2d>
 800ce8a:	4642      	mov	r2, r8
 800ce8c:	464b      	mov	r3, r9
 800ce8e:	f7f3 fbb3 	bl	80005f8 <__aeabi_dmul>
 800ce92:	2200      	movs	r2, #0
 800ce94:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ce98:	4b7c      	ldr	r3, [pc, #496]	; (800d08c <__kernel_rem_pio2+0x67c>)
 800ce9a:	4640      	mov	r0, r8
 800ce9c:	4649      	mov	r1, r9
 800ce9e:	f7f3 fbab 	bl	80005f8 <__aeabi_dmul>
 800cea2:	3f01      	subs	r7, #1
 800cea4:	4680      	mov	r8, r0
 800cea6:	4689      	mov	r9, r1
 800cea8:	e708      	b.n	800ccbc <__kernel_rem_pio2+0x2ac>
 800ceaa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800ceb6:	f7f3 fb9f 	bl	80005f8 <__aeabi_dmul>
 800ceba:	4602      	mov	r2, r0
 800cebc:	460b      	mov	r3, r1
 800cebe:	4640      	mov	r0, r8
 800cec0:	4649      	mov	r1, r9
 800cec2:	f7f3 f9e3 	bl	800028c <__adddf3>
 800cec6:	3701      	adds	r7, #1
 800cec8:	4680      	mov	r8, r0
 800ceca:	4689      	mov	r9, r1
 800cecc:	9b04      	ldr	r3, [sp, #16]
 800cece:	429f      	cmp	r7, r3
 800ced0:	dc01      	bgt.n	800ced6 <__kernel_rem_pio2+0x4c6>
 800ced2:	45ba      	cmp	sl, r7
 800ced4:	dae9      	bge.n	800ceaa <__kernel_rem_pio2+0x49a>
 800ced6:	ab4a      	add	r3, sp, #296	; 0x128
 800ced8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cedc:	e9c3 8900 	strd	r8, r9, [r3]
 800cee0:	f10a 0a01 	add.w	sl, sl, #1
 800cee4:	3e08      	subs	r6, #8
 800cee6:	e6f0      	b.n	800ccca <__kernel_rem_pio2+0x2ba>
 800cee8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ceea:	2b03      	cmp	r3, #3
 800ceec:	d85b      	bhi.n	800cfa6 <__kernel_rem_pio2+0x596>
 800ceee:	e8df f003 	tbb	[pc, r3]
 800cef2:	264a      	.short	0x264a
 800cef4:	0226      	.short	0x0226
 800cef6:	ab9a      	add	r3, sp, #616	; 0x268
 800cef8:	441c      	add	r4, r3
 800cefa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800cefe:	46a2      	mov	sl, r4
 800cf00:	46ab      	mov	fp, r5
 800cf02:	f1bb 0f00 	cmp.w	fp, #0
 800cf06:	dc6c      	bgt.n	800cfe2 <__kernel_rem_pio2+0x5d2>
 800cf08:	46a2      	mov	sl, r4
 800cf0a:	46ab      	mov	fp, r5
 800cf0c:	f1bb 0f01 	cmp.w	fp, #1
 800cf10:	f300 8086 	bgt.w	800d020 <__kernel_rem_pio2+0x610>
 800cf14:	2000      	movs	r0, #0
 800cf16:	2100      	movs	r1, #0
 800cf18:	2d01      	cmp	r5, #1
 800cf1a:	f300 80a0 	bgt.w	800d05e <__kernel_rem_pio2+0x64e>
 800cf1e:	9b02      	ldr	r3, [sp, #8]
 800cf20:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800cf24:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	f040 809e 	bne.w	800d06a <__kernel_rem_pio2+0x65a>
 800cf2e:	9b01      	ldr	r3, [sp, #4]
 800cf30:	e9c3 7800 	strd	r7, r8, [r3]
 800cf34:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800cf38:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cf3c:	e033      	b.n	800cfa6 <__kernel_rem_pio2+0x596>
 800cf3e:	3408      	adds	r4, #8
 800cf40:	ab4a      	add	r3, sp, #296	; 0x128
 800cf42:	441c      	add	r4, r3
 800cf44:	462e      	mov	r6, r5
 800cf46:	2000      	movs	r0, #0
 800cf48:	2100      	movs	r1, #0
 800cf4a:	2e00      	cmp	r6, #0
 800cf4c:	da3a      	bge.n	800cfc4 <__kernel_rem_pio2+0x5b4>
 800cf4e:	9b02      	ldr	r3, [sp, #8]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d03d      	beq.n	800cfd0 <__kernel_rem_pio2+0x5c0>
 800cf54:	4602      	mov	r2, r0
 800cf56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf5a:	9c01      	ldr	r4, [sp, #4]
 800cf5c:	e9c4 2300 	strd	r2, r3, [r4]
 800cf60:	4602      	mov	r2, r0
 800cf62:	460b      	mov	r3, r1
 800cf64:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800cf68:	f7f3 f98e 	bl	8000288 <__aeabi_dsub>
 800cf6c:	ae4c      	add	r6, sp, #304	; 0x130
 800cf6e:	2401      	movs	r4, #1
 800cf70:	42a5      	cmp	r5, r4
 800cf72:	da30      	bge.n	800cfd6 <__kernel_rem_pio2+0x5c6>
 800cf74:	9b02      	ldr	r3, [sp, #8]
 800cf76:	b113      	cbz	r3, 800cf7e <__kernel_rem_pio2+0x56e>
 800cf78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	9b01      	ldr	r3, [sp, #4]
 800cf80:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800cf84:	e00f      	b.n	800cfa6 <__kernel_rem_pio2+0x596>
 800cf86:	ab9a      	add	r3, sp, #616	; 0x268
 800cf88:	441c      	add	r4, r3
 800cf8a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800cf8e:	2000      	movs	r0, #0
 800cf90:	2100      	movs	r1, #0
 800cf92:	2d00      	cmp	r5, #0
 800cf94:	da10      	bge.n	800cfb8 <__kernel_rem_pio2+0x5a8>
 800cf96:	9b02      	ldr	r3, [sp, #8]
 800cf98:	b113      	cbz	r3, 800cfa0 <__kernel_rem_pio2+0x590>
 800cf9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	9b01      	ldr	r3, [sp, #4]
 800cfa2:	e9c3 0100 	strd	r0, r1, [r3]
 800cfa6:	9b06      	ldr	r3, [sp, #24]
 800cfa8:	f003 0007 	and.w	r0, r3, #7
 800cfac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800cfb0:	ecbd 8b02 	vpop	{d8}
 800cfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cfbc:	f7f3 f966 	bl	800028c <__adddf3>
 800cfc0:	3d01      	subs	r5, #1
 800cfc2:	e7e6      	b.n	800cf92 <__kernel_rem_pio2+0x582>
 800cfc4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cfc8:	f7f3 f960 	bl	800028c <__adddf3>
 800cfcc:	3e01      	subs	r6, #1
 800cfce:	e7bc      	b.n	800cf4a <__kernel_rem_pio2+0x53a>
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	e7c1      	b.n	800cf5a <__kernel_rem_pio2+0x54a>
 800cfd6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800cfda:	f7f3 f957 	bl	800028c <__adddf3>
 800cfde:	3401      	adds	r4, #1
 800cfe0:	e7c6      	b.n	800cf70 <__kernel_rem_pio2+0x560>
 800cfe2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800cfe6:	ed3a 7b02 	vldmdb	sl!, {d7}
 800cfea:	4640      	mov	r0, r8
 800cfec:	ec53 2b17 	vmov	r2, r3, d7
 800cff0:	4649      	mov	r1, r9
 800cff2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cff6:	f7f3 f949 	bl	800028c <__adddf3>
 800cffa:	4602      	mov	r2, r0
 800cffc:	460b      	mov	r3, r1
 800cffe:	4606      	mov	r6, r0
 800d000:	460f      	mov	r7, r1
 800d002:	4640      	mov	r0, r8
 800d004:	4649      	mov	r1, r9
 800d006:	f7f3 f93f 	bl	8000288 <__aeabi_dsub>
 800d00a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d00e:	f7f3 f93d 	bl	800028c <__adddf3>
 800d012:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d016:	e9ca 0100 	strd	r0, r1, [sl]
 800d01a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800d01e:	e770      	b.n	800cf02 <__kernel_rem_pio2+0x4f2>
 800d020:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800d024:	ed3a 7b02 	vldmdb	sl!, {d7}
 800d028:	4630      	mov	r0, r6
 800d02a:	ec53 2b17 	vmov	r2, r3, d7
 800d02e:	4639      	mov	r1, r7
 800d030:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d034:	f7f3 f92a 	bl	800028c <__adddf3>
 800d038:	4602      	mov	r2, r0
 800d03a:	460b      	mov	r3, r1
 800d03c:	4680      	mov	r8, r0
 800d03e:	4689      	mov	r9, r1
 800d040:	4630      	mov	r0, r6
 800d042:	4639      	mov	r1, r7
 800d044:	f7f3 f920 	bl	8000288 <__aeabi_dsub>
 800d048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d04c:	f7f3 f91e 	bl	800028c <__adddf3>
 800d050:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d054:	e9ca 0100 	strd	r0, r1, [sl]
 800d058:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800d05c:	e756      	b.n	800cf0c <__kernel_rem_pio2+0x4fc>
 800d05e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d062:	f7f3 f913 	bl	800028c <__adddf3>
 800d066:	3d01      	subs	r5, #1
 800d068:	e756      	b.n	800cf18 <__kernel_rem_pio2+0x508>
 800d06a:	9b01      	ldr	r3, [sp, #4]
 800d06c:	9a01      	ldr	r2, [sp, #4]
 800d06e:	601f      	str	r7, [r3, #0]
 800d070:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d074:	605c      	str	r4, [r3, #4]
 800d076:	609d      	str	r5, [r3, #8]
 800d078:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d07c:	60d3      	str	r3, [r2, #12]
 800d07e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d082:	6110      	str	r0, [r2, #16]
 800d084:	6153      	str	r3, [r2, #20]
 800d086:	e78e      	b.n	800cfa6 <__kernel_rem_pio2+0x596>
 800d088:	41700000 	.word	0x41700000
 800d08c:	3e700000 	.word	0x3e700000

0800d090 <__kernel_sin>:
 800d090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d094:	ec55 4b10 	vmov	r4, r5, d0
 800d098:	b085      	sub	sp, #20
 800d09a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d09e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d0a2:	ed8d 1b00 	vstr	d1, [sp]
 800d0a6:	9002      	str	r0, [sp, #8]
 800d0a8:	da06      	bge.n	800d0b8 <__kernel_sin+0x28>
 800d0aa:	ee10 0a10 	vmov	r0, s0
 800d0ae:	4629      	mov	r1, r5
 800d0b0:	f7f3 fd3c 	bl	8000b2c <__aeabi_d2iz>
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	d051      	beq.n	800d15c <__kernel_sin+0xcc>
 800d0b8:	4622      	mov	r2, r4
 800d0ba:	462b      	mov	r3, r5
 800d0bc:	4620      	mov	r0, r4
 800d0be:	4629      	mov	r1, r5
 800d0c0:	f7f3 fa9a 	bl	80005f8 <__aeabi_dmul>
 800d0c4:	4682      	mov	sl, r0
 800d0c6:	468b      	mov	fp, r1
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	f7f3 fa92 	bl	80005f8 <__aeabi_dmul>
 800d0d4:	a341      	add	r3, pc, #260	; (adr r3, 800d1dc <__kernel_sin+0x14c>)
 800d0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0da:	4680      	mov	r8, r0
 800d0dc:	4689      	mov	r9, r1
 800d0de:	4650      	mov	r0, sl
 800d0e0:	4659      	mov	r1, fp
 800d0e2:	f7f3 fa89 	bl	80005f8 <__aeabi_dmul>
 800d0e6:	a33f      	add	r3, pc, #252	; (adr r3, 800d1e4 <__kernel_sin+0x154>)
 800d0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ec:	f7f3 f8cc 	bl	8000288 <__aeabi_dsub>
 800d0f0:	4652      	mov	r2, sl
 800d0f2:	465b      	mov	r3, fp
 800d0f4:	f7f3 fa80 	bl	80005f8 <__aeabi_dmul>
 800d0f8:	a33c      	add	r3, pc, #240	; (adr r3, 800d1ec <__kernel_sin+0x15c>)
 800d0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fe:	f7f3 f8c5 	bl	800028c <__adddf3>
 800d102:	4652      	mov	r2, sl
 800d104:	465b      	mov	r3, fp
 800d106:	f7f3 fa77 	bl	80005f8 <__aeabi_dmul>
 800d10a:	a33a      	add	r3, pc, #232	; (adr r3, 800d1f4 <__kernel_sin+0x164>)
 800d10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d110:	f7f3 f8ba 	bl	8000288 <__aeabi_dsub>
 800d114:	4652      	mov	r2, sl
 800d116:	465b      	mov	r3, fp
 800d118:	f7f3 fa6e 	bl	80005f8 <__aeabi_dmul>
 800d11c:	a337      	add	r3, pc, #220	; (adr r3, 800d1fc <__kernel_sin+0x16c>)
 800d11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d122:	f7f3 f8b3 	bl	800028c <__adddf3>
 800d126:	9b02      	ldr	r3, [sp, #8]
 800d128:	4606      	mov	r6, r0
 800d12a:	460f      	mov	r7, r1
 800d12c:	b9db      	cbnz	r3, 800d166 <__kernel_sin+0xd6>
 800d12e:	4602      	mov	r2, r0
 800d130:	460b      	mov	r3, r1
 800d132:	4650      	mov	r0, sl
 800d134:	4659      	mov	r1, fp
 800d136:	f7f3 fa5f 	bl	80005f8 <__aeabi_dmul>
 800d13a:	a325      	add	r3, pc, #148	; (adr r3, 800d1d0 <__kernel_sin+0x140>)
 800d13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d140:	f7f3 f8a2 	bl	8000288 <__aeabi_dsub>
 800d144:	4642      	mov	r2, r8
 800d146:	464b      	mov	r3, r9
 800d148:	f7f3 fa56 	bl	80005f8 <__aeabi_dmul>
 800d14c:	4602      	mov	r2, r0
 800d14e:	460b      	mov	r3, r1
 800d150:	4620      	mov	r0, r4
 800d152:	4629      	mov	r1, r5
 800d154:	f7f3 f89a 	bl	800028c <__adddf3>
 800d158:	4604      	mov	r4, r0
 800d15a:	460d      	mov	r5, r1
 800d15c:	ec45 4b10 	vmov	d0, r4, r5
 800d160:	b005      	add	sp, #20
 800d162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d166:	2200      	movs	r2, #0
 800d168:	4b1b      	ldr	r3, [pc, #108]	; (800d1d8 <__kernel_sin+0x148>)
 800d16a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d16e:	f7f3 fa43 	bl	80005f8 <__aeabi_dmul>
 800d172:	4632      	mov	r2, r6
 800d174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d178:	463b      	mov	r3, r7
 800d17a:	4640      	mov	r0, r8
 800d17c:	4649      	mov	r1, r9
 800d17e:	f7f3 fa3b 	bl	80005f8 <__aeabi_dmul>
 800d182:	4602      	mov	r2, r0
 800d184:	460b      	mov	r3, r1
 800d186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d18a:	f7f3 f87d 	bl	8000288 <__aeabi_dsub>
 800d18e:	4652      	mov	r2, sl
 800d190:	465b      	mov	r3, fp
 800d192:	f7f3 fa31 	bl	80005f8 <__aeabi_dmul>
 800d196:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d19a:	f7f3 f875 	bl	8000288 <__aeabi_dsub>
 800d19e:	a30c      	add	r3, pc, #48	; (adr r3, 800d1d0 <__kernel_sin+0x140>)
 800d1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a4:	4606      	mov	r6, r0
 800d1a6:	460f      	mov	r7, r1
 800d1a8:	4640      	mov	r0, r8
 800d1aa:	4649      	mov	r1, r9
 800d1ac:	f7f3 fa24 	bl	80005f8 <__aeabi_dmul>
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	460b      	mov	r3, r1
 800d1b4:	4630      	mov	r0, r6
 800d1b6:	4639      	mov	r1, r7
 800d1b8:	f7f3 f868 	bl	800028c <__adddf3>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	460b      	mov	r3, r1
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	4629      	mov	r1, r5
 800d1c4:	f7f3 f860 	bl	8000288 <__aeabi_dsub>
 800d1c8:	e7c6      	b.n	800d158 <__kernel_sin+0xc8>
 800d1ca:	bf00      	nop
 800d1cc:	f3af 8000 	nop.w
 800d1d0:	55555549 	.word	0x55555549
 800d1d4:	3fc55555 	.word	0x3fc55555
 800d1d8:	3fe00000 	.word	0x3fe00000
 800d1dc:	5acfd57c 	.word	0x5acfd57c
 800d1e0:	3de5d93a 	.word	0x3de5d93a
 800d1e4:	8a2b9ceb 	.word	0x8a2b9ceb
 800d1e8:	3e5ae5e6 	.word	0x3e5ae5e6
 800d1ec:	57b1fe7d 	.word	0x57b1fe7d
 800d1f0:	3ec71de3 	.word	0x3ec71de3
 800d1f4:	19c161d5 	.word	0x19c161d5
 800d1f8:	3f2a01a0 	.word	0x3f2a01a0
 800d1fc:	1110f8a6 	.word	0x1110f8a6
 800d200:	3f811111 	.word	0x3f811111

0800d204 <fabs>:
 800d204:	ec51 0b10 	vmov	r0, r1, d0
 800d208:	ee10 2a10 	vmov	r2, s0
 800d20c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d210:	ec43 2b10 	vmov	d0, r2, r3
 800d214:	4770      	bx	lr
	...

0800d218 <floor>:
 800d218:	ec51 0b10 	vmov	r0, r1, d0
 800d21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d220:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d224:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d228:	2e13      	cmp	r6, #19
 800d22a:	460c      	mov	r4, r1
 800d22c:	ee10 5a10 	vmov	r5, s0
 800d230:	4680      	mov	r8, r0
 800d232:	dc34      	bgt.n	800d29e <floor+0x86>
 800d234:	2e00      	cmp	r6, #0
 800d236:	da16      	bge.n	800d266 <floor+0x4e>
 800d238:	a335      	add	r3, pc, #212	; (adr r3, 800d310 <floor+0xf8>)
 800d23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23e:	f7f3 f825 	bl	800028c <__adddf3>
 800d242:	2200      	movs	r2, #0
 800d244:	2300      	movs	r3, #0
 800d246:	f7f3 fc67 	bl	8000b18 <__aeabi_dcmpgt>
 800d24a:	b148      	cbz	r0, 800d260 <floor+0x48>
 800d24c:	2c00      	cmp	r4, #0
 800d24e:	da59      	bge.n	800d304 <floor+0xec>
 800d250:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d254:	4a30      	ldr	r2, [pc, #192]	; (800d318 <floor+0x100>)
 800d256:	432b      	orrs	r3, r5
 800d258:	2500      	movs	r5, #0
 800d25a:	42ab      	cmp	r3, r5
 800d25c:	bf18      	it	ne
 800d25e:	4614      	movne	r4, r2
 800d260:	4621      	mov	r1, r4
 800d262:	4628      	mov	r0, r5
 800d264:	e025      	b.n	800d2b2 <floor+0x9a>
 800d266:	4f2d      	ldr	r7, [pc, #180]	; (800d31c <floor+0x104>)
 800d268:	4137      	asrs	r7, r6
 800d26a:	ea01 0307 	and.w	r3, r1, r7
 800d26e:	4303      	orrs	r3, r0
 800d270:	d01f      	beq.n	800d2b2 <floor+0x9a>
 800d272:	a327      	add	r3, pc, #156	; (adr r3, 800d310 <floor+0xf8>)
 800d274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d278:	f7f3 f808 	bl	800028c <__adddf3>
 800d27c:	2200      	movs	r2, #0
 800d27e:	2300      	movs	r3, #0
 800d280:	f7f3 fc4a 	bl	8000b18 <__aeabi_dcmpgt>
 800d284:	2800      	cmp	r0, #0
 800d286:	d0eb      	beq.n	800d260 <floor+0x48>
 800d288:	2c00      	cmp	r4, #0
 800d28a:	bfbe      	ittt	lt
 800d28c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d290:	fa43 f606 	asrlt.w	r6, r3, r6
 800d294:	19a4      	addlt	r4, r4, r6
 800d296:	ea24 0407 	bic.w	r4, r4, r7
 800d29a:	2500      	movs	r5, #0
 800d29c:	e7e0      	b.n	800d260 <floor+0x48>
 800d29e:	2e33      	cmp	r6, #51	; 0x33
 800d2a0:	dd0b      	ble.n	800d2ba <floor+0xa2>
 800d2a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d2a6:	d104      	bne.n	800d2b2 <floor+0x9a>
 800d2a8:	ee10 2a10 	vmov	r2, s0
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	f7f2 ffed 	bl	800028c <__adddf3>
 800d2b2:	ec41 0b10 	vmov	d0, r0, r1
 800d2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ba:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d2be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2c2:	fa23 f707 	lsr.w	r7, r3, r7
 800d2c6:	4207      	tst	r7, r0
 800d2c8:	d0f3      	beq.n	800d2b2 <floor+0x9a>
 800d2ca:	a311      	add	r3, pc, #68	; (adr r3, 800d310 <floor+0xf8>)
 800d2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d0:	f7f2 ffdc 	bl	800028c <__adddf3>
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	f7f3 fc1e 	bl	8000b18 <__aeabi_dcmpgt>
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	d0bf      	beq.n	800d260 <floor+0x48>
 800d2e0:	2c00      	cmp	r4, #0
 800d2e2:	da02      	bge.n	800d2ea <floor+0xd2>
 800d2e4:	2e14      	cmp	r6, #20
 800d2e6:	d103      	bne.n	800d2f0 <floor+0xd8>
 800d2e8:	3401      	adds	r4, #1
 800d2ea:	ea25 0507 	bic.w	r5, r5, r7
 800d2ee:	e7b7      	b.n	800d260 <floor+0x48>
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d2f6:	fa03 f606 	lsl.w	r6, r3, r6
 800d2fa:	4435      	add	r5, r6
 800d2fc:	4545      	cmp	r5, r8
 800d2fe:	bf38      	it	cc
 800d300:	18e4      	addcc	r4, r4, r3
 800d302:	e7f2      	b.n	800d2ea <floor+0xd2>
 800d304:	2500      	movs	r5, #0
 800d306:	462c      	mov	r4, r5
 800d308:	e7aa      	b.n	800d260 <floor+0x48>
 800d30a:	bf00      	nop
 800d30c:	f3af 8000 	nop.w
 800d310:	8800759c 	.word	0x8800759c
 800d314:	7e37e43c 	.word	0x7e37e43c
 800d318:	bff00000 	.word	0xbff00000
 800d31c:	000fffff 	.word	0x000fffff

0800d320 <scalbn>:
 800d320:	b570      	push	{r4, r5, r6, lr}
 800d322:	ec55 4b10 	vmov	r4, r5, d0
 800d326:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d32a:	4606      	mov	r6, r0
 800d32c:	462b      	mov	r3, r5
 800d32e:	b9aa      	cbnz	r2, 800d35c <scalbn+0x3c>
 800d330:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d334:	4323      	orrs	r3, r4
 800d336:	d03b      	beq.n	800d3b0 <scalbn+0x90>
 800d338:	4b31      	ldr	r3, [pc, #196]	; (800d400 <scalbn+0xe0>)
 800d33a:	4629      	mov	r1, r5
 800d33c:	2200      	movs	r2, #0
 800d33e:	ee10 0a10 	vmov	r0, s0
 800d342:	f7f3 f959 	bl	80005f8 <__aeabi_dmul>
 800d346:	4b2f      	ldr	r3, [pc, #188]	; (800d404 <scalbn+0xe4>)
 800d348:	429e      	cmp	r6, r3
 800d34a:	4604      	mov	r4, r0
 800d34c:	460d      	mov	r5, r1
 800d34e:	da12      	bge.n	800d376 <scalbn+0x56>
 800d350:	a327      	add	r3, pc, #156	; (adr r3, 800d3f0 <scalbn+0xd0>)
 800d352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d356:	f7f3 f94f 	bl	80005f8 <__aeabi_dmul>
 800d35a:	e009      	b.n	800d370 <scalbn+0x50>
 800d35c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d360:	428a      	cmp	r2, r1
 800d362:	d10c      	bne.n	800d37e <scalbn+0x5e>
 800d364:	ee10 2a10 	vmov	r2, s0
 800d368:	4620      	mov	r0, r4
 800d36a:	4629      	mov	r1, r5
 800d36c:	f7f2 ff8e 	bl	800028c <__adddf3>
 800d370:	4604      	mov	r4, r0
 800d372:	460d      	mov	r5, r1
 800d374:	e01c      	b.n	800d3b0 <scalbn+0x90>
 800d376:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d37a:	460b      	mov	r3, r1
 800d37c:	3a36      	subs	r2, #54	; 0x36
 800d37e:	4432      	add	r2, r6
 800d380:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d384:	428a      	cmp	r2, r1
 800d386:	dd0b      	ble.n	800d3a0 <scalbn+0x80>
 800d388:	ec45 4b11 	vmov	d1, r4, r5
 800d38c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d3f8 <scalbn+0xd8>
 800d390:	f000 f83c 	bl	800d40c <copysign>
 800d394:	a318      	add	r3, pc, #96	; (adr r3, 800d3f8 <scalbn+0xd8>)
 800d396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39a:	ec51 0b10 	vmov	r0, r1, d0
 800d39e:	e7da      	b.n	800d356 <scalbn+0x36>
 800d3a0:	2a00      	cmp	r2, #0
 800d3a2:	dd08      	ble.n	800d3b6 <scalbn+0x96>
 800d3a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d3a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d3ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d3b0:	ec45 4b10 	vmov	d0, r4, r5
 800d3b4:	bd70      	pop	{r4, r5, r6, pc}
 800d3b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d3ba:	da0d      	bge.n	800d3d8 <scalbn+0xb8>
 800d3bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d3c0:	429e      	cmp	r6, r3
 800d3c2:	ec45 4b11 	vmov	d1, r4, r5
 800d3c6:	dce1      	bgt.n	800d38c <scalbn+0x6c>
 800d3c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800d3f0 <scalbn+0xd0>
 800d3cc:	f000 f81e 	bl	800d40c <copysign>
 800d3d0:	a307      	add	r3, pc, #28	; (adr r3, 800d3f0 <scalbn+0xd0>)
 800d3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d6:	e7e0      	b.n	800d39a <scalbn+0x7a>
 800d3d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d3dc:	3236      	adds	r2, #54	; 0x36
 800d3de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d3e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	4629      	mov	r1, r5
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	4b06      	ldr	r3, [pc, #24]	; (800d408 <scalbn+0xe8>)
 800d3ee:	e7b2      	b.n	800d356 <scalbn+0x36>
 800d3f0:	c2f8f359 	.word	0xc2f8f359
 800d3f4:	01a56e1f 	.word	0x01a56e1f
 800d3f8:	8800759c 	.word	0x8800759c
 800d3fc:	7e37e43c 	.word	0x7e37e43c
 800d400:	43500000 	.word	0x43500000
 800d404:	ffff3cb0 	.word	0xffff3cb0
 800d408:	3c900000 	.word	0x3c900000

0800d40c <copysign>:
 800d40c:	ec51 0b10 	vmov	r0, r1, d0
 800d410:	ee11 0a90 	vmov	r0, s3
 800d414:	ee10 2a10 	vmov	r2, s0
 800d418:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d41c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800d420:	ea41 0300 	orr.w	r3, r1, r0
 800d424:	ec43 2b10 	vmov	d0, r2, r3
 800d428:	4770      	bx	lr
	...

0800d42c <_init>:
 800d42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d42e:	bf00      	nop
 800d430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d432:	bc08      	pop	{r3}
 800d434:	469e      	mov	lr, r3
 800d436:	4770      	bx	lr

0800d438 <_fini>:
 800d438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d43a:	bf00      	nop
 800d43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d43e:	bc08      	pop	{r3}
 800d440:	469e      	mov	lr, r3
 800d442:	4770      	bx	lr
