
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008ba8  08008ba8  00018ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c58  08008c58  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008c58  08008c58  00018c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c60  08008c60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c60  08008c60  00018c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c64  08008c64  00018c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  20000070  08008cd8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  08008cd8  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171b1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ac1  00000000  00000000  00037251  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016a0  00000000  00000000  00039d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001578  00000000  00000000  0003b3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ad9  00000000  00000000  0003c930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000106e1  00000000  00000000  0005e409  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccf05  00000000  00000000  0006eaea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b9ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000665c  00000000  00000000  0013ba6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b90 	.word	0x08008b90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008b90 	.word	0x08008b90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 ff6b 	bl	8001484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f007 f91c 	bl	80077f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 ff83 	bl	80014ee <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000600:	f000 ff4b 	bl	800149a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20000098 	.word	0x20000098

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000098 	.word	0x20000098

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d101      	bne.n	80006be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e033      	b.n	8000726 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d109      	bne.n	80006da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f007 f8ba 	bl	8007840 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d118      	bne.n	8000718 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006ee:	f023 0302 	bic.w	r3, r3, #2
 80006f2:	f043 0202 	orr.w	r2, r3, #2
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 fbf0 	bl	8000ee0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f023 0303 	bic.w	r3, r3, #3
 800070e:	f043 0201 	orr.w	r2, r3, #1
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	641a      	str	r2, [r3, #64]	; 0x40
 8000716:	e001      	b.n	800071c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000742:	2b01      	cmp	r3, #1
 8000744:	d101      	bne.n	800074a <HAL_ADC_Start+0x1a>
 8000746:	2302      	movs	r3, #2
 8000748:	e0a5      	b.n	8000896 <HAL_ADC_Start+0x166>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2201      	movs	r2, #1
 800074e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	2b01      	cmp	r3, #1
 800075e:	d018      	beq.n	8000792 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f042 0201 	orr.w	r2, r2, #1
 800076e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000770:	4b4c      	ldr	r3, [pc, #304]	; (80008a4 <HAL_ADC_Start+0x174>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a4c      	ldr	r2, [pc, #304]	; (80008a8 <HAL_ADC_Start+0x178>)
 8000776:	fba2 2303 	umull	r2, r3, r2, r3
 800077a:	0c9a      	lsrs	r2, r3, #18
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000784:	e002      	b.n	800078c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	3b01      	subs	r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f9      	bne.n	8000786 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	2b01      	cmp	r3, #1
 800079e:	d179      	bne.n	8000894 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007a8:	f023 0301 	bic.w	r3, r3, #1
 80007ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d007      	beq.n	80007d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007de:	d106      	bne.n	80007ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e4:	f023 0206 	bic.w	r2, r3, #6
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	645a      	str	r2, [r3, #68]	; 0x44
 80007ec:	e002      	b.n	80007f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <HAL_ADC_Start+0x17c>)
 80007fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000808:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	f003 031f 	and.w	r3, r3, #31
 8000812:	2b00      	cmp	r3, #0
 8000814:	d12a      	bne.n	800086c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a25      	ldr	r2, [pc, #148]	; (80008b0 <HAL_ADC_Start+0x180>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d015      	beq.n	800084c <HAL_ADC_Start+0x11c>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <HAL_ADC_Start+0x184>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d105      	bne.n	8000836 <HAL_ADC_Start+0x106>
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <HAL_ADC_Start+0x17c>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f003 031f 	and.w	r3, r3, #31
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00a      	beq.n	800084c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <HAL_ADC_Start+0x188>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d129      	bne.n	8000894 <HAL_ADC_Start+0x164>
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <HAL_ADC_Start+0x17c>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f003 031f 	and.w	r3, r3, #31
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d823      	bhi.n	8000894 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d11c      	bne.n	8000894 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	689a      	ldr	r2, [r3, #8]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	e013      	b.n	8000894 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <HAL_ADC_Start+0x180>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d10e      	bne.n	8000894 <HAL_ADC_Start+0x164>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000880:	2b00      	cmp	r3, #0
 8000882:	d107      	bne.n	8000894 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000892:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000008 	.word	0x20000008
 80008a8:	431bde83 	.word	0x431bde83
 80008ac:	40012300 	.word	0x40012300
 80008b0:	40012000 	.word	0x40012000
 80008b4:	40012100 	.word	0x40012100
 80008b8:	40012200 	.word	0x40012200

080008bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008d8:	d113      	bne.n	8000902 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008e8:	d10b      	bne.n	8000902 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f043 0220 	orr.w	r2, r3, #32
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e05c      	b.n	80009bc <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000902:	f7ff fea3 	bl	800064c <HAL_GetTick>
 8000906:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000908:	e01a      	b.n	8000940 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000910:	d016      	beq.n	8000940 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d007      	beq.n	8000928 <HAL_ADC_PollForConversion+0x6c>
 8000918:	f7ff fe98 	bl	800064c <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	429a      	cmp	r2, r3
 8000926:	d20b      	bcs.n	8000940 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f043 0204 	orr.w	r2, r3, #4
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800093c:	2303      	movs	r3, #3
 800093e:	e03d      	b.n	80009bc <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	2b02      	cmp	r3, #2
 800094c:	d1dd      	bne.n	800090a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f06f 0212 	mvn.w	r2, #18
 8000956:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d123      	bne.n	80009ba <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000976:	2b00      	cmp	r3, #0
 8000978:	d11f      	bne.n	80009ba <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000980:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000984:	2b00      	cmp	r3, #0
 8000986:	d006      	beq.n	8000996 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000992:	2b00      	cmp	r3, #0
 8000994:	d111      	bne.n	80009ba <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d105      	bne.n	80009ba <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f043 0201 	orr.w	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	2b02      	cmp	r3, #2
 80009e0:	bf0c      	ite	eq
 80009e2:	2301      	moveq	r3, #1
 80009e4:	2300      	movne	r3, #0
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 0320 	and.w	r3, r3, #32
 80009f4:	2b20      	cmp	r3, #32
 80009f6:	bf0c      	ite	eq
 80009f8:	2301      	moveq	r3, #1
 80009fa:	2300      	movne	r3, #0
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d049      	beq.n	8000a9a <HAL_ADC_IRQHandler+0xd6>
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d046      	beq.n	8000a9a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	f003 0310 	and.w	r3, r3, #16
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d105      	bne.n	8000a24 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d12b      	bne.n	8000a8a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d127      	bne.n	8000a8a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a40:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d006      	beq.n	8000a56 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d119      	bne.n	8000a8a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f022 0220 	bic.w	r2, r2, #32
 8000a64:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d105      	bne.n	8000a8a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f043 0201 	orr.w	r2, r3, #1
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f8e8 	bl	8000c60 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f06f 0212 	mvn.w	r2, #18
 8000a98:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	2b04      	cmp	r3, #4
 8000aa6:	bf0c      	ite	eq
 8000aa8:	2301      	moveq	r3, #1
 8000aaa:	2300      	movne	r3, #0
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	2b80      	cmp	r3, #128	; 0x80
 8000abc:	bf0c      	ite	eq
 8000abe:	2301      	moveq	r3, #1
 8000ac0:	2300      	movne	r3, #0
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d057      	beq.n	8000b7c <HAL_ADC_IRQHandler+0x1b8>
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d054      	beq.n	8000b7c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f003 0310 	and.w	r3, r3, #16
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d105      	bne.n	8000aea <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d139      	bne.n	8000b6c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000afe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d006      	beq.n	8000b14 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d12b      	bne.n	8000b6c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d124      	bne.n	8000b6c <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d11d      	bne.n	8000b6c <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d119      	bne.n	8000b6c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d105      	bne.n	8000b6c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f043 0201 	orr.w	r2, r3, #1
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 fab3 	bl	80010d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f06f 020c 	mvn.w	r2, #12
 8000b7a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	bf0c      	ite	eq
 8000b8a:	2301      	moveq	r3, #1
 8000b8c:	2300      	movne	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9c:	2b40      	cmp	r3, #64	; 0x40
 8000b9e:	bf0c      	ite	eq
 8000ba0:	2301      	moveq	r3, #1
 8000ba2:	2300      	movne	r3, #0
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d017      	beq.n	8000bde <HAL_ADC_IRQHandler+0x21a>
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d014      	beq.n	8000bde <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d10d      	bne.n	8000bde <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f850 	bl	8000c74 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f06f 0201 	mvn.w	r2, #1
 8000bdc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 0320 	and.w	r3, r3, #32
 8000be8:	2b20      	cmp	r3, #32
 8000bea:	bf0c      	ite	eq
 8000bec:	2301      	moveq	r3, #1
 8000bee:	2300      	movne	r3, #0
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000c02:	bf0c      	ite	eq
 8000c04:	2301      	moveq	r3, #1
 8000c06:	2300      	movne	r3, #0
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d015      	beq.n	8000c3e <HAL_ADC_IRQHandler+0x27a>
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d012      	beq.n	8000c3e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1c:	f043 0202 	orr.w	r2, r3, #2
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f06f 0220 	mvn.w	r2, #32
 8000c2c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f000 f82a 	bl	8000c88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f06f 0220 	mvn.w	r2, #32
 8000c3c:	601a      	str	r2, [r3, #0]
  }
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d101      	bne.n	8000cb8 <HAL_ADC_ConfigChannel+0x1c>
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	e105      	b.n	8000ec4 <HAL_ADC_ConfigChannel+0x228>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b09      	cmp	r3, #9
 8000cc6:	d925      	bls.n	8000d14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68d9      	ldr	r1, [r3, #12]
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	3b1e      	subs	r3, #30
 8000cde:	2207      	movs	r2, #7
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43da      	mvns	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	400a      	ands	r2, r1
 8000cec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68d9      	ldr	r1, [r3, #12]
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	4603      	mov	r3, r0
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4403      	add	r3, r0
 8000d06:	3b1e      	subs	r3, #30
 8000d08:	409a      	lsls	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	e022      	b.n	8000d5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	6919      	ldr	r1, [r3, #16]
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	461a      	mov	r2, r3
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	2207      	movs	r2, #7
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	400a      	ands	r2, r1
 8000d36:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6919      	ldr	r1, [r3, #16]
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4403      	add	r3, r0
 8000d50:	409a      	lsls	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d824      	bhi.n	8000dac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	3b05      	subs	r3, #5
 8000d74:	221f      	movs	r2, #31
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	400a      	ands	r2, r1
 8000d82:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4618      	mov	r0, r3
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	3b05      	subs	r3, #5
 8000d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	635a      	str	r2, [r3, #52]	; 0x34
 8000daa:	e04c      	b.n	8000e46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b0c      	cmp	r3, #12
 8000db2:	d824      	bhi.n	8000dfe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	3b23      	subs	r3, #35	; 0x23
 8000dc6:	221f      	movs	r2, #31
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43da      	mvns	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	3b23      	subs	r3, #35	; 0x23
 8000df0:	fa00 f203 	lsl.w	r2, r0, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8000dfc:	e023      	b.n	8000e46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	3b41      	subs	r3, #65	; 0x41
 8000e10:	221f      	movs	r2, #31
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	3b41      	subs	r3, #65	; 0x41
 8000e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	430a      	orrs	r2, r1
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e46:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <HAL_ADC_ConfigChannel+0x234>)
 8000e48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <HAL_ADC_ConfigChannel+0x238>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d109      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x1cc>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b12      	cmp	r3, #18
 8000e5a:	d105      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <HAL_ADC_ConfigChannel+0x238>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d123      	bne.n	8000eba <HAL_ADC_ConfigChannel+0x21e>
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b10      	cmp	r3, #16
 8000e78:	d003      	beq.n	8000e82 <HAL_ADC_ConfigChannel+0x1e6>
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b11      	cmp	r3, #17
 8000e80:	d11b      	bne.n	8000eba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b10      	cmp	r3, #16
 8000e94:	d111      	bne.n	8000eba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <HAL_ADC_ConfigChannel+0x23c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a10      	ldr	r2, [pc, #64]	; (8000edc <HAL_ADC_ConfigChannel+0x240>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	0c9a      	lsrs	r2, r3, #18
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000eac:	e002      	b.n	8000eb4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f9      	bne.n	8000eae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	40012300 	.word	0x40012300
 8000ed4:	40012000 	.word	0x40012000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	431bde83 	.word	0x431bde83

08000ee0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ee8:	4b79      	ldr	r3, [pc, #484]	; (80010d0 <ADC_Init+0x1f0>)
 8000eea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	431a      	orrs	r2, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6859      	ldr	r1, [r3, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	021a      	lsls	r2, r3, #8
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000f38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6859      	ldr	r1, [r3, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6899      	ldr	r1, [r3, #8]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f72:	4a58      	ldr	r2, [pc, #352]	; (80010d4 <ADC_Init+0x1f4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d022      	beq.n	8000fbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6899      	ldr	r1, [r3, #8]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6899      	ldr	r1, [r3, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	e00f      	b.n	8000fde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 0202 	bic.w	r2, r2, #2
 8000fec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6899      	ldr	r1, [r3, #8]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7e1b      	ldrb	r3, [r3, #24]
 8000ff8:	005a      	lsls	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	430a      	orrs	r2, r1
 8001000:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d01b      	beq.n	8001044 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800101a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800102a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6859      	ldr	r1, [r3, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	3b01      	subs	r3, #1
 8001038:	035a      	lsls	r2, r3, #13
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	e007      	b.n	8001054 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001052:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	3b01      	subs	r3, #1
 8001070:	051a      	lsls	r2, r3, #20
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	430a      	orrs	r2, r1
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6899      	ldr	r1, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001096:	025a      	lsls	r2, r3, #9
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	430a      	orrs	r2, r1
 800109e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6899      	ldr	r1, [r3, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	029a      	lsls	r2, r3, #10
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	609a      	str	r2, [r3, #8]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	40012300 	.word	0x40012300
 80010d4:	0f000001 	.word	0x0f000001

080010d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e0ed      	b.n	80012da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f006 fc54 	bl	80079b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0202 	bic.w	r2, r2, #2
 800111e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001120:	f7ff fa94 	bl	800064c <HAL_GetTick>
 8001124:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001126:	e012      	b.n	800114e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001128:	f7ff fa90 	bl	800064c <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b0a      	cmp	r3, #10
 8001134:	d90b      	bls.n	800114e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2205      	movs	r2, #5
 8001146:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e0c5      	b.n	80012da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1e5      	bne.n	8001128 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0201 	orr.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800116c:	f7ff fa6e 	bl	800064c <HAL_GetTick>
 8001170:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001172:	e012      	b.n	800119a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001174:	f7ff fa6a 	bl	800064c <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b0a      	cmp	r3, #10
 8001180:	d90b      	bls.n	800119a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2205      	movs	r2, #5
 8001192:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e09f      	b.n	80012da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0e5      	beq.n	8001174 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7e1b      	ldrb	r3, [r3, #24]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d108      	bne.n	80011c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e007      	b.n	80011d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7e5b      	ldrb	r3, [r3, #25]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d108      	bne.n	80011ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	e007      	b.n	80011fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7e9b      	ldrb	r3, [r3, #26]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d108      	bne.n	8001216 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 0220 	orr.w	r2, r2, #32
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	e007      	b.n	8001226 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0220 	bic.w	r2, r2, #32
 8001224:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7edb      	ldrb	r3, [r3, #27]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d108      	bne.n	8001240 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0210 	bic.w	r2, r2, #16
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	e007      	b.n	8001250 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0210 	orr.w	r2, r2, #16
 800124e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7f1b      	ldrb	r3, [r3, #28]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d108      	bne.n	800126a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0208 	orr.w	r2, r2, #8
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	e007      	b.n	800127a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0208 	bic.w	r2, r2, #8
 8001278:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7f5b      	ldrb	r3, [r3, #29]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d108      	bne.n	8001294 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 0204 	orr.w	r2, r2, #4
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e007      	b.n	80012a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0204 	bic.w	r2, r2, #4
 80012a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	ea42 0103 	orr.w	r1, r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	1e5a      	subs	r2, r3, #1
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800130c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001316:	4a04      	ldr	r2, [pc, #16]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60d3      	str	r3, [r2, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <__NVIC_GetPriorityGrouping+0x18>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 0307 	and.w	r3, r3, #7
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	db0b      	blt.n	8001372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	f003 021f 	and.w	r2, r3, #31
 8001360:	4907      	ldr	r1, [pc, #28]	; (8001380 <__NVIC_EnableIRQ+0x38>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	2001      	movs	r0, #1
 800136a:	fa00 f202 	lsl.w	r2, r0, r2
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	; (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001450:	d301      	bcc.n	8001456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001452:	2301      	movs	r3, #1
 8001454:	e00f      	b.n	8001476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <SysTick_Config+0x40>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145e:	210f      	movs	r1, #15
 8001460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001464:	f7ff ff8e 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <SysTick_Config+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <SysTick_Config+0x40>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff29 	bl	80012e4 <__NVIC_SetPriorityGrouping>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff3e 	bl	800132c <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff8e 	bl	80013d8 <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5d 	bl	8001384 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff31 	bl	8001348 <__NVIC_EnableIRQ>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffa2 	bl	8001440 <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d004      	beq.n	8001524 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2280      	movs	r2, #128	; 0x80
 800151e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e00c      	b.n	800153e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2205      	movs	r2, #5
 8001528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0201 	bic.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	e16b      	b.n	8001840 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	429a      	cmp	r2, r3
 8001582:	f040 815a 	bne.w	800183a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d00b      	beq.n	80015a6 <HAL_GPIO_Init+0x5a>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800159a:	2b11      	cmp	r3, #17
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b12      	cmp	r3, #18
 80015a4:	d130      	bne.n	8001608 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	2203      	movs	r2, #3
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015dc:	2201      	movs	r2, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	f003 0201 	and.w	r2, r3, #1
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0xfc>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b12      	cmp	r3, #18
 8001646:	d123      	bne.n	8001690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	69b9      	ldr	r1, [r7, #24]
 800168c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0203 	and.w	r2, r3, #3
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80b4 	beq.w	800183a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b5f      	ldr	r3, [pc, #380]	; (8001854 <HAL_GPIO_Init+0x308>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a5e      	ldr	r2, [pc, #376]	; (8001854 <HAL_GPIO_Init+0x308>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b5c      	ldr	r3, [pc, #368]	; (8001854 <HAL_GPIO_Init+0x308>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ee:	4a5a      	ldr	r2, [pc, #360]	; (8001858 <HAL_GPIO_Init+0x30c>)
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	220f      	movs	r2, #15
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a51      	ldr	r2, [pc, #324]	; (800185c <HAL_GPIO_Init+0x310>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d02b      	beq.n	8001772 <HAL_GPIO_Init+0x226>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a50      	ldr	r2, [pc, #320]	; (8001860 <HAL_GPIO_Init+0x314>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d025      	beq.n	800176e <HAL_GPIO_Init+0x222>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4f      	ldr	r2, [pc, #316]	; (8001864 <HAL_GPIO_Init+0x318>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d01f      	beq.n	800176a <HAL_GPIO_Init+0x21e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4e      	ldr	r2, [pc, #312]	; (8001868 <HAL_GPIO_Init+0x31c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d019      	beq.n	8001766 <HAL_GPIO_Init+0x21a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4d      	ldr	r2, [pc, #308]	; (800186c <HAL_GPIO_Init+0x320>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0x216>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4c      	ldr	r2, [pc, #304]	; (8001870 <HAL_GPIO_Init+0x324>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_GPIO_Init+0x212>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4b      	ldr	r2, [pc, #300]	; (8001874 <HAL_GPIO_Init+0x328>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x20e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4a      	ldr	r2, [pc, #296]	; (8001878 <HAL_GPIO_Init+0x32c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_GPIO_Init+0x20a>
 8001752:	2307      	movs	r3, #7
 8001754:	e00e      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001756:	2308      	movs	r3, #8
 8001758:	e00c      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800175a:	2306      	movs	r3, #6
 800175c:	e00a      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800175e:	2305      	movs	r3, #5
 8001760:	e008      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001762:	2304      	movs	r3, #4
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001766:	2303      	movs	r3, #3
 8001768:	e004      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800176a:	2302      	movs	r3, #2
 800176c:	e002      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001772:	2300      	movs	r3, #0
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	f002 0203 	and.w	r2, r2, #3
 800177a:	0092      	lsls	r2, r2, #2
 800177c:	4093      	lsls	r3, r2
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001784:	4934      	ldr	r1, [pc, #208]	; (8001858 <HAL_GPIO_Init+0x30c>)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	089b      	lsrs	r3, r3, #2
 800178a:	3302      	adds	r3, #2
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001792:	4b3a      	ldr	r3, [pc, #232]	; (800187c <HAL_GPIO_Init+0x330>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017b6:	4a31      	ldr	r2, [pc, #196]	; (800187c <HAL_GPIO_Init+0x330>)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017bc:	4b2f      	ldr	r3, [pc, #188]	; (800187c <HAL_GPIO_Init+0x330>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e0:	4a26      	ldr	r2, [pc, #152]	; (800187c <HAL_GPIO_Init+0x330>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017e6:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_GPIO_Init+0x330>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800180a:	4a1c      	ldr	r2, [pc, #112]	; (800187c <HAL_GPIO_Init+0x330>)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_GPIO_Init+0x330>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001834:	4a11      	ldr	r2, [pc, #68]	; (800187c <HAL_GPIO_Init+0x330>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3301      	adds	r3, #1
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	2b0f      	cmp	r3, #15
 8001844:	f67f ae90 	bls.w	8001568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001848:	bf00      	nop
 800184a:	3724      	adds	r7, #36	; 0x24
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40023800 	.word	0x40023800
 8001858:	40013800 	.word	0x40013800
 800185c:	40020000 	.word	0x40020000
 8001860:	40020400 	.word	0x40020400
 8001864:	40020800 	.word	0x40020800
 8001868:	40020c00 	.word	0x40020c00
 800186c:	40021000 	.word	0x40021000
 8001870:	40021400 	.word	0x40021400
 8001874:	40021800 	.word	0x40021800
 8001878:	40021c00 	.word	0x40021c00
 800187c:	40013c00 	.word	0x40013c00

08001880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]
 800188c:	4613      	mov	r3, r2
 800188e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001890:	787b      	ldrb	r3, [r7, #1]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001896:	887a      	ldrh	r2, [r7, #2]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800189c:	e003      	b.n	80018a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	041a      	lsls	r2, r3, #16
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	619a      	str	r2, [r3, #24]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	887b      	ldrh	r3, [r7, #2]
 80018c4:	401a      	ands	r2, r3
 80018c6:	887b      	ldrh	r3, [r7, #2]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d104      	bne.n	80018d6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80018cc:	887b      	ldrh	r3, [r7, #2]
 80018ce:	041a      	lsls	r2, r3, #16
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80018d4:	e002      	b.n	80018dc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80018d6:	887a      	ldrh	r2, [r7, #2]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	619a      	str	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018f4:	695a      	ldr	r2, [r3, #20]
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	4618      	mov	r0, r3
 8001908:	f005 ff50 	bl	80077ac <HAL_GPIO_EXTI_Callback>
  }
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40013c00 	.word	0x40013c00

08001918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e11f      	b.n	8001b6a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d106      	bne.n	8001944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f006 f882 	bl	8007a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2224      	movs	r2, #36	; 0x24
 8001948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0201 	bic.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800196a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800197a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800197c:	f001 fc84 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8001980:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4a7b      	ldr	r2, [pc, #492]	; (8001b74 <HAL_I2C_Init+0x25c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d807      	bhi.n	800199c <HAL_I2C_Init+0x84>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4a7a      	ldr	r2, [pc, #488]	; (8001b78 <HAL_I2C_Init+0x260>)
 8001990:	4293      	cmp	r3, r2
 8001992:	bf94      	ite	ls
 8001994:	2301      	movls	r3, #1
 8001996:	2300      	movhi	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	e006      	b.n	80019aa <HAL_I2C_Init+0x92>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4a77      	ldr	r2, [pc, #476]	; (8001b7c <HAL_I2C_Init+0x264>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	bf94      	ite	ls
 80019a4:	2301      	movls	r3, #1
 80019a6:	2300      	movhi	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e0db      	b.n	8001b6a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4a72      	ldr	r2, [pc, #456]	; (8001b80 <HAL_I2C_Init+0x268>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	0c9b      	lsrs	r3, r3, #18
 80019bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4a64      	ldr	r2, [pc, #400]	; (8001b74 <HAL_I2C_Init+0x25c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d802      	bhi.n	80019ec <HAL_I2C_Init+0xd4>
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	3301      	adds	r3, #1
 80019ea:	e009      	b.n	8001a00 <HAL_I2C_Init+0xe8>
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	4a63      	ldr	r2, [pc, #396]	; (8001b84 <HAL_I2C_Init+0x26c>)
 80019f8:	fba2 2303 	umull	r2, r3, r2, r3
 80019fc:	099b      	lsrs	r3, r3, #6
 80019fe:	3301      	adds	r3, #1
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	430b      	orrs	r3, r1
 8001a06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4956      	ldr	r1, [pc, #344]	; (8001b74 <HAL_I2C_Init+0x25c>)
 8001a1c:	428b      	cmp	r3, r1
 8001a1e:	d80d      	bhi.n	8001a3c <HAL_I2C_Init+0x124>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1e59      	subs	r1, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a2e:	3301      	adds	r3, #1
 8001a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	bf38      	it	cc
 8001a38:	2304      	movcc	r3, #4
 8001a3a:	e04f      	b.n	8001adc <HAL_I2C_Init+0x1c4>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d111      	bne.n	8001a68 <HAL_I2C_Init+0x150>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1e58      	subs	r0, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6859      	ldr	r1, [r3, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	440b      	add	r3, r1
 8001a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a56:	3301      	adds	r3, #1
 8001a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf0c      	ite	eq
 8001a60:	2301      	moveq	r3, #1
 8001a62:	2300      	movne	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	e012      	b.n	8001a8e <HAL_I2C_Init+0x176>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1e58      	subs	r0, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6859      	ldr	r1, [r3, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	0099      	lsls	r1, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	bf0c      	ite	eq
 8001a88:	2301      	moveq	r3, #1
 8001a8a:	2300      	movne	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_I2C_Init+0x17e>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e022      	b.n	8001adc <HAL_I2C_Init+0x1c4>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10e      	bne.n	8001abc <HAL_I2C_Init+0x1a4>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1e58      	subs	r0, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6859      	ldr	r1, [r3, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	440b      	add	r3, r1
 8001aac:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aba:	e00f      	b.n	8001adc <HAL_I2C_Init+0x1c4>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1e58      	subs	r0, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6859      	ldr	r1, [r3, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	0099      	lsls	r1, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	6809      	ldr	r1, [r1, #0]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69da      	ldr	r2, [r3, #28]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6911      	ldr	r1, [r2, #16]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68d2      	ldr	r2, [r2, #12]
 8001b16:	4311      	orrs	r1, r2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2220      	movs	r2, #32
 8001b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	000186a0 	.word	0x000186a0
 8001b78:	001e847f 	.word	0x001e847f
 8001b7c:	003d08ff 	.word	0x003d08ff
 8001b80:	431bde83 	.word	0x431bde83
 8001b84:	10624dd3 	.word	0x10624dd3

08001b88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	461a      	mov	r2, r3
 8001b94:	460b      	mov	r3, r1
 8001b96:	817b      	strh	r3, [r7, #10]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b9c:	f7fe fd56 	bl	800064c <HAL_GetTick>
 8001ba0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	f040 80e0 	bne.w	8001d70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2319      	movs	r3, #25
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4970      	ldr	r1, [pc, #448]	; (8001d7c <HAL_I2C_Master_Transmit+0x1f4>)
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 fc56 	bl	800246c <I2C_WaitOnFlagUntilTimeout>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e0d3      	b.n	8001d72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_I2C_Master_Transmit+0x50>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e0cc      	b.n	8001d72 <HAL_I2C_Master_Transmit+0x1ea>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d007      	beq.n	8001bfe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2221      	movs	r2, #33	; 0x21
 8001c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2210      	movs	r2, #16
 8001c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	893a      	ldrh	r2, [r7, #8]
 8001c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4a50      	ldr	r2, [pc, #320]	; (8001d80 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c40:	8979      	ldrh	r1, [r7, #10]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	6a3a      	ldr	r2, [r7, #32]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fac2 	bl	80021d0 <I2C_MasterRequestWrite>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e08d      	b.n	8001d72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c6c:	e066      	b.n	8001d3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	6a39      	ldr	r1, [r7, #32]
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 fcd0 	bl	8002618 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00d      	beq.n	8001c9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d107      	bne.n	8001c96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e06b      	b.n	8001d72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d11b      	bne.n	8001d10 <HAL_I2C_Master_Transmit+0x188>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d017      	beq.n	8001d10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	781a      	ldrb	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	6a39      	ldr	r1, [r7, #32]
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 fcc0 	bl	800269a <I2C_WaitOnBTFFlagUntilTimeout>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00d      	beq.n	8001d3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d107      	bne.n	8001d38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e01a      	b.n	8001d72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d194      	bne.n	8001c6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e000      	b.n	8001d72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d70:	2302      	movs	r3, #2
  }
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	00100002 	.word	0x00100002
 8001d80:	ffff0000 	.word	0xffff0000

08001d84 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08c      	sub	sp, #48	; 0x30
 8001d88:	af02      	add	r7, sp, #8
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	460b      	mov	r3, r1
 8001d92:	817b      	strh	r3, [r7, #10]
 8001d94:	4613      	mov	r3, r2
 8001d96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d98:	f7fe fc58 	bl	800064c <HAL_GetTick>
 8001d9c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b20      	cmp	r3, #32
 8001da8:	f040 820b 	bne.w	80021c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2319      	movs	r3, #25
 8001db2:	2201      	movs	r2, #1
 8001db4:	497c      	ldr	r1, [pc, #496]	; (8001fa8 <HAL_I2C_Master_Receive+0x224>)
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 fb58 	bl	800246c <I2C_WaitOnFlagUntilTimeout>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e1fe      	b.n	80021c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_I2C_Master_Receive+0x50>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e1f7      	b.n	80021c4 <HAL_I2C_Master_Receive+0x440>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d007      	beq.n	8001dfa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2222      	movs	r2, #34	; 0x22
 8001e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2210      	movs	r2, #16
 8001e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	893a      	ldrh	r2, [r7, #8]
 8001e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4a5c      	ldr	r2, [pc, #368]	; (8001fac <HAL_I2C_Master_Receive+0x228>)
 8001e3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e3c:	8979      	ldrh	r1, [r7, #10]
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 fa46 	bl	80022d4 <I2C_MasterRequestRead>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e1b8      	b.n	80021c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d113      	bne.n	8001e82 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	623b      	str	r3, [r7, #32]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	623b      	str	r3, [r7, #32]
 8001e6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e18c      	b.n	800219c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d11b      	bne.n	8001ec2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	e16c      	b.n	800219c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d11b      	bne.n	8001f02 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ee8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	e14c      	b.n	800219c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f28:	e138      	b.n	800219c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	f200 80f1 	bhi.w	8002116 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d123      	bne.n	8001f84 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 fbeb 	bl	800271c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e139      	b.n	80021c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f82:	e10b      	b.n	800219c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d14e      	bne.n	800202a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f92:	2200      	movs	r2, #0
 8001f94:	4906      	ldr	r1, [pc, #24]	; (8001fb0 <HAL_I2C_Master_Receive+0x22c>)
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 fa68 	bl	800246c <I2C_WaitOnFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d008      	beq.n	8001fb4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e10e      	b.n	80021c4 <HAL_I2C_Master_Receive+0x440>
 8001fa6:	bf00      	nop
 8001fa8:	00100002 	.word	0x00100002
 8001fac:	ffff0000 	.word	0xffff0000
 8001fb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002028:	e0b8      	b.n	800219c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002030:	2200      	movs	r2, #0
 8002032:	4966      	ldr	r1, [pc, #408]	; (80021cc <HAL_I2C_Master_Receive+0x448>)
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 fa19 	bl	800246c <I2C_WaitOnFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0bf      	b.n	80021c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002052:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29b      	uxth	r3, r3
 800207e:	3b01      	subs	r3, #1
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208c:	2200      	movs	r2, #0
 800208e:	494f      	ldr	r1, [pc, #316]	; (80021cc <HAL_I2C_Master_Receive+0x448>)
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f9eb 	bl	800246c <I2C_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e091      	b.n	80021c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002114:	e042      	b.n	800219c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 fafe 	bl	800271c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e04c      	b.n	80021c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b04      	cmp	r3, #4
 8002168:	d118      	bne.n	800219c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f47f aec2 	bne.w	8001f2a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2220      	movs	r2, #32
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e000      	b.n	80021c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
  }
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3728      	adds	r7, #40	; 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	00010004 	.word	0x00010004

080021d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	460b      	mov	r3, r1
 80021de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d006      	beq.n	80021fa <I2C_MasterRequestWrite+0x2a>
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d003      	beq.n	80021fa <I2C_MasterRequestWrite+0x2a>
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021f8:	d108      	bne.n	800220c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	e00b      	b.n	8002224 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	2b12      	cmp	r3, #18
 8002212:	d107      	bne.n	8002224 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002222:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f91b 	bl	800246c <I2C_WaitOnFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00c      	beq.n	8002256 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002250:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e035      	b.n	80022c2 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800225e:	d108      	bne.n	8002272 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002260:	897b      	ldrh	r3, [r7, #10]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800226e:	611a      	str	r2, [r3, #16]
 8002270:	e01b      	b.n	80022aa <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002272:	897b      	ldrh	r3, [r7, #10]
 8002274:	11db      	asrs	r3, r3, #7
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f003 0306 	and.w	r3, r3, #6
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f063 030f 	orn	r3, r3, #15
 8002282:	b2da      	uxtb	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	490f      	ldr	r1, [pc, #60]	; (80022cc <I2C_MasterRequestWrite+0xfc>)
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f942 	bl	800251a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e010      	b.n	80022c2 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022a0:	897b      	ldrh	r3, [r7, #10]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4908      	ldr	r1, [pc, #32]	; (80022d0 <I2C_MasterRequestWrite+0x100>)
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f932 	bl	800251a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	00010008 	.word	0x00010008
 80022d0:	00010002 	.word	0x00010002

080022d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	460b      	mov	r3, r1
 80022e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d006      	beq.n	800230e <I2C_MasterRequestRead+0x3a>
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d003      	beq.n	800230e <I2C_MasterRequestRead+0x3a>
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800230c:	d108      	bne.n	8002320 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e00b      	b.n	8002338 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	2b11      	cmp	r3, #17
 8002326:	d107      	bne.n	8002338 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002336:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f891 	bl	800246c <I2C_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00c      	beq.n	800236a <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e078      	b.n	800245c <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002372:	d108      	bne.n	8002386 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002374:	897b      	ldrh	r3, [r7, #10]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	b2da      	uxtb	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	611a      	str	r2, [r3, #16]
 8002384:	e05e      	b.n	8002444 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002386:	897b      	ldrh	r3, [r7, #10]
 8002388:	11db      	asrs	r3, r3, #7
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f003 0306 	and.w	r3, r3, #6
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f063 030f 	orn	r3, r3, #15
 8002396:	b2da      	uxtb	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	4930      	ldr	r1, [pc, #192]	; (8002464 <I2C_MasterRequestRead+0x190>)
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f8b8 	bl	800251a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e053      	b.n	800245c <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023b4:	897b      	ldrh	r3, [r7, #10]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4929      	ldr	r1, [pc, #164]	; (8002468 <I2C_MasterRequestRead+0x194>)
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f8a8 	bl	800251a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e043      	b.n	800245c <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d4:	2300      	movs	r3, #0
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023f8:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f830 	bl	800246c <I2C_WaitOnFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00c      	beq.n	800242c <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002426:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e017      	b.n	800245c <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800242c:	897b      	ldrh	r3, [r7, #10]
 800242e:	11db      	asrs	r3, r3, #7
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f003 0306 	and.w	r3, r3, #6
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f063 030e 	orn	r3, r3, #14
 800243c:	b2da      	uxtb	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4907      	ldr	r1, [pc, #28]	; (8002468 <I2C_MasterRequestRead+0x194>)
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f865 	bl	800251a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	00010008 	.word	0x00010008
 8002468:	00010002 	.word	0x00010002

0800246c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800247c:	e025      	b.n	80024ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002484:	d021      	beq.n	80024ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002486:	f7fe f8e1 	bl	800064c <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d302      	bcc.n	800249c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d116      	bne.n	80024ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f043 0220 	orr.w	r2, r3, #32
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e023      	b.n	8002512 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	0c1b      	lsrs	r3, r3, #16
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d10d      	bne.n	80024f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	43da      	mvns	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4013      	ands	r3, r2
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bf0c      	ite	eq
 80024e6:	2301      	moveq	r3, #1
 80024e8:	2300      	movne	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	461a      	mov	r2, r3
 80024ee:	e00c      	b.n	800250a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	43da      	mvns	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4013      	ands	r3, r2
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	bf0c      	ite	eq
 8002502:	2301      	moveq	r3, #1
 8002504:	2300      	movne	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	429a      	cmp	r2, r3
 800250e:	d0b6      	beq.n	800247e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002528:	e051      	b.n	80025ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002538:	d123      	bne.n	8002582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002548:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002552:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f043 0204 	orr.w	r2, r3, #4
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e046      	b.n	8002610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002588:	d021      	beq.n	80025ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258a:	f7fe f85f 	bl	800064c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	429a      	cmp	r2, r3
 8002598:	d302      	bcc.n	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d116      	bne.n	80025ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f043 0220 	orr.w	r2, r3, #32
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e020      	b.n	8002610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	0c1b      	lsrs	r3, r3, #16
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d10c      	bne.n	80025f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	43da      	mvns	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4013      	ands	r3, r2
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	bf14      	ite	ne
 80025ea:	2301      	movne	r3, #1
 80025ec:	2300      	moveq	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	e00b      	b.n	800260a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	43da      	mvns	r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	4013      	ands	r3, r2
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf14      	ite	ne
 8002604:	2301      	movne	r3, #1
 8002606:	2300      	moveq	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d18d      	bne.n	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002624:	e02d      	b.n	8002682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f8ce 	bl	80027c8 <I2C_IsAcknowledgeFailed>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e02d      	b.n	8002692 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800263c:	d021      	beq.n	8002682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800263e:	f7fe f805 	bl	800064c <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	429a      	cmp	r2, r3
 800264c:	d302      	bcc.n	8002654 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d116      	bne.n	8002682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f043 0220 	orr.w	r2, r3, #32
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e007      	b.n	8002692 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268c:	2b80      	cmp	r3, #128	; 0x80
 800268e:	d1ca      	bne.n	8002626 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026a6:	e02d      	b.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f88d 	bl	80027c8 <I2C_IsAcknowledgeFailed>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e02d      	b.n	8002714 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026be:	d021      	beq.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c0:	f7fd ffc4 	bl	800064c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d302      	bcc.n	80026d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d116      	bne.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f043 0220 	orr.w	r2, r3, #32
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e007      	b.n	8002714 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b04      	cmp	r3, #4
 8002710:	d1ca      	bne.n	80026a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002728:	e042      	b.n	80027b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b10      	cmp	r3, #16
 8002736:	d119      	bne.n	800276c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0210 	mvn.w	r2, #16
 8002740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e029      	b.n	80027c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276c:	f7fd ff6e 	bl	800064c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	429a      	cmp	r2, r3
 800277a:	d302      	bcc.n	8002782 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d116      	bne.n	80027b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e007      	b.n	80027c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ba:	2b40      	cmp	r3, #64	; 0x40
 80027bc:	d1b5      	bne.n	800272a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027de:	d11b      	bne.n	8002818 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f043 0204 	orr.w	r2, r3, #4
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002826:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002828:	b08f      	sub	sp, #60	; 0x3c
 800282a:	af0a      	add	r7, sp, #40	; 0x28
 800282c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e10f      	b.n	8002a58 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f005 fb80 	bl	8007f58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2203      	movs	r2, #3
 800285c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f003 fdff 	bl	800647a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	687e      	ldr	r6, [r7, #4]
 8002884:	466d      	mov	r5, sp
 8002886:	f106 0410 	add.w	r4, r6, #16
 800288a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800288c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800288e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002892:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002896:	e885 0003 	stmia.w	r5, {r0, r1}
 800289a:	1d33      	adds	r3, r6, #4
 800289c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800289e:	6838      	ldr	r0, [r7, #0]
 80028a0:	f003 fd8a 	bl	80063b8 <USB_CoreInit>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e0d0      	b.n	8002a58 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 fded 	bl	800649c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e04a      	b.n	800295e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	333d      	adds	r3, #61	; 0x3d
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	333c      	adds	r3, #60	; 0x3c
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	b298      	uxth	r0, r3
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	3342      	adds	r3, #66	; 0x42
 8002904:	4602      	mov	r2, r0
 8002906:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	333f      	adds	r3, #63	; 0x3f
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	3344      	adds	r3, #68	; 0x44
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002930:	7bfa      	ldrb	r2, [r7, #15]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	3348      	adds	r3, #72	; 0x48
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3350      	adds	r3, #80	; 0x50
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	3301      	adds	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	d3af      	bcc.n	80028c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]
 800296c:	e044      	b.n	80029f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029b0:	7bfa      	ldrb	r2, [r7, #15]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	3301      	adds	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d3b5      	bcc.n	800296e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	687e      	ldr	r6, [r7, #4]
 8002a0a:	466d      	mov	r5, sp
 8002a0c:	f106 0410 	add.w	r4, r6, #16
 8002a10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a20:	1d33      	adds	r3, r6, #4
 8002a22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a24:	6838      	ldr	r0, [r7, #0]
 8002a26:	f003 fd63 	bl	80064f0 <USB_DevInit>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e00d      	b.n	8002a58 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f003 ff20 	bl	8006896 <USB_DevDisconnect>

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e25b      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d075      	beq.n	8002b6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a7e:	4ba3      	ldr	r3, [pc, #652]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d00c      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a8a:	4ba0      	ldr	r3, [pc, #640]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d112      	bne.n	8002abc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a96:	4b9d      	ldr	r3, [pc, #628]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aa2:	d10b      	bne.n	8002abc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa4:	4b99      	ldr	r3, [pc, #612]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d05b      	beq.n	8002b68 <HAL_RCC_OscConfig+0x108>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d157      	bne.n	8002b68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e236      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac4:	d106      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x74>
 8002ac6:	4b91      	ldr	r3, [pc, #580]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a90      	ldr	r2, [pc, #576]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e01d      	b.n	8002b10 <HAL_RCC_OscConfig+0xb0>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x98>
 8002ade:	4b8b      	ldr	r3, [pc, #556]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a8a      	ldr	r2, [pc, #552]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b88      	ldr	r3, [pc, #544]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a87      	ldr	r2, [pc, #540]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0xb0>
 8002af8:	4b84      	ldr	r3, [pc, #528]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a83      	ldr	r2, [pc, #524]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	4b81      	ldr	r3, [pc, #516]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a80      	ldr	r2, [pc, #512]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d013      	beq.n	8002b40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fd fd98 	bl	800064c <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fd fd94 	bl	800064c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e1fb      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	4b76      	ldr	r3, [pc, #472]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0xc0>
 8002b3e:	e014      	b.n	8002b6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fd fd84 	bl	800064c <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fd fd80 	bl	800064c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	; 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e1e7      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5a:	4b6c      	ldr	r3, [pc, #432]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0xe8>
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d063      	beq.n	8002c3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b76:	4b65      	ldr	r3, [pc, #404]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b82:	4b62      	ldr	r3, [pc, #392]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d11c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8e:	4b5f      	ldr	r3, [pc, #380]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d116      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	4b5c      	ldr	r3, [pc, #368]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x152>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e1bb      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb2:	4b56      	ldr	r3, [pc, #344]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4952      	ldr	r1, [pc, #328]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc6:	e03a      	b.n	8002c3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d020      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd0:	4b4f      	ldr	r3, [pc, #316]	; (8002d10 <HAL_RCC_OscConfig+0x2b0>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fd fd39 	bl	800064c <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bde:	f7fd fd35 	bl	800064c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e19c      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf0:	4b46      	ldr	r3, [pc, #280]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfc:	4b43      	ldr	r3, [pc, #268]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4940      	ldr	r1, [pc, #256]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	600b      	str	r3, [r1, #0]
 8002c10:	e015      	b.n	8002c3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c12:	4b3f      	ldr	r3, [pc, #252]	; (8002d10 <HAL_RCC_OscConfig+0x2b0>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fd fd18 	bl	800064c <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c20:	f7fd fd14 	bl	800064c <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e17b      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c32:	4b36      	ldr	r3, [pc, #216]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d030      	beq.n	8002cac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d016      	beq.n	8002c80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c52:	4b30      	ldr	r3, [pc, #192]	; (8002d14 <HAL_RCC_OscConfig+0x2b4>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7fd fcf8 	bl	800064c <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c60:	f7fd fcf4 	bl	800064c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e15b      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c72:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x200>
 8002c7e:	e015      	b.n	8002cac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c80:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <HAL_RCC_OscConfig+0x2b4>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c86:	f7fd fce1 	bl	800064c <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8e:	f7fd fcdd 	bl	800064c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e144      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca0:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1f0      	bne.n	8002c8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80a0 	beq.w	8002dfa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cbe:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10f      	bne.n	8002cea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cda:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_RCC_OscConfig+0x2b8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d121      	bne.n	8002d3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf6:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_RCC_OscConfig+0x2b8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <HAL_RCC_OscConfig+0x2b8>)
 8002cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d02:	f7fd fca3 	bl	800064c <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	e011      	b.n	8002d2e <HAL_RCC_OscConfig+0x2ce>
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	42470000 	.word	0x42470000
 8002d14:	42470e80 	.word	0x42470e80
 8002d18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1c:	f7fd fc96 	bl	800064c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e0fd      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2e:	4b81      	ldr	r3, [pc, #516]	; (8002f34 <HAL_RCC_OscConfig+0x4d4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d106      	bne.n	8002d50 <HAL_RCC_OscConfig+0x2f0>
 8002d42:	4b7d      	ldr	r3, [pc, #500]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a7c      	ldr	r2, [pc, #496]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4e:	e01c      	b.n	8002d8a <HAL_RCC_OscConfig+0x32a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d10c      	bne.n	8002d72 <HAL_RCC_OscConfig+0x312>
 8002d58:	4b77      	ldr	r3, [pc, #476]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a76      	ldr	r2, [pc, #472]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70
 8002d64:	4b74      	ldr	r3, [pc, #464]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	4a73      	ldr	r2, [pc, #460]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d70:	e00b      	b.n	8002d8a <HAL_RCC_OscConfig+0x32a>
 8002d72:	4b71      	ldr	r3, [pc, #452]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	4a70      	ldr	r2, [pc, #448]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7e:	4b6e      	ldr	r3, [pc, #440]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	4a6d      	ldr	r2, [pc, #436]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002d84:	f023 0304 	bic.w	r3, r3, #4
 8002d88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d015      	beq.n	8002dbe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d92:	f7fd fc5b 	bl	800064c <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7fd fc57 	bl	800064c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0bc      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	4b61      	ldr	r3, [pc, #388]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0ee      	beq.n	8002d9a <HAL_RCC_OscConfig+0x33a>
 8002dbc:	e014      	b.n	8002de8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbe:	f7fd fc45 	bl	800064c <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc6:	f7fd fc41 	bl	800064c <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e0a6      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ddc:	4b56      	ldr	r3, [pc, #344]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ee      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d105      	bne.n	8002dfa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dee:	4b52      	ldr	r3, [pc, #328]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	4a51      	ldr	r2, [pc, #324]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8092 	beq.w	8002f28 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e04:	4b4c      	ldr	r3, [pc, #304]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d05c      	beq.n	8002eca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d141      	bne.n	8002e9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e18:	4b48      	ldr	r3, [pc, #288]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7fd fc15 	bl	800064c <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e26:	f7fd fc11 	bl	800064c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e078      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e38:	4b3f      	ldr	r3, [pc, #252]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f0      	bne.n	8002e26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69da      	ldr	r2, [r3, #28]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	019b      	lsls	r3, r3, #6
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	041b      	lsls	r3, r3, #16
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	061b      	lsls	r3, r3, #24
 8002e68:	4933      	ldr	r1, [pc, #204]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6e:	4b33      	ldr	r3, [pc, #204]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fd fbea 	bl	800064c <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7fd fbe6 	bl	800064c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e04d      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0x41c>
 8002e9a:	e045      	b.n	8002f28 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9c:	4b27      	ldr	r3, [pc, #156]	; (8002f3c <HAL_RCC_OscConfig+0x4dc>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7fd fbd3 	bl	800064c <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fd fbcf 	bl	800064c <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e036      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f0      	bne.n	8002eaa <HAL_RCC_OscConfig+0x44a>
 8002ec8:	e02e      	b.n	8002f28 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e029      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ed6:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <HAL_RCC_OscConfig+0x4d8>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d11c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d115      	bne.n	8002f24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002efe:	4013      	ands	r3, r2
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d10d      	bne.n	8002f24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d106      	bne.n	8002f24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d001      	beq.n	8002f28 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40007000 	.word	0x40007000
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	42470060 	.word	0x42470060

08002f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0cc      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b68      	ldr	r3, [pc, #416]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d90c      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b65      	ldr	r3, [pc, #404]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b63      	ldr	r3, [pc, #396]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b8      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f94:	4b59      	ldr	r3, [pc, #356]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a58      	ldr	r2, [pc, #352]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fac:	4b53      	ldr	r3, [pc, #332]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b50      	ldr	r3, [pc, #320]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	494d      	ldr	r1, [pc, #308]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d044      	beq.n	8003060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d119      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffe:	4b3f      	ldr	r3, [pc, #252]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e06f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e067      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301e:	4b37      	ldr	r3, [pc, #220]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f023 0203 	bic.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4934      	ldr	r1, [pc, #208]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	4313      	orrs	r3, r2
 800302e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003030:	f7fd fb0c 	bl	800064c <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fd fb08 	bl	800064c <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e04f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 020c 	and.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1eb      	bne.n	8003038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d20c      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e032      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4916      	ldr	r1, [pc, #88]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	490e      	ldr	r1, [pc, #56]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c6:	f000 f821 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80030ca:	4601      	mov	r1, r0
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	5cd3      	ldrb	r3, [r2, r3]
 80030da:	fa21 f303 	lsr.w	r3, r1, r3
 80030de:	4a09      	ldr	r2, [pc, #36]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd fa6c 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00
 80030fc:	40023800 	.word	0x40023800
 8003100:	08008be8 	.word	0x08008be8
 8003104:	20000008 	.word	0x20000008
 8003108:	20000000 	.word	0x20000000

0800310c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	2300      	movs	r3, #0
 800311c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003122:	4b50      	ldr	r3, [pc, #320]	; (8003264 <HAL_RCC_GetSysClockFreq+0x158>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b04      	cmp	r3, #4
 800312c:	d007      	beq.n	800313e <HAL_RCC_GetSysClockFreq+0x32>
 800312e:	2b08      	cmp	r3, #8
 8003130:	d008      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x38>
 8003132:	2b00      	cmp	r3, #0
 8003134:	f040 808d 	bne.w	8003252 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003138:	4b4b      	ldr	r3, [pc, #300]	; (8003268 <HAL_RCC_GetSysClockFreq+0x15c>)
 800313a:	60bb      	str	r3, [r7, #8]
       break;
 800313c:	e08c      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800313e:	4b4b      	ldr	r3, [pc, #300]	; (800326c <HAL_RCC_GetSysClockFreq+0x160>)
 8003140:	60bb      	str	r3, [r7, #8]
      break;
 8003142:	e089      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003144:	4b47      	ldr	r3, [pc, #284]	; (8003264 <HAL_RCC_GetSysClockFreq+0x158>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800314c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800314e:	4b45      	ldr	r3, [pc, #276]	; (8003264 <HAL_RCC_GetSysClockFreq+0x158>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d023      	beq.n	80031a2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315a:	4b42      	ldr	r3, [pc, #264]	; (8003264 <HAL_RCC_GetSysClockFreq+0x158>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	099b      	lsrs	r3, r3, #6
 8003160:	f04f 0400 	mov.w	r4, #0
 8003164:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	ea03 0501 	and.w	r5, r3, r1
 8003170:	ea04 0602 	and.w	r6, r4, r2
 8003174:	4a3d      	ldr	r2, [pc, #244]	; (800326c <HAL_RCC_GetSysClockFreq+0x160>)
 8003176:	fb02 f106 	mul.w	r1, r2, r6
 800317a:	2200      	movs	r2, #0
 800317c:	fb02 f205 	mul.w	r2, r2, r5
 8003180:	440a      	add	r2, r1
 8003182:	493a      	ldr	r1, [pc, #232]	; (800326c <HAL_RCC_GetSysClockFreq+0x160>)
 8003184:	fba5 0101 	umull	r0, r1, r5, r1
 8003188:	1853      	adds	r3, r2, r1
 800318a:	4619      	mov	r1, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f04f 0400 	mov.w	r4, #0
 8003192:	461a      	mov	r2, r3
 8003194:	4623      	mov	r3, r4
 8003196:	f7fd f873 	bl	8000280 <__aeabi_uldivmod>
 800319a:	4603      	mov	r3, r0
 800319c:	460c      	mov	r4, r1
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	e049      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a2:	4b30      	ldr	r3, [pc, #192]	; (8003264 <HAL_RCC_GetSysClockFreq+0x158>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	099b      	lsrs	r3, r3, #6
 80031a8:	f04f 0400 	mov.w	r4, #0
 80031ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	ea03 0501 	and.w	r5, r3, r1
 80031b8:	ea04 0602 	and.w	r6, r4, r2
 80031bc:	4629      	mov	r1, r5
 80031be:	4632      	mov	r2, r6
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	f04f 0400 	mov.w	r4, #0
 80031c8:	0154      	lsls	r4, r2, #5
 80031ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031ce:	014b      	lsls	r3, r1, #5
 80031d0:	4619      	mov	r1, r3
 80031d2:	4622      	mov	r2, r4
 80031d4:	1b49      	subs	r1, r1, r5
 80031d6:	eb62 0206 	sbc.w	r2, r2, r6
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	f04f 0400 	mov.w	r4, #0
 80031e2:	0194      	lsls	r4, r2, #6
 80031e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031e8:	018b      	lsls	r3, r1, #6
 80031ea:	1a5b      	subs	r3, r3, r1
 80031ec:	eb64 0402 	sbc.w	r4, r4, r2
 80031f0:	f04f 0100 	mov.w	r1, #0
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	00e2      	lsls	r2, r4, #3
 80031fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031fe:	00d9      	lsls	r1, r3, #3
 8003200:	460b      	mov	r3, r1
 8003202:	4614      	mov	r4, r2
 8003204:	195b      	adds	r3, r3, r5
 8003206:	eb44 0406 	adc.w	r4, r4, r6
 800320a:	f04f 0100 	mov.w	r1, #0
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	02a2      	lsls	r2, r4, #10
 8003214:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003218:	0299      	lsls	r1, r3, #10
 800321a:	460b      	mov	r3, r1
 800321c:	4614      	mov	r4, r2
 800321e:	4618      	mov	r0, r3
 8003220:	4621      	mov	r1, r4
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f04f 0400 	mov.w	r4, #0
 8003228:	461a      	mov	r2, r3
 800322a:	4623      	mov	r3, r4
 800322c:	f7fd f828 	bl	8000280 <__aeabi_uldivmod>
 8003230:	4603      	mov	r3, r0
 8003232:	460c      	mov	r4, r1
 8003234:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_RCC_GetSysClockFreq+0x158>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	0c1b      	lsrs	r3, r3, #16
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	3301      	adds	r3, #1
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	fbb2 f3f3 	udiv	r3, r2, r3
 800324e:	60bb      	str	r3, [r7, #8]
      break;
 8003250:	e002      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003254:	60bb      	str	r3, [r7, #8]
      break;
 8003256:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003258:	68bb      	ldr	r3, [r7, #8]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800
 8003268:	00f42400 	.word	0x00f42400
 800326c:	017d7840 	.word	0x017d7840

08003270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_RCC_GetHCLKFreq+0x14>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000008 	.word	0x20000008

08003288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800328c:	f7ff fff0 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 8003290:	4601      	mov	r1, r0
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	0a9b      	lsrs	r3, r3, #10
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	4a03      	ldr	r2, [pc, #12]	; (80032ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800329e:	5cd3      	ldrb	r3, [r2, r3]
 80032a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40023800 	.word	0x40023800
 80032ac:	08008bf8 	.word	0x08008bf8

080032b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032b4:	f7ff ffdc 	bl	8003270 <HAL_RCC_GetHCLKFreq>
 80032b8:	4601      	mov	r1, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	0b5b      	lsrs	r3, r3, #13
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4a03      	ldr	r2, [pc, #12]	; (80032d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c6:	5cd3      	ldrb	r3, [r2, r3]
 80032c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40023800 	.word	0x40023800
 80032d4:	08008bf8 	.word	0x08008bf8

080032d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e056      	b.n	8003398 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d106      	bne.n	800330a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f004 fc1b 	bl	8007b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003320:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	ea42 0103 	orr.w	r1, r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	0c1b      	lsrs	r3, r3, #16
 8003368:	f003 0104 	and.w	r1, r3, #4
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003386:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_SPI_Transmit+0x22>
 80033be:	2302      	movs	r3, #2
 80033c0:	e11e      	b.n	8003600 <HAL_SPI_Transmit+0x260>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033ca:	f7fd f93f 	bl	800064c <HAL_GetTick>
 80033ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d002      	beq.n	80033e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033e0:	2302      	movs	r3, #2
 80033e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033e4:	e103      	b.n	80035ee <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_SPI_Transmit+0x52>
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d102      	bne.n	80033f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033f6:	e0fa      	b.n	80035ee <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2203      	movs	r2, #3
 80033fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	88fa      	ldrh	r2, [r7, #6]
 8003410:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	88fa      	ldrh	r2, [r7, #6]
 8003416:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343e:	d107      	bne.n	8003450 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800344e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d007      	beq.n	800346e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800346c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003476:	d14b      	bne.n	8003510 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_SPI_Transmit+0xe6>
 8003480:	8afb      	ldrh	r3, [r7, #22]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d13e      	bne.n	8003504 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	881a      	ldrh	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	1c9a      	adds	r2, r3, #2
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034aa:	e02b      	b.n	8003504 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d112      	bne.n	80034e0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	881a      	ldrh	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	1c9a      	adds	r2, r3, #2
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80034de:	e011      	b.n	8003504 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034e0:	f7fd f8b4 	bl	800064c <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d803      	bhi.n	80034f8 <HAL_SPI_Transmit+0x158>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034f6:	d102      	bne.n	80034fe <HAL_SPI_Transmit+0x15e>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003502:	e074      	b.n	80035ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1ce      	bne.n	80034ac <HAL_SPI_Transmit+0x10c>
 800350e:	e04c      	b.n	80035aa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_SPI_Transmit+0x17e>
 8003518:	8afb      	ldrh	r3, [r7, #22]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d140      	bne.n	80035a0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	330c      	adds	r3, #12
 8003528:	7812      	ldrb	r2, [r2, #0]
 800352a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003544:	e02c      	b.n	80035a0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b02      	cmp	r3, #2
 8003552:	d113      	bne.n	800357c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	7812      	ldrb	r2, [r2, #0]
 8003560:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	86da      	strh	r2, [r3, #54]	; 0x36
 800357a:	e011      	b.n	80035a0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800357c:	f7fd f866 	bl	800064c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d803      	bhi.n	8003594 <HAL_SPI_Transmit+0x1f4>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003592:	d102      	bne.n	800359a <HAL_SPI_Transmit+0x1fa>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d102      	bne.n	80035a0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800359e:	e026      	b.n	80035ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1cd      	bne.n	8003546 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	6839      	ldr	r1, [r7, #0]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 fcc4 	bl	8003f3c <SPI_EndRxTxTransaction>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10a      	bne.n	80035de <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	77fb      	strb	r3, [r7, #31]
 80035ea:	e000      	b.n	80035ee <HAL_SPI_Transmit+0x24e>
  }

error:
 80035ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003624:	d112      	bne.n	800364c <HAL_SPI_Receive+0x44>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10e      	bne.n	800364c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2204      	movs	r2, #4
 8003632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003636:	88fa      	ldrh	r2, [r7, #6]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	4613      	mov	r3, r2
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f8e9 	bl	800381a <HAL_SPI_TransmitReceive>
 8003648:	4603      	mov	r3, r0
 800364a:	e0e2      	b.n	8003812 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_SPI_Receive+0x52>
 8003656:	2302      	movs	r3, #2
 8003658:	e0db      	b.n	8003812 <HAL_SPI_Receive+0x20a>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003662:	f7fc fff3 	bl	800064c <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	d002      	beq.n	800367a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003674:	2302      	movs	r3, #2
 8003676:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003678:	e0c2      	b.n	8003800 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HAL_SPI_Receive+0x7e>
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d102      	bne.n	800368c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
    goto error;
 800368a:	e0b9      	b.n	8003800 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2204      	movs	r2, #4
 8003690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	88fa      	ldrh	r2, [r7, #6]
 80036a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	88fa      	ldrh	r2, [r7, #6]
 80036aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d2:	d107      	bne.n	80036e4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036e2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	d007      	beq.n	8003702 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003700:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d162      	bne.n	80037d0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800370a:	e02e      	b.n	800376a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b01      	cmp	r3, #1
 8003718:	d115      	bne.n	8003746 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f103 020c 	add.w	r2, r3, #12
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	7812      	ldrb	r2, [r2, #0]
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003744:	e011      	b.n	800376a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003746:	f7fc ff81 	bl	800064c <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d803      	bhi.n	800375e <HAL_SPI_Receive+0x156>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800375c:	d102      	bne.n	8003764 <HAL_SPI_Receive+0x15c>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003768:	e04a      	b.n	8003800 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1cb      	bne.n	800370c <HAL_SPI_Receive+0x104>
 8003774:	e031      	b.n	80037da <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d113      	bne.n	80037ac <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	b292      	uxth	r2, r2
 8003790:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	1c9a      	adds	r2, r3, #2
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037aa:	e011      	b.n	80037d0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037ac:	f7fc ff4e 	bl	800064c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d803      	bhi.n	80037c4 <HAL_SPI_Receive+0x1bc>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037c2:	d102      	bne.n	80037ca <HAL_SPI_Receive+0x1c2>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d102      	bne.n	80037d0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80037ce:	e017      	b.n	8003800 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1cd      	bne.n	8003776 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	6839      	ldr	r1, [r7, #0]
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fb46 	bl	8003e70 <SPI_EndRxTransaction>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	75fb      	strb	r3, [r7, #23]
 80037fc:	e000      	b.n	8003800 <HAL_SPI_Receive+0x1f8>
  }

error :
 80037fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003810:	7dfb      	ldrb	r3, [r7, #23]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b08c      	sub	sp, #48	; 0x30
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003828:	2301      	movs	r3, #1
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x26>
 800383c:	2302      	movs	r3, #2
 800383e:	e18a      	b.n	8003b56 <HAL_SPI_TransmitReceive+0x33c>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003848:	f7fc ff00 	bl	800064c <HAL_GetTick>
 800384c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800385e:	887b      	ldrh	r3, [r7, #2]
 8003860:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003862:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003866:	2b01      	cmp	r3, #1
 8003868:	d00f      	beq.n	800388a <HAL_SPI_TransmitReceive+0x70>
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003870:	d107      	bne.n	8003882 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d103      	bne.n	8003882 <HAL_SPI_TransmitReceive+0x68>
 800387a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800387e:	2b04      	cmp	r3, #4
 8003880:	d003      	beq.n	800388a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003882:	2302      	movs	r3, #2
 8003884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003888:	e15b      	b.n	8003b42 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_SPI_TransmitReceive+0x82>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_SPI_TransmitReceive+0x82>
 8003896:	887b      	ldrh	r3, [r7, #2]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d103      	bne.n	80038a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038a2:	e14e      	b.n	8003b42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d003      	beq.n	80038b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2205      	movs	r2, #5
 80038b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	887a      	ldrh	r2, [r7, #2]
 80038c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	887a      	ldrh	r2, [r7, #2]
 80038ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	887a      	ldrh	r2, [r7, #2]
 80038da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	887a      	ldrh	r2, [r7, #2]
 80038e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d007      	beq.n	800390c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800390a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003914:	d178      	bne.n	8003a08 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_SPI_TransmitReceive+0x10a>
 800391e:	8b7b      	ldrh	r3, [r7, #26]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d166      	bne.n	80039f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	881a      	ldrh	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	1c9a      	adds	r2, r3, #2
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003948:	e053      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b02      	cmp	r3, #2
 8003956:	d11b      	bne.n	8003990 <HAL_SPI_TransmitReceive+0x176>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d016      	beq.n	8003990 <HAL_SPI_TransmitReceive+0x176>
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d113      	bne.n	8003990 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	881a      	ldrh	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	1c9a      	adds	r2, r3, #2
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b01      	cmp	r3, #1
 800399c:	d119      	bne.n	80039d2 <HAL_SPI_TransmitReceive+0x1b8>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d014      	beq.n	80039d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	b292      	uxth	r2, r2
 80039b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	1c9a      	adds	r2, r3, #2
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039ce:	2301      	movs	r3, #1
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039d2:	f7fc fe3b 	bl	800064c <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039de:	429a      	cmp	r2, r3
 80039e0:	d807      	bhi.n	80039f2 <HAL_SPI_TransmitReceive+0x1d8>
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e8:	d003      	beq.n	80039f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039f0:	e0a7      	b.n	8003b42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1a6      	bne.n	800394a <HAL_SPI_TransmitReceive+0x130>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1a1      	bne.n	800394a <HAL_SPI_TransmitReceive+0x130>
 8003a06:	e07c      	b.n	8003b02 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <HAL_SPI_TransmitReceive+0x1fc>
 8003a10:	8b7b      	ldrh	r3, [r7, #26]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d16b      	bne.n	8003aee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	330c      	adds	r3, #12
 8003a20:	7812      	ldrb	r2, [r2, #0]
 8003a22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a3c:	e057      	b.n	8003aee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d11c      	bne.n	8003a86 <HAL_SPI_TransmitReceive+0x26c>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d017      	beq.n	8003a86 <HAL_SPI_TransmitReceive+0x26c>
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d114      	bne.n	8003a86 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	7812      	ldrb	r2, [r2, #0]
 8003a68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d119      	bne.n	8003ac8 <HAL_SPI_TransmitReceive+0x2ae>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d014      	beq.n	8003ac8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ac8:	f7fc fdc0 	bl	800064c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d803      	bhi.n	8003ae0 <HAL_SPI_TransmitReceive+0x2c6>
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ade:	d102      	bne.n	8003ae6 <HAL_SPI_TransmitReceive+0x2cc>
 8003ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003aec:	e029      	b.n	8003b42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1a2      	bne.n	8003a3e <HAL_SPI_TransmitReceive+0x224>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d19d      	bne.n	8003a3e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fa18 	bl	8003f3c <SPI_EndRxTxTransaction>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d006      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b1e:	e010      	b.n	8003b42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10b      	bne.n	8003b40 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	e000      	b.n	8003b42 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003b40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3730      	adds	r7, #48	; 0x30
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	099b      	lsrs	r3, r3, #6
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10f      	bne.n	8003ba4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	099b      	lsrs	r3, r3, #6
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
    return;
 8003ba2:	e0d8      	b.n	8003d56 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_SPI_IRQHandler+0x66>
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	09db      	lsrs	r3, r3, #7
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d004      	beq.n	8003bc6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4798      	blx	r3
    return;
 8003bc4:	e0c7      	b.n	8003d56 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10c      	bne.n	8003bec <HAL_SPI_IRQHandler+0x8c>
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	099b      	lsrs	r3, r3, #6
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	0a1b      	lsrs	r3, r3, #8
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80b5 	beq.w	8003d56 <HAL_SPI_IRQHandler+0x1f6>
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80ae 	beq.w	8003d56 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	099b      	lsrs	r3, r3, #6
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d023      	beq.n	8003c4e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d011      	beq.n	8003c36 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c16:	f043 0204 	orr.w	r2, r3, #4
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	e00b      	b.n	8003c4e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c36:	2300      	movs	r3, #0
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	693b      	ldr	r3, [r7, #16]
        return;
 8003c4c:	e083      	b.n	8003d56 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d014      	beq.n	8003c84 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	f043 0201 	orr.w	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00c      	beq.n	8003caa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c94:	f043 0208 	orr.w	r2, r3, #8
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d050      	beq.n	8003d54 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cc0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d104      	bne.n	8003cde <HAL_SPI_IRQHandler+0x17e>
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d034      	beq.n	8003d48 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0203 	bic.w	r2, r2, #3
 8003cec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d011      	beq.n	8003d1a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfa:	4a18      	ldr	r2, [pc, #96]	; (8003d5c <HAL_SPI_IRQHandler+0x1fc>)
 8003cfc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fd fbff 	bl	8001506 <HAL_DMA_Abort_IT>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d016      	beq.n	8003d50 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d26:	4a0d      	ldr	r2, [pc, #52]	; (8003d5c <HAL_SPI_IRQHandler+0x1fc>)
 8003d28:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd fbe9 	bl	8001506 <HAL_DMA_Abort_IT>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003d46:	e003      	b.n	8003d50 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f809 	bl	8003d60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d4e:	e000      	b.n	8003d52 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003d50:	bf00      	nop
    return;
 8003d52:	bf00      	nop
 8003d54:	bf00      	nop
  }
}
 8003d56:	3720      	adds	r7, #32
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	08003d75 	.word	0x08003d75

08003d60 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f7ff ffe6 	bl	8003d60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d94:	bf00      	nop
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dac:	e04c      	b.n	8003e48 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003db4:	d048      	beq.n	8003e48 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003db6:	f7fc fc49 	bl	800064c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d902      	bls.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0x30>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d13d      	bne.n	8003e48 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003de4:	d111      	bne.n	8003e0a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dee:	d004      	beq.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df8:	d107      	bne.n	8003e0a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e12:	d10f      	bne.n	8003e34 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e00f      	b.n	8003e68 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4013      	ands	r3, r2
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d1a3      	bne.n	8003dae <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e84:	d111      	bne.n	8003eaa <SPI_EndRxTransaction+0x3a>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8e:	d004      	beq.n	8003e9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e98:	d107      	bne.n	8003eaa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eb2:	d12a      	bne.n	8003f0a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebc:	d012      	beq.n	8003ee4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2180      	movs	r1, #128	; 0x80
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7ff ff67 	bl	8003d9c <SPI_WaitFlagStateUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d02d      	beq.n	8003f30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed8:	f043 0220 	orr.w	r2, r3, #32
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e026      	b.n	8003f32 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	2101      	movs	r1, #1
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7ff ff54 	bl	8003d9c <SPI_WaitFlagStateUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01a      	beq.n	8003f30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efe:	f043 0220 	orr.w	r2, r3, #32
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e013      	b.n	8003f32 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2200      	movs	r2, #0
 8003f12:	2101      	movs	r1, #1
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f7ff ff41 	bl	8003d9c <SPI_WaitFlagStateUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f043 0220 	orr.w	r2, r3, #32
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e000      	b.n	8003f32 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f48:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <SPI_EndRxTxTransaction+0x7c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1b      	ldr	r2, [pc, #108]	; (8003fbc <SPI_EndRxTxTransaction+0x80>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	0d5b      	lsrs	r3, r3, #21
 8003f54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f66:	d112      	bne.n	8003f8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2180      	movs	r1, #128	; 0x80
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f7ff ff12 	bl	8003d9c <SPI_WaitFlagStateUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d016      	beq.n	8003fac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f043 0220 	orr.w	r2, r3, #32
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e00f      	b.n	8003fae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa4:	2b80      	cmp	r3, #128	; 0x80
 8003fa6:	d0f2      	beq.n	8003f8e <SPI_EndRxTxTransaction+0x52>
 8003fa8:	e000      	b.n	8003fac <SPI_EndRxTxTransaction+0x70>
        break;
 8003faa:	bf00      	nop
  }

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000008 	.word	0x20000008
 8003fbc:	165e9f81 	.word	0x165e9f81

08003fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e01d      	b.n	800400e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f003 fdfa 	bl	8007be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4610      	mov	r0, r2
 8004000:	f000 fd2e 	bl	8004a60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2201      	movs	r2, #1
 8004028:	6839      	ldr	r1, [r7, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f001 f92c 	bl	8005288 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a15      	ldr	r2, [pc, #84]	; (800408c <HAL_TIM_OC_Start+0x74>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <HAL_TIM_OC_Start+0x2c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a14      	ldr	r2, [pc, #80]	; (8004090 <HAL_TIM_OC_Start+0x78>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d101      	bne.n	8004048 <HAL_TIM_OC_Start+0x30>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_TIM_OC_Start+0x32>
 8004048:	2300      	movs	r3, #0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b06      	cmp	r3, #6
 800406e:	d007      	beq.n	8004080 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40010000 	.word	0x40010000
 8004090:	40010400 	.word	0x40010400

08004094 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e01d      	b.n	80040e2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f815 	bl	80040ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4619      	mov	r1, r3
 80040d2:	4610      	mov	r0, r2
 80040d4:	f000 fcc4 	bl	8004a60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2201      	movs	r2, #1
 8004110:	6839      	ldr	r1, [r7, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f001 f8b8 	bl	8005288 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a15      	ldr	r2, [pc, #84]	; (8004174 <HAL_TIM_PWM_Start+0x74>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_TIM_PWM_Start+0x2c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a14      	ldr	r2, [pc, #80]	; (8004178 <HAL_TIM_PWM_Start+0x78>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d101      	bne.n	8004130 <HAL_TIM_PWM_Start+0x30>
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <HAL_TIM_PWM_Start+0x32>
 8004130:	2300      	movs	r3, #0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004144:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b06      	cmp	r3, #6
 8004156:	d007      	beq.n	8004168 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40010000 	.word	0x40010000
 8004178:	40010400 	.word	0x40010400

0800417c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e01d      	b.n	80041ca <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f815 	bl	80041d2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f000 fc50 	bl	8004a60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b086      	sub	sp, #24
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e083      	b.n	8004302 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f003 fd8a 	bl	8007d28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6812      	ldr	r2, [r2, #0]
 8004226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800422a:	f023 0307 	bic.w	r3, r3, #7
 800422e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	4619      	mov	r1, r3
 800423a:	4610      	mov	r0, r2
 800423c:	f000 fc10 	bl	8004a60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004268:	f023 0303 	bic.w	r3, r3, #3
 800426c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	4313      	orrs	r3, r2
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004286:	f023 030c 	bic.w	r3, r3, #12
 800428a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	021b      	lsls	r3, r3, #8
 80042a2:	4313      	orrs	r3, r2
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	011a      	lsls	r2, r3, #4
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	031b      	lsls	r3, r3, #12
 80042b6:	4313      	orrs	r3, r2
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80042c4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80042cc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	4313      	orrs	r3, r2
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_TIM_Encoder_Start_IT+0x16>
 800431a:	2b04      	cmp	r3, #4
 800431c:	d010      	beq.n	8004340 <HAL_TIM_Encoder_Start_IT+0x36>
 800431e:	e01f      	b.n	8004360 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2201      	movs	r2, #1
 8004326:	2100      	movs	r1, #0
 8004328:	4618      	mov	r0, r3
 800432a:	f000 ffad 	bl	8005288 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0202 	orr.w	r2, r2, #2
 800433c:	60da      	str	r2, [r3, #12]
      break;
 800433e:	e02e      	b.n	800439e <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2201      	movs	r2, #1
 8004346:	2104      	movs	r1, #4
 8004348:	4618      	mov	r0, r3
 800434a:	f000 ff9d 	bl	8005288 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f042 0204 	orr.w	r2, r2, #4
 800435c:	60da      	str	r2, [r3, #12]
      break;
 800435e:	e01e      	b.n	800439e <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2201      	movs	r2, #1
 8004366:	2100      	movs	r1, #0
 8004368:	4618      	mov	r0, r3
 800436a:	f000 ff8d 	bl	8005288 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2201      	movs	r2, #1
 8004374:	2104      	movs	r1, #4
 8004376:	4618      	mov	r0, r3
 8004378:	f000 ff86 	bl	8005288 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0202 	orr.w	r2, r2, #2
 800438a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0204 	orr.w	r2, r2, #4
 800439a:	60da      	str	r2, [r3, #12]
      break;
 800439c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d122      	bne.n	8004414 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d11b      	bne.n	8004414 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0202 	mvn.w	r2, #2
 80043e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fb11 	bl	8004a22 <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fb03 	bl	8004a0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fb14 	bl	8004a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b04      	cmp	r3, #4
 8004420:	d122      	bne.n	8004468 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b04      	cmp	r3, #4
 800442e:	d11b      	bne.n	8004468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0204 	mvn.w	r2, #4
 8004438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fae7 	bl	8004a22 <HAL_TIM_IC_CaptureCallback>
 8004454:	e005      	b.n	8004462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fad9 	bl	8004a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 faea 	bl	8004a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b08      	cmp	r3, #8
 8004474:	d122      	bne.n	80044bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b08      	cmp	r3, #8
 8004482:	d11b      	bne.n	80044bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0208 	mvn.w	r2, #8
 800448c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2204      	movs	r2, #4
 8004492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fabd 	bl	8004a22 <HAL_TIM_IC_CaptureCallback>
 80044a8:	e005      	b.n	80044b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 faaf 	bl	8004a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fac0 	bl	8004a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0310 	and.w	r3, r3, #16
 80044c6:	2b10      	cmp	r3, #16
 80044c8:	d122      	bne.n	8004510 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d11b      	bne.n	8004510 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0210 	mvn.w	r2, #16
 80044e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2208      	movs	r2, #8
 80044e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fa93 	bl	8004a22 <HAL_TIM_IC_CaptureCallback>
 80044fc:	e005      	b.n	800450a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fa85 	bl	8004a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fa96 	bl	8004a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b01      	cmp	r3, #1
 800451c:	d10e      	bne.n	800453c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b01      	cmp	r3, #1
 800452a:	d107      	bne.n	800453c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0201 	mvn.w	r2, #1
 8004534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa5f 	bl	80049fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004546:	2b80      	cmp	r3, #128	; 0x80
 8004548:	d10e      	bne.n	8004568 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004554:	2b80      	cmp	r3, #128	; 0x80
 8004556:	d107      	bne.n	8004568 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 ffb8 	bl	80054d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d10e      	bne.n	8004594 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004580:	2b40      	cmp	r3, #64	; 0x40
 8004582:	d107      	bne.n	8004594 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800458c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fa5b 	bl	8004a4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d10e      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d107      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0220 	mvn.w	r2, #32
 80045b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 ff82 	bl	80054c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045c0:	bf00      	nop
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80045de:	2302      	movs	r3, #2
 80045e0:	e08a      	b.n	80046f8 <HAL_TIM_IC_ConfigChannel+0x130>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2202      	movs	r2, #2
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d11b      	bne.n	8004630 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	6819      	ldr	r1, [r3, #0]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f000 fc7a 	bl	8004f00 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 020c 	bic.w	r2, r2, #12
 800461a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6999      	ldr	r1, [r3, #24]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	619a      	str	r2, [r3, #24]
 800462e:	e05a      	b.n	80046e6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b04      	cmp	r3, #4
 8004634:	d11c      	bne.n	8004670 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	6819      	ldr	r1, [r3, #0]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f000 fcfe 	bl	8005046 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699a      	ldr	r2, [r3, #24]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004658:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6999      	ldr	r1, [r3, #24]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	021a      	lsls	r2, r3, #8
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	619a      	str	r2, [r3, #24]
 800466e:	e03a      	b.n	80046e6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b08      	cmp	r3, #8
 8004674:	d11b      	bne.n	80046ae <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	6819      	ldr	r1, [r3, #0]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f000 fd4b 	bl	8005120 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 020c 	bic.w	r2, r2, #12
 8004698:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69d9      	ldr	r1, [r3, #28]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	61da      	str	r2, [r3, #28]
 80046ac:	e01b      	b.n	80046e6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	6819      	ldr	r1, [r3, #0]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f000 fd6b 	bl	8005198 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046d0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69d9      	ldr	r1, [r3, #28]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	021a      	lsls	r2, r3, #8
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004716:	2302      	movs	r3, #2
 8004718:	e0b4      	b.n	8004884 <HAL_TIM_PWM_ConfigChannel+0x184>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2202      	movs	r2, #2
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b0c      	cmp	r3, #12
 800472e:	f200 809f 	bhi.w	8004870 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004732:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	0800476d 	.word	0x0800476d
 800473c:	08004871 	.word	0x08004871
 8004740:	08004871 	.word	0x08004871
 8004744:	08004871 	.word	0x08004871
 8004748:	080047ad 	.word	0x080047ad
 800474c:	08004871 	.word	0x08004871
 8004750:	08004871 	.word	0x08004871
 8004754:	08004871 	.word	0x08004871
 8004758:	080047ef 	.word	0x080047ef
 800475c:	08004871 	.word	0x08004871
 8004760:	08004871 	.word	0x08004871
 8004764:	08004871 	.word	0x08004871
 8004768:	0800482f 	.word	0x0800482f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fa14 	bl	8004ba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0208 	orr.w	r2, r2, #8
 8004786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0204 	bic.w	r2, r2, #4
 8004796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6999      	ldr	r1, [r3, #24]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	619a      	str	r2, [r3, #24]
      break;
 80047aa:	e062      	b.n	8004872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fa64 	bl	8004c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6999      	ldr	r1, [r3, #24]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	021a      	lsls	r2, r3, #8
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	619a      	str	r2, [r3, #24]
      break;
 80047ec:	e041      	b.n	8004872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fab9 	bl	8004d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0208 	orr.w	r2, r2, #8
 8004808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0204 	bic.w	r2, r2, #4
 8004818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69d9      	ldr	r1, [r3, #28]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	61da      	str	r2, [r3, #28]
      break;
 800482c:	e021      	b.n	8004872 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fb0d 	bl	8004e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69d9      	ldr	r1, [r3, #28]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	021a      	lsls	r2, r3, #8
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	61da      	str	r2, [r3, #28]
      break;
 800486e:	e000      	b.n	8004872 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004870:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_TIM_ConfigClockSource+0x18>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e0a6      	b.n	80049f2 <HAL_TIM_ConfigClockSource+0x166>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d067      	beq.n	80049ac <HAL_TIM_ConfigClockSource+0x120>
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	d80b      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x6c>
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d073      	beq.n	80049cc <HAL_TIM_ConfigClockSource+0x140>
 80048e4:	2b10      	cmp	r3, #16
 80048e6:	d802      	bhi.n	80048ee <HAL_TIM_ConfigClockSource+0x62>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d06f      	beq.n	80049cc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80048ec:	e078      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	d06c      	beq.n	80049cc <HAL_TIM_ConfigClockSource+0x140>
 80048f2:	2b30      	cmp	r3, #48	; 0x30
 80048f4:	d06a      	beq.n	80049cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80048f6:	e073      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048f8:	2b70      	cmp	r3, #112	; 0x70
 80048fa:	d00d      	beq.n	8004918 <HAL_TIM_ConfigClockSource+0x8c>
 80048fc:	2b70      	cmp	r3, #112	; 0x70
 80048fe:	d804      	bhi.n	800490a <HAL_TIM_ConfigClockSource+0x7e>
 8004900:	2b50      	cmp	r3, #80	; 0x50
 8004902:	d033      	beq.n	800496c <HAL_TIM_ConfigClockSource+0xe0>
 8004904:	2b60      	cmp	r3, #96	; 0x60
 8004906:	d041      	beq.n	800498c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004908:	e06a      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800490a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490e:	d066      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x152>
 8004910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004914:	d017      	beq.n	8004946 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004916:	e063      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6818      	ldr	r0, [r3, #0]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6899      	ldr	r1, [r3, #8]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f000 fc8e 	bl	8005248 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800493a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	609a      	str	r2, [r3, #8]
      break;
 8004944:	e04c      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6899      	ldr	r1, [r3, #8]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f000 fc77 	bl	8005248 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004968:	609a      	str	r2, [r3, #8]
      break;
 800496a:	e039      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	6859      	ldr	r1, [r3, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	461a      	mov	r2, r3
 800497a:	f000 fb35 	bl	8004fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2150      	movs	r1, #80	; 0x50
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fc44 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 800498a:	e029      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	6859      	ldr	r1, [r3, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	461a      	mov	r2, r3
 800499a:	f000 fb91 	bl	80050c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2160      	movs	r1, #96	; 0x60
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fc34 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 80049aa:	e019      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	461a      	mov	r2, r3
 80049ba:	f000 fb15 	bl	8004fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2140      	movs	r1, #64	; 0x40
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fc24 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 80049ca:	e009      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4619      	mov	r1, r3
 80049d6:	4610      	mov	r0, r2
 80049d8:	f000 fc1b 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 80049dc:	e000      	b.n	80049e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80049de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a40      	ldr	r2, [pc, #256]	; (8004b74 <TIM_Base_SetConfig+0x114>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <TIM_Base_SetConfig+0x40>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7e:	d00f      	beq.n	8004aa0 <TIM_Base_SetConfig+0x40>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a3d      	ldr	r2, [pc, #244]	; (8004b78 <TIM_Base_SetConfig+0x118>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00b      	beq.n	8004aa0 <TIM_Base_SetConfig+0x40>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a3c      	ldr	r2, [pc, #240]	; (8004b7c <TIM_Base_SetConfig+0x11c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d007      	beq.n	8004aa0 <TIM_Base_SetConfig+0x40>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a3b      	ldr	r2, [pc, #236]	; (8004b80 <TIM_Base_SetConfig+0x120>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <TIM_Base_SetConfig+0x40>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a3a      	ldr	r2, [pc, #232]	; (8004b84 <TIM_Base_SetConfig+0x124>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d108      	bne.n	8004ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a2f      	ldr	r2, [pc, #188]	; (8004b74 <TIM_Base_SetConfig+0x114>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d02b      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac0:	d027      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a2c      	ldr	r2, [pc, #176]	; (8004b78 <TIM_Base_SetConfig+0x118>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d023      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a2b      	ldr	r2, [pc, #172]	; (8004b7c <TIM_Base_SetConfig+0x11c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d01f      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a2a      	ldr	r2, [pc, #168]	; (8004b80 <TIM_Base_SetConfig+0x120>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01b      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a29      	ldr	r2, [pc, #164]	; (8004b84 <TIM_Base_SetConfig+0x124>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d017      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a28      	ldr	r2, [pc, #160]	; (8004b88 <TIM_Base_SetConfig+0x128>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d013      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a27      	ldr	r2, [pc, #156]	; (8004b8c <TIM_Base_SetConfig+0x12c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00f      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a26      	ldr	r2, [pc, #152]	; (8004b90 <TIM_Base_SetConfig+0x130>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00b      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a25      	ldr	r2, [pc, #148]	; (8004b94 <TIM_Base_SetConfig+0x134>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d007      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a24      	ldr	r2, [pc, #144]	; (8004b98 <TIM_Base_SetConfig+0x138>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d003      	beq.n	8004b12 <TIM_Base_SetConfig+0xb2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a23      	ldr	r2, [pc, #140]	; (8004b9c <TIM_Base_SetConfig+0x13c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d108      	bne.n	8004b24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a0a      	ldr	r2, [pc, #40]	; (8004b74 <TIM_Base_SetConfig+0x114>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <TIM_Base_SetConfig+0xf8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a0c      	ldr	r2, [pc, #48]	; (8004b84 <TIM_Base_SetConfig+0x124>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d103      	bne.n	8004b60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	615a      	str	r2, [r3, #20]
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00
 8004b84:	40010400 	.word	0x40010400
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40014400 	.word	0x40014400
 8004b90:	40014800 	.word	0x40014800
 8004b94:	40001800 	.word	0x40001800
 8004b98:	40001c00 	.word	0x40001c00
 8004b9c:	40002000 	.word	0x40002000

08004ba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f023 0201 	bic.w	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f023 0302 	bic.w	r3, r3, #2
 8004be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a20      	ldr	r2, [pc, #128]	; (8004c78 <TIM_OC1_SetConfig+0xd8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_OC1_SetConfig+0x64>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a1f      	ldr	r2, [pc, #124]	; (8004c7c <TIM_OC1_SetConfig+0xdc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d10c      	bne.n	8004c1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f023 0308 	bic.w	r3, r3, #8
 8004c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f023 0304 	bic.w	r3, r3, #4
 8004c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a15      	ldr	r2, [pc, #84]	; (8004c78 <TIM_OC1_SetConfig+0xd8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d003      	beq.n	8004c2e <TIM_OC1_SetConfig+0x8e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a14      	ldr	r2, [pc, #80]	; (8004c7c <TIM_OC1_SetConfig+0xdc>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d111      	bne.n	8004c52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	621a      	str	r2, [r3, #32]
}
 8004c6c:	bf00      	nop
 8004c6e:	371c      	adds	r7, #28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	40010000 	.word	0x40010000
 8004c7c:	40010400 	.word	0x40010400

08004c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0210 	bic.w	r2, r3, #16
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f023 0320 	bic.w	r3, r3, #32
 8004cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a22      	ldr	r2, [pc, #136]	; (8004d64 <TIM_OC2_SetConfig+0xe4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d003      	beq.n	8004ce8 <TIM_OC2_SetConfig+0x68>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a21      	ldr	r2, [pc, #132]	; (8004d68 <TIM_OC2_SetConfig+0xe8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d10d      	bne.n	8004d04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a17      	ldr	r2, [pc, #92]	; (8004d64 <TIM_OC2_SetConfig+0xe4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <TIM_OC2_SetConfig+0x94>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a16      	ldr	r2, [pc, #88]	; (8004d68 <TIM_OC2_SetConfig+0xe8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d113      	bne.n	8004d3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	621a      	str	r2, [r3, #32]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40010000 	.word	0x40010000
 8004d68:	40010400 	.word	0x40010400

08004d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0303 	bic.w	r3, r3, #3
 8004da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a21      	ldr	r2, [pc, #132]	; (8004e4c <TIM_OC3_SetConfig+0xe0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d003      	beq.n	8004dd2 <TIM_OC3_SetConfig+0x66>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a20      	ldr	r2, [pc, #128]	; (8004e50 <TIM_OC3_SetConfig+0xe4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d10d      	bne.n	8004dee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	021b      	lsls	r3, r3, #8
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a16      	ldr	r2, [pc, #88]	; (8004e4c <TIM_OC3_SetConfig+0xe0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d003      	beq.n	8004dfe <TIM_OC3_SetConfig+0x92>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a15      	ldr	r2, [pc, #84]	; (8004e50 <TIM_OC3_SetConfig+0xe4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d113      	bne.n	8004e26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	621a      	str	r2, [r3, #32]
}
 8004e40:	bf00      	nop
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40010400 	.word	0x40010400

08004e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	021b      	lsls	r3, r3, #8
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	031b      	lsls	r3, r3, #12
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a12      	ldr	r2, [pc, #72]	; (8004ef8 <TIM_OC4_SetConfig+0xa4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_OC4_SetConfig+0x68>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a11      	ldr	r2, [pc, #68]	; (8004efc <TIM_OC4_SetConfig+0xa8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d109      	bne.n	8004ed0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	019b      	lsls	r3, r3, #6
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40010000 	.word	0x40010000
 8004efc:	40010400 	.word	0x40010400

08004f00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	f023 0201 	bic.w	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4a28      	ldr	r2, [pc, #160]	; (8004fcc <TIM_TI1_SetConfig+0xcc>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01b      	beq.n	8004f66 <TIM_TI1_SetConfig+0x66>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f34:	d017      	beq.n	8004f66 <TIM_TI1_SetConfig+0x66>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a25      	ldr	r2, [pc, #148]	; (8004fd0 <TIM_TI1_SetConfig+0xd0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <TIM_TI1_SetConfig+0x66>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4a24      	ldr	r2, [pc, #144]	; (8004fd4 <TIM_TI1_SetConfig+0xd4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00f      	beq.n	8004f66 <TIM_TI1_SetConfig+0x66>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4a23      	ldr	r2, [pc, #140]	; (8004fd8 <TIM_TI1_SetConfig+0xd8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00b      	beq.n	8004f66 <TIM_TI1_SetConfig+0x66>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4a22      	ldr	r2, [pc, #136]	; (8004fdc <TIM_TI1_SetConfig+0xdc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d007      	beq.n	8004f66 <TIM_TI1_SetConfig+0x66>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4a21      	ldr	r2, [pc, #132]	; (8004fe0 <TIM_TI1_SetConfig+0xe0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d003      	beq.n	8004f66 <TIM_TI1_SetConfig+0x66>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4a20      	ldr	r2, [pc, #128]	; (8004fe4 <TIM_TI1_SetConfig+0xe4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d101      	bne.n	8004f6a <TIM_TI1_SetConfig+0x6a>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <TIM_TI1_SetConfig+0x6c>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f023 0303 	bic.w	r3, r3, #3
 8004f76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	e003      	b.n	8004f8a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f023 030a 	bic.w	r3, r3, #10
 8004fa4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f003 030a 	and.w	r3, r3, #10
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40010000 	.word	0x40010000
 8004fd0:	40000400 	.word	0x40000400
 8004fd4:	40000800 	.word	0x40000800
 8004fd8:	40000c00 	.word	0x40000c00
 8004fdc:	40010400 	.word	0x40010400
 8004fe0:	40014000 	.word	0x40014000
 8004fe4:	40001800 	.word	0x40001800

08004fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f023 0201 	bic.w	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f023 030a 	bic.w	r3, r3, #10
 8005024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005046:	b480      	push	{r7}
 8005048:	b087      	sub	sp, #28
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
 8005052:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	f023 0210 	bic.w	r2, r3, #16
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005072:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005084:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	031b      	lsls	r3, r3, #12
 800508a:	b29b      	uxth	r3, r3
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005098:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	621a      	str	r2, [r3, #32]
}
 80050b4:	bf00      	nop
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f023 0210 	bic.w	r2, r3, #16
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	031b      	lsls	r3, r3, #12
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	621a      	str	r2, [r3, #32]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f023 0303 	bic.w	r3, r3, #3
 800514c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800515c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	b2db      	uxtb	r3, r3
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005170:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	621a      	str	r2, [r3, #32]
}
 800518c:	bf00      	nop
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	031b      	lsls	r3, r3, #12
 80051dc:	b29b      	uxth	r3, r3
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80051ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	031b      	lsls	r3, r3, #12
 80051f0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005212:	b480      	push	{r7}
 8005214:	b085      	sub	sp, #20
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	f043 0307 	orr.w	r3, r3, #7
 8005234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	609a      	str	r2, [r3, #8]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	021a      	lsls	r2, r3, #8
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	431a      	orrs	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4313      	orrs	r3, r2
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	609a      	str	r2, [r3, #8]
}
 800527c:	bf00      	nop
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	2201      	movs	r2, #1
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a1a      	ldr	r2, [r3, #32]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	43db      	mvns	r3, r3
 80052aa:	401a      	ands	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a1a      	ldr	r2, [r3, #32]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	fa01 f303 	lsl.w	r3, r1, r3
 80052c0:	431a      	orrs	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2204      	movs	r2, #4
 80052e2:	6839      	ldr	r1, [r7, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 f901 	bl	80054ec <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b06      	cmp	r3, #6
 800530a:	d007      	beq.n	800531c <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800533c:	2302      	movs	r3, #2
 800533e:	e05a      	b.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a21      	ldr	r2, [pc, #132]	; (8005404 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d022      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538c:	d01d      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1d      	ldr	r2, [pc, #116]	; (8005408 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d018      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1b      	ldr	r2, [pc, #108]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1a      	ldr	r2, [pc, #104]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00e      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a18      	ldr	r2, [pc, #96]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d009      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a17      	ldr	r2, [pc, #92]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d004      	beq.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a15      	ldr	r2, [pc, #84]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d10c      	bne.n	80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40010000 	.word	0x40010000
 8005408:	40000400 	.word	0x40000400
 800540c:	40000800 	.word	0x40000800
 8005410:	40000c00 	.word	0x40000c00
 8005414:	40010400 	.word	0x40010400
 8005418:	40014000 	.word	0x40014000
 800541c:	40001800 	.word	0x40001800

08005420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005438:	2302      	movs	r3, #2
 800543a:	e03d      	b.n	80054b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	2204      	movs	r2, #4
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a1a      	ldr	r2, [r3, #32]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	43db      	mvns	r3, r3
 800550e:	401a      	ands	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1a      	ldr	r2, [r3, #32]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	fa01 f303 	lsl.w	r3, r1, r3
 8005524:	431a      	orrs	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
}
 800552a:	bf00      	nop
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b082      	sub	sp, #8
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e03f      	b.n	80055c8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d106      	bne.n	8005562 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f002 fcab 	bl	8007eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2224      	movs	r2, #36	; 0x24
 8005566:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005578:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fba0 	bl	8005cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800558e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695a      	ldr	r2, [r3, #20]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800559e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	4613      	mov	r3, r2
 80055de:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b20      	cmp	r3, #32
 80055ee:	f040 8083 	bne.w	80056f8 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <HAL_UART_Transmit+0x2e>
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e07b      	b.n	80056fa <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_UART_Transmit+0x40>
 800560c:	2302      	movs	r3, #2
 800560e:	e074      	b.n	80056fa <HAL_UART_Transmit+0x12a>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2221      	movs	r2, #33	; 0x21
 8005622:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005626:	f7fb f811 	bl	800064c <HAL_GetTick>
 800562a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	88fa      	ldrh	r2, [r7, #6]
 8005630:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	88fa      	ldrh	r2, [r7, #6]
 8005636:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005640:	e042      	b.n	80056c8 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005646:	b29b      	uxth	r3, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005658:	d122      	bne.n	80056a0 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2200      	movs	r2, #0
 8005662:	2180      	movs	r1, #128	; 0x80
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 f9bf 	bl	80059e8 <UART_WaitOnFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e042      	b.n	80056fa <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	461a      	mov	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005686:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d103      	bne.n	8005698 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	3302      	adds	r3, #2
 8005694:	60bb      	str	r3, [r7, #8]
 8005696:	e017      	b.n	80056c8 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	3301      	adds	r3, #1
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	e013      	b.n	80056c8 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2200      	movs	r2, #0
 80056a8:	2180      	movs	r1, #128	; 0x80
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 f99c 	bl	80059e8 <UART_WaitOnFlagUntilTimeout>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e01f      	b.n	80056fa <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	60ba      	str	r2, [r7, #8]
 80056c0:	781a      	ldrb	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1b7      	bne.n	8005642 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2200      	movs	r2, #0
 80056da:	2140      	movs	r1, #64	; 0x40
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f983 	bl	80059e8 <UART_WaitOnFlagUntilTimeout>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e006      	b.n	80056fa <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	e000      	b.n	80056fa <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
  }
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	4613      	mov	r3, r2
 800570e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b20      	cmp	r3, #32
 800571a:	d140      	bne.n	800579e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_UART_Receive_IT+0x26>
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e039      	b.n	80057a0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_UART_Receive_IT+0x38>
 8005736:	2302      	movs	r3, #2
 8005738:	e032      	b.n	80057a0 <HAL_UART_Receive_IT+0x9e>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	88fa      	ldrh	r2, [r7, #6]
 800574c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	88fa      	ldrh	r2, [r7, #6]
 8005752:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2222      	movs	r2, #34	; 0x22
 800575e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005778:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0201 	orr.w	r2, r2, #1
 8005788:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0220 	orr.w	r2, r2, #32
 8005798:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	e000      	b.n	80057a0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800579e:	2302      	movs	r3, #2
  }
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10d      	bne.n	80057fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_UART_IRQHandler+0x52>
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f9e0 	bl	8005bbc <UART_Receive_IT>
      return;
 80057fc:	e0d1      	b.n	80059a2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 80b0 	beq.w	8005966 <HAL_UART_IRQHandler+0x1ba>
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d105      	bne.n	800581c <HAL_UART_IRQHandler+0x70>
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 80a5 	beq.w	8005966 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <HAL_UART_IRQHandler+0x90>
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005834:	f043 0201 	orr.w	r2, r3, #1
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_UART_IRQHandler+0xb0>
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005854:	f043 0202 	orr.w	r2, r3, #2
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <HAL_UART_IRQHandler+0xd0>
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d005      	beq.n	800587c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005874:	f043 0204 	orr.w	r2, r3, #4
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00f      	beq.n	80058a6 <HAL_UART_IRQHandler+0xfa>
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b00      	cmp	r3, #0
 800588e:	d104      	bne.n	800589a <HAL_UART_IRQHandler+0xee>
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d005      	beq.n	80058a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589e:	f043 0208 	orr.w	r2, r3, #8
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d078      	beq.n	80059a0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d007      	beq.n	80058c8 <HAL_UART_IRQHandler+0x11c>
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f97a 	bl	8005bbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d2:	2b40      	cmp	r3, #64	; 0x40
 80058d4:	bf0c      	ite	eq
 80058d6:	2301      	moveq	r3, #1
 80058d8:	2300      	movne	r3, #0
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d102      	bne.n	80058f0 <HAL_UART_IRQHandler+0x144>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d031      	beq.n	8005954 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f8c3 	bl	8005a7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005900:	2b40      	cmp	r3, #64	; 0x40
 8005902:	d123      	bne.n	800594c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695a      	ldr	r2, [r3, #20]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005912:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005918:	2b00      	cmp	r3, #0
 800591a:	d013      	beq.n	8005944 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005920:	4a21      	ldr	r2, [pc, #132]	; (80059a8 <HAL_UART_IRQHandler+0x1fc>)
 8005922:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005928:	4618      	mov	r0, r3
 800592a:	f7fb fdec 	bl	8001506 <HAL_DMA_Abort_IT>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d016      	beq.n	8005962 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800593e:	4610      	mov	r0, r2
 8005940:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005942:	e00e      	b.n	8005962 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f845 	bl	80059d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594a:	e00a      	b.n	8005962 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f841 	bl	80059d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005952:	e006      	b.n	8005962 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f83d 	bl	80059d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005960:	e01e      	b.n	80059a0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005962:	bf00      	nop
    return;
 8005964:	e01c      	b.n	80059a0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596c:	2b00      	cmp	r3, #0
 800596e:	d008      	beq.n	8005982 <HAL_UART_IRQHandler+0x1d6>
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f8b0 	bl	8005ae0 <UART_Transmit_IT>
    return;
 8005980:	e00f      	b.n	80059a2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00a      	beq.n	80059a2 <HAL_UART_IRQHandler+0x1f6>
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f8f8 	bl	8005b8c <UART_EndTransmit_IT>
    return;
 800599c:	bf00      	nop
 800599e:	e000      	b.n	80059a2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80059a0:	bf00      	nop
  }
}
 80059a2:	3720      	adds	r7, #32
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	08005ab9 	.word	0x08005ab9

080059ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f8:	e02c      	b.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a00:	d028      	beq.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a08:	f7fa fe20 	bl	800064c <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d21d      	bcs.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a26:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695a      	ldr	r2, [r3, #20]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0201 	bic.w	r2, r2, #1
 8005a36:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e00f      	b.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	bf0c      	ite	eq
 8005a64:	2301      	moveq	r3, #1
 8005a66:	2300      	movne	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d0c3      	beq.n	80059fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a92:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695a      	ldr	r2, [r3, #20]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0201 	bic.w	r2, r2, #1
 8005aa2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f7ff ff7e 	bl	80059d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ad8:	bf00      	nop
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b21      	cmp	r3, #33	; 0x21
 8005af2:	d144      	bne.n	8005b7e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005afc:	d11a      	bne.n	8005b34 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b12:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d105      	bne.n	8005b28 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	1c9a      	adds	r2, r3, #2
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	621a      	str	r2, [r3, #32]
 8005b26:	e00e      	b.n	8005b46 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]
 8005b32:	e008      	b.n	8005b46 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	1c59      	adds	r1, r3, #1
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6211      	str	r1, [r2, #32]
 8005b3e:	781a      	ldrb	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	4619      	mov	r1, r3
 8005b54:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10f      	bne.n	8005b7a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e000      	b.n	8005b80 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005b7e:	2302      	movs	r3, #2
  }
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff fefd 	bl	80059ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b22      	cmp	r3, #34	; 0x22
 8005bce:	d171      	bne.n	8005cb4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd8:	d123      	bne.n	8005c22 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10e      	bne.n	8005c06 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	1c9a      	adds	r2, r3, #2
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	629a      	str	r2, [r3, #40]	; 0x28
 8005c04:	e029      	b.n	8005c5a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c20:	e01b      	b.n	8005c5a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10a      	bne.n	8005c40 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6858      	ldr	r0, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c34:	1c59      	adds	r1, r3, #1
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6291      	str	r1, [r2, #40]	; 0x28
 8005c3a:	b2c2      	uxtb	r2, r0
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	e00c      	b.n	8005c5a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4c:	1c58      	adds	r0, r3, #1
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	6288      	str	r0, [r1, #40]	; 0x28
 8005c52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	4619      	mov	r1, r3
 8005c68:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d120      	bne.n	8005cb0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0220 	bic.w	r2, r2, #32
 8005c7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695a      	ldr	r2, [r3, #20]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0201 	bic.w	r2, r2, #1
 8005c9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff fe8a 	bl	80059c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e002      	b.n	8005cb6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e000      	b.n	8005cb6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005cb4:	2302      	movs	r3, #2
  }
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc4:	b085      	sub	sp, #20
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d02:	f023 030c 	bic.w	r3, r3, #12
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6812      	ldr	r2, [r2, #0]
 8005d0a:	68f9      	ldr	r1, [r7, #12]
 8005d0c:	430b      	orrs	r3, r1
 8005d0e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699a      	ldr	r2, [r3, #24]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d2e:	f040 818b 	bne.w	8006048 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4ac1      	ldr	r2, [pc, #772]	; (800603c <UART_SetConfig+0x37c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d005      	beq.n	8005d48 <UART_SetConfig+0x88>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4abf      	ldr	r2, [pc, #764]	; (8006040 <UART_SetConfig+0x380>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	f040 80bd 	bne.w	8005ec2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d48:	f7fd fab2 	bl	80032b0 <HAL_RCC_GetPCLK2Freq>
 8005d4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	461d      	mov	r5, r3
 8005d52:	f04f 0600 	mov.w	r6, #0
 8005d56:	46a8      	mov	r8, r5
 8005d58:	46b1      	mov	r9, r6
 8005d5a:	eb18 0308 	adds.w	r3, r8, r8
 8005d5e:	eb49 0409 	adc.w	r4, r9, r9
 8005d62:	4698      	mov	r8, r3
 8005d64:	46a1      	mov	r9, r4
 8005d66:	eb18 0805 	adds.w	r8, r8, r5
 8005d6a:	eb49 0906 	adc.w	r9, r9, r6
 8005d6e:	f04f 0100 	mov.w	r1, #0
 8005d72:	f04f 0200 	mov.w	r2, #0
 8005d76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d82:	4688      	mov	r8, r1
 8005d84:	4691      	mov	r9, r2
 8005d86:	eb18 0005 	adds.w	r0, r8, r5
 8005d8a:	eb49 0106 	adc.w	r1, r9, r6
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	461d      	mov	r5, r3
 8005d94:	f04f 0600 	mov.w	r6, #0
 8005d98:	196b      	adds	r3, r5, r5
 8005d9a:	eb46 0406 	adc.w	r4, r6, r6
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4623      	mov	r3, r4
 8005da2:	f7fa fa6d 	bl	8000280 <__aeabi_uldivmod>
 8005da6:	4603      	mov	r3, r0
 8005da8:	460c      	mov	r4, r1
 8005daa:	461a      	mov	r2, r3
 8005dac:	4ba5      	ldr	r3, [pc, #660]	; (8006044 <UART_SetConfig+0x384>)
 8005dae:	fba3 2302 	umull	r2, r3, r3, r2
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	461d      	mov	r5, r3
 8005dbc:	f04f 0600 	mov.w	r6, #0
 8005dc0:	46a9      	mov	r9, r5
 8005dc2:	46b2      	mov	sl, r6
 8005dc4:	eb19 0309 	adds.w	r3, r9, r9
 8005dc8:	eb4a 040a 	adc.w	r4, sl, sl
 8005dcc:	4699      	mov	r9, r3
 8005dce:	46a2      	mov	sl, r4
 8005dd0:	eb19 0905 	adds.w	r9, r9, r5
 8005dd4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005dd8:	f04f 0100 	mov.w	r1, #0
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005de4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005de8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dec:	4689      	mov	r9, r1
 8005dee:	4692      	mov	sl, r2
 8005df0:	eb19 0005 	adds.w	r0, r9, r5
 8005df4:	eb4a 0106 	adc.w	r1, sl, r6
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	461d      	mov	r5, r3
 8005dfe:	f04f 0600 	mov.w	r6, #0
 8005e02:	196b      	adds	r3, r5, r5
 8005e04:	eb46 0406 	adc.w	r4, r6, r6
 8005e08:	461a      	mov	r2, r3
 8005e0a:	4623      	mov	r3, r4
 8005e0c:	f7fa fa38 	bl	8000280 <__aeabi_uldivmod>
 8005e10:	4603      	mov	r3, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	461a      	mov	r2, r3
 8005e16:	4b8b      	ldr	r3, [pc, #556]	; (8006044 <UART_SetConfig+0x384>)
 8005e18:	fba3 1302 	umull	r1, r3, r3, r2
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	2164      	movs	r1, #100	; 0x64
 8005e20:	fb01 f303 	mul.w	r3, r1, r3
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	3332      	adds	r3, #50	; 0x32
 8005e2a:	4a86      	ldr	r2, [pc, #536]	; (8006044 <UART_SetConfig+0x384>)
 8005e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e30:	095b      	lsrs	r3, r3, #5
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e38:	4498      	add	r8, r3
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	461d      	mov	r5, r3
 8005e3e:	f04f 0600 	mov.w	r6, #0
 8005e42:	46a9      	mov	r9, r5
 8005e44:	46b2      	mov	sl, r6
 8005e46:	eb19 0309 	adds.w	r3, r9, r9
 8005e4a:	eb4a 040a 	adc.w	r4, sl, sl
 8005e4e:	4699      	mov	r9, r3
 8005e50:	46a2      	mov	sl, r4
 8005e52:	eb19 0905 	adds.w	r9, r9, r5
 8005e56:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e5a:	f04f 0100 	mov.w	r1, #0
 8005e5e:	f04f 0200 	mov.w	r2, #0
 8005e62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e6e:	4689      	mov	r9, r1
 8005e70:	4692      	mov	sl, r2
 8005e72:	eb19 0005 	adds.w	r0, r9, r5
 8005e76:	eb4a 0106 	adc.w	r1, sl, r6
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	461d      	mov	r5, r3
 8005e80:	f04f 0600 	mov.w	r6, #0
 8005e84:	196b      	adds	r3, r5, r5
 8005e86:	eb46 0406 	adc.w	r4, r6, r6
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	4623      	mov	r3, r4
 8005e8e:	f7fa f9f7 	bl	8000280 <__aeabi_uldivmod>
 8005e92:	4603      	mov	r3, r0
 8005e94:	460c      	mov	r4, r1
 8005e96:	461a      	mov	r2, r3
 8005e98:	4b6a      	ldr	r3, [pc, #424]	; (8006044 <UART_SetConfig+0x384>)
 8005e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	2164      	movs	r1, #100	; 0x64
 8005ea2:	fb01 f303 	mul.w	r3, r1, r3
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	3332      	adds	r3, #50	; 0x32
 8005eac:	4a65      	ldr	r2, [pc, #404]	; (8006044 <UART_SetConfig+0x384>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	f003 0207 	and.w	r2, r3, #7
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4442      	add	r2, r8
 8005ebe:	609a      	str	r2, [r3, #8]
 8005ec0:	e26f      	b.n	80063a2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ec2:	f7fd f9e1 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8005ec6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	461d      	mov	r5, r3
 8005ecc:	f04f 0600 	mov.w	r6, #0
 8005ed0:	46a8      	mov	r8, r5
 8005ed2:	46b1      	mov	r9, r6
 8005ed4:	eb18 0308 	adds.w	r3, r8, r8
 8005ed8:	eb49 0409 	adc.w	r4, r9, r9
 8005edc:	4698      	mov	r8, r3
 8005ede:	46a1      	mov	r9, r4
 8005ee0:	eb18 0805 	adds.w	r8, r8, r5
 8005ee4:	eb49 0906 	adc.w	r9, r9, r6
 8005ee8:	f04f 0100 	mov.w	r1, #0
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ef4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ef8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005efc:	4688      	mov	r8, r1
 8005efe:	4691      	mov	r9, r2
 8005f00:	eb18 0005 	adds.w	r0, r8, r5
 8005f04:	eb49 0106 	adc.w	r1, r9, r6
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	461d      	mov	r5, r3
 8005f0e:	f04f 0600 	mov.w	r6, #0
 8005f12:	196b      	adds	r3, r5, r5
 8005f14:	eb46 0406 	adc.w	r4, r6, r6
 8005f18:	461a      	mov	r2, r3
 8005f1a:	4623      	mov	r3, r4
 8005f1c:	f7fa f9b0 	bl	8000280 <__aeabi_uldivmod>
 8005f20:	4603      	mov	r3, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	461a      	mov	r2, r3
 8005f26:	4b47      	ldr	r3, [pc, #284]	; (8006044 <UART_SetConfig+0x384>)
 8005f28:	fba3 2302 	umull	r2, r3, r3, r2
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	461d      	mov	r5, r3
 8005f36:	f04f 0600 	mov.w	r6, #0
 8005f3a:	46a9      	mov	r9, r5
 8005f3c:	46b2      	mov	sl, r6
 8005f3e:	eb19 0309 	adds.w	r3, r9, r9
 8005f42:	eb4a 040a 	adc.w	r4, sl, sl
 8005f46:	4699      	mov	r9, r3
 8005f48:	46a2      	mov	sl, r4
 8005f4a:	eb19 0905 	adds.w	r9, r9, r5
 8005f4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f52:	f04f 0100 	mov.w	r1, #0
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f66:	4689      	mov	r9, r1
 8005f68:	4692      	mov	sl, r2
 8005f6a:	eb19 0005 	adds.w	r0, r9, r5
 8005f6e:	eb4a 0106 	adc.w	r1, sl, r6
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	461d      	mov	r5, r3
 8005f78:	f04f 0600 	mov.w	r6, #0
 8005f7c:	196b      	adds	r3, r5, r5
 8005f7e:	eb46 0406 	adc.w	r4, r6, r6
 8005f82:	461a      	mov	r2, r3
 8005f84:	4623      	mov	r3, r4
 8005f86:	f7fa f97b 	bl	8000280 <__aeabi_uldivmod>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	461a      	mov	r2, r3
 8005f90:	4b2c      	ldr	r3, [pc, #176]	; (8006044 <UART_SetConfig+0x384>)
 8005f92:	fba3 1302 	umull	r1, r3, r3, r2
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	2164      	movs	r1, #100	; 0x64
 8005f9a:	fb01 f303 	mul.w	r3, r1, r3
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	00db      	lsls	r3, r3, #3
 8005fa2:	3332      	adds	r3, #50	; 0x32
 8005fa4:	4a27      	ldr	r2, [pc, #156]	; (8006044 <UART_SetConfig+0x384>)
 8005fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fb2:	4498      	add	r8, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	461d      	mov	r5, r3
 8005fb8:	f04f 0600 	mov.w	r6, #0
 8005fbc:	46a9      	mov	r9, r5
 8005fbe:	46b2      	mov	sl, r6
 8005fc0:	eb19 0309 	adds.w	r3, r9, r9
 8005fc4:	eb4a 040a 	adc.w	r4, sl, sl
 8005fc8:	4699      	mov	r9, r3
 8005fca:	46a2      	mov	sl, r4
 8005fcc:	eb19 0905 	adds.w	r9, r9, r5
 8005fd0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fd4:	f04f 0100 	mov.w	r1, #0
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fe0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fe4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fe8:	4689      	mov	r9, r1
 8005fea:	4692      	mov	sl, r2
 8005fec:	eb19 0005 	adds.w	r0, r9, r5
 8005ff0:	eb4a 0106 	adc.w	r1, sl, r6
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	461d      	mov	r5, r3
 8005ffa:	f04f 0600 	mov.w	r6, #0
 8005ffe:	196b      	adds	r3, r5, r5
 8006000:	eb46 0406 	adc.w	r4, r6, r6
 8006004:	461a      	mov	r2, r3
 8006006:	4623      	mov	r3, r4
 8006008:	f7fa f93a 	bl	8000280 <__aeabi_uldivmod>
 800600c:	4603      	mov	r3, r0
 800600e:	460c      	mov	r4, r1
 8006010:	461a      	mov	r2, r3
 8006012:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <UART_SetConfig+0x384>)
 8006014:	fba3 1302 	umull	r1, r3, r3, r2
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	2164      	movs	r1, #100	; 0x64
 800601c:	fb01 f303 	mul.w	r3, r1, r3
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	3332      	adds	r3, #50	; 0x32
 8006026:	4a07      	ldr	r2, [pc, #28]	; (8006044 <UART_SetConfig+0x384>)
 8006028:	fba2 2303 	umull	r2, r3, r2, r3
 800602c:	095b      	lsrs	r3, r3, #5
 800602e:	f003 0207 	and.w	r2, r3, #7
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4442      	add	r2, r8
 8006038:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800603a:	e1b2      	b.n	80063a2 <UART_SetConfig+0x6e2>
 800603c:	40011000 	.word	0x40011000
 8006040:	40011400 	.word	0x40011400
 8006044:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4ad7      	ldr	r2, [pc, #860]	; (80063ac <UART_SetConfig+0x6ec>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d005      	beq.n	800605e <UART_SetConfig+0x39e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4ad6      	ldr	r2, [pc, #856]	; (80063b0 <UART_SetConfig+0x6f0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	f040 80d1 	bne.w	8006200 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800605e:	f7fd f927 	bl	80032b0 <HAL_RCC_GetPCLK2Freq>
 8006062:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	469a      	mov	sl, r3
 8006068:	f04f 0b00 	mov.w	fp, #0
 800606c:	46d0      	mov	r8, sl
 800606e:	46d9      	mov	r9, fp
 8006070:	eb18 0308 	adds.w	r3, r8, r8
 8006074:	eb49 0409 	adc.w	r4, r9, r9
 8006078:	4698      	mov	r8, r3
 800607a:	46a1      	mov	r9, r4
 800607c:	eb18 080a 	adds.w	r8, r8, sl
 8006080:	eb49 090b 	adc.w	r9, r9, fp
 8006084:	f04f 0100 	mov.w	r1, #0
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006090:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006094:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006098:	4688      	mov	r8, r1
 800609a:	4691      	mov	r9, r2
 800609c:	eb1a 0508 	adds.w	r5, sl, r8
 80060a0:	eb4b 0609 	adc.w	r6, fp, r9
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	4619      	mov	r1, r3
 80060aa:	f04f 0200 	mov.w	r2, #0
 80060ae:	f04f 0300 	mov.w	r3, #0
 80060b2:	f04f 0400 	mov.w	r4, #0
 80060b6:	0094      	lsls	r4, r2, #2
 80060b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060bc:	008b      	lsls	r3, r1, #2
 80060be:	461a      	mov	r2, r3
 80060c0:	4623      	mov	r3, r4
 80060c2:	4628      	mov	r0, r5
 80060c4:	4631      	mov	r1, r6
 80060c6:	f7fa f8db 	bl	8000280 <__aeabi_uldivmod>
 80060ca:	4603      	mov	r3, r0
 80060cc:	460c      	mov	r4, r1
 80060ce:	461a      	mov	r2, r3
 80060d0:	4bb8      	ldr	r3, [pc, #736]	; (80063b4 <UART_SetConfig+0x6f4>)
 80060d2:	fba3 2302 	umull	r2, r3, r3, r2
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	469b      	mov	fp, r3
 80060e0:	f04f 0c00 	mov.w	ip, #0
 80060e4:	46d9      	mov	r9, fp
 80060e6:	46e2      	mov	sl, ip
 80060e8:	eb19 0309 	adds.w	r3, r9, r9
 80060ec:	eb4a 040a 	adc.w	r4, sl, sl
 80060f0:	4699      	mov	r9, r3
 80060f2:	46a2      	mov	sl, r4
 80060f4:	eb19 090b 	adds.w	r9, r9, fp
 80060f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060fc:	f04f 0100 	mov.w	r1, #0
 8006100:	f04f 0200 	mov.w	r2, #0
 8006104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006108:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800610c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006110:	4689      	mov	r9, r1
 8006112:	4692      	mov	sl, r2
 8006114:	eb1b 0509 	adds.w	r5, fp, r9
 8006118:	eb4c 060a 	adc.w	r6, ip, sl
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	4619      	mov	r1, r3
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	f04f 0400 	mov.w	r4, #0
 800612e:	0094      	lsls	r4, r2, #2
 8006130:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006134:	008b      	lsls	r3, r1, #2
 8006136:	461a      	mov	r2, r3
 8006138:	4623      	mov	r3, r4
 800613a:	4628      	mov	r0, r5
 800613c:	4631      	mov	r1, r6
 800613e:	f7fa f89f 	bl	8000280 <__aeabi_uldivmod>
 8006142:	4603      	mov	r3, r0
 8006144:	460c      	mov	r4, r1
 8006146:	461a      	mov	r2, r3
 8006148:	4b9a      	ldr	r3, [pc, #616]	; (80063b4 <UART_SetConfig+0x6f4>)
 800614a:	fba3 1302 	umull	r1, r3, r3, r2
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	2164      	movs	r1, #100	; 0x64
 8006152:	fb01 f303 	mul.w	r3, r1, r3
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	3332      	adds	r3, #50	; 0x32
 800615c:	4a95      	ldr	r2, [pc, #596]	; (80063b4 <UART_SetConfig+0x6f4>)
 800615e:	fba2 2303 	umull	r2, r3, r2, r3
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006168:	4498      	add	r8, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	469b      	mov	fp, r3
 800616e:	f04f 0c00 	mov.w	ip, #0
 8006172:	46d9      	mov	r9, fp
 8006174:	46e2      	mov	sl, ip
 8006176:	eb19 0309 	adds.w	r3, r9, r9
 800617a:	eb4a 040a 	adc.w	r4, sl, sl
 800617e:	4699      	mov	r9, r3
 8006180:	46a2      	mov	sl, r4
 8006182:	eb19 090b 	adds.w	r9, r9, fp
 8006186:	eb4a 0a0c 	adc.w	sl, sl, ip
 800618a:	f04f 0100 	mov.w	r1, #0
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006196:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800619a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800619e:	4689      	mov	r9, r1
 80061a0:	4692      	mov	sl, r2
 80061a2:	eb1b 0509 	adds.w	r5, fp, r9
 80061a6:	eb4c 060a 	adc.w	r6, ip, sl
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	4619      	mov	r1, r3
 80061b0:	f04f 0200 	mov.w	r2, #0
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	f04f 0400 	mov.w	r4, #0
 80061bc:	0094      	lsls	r4, r2, #2
 80061be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061c2:	008b      	lsls	r3, r1, #2
 80061c4:	461a      	mov	r2, r3
 80061c6:	4623      	mov	r3, r4
 80061c8:	4628      	mov	r0, r5
 80061ca:	4631      	mov	r1, r6
 80061cc:	f7fa f858 	bl	8000280 <__aeabi_uldivmod>
 80061d0:	4603      	mov	r3, r0
 80061d2:	460c      	mov	r4, r1
 80061d4:	461a      	mov	r2, r3
 80061d6:	4b77      	ldr	r3, [pc, #476]	; (80063b4 <UART_SetConfig+0x6f4>)
 80061d8:	fba3 1302 	umull	r1, r3, r3, r2
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	2164      	movs	r1, #100	; 0x64
 80061e0:	fb01 f303 	mul.w	r3, r1, r3
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	3332      	adds	r3, #50	; 0x32
 80061ea:	4a72      	ldr	r2, [pc, #456]	; (80063b4 <UART_SetConfig+0x6f4>)
 80061ec:	fba2 2303 	umull	r2, r3, r2, r3
 80061f0:	095b      	lsrs	r3, r3, #5
 80061f2:	f003 020f 	and.w	r2, r3, #15
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4442      	add	r2, r8
 80061fc:	609a      	str	r2, [r3, #8]
 80061fe:	e0d0      	b.n	80063a2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006200:	f7fd f842 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8006204:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	469a      	mov	sl, r3
 800620a:	f04f 0b00 	mov.w	fp, #0
 800620e:	46d0      	mov	r8, sl
 8006210:	46d9      	mov	r9, fp
 8006212:	eb18 0308 	adds.w	r3, r8, r8
 8006216:	eb49 0409 	adc.w	r4, r9, r9
 800621a:	4698      	mov	r8, r3
 800621c:	46a1      	mov	r9, r4
 800621e:	eb18 080a 	adds.w	r8, r8, sl
 8006222:	eb49 090b 	adc.w	r9, r9, fp
 8006226:	f04f 0100 	mov.w	r1, #0
 800622a:	f04f 0200 	mov.w	r2, #0
 800622e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006232:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006236:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800623a:	4688      	mov	r8, r1
 800623c:	4691      	mov	r9, r2
 800623e:	eb1a 0508 	adds.w	r5, sl, r8
 8006242:	eb4b 0609 	adc.w	r6, fp, r9
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	4619      	mov	r1, r3
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	f04f 0300 	mov.w	r3, #0
 8006254:	f04f 0400 	mov.w	r4, #0
 8006258:	0094      	lsls	r4, r2, #2
 800625a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800625e:	008b      	lsls	r3, r1, #2
 8006260:	461a      	mov	r2, r3
 8006262:	4623      	mov	r3, r4
 8006264:	4628      	mov	r0, r5
 8006266:	4631      	mov	r1, r6
 8006268:	f7fa f80a 	bl	8000280 <__aeabi_uldivmod>
 800626c:	4603      	mov	r3, r0
 800626e:	460c      	mov	r4, r1
 8006270:	461a      	mov	r2, r3
 8006272:	4b50      	ldr	r3, [pc, #320]	; (80063b4 <UART_SetConfig+0x6f4>)
 8006274:	fba3 2302 	umull	r2, r3, r3, r2
 8006278:	095b      	lsrs	r3, r3, #5
 800627a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	469b      	mov	fp, r3
 8006282:	f04f 0c00 	mov.w	ip, #0
 8006286:	46d9      	mov	r9, fp
 8006288:	46e2      	mov	sl, ip
 800628a:	eb19 0309 	adds.w	r3, r9, r9
 800628e:	eb4a 040a 	adc.w	r4, sl, sl
 8006292:	4699      	mov	r9, r3
 8006294:	46a2      	mov	sl, r4
 8006296:	eb19 090b 	adds.w	r9, r9, fp
 800629a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800629e:	f04f 0100 	mov.w	r1, #0
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062b2:	4689      	mov	r9, r1
 80062b4:	4692      	mov	sl, r2
 80062b6:	eb1b 0509 	adds.w	r5, fp, r9
 80062ba:	eb4c 060a 	adc.w	r6, ip, sl
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	4619      	mov	r1, r3
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	f04f 0300 	mov.w	r3, #0
 80062cc:	f04f 0400 	mov.w	r4, #0
 80062d0:	0094      	lsls	r4, r2, #2
 80062d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062d6:	008b      	lsls	r3, r1, #2
 80062d8:	461a      	mov	r2, r3
 80062da:	4623      	mov	r3, r4
 80062dc:	4628      	mov	r0, r5
 80062de:	4631      	mov	r1, r6
 80062e0:	f7f9 ffce 	bl	8000280 <__aeabi_uldivmod>
 80062e4:	4603      	mov	r3, r0
 80062e6:	460c      	mov	r4, r1
 80062e8:	461a      	mov	r2, r3
 80062ea:	4b32      	ldr	r3, [pc, #200]	; (80063b4 <UART_SetConfig+0x6f4>)
 80062ec:	fba3 1302 	umull	r1, r3, r3, r2
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	2164      	movs	r1, #100	; 0x64
 80062f4:	fb01 f303 	mul.w	r3, r1, r3
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	3332      	adds	r3, #50	; 0x32
 80062fe:	4a2d      	ldr	r2, [pc, #180]	; (80063b4 <UART_SetConfig+0x6f4>)
 8006300:	fba2 2303 	umull	r2, r3, r2, r3
 8006304:	095b      	lsrs	r3, r3, #5
 8006306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800630a:	4498      	add	r8, r3
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	469b      	mov	fp, r3
 8006310:	f04f 0c00 	mov.w	ip, #0
 8006314:	46d9      	mov	r9, fp
 8006316:	46e2      	mov	sl, ip
 8006318:	eb19 0309 	adds.w	r3, r9, r9
 800631c:	eb4a 040a 	adc.w	r4, sl, sl
 8006320:	4699      	mov	r9, r3
 8006322:	46a2      	mov	sl, r4
 8006324:	eb19 090b 	adds.w	r9, r9, fp
 8006328:	eb4a 0a0c 	adc.w	sl, sl, ip
 800632c:	f04f 0100 	mov.w	r1, #0
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006338:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800633c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006340:	4689      	mov	r9, r1
 8006342:	4692      	mov	sl, r2
 8006344:	eb1b 0509 	adds.w	r5, fp, r9
 8006348:	eb4c 060a 	adc.w	r6, ip, sl
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	4619      	mov	r1, r3
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	f04f 0300 	mov.w	r3, #0
 800635a:	f04f 0400 	mov.w	r4, #0
 800635e:	0094      	lsls	r4, r2, #2
 8006360:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006364:	008b      	lsls	r3, r1, #2
 8006366:	461a      	mov	r2, r3
 8006368:	4623      	mov	r3, r4
 800636a:	4628      	mov	r0, r5
 800636c:	4631      	mov	r1, r6
 800636e:	f7f9 ff87 	bl	8000280 <__aeabi_uldivmod>
 8006372:	4603      	mov	r3, r0
 8006374:	460c      	mov	r4, r1
 8006376:	461a      	mov	r2, r3
 8006378:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <UART_SetConfig+0x6f4>)
 800637a:	fba3 1302 	umull	r1, r3, r3, r2
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	2164      	movs	r1, #100	; 0x64
 8006382:	fb01 f303 	mul.w	r3, r1, r3
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	3332      	adds	r3, #50	; 0x32
 800638c:	4a09      	ldr	r2, [pc, #36]	; (80063b4 <UART_SetConfig+0x6f4>)
 800638e:	fba2 2303 	umull	r2, r3, r2, r3
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	f003 020f 	and.w	r2, r3, #15
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4442      	add	r2, r8
 800639e:	609a      	str	r2, [r3, #8]
}
 80063a0:	e7ff      	b.n	80063a2 <UART_SetConfig+0x6e2>
 80063a2:	bf00      	nop
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ac:	40011000 	.word	0x40011000
 80063b0:	40011400 	.word	0x40011400
 80063b4:	51eb851f 	.word	0x51eb851f

080063b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063b8:	b084      	sub	sp, #16
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	f107 001c 	add.w	r0, r7, #28
 80063c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d122      	bne.n	8006416 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80063e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d105      	bne.n	800640a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fa5c 	bl	80068c8 <USB_CoreReset>
 8006410:	4603      	mov	r3, r0
 8006412:	73fb      	strb	r3, [r7, #15]
 8006414:	e01a      	b.n	800644c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fa50 	bl	80068c8 <USB_CoreReset>
 8006428:	4603      	mov	r3, r0
 800642a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800642c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	d106      	bne.n	8006440 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	639a      	str	r2, [r3, #56]	; 0x38
 800643e:	e005      	b.n	800644c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800644c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644e:	2b01      	cmp	r3, #1
 8006450:	d10b      	bne.n	800646a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f043 0206 	orr.w	r2, r3, #6
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f043 0220 	orr.w	r2, r3, #32
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800646a:	7bfb      	ldrb	r3, [r7, #15]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006476:	b004      	add	sp, #16
 8006478:	4770      	bx	lr

0800647a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f023 0201 	bic.w	r2, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d106      	bne.n	80064c8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	60da      	str	r2, [r3, #12]
 80064c6:	e00b      	b.n	80064e0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	60da      	str	r2, [r3, #12]
 80064da:	e001      	b.n	80064e0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e003      	b.n	80064e8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80064e0:	2032      	movs	r0, #50	; 0x32
 80064e2:	f7fa f8bf 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064f0:	b084      	sub	sp, #16
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b086      	sub	sp, #24
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80064fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800650a:	2300      	movs	r3, #0
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	e009      	b.n	8006524 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	3340      	adds	r3, #64	; 0x40
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	2200      	movs	r2, #0
 800651c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	3301      	adds	r3, #1
 8006522:	613b      	str	r3, [r7, #16]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	2b0e      	cmp	r3, #14
 8006528:	d9f2      	bls.n	8006510 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800652a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d112      	bne.n	8006556 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
 8006554:	e00b      	b.n	800656e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006574:	461a      	mov	r2, r3
 8006576:	2300      	movs	r3, #0
 8006578:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006580:	4619      	mov	r1, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006588:	461a      	mov	r2, r3
 800658a:	680b      	ldr	r3, [r1, #0]
 800658c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800658e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006590:	2b01      	cmp	r3, #1
 8006592:	d10c      	bne.n	80065ae <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d104      	bne.n	80065a4 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800659a:	2100      	movs	r1, #0
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f961 	bl	8006864 <USB_SetDevSpeed>
 80065a2:	e008      	b.n	80065b6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065a4:	2101      	movs	r1, #1
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f95c 	bl	8006864 <USB_SetDevSpeed>
 80065ac:	e003      	b.n	80065b6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065ae:	2103      	movs	r1, #3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f957 	bl	8006864 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065b6:	2110      	movs	r1, #16
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f90b 	bl	80067d4 <USB_FlushTxFifo>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f929 	bl	8006820 <USB_FlushRxFifo>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	461a      	mov	r2, r3
 80065e0:	2300      	movs	r3, #0
 80065e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ea:	461a      	mov	r2, r3
 80065ec:	2300      	movs	r3, #0
 80065ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f6:	461a      	mov	r2, r3
 80065f8:	2300      	movs	r3, #0
 80065fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065fc:	2300      	movs	r3, #0
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	e043      	b.n	800668a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006618:	d118      	bne.n	800664c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662c:	461a      	mov	r2, r3
 800662e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	e013      	b.n	800665e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006642:	461a      	mov	r2, r3
 8006644:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e008      	b.n	800665e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006658:	461a      	mov	r2, r3
 800665a:	2300      	movs	r3, #0
 800665c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666a:	461a      	mov	r2, r3
 800666c:	2300      	movs	r3, #0
 800666e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667c:	461a      	mov	r2, r3
 800667e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006682:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	3301      	adds	r3, #1
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	429a      	cmp	r2, r3
 8006690:	d3b7      	bcc.n	8006602 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006692:	2300      	movs	r3, #0
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	e043      	b.n	8006720 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ae:	d118      	bne.n	80066e2 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c2:	461a      	mov	r2, r3
 80066c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	e013      	b.n	80066f4 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d8:	461a      	mov	r2, r3
 80066da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	e008      	b.n	80066f4 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ee:	461a      	mov	r2, r3
 80066f0:	2300      	movs	r3, #0
 80066f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006700:	461a      	mov	r2, r3
 8006702:	2300      	movs	r3, #0
 8006704:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006712:	461a      	mov	r2, r3
 8006714:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006718:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	3301      	adds	r3, #1
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	429a      	cmp	r2, r3
 8006726:	d3b7      	bcc.n	8006698 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800673a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	2b01      	cmp	r3, #1
 8006740:	d111      	bne.n	8006766 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006748:	461a      	mov	r2, r3
 800674a:	4b20      	ldr	r3, [pc, #128]	; (80067cc <USB_DevInit+0x2dc>)
 800674c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800675c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006760:	f043 0303 	orr.w	r3, r3, #3
 8006764:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006772:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	2b00      	cmp	r3, #0
 8006778:	d105      	bne.n	8006786 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f043 0210 	orr.w	r2, r3, #16
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699a      	ldr	r2, [r3, #24]
 800678a:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <USB_DevInit+0x2e0>)
 800678c:	4313      	orrs	r3, r2
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f043 0208 	orr.w	r2, r3, #8
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d107      	bne.n	80067ba <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067b2:	f043 0304 	orr.w	r3, r3, #4
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067c6:	b004      	add	sp, #16
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	00800100 	.word	0x00800100
 80067d0:	803c3800 	.word	0x803c3800

080067d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	019b      	lsls	r3, r3, #6
 80067e6:	f043 0220 	orr.w	r2, r3, #32
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4a09      	ldr	r2, [pc, #36]	; (800681c <USB_FlushTxFifo+0x48>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d901      	bls.n	8006800 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e006      	b.n	800680e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	f003 0320 	and.w	r3, r3, #32
 8006808:	2b20      	cmp	r3, #32
 800680a:	d0f0      	beq.n	80067ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	00030d40 	.word	0x00030d40

08006820 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2210      	movs	r2, #16
 8006830:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3301      	adds	r3, #1
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4a09      	ldr	r2, [pc, #36]	; (8006860 <USB_FlushRxFifo+0x40>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d901      	bls.n	8006844 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e006      	b.n	8006852 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	f003 0310 	and.w	r3, r3, #16
 800684c:	2b10      	cmp	r3, #16
 800684e:	d0f0      	beq.n	8006832 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	00030d40 	.word	0x00030d40

08006864 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	68f9      	ldr	r1, [r7, #12]
 8006880:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006884:	4313      	orrs	r3, r2
 8006886:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068b0:	f043 0302 	orr.w	r3, r3, #2
 80068b4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80068b6:	2003      	movs	r0, #3
 80068b8:	f7f9 fed4 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
	...

080068c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3301      	adds	r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4a13      	ldr	r2, [pc, #76]	; (800692c <USB_CoreReset+0x64>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d901      	bls.n	80068e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e01b      	b.n	800691e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	daf2      	bge.n	80068d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f043 0201 	orr.w	r2, r3, #1
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3301      	adds	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4a09      	ldr	r2, [pc, #36]	; (800692c <USB_CoreReset+0x64>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d901      	bls.n	8006910 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e006      	b.n	800691e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b01      	cmp	r3, #1
 800691a:	d0f0      	beq.n	80068fe <USB_CoreReset+0x36>

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	00030d40 	.word	0x00030d40

08006930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006930:	b590      	push	{r4, r7, lr}
 8006932:	b0a9      	sub	sp, #164	; 0xa4
 8006934:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006936:	f7f9 fe23 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800693a:	f000 fa87 	bl	8006e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800693e:	f000 fe7d 	bl	800763c <MX_GPIO_Init>
  MX_TIM9_Init();
 8006942:	f000 fd6b 	bl	800741c <MX_TIM9_Init>
  MX_SPI2_Init();
 8006946:	f000 fc21 	bl	800718c <MX_SPI2_Init>
  MX_ADC1_Init();
 800694a:	f000 faeb 	bl	8006f24 <MX_ADC1_Init>
  MX_ADC2_Init();
 800694e:	f000 fb3b 	bl	8006fc8 <MX_ADC2_Init>
  MX_CAN1_Init();
 8006952:	f000 fb8b 	bl	800706c <MX_CAN1_Init>
  MX_I2C1_Init();
 8006956:	f000 fbbd 	bl	80070d4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800695a:	f000 fbe9 	bl	8007130 <MX_I2C2_Init>
  MX_USB_OTG_FS_PCD_Init();
 800695e:	f000 fe3f 	bl	80075e0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8006962:	f000 fc4b 	bl	80071fc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8006966:	f000 fe11 	bl	800758c <MX_USART3_UART_Init>
  MX_TIM8_Init();
 800696a:	f000 fcff 	bl	800736c <MX_TIM8_Init>
  MX_TIM13_Init();
 800696e:	f000 fdc7 	bl	8007500 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8006972:	2100      	movs	r1, #0
 8006974:	486b      	ldr	r0, [pc, #428]	; (8006b24 <main+0x1f4>)
 8006976:	f7fd fbc3 	bl	8004100 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2);
 800697a:	2104      	movs	r1, #4
 800697c:	4869      	ldr	r0, [pc, #420]	; (8006b24 <main+0x1f4>)
 800697e:	f7fd fb4b 	bl	8004018 <HAL_TIM_OC_Start>



  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 8006982:	2201      	movs	r2, #1
 8006984:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006988:	4867      	ldr	r0, [pc, #412]	; (8006b28 <main+0x1f8>)
 800698a:	f7fa ff79 	bl	8001880 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 800698e:	2200      	movs	r2, #0
 8006990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006994:	4864      	ldr	r0, [pc, #400]	; (8006b28 <main+0x1f8>)
 8006996:	f7fa ff73 	bl	8001880 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 800699a:	2200      	movs	r2, #0
 800699c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80069a0:	4861      	ldr	r0, [pc, #388]	; (8006b28 <main+0x1f8>)
 80069a2:	f7fa ff6d 	bl	8001880 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 80069a6:	2201      	movs	r2, #1
 80069a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069ac:	485e      	ldr	r0, [pc, #376]	; (8006b28 <main+0x1f8>)
 80069ae:	f7fa ff67 	bl	8001880 <HAL_GPIO_WritePin>
//  for(;;)
//   {
//   HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
//   HAL_Delay(600);
//   }
  int i=0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  //strcpy((char*)buf, "YUUP");
  sprintf((char*)buf, "START");
 80069b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80069bc:	4a5b      	ldr	r2, [pc, #364]	; (8006b2c <main+0x1fc>)
 80069be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069c2:	6018      	str	r0, [r3, #0]
 80069c4:	3304      	adds	r3, #4
 80069c6:	8019      	strh	r1, [r3, #0]
  ch='t';
 80069c8:	2374      	movs	r3, #116	; 0x74
 80069ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  int blink_duration = 100;
 80069ce:	2364      	movs	r3, #100	; 0x64
 80069d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL );
 80069d4:	213c      	movs	r1, #60	; 0x3c
 80069d6:	4856      	ldr	r0, [pc, #344]	; (8006b30 <main+0x200>)
 80069d8:	f7fd fc97 	bl	800430a <HAL_TIM_Encoder_Start_IT>
//  HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, 0x01, 1, HAL_MAX_DELAY);
//  HAL_Delay(2);

  // --- MOTOR DRIVER ----------------------------------------------------
  //EN_GATE
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80069dc:	2100      	movs	r1, #0
 80069de:	4855      	ldr	r0, [pc, #340]	; (8006b34 <main+0x204>)
 80069e0:	f7fd fb8e 	bl	8004100 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80069e4:	2100      	movs	r1, #0
 80069e6:	4853      	ldr	r0, [pc, #332]	; (8006b34 <main+0x204>)
 80069e8:	f7fe fc73 	bl	80052d2 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80069ec:	2104      	movs	r1, #4
 80069ee:	4851      	ldr	r0, [pc, #324]	; (8006b34 <main+0x204>)
 80069f0:	f7fd fb86 	bl	8004100 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 80069f4:	2104      	movs	r1, #4
 80069f6:	484f      	ldr	r0, [pc, #316]	; (8006b34 <main+0x204>)
 80069f8:	f7fe fc6b 	bl	80052d2 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80069fc:	2108      	movs	r1, #8
 80069fe:	484d      	ldr	r0, [pc, #308]	; (8006b34 <main+0x204>)
 8006a00:	f7fd fb7e 	bl	8004100 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8006a04:	2108      	movs	r1, #8
 8006a06:	484b      	ldr	r0, [pc, #300]	; (8006b34 <main+0x204>)
 8006a08:	f7fe fc63 	bl	80052d2 <HAL_TIMEx_PWMN_Start>

  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a12:	4845      	ldr	r0, [pc, #276]	; (8006b28 <main+0x1f8>)
 8006a14:	f7fa ff34 	bl	8001880 <HAL_GPIO_WritePin>

  // --- ADC --------------------------------------
  ADC_ChannelConfTypeDef adcChannel;
  adcChannel.Channel = ADC_CHANNEL_14;
 8006a18:	230e      	movs	r3, #14
 8006a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
	adcChannel.Rank = 1;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	663b      	str	r3, [r7, #96]	; 0x60
	adcChannel.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8006a20:	2307      	movs	r3, #7
 8006a22:	667b      	str	r3, [r7, #100]	; 0x64
	adcChannel.Offset = 0;
 8006a24:	2300      	movs	r3, #0
 8006a26:	66bb      	str	r3, [r7, #104]	; 0x68

	HAL_ADC_ConfigChannel(&hadc2, &adcChannel);
 8006a28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4842      	ldr	r0, [pc, #264]	; (8006b38 <main+0x208>)
 8006a30:	f7fa f934 	bl	8000c9c <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc2);
 8006a34:	4840      	ldr	r0, [pc, #256]	; (8006b38 <main+0x208>)
 8006a36:	f7f9 fe7b 	bl	8000730 <HAL_ADC_Start>
  	//
  	//  	}

  	// --- MOTOR DRIVER ----------------------------------------------------
  	// --- PWM pulses
  	TIM1->CCR1 = 20;
 8006a3a:	4b40      	ldr	r3, [pc, #256]	; (8006b3c <main+0x20c>)
 8006a3c:	2214      	movs	r2, #20
 8006a3e:	635a      	str	r2, [r3, #52]	; 0x34

  	// --- ADC ----------------------------------------------------
  	//see https://visualgdb.com/tutorials/arm/stm32/adc/
  	//uint32_t a_val;
  	//a_val = HAL_ADC_GetValue(&hadc2)
  	HAL_ADC_Start(&hadc2);
 8006a40:	483d      	ldr	r0, [pc, #244]	; (8006b38 <main+0x208>)
 8006a42:	f7f9 fe75 	bl	8000730 <HAL_ADC_Start>
  	if (HAL_ADC_PollForConversion(&hadc2, 2000) == HAL_OK)
 8006a46:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006a4a:	483b      	ldr	r0, [pc, #236]	; (8006b38 <main+0x208>)
 8006a4c:	f7f9 ff36 	bl	80008bc <HAL_ADC_PollForConversion>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d109      	bne.n	8006a6a <main+0x13a>
		{
				g_ADCValue = HAL_ADC_GetValue(&hadc2);
 8006a56:	4838      	ldr	r0, [pc, #224]	; (8006b38 <main+0x208>)
 8006a58:	f7fa f8f5 	bl	8000c46 <HAL_ADC_GetValue>
 8006a5c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
				g_MeasurementNumber++;
 8006a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a64:	3301      	adds	r3, #1
 8006a66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  	// ---I2C2 IMU ------------------------------------------------
  	//see: https://www.youtube.com/watch?v=isOekyygpR8
  	//b1101000
  	char accel_char[20];

  	buf[0] = 0x6B; //power register
 8006a6a:	236b      	movs	r3, #107	; 0x6b
 8006a6c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
  	buf[1] = 0x00; //switch on
 8006a70:	2300      	movs	r3, #0
 8006a72:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
		ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 2, HAL_MAX_DELAY);
 8006a76:	23d0      	movs	r3, #208	; 0xd0
 8006a78:	b299      	uxth	r1, r3
 8006a7a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8006a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	2302      	movs	r3, #2
 8006a86:	482e      	ldr	r0, [pc, #184]	; (8006b40 <main+0x210>)
 8006a88:	f7fb f87e 	bl	8001b88 <HAL_I2C_Master_Transmit>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (ret != HAL_OK){
 8006a92:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d008      	beq.n	8006aac <main+0x17c>
			strcpy((char*)buf, "Error IMU T\r\n");
 8006a9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006a9e:	4a29      	ldr	r2, [pc, #164]	; (8006b44 <main+0x214>)
 8006aa0:	461c      	mov	r4, r3
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006aa6:	c407      	stmia	r4!, {r0, r1, r2}
 8006aa8:	8023      	strh	r3, [r4, #0]
 8006aaa:	e002      	b.n	8006ab2 <main+0x182>
		} else {
			buf[0] = 0x00;
 8006aac:	2300      	movs	r3, #0
 8006aae:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
		}

  	buf[0] = 0x3B;
 8006ab2:	233b      	movs	r3, #59	; 0x3b
 8006ab4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
  	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8006ab8:	23d0      	movs	r3, #208	; 0xd0
 8006aba:	b299      	uxth	r1, r3
 8006abc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8006ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	481d      	ldr	r0, [pc, #116]	; (8006b40 <main+0x210>)
 8006aca:	f7fb f85d 	bl	8001b88 <HAL_I2C_Master_Transmit>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  	if (ret != HAL_OK){
 8006ad4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d008      	beq.n	8006aee <main+0x1be>
  		strcpy((char*)buf, "Error IMU T\r\n");
 8006adc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006ae0:	4a18      	ldr	r2, [pc, #96]	; (8006b44 <main+0x214>)
 8006ae2:	461c      	mov	r4, r3
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ae8:	c407      	stmia	r4!, {r0, r1, r2}
 8006aea:	8023      	strh	r3, [r4, #0]
 8006aec:	e03a      	b.n	8006b64 <main+0x234>
  	} else {
  		ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8006aee:	23d0      	movs	r3, #208	; 0xd0
 8006af0:	b299      	uxth	r1, r3
 8006af2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8006af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	2301      	movs	r3, #1
 8006afe:	4810      	ldr	r0, [pc, #64]	; (8006b40 <main+0x210>)
 8006b00:	f7fb f940 	bl	8001d84 <HAL_I2C_Master_Receive>
 8006b04:	4603      	mov	r3, r0
 8006b06:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (ret != HAL_OK){
 8006b0a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d01c      	beq.n	8006b4c <main+0x21c>
				strcpy((char*)buf, "Error IMU R\r\n");
 8006b12:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006b16:	4a0c      	ldr	r2, [pc, #48]	; (8006b48 <main+0x218>)
 8006b18:	461c      	mov	r4, r3
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b1e:	c407      	stmia	r4!, {r0, r1, r2}
 8006b20:	8023      	strh	r3, [r4, #0]
 8006b22:	e01f      	b.n	8006b64 <main+0x234>
 8006b24:	20000738 	.word	0x20000738
 8006b28:	40021000 	.word	0x40021000
 8006b2c:	08008ba8 	.word	0x08008ba8
 8006b30:	200000f4 	.word	0x200000f4
 8006b34:	200006f8 	.word	0x200006f8
 8006b38:	20000174 	.word	0x20000174
 8006b3c:	40010000 	.word	0x40010000
 8006b40:	20000618 	.word	0x20000618
 8006b44:	08008bb0 	.word	0x08008bb0
 8006b48:	08008bc0 	.word	0x08008bc0
			} else {
				accel8l = (int8_t)buf[0];
 8006b4c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8006b50:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
				sprintf((char*)accel_char, "%u m\r\n", (int)accel8l);
 8006b54:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8006b58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b5c:	49af      	ldr	r1, [pc, #700]	; (8006e1c <main+0x4ec>)
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f001 fbae 	bl	80082c0 <siprintf>


  	// --- SPI ----------------------------------------------------
  	//ROT0_nCS_GPIO_Port->BSRR = (uint32_t)ROT0_nCS_Pin << 16U;

  	uint16_t address = 0x0000;
 8006b64:	2300      	movs	r3, #0
 8006b66:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  	uint16_t value = 0x0000;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

  	// --- set ABI and enable PWM
  	//TODO: Error handling
  	address = AS_ADDR_SETTINGS1 | AS_WRITE ;
 8006b70:	2318      	movs	r3, #24
 8006b72:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  	value = 0x0080 | AS_ODD;
 8006b76:	f248 0380 	movw	r3, #32896	; 0x8080
 8006b7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b84:	48a6      	ldr	r0, [pc, #664]	; (8006e20 <main+0x4f0>)
 8006b86:	f7fa fe7b 	bl	8001880 <HAL_GPIO_WritePin>
  	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);
 8006b8a:	f107 0146 	add.w	r1, r7, #70	; 0x46
 8006b8e:	2301      	movs	r3, #1
 8006b90:	2201      	movs	r2, #1
 8006b92:	48a4      	ldr	r0, [pc, #656]	; (8006e24 <main+0x4f4>)
 8006b94:	f7fc fc04 	bl	80033a0 <HAL_SPI_Transmit>
  	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b9e:	48a0      	ldr	r0, [pc, #640]	; (8006e20 <main+0x4f0>)
 8006ba0:	f7fa fe6e 	bl	8001880 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006baa:	489d      	ldr	r0, [pc, #628]	; (8006e20 <main+0x4f0>)
 8006bac:	f7fa fe68 	bl	8001880 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint16_t *)&value, 1, 1);
 8006bb0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	489a      	ldr	r0, [pc, #616]	; (8006e24 <main+0x4f4>)
 8006bba:	f7fc fbf1 	bl	80033a0 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bc4:	4896      	ldr	r0, [pc, #600]	; (8006e20 <main+0x4f0>)
 8006bc6:	f7fa fe5b 	bl	8001880 <HAL_GPIO_WritePin>

		// --- set steps 2000steps 500 pulses
		address = AS_ADDR_SETTINGS2 | AS_WRITE ;
 8006bca:	f248 0319 	movw	r3, #32793	; 0x8019
 8006bce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		value = 0x0020 | AS_ODD;
 8006bd2:	f248 0320 	movw	r3, #32800	; 0x8020
 8006bd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006be0:	488f      	ldr	r0, [pc, #572]	; (8006e20 <main+0x4f0>)
 8006be2:	f7fa fe4d 	bl	8001880 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);
 8006be6:	f107 0146 	add.w	r1, r7, #70	; 0x46
 8006bea:	2301      	movs	r3, #1
 8006bec:	2201      	movs	r2, #1
 8006bee:	488d      	ldr	r0, [pc, #564]	; (8006e24 <main+0x4f4>)
 8006bf0:	f7fc fbd6 	bl	80033a0 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bfa:	4889      	ldr	r0, [pc, #548]	; (8006e20 <main+0x4f0>)
 8006bfc:	f7fa fe40 	bl	8001880 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006c00:	2200      	movs	r2, #0
 8006c02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c06:	4886      	ldr	r0, [pc, #536]	; (8006e20 <main+0x4f0>)
 8006c08:	f7fa fe3a 	bl	8001880 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint16_t *)&value, 1, 1);
 8006c0c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8006c10:	2301      	movs	r3, #1
 8006c12:	2201      	movs	r2, #1
 8006c14:	4883      	ldr	r0, [pc, #524]	; (8006e24 <main+0x4f4>)
 8006c16:	f7fc fbc3 	bl	80033a0 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c20:	487f      	ldr	r0, [pc, #508]	; (8006e20 <main+0x4f0>)
 8006c22:	f7fa fe2d 	bl	8001880 <HAL_GPIO_WritePin>

		// --- read angle
		address = 0x3FFE | AS_READ ;
 8006c26:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8006c2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		uint16_t angle = 0x0000;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006c34:	2200      	movs	r2, #0
 8006c36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c3a:	4879      	ldr	r0, [pc, #484]	; (8006e20 <main+0x4f0>)
 8006c3c:	f7fa fe20 	bl	8001880 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);//this is the value
 8006c40:	f107 0146 	add.w	r1, r7, #70	; 0x46
 8006c44:	2301      	movs	r3, #1
 8006c46:	2201      	movs	r2, #1
 8006c48:	4876      	ldr	r0, [pc, #472]	; (8006e24 <main+0x4f4>)
 8006c4a:	f7fc fba9 	bl	80033a0 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c54:	4872      	ldr	r0, [pc, #456]	; (8006e20 <main+0x4f0>)
 8006c56:	f7fa fe13 	bl	8001880 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c60:	486f      	ldr	r0, [pc, #444]	; (8006e20 <main+0x4f0>)
 8006c62:	f7fa fe0d 	bl	8001880 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi2, (uint16_t *)&angle, 1, 1);
 8006c66:	f107 0142 	add.w	r1, r7, #66	; 0x42
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	486d      	ldr	r0, [pc, #436]	; (8006e24 <main+0x4f4>)
 8006c70:	f7fc fcca 	bl	8003608 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006c74:	2201      	movs	r2, #1
 8006c76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c7a:	4869      	ldr	r0, [pc, #420]	; (8006e20 <main+0x4f0>)
 8006c7c:	f7fa fe00 	bl	8001880 <HAL_GPIO_WritePin>

		// --- ENCODER --------------------------------------------------------------
		//Follow: http://www.emcu.eu/how-to-interface-the-rotary-encoder-to-stm32-cube-mx-atollic/
		//I think for encoder mode, you should be using HAL_TIM_IC_CaptureCallback and HAL_TIM_Encoder_Start_IT.
		//code? https://stm32f4-discovery.net/2014/08/library-26-rotary-encoder-stm32f4/
		EncVal = TIM8->CNT;
 8006c80:	4b69      	ldr	r3, [pc, #420]	; (8006e28 <main+0x4f8>)
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	b21a      	sxth	r2, r3
 8006c86:	4b69      	ldr	r3, [pc, #420]	; (8006e2c <main+0x4fc>)
 8006c88:	801a      	strh	r2, [r3, #0]


  	// --- GPIO ----------------------------------------------------
  	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8006c8a:	2108      	movs	r1, #8
 8006c8c:	4868      	ldr	r0, [pc, #416]	; (8006e30 <main+0x500>)
 8006c8e:	f7fa fe10 	bl	80018b2 <HAL_GPIO_TogglePin>
	  //HAL_GPIO_TogglePin(GENERATOR_GPIO_Port, GENERATOR_Pin);

  	//ROT0_nCS_GPIO_Port->BSRR = (uint32_t)ROT0_nCS_Pin << 16U;

	  GPIOE->BSRR = GPIO_PIN_4; //switches LD2
 8006c92:	4b67      	ldr	r3, [pc, #412]	; (8006e30 <main+0x500>)
 8006c94:	2210      	movs	r2, #16
 8006c96:	619a      	str	r2, [r3, #24]
//			TIM1->CCR2 = 0;
//			//GPIOE->BSRR = (uint32_t)GPIO_PIN_8 << 16U;
//		}

	  // --- TIMERS ----------------------------------------------------
	  TIM9->CCR1 = blink_duration;
 8006c98:	4a66      	ldr	r2, [pc, #408]	; (8006e34 <main+0x504>)
 8006c9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c9e:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM9->CCR2 = blink_duration;
 8006ca0:	4a64      	ldr	r2, [pc, #400]	; (8006e34 <main+0x504>)
 8006ca2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ca6:	6393      	str	r3, [r2, #56]	; 0x38



	  i++;
 8006ca8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006cac:	3301      	adds	r3, #1
 8006cae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  // --- UART ----------------------------------------------------
	  char buffer[20];
	  char buffer0[20];
	  char buffer1[20];
	  //sprintf(buffer, "%f", Tval);
	  angle &= AS_DATA_MASK;
 8006cb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006cb6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	  itoa(EncVal, buffer0, 10);
 8006cc0:	4b5a      	ldr	r3, [pc, #360]	; (8006e2c <main+0x4fc>)
 8006cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f107 0318 	add.w	r3, r7, #24
 8006ccc:	220a      	movs	r2, #10
 8006cce:	4619      	mov	r1, r3
 8006cd0:	f001 faec 	bl	80082ac <itoa>
	  itoa(angle, buffer, 10);
 8006cd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006cde:	220a      	movs	r2, #10
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	f001 fae3 	bl	80082ac <itoa>
	  itoa(g_ADCValue, buffer1, 10);
 8006ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cea:	1d39      	adds	r1, r7, #4
 8006cec:	220a      	movs	r2, #10
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f001 fadc 	bl	80082ac <itoa>

	  HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 8006cf4:	f107 036f 	add.w	r3, r7, #111	; 0x6f
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	484e      	ldr	r0, [pc, #312]	; (8006e38 <main+0x508>)
 8006cfe:	f7fe fd00 	bl	8005702 <HAL_UART_Receive_IT>

	  sprintf((char*)buf, strcat(strcat(strcat(strcat(strcat(buffer0, "_"), strncat(buffer, &ch, 1)),"#"),strcat(buffer1, "*")), strcat(accel_char, "_\r\n")  ) );
 8006d02:	f107 0318 	add.w	r3, r7, #24
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7f9 fa62 	bl	80001d0 <strlen>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f107 0318 	add.w	r3, r7, #24
 8006d14:	4413      	add	r3, r2
 8006d16:	4949      	ldr	r1, [pc, #292]	; (8006e3c <main+0x50c>)
 8006d18:	461a      	mov	r2, r3
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	8013      	strh	r3, [r2, #0]
 8006d20:	f107 0418 	add.w	r4, r7, #24
 8006d24:	f107 016f 	add.w	r1, r7, #111	; 0x6f
 8006d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 faf5 	bl	800831e <strncat>
 8006d34:	4603      	mov	r3, r0
 8006d36:	4619      	mov	r1, r3
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f001 fae1 	bl	8008300 <strcat>
 8006d3e:	4604      	mov	r4, r0
 8006d40:	4620      	mov	r0, r4
 8006d42:	f7f9 fa45 	bl	80001d0 <strlen>
 8006d46:	4603      	mov	r3, r0
 8006d48:	4423      	add	r3, r4
 8006d4a:	493d      	ldr	r1, [pc, #244]	; (8006e40 <main+0x510>)
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	460b      	mov	r3, r1
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	8013      	strh	r3, [r2, #0]
 8006d54:	1d3b      	adds	r3, r7, #4
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7f9 fa3a 	bl	80001d0 <strlen>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	461a      	mov	r2, r3
 8006d60:	1d3b      	adds	r3, r7, #4
 8006d62:	4413      	add	r3, r2
 8006d64:	4937      	ldr	r1, [pc, #220]	; (8006e44 <main+0x514>)
 8006d66:	461a      	mov	r2, r3
 8006d68:	460b      	mov	r3, r1
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	8013      	strh	r3, [r2, #0]
 8006d6e:	1d3b      	adds	r3, r7, #4
 8006d70:	4619      	mov	r1, r3
 8006d72:	4620      	mov	r0, r4
 8006d74:	f001 fac4 	bl	8008300 <strcat>
 8006d78:	4604      	mov	r4, r0
 8006d7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7f9 fa26 	bl	80001d0 <strlen>
 8006d84:	4603      	mov	r3, r0
 8006d86:	461a      	mov	r2, r3
 8006d88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006d8c:	4413      	add	r3, r2
 8006d8e:	4a2e      	ldr	r2, [pc, #184]	; (8006e48 <main+0x518>)
 8006d90:	6810      	ldr	r0, [r2, #0]
 8006d92:	6018      	str	r0, [r3, #0]
 8006d94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f001 fab0 	bl	8008300 <strcat>
 8006da0:	4602      	mov	r2, r0
 8006da2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006da6:	4611      	mov	r1, r2
 8006da8:	4618      	mov	r0, r3
 8006daa:	f001 fa89 	bl	80082c0 <siprintf>
	  HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), 1000);
 8006dae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7f9 fa0c 	bl	80001d0 <strlen>
 8006db8:	4603      	mov	r3, r0
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006dc4:	481c      	ldr	r0, [pc, #112]	; (8006e38 <main+0x508>)
 8006dc6:	f7fe fc03 	bl	80055d0 <HAL_UART_Transmit>

	  //HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);

	  switch(ch){
 8006dca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006dce:	2b73      	cmp	r3, #115	; 0x73
 8006dd0:	d00e      	beq.n	8006df0 <main+0x4c0>
 8006dd2:	2b77      	cmp	r3, #119	; 0x77
 8006dd4:	d11a      	bne.n	8006e0c <main+0x4dc>
			case 'w':
				ch='t';
 8006dd6:	2374      	movs	r3, #116	; 0x74
 8006dd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				blink_duration *= 2;
 8006ddc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				//HAL_GPIO_TogglePin(GENERATOR_GPIO_Port, GENERATOR_Pin);
				HAL_Delay(2000);
 8006de6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006dea:	f7f9 fc3b 	bl	8000664 <HAL_Delay>
				break;
 8006dee:	e014      	b.n	8006e1a <main+0x4ea>
			case 's':
				ch='t';
 8006df0:	2374      	movs	r3, #116	; 0x74
 8006df2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				blink_duration /= 2;
 8006df6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dfa:	0fda      	lsrs	r2, r3, #31
 8006dfc:	4413      	add	r3, r2
 8006dfe:	105b      	asrs	r3, r3, #1
 8006e00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				HAL_Delay(100);
 8006e04:	2064      	movs	r0, #100	; 0x64
 8006e06:	f7f9 fc2d 	bl	8000664 <HAL_Delay>
				break;
 8006e0a:	e006      	b.n	8006e1a <main+0x4ea>
			default:
				ch='t';
 8006e0c:	2374      	movs	r3, #116	; 0x74
 8006e0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				HAL_Delay(500);
 8006e12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e16:	f7f9 fc25 	bl	8000664 <HAL_Delay>
  {
 8006e1a:	e60e      	b.n	8006a3a <main+0x10a>
 8006e1c:	08008bd0 	.word	0x08008bd0
 8006e20:	40020c00 	.word	0x40020c00
 8006e24:	2000009c 	.word	0x2000009c
 8006e28:	40010400 	.word	0x40010400
 8006e2c:	200006f4 	.word	0x200006f4
 8006e30:	40021000 	.word	0x40021000
 8006e34:	40014000 	.word	0x40014000
 8006e38:	20000134 	.word	0x20000134
 8006e3c:	08008bd8 	.word	0x08008bd8
 8006e40:	08008bdc 	.word	0x08008bdc
 8006e44:	08008be0 	.word	0x08008be0
 8006e48:	08008be4 	.word	0x08008be4

08006e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b094      	sub	sp, #80	; 0x50
 8006e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006e52:	f107 0320 	add.w	r3, r7, #32
 8006e56:	2230      	movs	r2, #48	; 0x30
 8006e58:	2100      	movs	r1, #0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f001 fa28 	bl	80082b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006e60:	f107 030c 	add.w	r3, r7, #12
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	605a      	str	r2, [r3, #4]
 8006e6a:	609a      	str	r2, [r3, #8]
 8006e6c:	60da      	str	r2, [r3, #12]
 8006e6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e70:	2300      	movs	r3, #0
 8006e72:	60bb      	str	r3, [r7, #8]
 8006e74:	4b29      	ldr	r3, [pc, #164]	; (8006f1c <SystemClock_Config+0xd0>)
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	4a28      	ldr	r2, [pc, #160]	; (8006f1c <SystemClock_Config+0xd0>)
 8006e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8006e80:	4b26      	ldr	r3, [pc, #152]	; (8006f1c <SystemClock_Config+0xd0>)
 8006e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e88:	60bb      	str	r3, [r7, #8]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	607b      	str	r3, [r7, #4]
 8006e90:	4b23      	ldr	r3, [pc, #140]	; (8006f20 <SystemClock_Config+0xd4>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a22      	ldr	r2, [pc, #136]	; (8006f20 <SystemClock_Config+0xd4>)
 8006e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	4b20      	ldr	r3, [pc, #128]	; (8006f20 <SystemClock_Config+0xd4>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ea4:	607b      	str	r3, [r7, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006eac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006eb6:	2310      	movs	r3, #16
 8006eb8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006eba:	2302      	movs	r3, #2
 8006ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8006ec4:	230f      	movs	r3, #15
 8006ec6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8006ec8:	2390      	movs	r3, #144	; 0x90
 8006eca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006ecc:	2302      	movs	r3, #2
 8006ece:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8006ed0:	2305      	movs	r3, #5
 8006ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ed4:	f107 0320 	add.w	r3, r7, #32
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fb fdc1 	bl	8002a60 <HAL_RCC_OscConfig>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8006ee4:	f000 fc7c 	bl	80077e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006ee8:	230f      	movs	r3, #15
 8006eea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006eec:	2300      	movs	r3, #0
 8006eee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006efc:	f107 030c 	add.w	r3, r7, #12
 8006f00:	2100      	movs	r1, #0
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fc f81c 	bl	8002f40 <HAL_RCC_ClockConfig>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8006f0e:	f000 fc67 	bl	80077e0 <Error_Handler>
  }
}
 8006f12:	bf00      	nop
 8006f14:	3750      	adds	r7, #80	; 0x50
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	40023800 	.word	0x40023800
 8006f20:	40007000 	.word	0x40007000

08006f24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	605a      	str	r2, [r3, #4]
 8006f32:	609a      	str	r2, [r3, #8]
 8006f34:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8006f36:	4b21      	ldr	r3, [pc, #132]	; (8006fbc <MX_ADC1_Init+0x98>)
 8006f38:	4a21      	ldr	r2, [pc, #132]	; (8006fc0 <MX_ADC1_Init+0x9c>)
 8006f3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8006f3c:	4b1f      	ldr	r3, [pc, #124]	; (8006fbc <MX_ADC1_Init+0x98>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006f42:	4b1e      	ldr	r3, [pc, #120]	; (8006fbc <MX_ADC1_Init+0x98>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8006f48:	4b1c      	ldr	r3, [pc, #112]	; (8006fbc <MX_ADC1_Init+0x98>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006f4e:	4b1b      	ldr	r3, [pc, #108]	; (8006fbc <MX_ADC1_Init+0x98>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006f54:	4b19      	ldr	r3, [pc, #100]	; (8006fbc <MX_ADC1_Init+0x98>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006f5c:	4b17      	ldr	r3, [pc, #92]	; (8006fbc <MX_ADC1_Init+0x98>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006f62:	4b16      	ldr	r3, [pc, #88]	; (8006fbc <MX_ADC1_Init+0x98>)
 8006f64:	4a17      	ldr	r2, [pc, #92]	; (8006fc4 <MX_ADC1_Init+0xa0>)
 8006f66:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006f68:	4b14      	ldr	r3, [pc, #80]	; (8006fbc <MX_ADC1_Init+0x98>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8006f6e:	4b13      	ldr	r3, [pc, #76]	; (8006fbc <MX_ADC1_Init+0x98>)
 8006f70:	2201      	movs	r2, #1
 8006f72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006f74:	4b11      	ldr	r3, [pc, #68]	; (8006fbc <MX_ADC1_Init+0x98>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006f7c:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <MX_ADC1_Init+0x98>)
 8006f7e:	2201      	movs	r2, #1
 8006f80:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006f82:	480e      	ldr	r0, [pc, #56]	; (8006fbc <MX_ADC1_Init+0x98>)
 8006f84:	f7f9 fb90 	bl	80006a8 <HAL_ADC_Init>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8006f8e:	f000 fc27 	bl	80077e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006f92:	2302      	movs	r3, #2
 8006f94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006f96:	2301      	movs	r3, #1
 8006f98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006f9e:	463b      	mov	r3, r7
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4806      	ldr	r0, [pc, #24]	; (8006fbc <MX_ADC1_Init+0x98>)
 8006fa4:	f7f9 fe7a 	bl	8000c9c <HAL_ADC_ConfigChannel>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8006fae:	f000 fc17 	bl	80077e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006fb2:	bf00      	nop
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	2000066c 	.word	0x2000066c
 8006fc0:	40012000 	.word	0x40012000
 8006fc4:	0f000001 	.word	0x0f000001

08006fc8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006fce:	463b      	mov	r3, r7
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	605a      	str	r2, [r3, #4]
 8006fd6:	609a      	str	r2, [r3, #8]
 8006fd8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8006fda:	4b21      	ldr	r3, [pc, #132]	; (8007060 <MX_ADC2_Init+0x98>)
 8006fdc:	4a21      	ldr	r2, [pc, #132]	; (8007064 <MX_ADC2_Init+0x9c>)
 8006fde:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8006fe0:	4b1f      	ldr	r3, [pc, #124]	; (8007060 <MX_ADC2_Init+0x98>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006fe6:	4b1e      	ldr	r3, [pc, #120]	; (8007060 <MX_ADC2_Init+0x98>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8006fec:	4b1c      	ldr	r3, [pc, #112]	; (8007060 <MX_ADC2_Init+0x98>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006ff2:	4b1b      	ldr	r3, [pc, #108]	; (8007060 <MX_ADC2_Init+0x98>)
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006ff8:	4b19      	ldr	r3, [pc, #100]	; (8007060 <MX_ADC2_Init+0x98>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007000:	4b17      	ldr	r3, [pc, #92]	; (8007060 <MX_ADC2_Init+0x98>)
 8007002:	2200      	movs	r2, #0
 8007004:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007006:	4b16      	ldr	r3, [pc, #88]	; (8007060 <MX_ADC2_Init+0x98>)
 8007008:	4a17      	ldr	r2, [pc, #92]	; (8007068 <MX_ADC2_Init+0xa0>)
 800700a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800700c:	4b14      	ldr	r3, [pc, #80]	; (8007060 <MX_ADC2_Init+0x98>)
 800700e:	2200      	movs	r2, #0
 8007010:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8007012:	4b13      	ldr	r3, [pc, #76]	; (8007060 <MX_ADC2_Init+0x98>)
 8007014:	2201      	movs	r2, #1
 8007016:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8007018:	4b11      	ldr	r3, [pc, #68]	; (8007060 <MX_ADC2_Init+0x98>)
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007020:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <MX_ADC2_Init+0x98>)
 8007022:	2201      	movs	r2, #1
 8007024:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8007026:	480e      	ldr	r0, [pc, #56]	; (8007060 <MX_ADC2_Init+0x98>)
 8007028:	f7f9 fb3e 	bl	80006a8 <HAL_ADC_Init>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8007032:	f000 fbd5 	bl	80077e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8007036:	2308      	movs	r3, #8
 8007038:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800703a:	2301      	movs	r3, #1
 800703c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800703e:	2300      	movs	r3, #0
 8007040:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007042:	463b      	mov	r3, r7
 8007044:	4619      	mov	r1, r3
 8007046:	4806      	ldr	r0, [pc, #24]	; (8007060 <MX_ADC2_Init+0x98>)
 8007048:	f7f9 fe28 	bl	8000c9c <HAL_ADC_ConfigChannel>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8007052:	f000 fbc5 	bl	80077e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8007056:	bf00      	nop
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20000174 	.word	0x20000174
 8007064:	40012100 	.word	0x40012100
 8007068:	0f000001 	.word	0x0f000001

0800706c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8007070:	4b16      	ldr	r3, [pc, #88]	; (80070cc <MX_CAN1_Init+0x60>)
 8007072:	4a17      	ldr	r2, [pc, #92]	; (80070d0 <MX_CAN1_Init+0x64>)
 8007074:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8007076:	4b15      	ldr	r3, [pc, #84]	; (80070cc <MX_CAN1_Init+0x60>)
 8007078:	2210      	movs	r2, #16
 800707a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800707c:	4b13      	ldr	r3, [pc, #76]	; (80070cc <MX_CAN1_Init+0x60>)
 800707e:	2200      	movs	r2, #0
 8007080:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007082:	4b12      	ldr	r3, [pc, #72]	; (80070cc <MX_CAN1_Init+0x60>)
 8007084:	2200      	movs	r2, #0
 8007086:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007088:	4b10      	ldr	r3, [pc, #64]	; (80070cc <MX_CAN1_Init+0x60>)
 800708a:	2200      	movs	r2, #0
 800708c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800708e:	4b0f      	ldr	r3, [pc, #60]	; (80070cc <MX_CAN1_Init+0x60>)
 8007090:	2200      	movs	r2, #0
 8007092:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007094:	4b0d      	ldr	r3, [pc, #52]	; (80070cc <MX_CAN1_Init+0x60>)
 8007096:	2200      	movs	r2, #0
 8007098:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800709a:	4b0c      	ldr	r3, [pc, #48]	; (80070cc <MX_CAN1_Init+0x60>)
 800709c:	2200      	movs	r2, #0
 800709e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80070a0:	4b0a      	ldr	r3, [pc, #40]	; (80070cc <MX_CAN1_Init+0x60>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80070a6:	4b09      	ldr	r3, [pc, #36]	; (80070cc <MX_CAN1_Init+0x60>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80070ac:	4b07      	ldr	r3, [pc, #28]	; (80070cc <MX_CAN1_Init+0x60>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80070b2:	4b06      	ldr	r3, [pc, #24]	; (80070cc <MX_CAN1_Init+0x60>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80070b8:	4804      	ldr	r0, [pc, #16]	; (80070cc <MX_CAN1_Init+0x60>)
 80070ba:	f7fa f817 	bl	80010ec <HAL_CAN_Init>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80070c4:	f000 fb8c 	bl	80077e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80070c8:	bf00      	nop
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20000778 	.word	0x20000778
 80070d0:	40006400 	.word	0x40006400

080070d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80070d8:	4b12      	ldr	r3, [pc, #72]	; (8007124 <MX_I2C1_Init+0x50>)
 80070da:	4a13      	ldr	r2, [pc, #76]	; (8007128 <MX_I2C1_Init+0x54>)
 80070dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80070de:	4b11      	ldr	r3, [pc, #68]	; (8007124 <MX_I2C1_Init+0x50>)
 80070e0:	4a12      	ldr	r2, [pc, #72]	; (800712c <MX_I2C1_Init+0x58>)
 80070e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80070e4:	4b0f      	ldr	r3, [pc, #60]	; (8007124 <MX_I2C1_Init+0x50>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80070ea:	4b0e      	ldr	r3, [pc, #56]	; (8007124 <MX_I2C1_Init+0x50>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80070f0:	4b0c      	ldr	r3, [pc, #48]	; (8007124 <MX_I2C1_Init+0x50>)
 80070f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80070f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80070f8:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <MX_I2C1_Init+0x50>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80070fe:	4b09      	ldr	r3, [pc, #36]	; (8007124 <MX_I2C1_Init+0x50>)
 8007100:	2200      	movs	r2, #0
 8007102:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007104:	4b07      	ldr	r3, [pc, #28]	; (8007124 <MX_I2C1_Init+0x50>)
 8007106:	2200      	movs	r2, #0
 8007108:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800710a:	4b06      	ldr	r3, [pc, #24]	; (8007124 <MX_I2C1_Init+0x50>)
 800710c:	2200      	movs	r2, #0
 800710e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007110:	4804      	ldr	r0, [pc, #16]	; (8007124 <MX_I2C1_Init+0x50>)
 8007112:	f7fa fc01 	bl	8001918 <HAL_I2C_Init>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800711c:	f000 fb60 	bl	80077e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007120:	bf00      	nop
 8007122:	bd80      	pop	{r7, pc}
 8007124:	200001bc 	.word	0x200001bc
 8007128:	40005400 	.word	0x40005400
 800712c:	000186a0 	.word	0x000186a0

08007130 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007134:	4b12      	ldr	r3, [pc, #72]	; (8007180 <MX_I2C2_Init+0x50>)
 8007136:	4a13      	ldr	r2, [pc, #76]	; (8007184 <MX_I2C2_Init+0x54>)
 8007138:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800713a:	4b11      	ldr	r3, [pc, #68]	; (8007180 <MX_I2C2_Init+0x50>)
 800713c:	4a12      	ldr	r2, [pc, #72]	; (8007188 <MX_I2C2_Init+0x58>)
 800713e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007140:	4b0f      	ldr	r3, [pc, #60]	; (8007180 <MX_I2C2_Init+0x50>)
 8007142:	2200      	movs	r2, #0
 8007144:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8007146:	4b0e      	ldr	r3, [pc, #56]	; (8007180 <MX_I2C2_Init+0x50>)
 8007148:	2200      	movs	r2, #0
 800714a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800714c:	4b0c      	ldr	r3, [pc, #48]	; (8007180 <MX_I2C2_Init+0x50>)
 800714e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007152:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007154:	4b0a      	ldr	r3, [pc, #40]	; (8007180 <MX_I2C2_Init+0x50>)
 8007156:	2200      	movs	r2, #0
 8007158:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800715a:	4b09      	ldr	r3, [pc, #36]	; (8007180 <MX_I2C2_Init+0x50>)
 800715c:	2200      	movs	r2, #0
 800715e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007160:	4b07      	ldr	r3, [pc, #28]	; (8007180 <MX_I2C2_Init+0x50>)
 8007162:	2200      	movs	r2, #0
 8007164:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007166:	4b06      	ldr	r3, [pc, #24]	; (8007180 <MX_I2C2_Init+0x50>)
 8007168:	2200      	movs	r2, #0
 800716a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800716c:	4804      	ldr	r0, [pc, #16]	; (8007180 <MX_I2C2_Init+0x50>)
 800716e:	f7fa fbd3 	bl	8001918 <HAL_I2C_Init>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8007178:	f000 fb32 	bl	80077e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800717c:	bf00      	nop
 800717e:	bd80      	pop	{r7, pc}
 8007180:	20000618 	.word	0x20000618
 8007184:	40005800 	.word	0x40005800
 8007188:	000186a0 	.word	0x000186a0

0800718c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007190:	4b18      	ldr	r3, [pc, #96]	; (80071f4 <MX_SPI2_Init+0x68>)
 8007192:	4a19      	ldr	r2, [pc, #100]	; (80071f8 <MX_SPI2_Init+0x6c>)
 8007194:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007196:	4b17      	ldr	r3, [pc, #92]	; (80071f4 <MX_SPI2_Init+0x68>)
 8007198:	f44f 7282 	mov.w	r2, #260	; 0x104
 800719c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800719e:	4b15      	ldr	r3, [pc, #84]	; (80071f4 <MX_SPI2_Init+0x68>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80071a4:	4b13      	ldr	r3, [pc, #76]	; (80071f4 <MX_SPI2_Init+0x68>)
 80071a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80071ac:	4b11      	ldr	r3, [pc, #68]	; (80071f4 <MX_SPI2_Init+0x68>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80071b2:	4b10      	ldr	r3, [pc, #64]	; (80071f4 <MX_SPI2_Init+0x68>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80071b8:	4b0e      	ldr	r3, [pc, #56]	; (80071f4 <MX_SPI2_Init+0x68>)
 80071ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80071be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80071c0:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <MX_SPI2_Init+0x68>)
 80071c2:	2218      	movs	r2, #24
 80071c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80071c6:	4b0b      	ldr	r3, [pc, #44]	; (80071f4 <MX_SPI2_Init+0x68>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80071cc:	4b09      	ldr	r3, [pc, #36]	; (80071f4 <MX_SPI2_Init+0x68>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071d2:	4b08      	ldr	r3, [pc, #32]	; (80071f4 <MX_SPI2_Init+0x68>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80071d8:	4b06      	ldr	r3, [pc, #24]	; (80071f4 <MX_SPI2_Init+0x68>)
 80071da:	220a      	movs	r2, #10
 80071dc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80071de:	4805      	ldr	r0, [pc, #20]	; (80071f4 <MX_SPI2_Init+0x68>)
 80071e0:	f7fc f87a 	bl	80032d8 <HAL_SPI_Init>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80071ea:	f000 faf9 	bl	80077e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80071ee:	bf00      	nop
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	2000009c 	.word	0x2000009c
 80071f8:	40003800 	.word	0x40003800

080071fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b096      	sub	sp, #88	; 0x58
 8007200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007202:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007206:	2200      	movs	r2, #0
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	605a      	str	r2, [r3, #4]
 800720c:	609a      	str	r2, [r3, #8]
 800720e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007210:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007214:	2200      	movs	r2, #0
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800721a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800721e:	2200      	movs	r2, #0
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	605a      	str	r2, [r3, #4]
 8007224:	609a      	str	r2, [r3, #8]
 8007226:	60da      	str	r2, [r3, #12]
 8007228:	611a      	str	r2, [r3, #16]
 800722a:	615a      	str	r2, [r3, #20]
 800722c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800722e:	1d3b      	adds	r3, r7, #4
 8007230:	2220      	movs	r2, #32
 8007232:	2100      	movs	r1, #0
 8007234:	4618      	mov	r0, r3
 8007236:	f001 f83b 	bl	80082b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800723a:	4b4a      	ldr	r3, [pc, #296]	; (8007364 <MX_TIM1_Init+0x168>)
 800723c:	4a4a      	ldr	r2, [pc, #296]	; (8007368 <MX_TIM1_Init+0x16c>)
 800723e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 8007240:	4b48      	ldr	r3, [pc, #288]	; (8007364 <MX_TIM1_Init+0x168>)
 8007242:	2202      	movs	r2, #2
 8007244:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007246:	4b47      	ldr	r3, [pc, #284]	; (8007364 <MX_TIM1_Init+0x168>)
 8007248:	2200      	movs	r2, #0
 800724a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 800724c:	4b45      	ldr	r3, [pc, #276]	; (8007364 <MX_TIM1_Init+0x168>)
 800724e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007252:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007254:	4b43      	ldr	r3, [pc, #268]	; (8007364 <MX_TIM1_Init+0x168>)
 8007256:	2200      	movs	r2, #0
 8007258:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800725a:	4b42      	ldr	r3, [pc, #264]	; (8007364 <MX_TIM1_Init+0x168>)
 800725c:	2200      	movs	r2, #0
 800725e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007260:	4b40      	ldr	r3, [pc, #256]	; (8007364 <MX_TIM1_Init+0x168>)
 8007262:	2200      	movs	r2, #0
 8007264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007266:	483f      	ldr	r0, [pc, #252]	; (8007364 <MX_TIM1_Init+0x168>)
 8007268:	f7fc feaa 	bl	8003fc0 <HAL_TIM_Base_Init>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8007272:	f000 fab5 	bl	80077e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800727a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800727c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007280:	4619      	mov	r1, r3
 8007282:	4838      	ldr	r0, [pc, #224]	; (8007364 <MX_TIM1_Init+0x168>)
 8007284:	f7fd fb02 	bl	800488c <HAL_TIM_ConfigClockSource>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800728e:	f000 faa7 	bl	80077e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007292:	4834      	ldr	r0, [pc, #208]	; (8007364 <MX_TIM1_Init+0x168>)
 8007294:	f7fc fefe 	bl	8004094 <HAL_TIM_PWM_Init>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800729e:	f000 fa9f 	bl	80077e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80072a2:	2300      	movs	r3, #0
 80072a4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80072a6:	2300      	movs	r3, #0
 80072a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80072aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80072ae:	4619      	mov	r1, r3
 80072b0:	482c      	ldr	r0, [pc, #176]	; (8007364 <MX_TIM1_Init+0x168>)
 80072b2:	f7fe f839 	bl	8005328 <HAL_TIMEx_MasterConfigSynchronization>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80072bc:	f000 fa90 	bl	80077e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80072c0:	2360      	movs	r3, #96	; 0x60
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80072c4:	2300      	movs	r3, #0
 80072c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80072c8:	2300      	movs	r3, #0
 80072ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80072cc:	2300      	movs	r3, #0
 80072ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80072d0:	2300      	movs	r3, #0
 80072d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80072d4:	2300      	movs	r3, #0
 80072d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80072d8:	2300      	movs	r3, #0
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80072dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072e0:	2200      	movs	r2, #0
 80072e2:	4619      	mov	r1, r3
 80072e4:	481f      	ldr	r0, [pc, #124]	; (8007364 <MX_TIM1_Init+0x168>)
 80072e6:	f7fd fa0b 	bl	8004700 <HAL_TIM_PWM_ConfigChannel>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80072f0:	f000 fa76 	bl	80077e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80072f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072f8:	2204      	movs	r2, #4
 80072fa:	4619      	mov	r1, r3
 80072fc:	4819      	ldr	r0, [pc, #100]	; (8007364 <MX_TIM1_Init+0x168>)
 80072fe:	f7fd f9ff 	bl	8004700 <HAL_TIM_PWM_ConfigChannel>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8007308:	f000 fa6a 	bl	80077e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800730c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007310:	2208      	movs	r2, #8
 8007312:	4619      	mov	r1, r3
 8007314:	4813      	ldr	r0, [pc, #76]	; (8007364 <MX_TIM1_Init+0x168>)
 8007316:	f7fd f9f3 	bl	8004700 <HAL_TIM_PWM_ConfigChannel>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8007320:	f000 fa5e 	bl	80077e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007324:	2300      	movs	r3, #0
 8007326:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007328:	2300      	movs	r3, #0
 800732a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007334:	2300      	movs	r3, #0
 8007336:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800733c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800733e:	2300      	movs	r3, #0
 8007340:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007342:	1d3b      	adds	r3, r7, #4
 8007344:	4619      	mov	r1, r3
 8007346:	4807      	ldr	r0, [pc, #28]	; (8007364 <MX_TIM1_Init+0x168>)
 8007348:	f7fe f86a 	bl	8005420 <HAL_TIMEx_ConfigBreakDeadTime>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8007352:	f000 fa45 	bl	80077e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007356:	4803      	ldr	r0, [pc, #12]	; (8007364 <MX_TIM1_Init+0x168>)
 8007358:	f000 fd4e 	bl	8007df8 <HAL_TIM_MspPostInit>

}
 800735c:	bf00      	nop
 800735e:	3758      	adds	r7, #88	; 0x58
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	200006f8 	.word	0x200006f8
 8007368:	40010000 	.word	0x40010000

0800736c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08c      	sub	sp, #48	; 0x30
 8007370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007372:	f107 030c 	add.w	r3, r7, #12
 8007376:	2224      	movs	r2, #36	; 0x24
 8007378:	2100      	movs	r1, #0
 800737a:	4618      	mov	r0, r3
 800737c:	f000 ff98 	bl	80082b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007380:	1d3b      	adds	r3, r7, #4
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8007388:	4b22      	ldr	r3, [pc, #136]	; (8007414 <MX_TIM8_Init+0xa8>)
 800738a:	4a23      	ldr	r2, [pc, #140]	; (8007418 <MX_TIM8_Init+0xac>)
 800738c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800738e:	4b21      	ldr	r3, [pc, #132]	; (8007414 <MX_TIM8_Init+0xa8>)
 8007390:	2200      	movs	r2, #0
 8007392:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007394:	4b1f      	ldr	r3, [pc, #124]	; (8007414 <MX_TIM8_Init+0xa8>)
 8007396:	2200      	movs	r2, #0
 8007398:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800739a:	4b1e      	ldr	r3, [pc, #120]	; (8007414 <MX_TIM8_Init+0xa8>)
 800739c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073a0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80073a2:	4b1c      	ldr	r3, [pc, #112]	; (8007414 <MX_TIM8_Init+0xa8>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80073a8:	4b1a      	ldr	r3, [pc, #104]	; (8007414 <MX_TIM8_Init+0xa8>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80073ae:	4b19      	ldr	r3, [pc, #100]	; (8007414 <MX_TIM8_Init+0xa8>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80073b4:	2303      	movs	r3, #3
 80073b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80073b8:	2300      	movs	r3, #0
 80073ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80073bc:	2301      	movs	r3, #1
 80073be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80073c0:	2300      	movs	r3, #0
 80073c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80073c8:	2300      	movs	r3, #0
 80073ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80073cc:	2301      	movs	r3, #1
 80073ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80073d0:	2300      	movs	r3, #0
 80073d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80073d4:	2300      	movs	r3, #0
 80073d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80073d8:	f107 030c 	add.w	r3, r7, #12
 80073dc:	4619      	mov	r1, r3
 80073de:	480d      	ldr	r0, [pc, #52]	; (8007414 <MX_TIM8_Init+0xa8>)
 80073e0:	f7fc ff01 	bl	80041e6 <HAL_TIM_Encoder_Init>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80073ea:	f000 f9f9 	bl	80077e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80073ee:	2300      	movs	r3, #0
 80073f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80073f6:	1d3b      	adds	r3, r7, #4
 80073f8:	4619      	mov	r1, r3
 80073fa:	4806      	ldr	r0, [pc, #24]	; (8007414 <MX_TIM8_Init+0xa8>)
 80073fc:	f7fd ff94 	bl	8005328 <HAL_TIMEx_MasterConfigSynchronization>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8007406:	f000 f9eb 	bl	80077e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800740a:	bf00      	nop
 800740c:	3730      	adds	r7, #48	; 0x30
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	200000f4 	.word	0x200000f4
 8007418:	40010400 	.word	0x40010400

0800741c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b08c      	sub	sp, #48	; 0x30
 8007420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007422:	f107 0320 	add.w	r3, r7, #32
 8007426:	2200      	movs	r2, #0
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	605a      	str	r2, [r3, #4]
 800742c:	609a      	str	r2, [r3, #8]
 800742e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007430:	1d3b      	adds	r3, r7, #4
 8007432:	2200      	movs	r2, #0
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	605a      	str	r2, [r3, #4]
 8007438:	609a      	str	r2, [r3, #8]
 800743a:	60da      	str	r2, [r3, #12]
 800743c:	611a      	str	r2, [r3, #16]
 800743e:	615a      	str	r2, [r3, #20]
 8007440:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8007442:	4b2d      	ldr	r3, [pc, #180]	; (80074f8 <MX_TIM9_Init+0xdc>)
 8007444:	4a2d      	ldr	r2, [pc, #180]	; (80074fc <MX_TIM9_Init+0xe0>)
 8007446:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2;
 8007448:	4b2b      	ldr	r3, [pc, #172]	; (80074f8 <MX_TIM9_Init+0xdc>)
 800744a:	2202      	movs	r2, #2
 800744c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800744e:	4b2a      	ldr	r3, [pc, #168]	; (80074f8 <MX_TIM9_Init+0xdc>)
 8007450:	2200      	movs	r2, #0
 8007452:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096;
 8007454:	4b28      	ldr	r3, [pc, #160]	; (80074f8 <MX_TIM9_Init+0xdc>)
 8007456:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800745a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800745c:	4b26      	ldr	r3, [pc, #152]	; (80074f8 <MX_TIM9_Init+0xdc>)
 800745e:	2200      	movs	r2, #0
 8007460:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007462:	4b25      	ldr	r3, [pc, #148]	; (80074f8 <MX_TIM9_Init+0xdc>)
 8007464:	2200      	movs	r2, #0
 8007466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8007468:	4823      	ldr	r0, [pc, #140]	; (80074f8 <MX_TIM9_Init+0xdc>)
 800746a:	f7fc fda9 	bl	8003fc0 <HAL_TIM_Base_Init>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8007474:	f000 f9b4 	bl	80077e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800747c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800747e:	f107 0320 	add.w	r3, r7, #32
 8007482:	4619      	mov	r1, r3
 8007484:	481c      	ldr	r0, [pc, #112]	; (80074f8 <MX_TIM9_Init+0xdc>)
 8007486:	f7fd fa01 	bl	800488c <HAL_TIM_ConfigClockSource>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d001      	beq.n	8007494 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8007490:	f000 f9a6 	bl	80077e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8007494:	4818      	ldr	r0, [pc, #96]	; (80074f8 <MX_TIM9_Init+0xdc>)
 8007496:	f7fc fdfd 	bl	8004094 <HAL_TIM_PWM_Init>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80074a0:	f000 f99e 	bl	80077e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80074a4:	2360      	movs	r3, #96	; 0x60
 80074a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80074a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80074b2:	2300      	movs	r3, #0
 80074b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80074b6:	1d3b      	adds	r3, r7, #4
 80074b8:	2200      	movs	r2, #0
 80074ba:	4619      	mov	r1, r3
 80074bc:	480e      	ldr	r0, [pc, #56]	; (80074f8 <MX_TIM9_Init+0xdc>)
 80074be:	f7fd f91f 	bl	8004700 <HAL_TIM_PWM_ConfigChannel>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 80074c8:	f000 f98a 	bl	80077e0 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 80074cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80074d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80074d2:	1d3b      	adds	r3, r7, #4
 80074d4:	2204      	movs	r2, #4
 80074d6:	4619      	mov	r1, r3
 80074d8:	4807      	ldr	r0, [pc, #28]	; (80074f8 <MX_TIM9_Init+0xdc>)
 80074da:	f7fd f911 	bl	8004700 <HAL_TIM_PWM_ConfigChannel>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <MX_TIM9_Init+0xcc>
  {
    Error_Handler();
 80074e4:	f000 f97c 	bl	80077e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80074e8:	4803      	ldr	r0, [pc, #12]	; (80074f8 <MX_TIM9_Init+0xdc>)
 80074ea:	f000 fc85 	bl	8007df8 <HAL_TIM_MspPostInit>

}
 80074ee:	bf00      	nop
 80074f0:	3730      	adds	r7, #48	; 0x30
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20000738 	.word	0x20000738
 80074fc:	40014000 	.word	0x40014000

08007500 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8007506:	463b      	mov	r3, r7
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	605a      	str	r2, [r3, #4]
 800750e:	609a      	str	r2, [r3, #8]
 8007510:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8007512:	4b1c      	ldr	r3, [pc, #112]	; (8007584 <MX_TIM13_Init+0x84>)
 8007514:	4a1c      	ldr	r2, [pc, #112]	; (8007588 <MX_TIM13_Init+0x88>)
 8007516:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8007518:	4b1a      	ldr	r3, [pc, #104]	; (8007584 <MX_TIM13_Init+0x84>)
 800751a:	2200      	movs	r2, #0
 800751c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800751e:	4b19      	ldr	r3, [pc, #100]	; (8007584 <MX_TIM13_Init+0x84>)
 8007520:	2200      	movs	r2, #0
 8007522:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8007524:	4b17      	ldr	r3, [pc, #92]	; (8007584 <MX_TIM13_Init+0x84>)
 8007526:	2200      	movs	r2, #0
 8007528:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800752a:	4b16      	ldr	r3, [pc, #88]	; (8007584 <MX_TIM13_Init+0x84>)
 800752c:	2200      	movs	r2, #0
 800752e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007530:	4b14      	ldr	r3, [pc, #80]	; (8007584 <MX_TIM13_Init+0x84>)
 8007532:	2200      	movs	r2, #0
 8007534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8007536:	4813      	ldr	r0, [pc, #76]	; (8007584 <MX_TIM13_Init+0x84>)
 8007538:	f7fc fd42 	bl	8003fc0 <HAL_TIM_Base_Init>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <MX_TIM13_Init+0x46>
  {
    Error_Handler();
 8007542:	f000 f94d 	bl	80077e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8007546:	480f      	ldr	r0, [pc, #60]	; (8007584 <MX_TIM13_Init+0x84>)
 8007548:	f7fc fe18 	bl	800417c <HAL_TIM_IC_Init>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <MX_TIM13_Init+0x56>
  {
    Error_Handler();
 8007552:	f000 f945 	bl	80077e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007556:	2300      	movs	r3, #0
 8007558:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800755a:	2301      	movs	r3, #1
 800755c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800755e:	2300      	movs	r3, #0
 8007560:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007566:	463b      	mov	r3, r7
 8007568:	2200      	movs	r2, #0
 800756a:	4619      	mov	r1, r3
 800756c:	4805      	ldr	r0, [pc, #20]	; (8007584 <MX_TIM13_Init+0x84>)
 800756e:	f7fd f82b 	bl	80045c8 <HAL_TIM_IC_ConfigChannel>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <MX_TIM13_Init+0x7c>
  {
    Error_Handler();
 8007578:	f000 f932 	bl	80077e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800757c:	bf00      	nop
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	200006b4 	.word	0x200006b4
 8007588:	40001c00 	.word	0x40001c00

0800758c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007590:	4b11      	ldr	r3, [pc, #68]	; (80075d8 <MX_USART3_UART_Init+0x4c>)
 8007592:	4a12      	ldr	r2, [pc, #72]	; (80075dc <MX_USART3_UART_Init+0x50>)
 8007594:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007596:	4b10      	ldr	r3, [pc, #64]	; (80075d8 <MX_USART3_UART_Init+0x4c>)
 8007598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800759c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800759e:	4b0e      	ldr	r3, [pc, #56]	; (80075d8 <MX_USART3_UART_Init+0x4c>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <MX_USART3_UART_Init+0x4c>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80075aa:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <MX_USART3_UART_Init+0x4c>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80075b0:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <MX_USART3_UART_Init+0x4c>)
 80075b2:	220c      	movs	r2, #12
 80075b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075b6:	4b08      	ldr	r3, [pc, #32]	; (80075d8 <MX_USART3_UART_Init+0x4c>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <MX_USART3_UART_Init+0x4c>)
 80075be:	2200      	movs	r2, #0
 80075c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80075c2:	4805      	ldr	r0, [pc, #20]	; (80075d8 <MX_USART3_UART_Init+0x4c>)
 80075c4:	f7fd ffb7 	bl	8005536 <HAL_UART_Init>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80075ce:	f000 f907 	bl	80077e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80075d2:	bf00      	nop
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20000134 	.word	0x20000134
 80075dc:	40004800 	.word	0x40004800

080075e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80075e4:	4b14      	ldr	r3, [pc, #80]	; (8007638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80075e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80075ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80075ec:	4b12      	ldr	r3, [pc, #72]	; (8007638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80075ee:	2204      	movs	r2, #4
 80075f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80075f2:	4b11      	ldr	r3, [pc, #68]	; (8007638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80075f4:	2202      	movs	r2, #2
 80075f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075f8:	4b0f      	ldr	r3, [pc, #60]	; (8007638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075fe:	4b0e      	ldr	r3, [pc, #56]	; (8007638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007600:	2202      	movs	r2, #2
 8007602:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007604:	4b0c      	ldr	r3, [pc, #48]	; (8007638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007606:	2200      	movs	r2, #0
 8007608:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800760a:	4b0b      	ldr	r3, [pc, #44]	; (8007638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800760c:	2200      	movs	r2, #0
 800760e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007610:	4b09      	ldr	r3, [pc, #36]	; (8007638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007612:	2200      	movs	r2, #0
 8007614:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007616:	4b08      	ldr	r3, [pc, #32]	; (8007638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007618:	2200      	movs	r2, #0
 800761a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800761c:	4b06      	ldr	r3, [pc, #24]	; (8007638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800761e:	2200      	movs	r2, #0
 8007620:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007622:	4805      	ldr	r0, [pc, #20]	; (8007638 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8007624:	f7fb f8ff 	bl	8002826 <HAL_PCD_Init>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800762e:	f000 f8d7 	bl	80077e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8007632:	bf00      	nop
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000210 	.word	0x20000210

0800763c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08c      	sub	sp, #48	; 0x30
 8007640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007642:	f107 031c 	add.w	r3, r7, #28
 8007646:	2200      	movs	r2, #0
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	605a      	str	r2, [r3, #4]
 800764c:	609a      	str	r2, [r3, #8]
 800764e:	60da      	str	r2, [r3, #12]
 8007650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007652:	2300      	movs	r3, #0
 8007654:	61bb      	str	r3, [r7, #24]
 8007656:	4b50      	ldr	r3, [pc, #320]	; (8007798 <MX_GPIO_Init+0x15c>)
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	4a4f      	ldr	r2, [pc, #316]	; (8007798 <MX_GPIO_Init+0x15c>)
 800765c:	f043 0310 	orr.w	r3, r3, #16
 8007660:	6313      	str	r3, [r2, #48]	; 0x30
 8007662:	4b4d      	ldr	r3, [pc, #308]	; (8007798 <MX_GPIO_Init+0x15c>)
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	f003 0310 	and.w	r3, r3, #16
 800766a:	61bb      	str	r3, [r7, #24]
 800766c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]
 8007672:	4b49      	ldr	r3, [pc, #292]	; (8007798 <MX_GPIO_Init+0x15c>)
 8007674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007676:	4a48      	ldr	r2, [pc, #288]	; (8007798 <MX_GPIO_Init+0x15c>)
 8007678:	f043 0304 	orr.w	r3, r3, #4
 800767c:	6313      	str	r3, [r2, #48]	; 0x30
 800767e:	4b46      	ldr	r3, [pc, #280]	; (8007798 <MX_GPIO_Init+0x15c>)
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800768a:	2300      	movs	r3, #0
 800768c:	613b      	str	r3, [r7, #16]
 800768e:	4b42      	ldr	r3, [pc, #264]	; (8007798 <MX_GPIO_Init+0x15c>)
 8007690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007692:	4a41      	ldr	r2, [pc, #260]	; (8007798 <MX_GPIO_Init+0x15c>)
 8007694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007698:	6313      	str	r3, [r2, #48]	; 0x30
 800769a:	4b3f      	ldr	r3, [pc, #252]	; (8007798 <MX_GPIO_Init+0x15c>)
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a2:	613b      	str	r3, [r7, #16]
 80076a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80076a6:	2300      	movs	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	4b3b      	ldr	r3, [pc, #236]	; (8007798 <MX_GPIO_Init+0x15c>)
 80076ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ae:	4a3a      	ldr	r2, [pc, #232]	; (8007798 <MX_GPIO_Init+0x15c>)
 80076b0:	f043 0301 	orr.w	r3, r3, #1
 80076b4:	6313      	str	r3, [r2, #48]	; 0x30
 80076b6:	4b38      	ldr	r3, [pc, #224]	; (8007798 <MX_GPIO_Init+0x15c>)
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80076c2:	2300      	movs	r3, #0
 80076c4:	60bb      	str	r3, [r7, #8]
 80076c6:	4b34      	ldr	r3, [pc, #208]	; (8007798 <MX_GPIO_Init+0x15c>)
 80076c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ca:	4a33      	ldr	r2, [pc, #204]	; (8007798 <MX_GPIO_Init+0x15c>)
 80076cc:	f043 0302 	orr.w	r3, r3, #2
 80076d0:	6313      	str	r3, [r2, #48]	; 0x30
 80076d2:	4b31      	ldr	r3, [pc, #196]	; (8007798 <MX_GPIO_Init+0x15c>)
 80076d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	60bb      	str	r3, [r7, #8]
 80076dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80076de:	2300      	movs	r3, #0
 80076e0:	607b      	str	r3, [r7, #4]
 80076e2:	4b2d      	ldr	r3, [pc, #180]	; (8007798 <MX_GPIO_Init+0x15c>)
 80076e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e6:	4a2c      	ldr	r2, [pc, #176]	; (8007798 <MX_GPIO_Init+0x15c>)
 80076e8:	f043 0308 	orr.w	r3, r3, #8
 80076ec:	6313      	str	r3, [r2, #48]	; 0x30
 80076ee:	4b2a      	ldr	r3, [pc, #168]	; (8007798 <MX_GPIO_Init+0x15c>)
 80076f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f2:	f003 0308 	and.w	r3, r3, #8
 80076f6:	607b      	str	r3, [r7, #4]
 80076f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin, GPIO_PIN_RESET);
 80076fa:	2200      	movs	r2, #0
 80076fc:	f24c 0118 	movw	r1, #49176	; 0xc018
 8007700:	4826      	ldr	r0, [pc, #152]	; (800779c <MX_GPIO_Init+0x160>)
 8007702:	f7fa f8bd 	bl	8001880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROT0_nCS_Pin|nSCS_Pin, GPIO_PIN_RESET);
 8007706:	2200      	movs	r2, #0
 8007708:	f248 0180 	movw	r1, #32896	; 0x8080
 800770c:	4824      	ldr	r0, [pc, #144]	; (80077a0 <MX_GPIO_Init+0x164>)
 800770e:	f7fa f8b7 	bl	8001880 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin EN_GATE_Pin M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin;
 8007712:	f24c 0318 	movw	r3, #49176	; 0xc018
 8007716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007718:	2301      	movs	r3, #1
 800771a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800771c:	2300      	movs	r3, #0
 800771e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007720:	2300      	movs	r3, #0
 8007722:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007724:	f107 031c 	add.w	r3, r7, #28
 8007728:	4619      	mov	r1, r3
 800772a:	481c      	ldr	r0, [pc, #112]	; (800779c <MX_GPIO_Init+0x160>)
 800772c:	f7f9 ff0e 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT0_nCS_Pin nSCS_Pin */
  GPIO_InitStruct.Pin = ROT0_nCS_Pin|nSCS_Pin;
 8007730:	f248 0380 	movw	r3, #32896	; 0x8080
 8007734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007736:	2301      	movs	r3, #1
 8007738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800773a:	2300      	movs	r3, #0
 800773c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800773e:	2300      	movs	r3, #0
 8007740:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007742:	f107 031c 	add.w	r3, r7, #28
 8007746:	4619      	mov	r1, r3
 8007748:	4815      	ldr	r0, [pc, #84]	; (80077a0 <MX_GPIO_Init+0x164>)
 800774a:	f7f9 feff 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT0_I_W_Pin */
  GPIO_InitStruct.Pin = ROT0_I_W_Pin;
 800774e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007754:	4b13      	ldr	r3, [pc, #76]	; (80077a4 <MX_GPIO_Init+0x168>)
 8007756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007758:	2300      	movs	r3, #0
 800775a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ROT0_I_W_GPIO_Port, &GPIO_InitStruct);
 800775c:	f107 031c 	add.w	r3, r7, #28
 8007760:	4619      	mov	r1, r3
 8007762:	4811      	ldr	r0, [pc, #68]	; (80077a8 <MX_GPIO_Init+0x16c>)
 8007764:	f7f9 fef2 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 8007768:	2370      	movs	r3, #112	; 0x70
 800776a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800776c:	2300      	movs	r3, #0
 800776e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007770:	2301      	movs	r3, #1
 8007772:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007774:	f107 031c 	add.w	r3, r7, #28
 8007778:	4619      	mov	r1, r3
 800777a:	4809      	ldr	r0, [pc, #36]	; (80077a0 <MX_GPIO_Init+0x164>)
 800777c:	f7f9 fee6 	bl	800154c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8007780:	2200      	movs	r2, #0
 8007782:	2100      	movs	r1, #0
 8007784:	2017      	movs	r0, #23
 8007786:	f7f9 fe88 	bl	800149a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800778a:	2017      	movs	r0, #23
 800778c:	f7f9 fea1 	bl	80014d2 <HAL_NVIC_EnableIRQ>

}
 8007790:	bf00      	nop
 8007792:	3730      	adds	r7, #48	; 0x30
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	40023800 	.word	0x40023800
 800779c:	40021000 	.word	0x40021000
 80077a0:	40020c00 	.word	0x40020c00
 80077a4:	10110000 	.word	0x10110000
 80077a8:	40020800 	.word	0x40020800

080077ac <HAL_GPIO_EXTI_Callback>:
//	else{
//		__NOP();
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	4603      	mov	r3, r0
 80077b4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT0_I_W_Pin){
 80077b6:	88fb      	ldrh	r3, [r7, #6]
 80077b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077bc:	d107      	bne.n	80077ce <HAL_GPIO_EXTI_Callback+0x22>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 80077be:	2108      	movs	r1, #8
 80077c0:	4805      	ldr	r0, [pc, #20]	; (80077d8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80077c2:	f7fa f876 	bl	80018b2 <HAL_GPIO_TogglePin>
		TIM8->CNT = 0;     //TODO: there is acually some stepping happening under the I pulse so we have to distinguish between step from right and step from left
 80077c6:	4b05      	ldr	r3, [pc, #20]	; (80077dc <HAL_GPIO_EXTI_Callback+0x30>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	else{
		__NOP();
	}
}
 80077cc:	e000      	b.n	80077d0 <HAL_GPIO_EXTI_Callback+0x24>
		__NOP();
 80077ce:	bf00      	nop
}
 80077d0:	bf00      	nop
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	40021000 	.word	0x40021000
 80077dc:	40010400 	.word	0x40010400

080077e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80077e4:	bf00      	nop
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077f6:	2300      	movs	r3, #0
 80077f8:	607b      	str	r3, [r7, #4]
 80077fa:	4b10      	ldr	r3, [pc, #64]	; (800783c <HAL_MspInit+0x4c>)
 80077fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fe:	4a0f      	ldr	r2, [pc, #60]	; (800783c <HAL_MspInit+0x4c>)
 8007800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007804:	6453      	str	r3, [r2, #68]	; 0x44
 8007806:	4b0d      	ldr	r3, [pc, #52]	; (800783c <HAL_MspInit+0x4c>)
 8007808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800780e:	607b      	str	r3, [r7, #4]
 8007810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007812:	2300      	movs	r3, #0
 8007814:	603b      	str	r3, [r7, #0]
 8007816:	4b09      	ldr	r3, [pc, #36]	; (800783c <HAL_MspInit+0x4c>)
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	4a08      	ldr	r2, [pc, #32]	; (800783c <HAL_MspInit+0x4c>)
 800781c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007820:	6413      	str	r3, [r2, #64]	; 0x40
 8007822:	4b06      	ldr	r3, [pc, #24]	; (800783c <HAL_MspInit+0x4c>)
 8007824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	40023800 	.word	0x40023800

08007840 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08e      	sub	sp, #56	; 0x38
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800784c:	2200      	movs	r2, #0
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	605a      	str	r2, [r3, #4]
 8007852:	609a      	str	r2, [r3, #8]
 8007854:	60da      	str	r2, [r3, #12]
 8007856:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a50      	ldr	r2, [pc, #320]	; (80079a0 <HAL_ADC_MspInit+0x160>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d14a      	bne.n	80078f8 <HAL_ADC_MspInit+0xb8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007862:	2300      	movs	r3, #0
 8007864:	623b      	str	r3, [r7, #32]
 8007866:	4b4f      	ldr	r3, [pc, #316]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 8007868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786a:	4a4e      	ldr	r2, [pc, #312]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 800786c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007870:	6453      	str	r3, [r2, #68]	; 0x44
 8007872:	4b4c      	ldr	r3, [pc, #304]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 8007874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787a:	623b      	str	r3, [r7, #32]
 800787c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800787e:	2300      	movs	r3, #0
 8007880:	61fb      	str	r3, [r7, #28]
 8007882:	4b48      	ldr	r3, [pc, #288]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 8007884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007886:	4a47      	ldr	r2, [pc, #284]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 8007888:	f043 0304 	orr.w	r3, r3, #4
 800788c:	6313      	str	r3, [r2, #48]	; 0x30
 800788e:	4b45      	ldr	r3, [pc, #276]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	61fb      	str	r3, [r7, #28]
 8007898:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800789a:	2300      	movs	r3, #0
 800789c:	61bb      	str	r3, [r7, #24]
 800789e:	4b41      	ldr	r3, [pc, #260]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 80078a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a2:	4a40      	ldr	r2, [pc, #256]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 80078a4:	f043 0301 	orr.w	r3, r3, #1
 80078a8:	6313      	str	r3, [r2, #48]	; 0x30
 80078aa:	4b3e      	ldr	r3, [pc, #248]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 80078ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	61bb      	str	r3, [r7, #24]
 80078b4:	69bb      	ldr	r3, [r7, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = ASENSE_Pin|BSENSE_Pin|CSENSE_Pin;
 80078b6:	230e      	movs	r3, #14
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078ba:	2303      	movs	r3, #3
 80078bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078c6:	4619      	mov	r1, r3
 80078c8:	4837      	ldr	r0, [pc, #220]	; (80079a8 <HAL_ADC_MspInit+0x168>)
 80078ca:	f7f9 fe3f 	bl	800154c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_Pin|M0_SO1_Pin|M0_SO2_Pin|TEMP_Pin 
 80078ce:	233e      	movs	r3, #62	; 0x3e
 80078d0:	627b      	str	r3, [r7, #36]	; 0x24
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078d2:	2303      	movs	r3, #3
 80078d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078de:	4619      	mov	r1, r3
 80078e0:	4832      	ldr	r0, [pc, #200]	; (80079ac <HAL_ADC_MspInit+0x16c>)
 80078e2:	f7f9 fe33 	bl	800154c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80078e6:	2200      	movs	r2, #0
 80078e8:	2100      	movs	r1, #0
 80078ea:	2012      	movs	r0, #18
 80078ec:	f7f9 fdd5 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80078f0:	2012      	movs	r0, #18
 80078f2:	f7f9 fdee 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80078f6:	e04e      	b.n	8007996 <HAL_ADC_MspInit+0x156>
  else if(hadc->Instance==ADC2)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a2c      	ldr	r2, [pc, #176]	; (80079b0 <HAL_ADC_MspInit+0x170>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d149      	bne.n	8007996 <HAL_ADC_MspInit+0x156>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007902:	2300      	movs	r3, #0
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	4b27      	ldr	r3, [pc, #156]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 8007908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790a:	4a26      	ldr	r2, [pc, #152]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 800790c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007910:	6453      	str	r3, [r2, #68]	; 0x44
 8007912:	4b24      	ldr	r3, [pc, #144]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 8007914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800791e:	2300      	movs	r3, #0
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	4b20      	ldr	r3, [pc, #128]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 8007924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007926:	4a1f      	ldr	r2, [pc, #124]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 8007928:	f043 0304 	orr.w	r3, r3, #4
 800792c:	6313      	str	r3, [r2, #48]	; 0x30
 800792e:	4b1d      	ldr	r3, [pc, #116]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	f003 0304 	and.w	r3, r3, #4
 8007936:	613b      	str	r3, [r7, #16]
 8007938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800793a:	2300      	movs	r3, #0
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	4b19      	ldr	r3, [pc, #100]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 8007940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007942:	4a18      	ldr	r2, [pc, #96]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 8007944:	f043 0302 	orr.w	r3, r3, #2
 8007948:	6313      	str	r3, [r2, #48]	; 0x30
 800794a:	4b16      	ldr	r3, [pc, #88]	; (80079a4 <HAL_ADC_MspInit+0x164>)
 800794c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STRAIN0_Pin|STRAIN1_Pin;
 8007956:	2330      	movs	r3, #48	; 0x30
 8007958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800795a:	2303      	movs	r3, #3
 800795c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800795e:	2300      	movs	r3, #0
 8007960:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007966:	4619      	mov	r1, r3
 8007968:	480f      	ldr	r0, [pc, #60]	; (80079a8 <HAL_ADC_MspInit+0x168>)
 800796a:	f7f9 fdef 	bl	800154c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBUS_S_Pin;
 800796e:	2301      	movs	r3, #1
 8007970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007972:	2303      	movs	r3, #3
 8007974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007976:	2300      	movs	r3, #0
 8007978:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VBUS_S_GPIO_Port, &GPIO_InitStruct);
 800797a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800797e:	4619      	mov	r1, r3
 8007980:	480c      	ldr	r0, [pc, #48]	; (80079b4 <HAL_ADC_MspInit+0x174>)
 8007982:	f7f9 fde3 	bl	800154c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8007986:	2200      	movs	r2, #0
 8007988:	2100      	movs	r1, #0
 800798a:	2012      	movs	r0, #18
 800798c:	f7f9 fd85 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007990:	2012      	movs	r0, #18
 8007992:	f7f9 fd9e 	bl	80014d2 <HAL_NVIC_EnableIRQ>
}
 8007996:	bf00      	nop
 8007998:	3738      	adds	r7, #56	; 0x38
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	40012000 	.word	0x40012000
 80079a4:	40023800 	.word	0x40023800
 80079a8:	40020800 	.word	0x40020800
 80079ac:	40020000 	.word	0x40020000
 80079b0:	40012100 	.word	0x40012100
 80079b4:	40020400 	.word	0x40020400

080079b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08a      	sub	sp, #40	; 0x28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079c0:	f107 0314 	add.w	r3, r7, #20
 80079c4:	2200      	movs	r2, #0
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	605a      	str	r2, [r3, #4]
 80079ca:	609a      	str	r2, [r3, #8]
 80079cc:	60da      	str	r2, [r3, #12]
 80079ce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a19      	ldr	r2, [pc, #100]	; (8007a3c <HAL_CAN_MspInit+0x84>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d12b      	bne.n	8007a32 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80079da:	2300      	movs	r3, #0
 80079dc:	613b      	str	r3, [r7, #16]
 80079de:	4b18      	ldr	r3, [pc, #96]	; (8007a40 <HAL_CAN_MspInit+0x88>)
 80079e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e2:	4a17      	ldr	r2, [pc, #92]	; (8007a40 <HAL_CAN_MspInit+0x88>)
 80079e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80079e8:	6413      	str	r3, [r2, #64]	; 0x40
 80079ea:	4b15      	ldr	r3, [pc, #84]	; (8007a40 <HAL_CAN_MspInit+0x88>)
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079f2:	613b      	str	r3, [r7, #16]
 80079f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80079f6:	2300      	movs	r3, #0
 80079f8:	60fb      	str	r3, [r7, #12]
 80079fa:	4b11      	ldr	r3, [pc, #68]	; (8007a40 <HAL_CAN_MspInit+0x88>)
 80079fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fe:	4a10      	ldr	r2, [pc, #64]	; (8007a40 <HAL_CAN_MspInit+0x88>)
 8007a00:	f043 0308 	orr.w	r3, r3, #8
 8007a04:	6313      	str	r3, [r2, #48]	; 0x30
 8007a06:	4b0e      	ldr	r3, [pc, #56]	; (8007a40 <HAL_CAN_MspInit+0x88>)
 8007a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0a:	f003 0308 	and.w	r3, r3, #8
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007a12:	2303      	movs	r3, #3
 8007a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a16:	2302      	movs	r3, #2
 8007a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007a22:	2309      	movs	r3, #9
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a26:	f107 0314 	add.w	r3, r7, #20
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4805      	ldr	r0, [pc, #20]	; (8007a44 <HAL_CAN_MspInit+0x8c>)
 8007a2e:	f7f9 fd8d 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007a32:	bf00      	nop
 8007a34:	3728      	adds	r7, #40	; 0x28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	40006400 	.word	0x40006400
 8007a40:	40023800 	.word	0x40023800
 8007a44:	40020c00 	.word	0x40020c00

08007a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08c      	sub	sp, #48	; 0x30
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a50:	f107 031c 	add.w	r3, r7, #28
 8007a54:	2200      	movs	r2, #0
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	605a      	str	r2, [r3, #4]
 8007a5a:	609a      	str	r2, [r3, #8]
 8007a5c:	60da      	str	r2, [r3, #12]
 8007a5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a32      	ldr	r2, [pc, #200]	; (8007b30 <HAL_I2C_MspInit+0xe8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d12c      	bne.n	8007ac4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	61bb      	str	r3, [r7, #24]
 8007a6e:	4b31      	ldr	r3, [pc, #196]	; (8007b34 <HAL_I2C_MspInit+0xec>)
 8007a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a72:	4a30      	ldr	r2, [pc, #192]	; (8007b34 <HAL_I2C_MspInit+0xec>)
 8007a74:	f043 0302 	orr.w	r3, r3, #2
 8007a78:	6313      	str	r3, [r2, #48]	; 0x30
 8007a7a:	4b2e      	ldr	r3, [pc, #184]	; (8007b34 <HAL_I2C_MspInit+0xec>)
 8007a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	61bb      	str	r3, [r7, #24]
 8007a84:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007a86:	23c0      	movs	r3, #192	; 0xc0
 8007a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a8a:	2312      	movs	r3, #18
 8007a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a92:	2303      	movs	r3, #3
 8007a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007a96:	2304      	movs	r3, #4
 8007a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a9a:	f107 031c 	add.w	r3, r7, #28
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	4825      	ldr	r0, [pc, #148]	; (8007b38 <HAL_I2C_MspInit+0xf0>)
 8007aa2:	f7f9 fd53 	bl	800154c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	617b      	str	r3, [r7, #20]
 8007aaa:	4b22      	ldr	r3, [pc, #136]	; (8007b34 <HAL_I2C_MspInit+0xec>)
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	4a21      	ldr	r2, [pc, #132]	; (8007b34 <HAL_I2C_MspInit+0xec>)
 8007ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ab6:	4b1f      	ldr	r3, [pc, #124]	; (8007b34 <HAL_I2C_MspInit+0xec>)
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007ac2:	e031      	b.n	8007b28 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a1c      	ldr	r2, [pc, #112]	; (8007b3c <HAL_I2C_MspInit+0xf4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d12c      	bne.n	8007b28 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ace:	2300      	movs	r3, #0
 8007ad0:	613b      	str	r3, [r7, #16]
 8007ad2:	4b18      	ldr	r3, [pc, #96]	; (8007b34 <HAL_I2C_MspInit+0xec>)
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad6:	4a17      	ldr	r2, [pc, #92]	; (8007b34 <HAL_I2C_MspInit+0xec>)
 8007ad8:	f043 0302 	orr.w	r3, r3, #2
 8007adc:	6313      	str	r3, [r2, #48]	; 0x30
 8007ade:	4b15      	ldr	r3, [pc, #84]	; (8007b34 <HAL_I2C_MspInit+0xec>)
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	613b      	str	r3, [r7, #16]
 8007ae8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007aea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007af0:	2312      	movs	r3, #18
 8007af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007af4:	2301      	movs	r3, #1
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007af8:	2303      	movs	r3, #3
 8007afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007afc:	2304      	movs	r3, #4
 8007afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b00:	f107 031c 	add.w	r3, r7, #28
 8007b04:	4619      	mov	r1, r3
 8007b06:	480c      	ldr	r0, [pc, #48]	; (8007b38 <HAL_I2C_MspInit+0xf0>)
 8007b08:	f7f9 fd20 	bl	800154c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	4b08      	ldr	r3, [pc, #32]	; (8007b34 <HAL_I2C_MspInit+0xec>)
 8007b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b14:	4a07      	ldr	r2, [pc, #28]	; (8007b34 <HAL_I2C_MspInit+0xec>)
 8007b16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8007b1c:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <HAL_I2C_MspInit+0xec>)
 8007b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b24:	60fb      	str	r3, [r7, #12]
 8007b26:	68fb      	ldr	r3, [r7, #12]
}
 8007b28:	bf00      	nop
 8007b2a:	3730      	adds	r7, #48	; 0x30
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	40005400 	.word	0x40005400
 8007b34:	40023800 	.word	0x40023800
 8007b38:	40020400 	.word	0x40020400
 8007b3c:	40005800 	.word	0x40005800

08007b40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08a      	sub	sp, #40	; 0x28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b48:	f107 0314 	add.w	r3, r7, #20
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	609a      	str	r2, [r3, #8]
 8007b54:	60da      	str	r2, [r3, #12]
 8007b56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a1d      	ldr	r2, [pc, #116]	; (8007bd4 <HAL_SPI_MspInit+0x94>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d134      	bne.n	8007bcc <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007b62:	2300      	movs	r3, #0
 8007b64:	613b      	str	r3, [r7, #16]
 8007b66:	4b1c      	ldr	r3, [pc, #112]	; (8007bd8 <HAL_SPI_MspInit+0x98>)
 8007b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6a:	4a1b      	ldr	r2, [pc, #108]	; (8007bd8 <HAL_SPI_MspInit+0x98>)
 8007b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b70:	6413      	str	r3, [r2, #64]	; 0x40
 8007b72:	4b19      	ldr	r3, [pc, #100]	; (8007bd8 <HAL_SPI_MspInit+0x98>)
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b7a:	613b      	str	r3, [r7, #16]
 8007b7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	4b15      	ldr	r3, [pc, #84]	; (8007bd8 <HAL_SPI_MspInit+0x98>)
 8007b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b86:	4a14      	ldr	r2, [pc, #80]	; (8007bd8 <HAL_SPI_MspInit+0x98>)
 8007b88:	f043 0302 	orr.w	r3, r3, #2
 8007b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8007b8e:	4b12      	ldr	r3, [pc, #72]	; (8007bd8 <HAL_SPI_MspInit+0x98>)
 8007b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b92:	f003 0302 	and.w	r3, r3, #2
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007b9a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007bac:	2305      	movs	r3, #5
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bb0:	f107 0314 	add.w	r3, r7, #20
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4809      	ldr	r0, [pc, #36]	; (8007bdc <HAL_SPI_MspInit+0x9c>)
 8007bb8:	f7f9 fcc8 	bl	800154c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	2024      	movs	r0, #36	; 0x24
 8007bc2:	f7f9 fc6a 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007bc6:	2024      	movs	r0, #36	; 0x24
 8007bc8:	f7f9 fc83 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007bcc:	bf00      	nop
 8007bce:	3728      	adds	r7, #40	; 0x28
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40003800 	.word	0x40003800
 8007bd8:	40023800 	.word	0x40023800
 8007bdc:	40020400 	.word	0x40020400

08007be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b08c      	sub	sp, #48	; 0x30
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007be8:	f107 031c 	add.w	r3, r7, #28
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	605a      	str	r2, [r3, #4]
 8007bf2:	609a      	str	r2, [r3, #8]
 8007bf4:	60da      	str	r2, [r3, #12]
 8007bf6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a45      	ldr	r2, [pc, #276]	; (8007d14 <HAL_TIM_Base_MspInit+0x134>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d12e      	bne.n	8007c60 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007c02:	2300      	movs	r3, #0
 8007c04:	61bb      	str	r3, [r7, #24]
 8007c06:	4b44      	ldr	r3, [pc, #272]	; (8007d18 <HAL_TIM_Base_MspInit+0x138>)
 8007c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0a:	4a43      	ldr	r2, [pc, #268]	; (8007d18 <HAL_TIM_Base_MspInit+0x138>)
 8007c0c:	f043 0301 	orr.w	r3, r3, #1
 8007c10:	6453      	str	r3, [r2, #68]	; 0x44
 8007c12:	4b41      	ldr	r3, [pc, #260]	; (8007d18 <HAL_TIM_Base_MspInit+0x138>)
 8007c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	61bb      	str	r3, [r7, #24]
 8007c1c:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2100      	movs	r1, #0
 8007c22:	2018      	movs	r0, #24
 8007c24:	f7f9 fc39 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8007c28:	2018      	movs	r0, #24
 8007c2a:	f7f9 fc52 	bl	80014d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2100      	movs	r1, #0
 8007c32:	2019      	movs	r0, #25
 8007c34:	f7f9 fc31 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007c38:	2019      	movs	r0, #25
 8007c3a:	f7f9 fc4a 	bl	80014d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8007c3e:	2200      	movs	r2, #0
 8007c40:	2100      	movs	r1, #0
 8007c42:	201a      	movs	r0, #26
 8007c44:	f7f9 fc29 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8007c48:	201a      	movs	r0, #26
 8007c4a:	f7f9 fc42 	bl	80014d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2100      	movs	r1, #0
 8007c52:	201b      	movs	r0, #27
 8007c54:	f7f9 fc21 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8007c58:	201b      	movs	r0, #27
 8007c5a:	f7f9 fc3a 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8007c5e:	e054      	b.n	8007d0a <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM9)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a2d      	ldr	r2, [pc, #180]	; (8007d1c <HAL_TIM_Base_MspInit+0x13c>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d116      	bne.n	8007c98 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	617b      	str	r3, [r7, #20]
 8007c6e:	4b2a      	ldr	r3, [pc, #168]	; (8007d18 <HAL_TIM_Base_MspInit+0x138>)
 8007c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c72:	4a29      	ldr	r2, [pc, #164]	; (8007d18 <HAL_TIM_Base_MspInit+0x138>)
 8007c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c78:	6453      	str	r3, [r2, #68]	; 0x44
 8007c7a:	4b27      	ldr	r3, [pc, #156]	; (8007d18 <HAL_TIM_Base_MspInit+0x138>)
 8007c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c82:	617b      	str	r3, [r7, #20]
 8007c84:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8007c86:	2200      	movs	r2, #0
 8007c88:	2100      	movs	r1, #0
 8007c8a:	2018      	movs	r0, #24
 8007c8c:	f7f9 fc05 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8007c90:	2018      	movs	r0, #24
 8007c92:	f7f9 fc1e 	bl	80014d2 <HAL_NVIC_EnableIRQ>
}
 8007c96:	e038      	b.n	8007d0a <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM13)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a20      	ldr	r2, [pc, #128]	; (8007d20 <HAL_TIM_Base_MspInit+0x140>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d133      	bne.n	8007d0a <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	613b      	str	r3, [r7, #16]
 8007ca6:	4b1c      	ldr	r3, [pc, #112]	; (8007d18 <HAL_TIM_Base_MspInit+0x138>)
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007caa:	4a1b      	ldr	r2, [pc, #108]	; (8007d18 <HAL_TIM_Base_MspInit+0x138>)
 8007cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8007cb2:	4b19      	ldr	r3, [pc, #100]	; (8007d18 <HAL_TIM_Base_MspInit+0x138>)
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cba:	613b      	str	r3, [r7, #16]
 8007cbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	4b15      	ldr	r3, [pc, #84]	; (8007d18 <HAL_TIM_Base_MspInit+0x138>)
 8007cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc6:	4a14      	ldr	r2, [pc, #80]	; (8007d18 <HAL_TIM_Base_MspInit+0x138>)
 8007cc8:	f043 0301 	orr.w	r3, r3, #1
 8007ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8007cce:	4b12      	ldr	r3, [pc, #72]	; (8007d18 <HAL_TIM_Base_MspInit+0x138>)
 8007cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007cda:	2340      	movs	r3, #64	; 0x40
 8007cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cde:	2302      	movs	r3, #2
 8007ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8007cea:	2309      	movs	r3, #9
 8007cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cee:	f107 031c 	add.w	r3, r7, #28
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	480b      	ldr	r0, [pc, #44]	; (8007d24 <HAL_TIM_Base_MspInit+0x144>)
 8007cf6:	f7f9 fc29 	bl	800154c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	202c      	movs	r0, #44	; 0x2c
 8007d00:	f7f9 fbcb 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007d04:	202c      	movs	r0, #44	; 0x2c
 8007d06:	f7f9 fbe4 	bl	80014d2 <HAL_NVIC_EnableIRQ>
}
 8007d0a:	bf00      	nop
 8007d0c:	3730      	adds	r7, #48	; 0x30
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	40010000 	.word	0x40010000
 8007d18:	40023800 	.word	0x40023800
 8007d1c:	40014000 	.word	0x40014000
 8007d20:	40001c00 	.word	0x40001c00
 8007d24:	40020000 	.word	0x40020000

08007d28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b08a      	sub	sp, #40	; 0x28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d30:	f107 0314 	add.w	r3, r7, #20
 8007d34:	2200      	movs	r2, #0
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	605a      	str	r2, [r3, #4]
 8007d3a:	609a      	str	r2, [r3, #8]
 8007d3c:	60da      	str	r2, [r3, #12]
 8007d3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a29      	ldr	r2, [pc, #164]	; (8007dec <HAL_TIM_Encoder_MspInit+0xc4>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d14b      	bne.n	8007de2 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	613b      	str	r3, [r7, #16]
 8007d4e:	4b28      	ldr	r3, [pc, #160]	; (8007df0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8007d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d52:	4a27      	ldr	r2, [pc, #156]	; (8007df0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8007d54:	f043 0302 	orr.w	r3, r3, #2
 8007d58:	6453      	str	r3, [r2, #68]	; 0x44
 8007d5a:	4b25      	ldr	r3, [pc, #148]	; (8007df0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8007d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	613b      	str	r3, [r7, #16]
 8007d64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d66:	2300      	movs	r3, #0
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	4b21      	ldr	r3, [pc, #132]	; (8007df0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6e:	4a20      	ldr	r2, [pc, #128]	; (8007df0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8007d70:	f043 0304 	orr.w	r3, r3, #4
 8007d74:	6313      	str	r3, [r2, #48]	; 0x30
 8007d76:	4b1e      	ldr	r3, [pc, #120]	; (8007df0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8007d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7a:	f003 0304 	and.w	r3, r3, #4
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007d82:	23c0      	movs	r3, #192	; 0xc0
 8007d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d86:	2302      	movs	r3, #2
 8007d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007d92:	2303      	movs	r3, #3
 8007d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d96:	f107 0314 	add.w	r3, r7, #20
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	4815      	ldr	r0, [pc, #84]	; (8007df4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8007d9e:	f7f9 fbd5 	bl	800154c <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8007da2:	2200      	movs	r2, #0
 8007da4:	2100      	movs	r1, #0
 8007da6:	202b      	movs	r0, #43	; 0x2b
 8007da8:	f7f9 fb77 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8007dac:	202b      	movs	r0, #43	; 0x2b
 8007dae:	f7f9 fb90 	bl	80014d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007db2:	2200      	movs	r2, #0
 8007db4:	2100      	movs	r1, #0
 8007db6:	202c      	movs	r0, #44	; 0x2c
 8007db8:	f7f9 fb6f 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007dbc:	202c      	movs	r0, #44	; 0x2c
 8007dbe:	f7f9 fb88 	bl	80014d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	202d      	movs	r0, #45	; 0x2d
 8007dc8:	f7f9 fb67 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8007dcc:	202d      	movs	r0, #45	; 0x2d
 8007dce:	f7f9 fb80 	bl	80014d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	202e      	movs	r0, #46	; 0x2e
 8007dd8:	f7f9 fb5f 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8007ddc:	202e      	movs	r0, #46	; 0x2e
 8007dde:	f7f9 fb78 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007de2:	bf00      	nop
 8007de4:	3728      	adds	r7, #40	; 0x28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	40010400 	.word	0x40010400
 8007df0:	40023800 	.word	0x40023800
 8007df4:	40020800 	.word	0x40020800

08007df8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08a      	sub	sp, #40	; 0x28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e00:	f107 0314 	add.w	r3, r7, #20
 8007e04:	2200      	movs	r2, #0
 8007e06:	601a      	str	r2, [r3, #0]
 8007e08:	605a      	str	r2, [r3, #4]
 8007e0a:	609a      	str	r2, [r3, #8]
 8007e0c:	60da      	str	r2, [r3, #12]
 8007e0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a24      	ldr	r2, [pc, #144]	; (8007ea8 <HAL_TIM_MspPostInit+0xb0>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d11f      	bne.n	8007e5a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	613b      	str	r3, [r7, #16]
 8007e1e:	4b23      	ldr	r3, [pc, #140]	; (8007eac <HAL_TIM_MspPostInit+0xb4>)
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	4a22      	ldr	r2, [pc, #136]	; (8007eac <HAL_TIM_MspPostInit+0xb4>)
 8007e24:	f043 0310 	orr.w	r3, r3, #16
 8007e28:	6313      	str	r3, [r2, #48]	; 0x30
 8007e2a:	4b20      	ldr	r3, [pc, #128]	; (8007eac <HAL_TIM_MspPostInit+0xb4>)
 8007e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2e:	f003 0310 	and.w	r3, r3, #16
 8007e32:	613b      	str	r3, [r7, #16]
 8007e34:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8007e36:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8007e3a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e40:	2300      	movs	r3, #0
 8007e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e44:	2300      	movs	r3, #0
 8007e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007e4c:	f107 0314 	add.w	r3, r7, #20
 8007e50:	4619      	mov	r1, r3
 8007e52:	4817      	ldr	r0, [pc, #92]	; (8007eb0 <HAL_TIM_MspPostInit+0xb8>)
 8007e54:	f7f9 fb7a 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8007e58:	e022      	b.n	8007ea0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a15      	ldr	r2, [pc, #84]	; (8007eb4 <HAL_TIM_MspPostInit+0xbc>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d11d      	bne.n	8007ea0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007e64:	2300      	movs	r3, #0
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	4b10      	ldr	r3, [pc, #64]	; (8007eac <HAL_TIM_MspPostInit+0xb4>)
 8007e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6c:	4a0f      	ldr	r2, [pc, #60]	; (8007eac <HAL_TIM_MspPostInit+0xb4>)
 8007e6e:	f043 0310 	orr.w	r3, r3, #16
 8007e72:	6313      	str	r3, [r2, #48]	; 0x30
 8007e74:	4b0d      	ldr	r3, [pc, #52]	; (8007eac <HAL_TIM_MspPostInit+0xb4>)
 8007e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e78:	f003 0310 	and.w	r3, r3, #16
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007e80:	2360      	movs	r3, #96	; 0x60
 8007e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e84:	2302      	movs	r3, #2
 8007e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8007e90:	2303      	movs	r3, #3
 8007e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007e94:	f107 0314 	add.w	r3, r7, #20
 8007e98:	4619      	mov	r1, r3
 8007e9a:	4805      	ldr	r0, [pc, #20]	; (8007eb0 <HAL_TIM_MspPostInit+0xb8>)
 8007e9c:	f7f9 fb56 	bl	800154c <HAL_GPIO_Init>
}
 8007ea0:	bf00      	nop
 8007ea2:	3728      	adds	r7, #40	; 0x28
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	40010000 	.word	0x40010000
 8007eac:	40023800 	.word	0x40023800
 8007eb0:	40021000 	.word	0x40021000
 8007eb4:	40014000 	.word	0x40014000

08007eb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08a      	sub	sp, #40	; 0x28
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ec0:	f107 0314 	add.w	r3, r7, #20
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	605a      	str	r2, [r3, #4]
 8007eca:	609a      	str	r2, [r3, #8]
 8007ecc:	60da      	str	r2, [r3, #12]
 8007ece:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a1d      	ldr	r2, [pc, #116]	; (8007f4c <HAL_UART_MspInit+0x94>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d134      	bne.n	8007f44 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007eda:	2300      	movs	r3, #0
 8007edc:	613b      	str	r3, [r7, #16]
 8007ede:	4b1c      	ldr	r3, [pc, #112]	; (8007f50 <HAL_UART_MspInit+0x98>)
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee2:	4a1b      	ldr	r2, [pc, #108]	; (8007f50 <HAL_UART_MspInit+0x98>)
 8007ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8007eea:	4b19      	ldr	r3, [pc, #100]	; (8007f50 <HAL_UART_MspInit+0x98>)
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ef2:	613b      	str	r3, [r7, #16]
 8007ef4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]
 8007efa:	4b15      	ldr	r3, [pc, #84]	; (8007f50 <HAL_UART_MspInit+0x98>)
 8007efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efe:	4a14      	ldr	r2, [pc, #80]	; (8007f50 <HAL_UART_MspInit+0x98>)
 8007f00:	f043 0308 	orr.w	r3, r3, #8
 8007f04:	6313      	str	r3, [r2, #48]	; 0x30
 8007f06:	4b12      	ldr	r3, [pc, #72]	; (8007f50 <HAL_UART_MspInit+0x98>)
 8007f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0a:	f003 0308 	and.w	r3, r3, #8
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007f12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f18:	2302      	movs	r3, #2
 8007f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f20:	2303      	movs	r3, #3
 8007f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007f24:	2307      	movs	r3, #7
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007f28:	f107 0314 	add.w	r3, r7, #20
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4809      	ldr	r0, [pc, #36]	; (8007f54 <HAL_UART_MspInit+0x9c>)
 8007f30:	f7f9 fb0c 	bl	800154c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007f34:	2200      	movs	r2, #0
 8007f36:	2100      	movs	r1, #0
 8007f38:	2027      	movs	r0, #39	; 0x27
 8007f3a:	f7f9 faae 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007f3e:	2027      	movs	r0, #39	; 0x27
 8007f40:	f7f9 fac7 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007f44:	bf00      	nop
 8007f46:	3728      	adds	r7, #40	; 0x28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	40004800 	.word	0x40004800
 8007f50:	40023800 	.word	0x40023800
 8007f54:	40020c00 	.word	0x40020c00

08007f58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08a      	sub	sp, #40	; 0x28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f60:	f107 0314 	add.w	r3, r7, #20
 8007f64:	2200      	movs	r2, #0
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	605a      	str	r2, [r3, #4]
 8007f6a:	609a      	str	r2, [r3, #8]
 8007f6c:	60da      	str	r2, [r3, #12]
 8007f6e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f78:	d132      	bne.n	8007fe0 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	613b      	str	r3, [r7, #16]
 8007f7e:	4b1a      	ldr	r3, [pc, #104]	; (8007fe8 <HAL_PCD_MspInit+0x90>)
 8007f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f82:	4a19      	ldr	r2, [pc, #100]	; (8007fe8 <HAL_PCD_MspInit+0x90>)
 8007f84:	f043 0301 	orr.w	r3, r3, #1
 8007f88:	6313      	str	r3, [r2, #48]	; 0x30
 8007f8a:	4b17      	ldr	r3, [pc, #92]	; (8007fe8 <HAL_PCD_MspInit+0x90>)
 8007f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	613b      	str	r3, [r7, #16]
 8007f94:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007f96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007fa8:	230a      	movs	r3, #10
 8007faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fac:	f107 0314 	add.w	r3, r7, #20
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	480e      	ldr	r0, [pc, #56]	; (8007fec <HAL_PCD_MspInit+0x94>)
 8007fb4:	f7f9 faca 	bl	800154c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007fb8:	4b0b      	ldr	r3, [pc, #44]	; (8007fe8 <HAL_PCD_MspInit+0x90>)
 8007fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fbc:	4a0a      	ldr	r2, [pc, #40]	; (8007fe8 <HAL_PCD_MspInit+0x90>)
 8007fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc2:	6353      	str	r3, [r2, #52]	; 0x34
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60fb      	str	r3, [r7, #12]
 8007fc8:	4b07      	ldr	r3, [pc, #28]	; (8007fe8 <HAL_PCD_MspInit+0x90>)
 8007fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fcc:	4a06      	ldr	r2, [pc, #24]	; (8007fe8 <HAL_PCD_MspInit+0x90>)
 8007fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fd2:	6453      	str	r3, [r2, #68]	; 0x44
 8007fd4:	4b04      	ldr	r3, [pc, #16]	; (8007fe8 <HAL_PCD_MspInit+0x90>)
 8007fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fdc:	60fb      	str	r3, [r7, #12]
 8007fde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8007fe0:	bf00      	nop
 8007fe2:	3728      	adds	r7, #40	; 0x28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	40023800 	.word	0x40023800
 8007fec:	40020000 	.word	0x40020000

08007ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007ff4:	bf00      	nop
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007ffe:	b480      	push	{r7}
 8008000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008002:	e7fe      	b.n	8008002 <HardFault_Handler+0x4>

08008004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008004:	b480      	push	{r7}
 8008006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008008:	e7fe      	b.n	8008008 <MemManage_Handler+0x4>

0800800a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800800a:	b480      	push	{r7}
 800800c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800800e:	e7fe      	b.n	800800e <BusFault_Handler+0x4>

08008010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008010:	b480      	push	{r7}
 8008012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008014:	e7fe      	b.n	8008014 <UsageFault_Handler+0x4>

08008016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008016:	b480      	push	{r7}
 8008018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800801a:	bf00      	nop
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008024:	b480      	push	{r7}
 8008026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008028:	bf00      	nop
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008032:	b480      	push	{r7}
 8008034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008036:	bf00      	nop
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008044:	f7f8 faee 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008048:	bf00      	nop
 800804a:	bd80      	pop	{r7, pc}

0800804c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008050:	4803      	ldr	r0, [pc, #12]	; (8008060 <ADC_IRQHandler+0x14>)
 8008052:	f7f8 fcb7 	bl	80009c4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8008056:	4803      	ldr	r0, [pc, #12]	; (8008064 <ADC_IRQHandler+0x18>)
 8008058:	f7f8 fcb4 	bl	80009c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800805c:	bf00      	nop
 800805e:	bd80      	pop	{r7, pc}
 8008060:	2000066c 	.word	0x2000066c
 8008064:	20000174 	.word	0x20000174

08008068 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800806c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008070:	f7f9 fc3a 	bl	80018e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008074:	bf00      	nop
 8008076:	bd80      	pop	{r7, pc}

08008078 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800807c:	4803      	ldr	r0, [pc, #12]	; (800808c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800807e:	f7fc f99b 	bl	80043b8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8008082:	4803      	ldr	r0, [pc, #12]	; (8008090 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8008084:	f7fc f998 	bl	80043b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8008088:	bf00      	nop
 800808a:	bd80      	pop	{r7, pc}
 800808c:	200006f8 	.word	0x200006f8
 8008090:	20000738 	.word	0x20000738

08008094 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008098:	4802      	ldr	r0, [pc, #8]	; (80080a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800809a:	f7fc f98d 	bl	80043b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800809e:	bf00      	nop
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	200006f8 	.word	0x200006f8

080080a8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80080ac:	4802      	ldr	r0, [pc, #8]	; (80080b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80080ae:	f7fc f983 	bl	80043b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80080b2:	bf00      	nop
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	200006f8 	.word	0x200006f8

080080bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80080c0:	4802      	ldr	r0, [pc, #8]	; (80080cc <TIM1_CC_IRQHandler+0x10>)
 80080c2:	f7fc f979 	bl	80043b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80080c6:	bf00      	nop
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	200006f8 	.word	0x200006f8

080080d0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80080d4:	4802      	ldr	r0, [pc, #8]	; (80080e0 <SPI2_IRQHandler+0x10>)
 80080d6:	f7fb fd43 	bl	8003b60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80080da:	bf00      	nop
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	2000009c 	.word	0x2000009c

080080e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80080e8:	4802      	ldr	r0, [pc, #8]	; (80080f4 <USART3_IRQHandler+0x10>)
 80080ea:	f7fd fb5f 	bl	80057ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80080ee:	bf00      	nop
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	20000134 	.word	0x20000134

080080f8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80080fc:	4802      	ldr	r0, [pc, #8]	; (8008108 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80080fe:	f7fc f95b 	bl	80043b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8008102:	bf00      	nop
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	200000f4 	.word	0x200000f4

0800810c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8008110:	4803      	ldr	r0, [pc, #12]	; (8008120 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8008112:	f7fc f951 	bl	80043b8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8008116:	4803      	ldr	r0, [pc, #12]	; (8008124 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8008118:	f7fc f94e 	bl	80043b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800811c:	bf00      	nop
 800811e:	bd80      	pop	{r7, pc}
 8008120:	200000f4 	.word	0x200000f4
 8008124:	200006b4 	.word	0x200006b4

08008128 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800812c:	4802      	ldr	r0, [pc, #8]	; (8008138 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800812e:	f7fc f943 	bl	80043b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8008132:	bf00      	nop
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	200000f4 	.word	0x200000f4

0800813c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8008140:	4802      	ldr	r0, [pc, #8]	; (800814c <TIM8_CC_IRQHandler+0x10>)
 8008142:	f7fc f939 	bl	80043b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8008146:	bf00      	nop
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	200000f4 	.word	0x200000f4

08008150 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008158:	4b11      	ldr	r3, [pc, #68]	; (80081a0 <_sbrk+0x50>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d102      	bne.n	8008166 <_sbrk+0x16>
		heap_end = &end;
 8008160:	4b0f      	ldr	r3, [pc, #60]	; (80081a0 <_sbrk+0x50>)
 8008162:	4a10      	ldr	r2, [pc, #64]	; (80081a4 <_sbrk+0x54>)
 8008164:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008166:	4b0e      	ldr	r3, [pc, #56]	; (80081a0 <_sbrk+0x50>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800816c:	4b0c      	ldr	r3, [pc, #48]	; (80081a0 <_sbrk+0x50>)
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4413      	add	r3, r2
 8008174:	466a      	mov	r2, sp
 8008176:	4293      	cmp	r3, r2
 8008178:	d907      	bls.n	800818a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800817a:	f000 f855 	bl	8008228 <__errno>
 800817e:	4602      	mov	r2, r0
 8008180:	230c      	movs	r3, #12
 8008182:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008188:	e006      	b.n	8008198 <_sbrk+0x48>
	}

	heap_end += incr;
 800818a:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <_sbrk+0x50>)
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4413      	add	r3, r2
 8008192:	4a03      	ldr	r2, [pc, #12]	; (80081a0 <_sbrk+0x50>)
 8008194:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008196:	68fb      	ldr	r3, [r7, #12]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	2000008c 	.word	0x2000008c
 80081a4:	200007a8 	.word	0x200007a8

080081a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80081a8:	b480      	push	{r7}
 80081aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80081ac:	4b08      	ldr	r3, [pc, #32]	; (80081d0 <SystemInit+0x28>)
 80081ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b2:	4a07      	ldr	r2, [pc, #28]	; (80081d0 <SystemInit+0x28>)
 80081b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80081bc:	4b04      	ldr	r3, [pc, #16]	; (80081d0 <SystemInit+0x28>)
 80081be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80081c2:	609a      	str	r2, [r3, #8]
#endif
}
 80081c4:	bf00      	nop
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	e000ed00 	.word	0xe000ed00

080081d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80081d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800820c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80081d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80081da:	e003      	b.n	80081e4 <LoopCopyDataInit>

080081dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80081dc:	4b0c      	ldr	r3, [pc, #48]	; (8008210 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80081de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80081e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80081e2:	3104      	adds	r1, #4

080081e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80081e4:	480b      	ldr	r0, [pc, #44]	; (8008214 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80081e6:	4b0c      	ldr	r3, [pc, #48]	; (8008218 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80081e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80081ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80081ec:	d3f6      	bcc.n	80081dc <CopyDataInit>
  ldr  r2, =_sbss
 80081ee:	4a0b      	ldr	r2, [pc, #44]	; (800821c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80081f0:	e002      	b.n	80081f8 <LoopFillZerobss>

080081f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80081f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80081f4:	f842 3b04 	str.w	r3, [r2], #4

080081f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80081f8:	4b09      	ldr	r3, [pc, #36]	; (8008220 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80081fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80081fc:	d3f9      	bcc.n	80081f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80081fe:	f7ff ffd3 	bl	80081a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008202:	f000 f817 	bl	8008234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008206:	f7fe fb93 	bl	8006930 <main>
  bx  lr    
 800820a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800820c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008210:	08008c68 	.word	0x08008c68
  ldr  r0, =_sdata
 8008214:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008218:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800821c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8008220:	200007a4 	.word	0x200007a4

08008224 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008224:	e7fe      	b.n	8008224 <CAN1_RX0_IRQHandler>
	...

08008228 <__errno>:
 8008228:	4b01      	ldr	r3, [pc, #4]	; (8008230 <__errno+0x8>)
 800822a:	6818      	ldr	r0, [r3, #0]
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	2000000c 	.word	0x2000000c

08008234 <__libc_init_array>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	4e0d      	ldr	r6, [pc, #52]	; (800826c <__libc_init_array+0x38>)
 8008238:	4c0d      	ldr	r4, [pc, #52]	; (8008270 <__libc_init_array+0x3c>)
 800823a:	1ba4      	subs	r4, r4, r6
 800823c:	10a4      	asrs	r4, r4, #2
 800823e:	2500      	movs	r5, #0
 8008240:	42a5      	cmp	r5, r4
 8008242:	d109      	bne.n	8008258 <__libc_init_array+0x24>
 8008244:	4e0b      	ldr	r6, [pc, #44]	; (8008274 <__libc_init_array+0x40>)
 8008246:	4c0c      	ldr	r4, [pc, #48]	; (8008278 <__libc_init_array+0x44>)
 8008248:	f000 fca2 	bl	8008b90 <_init>
 800824c:	1ba4      	subs	r4, r4, r6
 800824e:	10a4      	asrs	r4, r4, #2
 8008250:	2500      	movs	r5, #0
 8008252:	42a5      	cmp	r5, r4
 8008254:	d105      	bne.n	8008262 <__libc_init_array+0x2e>
 8008256:	bd70      	pop	{r4, r5, r6, pc}
 8008258:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800825c:	4798      	blx	r3
 800825e:	3501      	adds	r5, #1
 8008260:	e7ee      	b.n	8008240 <__libc_init_array+0xc>
 8008262:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008266:	4798      	blx	r3
 8008268:	3501      	adds	r5, #1
 800826a:	e7f2      	b.n	8008252 <__libc_init_array+0x1e>
 800826c:	08008c60 	.word	0x08008c60
 8008270:	08008c60 	.word	0x08008c60
 8008274:	08008c60 	.word	0x08008c60
 8008278:	08008c64 	.word	0x08008c64

0800827c <__itoa>:
 800827c:	1e93      	subs	r3, r2, #2
 800827e:	2b22      	cmp	r3, #34	; 0x22
 8008280:	b510      	push	{r4, lr}
 8008282:	460c      	mov	r4, r1
 8008284:	d904      	bls.n	8008290 <__itoa+0x14>
 8008286:	2300      	movs	r3, #0
 8008288:	700b      	strb	r3, [r1, #0]
 800828a:	461c      	mov	r4, r3
 800828c:	4620      	mov	r0, r4
 800828e:	bd10      	pop	{r4, pc}
 8008290:	2a0a      	cmp	r2, #10
 8008292:	d109      	bne.n	80082a8 <__itoa+0x2c>
 8008294:	2800      	cmp	r0, #0
 8008296:	da07      	bge.n	80082a8 <__itoa+0x2c>
 8008298:	232d      	movs	r3, #45	; 0x2d
 800829a:	700b      	strb	r3, [r1, #0]
 800829c:	4240      	negs	r0, r0
 800829e:	2101      	movs	r1, #1
 80082a0:	4421      	add	r1, r4
 80082a2:	f000 f851 	bl	8008348 <__utoa>
 80082a6:	e7f1      	b.n	800828c <__itoa+0x10>
 80082a8:	2100      	movs	r1, #0
 80082aa:	e7f9      	b.n	80082a0 <__itoa+0x24>

080082ac <itoa>:
 80082ac:	f7ff bfe6 	b.w	800827c <__itoa>

080082b0 <memset>:
 80082b0:	4402      	add	r2, r0
 80082b2:	4603      	mov	r3, r0
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d100      	bne.n	80082ba <memset+0xa>
 80082b8:	4770      	bx	lr
 80082ba:	f803 1b01 	strb.w	r1, [r3], #1
 80082be:	e7f9      	b.n	80082b4 <memset+0x4>

080082c0 <siprintf>:
 80082c0:	b40e      	push	{r1, r2, r3}
 80082c2:	b500      	push	{lr}
 80082c4:	b09c      	sub	sp, #112	; 0x70
 80082c6:	ab1d      	add	r3, sp, #116	; 0x74
 80082c8:	9002      	str	r0, [sp, #8]
 80082ca:	9006      	str	r0, [sp, #24]
 80082cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082d0:	4809      	ldr	r0, [pc, #36]	; (80082f8 <siprintf+0x38>)
 80082d2:	9107      	str	r1, [sp, #28]
 80082d4:	9104      	str	r1, [sp, #16]
 80082d6:	4909      	ldr	r1, [pc, #36]	; (80082fc <siprintf+0x3c>)
 80082d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80082dc:	9105      	str	r1, [sp, #20]
 80082de:	6800      	ldr	r0, [r0, #0]
 80082e0:	9301      	str	r3, [sp, #4]
 80082e2:	a902      	add	r1, sp, #8
 80082e4:	f000 f8c8 	bl	8008478 <_svfiprintf_r>
 80082e8:	9b02      	ldr	r3, [sp, #8]
 80082ea:	2200      	movs	r2, #0
 80082ec:	701a      	strb	r2, [r3, #0]
 80082ee:	b01c      	add	sp, #112	; 0x70
 80082f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082f4:	b003      	add	sp, #12
 80082f6:	4770      	bx	lr
 80082f8:	2000000c 	.word	0x2000000c
 80082fc:	ffff0208 	.word	0xffff0208

08008300 <strcat>:
 8008300:	b510      	push	{r4, lr}
 8008302:	4603      	mov	r3, r0
 8008304:	781a      	ldrb	r2, [r3, #0]
 8008306:	1c5c      	adds	r4, r3, #1
 8008308:	b93a      	cbnz	r2, 800831a <strcat+0x1a>
 800830a:	3b01      	subs	r3, #1
 800830c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008310:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008314:	2a00      	cmp	r2, #0
 8008316:	d1f9      	bne.n	800830c <strcat+0xc>
 8008318:	bd10      	pop	{r4, pc}
 800831a:	4623      	mov	r3, r4
 800831c:	e7f2      	b.n	8008304 <strcat+0x4>

0800831e <strncat>:
 800831e:	b530      	push	{r4, r5, lr}
 8008320:	4603      	mov	r3, r0
 8008322:	781c      	ldrb	r4, [r3, #0]
 8008324:	1c5d      	adds	r5, r3, #1
 8008326:	b944      	cbnz	r4, 800833a <strncat+0x1c>
 8008328:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 800832c:	d304      	bcc.n	8008338 <strncat+0x1a>
 800832e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008332:	f803 4b01 	strb.w	r4, [r3], #1
 8008336:	b914      	cbnz	r4, 800833e <strncat+0x20>
 8008338:	bd30      	pop	{r4, r5, pc}
 800833a:	462b      	mov	r3, r5
 800833c:	e7f1      	b.n	8008322 <strncat+0x4>
 800833e:	2a00      	cmp	r2, #0
 8008340:	d1f2      	bne.n	8008328 <strncat+0xa>
 8008342:	701a      	strb	r2, [r3, #0]
 8008344:	e7f0      	b.n	8008328 <strncat+0xa>
	...

08008348 <__utoa>:
 8008348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800834a:	4b1d      	ldr	r3, [pc, #116]	; (80083c0 <__utoa+0x78>)
 800834c:	b08b      	sub	sp, #44	; 0x2c
 800834e:	4605      	mov	r5, r0
 8008350:	460c      	mov	r4, r1
 8008352:	466e      	mov	r6, sp
 8008354:	f103 0c20 	add.w	ip, r3, #32
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	6859      	ldr	r1, [r3, #4]
 800835c:	4637      	mov	r7, r6
 800835e:	c703      	stmia	r7!, {r0, r1}
 8008360:	3308      	adds	r3, #8
 8008362:	4563      	cmp	r3, ip
 8008364:	463e      	mov	r6, r7
 8008366:	d1f7      	bne.n	8008358 <__utoa+0x10>
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	791b      	ldrb	r3, [r3, #4]
 800836c:	713b      	strb	r3, [r7, #4]
 800836e:	1e93      	subs	r3, r2, #2
 8008370:	2b22      	cmp	r3, #34	; 0x22
 8008372:	6038      	str	r0, [r7, #0]
 8008374:	f04f 0300 	mov.w	r3, #0
 8008378:	d904      	bls.n	8008384 <__utoa+0x3c>
 800837a:	7023      	strb	r3, [r4, #0]
 800837c:	461c      	mov	r4, r3
 800837e:	4620      	mov	r0, r4
 8008380:	b00b      	add	sp, #44	; 0x2c
 8008382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008384:	1e66      	subs	r6, r4, #1
 8008386:	fbb5 f0f2 	udiv	r0, r5, r2
 800838a:	af0a      	add	r7, sp, #40	; 0x28
 800838c:	fb02 5510 	mls	r5, r2, r0, r5
 8008390:	443d      	add	r5, r7
 8008392:	1c59      	adds	r1, r3, #1
 8008394:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8008398:	f806 5f01 	strb.w	r5, [r6, #1]!
 800839c:	4605      	mov	r5, r0
 800839e:	b968      	cbnz	r0, 80083bc <__utoa+0x74>
 80083a0:	5460      	strb	r0, [r4, r1]
 80083a2:	4423      	add	r3, r4
 80083a4:	4622      	mov	r2, r4
 80083a6:	1b19      	subs	r1, r3, r4
 80083a8:	1b10      	subs	r0, r2, r4
 80083aa:	4281      	cmp	r1, r0
 80083ac:	dde7      	ble.n	800837e <__utoa+0x36>
 80083ae:	7811      	ldrb	r1, [r2, #0]
 80083b0:	7818      	ldrb	r0, [r3, #0]
 80083b2:	f802 0b01 	strb.w	r0, [r2], #1
 80083b6:	f803 1901 	strb.w	r1, [r3], #-1
 80083ba:	e7f4      	b.n	80083a6 <__utoa+0x5e>
 80083bc:	460b      	mov	r3, r1
 80083be:	e7e2      	b.n	8008386 <__utoa+0x3e>
 80083c0:	08008c00 	.word	0x08008c00

080083c4 <__ssputs_r>:
 80083c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c8:	688e      	ldr	r6, [r1, #8]
 80083ca:	429e      	cmp	r6, r3
 80083cc:	4682      	mov	sl, r0
 80083ce:	460c      	mov	r4, r1
 80083d0:	4690      	mov	r8, r2
 80083d2:	4699      	mov	r9, r3
 80083d4:	d837      	bhi.n	8008446 <__ssputs_r+0x82>
 80083d6:	898a      	ldrh	r2, [r1, #12]
 80083d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083dc:	d031      	beq.n	8008442 <__ssputs_r+0x7e>
 80083de:	6825      	ldr	r5, [r4, #0]
 80083e0:	6909      	ldr	r1, [r1, #16]
 80083e2:	1a6f      	subs	r7, r5, r1
 80083e4:	6965      	ldr	r5, [r4, #20]
 80083e6:	2302      	movs	r3, #2
 80083e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80083f0:	f109 0301 	add.w	r3, r9, #1
 80083f4:	443b      	add	r3, r7
 80083f6:	429d      	cmp	r5, r3
 80083f8:	bf38      	it	cc
 80083fa:	461d      	movcc	r5, r3
 80083fc:	0553      	lsls	r3, r2, #21
 80083fe:	d530      	bpl.n	8008462 <__ssputs_r+0x9e>
 8008400:	4629      	mov	r1, r5
 8008402:	f000 fb2b 	bl	8008a5c <_malloc_r>
 8008406:	4606      	mov	r6, r0
 8008408:	b950      	cbnz	r0, 8008420 <__ssputs_r+0x5c>
 800840a:	230c      	movs	r3, #12
 800840c:	f8ca 3000 	str.w	r3, [sl]
 8008410:	89a3      	ldrh	r3, [r4, #12]
 8008412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008416:	81a3      	strh	r3, [r4, #12]
 8008418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800841c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008420:	463a      	mov	r2, r7
 8008422:	6921      	ldr	r1, [r4, #16]
 8008424:	f000 faa8 	bl	8008978 <memcpy>
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800842e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	6126      	str	r6, [r4, #16]
 8008436:	6165      	str	r5, [r4, #20]
 8008438:	443e      	add	r6, r7
 800843a:	1bed      	subs	r5, r5, r7
 800843c:	6026      	str	r6, [r4, #0]
 800843e:	60a5      	str	r5, [r4, #8]
 8008440:	464e      	mov	r6, r9
 8008442:	454e      	cmp	r6, r9
 8008444:	d900      	bls.n	8008448 <__ssputs_r+0x84>
 8008446:	464e      	mov	r6, r9
 8008448:	4632      	mov	r2, r6
 800844a:	4641      	mov	r1, r8
 800844c:	6820      	ldr	r0, [r4, #0]
 800844e:	f000 fa9e 	bl	800898e <memmove>
 8008452:	68a3      	ldr	r3, [r4, #8]
 8008454:	1b9b      	subs	r3, r3, r6
 8008456:	60a3      	str	r3, [r4, #8]
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	441e      	add	r6, r3
 800845c:	6026      	str	r6, [r4, #0]
 800845e:	2000      	movs	r0, #0
 8008460:	e7dc      	b.n	800841c <__ssputs_r+0x58>
 8008462:	462a      	mov	r2, r5
 8008464:	f000 fb54 	bl	8008b10 <_realloc_r>
 8008468:	4606      	mov	r6, r0
 800846a:	2800      	cmp	r0, #0
 800846c:	d1e2      	bne.n	8008434 <__ssputs_r+0x70>
 800846e:	6921      	ldr	r1, [r4, #16]
 8008470:	4650      	mov	r0, sl
 8008472:	f000 faa5 	bl	80089c0 <_free_r>
 8008476:	e7c8      	b.n	800840a <__ssputs_r+0x46>

08008478 <_svfiprintf_r>:
 8008478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	461d      	mov	r5, r3
 800847e:	898b      	ldrh	r3, [r1, #12]
 8008480:	061f      	lsls	r7, r3, #24
 8008482:	b09d      	sub	sp, #116	; 0x74
 8008484:	4680      	mov	r8, r0
 8008486:	460c      	mov	r4, r1
 8008488:	4616      	mov	r6, r2
 800848a:	d50f      	bpl.n	80084ac <_svfiprintf_r+0x34>
 800848c:	690b      	ldr	r3, [r1, #16]
 800848e:	b96b      	cbnz	r3, 80084ac <_svfiprintf_r+0x34>
 8008490:	2140      	movs	r1, #64	; 0x40
 8008492:	f000 fae3 	bl	8008a5c <_malloc_r>
 8008496:	6020      	str	r0, [r4, #0]
 8008498:	6120      	str	r0, [r4, #16]
 800849a:	b928      	cbnz	r0, 80084a8 <_svfiprintf_r+0x30>
 800849c:	230c      	movs	r3, #12
 800849e:	f8c8 3000 	str.w	r3, [r8]
 80084a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084a6:	e0c8      	b.n	800863a <_svfiprintf_r+0x1c2>
 80084a8:	2340      	movs	r3, #64	; 0x40
 80084aa:	6163      	str	r3, [r4, #20]
 80084ac:	2300      	movs	r3, #0
 80084ae:	9309      	str	r3, [sp, #36]	; 0x24
 80084b0:	2320      	movs	r3, #32
 80084b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084b6:	2330      	movs	r3, #48	; 0x30
 80084b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084bc:	9503      	str	r5, [sp, #12]
 80084be:	f04f 0b01 	mov.w	fp, #1
 80084c2:	4637      	mov	r7, r6
 80084c4:	463d      	mov	r5, r7
 80084c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80084ca:	b10b      	cbz	r3, 80084d0 <_svfiprintf_r+0x58>
 80084cc:	2b25      	cmp	r3, #37	; 0x25
 80084ce:	d13e      	bne.n	800854e <_svfiprintf_r+0xd6>
 80084d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80084d4:	d00b      	beq.n	80084ee <_svfiprintf_r+0x76>
 80084d6:	4653      	mov	r3, sl
 80084d8:	4632      	mov	r2, r6
 80084da:	4621      	mov	r1, r4
 80084dc:	4640      	mov	r0, r8
 80084de:	f7ff ff71 	bl	80083c4 <__ssputs_r>
 80084e2:	3001      	adds	r0, #1
 80084e4:	f000 80a4 	beq.w	8008630 <_svfiprintf_r+0x1b8>
 80084e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ea:	4453      	add	r3, sl
 80084ec:	9309      	str	r3, [sp, #36]	; 0x24
 80084ee:	783b      	ldrb	r3, [r7, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 809d 	beq.w	8008630 <_svfiprintf_r+0x1b8>
 80084f6:	2300      	movs	r3, #0
 80084f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008500:	9304      	str	r3, [sp, #16]
 8008502:	9307      	str	r3, [sp, #28]
 8008504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008508:	931a      	str	r3, [sp, #104]	; 0x68
 800850a:	462f      	mov	r7, r5
 800850c:	2205      	movs	r2, #5
 800850e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008512:	4850      	ldr	r0, [pc, #320]	; (8008654 <_svfiprintf_r+0x1dc>)
 8008514:	f7f7 fe64 	bl	80001e0 <memchr>
 8008518:	9b04      	ldr	r3, [sp, #16]
 800851a:	b9d0      	cbnz	r0, 8008552 <_svfiprintf_r+0xda>
 800851c:	06d9      	lsls	r1, r3, #27
 800851e:	bf44      	itt	mi
 8008520:	2220      	movmi	r2, #32
 8008522:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008526:	071a      	lsls	r2, r3, #28
 8008528:	bf44      	itt	mi
 800852a:	222b      	movmi	r2, #43	; 0x2b
 800852c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008530:	782a      	ldrb	r2, [r5, #0]
 8008532:	2a2a      	cmp	r2, #42	; 0x2a
 8008534:	d015      	beq.n	8008562 <_svfiprintf_r+0xea>
 8008536:	9a07      	ldr	r2, [sp, #28]
 8008538:	462f      	mov	r7, r5
 800853a:	2000      	movs	r0, #0
 800853c:	250a      	movs	r5, #10
 800853e:	4639      	mov	r1, r7
 8008540:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008544:	3b30      	subs	r3, #48	; 0x30
 8008546:	2b09      	cmp	r3, #9
 8008548:	d94d      	bls.n	80085e6 <_svfiprintf_r+0x16e>
 800854a:	b1b8      	cbz	r0, 800857c <_svfiprintf_r+0x104>
 800854c:	e00f      	b.n	800856e <_svfiprintf_r+0xf6>
 800854e:	462f      	mov	r7, r5
 8008550:	e7b8      	b.n	80084c4 <_svfiprintf_r+0x4c>
 8008552:	4a40      	ldr	r2, [pc, #256]	; (8008654 <_svfiprintf_r+0x1dc>)
 8008554:	1a80      	subs	r0, r0, r2
 8008556:	fa0b f000 	lsl.w	r0, fp, r0
 800855a:	4318      	orrs	r0, r3
 800855c:	9004      	str	r0, [sp, #16]
 800855e:	463d      	mov	r5, r7
 8008560:	e7d3      	b.n	800850a <_svfiprintf_r+0x92>
 8008562:	9a03      	ldr	r2, [sp, #12]
 8008564:	1d11      	adds	r1, r2, #4
 8008566:	6812      	ldr	r2, [r2, #0]
 8008568:	9103      	str	r1, [sp, #12]
 800856a:	2a00      	cmp	r2, #0
 800856c:	db01      	blt.n	8008572 <_svfiprintf_r+0xfa>
 800856e:	9207      	str	r2, [sp, #28]
 8008570:	e004      	b.n	800857c <_svfiprintf_r+0x104>
 8008572:	4252      	negs	r2, r2
 8008574:	f043 0302 	orr.w	r3, r3, #2
 8008578:	9207      	str	r2, [sp, #28]
 800857a:	9304      	str	r3, [sp, #16]
 800857c:	783b      	ldrb	r3, [r7, #0]
 800857e:	2b2e      	cmp	r3, #46	; 0x2e
 8008580:	d10c      	bne.n	800859c <_svfiprintf_r+0x124>
 8008582:	787b      	ldrb	r3, [r7, #1]
 8008584:	2b2a      	cmp	r3, #42	; 0x2a
 8008586:	d133      	bne.n	80085f0 <_svfiprintf_r+0x178>
 8008588:	9b03      	ldr	r3, [sp, #12]
 800858a:	1d1a      	adds	r2, r3, #4
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	9203      	str	r2, [sp, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	bfb8      	it	lt
 8008594:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008598:	3702      	adds	r7, #2
 800859a:	9305      	str	r3, [sp, #20]
 800859c:	4d2e      	ldr	r5, [pc, #184]	; (8008658 <_svfiprintf_r+0x1e0>)
 800859e:	7839      	ldrb	r1, [r7, #0]
 80085a0:	2203      	movs	r2, #3
 80085a2:	4628      	mov	r0, r5
 80085a4:	f7f7 fe1c 	bl	80001e0 <memchr>
 80085a8:	b138      	cbz	r0, 80085ba <_svfiprintf_r+0x142>
 80085aa:	2340      	movs	r3, #64	; 0x40
 80085ac:	1b40      	subs	r0, r0, r5
 80085ae:	fa03 f000 	lsl.w	r0, r3, r0
 80085b2:	9b04      	ldr	r3, [sp, #16]
 80085b4:	4303      	orrs	r3, r0
 80085b6:	3701      	adds	r7, #1
 80085b8:	9304      	str	r3, [sp, #16]
 80085ba:	7839      	ldrb	r1, [r7, #0]
 80085bc:	4827      	ldr	r0, [pc, #156]	; (800865c <_svfiprintf_r+0x1e4>)
 80085be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085c2:	2206      	movs	r2, #6
 80085c4:	1c7e      	adds	r6, r7, #1
 80085c6:	f7f7 fe0b 	bl	80001e0 <memchr>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d038      	beq.n	8008640 <_svfiprintf_r+0x1c8>
 80085ce:	4b24      	ldr	r3, [pc, #144]	; (8008660 <_svfiprintf_r+0x1e8>)
 80085d0:	bb13      	cbnz	r3, 8008618 <_svfiprintf_r+0x1a0>
 80085d2:	9b03      	ldr	r3, [sp, #12]
 80085d4:	3307      	adds	r3, #7
 80085d6:	f023 0307 	bic.w	r3, r3, #7
 80085da:	3308      	adds	r3, #8
 80085dc:	9303      	str	r3, [sp, #12]
 80085de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e0:	444b      	add	r3, r9
 80085e2:	9309      	str	r3, [sp, #36]	; 0x24
 80085e4:	e76d      	b.n	80084c2 <_svfiprintf_r+0x4a>
 80085e6:	fb05 3202 	mla	r2, r5, r2, r3
 80085ea:	2001      	movs	r0, #1
 80085ec:	460f      	mov	r7, r1
 80085ee:	e7a6      	b.n	800853e <_svfiprintf_r+0xc6>
 80085f0:	2300      	movs	r3, #0
 80085f2:	3701      	adds	r7, #1
 80085f4:	9305      	str	r3, [sp, #20]
 80085f6:	4619      	mov	r1, r3
 80085f8:	250a      	movs	r5, #10
 80085fa:	4638      	mov	r0, r7
 80085fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008600:	3a30      	subs	r2, #48	; 0x30
 8008602:	2a09      	cmp	r2, #9
 8008604:	d903      	bls.n	800860e <_svfiprintf_r+0x196>
 8008606:	2b00      	cmp	r3, #0
 8008608:	d0c8      	beq.n	800859c <_svfiprintf_r+0x124>
 800860a:	9105      	str	r1, [sp, #20]
 800860c:	e7c6      	b.n	800859c <_svfiprintf_r+0x124>
 800860e:	fb05 2101 	mla	r1, r5, r1, r2
 8008612:	2301      	movs	r3, #1
 8008614:	4607      	mov	r7, r0
 8008616:	e7f0      	b.n	80085fa <_svfiprintf_r+0x182>
 8008618:	ab03      	add	r3, sp, #12
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	4622      	mov	r2, r4
 800861e:	4b11      	ldr	r3, [pc, #68]	; (8008664 <_svfiprintf_r+0x1ec>)
 8008620:	a904      	add	r1, sp, #16
 8008622:	4640      	mov	r0, r8
 8008624:	f3af 8000 	nop.w
 8008628:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800862c:	4681      	mov	r9, r0
 800862e:	d1d6      	bne.n	80085de <_svfiprintf_r+0x166>
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	065b      	lsls	r3, r3, #25
 8008634:	f53f af35 	bmi.w	80084a2 <_svfiprintf_r+0x2a>
 8008638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800863a:	b01d      	add	sp, #116	; 0x74
 800863c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008640:	ab03      	add	r3, sp, #12
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	4622      	mov	r2, r4
 8008646:	4b07      	ldr	r3, [pc, #28]	; (8008664 <_svfiprintf_r+0x1ec>)
 8008648:	a904      	add	r1, sp, #16
 800864a:	4640      	mov	r0, r8
 800864c:	f000 f882 	bl	8008754 <_printf_i>
 8008650:	e7ea      	b.n	8008628 <_svfiprintf_r+0x1b0>
 8008652:	bf00      	nop
 8008654:	08008c25 	.word	0x08008c25
 8008658:	08008c2b 	.word	0x08008c2b
 800865c:	08008c2f 	.word	0x08008c2f
 8008660:	00000000 	.word	0x00000000
 8008664:	080083c5 	.word	0x080083c5

08008668 <_printf_common>:
 8008668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	4691      	mov	r9, r2
 800866e:	461f      	mov	r7, r3
 8008670:	688a      	ldr	r2, [r1, #8]
 8008672:	690b      	ldr	r3, [r1, #16]
 8008674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008678:	4293      	cmp	r3, r2
 800867a:	bfb8      	it	lt
 800867c:	4613      	movlt	r3, r2
 800867e:	f8c9 3000 	str.w	r3, [r9]
 8008682:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008686:	4606      	mov	r6, r0
 8008688:	460c      	mov	r4, r1
 800868a:	b112      	cbz	r2, 8008692 <_printf_common+0x2a>
 800868c:	3301      	adds	r3, #1
 800868e:	f8c9 3000 	str.w	r3, [r9]
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	0699      	lsls	r1, r3, #26
 8008696:	bf42      	ittt	mi
 8008698:	f8d9 3000 	ldrmi.w	r3, [r9]
 800869c:	3302      	addmi	r3, #2
 800869e:	f8c9 3000 	strmi.w	r3, [r9]
 80086a2:	6825      	ldr	r5, [r4, #0]
 80086a4:	f015 0506 	ands.w	r5, r5, #6
 80086a8:	d107      	bne.n	80086ba <_printf_common+0x52>
 80086aa:	f104 0a19 	add.w	sl, r4, #25
 80086ae:	68e3      	ldr	r3, [r4, #12]
 80086b0:	f8d9 2000 	ldr.w	r2, [r9]
 80086b4:	1a9b      	subs	r3, r3, r2
 80086b6:	42ab      	cmp	r3, r5
 80086b8:	dc28      	bgt.n	800870c <_printf_common+0xa4>
 80086ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80086be:	6822      	ldr	r2, [r4, #0]
 80086c0:	3300      	adds	r3, #0
 80086c2:	bf18      	it	ne
 80086c4:	2301      	movne	r3, #1
 80086c6:	0692      	lsls	r2, r2, #26
 80086c8:	d42d      	bmi.n	8008726 <_printf_common+0xbe>
 80086ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086ce:	4639      	mov	r1, r7
 80086d0:	4630      	mov	r0, r6
 80086d2:	47c0      	blx	r8
 80086d4:	3001      	adds	r0, #1
 80086d6:	d020      	beq.n	800871a <_printf_common+0xb2>
 80086d8:	6823      	ldr	r3, [r4, #0]
 80086da:	68e5      	ldr	r5, [r4, #12]
 80086dc:	f8d9 2000 	ldr.w	r2, [r9]
 80086e0:	f003 0306 	and.w	r3, r3, #6
 80086e4:	2b04      	cmp	r3, #4
 80086e6:	bf08      	it	eq
 80086e8:	1aad      	subeq	r5, r5, r2
 80086ea:	68a3      	ldr	r3, [r4, #8]
 80086ec:	6922      	ldr	r2, [r4, #16]
 80086ee:	bf0c      	ite	eq
 80086f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086f4:	2500      	movne	r5, #0
 80086f6:	4293      	cmp	r3, r2
 80086f8:	bfc4      	itt	gt
 80086fa:	1a9b      	subgt	r3, r3, r2
 80086fc:	18ed      	addgt	r5, r5, r3
 80086fe:	f04f 0900 	mov.w	r9, #0
 8008702:	341a      	adds	r4, #26
 8008704:	454d      	cmp	r5, r9
 8008706:	d11a      	bne.n	800873e <_printf_common+0xd6>
 8008708:	2000      	movs	r0, #0
 800870a:	e008      	b.n	800871e <_printf_common+0xb6>
 800870c:	2301      	movs	r3, #1
 800870e:	4652      	mov	r2, sl
 8008710:	4639      	mov	r1, r7
 8008712:	4630      	mov	r0, r6
 8008714:	47c0      	blx	r8
 8008716:	3001      	adds	r0, #1
 8008718:	d103      	bne.n	8008722 <_printf_common+0xba>
 800871a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800871e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008722:	3501      	adds	r5, #1
 8008724:	e7c3      	b.n	80086ae <_printf_common+0x46>
 8008726:	18e1      	adds	r1, r4, r3
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	2030      	movs	r0, #48	; 0x30
 800872c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008730:	4422      	add	r2, r4
 8008732:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008736:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800873a:	3302      	adds	r3, #2
 800873c:	e7c5      	b.n	80086ca <_printf_common+0x62>
 800873e:	2301      	movs	r3, #1
 8008740:	4622      	mov	r2, r4
 8008742:	4639      	mov	r1, r7
 8008744:	4630      	mov	r0, r6
 8008746:	47c0      	blx	r8
 8008748:	3001      	adds	r0, #1
 800874a:	d0e6      	beq.n	800871a <_printf_common+0xb2>
 800874c:	f109 0901 	add.w	r9, r9, #1
 8008750:	e7d8      	b.n	8008704 <_printf_common+0x9c>
	...

08008754 <_printf_i>:
 8008754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008758:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800875c:	460c      	mov	r4, r1
 800875e:	7e09      	ldrb	r1, [r1, #24]
 8008760:	b085      	sub	sp, #20
 8008762:	296e      	cmp	r1, #110	; 0x6e
 8008764:	4617      	mov	r7, r2
 8008766:	4606      	mov	r6, r0
 8008768:	4698      	mov	r8, r3
 800876a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800876c:	f000 80b3 	beq.w	80088d6 <_printf_i+0x182>
 8008770:	d822      	bhi.n	80087b8 <_printf_i+0x64>
 8008772:	2963      	cmp	r1, #99	; 0x63
 8008774:	d036      	beq.n	80087e4 <_printf_i+0x90>
 8008776:	d80a      	bhi.n	800878e <_printf_i+0x3a>
 8008778:	2900      	cmp	r1, #0
 800877a:	f000 80b9 	beq.w	80088f0 <_printf_i+0x19c>
 800877e:	2958      	cmp	r1, #88	; 0x58
 8008780:	f000 8083 	beq.w	800888a <_printf_i+0x136>
 8008784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008788:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800878c:	e032      	b.n	80087f4 <_printf_i+0xa0>
 800878e:	2964      	cmp	r1, #100	; 0x64
 8008790:	d001      	beq.n	8008796 <_printf_i+0x42>
 8008792:	2969      	cmp	r1, #105	; 0x69
 8008794:	d1f6      	bne.n	8008784 <_printf_i+0x30>
 8008796:	6820      	ldr	r0, [r4, #0]
 8008798:	6813      	ldr	r3, [r2, #0]
 800879a:	0605      	lsls	r5, r0, #24
 800879c:	f103 0104 	add.w	r1, r3, #4
 80087a0:	d52a      	bpl.n	80087f8 <_printf_i+0xa4>
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6011      	str	r1, [r2, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	da03      	bge.n	80087b2 <_printf_i+0x5e>
 80087aa:	222d      	movs	r2, #45	; 0x2d
 80087ac:	425b      	negs	r3, r3
 80087ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80087b2:	486f      	ldr	r0, [pc, #444]	; (8008970 <_printf_i+0x21c>)
 80087b4:	220a      	movs	r2, #10
 80087b6:	e039      	b.n	800882c <_printf_i+0xd8>
 80087b8:	2973      	cmp	r1, #115	; 0x73
 80087ba:	f000 809d 	beq.w	80088f8 <_printf_i+0x1a4>
 80087be:	d808      	bhi.n	80087d2 <_printf_i+0x7e>
 80087c0:	296f      	cmp	r1, #111	; 0x6f
 80087c2:	d020      	beq.n	8008806 <_printf_i+0xb2>
 80087c4:	2970      	cmp	r1, #112	; 0x70
 80087c6:	d1dd      	bne.n	8008784 <_printf_i+0x30>
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	f043 0320 	orr.w	r3, r3, #32
 80087ce:	6023      	str	r3, [r4, #0]
 80087d0:	e003      	b.n	80087da <_printf_i+0x86>
 80087d2:	2975      	cmp	r1, #117	; 0x75
 80087d4:	d017      	beq.n	8008806 <_printf_i+0xb2>
 80087d6:	2978      	cmp	r1, #120	; 0x78
 80087d8:	d1d4      	bne.n	8008784 <_printf_i+0x30>
 80087da:	2378      	movs	r3, #120	; 0x78
 80087dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087e0:	4864      	ldr	r0, [pc, #400]	; (8008974 <_printf_i+0x220>)
 80087e2:	e055      	b.n	8008890 <_printf_i+0x13c>
 80087e4:	6813      	ldr	r3, [r2, #0]
 80087e6:	1d19      	adds	r1, r3, #4
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6011      	str	r1, [r2, #0]
 80087ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087f4:	2301      	movs	r3, #1
 80087f6:	e08c      	b.n	8008912 <_printf_i+0x1be>
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6011      	str	r1, [r2, #0]
 80087fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008800:	bf18      	it	ne
 8008802:	b21b      	sxthne	r3, r3
 8008804:	e7cf      	b.n	80087a6 <_printf_i+0x52>
 8008806:	6813      	ldr	r3, [r2, #0]
 8008808:	6825      	ldr	r5, [r4, #0]
 800880a:	1d18      	adds	r0, r3, #4
 800880c:	6010      	str	r0, [r2, #0]
 800880e:	0628      	lsls	r0, r5, #24
 8008810:	d501      	bpl.n	8008816 <_printf_i+0xc2>
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	e002      	b.n	800881c <_printf_i+0xc8>
 8008816:	0668      	lsls	r0, r5, #25
 8008818:	d5fb      	bpl.n	8008812 <_printf_i+0xbe>
 800881a:	881b      	ldrh	r3, [r3, #0]
 800881c:	4854      	ldr	r0, [pc, #336]	; (8008970 <_printf_i+0x21c>)
 800881e:	296f      	cmp	r1, #111	; 0x6f
 8008820:	bf14      	ite	ne
 8008822:	220a      	movne	r2, #10
 8008824:	2208      	moveq	r2, #8
 8008826:	2100      	movs	r1, #0
 8008828:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800882c:	6865      	ldr	r5, [r4, #4]
 800882e:	60a5      	str	r5, [r4, #8]
 8008830:	2d00      	cmp	r5, #0
 8008832:	f2c0 8095 	blt.w	8008960 <_printf_i+0x20c>
 8008836:	6821      	ldr	r1, [r4, #0]
 8008838:	f021 0104 	bic.w	r1, r1, #4
 800883c:	6021      	str	r1, [r4, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d13d      	bne.n	80088be <_printf_i+0x16a>
 8008842:	2d00      	cmp	r5, #0
 8008844:	f040 808e 	bne.w	8008964 <_printf_i+0x210>
 8008848:	4665      	mov	r5, ip
 800884a:	2a08      	cmp	r2, #8
 800884c:	d10b      	bne.n	8008866 <_printf_i+0x112>
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	07db      	lsls	r3, r3, #31
 8008852:	d508      	bpl.n	8008866 <_printf_i+0x112>
 8008854:	6923      	ldr	r3, [r4, #16]
 8008856:	6862      	ldr	r2, [r4, #4]
 8008858:	429a      	cmp	r2, r3
 800885a:	bfde      	ittt	le
 800885c:	2330      	movle	r3, #48	; 0x30
 800885e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008862:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008866:	ebac 0305 	sub.w	r3, ip, r5
 800886a:	6123      	str	r3, [r4, #16]
 800886c:	f8cd 8000 	str.w	r8, [sp]
 8008870:	463b      	mov	r3, r7
 8008872:	aa03      	add	r2, sp, #12
 8008874:	4621      	mov	r1, r4
 8008876:	4630      	mov	r0, r6
 8008878:	f7ff fef6 	bl	8008668 <_printf_common>
 800887c:	3001      	adds	r0, #1
 800887e:	d14d      	bne.n	800891c <_printf_i+0x1c8>
 8008880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008884:	b005      	add	sp, #20
 8008886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800888a:	4839      	ldr	r0, [pc, #228]	; (8008970 <_printf_i+0x21c>)
 800888c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008890:	6813      	ldr	r3, [r2, #0]
 8008892:	6821      	ldr	r1, [r4, #0]
 8008894:	1d1d      	adds	r5, r3, #4
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6015      	str	r5, [r2, #0]
 800889a:	060a      	lsls	r2, r1, #24
 800889c:	d50b      	bpl.n	80088b6 <_printf_i+0x162>
 800889e:	07ca      	lsls	r2, r1, #31
 80088a0:	bf44      	itt	mi
 80088a2:	f041 0120 	orrmi.w	r1, r1, #32
 80088a6:	6021      	strmi	r1, [r4, #0]
 80088a8:	b91b      	cbnz	r3, 80088b2 <_printf_i+0x15e>
 80088aa:	6822      	ldr	r2, [r4, #0]
 80088ac:	f022 0220 	bic.w	r2, r2, #32
 80088b0:	6022      	str	r2, [r4, #0]
 80088b2:	2210      	movs	r2, #16
 80088b4:	e7b7      	b.n	8008826 <_printf_i+0xd2>
 80088b6:	064d      	lsls	r5, r1, #25
 80088b8:	bf48      	it	mi
 80088ba:	b29b      	uxthmi	r3, r3
 80088bc:	e7ef      	b.n	800889e <_printf_i+0x14a>
 80088be:	4665      	mov	r5, ip
 80088c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80088c4:	fb02 3311 	mls	r3, r2, r1, r3
 80088c8:	5cc3      	ldrb	r3, [r0, r3]
 80088ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80088ce:	460b      	mov	r3, r1
 80088d0:	2900      	cmp	r1, #0
 80088d2:	d1f5      	bne.n	80088c0 <_printf_i+0x16c>
 80088d4:	e7b9      	b.n	800884a <_printf_i+0xf6>
 80088d6:	6813      	ldr	r3, [r2, #0]
 80088d8:	6825      	ldr	r5, [r4, #0]
 80088da:	6961      	ldr	r1, [r4, #20]
 80088dc:	1d18      	adds	r0, r3, #4
 80088de:	6010      	str	r0, [r2, #0]
 80088e0:	0628      	lsls	r0, r5, #24
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	d501      	bpl.n	80088ea <_printf_i+0x196>
 80088e6:	6019      	str	r1, [r3, #0]
 80088e8:	e002      	b.n	80088f0 <_printf_i+0x19c>
 80088ea:	066a      	lsls	r2, r5, #25
 80088ec:	d5fb      	bpl.n	80088e6 <_printf_i+0x192>
 80088ee:	8019      	strh	r1, [r3, #0]
 80088f0:	2300      	movs	r3, #0
 80088f2:	6123      	str	r3, [r4, #16]
 80088f4:	4665      	mov	r5, ip
 80088f6:	e7b9      	b.n	800886c <_printf_i+0x118>
 80088f8:	6813      	ldr	r3, [r2, #0]
 80088fa:	1d19      	adds	r1, r3, #4
 80088fc:	6011      	str	r1, [r2, #0]
 80088fe:	681d      	ldr	r5, [r3, #0]
 8008900:	6862      	ldr	r2, [r4, #4]
 8008902:	2100      	movs	r1, #0
 8008904:	4628      	mov	r0, r5
 8008906:	f7f7 fc6b 	bl	80001e0 <memchr>
 800890a:	b108      	cbz	r0, 8008910 <_printf_i+0x1bc>
 800890c:	1b40      	subs	r0, r0, r5
 800890e:	6060      	str	r0, [r4, #4]
 8008910:	6863      	ldr	r3, [r4, #4]
 8008912:	6123      	str	r3, [r4, #16]
 8008914:	2300      	movs	r3, #0
 8008916:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800891a:	e7a7      	b.n	800886c <_printf_i+0x118>
 800891c:	6923      	ldr	r3, [r4, #16]
 800891e:	462a      	mov	r2, r5
 8008920:	4639      	mov	r1, r7
 8008922:	4630      	mov	r0, r6
 8008924:	47c0      	blx	r8
 8008926:	3001      	adds	r0, #1
 8008928:	d0aa      	beq.n	8008880 <_printf_i+0x12c>
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	079b      	lsls	r3, r3, #30
 800892e:	d413      	bmi.n	8008958 <_printf_i+0x204>
 8008930:	68e0      	ldr	r0, [r4, #12]
 8008932:	9b03      	ldr	r3, [sp, #12]
 8008934:	4298      	cmp	r0, r3
 8008936:	bfb8      	it	lt
 8008938:	4618      	movlt	r0, r3
 800893a:	e7a3      	b.n	8008884 <_printf_i+0x130>
 800893c:	2301      	movs	r3, #1
 800893e:	464a      	mov	r2, r9
 8008940:	4639      	mov	r1, r7
 8008942:	4630      	mov	r0, r6
 8008944:	47c0      	blx	r8
 8008946:	3001      	adds	r0, #1
 8008948:	d09a      	beq.n	8008880 <_printf_i+0x12c>
 800894a:	3501      	adds	r5, #1
 800894c:	68e3      	ldr	r3, [r4, #12]
 800894e:	9a03      	ldr	r2, [sp, #12]
 8008950:	1a9b      	subs	r3, r3, r2
 8008952:	42ab      	cmp	r3, r5
 8008954:	dcf2      	bgt.n	800893c <_printf_i+0x1e8>
 8008956:	e7eb      	b.n	8008930 <_printf_i+0x1dc>
 8008958:	2500      	movs	r5, #0
 800895a:	f104 0919 	add.w	r9, r4, #25
 800895e:	e7f5      	b.n	800894c <_printf_i+0x1f8>
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1ac      	bne.n	80088be <_printf_i+0x16a>
 8008964:	7803      	ldrb	r3, [r0, #0]
 8008966:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800896a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800896e:	e76c      	b.n	800884a <_printf_i+0xf6>
 8008970:	08008c36 	.word	0x08008c36
 8008974:	08008c47 	.word	0x08008c47

08008978 <memcpy>:
 8008978:	b510      	push	{r4, lr}
 800897a:	1e43      	subs	r3, r0, #1
 800897c:	440a      	add	r2, r1
 800897e:	4291      	cmp	r1, r2
 8008980:	d100      	bne.n	8008984 <memcpy+0xc>
 8008982:	bd10      	pop	{r4, pc}
 8008984:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008988:	f803 4f01 	strb.w	r4, [r3, #1]!
 800898c:	e7f7      	b.n	800897e <memcpy+0x6>

0800898e <memmove>:
 800898e:	4288      	cmp	r0, r1
 8008990:	b510      	push	{r4, lr}
 8008992:	eb01 0302 	add.w	r3, r1, r2
 8008996:	d807      	bhi.n	80089a8 <memmove+0x1a>
 8008998:	1e42      	subs	r2, r0, #1
 800899a:	4299      	cmp	r1, r3
 800899c:	d00a      	beq.n	80089b4 <memmove+0x26>
 800899e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089a2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80089a6:	e7f8      	b.n	800899a <memmove+0xc>
 80089a8:	4283      	cmp	r3, r0
 80089aa:	d9f5      	bls.n	8008998 <memmove+0xa>
 80089ac:	1881      	adds	r1, r0, r2
 80089ae:	1ad2      	subs	r2, r2, r3
 80089b0:	42d3      	cmn	r3, r2
 80089b2:	d100      	bne.n	80089b6 <memmove+0x28>
 80089b4:	bd10      	pop	{r4, pc}
 80089b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089ba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80089be:	e7f7      	b.n	80089b0 <memmove+0x22>

080089c0 <_free_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4605      	mov	r5, r0
 80089c4:	2900      	cmp	r1, #0
 80089c6:	d045      	beq.n	8008a54 <_free_r+0x94>
 80089c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089cc:	1f0c      	subs	r4, r1, #4
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	bfb8      	it	lt
 80089d2:	18e4      	addlt	r4, r4, r3
 80089d4:	f000 f8d2 	bl	8008b7c <__malloc_lock>
 80089d8:	4a1f      	ldr	r2, [pc, #124]	; (8008a58 <_free_r+0x98>)
 80089da:	6813      	ldr	r3, [r2, #0]
 80089dc:	4610      	mov	r0, r2
 80089de:	b933      	cbnz	r3, 80089ee <_free_r+0x2e>
 80089e0:	6063      	str	r3, [r4, #4]
 80089e2:	6014      	str	r4, [r2, #0]
 80089e4:	4628      	mov	r0, r5
 80089e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ea:	f000 b8c8 	b.w	8008b7e <__malloc_unlock>
 80089ee:	42a3      	cmp	r3, r4
 80089f0:	d90c      	bls.n	8008a0c <_free_r+0x4c>
 80089f2:	6821      	ldr	r1, [r4, #0]
 80089f4:	1862      	adds	r2, r4, r1
 80089f6:	4293      	cmp	r3, r2
 80089f8:	bf04      	itt	eq
 80089fa:	681a      	ldreq	r2, [r3, #0]
 80089fc:	685b      	ldreq	r3, [r3, #4]
 80089fe:	6063      	str	r3, [r4, #4]
 8008a00:	bf04      	itt	eq
 8008a02:	1852      	addeq	r2, r2, r1
 8008a04:	6022      	streq	r2, [r4, #0]
 8008a06:	6004      	str	r4, [r0, #0]
 8008a08:	e7ec      	b.n	80089e4 <_free_r+0x24>
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	b10a      	cbz	r2, 8008a14 <_free_r+0x54>
 8008a10:	42a2      	cmp	r2, r4
 8008a12:	d9fa      	bls.n	8008a0a <_free_r+0x4a>
 8008a14:	6819      	ldr	r1, [r3, #0]
 8008a16:	1858      	adds	r0, r3, r1
 8008a18:	42a0      	cmp	r0, r4
 8008a1a:	d10b      	bne.n	8008a34 <_free_r+0x74>
 8008a1c:	6820      	ldr	r0, [r4, #0]
 8008a1e:	4401      	add	r1, r0
 8008a20:	1858      	adds	r0, r3, r1
 8008a22:	4282      	cmp	r2, r0
 8008a24:	6019      	str	r1, [r3, #0]
 8008a26:	d1dd      	bne.n	80089e4 <_free_r+0x24>
 8008a28:	6810      	ldr	r0, [r2, #0]
 8008a2a:	6852      	ldr	r2, [r2, #4]
 8008a2c:	605a      	str	r2, [r3, #4]
 8008a2e:	4401      	add	r1, r0
 8008a30:	6019      	str	r1, [r3, #0]
 8008a32:	e7d7      	b.n	80089e4 <_free_r+0x24>
 8008a34:	d902      	bls.n	8008a3c <_free_r+0x7c>
 8008a36:	230c      	movs	r3, #12
 8008a38:	602b      	str	r3, [r5, #0]
 8008a3a:	e7d3      	b.n	80089e4 <_free_r+0x24>
 8008a3c:	6820      	ldr	r0, [r4, #0]
 8008a3e:	1821      	adds	r1, r4, r0
 8008a40:	428a      	cmp	r2, r1
 8008a42:	bf04      	itt	eq
 8008a44:	6811      	ldreq	r1, [r2, #0]
 8008a46:	6852      	ldreq	r2, [r2, #4]
 8008a48:	6062      	str	r2, [r4, #4]
 8008a4a:	bf04      	itt	eq
 8008a4c:	1809      	addeq	r1, r1, r0
 8008a4e:	6021      	streq	r1, [r4, #0]
 8008a50:	605c      	str	r4, [r3, #4]
 8008a52:	e7c7      	b.n	80089e4 <_free_r+0x24>
 8008a54:	bd38      	pop	{r3, r4, r5, pc}
 8008a56:	bf00      	nop
 8008a58:	20000090 	.word	0x20000090

08008a5c <_malloc_r>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	1ccd      	adds	r5, r1, #3
 8008a60:	f025 0503 	bic.w	r5, r5, #3
 8008a64:	3508      	adds	r5, #8
 8008a66:	2d0c      	cmp	r5, #12
 8008a68:	bf38      	it	cc
 8008a6a:	250c      	movcc	r5, #12
 8008a6c:	2d00      	cmp	r5, #0
 8008a6e:	4606      	mov	r6, r0
 8008a70:	db01      	blt.n	8008a76 <_malloc_r+0x1a>
 8008a72:	42a9      	cmp	r1, r5
 8008a74:	d903      	bls.n	8008a7e <_malloc_r+0x22>
 8008a76:	230c      	movs	r3, #12
 8008a78:	6033      	str	r3, [r6, #0]
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	bd70      	pop	{r4, r5, r6, pc}
 8008a7e:	f000 f87d 	bl	8008b7c <__malloc_lock>
 8008a82:	4a21      	ldr	r2, [pc, #132]	; (8008b08 <_malloc_r+0xac>)
 8008a84:	6814      	ldr	r4, [r2, #0]
 8008a86:	4621      	mov	r1, r4
 8008a88:	b991      	cbnz	r1, 8008ab0 <_malloc_r+0x54>
 8008a8a:	4c20      	ldr	r4, [pc, #128]	; (8008b0c <_malloc_r+0xb0>)
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	b91b      	cbnz	r3, 8008a98 <_malloc_r+0x3c>
 8008a90:	4630      	mov	r0, r6
 8008a92:	f000 f863 	bl	8008b5c <_sbrk_r>
 8008a96:	6020      	str	r0, [r4, #0]
 8008a98:	4629      	mov	r1, r5
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f000 f85e 	bl	8008b5c <_sbrk_r>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d124      	bne.n	8008aee <_malloc_r+0x92>
 8008aa4:	230c      	movs	r3, #12
 8008aa6:	6033      	str	r3, [r6, #0]
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f000 f868 	bl	8008b7e <__malloc_unlock>
 8008aae:	e7e4      	b.n	8008a7a <_malloc_r+0x1e>
 8008ab0:	680b      	ldr	r3, [r1, #0]
 8008ab2:	1b5b      	subs	r3, r3, r5
 8008ab4:	d418      	bmi.n	8008ae8 <_malloc_r+0x8c>
 8008ab6:	2b0b      	cmp	r3, #11
 8008ab8:	d90f      	bls.n	8008ada <_malloc_r+0x7e>
 8008aba:	600b      	str	r3, [r1, #0]
 8008abc:	50cd      	str	r5, [r1, r3]
 8008abe:	18cc      	adds	r4, r1, r3
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f000 f85c 	bl	8008b7e <__malloc_unlock>
 8008ac6:	f104 000b 	add.w	r0, r4, #11
 8008aca:	1d23      	adds	r3, r4, #4
 8008acc:	f020 0007 	bic.w	r0, r0, #7
 8008ad0:	1ac3      	subs	r3, r0, r3
 8008ad2:	d0d3      	beq.n	8008a7c <_malloc_r+0x20>
 8008ad4:	425a      	negs	r2, r3
 8008ad6:	50e2      	str	r2, [r4, r3]
 8008ad8:	e7d0      	b.n	8008a7c <_malloc_r+0x20>
 8008ada:	428c      	cmp	r4, r1
 8008adc:	684b      	ldr	r3, [r1, #4]
 8008ade:	bf16      	itet	ne
 8008ae0:	6063      	strne	r3, [r4, #4]
 8008ae2:	6013      	streq	r3, [r2, #0]
 8008ae4:	460c      	movne	r4, r1
 8008ae6:	e7eb      	b.n	8008ac0 <_malloc_r+0x64>
 8008ae8:	460c      	mov	r4, r1
 8008aea:	6849      	ldr	r1, [r1, #4]
 8008aec:	e7cc      	b.n	8008a88 <_malloc_r+0x2c>
 8008aee:	1cc4      	adds	r4, r0, #3
 8008af0:	f024 0403 	bic.w	r4, r4, #3
 8008af4:	42a0      	cmp	r0, r4
 8008af6:	d005      	beq.n	8008b04 <_malloc_r+0xa8>
 8008af8:	1a21      	subs	r1, r4, r0
 8008afa:	4630      	mov	r0, r6
 8008afc:	f000 f82e 	bl	8008b5c <_sbrk_r>
 8008b00:	3001      	adds	r0, #1
 8008b02:	d0cf      	beq.n	8008aa4 <_malloc_r+0x48>
 8008b04:	6025      	str	r5, [r4, #0]
 8008b06:	e7db      	b.n	8008ac0 <_malloc_r+0x64>
 8008b08:	20000090 	.word	0x20000090
 8008b0c:	20000094 	.word	0x20000094

08008b10 <_realloc_r>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	4607      	mov	r7, r0
 8008b14:	4614      	mov	r4, r2
 8008b16:	460e      	mov	r6, r1
 8008b18:	b921      	cbnz	r1, 8008b24 <_realloc_r+0x14>
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b20:	f7ff bf9c 	b.w	8008a5c <_malloc_r>
 8008b24:	b922      	cbnz	r2, 8008b30 <_realloc_r+0x20>
 8008b26:	f7ff ff4b 	bl	80089c0 <_free_r>
 8008b2a:	4625      	mov	r5, r4
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b30:	f000 f826 	bl	8008b80 <_malloc_usable_size_r>
 8008b34:	42a0      	cmp	r0, r4
 8008b36:	d20f      	bcs.n	8008b58 <_realloc_r+0x48>
 8008b38:	4621      	mov	r1, r4
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	f7ff ff8e 	bl	8008a5c <_malloc_r>
 8008b40:	4605      	mov	r5, r0
 8008b42:	2800      	cmp	r0, #0
 8008b44:	d0f2      	beq.n	8008b2c <_realloc_r+0x1c>
 8008b46:	4631      	mov	r1, r6
 8008b48:	4622      	mov	r2, r4
 8008b4a:	f7ff ff15 	bl	8008978 <memcpy>
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4638      	mov	r0, r7
 8008b52:	f7ff ff35 	bl	80089c0 <_free_r>
 8008b56:	e7e9      	b.n	8008b2c <_realloc_r+0x1c>
 8008b58:	4635      	mov	r5, r6
 8008b5a:	e7e7      	b.n	8008b2c <_realloc_r+0x1c>

08008b5c <_sbrk_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4c06      	ldr	r4, [pc, #24]	; (8008b78 <_sbrk_r+0x1c>)
 8008b60:	2300      	movs	r3, #0
 8008b62:	4605      	mov	r5, r0
 8008b64:	4608      	mov	r0, r1
 8008b66:	6023      	str	r3, [r4, #0]
 8008b68:	f7ff faf2 	bl	8008150 <_sbrk>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d102      	bne.n	8008b76 <_sbrk_r+0x1a>
 8008b70:	6823      	ldr	r3, [r4, #0]
 8008b72:	b103      	cbz	r3, 8008b76 <_sbrk_r+0x1a>
 8008b74:	602b      	str	r3, [r5, #0]
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	200007a0 	.word	0x200007a0

08008b7c <__malloc_lock>:
 8008b7c:	4770      	bx	lr

08008b7e <__malloc_unlock>:
 8008b7e:	4770      	bx	lr

08008b80 <_malloc_usable_size_r>:
 8008b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b84:	1f18      	subs	r0, r3, #4
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	bfbc      	itt	lt
 8008b8a:	580b      	ldrlt	r3, [r1, r0]
 8008b8c:	18c0      	addlt	r0, r0, r3
 8008b8e:	4770      	bx	lr

08008b90 <_init>:
 8008b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b92:	bf00      	nop
 8008b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b96:	bc08      	pop	{r3}
 8008b98:	469e      	mov	lr, r3
 8008b9a:	4770      	bx	lr

08008b9c <_fini>:
 8008b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9e:	bf00      	nop
 8008ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba2:	bc08      	pop	{r3}
 8008ba4:	469e      	mov	lr, r3
 8008ba6:	4770      	bx	lr
