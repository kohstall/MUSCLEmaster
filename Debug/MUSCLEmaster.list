
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800af80  0800af80  0001af80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b270  0800b270  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b270  0800b270  0001b270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b278  0800b278  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b278  0800b278  0001b278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b27c  0800b27c  0001b27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800b280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  2000008c  0800b30c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  0800b30c  0002080c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014638  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000260a  00000000  00000000  000346f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001408  00000000  00000000  00036d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001300  00000000  00000000  00038108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f947  00000000  00000000  00039408  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e7b6  00000000  00000000  00058d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb802  00000000  00000000  00067505  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132d07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da8  00000000  00000000  00132d84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af64 	.word	0x0800af64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800af64 	.word	0x0800af64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 b972 	b.w	8000f58 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9e08      	ldr	r6, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	4688      	mov	r8, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14b      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4615      	mov	r5, r2
 8000c9e:	d967      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0720 	rsb	r7, r2, #32
 8000caa:	fa01 f302 	lsl.w	r3, r1, r2
 8000cae:	fa20 f707 	lsr.w	r7, r0, r7
 8000cb2:	4095      	lsls	r5, r2
 8000cb4:	ea47 0803 	orr.w	r8, r7, r3
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc4:	fa1f fc85 	uxth.w	ip, r5
 8000cc8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ccc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cd0:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18eb      	adds	r3, r5, r3
 8000cda:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cde:	f080 811b 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8118 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000ce8:	3f02      	subs	r7, #2
 8000cea:	442b      	add	r3, r5
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d00:	45a4      	cmp	ip, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x290>
 8000d0e:	45a4      	cmp	ip, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x290>
 8000d14:	3802      	subs	r0, #2
 8000d16:	442c      	add	r4, r5
 8000d18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d1c:	eba4 040c 	sub.w	r4, r4, ip
 8000d20:	2700      	movs	r7, #0
 8000d22:	b11e      	cbz	r6, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xbe>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	f000 80eb 	beq.w	8000f12 <__udivmoddi4+0x286>
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d42:	4638      	mov	r0, r7
 8000d44:	4639      	mov	r1, r7
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f783 	clz	r7, r3
 8000d4e:	2f00      	cmp	r7, #0
 8000d50:	d147      	bne.n	8000de2 <__udivmoddi4+0x156>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd0>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80fa 	bhi.w	8000f50 <__udivmoddi4+0x2c4>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	4698      	mov	r8, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000d6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xe8>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 808f 	bne.w	8000e9c <__udivmoddi4+0x210>
 8000d7e:	1b49      	subs	r1, r1, r5
 8000d80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d84:	fa1f f885 	uxth.w	r8, r5
 8000d88:	2701      	movs	r7, #1
 8000d8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8e:	0c23      	lsrs	r3, r4, #16
 8000d90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb08 f10c 	mul.w	r1, r8, ip
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x124>
 8000da0:	18eb      	adds	r3, r5, r3
 8000da2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x122>
 8000da8:	4299      	cmp	r1, r3
 8000daa:	f200 80cd 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000dae:	4684      	mov	ip, r0
 8000db0:	1a59      	subs	r1, r3, r1
 8000db2:	b2a3      	uxth	r3, r4
 8000db4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dc0:	fb08 f800 	mul.w	r8, r8, r0
 8000dc4:	45a0      	cmp	r8, r4
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0x14c>
 8000dc8:	192c      	adds	r4, r5, r4
 8000dca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x14a>
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	f200 80b6 	bhi.w	8000f42 <__udivmoddi4+0x2b6>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000de0:	e79f      	b.n	8000d22 <__udivmoddi4+0x96>
 8000de2:	f1c7 0c20 	rsb	ip, r7, #32
 8000de6:	40bb      	lsls	r3, r7
 8000de8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000df0:	fa01 f407 	lsl.w	r4, r1, r7
 8000df4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e00:	4325      	orrs	r5, r4
 8000e02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e06:	0c2c      	lsrs	r4, r5, #16
 8000e08:	fb08 3319 	mls	r3, r8, r9, r3
 8000e0c:	fa1f fa8e 	uxth.w	sl, lr
 8000e10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e14:	fb09 f40a 	mul.w	r4, r9, sl
 8000e18:	429c      	cmp	r4, r3
 8000e1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x1b0>
 8000e24:	eb1e 0303 	adds.w	r3, lr, r3
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	f080 8087 	bcs.w	8000f3e <__udivmoddi4+0x2b2>
 8000e30:	429c      	cmp	r4, r3
 8000e32:	f240 8084 	bls.w	8000f3e <__udivmoddi4+0x2b2>
 8000e36:	f1a9 0902 	sub.w	r9, r9, #2
 8000e3a:	4473      	add	r3, lr
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	b2ad      	uxth	r5, r5
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e50:	45a2      	cmp	sl, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1da>
 8000e54:	eb1e 0404 	adds.w	r4, lr, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e5c:	d26b      	bcs.n	8000f36 <__udivmoddi4+0x2aa>
 8000e5e:	45a2      	cmp	sl, r4
 8000e60:	d969      	bls.n	8000f36 <__udivmoddi4+0x2aa>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4474      	add	r4, lr
 8000e66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	eba4 040a 	sub.w	r4, r4, sl
 8000e72:	454c      	cmp	r4, r9
 8000e74:	46c2      	mov	sl, r8
 8000e76:	464b      	mov	r3, r9
 8000e78:	d354      	bcc.n	8000f24 <__udivmoddi4+0x298>
 8000e7a:	d051      	beq.n	8000f20 <__udivmoddi4+0x294>
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d069      	beq.n	8000f54 <__udivmoddi4+0x2c8>
 8000e80:	ebb1 050a 	subs.w	r5, r1, sl
 8000e84:	eb64 0403 	sbc.w	r4, r4, r3
 8000e88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e8c:	40fd      	lsrs	r5, r7
 8000e8e:	40fc      	lsrs	r4, r7
 8000e90:	ea4c 0505 	orr.w	r5, ip, r5
 8000e94:	e9c6 5400 	strd	r5, r4, [r6]
 8000e98:	2700      	movs	r7, #0
 8000e9a:	e747      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea4:	4095      	lsls	r5, r2
 8000ea6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8000eae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eb2:	4338      	orrs	r0, r7
 8000eb4:	0c01      	lsrs	r1, r0, #16
 8000eb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eba:	fa1f f885 	uxth.w	r8, r5
 8000ebe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ec2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec6:	fb07 f308 	mul.w	r3, r7, r8
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x256>
 8000ed2:	1869      	adds	r1, r5, r1
 8000ed4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ed8:	d22f      	bcs.n	8000f3a <__udivmoddi4+0x2ae>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d92d      	bls.n	8000f3a <__udivmoddi4+0x2ae>
 8000ede:	3f02      	subs	r7, #2
 8000ee0:	4429      	add	r1, r5
 8000ee2:	1acb      	subs	r3, r1, r3
 8000ee4:	b281      	uxth	r1, r0
 8000ee6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb00 f308 	mul.w	r3, r0, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x27e>
 8000efa:	1869      	adds	r1, r5, r1
 8000efc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f00:	d217      	bcs.n	8000f32 <__udivmoddi4+0x2a6>
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d915      	bls.n	8000f32 <__udivmoddi4+0x2a6>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4429      	add	r1, r5
 8000f0a:	1ac9      	subs	r1, r1, r3
 8000f0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f10:	e73b      	b.n	8000d8a <__udivmoddi4+0xfe>
 8000f12:	4637      	mov	r7, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e709      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f18:	4607      	mov	r7, r0
 8000f1a:	e6e7      	b.n	8000cec <__udivmoddi4+0x60>
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f20:	4541      	cmp	r1, r8
 8000f22:	d2ab      	bcs.n	8000e7c <__udivmoddi4+0x1f0>
 8000f24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f28:	eb69 020e 	sbc.w	r2, r9, lr
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	4613      	mov	r3, r2
 8000f30:	e7a4      	b.n	8000e7c <__udivmoddi4+0x1f0>
 8000f32:	4660      	mov	r0, ip
 8000f34:	e7e9      	b.n	8000f0a <__udivmoddi4+0x27e>
 8000f36:	4618      	mov	r0, r3
 8000f38:	e795      	b.n	8000e66 <__udivmoddi4+0x1da>
 8000f3a:	4667      	mov	r7, ip
 8000f3c:	e7d1      	b.n	8000ee2 <__udivmoddi4+0x256>
 8000f3e:	4681      	mov	r9, r0
 8000f40:	e77c      	b.n	8000e3c <__udivmoddi4+0x1b0>
 8000f42:	3802      	subs	r0, #2
 8000f44:	442c      	add	r4, r5
 8000f46:	e747      	b.n	8000dd8 <__udivmoddi4+0x14c>
 8000f48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f4c:	442b      	add	r3, r5
 8000f4e:	e72f      	b.n	8000db0 <__udivmoddi4+0x124>
 8000f50:	4638      	mov	r0, r7
 8000f52:	e708      	b.n	8000d66 <__udivmoddi4+0xda>
 8000f54:	4637      	mov	r7, r6
 8000f56:	e6e9      	b.n	8000d2c <__udivmoddi4+0xa0>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <HAL_Init+0x40>)
 8000f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_Init+0x40>)
 8000f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_Init+0x40>)
 8000f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 ff6b 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f007 fe60 	bl	8008c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023c00 	.word	0x40023c00

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 ff83 	bl	8001eca <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fdc:	f000 ff4b 	bl	8001e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000024 	.word	0x20000024
 8000ff8:	20000004 	.word	0x20000004
 8000ffc:	20000000 	.word	0x20000000

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000004 	.word	0x20000004
 8001024:	200000dc 	.word	0x200000dc

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	200000dc 	.word	0x200000dc

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_Delay+0x40>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffde 	bl	8001028 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000004 	.word	0x20000004

08001084 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e033      	b.n	8001102 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d109      	bne.n	80010b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f007 fdfe 	bl	8008ca4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d118      	bne.n	80010f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010ca:	f023 0302 	bic.w	r3, r3, #2
 80010ce:	f043 0202 	orr.w	r2, r3, #2
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fbf0 	bl	80018bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f023 0303 	bic.w	r3, r3, #3
 80010ea:	f043 0201 	orr.w	r2, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40
 80010f2:	e001      	b.n	80010f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <HAL_ADC_Start+0x1a>
 8001122:	2302      	movs	r3, #2
 8001124:	e0a5      	b.n	8001272 <HAL_ADC_Start+0x166>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b01      	cmp	r3, #1
 800113a:	d018      	beq.n	800116e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0201 	orr.w	r2, r2, #1
 800114a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800114c:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <HAL_ADC_Start+0x174>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a4c      	ldr	r2, [pc, #304]	; (8001284 <HAL_ADC_Start+0x178>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	0c9a      	lsrs	r2, r3, #18
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001160:	e002      	b.n	8001168 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3b01      	subs	r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f9      	bne.n	8001162 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b01      	cmp	r3, #1
 800117a:	d179      	bne.n	8001270 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001184:	f023 0301 	bic.w	r3, r3, #1
 8001188:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119a:	2b00      	cmp	r3, #0
 800119c:	d007      	beq.n	80011ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ba:	d106      	bne.n	80011ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c0:	f023 0206 	bic.w	r2, r3, #6
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	645a      	str	r2, [r3, #68]	; 0x44
 80011c8:	e002      	b.n	80011d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011d8:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <HAL_ADC_Start+0x17c>)
 80011da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 031f 	and.w	r3, r3, #31
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d12a      	bne.n	8001248 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a25      	ldr	r2, [pc, #148]	; (800128c <HAL_ADC_Start+0x180>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d015      	beq.n	8001228 <HAL_ADC_Start+0x11c>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a23      	ldr	r2, [pc, #140]	; (8001290 <HAL_ADC_Start+0x184>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d105      	bne.n	8001212 <HAL_ADC_Start+0x106>
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <HAL_ADC_Start+0x17c>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00a      	beq.n	8001228 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <HAL_ADC_Start+0x188>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d129      	bne.n	8001270 <HAL_ADC_Start+0x164>
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <HAL_ADC_Start+0x17c>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 031f 	and.w	r3, r3, #31
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d823      	bhi.n	8001270 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d11c      	bne.n	8001270 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	e013      	b.n	8001270 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0f      	ldr	r2, [pc, #60]	; (800128c <HAL_ADC_Start+0x180>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d10e      	bne.n	8001270 <HAL_ADC_Start+0x164>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d107      	bne.n	8001270 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800126e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000024 	.word	0x20000024
 8001284:	431bde83 	.word	0x431bde83
 8001288:	40012300 	.word	0x40012300
 800128c:	40012000 	.word	0x40012000
 8001290:	40012100 	.word	0x40012100
 8001294:	40012200 	.word	0x40012200

08001298 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b4:	d113      	bne.n	80012de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012c4:	d10b      	bne.n	80012de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f043 0220 	orr.w	r2, r3, #32
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e05c      	b.n	8001398 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012de:	f7ff fea3 	bl	8001028 <HAL_GetTick>
 80012e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012e4:	e01a      	b.n	800131c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012ec:	d016      	beq.n	800131c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d007      	beq.n	8001304 <HAL_ADC_PollForConversion+0x6c>
 80012f4:	f7ff fe98 	bl	8001028 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d20b      	bcs.n	800131c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	f043 0204 	orr.w	r2, r3, #4
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e03d      	b.n	8001398 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b02      	cmp	r3, #2
 8001328:	d1dd      	bne.n	80012e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f06f 0212 	mvn.w	r2, #18
 8001332:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d123      	bne.n	8001396 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001352:	2b00      	cmp	r3, #0
 8001354:	d11f      	bne.n	8001396 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800136e:	2b00      	cmp	r3, #0
 8001370:	d111      	bne.n	8001396 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d105      	bne.n	8001396 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f043 0201 	orr.w	r2, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	bf0c      	ite	eq
 80013be:	2301      	moveq	r3, #1
 80013c0:	2300      	movne	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	2b20      	cmp	r3, #32
 80013d2:	bf0c      	ite	eq
 80013d4:	2301      	moveq	r3, #1
 80013d6:	2300      	movne	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d049      	beq.n	8001476 <HAL_ADC_IRQHandler+0xd6>
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d046      	beq.n	8001476 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f003 0310 	and.w	r3, r3, #16
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d105      	bne.n	8001400 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d12b      	bne.n	8001466 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001412:	2b00      	cmp	r3, #0
 8001414:	d127      	bne.n	8001466 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800142e:	2b00      	cmp	r3, #0
 8001430:	d119      	bne.n	8001466 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0220 	bic.w	r2, r2, #32
 8001440:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d105      	bne.n	8001466 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f043 0201 	orr.w	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f8e8 	bl	800163c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f06f 0212 	mvn.w	r2, #18
 8001474:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b04      	cmp	r3, #4
 8001482:	bf0c      	ite	eq
 8001484:	2301      	moveq	r3, #1
 8001486:	2300      	movne	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	2b80      	cmp	r3, #128	; 0x80
 8001498:	bf0c      	ite	eq
 800149a:	2301      	moveq	r3, #1
 800149c:	2300      	movne	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d057      	beq.n	8001558 <HAL_ADC_IRQHandler+0x1b8>
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d054      	beq.n	8001558 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d105      	bne.n	80014c6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d139      	bne.n	8001548 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d006      	beq.n	80014f0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d12b      	bne.n	8001548 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d124      	bne.n	8001548 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001508:	2b00      	cmp	r3, #0
 800150a:	d11d      	bne.n	8001548 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001510:	2b00      	cmp	r3, #0
 8001512:	d119      	bne.n	8001548 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001522:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d105      	bne.n	8001548 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f043 0201 	orr.w	r2, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fab3 	bl	8001ab4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f06f 020c 	mvn.w	r2, #12
 8001556:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b01      	cmp	r3, #1
 8001564:	bf0c      	ite	eq
 8001566:	2301      	moveq	r3, #1
 8001568:	2300      	movne	r3, #0
 800156a:	b2db      	uxtb	r3, r3
 800156c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001578:	2b40      	cmp	r3, #64	; 0x40
 800157a:	bf0c      	ite	eq
 800157c:	2301      	moveq	r3, #1
 800157e:	2300      	movne	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d017      	beq.n	80015ba <HAL_ADC_IRQHandler+0x21a>
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d014      	beq.n	80015ba <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b01      	cmp	r3, #1
 800159c:	d10d      	bne.n	80015ba <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f850 	bl	8001650 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f06f 0201 	mvn.w	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0320 	and.w	r3, r3, #32
 80015c4:	2b20      	cmp	r3, #32
 80015c6:	bf0c      	ite	eq
 80015c8:	2301      	moveq	r3, #1
 80015ca:	2300      	movne	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d015      	beq.n	800161a <HAL_ADC_IRQHandler+0x27a>
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d012      	beq.n	800161a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f8:	f043 0202 	orr.w	r2, r3, #2
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f06f 0220 	mvn.w	r2, #32
 8001608:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f82a 	bl	8001664 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f06f 0220 	mvn.w	r2, #32
 8001618:	601a      	str	r2, [r3, #0]
  }
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x1c>
 8001690:	2302      	movs	r3, #2
 8001692:	e105      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x228>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b09      	cmp	r3, #9
 80016a2:	d925      	bls.n	80016f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68d9      	ldr	r1, [r3, #12]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	3b1e      	subs	r3, #30
 80016ba:	2207      	movs	r2, #7
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43da      	mvns	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	400a      	ands	r2, r1
 80016c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68d9      	ldr	r1, [r3, #12]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	4603      	mov	r3, r0
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4403      	add	r3, r0
 80016e2:	3b1e      	subs	r3, #30
 80016e4:	409a      	lsls	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	e022      	b.n	8001736 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6919      	ldr	r1, [r3, #16]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	2207      	movs	r2, #7
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	400a      	ands	r2, r1
 8001712:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6919      	ldr	r1, [r3, #16]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	b29b      	uxth	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	4603      	mov	r3, r0
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4403      	add	r3, r0
 800172c:	409a      	lsls	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b06      	cmp	r3, #6
 800173c:	d824      	bhi.n	8001788 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	3b05      	subs	r3, #5
 8001750:	221f      	movs	r2, #31
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	400a      	ands	r2, r1
 800175e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	b29b      	uxth	r3, r3
 800176c:	4618      	mov	r0, r3
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	3b05      	subs	r3, #5
 800177a:	fa00 f203 	lsl.w	r2, r0, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	635a      	str	r2, [r3, #52]	; 0x34
 8001786:	e04c      	b.n	8001822 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b0c      	cmp	r3, #12
 800178e:	d824      	bhi.n	80017da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	3b23      	subs	r3, #35	; 0x23
 80017a2:	221f      	movs	r2, #31
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43da      	mvns	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	400a      	ands	r2, r1
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	3b23      	subs	r3, #35	; 0x23
 80017cc:	fa00 f203 	lsl.w	r2, r0, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
 80017d8:	e023      	b.n	8001822 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	3b41      	subs	r3, #65	; 0x41
 80017ec:	221f      	movs	r2, #31
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	400a      	ands	r2, r1
 80017fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	b29b      	uxth	r3, r3
 8001808:	4618      	mov	r0, r3
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	3b41      	subs	r3, #65	; 0x41
 8001816:	fa00 f203 	lsl.w	r2, r0, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <HAL_ADC_ConfigChannel+0x234>)
 8001824:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a21      	ldr	r2, [pc, #132]	; (80018b0 <HAL_ADC_ConfigChannel+0x238>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d109      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x1cc>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b12      	cmp	r3, #18
 8001836:	d105      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <HAL_ADC_ConfigChannel+0x238>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d123      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x21e>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b10      	cmp	r3, #16
 8001854:	d003      	beq.n	800185e <HAL_ADC_ConfigChannel+0x1e6>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b11      	cmp	r3, #17
 800185c:	d11b      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b10      	cmp	r3, #16
 8001870:	d111      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_ADC_ConfigChannel+0x23c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <HAL_ADC_ConfigChannel+0x240>)
 8001878:	fba2 2303 	umull	r2, r3, r2, r3
 800187c:	0c9a      	lsrs	r2, r3, #18
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001888:	e002      	b.n	8001890 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	3b01      	subs	r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f9      	bne.n	800188a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40012300 	.word	0x40012300
 80018b0:	40012000 	.word	0x40012000
 80018b4:	20000024 	.word	0x20000024
 80018b8:	431bde83 	.word	0x431bde83

080018bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018c4:	4b79      	ldr	r3, [pc, #484]	; (8001aac <ADC_Init+0x1f0>)
 80018c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	431a      	orrs	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	021a      	lsls	r2, r3, #8
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001936:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6899      	ldr	r1, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	4a58      	ldr	r2, [pc, #352]	; (8001ab0 <ADC_Init+0x1f4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d022      	beq.n	800199a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001962:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6899      	ldr	r1, [r3, #8]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001984:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6899      	ldr	r1, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	e00f      	b.n	80019ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0202 	bic.w	r2, r2, #2
 80019c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6899      	ldr	r1, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7e1b      	ldrb	r3, [r3, #24]
 80019d4:	005a      	lsls	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01b      	beq.n	8001a20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6859      	ldr	r1, [r3, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	3b01      	subs	r3, #1
 8001a14:	035a      	lsls	r2, r3, #13
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	e007      	b.n	8001a30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	051a      	lsls	r2, r3, #20
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6899      	ldr	r1, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a72:	025a      	lsls	r2, r3, #9
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6899      	ldr	r1, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	029a      	lsls	r2, r3, #10
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	609a      	str	r2, [r3, #8]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	40012300 	.word	0x40012300
 8001ab0:	0f000001 	.word	0x0f000001

08001ab4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e0ed      	b.n	8001cb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d102      	bne.n	8001aec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f007 f998 	bl	8008e1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0202 	bic.w	r2, r2, #2
 8001afa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001afc:	f7ff fa94 	bl	8001028 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b02:	e012      	b.n	8001b2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b04:	f7ff fa90 	bl	8001028 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b0a      	cmp	r3, #10
 8001b10:	d90b      	bls.n	8001b2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2205      	movs	r2, #5
 8001b22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0c5      	b.n	8001cb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e5      	bne.n	8001b04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0201 	orr.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b48:	f7ff fa6e 	bl	8001028 <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b4e:	e012      	b.n	8001b76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b50:	f7ff fa6a 	bl	8001028 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b0a      	cmp	r3, #10
 8001b5c:	d90b      	bls.n	8001b76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2205      	movs	r2, #5
 8001b6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e09f      	b.n	8001cb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0e5      	beq.n	8001b50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7e1b      	ldrb	r3, [r3, #24]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d108      	bne.n	8001b9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e007      	b.n	8001bae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7e5b      	ldrb	r3, [r3, #25]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d108      	bne.n	8001bc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	e007      	b.n	8001bd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7e9b      	ldrb	r3, [r3, #26]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d108      	bne.n	8001bf2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0220 	orr.w	r2, r2, #32
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e007      	b.n	8001c02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0220 	bic.w	r2, r2, #32
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	7edb      	ldrb	r3, [r3, #27]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d108      	bne.n	8001c1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0210 	bic.w	r2, r2, #16
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e007      	b.n	8001c2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0210 	orr.w	r2, r2, #16
 8001c2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7f1b      	ldrb	r3, [r3, #28]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d108      	bne.n	8001c46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0208 	orr.w	r2, r2, #8
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	e007      	b.n	8001c56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0208 	bic.w	r2, r2, #8
 8001c54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7f5b      	ldrb	r3, [r3, #29]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d108      	bne.n	8001c70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0204 	orr.w	r2, r2, #4
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	e007      	b.n	8001c80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0204 	bic.w	r2, r2, #4
 8001c7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	ea42 0103 	orr.w	r1, r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	1e5a      	subs	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	4907      	ldr	r1, [pc, #28]	; (8001d5c <__NVIC_EnableIRQ+0x38>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2c:	d301      	bcc.n	8001e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00f      	b.n	8001e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <SysTick_Config+0x40>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e40:	f7ff ff8e 	bl	8001d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <SysTick_Config+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <SysTick_Config+0x40>)
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff29 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e88:	f7ff ff3e 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	6978      	ldr	r0, [r7, #20]
 8001e94:	f7ff ff8e 	bl	8001db4 <NVIC_EncodePriority>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff5d 	bl	8001d60 <__NVIC_SetPriority>
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff31 	bl	8001d24 <__NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ffa2 	bl	8001e1c <SysTick_Config>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ef0:	f7ff f89a 	bl	8001028 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e099      	b.n	8002034 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0201 	bic.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f20:	e00f      	b.n	8001f42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f22:	f7ff f881 	bl	8001028 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	d908      	bls.n	8001f42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2220      	movs	r2, #32
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2203      	movs	r2, #3
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e078      	b.n	8002034 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1e8      	bne.n	8001f22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4b38      	ldr	r3, [pc, #224]	; (800203c <HAL_DMA_Init+0x158>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d107      	bne.n	8001fac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f023 0307 	bic.w	r3, r3, #7
 8001fc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d117      	bne.n	8002006 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00e      	beq.n	8002006 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 fae5 	bl	80025b8 <DMA_CheckFifoParam>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2240      	movs	r2, #64	; 0x40
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002002:	2301      	movs	r3, #1
 8002004:	e016      	b.n	8002034 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 fa9c 	bl	800254c <DMA_CalcBaseAndBitshift>
 8002014:	4603      	mov	r3, r0
 8002016:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	223f      	movs	r2, #63	; 0x3f
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	f010803f 	.word	0xf010803f

08002040 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_DMA_Start_IT+0x26>
 8002062:	2302      	movs	r3, #2
 8002064:	e040      	b.n	80020e8 <HAL_DMA_Start_IT+0xa8>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d12f      	bne.n	80020da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2202      	movs	r2, #2
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fa2e 	bl	80024f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	223f      	movs	r2, #63	; 0x3f
 800209a:	409a      	lsls	r2, r3
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0216 	orr.w	r2, r2, #22
 80020ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0208 	orr.w	r2, r2, #8
 80020c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	e005      	b.n	80020e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020e2:	2302      	movs	r3, #2
 80020e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d004      	beq.n	800210e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e00c      	b.n	8002128 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2205      	movs	r2, #5
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0201 	bic.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002140:	4b92      	ldr	r3, [pc, #584]	; (800238c <HAL_DMA_IRQHandler+0x258>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a92      	ldr	r2, [pc, #584]	; (8002390 <HAL_DMA_IRQHandler+0x25c>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	0a9b      	lsrs	r3, r3, #10
 800214c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215e:	2208      	movs	r2, #8
 8002160:	409a      	lsls	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01a      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d013      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0204 	bic.w	r2, r2, #4
 8002186:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218c:	2208      	movs	r2, #8
 800218e:	409a      	lsls	r2, r3
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a4:	2201      	movs	r2, #1
 80021a6:	409a      	lsls	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d012      	beq.n	80021d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c2:	2201      	movs	r2, #1
 80021c4:	409a      	lsls	r2, r3
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ce:	f043 0202 	orr.w	r2, r3, #2
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	2204      	movs	r2, #4
 80021dc:	409a      	lsls	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d012      	beq.n	800220c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00b      	beq.n	800220c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	2204      	movs	r2, #4
 80021fa:	409a      	lsls	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	f043 0204 	orr.w	r2, r3, #4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	2210      	movs	r2, #16
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d043      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d03c      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222e:	2210      	movs	r2, #16
 8002230:	409a      	lsls	r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d018      	beq.n	8002276 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d108      	bne.n	8002264 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d024      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
 8002262:	e01f      	b.n	80022a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002268:	2b00      	cmp	r3, #0
 800226a:	d01b      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
 8002274:	e016      	b.n	80022a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d107      	bne.n	8002294 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0208 	bic.w	r2, r2, #8
 8002292:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	2220      	movs	r2, #32
 80022aa:	409a      	lsls	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 808e 	beq.w	80023d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 8086 	beq.w	80023d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	2220      	movs	r2, #32
 80022cc:	409a      	lsls	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d136      	bne.n	800234c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0216 	bic.w	r2, r2, #22
 80022ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <HAL_DMA_IRQHandler+0x1da>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230a:	2b00      	cmp	r3, #0
 800230c:	d007      	beq.n	800231e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0208 	bic.w	r2, r2, #8
 800231c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002322:	223f      	movs	r2, #63	; 0x3f
 8002324:	409a      	lsls	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800233e:	2b00      	cmp	r3, #0
 8002340:	d07d      	beq.n	800243e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	4798      	blx	r3
        }
        return;
 800234a:	e078      	b.n	800243e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d01c      	beq.n	8002394 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d108      	bne.n	800237a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	2b00      	cmp	r3, #0
 800236e:	d030      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	4798      	blx	r3
 8002378:	e02b      	b.n	80023d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d027      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	4798      	blx	r3
 800238a:	e022      	b.n	80023d2 <HAL_DMA_IRQHandler+0x29e>
 800238c:	20000024 	.word	0x20000024
 8002390:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10f      	bne.n	80023c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0210 	bic.w	r2, r2, #16
 80023b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d032      	beq.n	8002440 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d022      	beq.n	800242c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2205      	movs	r2, #5
 80023ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0201 	bic.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	3301      	adds	r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	429a      	cmp	r2, r3
 8002408:	d307      	bcc.n	800241a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f2      	bne.n	80023fe <HAL_DMA_IRQHandler+0x2ca>
 8002418:	e000      	b.n	800241c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800241a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	4798      	blx	r3
 800243c:	e000      	b.n	8002440 <HAL_DMA_IRQHandler+0x30c>
        return;
 800243e:	bf00      	nop
    }
  }
}
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop

08002448 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	460b      	mov	r3, r1
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_DMA_RegisterCallback+0x20>
 8002464:	2302      	movs	r3, #2
 8002466:	e03c      	b.n	80024e2 <HAL_DMA_RegisterCallback+0x9a>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d129      	bne.n	80024d0 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 800247c:	7afb      	ldrb	r3, [r7, #11]
 800247e:	2b05      	cmp	r3, #5
 8002480:	d829      	bhi.n	80024d6 <HAL_DMA_RegisterCallback+0x8e>
 8002482:	a201      	add	r2, pc, #4	; (adr r2, 8002488 <HAL_DMA_RegisterCallback+0x40>)
 8002484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002488:	080024a1 	.word	0x080024a1
 800248c:	080024a9 	.word	0x080024a9
 8002490:	080024b1 	.word	0x080024b1
 8002494:	080024b9 	.word	0x080024b9
 8002498:	080024c1 	.word	0x080024c1
 800249c:	080024c9 	.word	0x080024c9
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80024a6:	e017      	b.n	80024d8 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80024ae:	e013      	b.n	80024d8 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80024b6:	e00f      	b.n	80024d8 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80024be:	e00b      	b.n	80024d8 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80024c6:	e007      	b.n	80024d8 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80024ce:	e003      	b.n	80024d8 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	75fb      	strb	r3, [r7, #23]
 80024d4:	e000      	b.n	80024d8 <HAL_DMA_RegisterCallback+0x90>
      break;
 80024d6:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop

080024f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800250c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b40      	cmp	r3, #64	; 0x40
 800251c:	d108      	bne.n	8002530 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800252e:	e007      	b.n	8002540 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	60da      	str	r2, [r3, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	3b10      	subs	r3, #16
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <DMA_CalcBaseAndBitshift+0x64>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	091b      	lsrs	r3, r3, #4
 8002564:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002566:	4a13      	ldr	r2, [pc, #76]	; (80025b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d909      	bls.n	800258e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002582:	f023 0303 	bic.w	r3, r3, #3
 8002586:	1d1a      	adds	r2, r3, #4
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	659a      	str	r2, [r3, #88]	; 0x58
 800258c:	e007      	b.n	800259e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002596:	f023 0303 	bic.w	r3, r3, #3
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	aaaaaaab 	.word	0xaaaaaaab
 80025b4:	0800b044 	.word	0x0800b044

080025b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d11f      	bne.n	8002612 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d855      	bhi.n	8002684 <DMA_CheckFifoParam+0xcc>
 80025d8:	a201      	add	r2, pc, #4	; (adr r2, 80025e0 <DMA_CheckFifoParam+0x28>)
 80025da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025de:	bf00      	nop
 80025e0:	080025f1 	.word	0x080025f1
 80025e4:	08002603 	.word	0x08002603
 80025e8:	080025f1 	.word	0x080025f1
 80025ec:	08002685 	.word	0x08002685
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d045      	beq.n	8002688 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002600:	e042      	b.n	8002688 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800260a:	d13f      	bne.n	800268c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002610:	e03c      	b.n	800268c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261a:	d121      	bne.n	8002660 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d836      	bhi.n	8002690 <DMA_CheckFifoParam+0xd8>
 8002622:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <DMA_CheckFifoParam+0x70>)
 8002624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002628:	08002639 	.word	0x08002639
 800262c:	0800263f 	.word	0x0800263f
 8002630:	08002639 	.word	0x08002639
 8002634:	08002651 	.word	0x08002651
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
      break;
 800263c:	e02f      	b.n	800269e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d024      	beq.n	8002694 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264e:	e021      	b.n	8002694 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002658:	d11e      	bne.n	8002698 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800265e:	e01b      	b.n	8002698 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d902      	bls.n	800266c <DMA_CheckFifoParam+0xb4>
 8002666:	2b03      	cmp	r3, #3
 8002668:	d003      	beq.n	8002672 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800266a:	e018      	b.n	800269e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
      break;
 8002670:	e015      	b.n	800269e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00e      	beq.n	800269c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
      break;
 8002682:	e00b      	b.n	800269c <DMA_CheckFifoParam+0xe4>
      break;
 8002684:	bf00      	nop
 8002686:	e00a      	b.n	800269e <DMA_CheckFifoParam+0xe6>
      break;
 8002688:	bf00      	nop
 800268a:	e008      	b.n	800269e <DMA_CheckFifoParam+0xe6>
      break;
 800268c:	bf00      	nop
 800268e:	e006      	b.n	800269e <DMA_CheckFifoParam+0xe6>
      break;
 8002690:	bf00      	nop
 8002692:	e004      	b.n	800269e <DMA_CheckFifoParam+0xe6>
      break;
 8002694:	bf00      	nop
 8002696:	e002      	b.n	800269e <DMA_CheckFifoParam+0xe6>
      break;   
 8002698:	bf00      	nop
 800269a:	e000      	b.n	800269e <DMA_CheckFifoParam+0xe6>
      break;
 800269c:	bf00      	nop
    }
  } 
  
  return status; 
 800269e:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	e16b      	b.n	80029a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c8:	2201      	movs	r2, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	f040 815a 	bne.w	800299a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d00b      	beq.n	8002706 <HAL_GPIO_Init+0x5a>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026fa:	2b11      	cmp	r3, #17
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b12      	cmp	r3, #18
 8002704:	d130      	bne.n	8002768 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2203      	movs	r2, #3
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 0201 	and.w	r2, r3, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0xfc>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b12      	cmp	r3, #18
 80027a6:	d123      	bne.n	80027f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3208      	adds	r2, #8
 80027b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	08da      	lsrs	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3208      	adds	r2, #8
 80027ea:	69b9      	ldr	r1, [r7, #24]
 80027ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80b4 	beq.w	800299a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b5f      	ldr	r3, [pc, #380]	; (80029b4 <HAL_GPIO_Init+0x308>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	4a5e      	ldr	r2, [pc, #376]	; (80029b4 <HAL_GPIO_Init+0x308>)
 800283c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002840:	6453      	str	r3, [r2, #68]	; 0x44
 8002842:	4b5c      	ldr	r3, [pc, #368]	; (80029b4 <HAL_GPIO_Init+0x308>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284e:	4a5a      	ldr	r2, [pc, #360]	; (80029b8 <HAL_GPIO_Init+0x30c>)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	3302      	adds	r3, #2
 8002856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	220f      	movs	r2, #15
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a51      	ldr	r2, [pc, #324]	; (80029bc <HAL_GPIO_Init+0x310>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d02b      	beq.n	80028d2 <HAL_GPIO_Init+0x226>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a50      	ldr	r2, [pc, #320]	; (80029c0 <HAL_GPIO_Init+0x314>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d025      	beq.n	80028ce <HAL_GPIO_Init+0x222>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4f      	ldr	r2, [pc, #316]	; (80029c4 <HAL_GPIO_Init+0x318>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01f      	beq.n	80028ca <HAL_GPIO_Init+0x21e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4e      	ldr	r2, [pc, #312]	; (80029c8 <HAL_GPIO_Init+0x31c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d019      	beq.n	80028c6 <HAL_GPIO_Init+0x21a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4d      	ldr	r2, [pc, #308]	; (80029cc <HAL_GPIO_Init+0x320>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_GPIO_Init+0x216>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4c      	ldr	r2, [pc, #304]	; (80029d0 <HAL_GPIO_Init+0x324>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00d      	beq.n	80028be <HAL_GPIO_Init+0x212>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4b      	ldr	r2, [pc, #300]	; (80029d4 <HAL_GPIO_Init+0x328>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <HAL_GPIO_Init+0x20e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4a      	ldr	r2, [pc, #296]	; (80029d8 <HAL_GPIO_Init+0x32c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_GPIO_Init+0x20a>
 80028b2:	2307      	movs	r3, #7
 80028b4:	e00e      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028b6:	2308      	movs	r3, #8
 80028b8:	e00c      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028ba:	2306      	movs	r3, #6
 80028bc:	e00a      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028be:	2305      	movs	r3, #5
 80028c0:	e008      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028c2:	2304      	movs	r3, #4
 80028c4:	e006      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028c6:	2303      	movs	r3, #3
 80028c8:	e004      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028d2:	2300      	movs	r3, #0
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	f002 0203 	and.w	r2, r2, #3
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	4093      	lsls	r3, r2
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e4:	4934      	ldr	r1, [pc, #208]	; (80029b8 <HAL_GPIO_Init+0x30c>)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028f2:	4b3a      	ldr	r3, [pc, #232]	; (80029dc <HAL_GPIO_Init+0x330>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002916:	4a31      	ldr	r2, [pc, #196]	; (80029dc <HAL_GPIO_Init+0x330>)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800291c:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <HAL_GPIO_Init+0x330>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002940:	4a26      	ldr	r2, [pc, #152]	; (80029dc <HAL_GPIO_Init+0x330>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002946:	4b25      	ldr	r3, [pc, #148]	; (80029dc <HAL_GPIO_Init+0x330>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800296a:	4a1c      	ldr	r2, [pc, #112]	; (80029dc <HAL_GPIO_Init+0x330>)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002970:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <HAL_GPIO_Init+0x330>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002994:	4a11      	ldr	r2, [pc, #68]	; (80029dc <HAL_GPIO_Init+0x330>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3301      	adds	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2b0f      	cmp	r3, #15
 80029a4:	f67f ae90 	bls.w	80026c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a8:	bf00      	nop
 80029aa:	3724      	adds	r7, #36	; 0x24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40013800 	.word	0x40013800
 80029bc:	40020000 	.word	0x40020000
 80029c0:	40020400 	.word	0x40020400
 80029c4:	40020800 	.word	0x40020800
 80029c8:	40020c00 	.word	0x40020c00
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40021400 	.word	0x40021400
 80029d4:	40021800 	.word	0x40021800
 80029d8:	40021c00 	.word	0x40021c00
 80029dc:	40013c00 	.word	0x40013c00

080029e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
 80029ec:	4613      	mov	r3, r2
 80029ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f0:	787b      	ldrb	r3, [r7, #1]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f6:	887a      	ldrh	r2, [r7, #2]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029fc:	e003      	b.n	8002a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	041a      	lsls	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	619a      	str	r2, [r3, #24]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	887b      	ldrh	r3, [r7, #2]
 8002a24:	401a      	ands	r2, r3
 8002a26:	887b      	ldrh	r3, [r7, #2]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d104      	bne.n	8002a36 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a2c:	887b      	ldrh	r3, [r7, #2]
 8002a2e:	041a      	lsls	r2, r3, #16
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002a34:	e002      	b.n	8002a3c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002a36:	887a      	ldrh	r2, [r7, #2]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	619a      	str	r2, [r3, #24]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d006      	beq.n	8002a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a5e:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f005 fe28 	bl	80086bc <HAL_GPIO_EXTI_Callback>
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40013c00 	.word	0x40013c00

08002a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e11f      	b.n	8002cca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f006 fa04 	bl	8008eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2224      	movs	r2, #36	; 0x24
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ada:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002adc:	f001 fb8e 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8002ae0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a7b      	ldr	r2, [pc, #492]	; (8002cd4 <HAL_I2C_Init+0x25c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d807      	bhi.n	8002afc <HAL_I2C_Init+0x84>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a7a      	ldr	r2, [pc, #488]	; (8002cd8 <HAL_I2C_Init+0x260>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	bf94      	ite	ls
 8002af4:	2301      	movls	r3, #1
 8002af6:	2300      	movhi	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	e006      	b.n	8002b0a <HAL_I2C_Init+0x92>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a77      	ldr	r2, [pc, #476]	; (8002cdc <HAL_I2C_Init+0x264>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	bf94      	ite	ls
 8002b04:	2301      	movls	r3, #1
 8002b06:	2300      	movhi	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0db      	b.n	8002cca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4a72      	ldr	r2, [pc, #456]	; (8002ce0 <HAL_I2C_Init+0x268>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	0c9b      	lsrs	r3, r3, #18
 8002b1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a64      	ldr	r2, [pc, #400]	; (8002cd4 <HAL_I2C_Init+0x25c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d802      	bhi.n	8002b4c <HAL_I2C_Init+0xd4>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	e009      	b.n	8002b60 <HAL_I2C_Init+0xe8>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	4a63      	ldr	r2, [pc, #396]	; (8002ce4 <HAL_I2C_Init+0x26c>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	099b      	lsrs	r3, r3, #6
 8002b5e:	3301      	adds	r3, #1
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	430b      	orrs	r3, r1
 8002b66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4956      	ldr	r1, [pc, #344]	; (8002cd4 <HAL_I2C_Init+0x25c>)
 8002b7c:	428b      	cmp	r3, r1
 8002b7e:	d80d      	bhi.n	8002b9c <HAL_I2C_Init+0x124>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e59      	subs	r1, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	bf38      	it	cc
 8002b98:	2304      	movcc	r3, #4
 8002b9a:	e04f      	b.n	8002c3c <HAL_I2C_Init+0x1c4>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d111      	bne.n	8002bc8 <HAL_I2C_Init+0x150>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1e58      	subs	r0, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	440b      	add	r3, r1
 8002bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e012      	b.n	8002bee <HAL_I2C_Init+0x176>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	1e58      	subs	r0, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6859      	ldr	r1, [r3, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	0099      	lsls	r1, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bde:	3301      	adds	r3, #1
 8002be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_Init+0x17e>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e022      	b.n	8002c3c <HAL_I2C_Init+0x1c4>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10e      	bne.n	8002c1c <HAL_I2C_Init+0x1a4>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1e58      	subs	r0, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6859      	ldr	r1, [r3, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	440b      	add	r3, r1
 8002c0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c1a:	e00f      	b.n	8002c3c <HAL_I2C_Init+0x1c4>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1e58      	subs	r0, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	0099      	lsls	r1, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	6809      	ldr	r1, [r1, #0]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69da      	ldr	r2, [r3, #28]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6911      	ldr	r1, [r2, #16]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68d2      	ldr	r2, [r2, #12]
 8002c76:	4311      	orrs	r1, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	000186a0 	.word	0x000186a0
 8002cd8:	001e847f 	.word	0x001e847f
 8002cdc:	003d08ff 	.word	0x003d08ff
 8002ce0:	431bde83 	.word	0x431bde83
 8002ce4:	10624dd3 	.word	0x10624dd3

08002ce8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	817b      	strh	r3, [r7, #10]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cfc:	f7fe f994 	bl	8001028 <HAL_GetTick>
 8002d00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	f040 80e0 	bne.w	8002ed0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	2319      	movs	r3, #25
 8002d16:	2201      	movs	r2, #1
 8002d18:	4970      	ldr	r1, [pc, #448]	; (8002edc <HAL_I2C_Master_Transmit+0x1f4>)
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fc56 	bl	80035cc <I2C_WaitOnFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
 8002d28:	e0d3      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_I2C_Master_Transmit+0x50>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e0cc      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d007      	beq.n	8002d5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0201 	orr.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2221      	movs	r2, #33	; 0x21
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2210      	movs	r2, #16
 8002d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	893a      	ldrh	r2, [r7, #8]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4a50      	ldr	r2, [pc, #320]	; (8002ee0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002da0:	8979      	ldrh	r1, [r7, #10]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fac2 	bl	8003330 <I2C_MasterRequestWrite>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e08d      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002dcc:	e066      	b.n	8002e9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	6a39      	ldr	r1, [r7, #32]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fcd0 	bl	8003778 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00d      	beq.n	8002dfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d107      	bne.n	8002df6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06b      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d11b      	bne.n	8002e70 <HAL_I2C_Master_Transmit+0x188>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d017      	beq.n	8002e70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	6a39      	ldr	r1, [r7, #32]
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fcc0 	bl	80037fa <I2C_WaitOnBTFFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00d      	beq.n	8002e9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d107      	bne.n	8002e98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e01a      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d194      	bne.n	8002dce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e000      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ed0:	2302      	movs	r3, #2
  }
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	00100002 	.word	0x00100002
 8002ee0:	ffff0000 	.word	0xffff0000

08002ee4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08c      	sub	sp, #48	; 0x30
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	817b      	strh	r3, [r7, #10]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ef8:	f7fe f896 	bl	8001028 <HAL_GetTick>
 8002efc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	f040 820b 	bne.w	8003322 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	2319      	movs	r3, #25
 8002f12:	2201      	movs	r2, #1
 8002f14:	497c      	ldr	r1, [pc, #496]	; (8003108 <HAL_I2C_Master_Receive+0x224>)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fb58 	bl	80035cc <I2C_WaitOnFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f22:	2302      	movs	r3, #2
 8002f24:	e1fe      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_I2C_Master_Receive+0x50>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e1f7      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d007      	beq.n	8002f5a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2222      	movs	r2, #34	; 0x22
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2210      	movs	r2, #16
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	893a      	ldrh	r2, [r7, #8]
 8002f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a5c      	ldr	r2, [pc, #368]	; (800310c <HAL_I2C_Master_Receive+0x228>)
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f9c:	8979      	ldrh	r1, [r7, #10]
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fa46 	bl	8003434 <I2C_MasterRequestRead>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e1b8      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d113      	bne.n	8002fe2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	623b      	str	r3, [r7, #32]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	623b      	str	r3, [r7, #32]
 8002fce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	e18c      	b.n	80032fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d11b      	bne.n	8003022 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e16c      	b.n	80032fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003026:	2b02      	cmp	r3, #2
 8003028:	d11b      	bne.n	8003062 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003038:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003048:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	e14c      	b.n	80032fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003070:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003088:	e138      	b.n	80032fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308e:	2b03      	cmp	r3, #3
 8003090:	f200 80f1 	bhi.w	8003276 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003098:	2b01      	cmp	r3, #1
 800309a:	d123      	bne.n	80030e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fbeb 	bl	800387c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e139      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030e2:	e10b      	b.n	80032fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d14e      	bne.n	800318a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f2:	2200      	movs	r2, #0
 80030f4:	4906      	ldr	r1, [pc, #24]	; (8003110 <HAL_I2C_Master_Receive+0x22c>)
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fa68 	bl	80035cc <I2C_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e10e      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
 8003106:	bf00      	nop
 8003108:	00100002 	.word	0x00100002
 800310c:	ffff0000 	.word	0xffff0000
 8003110:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003188:	e0b8      	b.n	80032fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003190:	2200      	movs	r2, #0
 8003192:	4966      	ldr	r1, [pc, #408]	; (800332c <HAL_I2C_Master_Receive+0x448>)
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 fa19 	bl	80035cc <I2C_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0bf      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	2200      	movs	r2, #0
 80031ee:	494f      	ldr	r1, [pc, #316]	; (800332c <HAL_I2C_Master_Receive+0x448>)
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f9eb 	bl	80035cc <I2C_WaitOnFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e091      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003274:	e042      	b.n	80032fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fafe 	bl	800387c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e04c      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d118      	bne.n	80032fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003300:	2b00      	cmp	r3, #0
 8003302:	f47f aec2 	bne.w	800308a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	e000      	b.n	8003324 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003322:	2302      	movs	r3, #2
  }
}
 8003324:	4618      	mov	r0, r3
 8003326:	3728      	adds	r7, #40	; 0x28
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	00010004 	.word	0x00010004

08003330 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	460b      	mov	r3, r1
 800333e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d006      	beq.n	800335a <I2C_MasterRequestWrite+0x2a>
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d003      	beq.n	800335a <I2C_MasterRequestWrite+0x2a>
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003358:	d108      	bne.n	800336c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e00b      	b.n	8003384 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	2b12      	cmp	r3, #18
 8003372:	d107      	bne.n	8003384 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003382:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f91b 	bl	80035cc <I2C_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00c      	beq.n	80033b6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e035      	b.n	8003422 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033be:	d108      	bne.n	80033d2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033c0:	897b      	ldrh	r3, [r7, #10]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033ce:	611a      	str	r2, [r3, #16]
 80033d0:	e01b      	b.n	800340a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033d2:	897b      	ldrh	r3, [r7, #10]
 80033d4:	11db      	asrs	r3, r3, #7
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f003 0306 	and.w	r3, r3, #6
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	f063 030f 	orn	r3, r3, #15
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	490f      	ldr	r1, [pc, #60]	; (800342c <I2C_MasterRequestWrite+0xfc>)
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f942 	bl	800367a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e010      	b.n	8003422 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003400:	897b      	ldrh	r3, [r7, #10]
 8003402:	b2da      	uxtb	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4908      	ldr	r1, [pc, #32]	; (8003430 <I2C_MasterRequestWrite+0x100>)
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f932 	bl	800367a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	00010008 	.word	0x00010008
 8003430:	00010002 	.word	0x00010002

08003434 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	607a      	str	r2, [r7, #4]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	460b      	mov	r3, r1
 8003442:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003458:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2b08      	cmp	r3, #8
 800345e:	d006      	beq.n	800346e <I2C_MasterRequestRead+0x3a>
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d003      	beq.n	800346e <I2C_MasterRequestRead+0x3a>
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800346c:	d108      	bne.n	8003480 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e00b      	b.n	8003498 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	2b11      	cmp	r3, #17
 8003486:	d107      	bne.n	8003498 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003496:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f891 	bl	80035cc <I2C_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00c      	beq.n	80034ca <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e078      	b.n	80035bc <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034d2:	d108      	bne.n	80034e6 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034d4:	897b      	ldrh	r3, [r7, #10]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]
 80034e4:	e05e      	b.n	80035a4 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034e6:	897b      	ldrh	r3, [r7, #10]
 80034e8:	11db      	asrs	r3, r3, #7
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	f003 0306 	and.w	r3, r3, #6
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	f063 030f 	orn	r3, r3, #15
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	4930      	ldr	r1, [pc, #192]	; (80035c4 <I2C_MasterRequestRead+0x190>)
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f8b8 	bl	800367a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e053      	b.n	80035bc <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003514:	897b      	ldrh	r3, [r7, #10]
 8003516:	b2da      	uxtb	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	4929      	ldr	r1, [pc, #164]	; (80035c8 <I2C_MasterRequestRead+0x194>)
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f8a8 	bl	800367a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e043      	b.n	80035bc <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003558:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f830 	bl	80035cc <I2C_WaitOnFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00c      	beq.n	800358c <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e017      	b.n	80035bc <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800358c:	897b      	ldrh	r3, [r7, #10]
 800358e:	11db      	asrs	r3, r3, #7
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f003 0306 	and.w	r3, r3, #6
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f063 030e 	orn	r3, r3, #14
 800359c:	b2da      	uxtb	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	4907      	ldr	r1, [pc, #28]	; (80035c8 <I2C_MasterRequestRead+0x194>)
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f865 	bl	800367a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	00010008 	.word	0x00010008
 80035c8:	00010002 	.word	0x00010002

080035cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	4613      	mov	r3, r2
 80035da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035dc:	e025      	b.n	800362a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e4:	d021      	beq.n	800362a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e6:	f7fd fd1f 	bl	8001028 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d302      	bcc.n	80035fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d116      	bne.n	800362a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f043 0220 	orr.w	r2, r3, #32
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e023      	b.n	8003672 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	d10d      	bne.n	8003650 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	43da      	mvns	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4013      	ands	r3, r2
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	bf0c      	ite	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	2300      	movne	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	e00c      	b.n	800366a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	43da      	mvns	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4013      	ands	r3, r2
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	bf0c      	ite	eq
 8003662:	2301      	moveq	r3, #1
 8003664:	2300      	movne	r3, #0
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	429a      	cmp	r2, r3
 800366e:	d0b6      	beq.n	80035de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003688:	e051      	b.n	800372e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003698:	d123      	bne.n	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f043 0204 	orr.w	r2, r3, #4
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e046      	b.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036e8:	d021      	beq.n	800372e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ea:	f7fd fc9d 	bl	8001028 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d116      	bne.n	800372e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f043 0220 	orr.w	r2, r3, #32
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e020      	b.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	0c1b      	lsrs	r3, r3, #16
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d10c      	bne.n	8003752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	43da      	mvns	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4013      	ands	r3, r2
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	bf14      	ite	ne
 800374a:	2301      	movne	r3, #1
 800374c:	2300      	moveq	r3, #0
 800374e:	b2db      	uxtb	r3, r3
 8003750:	e00b      	b.n	800376a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	43da      	mvns	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4013      	ands	r3, r2
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	bf14      	ite	ne
 8003764:	2301      	movne	r3, #1
 8003766:	2300      	moveq	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d18d      	bne.n	800368a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003784:	e02d      	b.n	80037e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f8ce 	bl	8003928 <I2C_IsAcknowledgeFailed>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e02d      	b.n	80037f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800379c:	d021      	beq.n	80037e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fd fc43 	bl	8001028 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d116      	bne.n	80037e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f043 0220 	orr.w	r2, r3, #32
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e007      	b.n	80037f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ec:	2b80      	cmp	r3, #128	; 0x80
 80037ee:	d1ca      	bne.n	8003786 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003806:	e02d      	b.n	8003864 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f88d 	bl	8003928 <I2C_IsAcknowledgeFailed>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e02d      	b.n	8003874 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800381e:	d021      	beq.n	8003864 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003820:	f7fd fc02 	bl	8001028 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	429a      	cmp	r2, r3
 800382e:	d302      	bcc.n	8003836 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d116      	bne.n	8003864 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	f043 0220 	orr.w	r2, r3, #32
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e007      	b.n	8003874 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b04      	cmp	r3, #4
 8003870:	d1ca      	bne.n	8003808 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003888:	e042      	b.n	8003910 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b10      	cmp	r3, #16
 8003896:	d119      	bne.n	80038cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0210 	mvn.w	r2, #16
 80038a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e029      	b.n	8003920 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038cc:	f7fd fbac 	bl	8001028 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d302      	bcc.n	80038e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d116      	bne.n	8003910 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f043 0220 	orr.w	r2, r3, #32
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e007      	b.n	8003920 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391a:	2b40      	cmp	r3, #64	; 0x40
 800391c:	d1b5      	bne.n	800388a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393e:	d11b      	bne.n	8003978 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003948:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f043 0204 	orr.w	r2, r3, #4
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e25b      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d075      	beq.n	8003a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039a6:	4ba3      	ldr	r3, [pc, #652]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d00c      	beq.n	80039cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039b2:	4ba0      	ldr	r3, [pc, #640]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d112      	bne.n	80039e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039be:	4b9d      	ldr	r3, [pc, #628]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ca:	d10b      	bne.n	80039e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039cc:	4b99      	ldr	r3, [pc, #612]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d05b      	beq.n	8003a90 <HAL_RCC_OscConfig+0x108>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d157      	bne.n	8003a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e236      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ec:	d106      	bne.n	80039fc <HAL_RCC_OscConfig+0x74>
 80039ee:	4b91      	ldr	r3, [pc, #580]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a90      	ldr	r2, [pc, #576]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e01d      	b.n	8003a38 <HAL_RCC_OscConfig+0xb0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x98>
 8003a06:	4b8b      	ldr	r3, [pc, #556]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a8a      	ldr	r2, [pc, #552]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	4b88      	ldr	r3, [pc, #544]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a87      	ldr	r2, [pc, #540]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e00b      	b.n	8003a38 <HAL_RCC_OscConfig+0xb0>
 8003a20:	4b84      	ldr	r3, [pc, #528]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a83      	ldr	r2, [pc, #524]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	4b81      	ldr	r3, [pc, #516]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a80      	ldr	r2, [pc, #512]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d013      	beq.n	8003a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fd faf2 	bl	8001028 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a48:	f7fd faee 	bl	8001028 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e1fb      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	4b76      	ldr	r3, [pc, #472]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0xc0>
 8003a66:	e014      	b.n	8003a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fd fade 	bl	8001028 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a70:	f7fd fada 	bl	8001028 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	; 0x64
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e1e7      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a82:	4b6c      	ldr	r3, [pc, #432]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0xe8>
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d063      	beq.n	8003b66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a9e:	4b65      	ldr	r3, [pc, #404]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aaa:	4b62      	ldr	r3, [pc, #392]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d11c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab6:	4b5f      	ldr	r3, [pc, #380]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d116      	bne.n	8003af0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac2:	4b5c      	ldr	r3, [pc, #368]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_RCC_OscConfig+0x152>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d001      	beq.n	8003ada <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e1bb      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ada:	4b56      	ldr	r3, [pc, #344]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4952      	ldr	r1, [pc, #328]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aee:	e03a      	b.n	8003b66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d020      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af8:	4b4f      	ldr	r3, [pc, #316]	; (8003c38 <HAL_RCC_OscConfig+0x2b0>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afe:	f7fd fa93 	bl	8001028 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b06:	f7fd fa8f 	bl	8001028 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e19c      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b18:	4b46      	ldr	r3, [pc, #280]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b24:	4b43      	ldr	r3, [pc, #268]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4940      	ldr	r1, [pc, #256]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	600b      	str	r3, [r1, #0]
 8003b38:	e015      	b.n	8003b66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b3a:	4b3f      	ldr	r3, [pc, #252]	; (8003c38 <HAL_RCC_OscConfig+0x2b0>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fd fa72 	bl	8001028 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b48:	f7fd fa6e 	bl	8001028 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e17b      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5a:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d030      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d016      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b7a:	4b30      	ldr	r3, [pc, #192]	; (8003c3c <HAL_RCC_OscConfig+0x2b4>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b80:	f7fd fa52 	bl	8001028 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b88:	f7fd fa4e 	bl	8001028 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e15b      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9a:	4b26      	ldr	r3, [pc, #152]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x200>
 8003ba6:	e015      	b.n	8003bd4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba8:	4b24      	ldr	r3, [pc, #144]	; (8003c3c <HAL_RCC_OscConfig+0x2b4>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bae:	f7fd fa3b 	bl	8001028 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb6:	f7fd fa37 	bl	8001028 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e144      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc8:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1f0      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80a0 	beq.w	8003d22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be2:	2300      	movs	r3, #0
 8003be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be6:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	4a0e      	ldr	r2, [pc, #56]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c00:	6413      	str	r3, [r2, #64]	; 0x40
 8003c02:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_RCC_OscConfig+0x2b8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d121      	bne.n	8003c62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <HAL_RCC_OscConfig+0x2b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a07      	ldr	r2, [pc, #28]	; (8003c40 <HAL_RCC_OscConfig+0x2b8>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2a:	f7fd f9fd 	bl	8001028 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c30:	e011      	b.n	8003c56 <HAL_RCC_OscConfig+0x2ce>
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	42470000 	.word	0x42470000
 8003c3c:	42470e80 	.word	0x42470e80
 8003c40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c44:	f7fd f9f0 	bl	8001028 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0fd      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c56:	4b81      	ldr	r3, [pc, #516]	; (8003e5c <HAL_RCC_OscConfig+0x4d4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d106      	bne.n	8003c78 <HAL_RCC_OscConfig+0x2f0>
 8003c6a:	4b7d      	ldr	r3, [pc, #500]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	4a7c      	ldr	r2, [pc, #496]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	6713      	str	r3, [r2, #112]	; 0x70
 8003c76:	e01c      	b.n	8003cb2 <HAL_RCC_OscConfig+0x32a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	d10c      	bne.n	8003c9a <HAL_RCC_OscConfig+0x312>
 8003c80:	4b77      	ldr	r3, [pc, #476]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c84:	4a76      	ldr	r2, [pc, #472]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003c86:	f043 0304 	orr.w	r3, r3, #4
 8003c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8c:	4b74      	ldr	r3, [pc, #464]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	4a73      	ldr	r2, [pc, #460]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6713      	str	r3, [r2, #112]	; 0x70
 8003c98:	e00b      	b.n	8003cb2 <HAL_RCC_OscConfig+0x32a>
 8003c9a:	4b71      	ldr	r3, [pc, #452]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9e:	4a70      	ldr	r2, [pc, #448]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca6:	4b6e      	ldr	r3, [pc, #440]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	4a6d      	ldr	r2, [pc, #436]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003cac:	f023 0304 	bic.w	r3, r3, #4
 8003cb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d015      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7fd f9b5 	bl	8001028 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc0:	e00a      	b.n	8003cd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc2:	f7fd f9b1 	bl	8001028 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e0bc      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd8:	4b61      	ldr	r3, [pc, #388]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0ee      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x33a>
 8003ce4:	e014      	b.n	8003d10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce6:	f7fd f99f 	bl	8001028 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cec:	e00a      	b.n	8003d04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cee:	f7fd f99b 	bl	8001028 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e0a6      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d04:	4b56      	ldr	r3, [pc, #344]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1ee      	bne.n	8003cee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d105      	bne.n	8003d22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d16:	4b52      	ldr	r3, [pc, #328]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	4a51      	ldr	r2, [pc, #324]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8092 	beq.w	8003e50 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d2c:	4b4c      	ldr	r3, [pc, #304]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 030c 	and.w	r3, r3, #12
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d05c      	beq.n	8003df2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d141      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d40:	4b48      	ldr	r3, [pc, #288]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d46:	f7fd f96f 	bl	8001028 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4e:	f7fd f96b 	bl	8001028 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e078      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d60:	4b3f      	ldr	r3, [pc, #252]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f0      	bne.n	8003d4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	019b      	lsls	r3, r3, #6
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	085b      	lsrs	r3, r3, #1
 8003d84:	3b01      	subs	r3, #1
 8003d86:	041b      	lsls	r3, r3, #16
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	061b      	lsls	r3, r3, #24
 8003d90:	4933      	ldr	r1, [pc, #204]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d96:	4b33      	ldr	r3, [pc, #204]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fd f944 	bl	8001028 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da4:	f7fd f940 	bl	8001028 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e04d      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db6:	4b2a      	ldr	r3, [pc, #168]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0x41c>
 8003dc2:	e045      	b.n	8003e50 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc4:	4b27      	ldr	r3, [pc, #156]	; (8003e64 <HAL_RCC_OscConfig+0x4dc>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dca:	f7fd f92d 	bl	8001028 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd2:	f7fd f929 	bl	8001028 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e036      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de4:	4b1e      	ldr	r3, [pc, #120]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f0      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x44a>
 8003df0:	e02e      	b.n	8003e50 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e029      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dfe:	4b18      	ldr	r3, [pc, #96]	; (8003e60 <HAL_RCC_OscConfig+0x4d8>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d11c      	bne.n	8003e4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d115      	bne.n	8003e4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e26:	4013      	ands	r3, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d10d      	bne.n	8003e4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d106      	bne.n	8003e4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e000      	b.n	8003e52 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40007000 	.word	0x40007000
 8003e60:	40023800 	.word	0x40023800
 8003e64:	42470060 	.word	0x42470060

08003e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0cc      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b68      	ldr	r3, [pc, #416]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d90c      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b65      	ldr	r3, [pc, #404]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e92:	4b63      	ldr	r3, [pc, #396]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0b8      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d020      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ebc:	4b59      	ldr	r3, [pc, #356]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a58      	ldr	r2, [pc, #352]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed4:	4b53      	ldr	r3, [pc, #332]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee0:	4b50      	ldr	r3, [pc, #320]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	494d      	ldr	r1, [pc, #308]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d044      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f06:	4b47      	ldr	r3, [pc, #284]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d119      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e07f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d003      	beq.n	8003f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b3f      	ldr	r3, [pc, #252]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e06f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f36:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e067      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f46:	4b37      	ldr	r3, [pc, #220]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f023 0203 	bic.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4934      	ldr	r1, [pc, #208]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f58:	f7fd f866 	bl	8001028 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fd f862 	bl	8001028 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e04f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 020c 	and.w	r2, r3, #12
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1eb      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b25      	ldr	r3, [pc, #148]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d20c      	bcs.n	8003fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b22      	ldr	r3, [pc, #136]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9e:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e032      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fbc:	4b19      	ldr	r3, [pc, #100]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4916      	ldr	r1, [pc, #88]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	490e      	ldr	r1, [pc, #56]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fee:	f000 f821 	bl	8004034 <HAL_RCC_GetSysClockFreq>
 8003ff2:	4601      	mov	r1, r0
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	5cd3      	ldrb	r3, [r2, r3]
 8004002:	fa21 f303 	lsr.w	r3, r1, r3
 8004006:	4a09      	ldr	r2, [pc, #36]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8004008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_RCC_ClockConfig+0x1c8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fc ffc6 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40023c00 	.word	0x40023c00
 8004024:	40023800 	.word	0x40023800
 8004028:	0800b04c 	.word	0x0800b04c
 800402c:	20000024 	.word	0x20000024
 8004030:	20000000 	.word	0x20000000

08004034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	2300      	movs	r3, #0
 8004044:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800404a:	4b63      	ldr	r3, [pc, #396]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b04      	cmp	r3, #4
 8004054:	d007      	beq.n	8004066 <HAL_RCC_GetSysClockFreq+0x32>
 8004056:	2b08      	cmp	r3, #8
 8004058:	d008      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0x38>
 800405a:	2b00      	cmp	r3, #0
 800405c:	f040 80b4 	bne.w	80041c8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004060:	4b5e      	ldr	r3, [pc, #376]	; (80041dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004062:	60bb      	str	r3, [r7, #8]
       break;
 8004064:	e0b3      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004066:	4b5e      	ldr	r3, [pc, #376]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004068:	60bb      	str	r3, [r7, #8]
      break;
 800406a:	e0b0      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800406c:	4b5a      	ldr	r3, [pc, #360]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004074:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004076:	4b58      	ldr	r3, [pc, #352]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d04a      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004082:	4b55      	ldr	r3, [pc, #340]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	099b      	lsrs	r3, r3, #6
 8004088:	f04f 0400 	mov.w	r4, #0
 800408c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	ea03 0501 	and.w	r5, r3, r1
 8004098:	ea04 0602 	and.w	r6, r4, r2
 800409c:	4629      	mov	r1, r5
 800409e:	4632      	mov	r2, r6
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	f04f 0400 	mov.w	r4, #0
 80040a8:	0154      	lsls	r4, r2, #5
 80040aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040ae:	014b      	lsls	r3, r1, #5
 80040b0:	4619      	mov	r1, r3
 80040b2:	4622      	mov	r2, r4
 80040b4:	1b49      	subs	r1, r1, r5
 80040b6:	eb62 0206 	sbc.w	r2, r2, r6
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	f04f 0400 	mov.w	r4, #0
 80040c2:	0194      	lsls	r4, r2, #6
 80040c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040c8:	018b      	lsls	r3, r1, #6
 80040ca:	1a5b      	subs	r3, r3, r1
 80040cc:	eb64 0402 	sbc.w	r4, r4, r2
 80040d0:	f04f 0100 	mov.w	r1, #0
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	00e2      	lsls	r2, r4, #3
 80040da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040de:	00d9      	lsls	r1, r3, #3
 80040e0:	460b      	mov	r3, r1
 80040e2:	4614      	mov	r4, r2
 80040e4:	195b      	adds	r3, r3, r5
 80040e6:	eb44 0406 	adc.w	r4, r4, r6
 80040ea:	f04f 0100 	mov.w	r1, #0
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	0262      	lsls	r2, r4, #9
 80040f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80040f8:	0259      	lsls	r1, r3, #9
 80040fa:	460b      	mov	r3, r1
 80040fc:	4614      	mov	r4, r2
 80040fe:	4618      	mov	r0, r3
 8004100:	4621      	mov	r1, r4
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f04f 0400 	mov.w	r4, #0
 8004108:	461a      	mov	r2, r3
 800410a:	4623      	mov	r3, r4
 800410c:	f7fc fda6 	bl	8000c5c <__aeabi_uldivmod>
 8004110:	4603      	mov	r3, r0
 8004112:	460c      	mov	r4, r1
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	e049      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004118:	4b2f      	ldr	r3, [pc, #188]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	099b      	lsrs	r3, r3, #6
 800411e:	f04f 0400 	mov.w	r4, #0
 8004122:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	ea03 0501 	and.w	r5, r3, r1
 800412e:	ea04 0602 	and.w	r6, r4, r2
 8004132:	4629      	mov	r1, r5
 8004134:	4632      	mov	r2, r6
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	f04f 0400 	mov.w	r4, #0
 800413e:	0154      	lsls	r4, r2, #5
 8004140:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004144:	014b      	lsls	r3, r1, #5
 8004146:	4619      	mov	r1, r3
 8004148:	4622      	mov	r2, r4
 800414a:	1b49      	subs	r1, r1, r5
 800414c:	eb62 0206 	sbc.w	r2, r2, r6
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	f04f 0400 	mov.w	r4, #0
 8004158:	0194      	lsls	r4, r2, #6
 800415a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800415e:	018b      	lsls	r3, r1, #6
 8004160:	1a5b      	subs	r3, r3, r1
 8004162:	eb64 0402 	sbc.w	r4, r4, r2
 8004166:	f04f 0100 	mov.w	r1, #0
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	00e2      	lsls	r2, r4, #3
 8004170:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004174:	00d9      	lsls	r1, r3, #3
 8004176:	460b      	mov	r3, r1
 8004178:	4614      	mov	r4, r2
 800417a:	195b      	adds	r3, r3, r5
 800417c:	eb44 0406 	adc.w	r4, r4, r6
 8004180:	f04f 0100 	mov.w	r1, #0
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	02a2      	lsls	r2, r4, #10
 800418a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800418e:	0299      	lsls	r1, r3, #10
 8004190:	460b      	mov	r3, r1
 8004192:	4614      	mov	r4, r2
 8004194:	4618      	mov	r0, r3
 8004196:	4621      	mov	r1, r4
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f04f 0400 	mov.w	r4, #0
 800419e:	461a      	mov	r2, r3
 80041a0:	4623      	mov	r3, r4
 80041a2:	f7fc fd5b 	bl	8000c5c <__aeabi_uldivmod>
 80041a6:	4603      	mov	r3, r0
 80041a8:	460c      	mov	r4, r1
 80041aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041ac:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	0c1b      	lsrs	r3, r3, #16
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	3301      	adds	r3, #1
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c4:	60bb      	str	r3, [r7, #8]
      break;
 80041c6:	e002      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041c8:	4b04      	ldr	r3, [pc, #16]	; (80041dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041ca:	60bb      	str	r3, [r7, #8]
      break;
 80041cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ce:	68bb      	ldr	r3, [r7, #8]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041d8:	40023800 	.word	0x40023800
 80041dc:	00f42400 	.word	0x00f42400
 80041e0:	007a1200 	.word	0x007a1200

080041e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ea:	681b      	ldr	r3, [r3, #0]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000024 	.word	0x20000024

080041fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004200:	f7ff fff0 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8004204:	4601      	mov	r1, r0
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	0a9b      	lsrs	r3, r3, #10
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	4a03      	ldr	r2, [pc, #12]	; (8004220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004212:	5cd3      	ldrb	r3, [r2, r3]
 8004214:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40023800 	.word	0x40023800
 8004220:	0800b05c 	.word	0x0800b05c

08004224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004228:	f7ff ffdc 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 800422c:	4601      	mov	r1, r0
 800422e:	4b05      	ldr	r3, [pc, #20]	; (8004244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	0b5b      	lsrs	r3, r3, #13
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	4a03      	ldr	r2, [pc, #12]	; (8004248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800423a:	5cd3      	ldrb	r3, [r2, r3]
 800423c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004240:	4618      	mov	r0, r3
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40023800 	.word	0x40023800
 8004248:	0800b05c 	.word	0x0800b05c

0800424c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e056      	b.n	800430c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d106      	bne.n	800427e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f004 fe93 	bl	8008fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2202      	movs	r2, #2
 8004282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004294:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	ea42 0103 	orr.w	r1, r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	0c1b      	lsrs	r3, r3, #16
 80042dc:	f003 0104 	and.w	r1, r3, #4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69da      	ldr	r2, [r3, #28]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	4613      	mov	r3, r2
 8004322:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_SPI_Transmit+0x22>
 8004332:	2302      	movs	r3, #2
 8004334:	e11e      	b.n	8004574 <HAL_SPI_Transmit+0x260>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800433e:	f7fc fe73 	bl	8001028 <HAL_GetTick>
 8004342:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d002      	beq.n	800435a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004354:	2302      	movs	r3, #2
 8004356:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004358:	e103      	b.n	8004562 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <HAL_SPI_Transmit+0x52>
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	77fb      	strb	r3, [r7, #31]
    goto error;
 800436a:	e0fa      	b.n	8004562 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2203      	movs	r2, #3
 8004370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	88fa      	ldrh	r2, [r7, #6]
 8004384:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	88fa      	ldrh	r2, [r7, #6]
 800438a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b2:	d107      	bne.n	80043c4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ce:	2b40      	cmp	r3, #64	; 0x40
 80043d0:	d007      	beq.n	80043e2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ea:	d14b      	bne.n	8004484 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_SPI_Transmit+0xe6>
 80043f4:	8afb      	ldrh	r3, [r7, #22]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d13e      	bne.n	8004478 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	881a      	ldrh	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	1c9a      	adds	r2, r3, #2
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800441e:	e02b      	b.n	8004478 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b02      	cmp	r3, #2
 800442c:	d112      	bne.n	8004454 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	881a      	ldrh	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	1c9a      	adds	r2, r3, #2
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	86da      	strh	r2, [r3, #54]	; 0x36
 8004452:	e011      	b.n	8004478 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004454:	f7fc fde8 	bl	8001028 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d803      	bhi.n	800446c <HAL_SPI_Transmit+0x158>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800446a:	d102      	bne.n	8004472 <HAL_SPI_Transmit+0x15e>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d102      	bne.n	8004478 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004476:	e074      	b.n	8004562 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1ce      	bne.n	8004420 <HAL_SPI_Transmit+0x10c>
 8004482:	e04c      	b.n	800451e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <HAL_SPI_Transmit+0x17e>
 800448c:	8afb      	ldrh	r3, [r7, #22]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d140      	bne.n	8004514 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	330c      	adds	r3, #12
 800449c:	7812      	ldrb	r2, [r2, #0]
 800449e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044b8:	e02c      	b.n	8004514 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d113      	bne.n	80044f0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	7812      	ldrb	r2, [r2, #0]
 80044d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80044ee:	e011      	b.n	8004514 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044f0:	f7fc fd9a 	bl	8001028 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d803      	bhi.n	8004508 <HAL_SPI_Transmit+0x1f4>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004506:	d102      	bne.n	800450e <HAL_SPI_Transmit+0x1fa>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d102      	bne.n	8004514 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004512:	e026      	b.n	8004562 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1cd      	bne.n	80044ba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	6839      	ldr	r1, [r7, #0]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fcc4 	bl	8004eb0 <SPI_EndRxTxTransaction>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	77fb      	strb	r3, [r7, #31]
 800455e:	e000      	b.n	8004562 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004560:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004572:	7ffb      	ldrb	r3, [r7, #31]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	4613      	mov	r3, r2
 800458a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004598:	d112      	bne.n	80045c0 <HAL_SPI_Receive+0x44>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10e      	bne.n	80045c0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2204      	movs	r2, #4
 80045a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045aa:	88fa      	ldrh	r2, [r7, #6]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	4613      	mov	r3, r2
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f8e9 	bl	800478e <HAL_SPI_TransmitReceive>
 80045bc:	4603      	mov	r3, r0
 80045be:	e0e2      	b.n	8004786 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_SPI_Receive+0x52>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e0db      	b.n	8004786 <HAL_SPI_Receive+0x20a>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045d6:	f7fc fd27 	bl	8001028 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d002      	beq.n	80045ee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80045e8:	2302      	movs	r3, #2
 80045ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045ec:	e0c2      	b.n	8004774 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_SPI_Receive+0x7e>
 80045f4:	88fb      	ldrh	r3, [r7, #6]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d102      	bne.n	8004600 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045fe:	e0b9      	b.n	8004774 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2204      	movs	r2, #4
 8004604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	88fa      	ldrh	r2, [r7, #6]
 8004618:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	88fa      	ldrh	r2, [r7, #6]
 800461e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004646:	d107      	bne.n	8004658 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004656:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004662:	2b40      	cmp	r3, #64	; 0x40
 8004664:	d007      	beq.n	8004676 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004674:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d162      	bne.n	8004744 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800467e:	e02e      	b.n	80046de <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b01      	cmp	r3, #1
 800468c:	d115      	bne.n	80046ba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f103 020c 	add.w	r2, r3, #12
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	7812      	ldrb	r2, [r2, #0]
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046b8:	e011      	b.n	80046de <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ba:	f7fc fcb5 	bl	8001028 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d803      	bhi.n	80046d2 <HAL_SPI_Receive+0x156>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046d0:	d102      	bne.n	80046d8 <HAL_SPI_Receive+0x15c>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d102      	bne.n	80046de <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046dc:	e04a      	b.n	8004774 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1cb      	bne.n	8004680 <HAL_SPI_Receive+0x104>
 80046e8:	e031      	b.n	800474e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d113      	bne.n	8004720 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	b292      	uxth	r2, r2
 8004704:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470a:	1c9a      	adds	r2, r3, #2
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800471e:	e011      	b.n	8004744 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004720:	f7fc fc82 	bl	8001028 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d803      	bhi.n	8004738 <HAL_SPI_Receive+0x1bc>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004736:	d102      	bne.n	800473e <HAL_SPI_Receive+0x1c2>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d102      	bne.n	8004744 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004742:	e017      	b.n	8004774 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1cd      	bne.n	80046ea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 fb46 	bl	8004de4 <SPI_EndRxTransaction>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	75fb      	strb	r3, [r7, #23]
 8004770:	e000      	b.n	8004774 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004772:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004784:	7dfb      	ldrb	r3, [r7, #23]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b08c      	sub	sp, #48	; 0x30
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	607a      	str	r2, [r7, #4]
 800479a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800479c:	2301      	movs	r3, #1
 800479e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_SPI_TransmitReceive+0x26>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e18a      	b.n	8004aca <HAL_SPI_TransmitReceive+0x33c>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047bc:	f7fc fc34 	bl	8001028 <HAL_GetTick>
 80047c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80047d2:	887b      	ldrh	r3, [r7, #2]
 80047d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d00f      	beq.n	80047fe <HAL_SPI_TransmitReceive+0x70>
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047e4:	d107      	bne.n	80047f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d103      	bne.n	80047f6 <HAL_SPI_TransmitReceive+0x68>
 80047ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d003      	beq.n	80047fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80047f6:	2302      	movs	r3, #2
 80047f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047fc:	e15b      	b.n	8004ab6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_SPI_TransmitReceive+0x82>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <HAL_SPI_TransmitReceive+0x82>
 800480a:	887b      	ldrh	r3, [r7, #2]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d103      	bne.n	8004818 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004816:	e14e      	b.n	8004ab6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b04      	cmp	r3, #4
 8004822:	d003      	beq.n	800482c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2205      	movs	r2, #5
 8004828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	887a      	ldrh	r2, [r7, #2]
 800483c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	887a      	ldrh	r2, [r7, #2]
 8004842:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	887a      	ldrh	r2, [r7, #2]
 800484e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	887a      	ldrh	r2, [r7, #2]
 8004854:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d007      	beq.n	8004880 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800487e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004888:	d178      	bne.n	800497c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <HAL_SPI_TransmitReceive+0x10a>
 8004892:	8b7b      	ldrh	r3, [r7, #26]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d166      	bne.n	8004966 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	881a      	ldrh	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	1c9a      	adds	r2, r3, #2
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048bc:	e053      	b.n	8004966 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d11b      	bne.n	8004904 <HAL_SPI_TransmitReceive+0x176>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <HAL_SPI_TransmitReceive+0x176>
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d113      	bne.n	8004904 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e0:	881a      	ldrh	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ec:	1c9a      	adds	r2, r3, #2
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b01      	cmp	r3, #1
 8004910:	d119      	bne.n	8004946 <HAL_SPI_TransmitReceive+0x1b8>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d014      	beq.n	8004946 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	b292      	uxth	r2, r2
 8004928:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	1c9a      	adds	r2, r3, #2
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004942:	2301      	movs	r3, #1
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004946:	f7fc fb6f 	bl	8001028 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004952:	429a      	cmp	r2, r3
 8004954:	d807      	bhi.n	8004966 <HAL_SPI_TransmitReceive+0x1d8>
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800495c:	d003      	beq.n	8004966 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004964:	e0a7      	b.n	8004ab6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1a6      	bne.n	80048be <HAL_SPI_TransmitReceive+0x130>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1a1      	bne.n	80048be <HAL_SPI_TransmitReceive+0x130>
 800497a:	e07c      	b.n	8004a76 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_SPI_TransmitReceive+0x1fc>
 8004984:	8b7b      	ldrh	r3, [r7, #26]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d16b      	bne.n	8004a62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	330c      	adds	r3, #12
 8004994:	7812      	ldrb	r2, [r2, #0]
 8004996:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049b0:	e057      	b.n	8004a62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d11c      	bne.n	80049fa <HAL_SPI_TransmitReceive+0x26c>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d017      	beq.n	80049fa <HAL_SPI_TransmitReceive+0x26c>
 80049ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d114      	bne.n	80049fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	330c      	adds	r3, #12
 80049da:	7812      	ldrb	r2, [r2, #0]
 80049dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d119      	bne.n	8004a3c <HAL_SPI_TransmitReceive+0x2ae>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d014      	beq.n	8004a3c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a3c:	f7fc faf4 	bl	8001028 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d803      	bhi.n	8004a54 <HAL_SPI_TransmitReceive+0x2c6>
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a52:	d102      	bne.n	8004a5a <HAL_SPI_TransmitReceive+0x2cc>
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a60:	e029      	b.n	8004ab6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1a2      	bne.n	80049b2 <HAL_SPI_TransmitReceive+0x224>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d19d      	bne.n	80049b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fa18 	bl	8004eb0 <SPI_EndRxTxTransaction>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d006      	beq.n	8004a94 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a92:	e010      	b.n	8004ab6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10b      	bne.n	8004ab4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	e000      	b.n	8004ab6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ab4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ac6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3730      	adds	r7, #48	; 0x30
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	099b      	lsrs	r3, r3, #6
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10f      	bne.n	8004b18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	099b      	lsrs	r3, r3, #6
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d004      	beq.n	8004b18 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	4798      	blx	r3
    return;
 8004b16:	e0d8      	b.n	8004cca <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	085b      	lsrs	r3, r3, #1
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <HAL_SPI_IRQHandler+0x66>
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	09db      	lsrs	r3, r3, #7
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	4798      	blx	r3
    return;
 8004b38:	e0c7      	b.n	8004cca <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10c      	bne.n	8004b60 <HAL_SPI_IRQHandler+0x8c>
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	099b      	lsrs	r3, r3, #6
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	0a1b      	lsrs	r3, r3, #8
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 80b5 	beq.w	8004cca <HAL_SPI_IRQHandler+0x1f6>
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 80ae 	beq.w	8004cca <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	099b      	lsrs	r3, r3, #6
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d023      	beq.n	8004bc2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d011      	beq.n	8004baa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8a:	f043 0204 	orr.w	r2, r3, #4
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	e00b      	b.n	8004bc2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004baa:	2300      	movs	r3, #0
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	613b      	str	r3, [r7, #16]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	693b      	ldr	r3, [r7, #16]
        return;
 8004bc0:	e083      	b.n	8004cca <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d014      	beq.n	8004bf8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	f043 0201 	orr.w	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00c      	beq.n	8004c1e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c08:	f043 0208 	orr.w	r2, r3, #8
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c10:	2300      	movs	r3, #0
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d050      	beq.n	8004cc8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c34:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d104      	bne.n	8004c52 <HAL_SPI_IRQHandler+0x17e>
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d034      	beq.n	8004cbc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0203 	bic.w	r2, r2, #3
 8004c60:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d011      	beq.n	8004c8e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6e:	4a18      	ldr	r2, [pc, #96]	; (8004cd0 <HAL_SPI_IRQHandler+0x1fc>)
 8004c70:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fd fa3a 	bl	80020f0 <HAL_DMA_Abort_IT>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d016      	beq.n	8004cc4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9a:	4a0d      	ldr	r2, [pc, #52]	; (8004cd0 <HAL_SPI_IRQHandler+0x1fc>)
 8004c9c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fd fa24 	bl	80020f0 <HAL_DMA_Abort_IT>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004cba:	e003      	b.n	8004cc4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f809 	bl	8004cd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004cc2:	e000      	b.n	8004cc6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004cc4:	bf00      	nop
    return;
 8004cc6:	bf00      	nop
 8004cc8:	bf00      	nop
  }
}
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	08004ce9 	.word	0x08004ce9

08004cd4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7ff ffe6 	bl	8004cd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d08:	bf00      	nop
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d20:	e04c      	b.n	8004dbc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d28:	d048      	beq.n	8004dbc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004d2a:	f7fc f97d 	bl	8001028 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d902      	bls.n	8004d40 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d13d      	bne.n	8004dbc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d58:	d111      	bne.n	8004d7e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d62:	d004      	beq.n	8004d6e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d6c:	d107      	bne.n	8004d7e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d86:	d10f      	bne.n	8004da8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004da6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e00f      	b.n	8004ddc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	bf0c      	ite	eq
 8004dcc:	2301      	moveq	r3, #1
 8004dce:	2300      	movne	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d1a3      	bne.n	8004d22 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004df8:	d111      	bne.n	8004e1e <SPI_EndRxTransaction+0x3a>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e02:	d004      	beq.n	8004e0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e0c:	d107      	bne.n	8004e1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e1c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e26:	d12a      	bne.n	8004e7e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e30:	d012      	beq.n	8004e58 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2180      	movs	r1, #128	; 0x80
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f7ff ff67 	bl	8004d10 <SPI_WaitFlagStateUntilTimeout>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d02d      	beq.n	8004ea4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4c:	f043 0220 	orr.w	r2, r3, #32
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e026      	b.n	8004ea6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2101      	movs	r1, #1
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f7ff ff54 	bl	8004d10 <SPI_WaitFlagStateUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01a      	beq.n	8004ea4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e72:	f043 0220 	orr.w	r2, r3, #32
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e013      	b.n	8004ea6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2200      	movs	r2, #0
 8004e86:	2101      	movs	r1, #1
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f7ff ff41 	bl	8004d10 <SPI_WaitFlagStateUntilTimeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d007      	beq.n	8004ea4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e98:	f043 0220 	orr.w	r2, r3, #32
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e000      	b.n	8004ea6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ebc:	4b1b      	ldr	r3, [pc, #108]	; (8004f2c <SPI_EndRxTxTransaction+0x7c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1b      	ldr	r2, [pc, #108]	; (8004f30 <SPI_EndRxTxTransaction+0x80>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	0d5b      	lsrs	r3, r3, #21
 8004ec8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ecc:	fb02 f303 	mul.w	r3, r2, r3
 8004ed0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eda:	d112      	bne.n	8004f02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2180      	movs	r1, #128	; 0x80
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f7ff ff12 	bl	8004d10 <SPI_WaitFlagStateUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d016      	beq.n	8004f20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	f043 0220 	orr.w	r2, r3, #32
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e00f      	b.n	8004f22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f18:	2b80      	cmp	r3, #128	; 0x80
 8004f1a:	d0f2      	beq.n	8004f02 <SPI_EndRxTxTransaction+0x52>
 8004f1c:	e000      	b.n	8004f20 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f1e:	bf00      	nop
  }

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000024 	.word	0x20000024
 8004f30:	165e9f81 	.word	0x165e9f81

08004f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e01d      	b.n	8004f82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f004 f872 	bl	8009044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f000 fdb8 	bl	8005ae8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e01d      	b.n	8004fd8 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d106      	bne.n	8004fb6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f815 	bl	8004fe0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f000 fd8d 	bl	8005ae8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2201      	movs	r2, #1
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f001 f982 	bl	8006310 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a15      	ldr	r2, [pc, #84]	; (8005068 <HAL_TIM_OC_Start+0x74>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d004      	beq.n	8005020 <HAL_TIM_OC_Start+0x2c>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a14      	ldr	r2, [pc, #80]	; (800506c <HAL_TIM_OC_Start+0x78>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d101      	bne.n	8005024 <HAL_TIM_OC_Start+0x30>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <HAL_TIM_OC_Start+0x32>
 8005024:	2300      	movs	r3, #0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005038:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b06      	cmp	r3, #6
 800504a:	d007      	beq.n	800505c <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40010000 	.word	0x40010000
 800506c:	40010400 	.word	0x40010400

08005070 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e01d      	b.n	80050be <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f815 	bl	80050c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f000 fd1a 	bl	8005ae8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2201      	movs	r2, #1
 80050ec:	6839      	ldr	r1, [r7, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f001 f90e 	bl	8006310 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a15      	ldr	r2, [pc, #84]	; (8005150 <HAL_TIM_PWM_Start+0x74>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d004      	beq.n	8005108 <HAL_TIM_PWM_Start+0x2c>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a14      	ldr	r2, [pc, #80]	; (8005154 <HAL_TIM_PWM_Start+0x78>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <HAL_TIM_PWM_Start+0x30>
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <HAL_TIM_PWM_Start+0x32>
 800510c:	2300      	movs	r3, #0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005120:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b06      	cmp	r3, #6
 8005132:	d007      	beq.n	8005144 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40010000 	.word	0x40010000
 8005154:	40010400 	.word	0x40010400

08005158 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e01d      	b.n	80051a6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f815 	bl	80051ae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3304      	adds	r3, #4
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f000 fca6 	bl	8005ae8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b086      	sub	sp, #24
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e083      	b.n	80052de <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f004 f800 	bl	80091f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005206:	f023 0307 	bic.w	r3, r3, #7
 800520a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f000 fc66 	bl	8005ae8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005244:	f023 0303 	bic.w	r3, r3, #3
 8005248:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	4313      	orrs	r3, r2
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005262:	f023 030c 	bic.w	r3, r3, #12
 8005266:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800526e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	021b      	lsls	r3, r3, #8
 800527e:	4313      	orrs	r3, r2
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	011a      	lsls	r2, r3, #4
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	031b      	lsls	r3, r3, #12
 8005292:	4313      	orrs	r3, r2
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80052a0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80052a8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	4313      	orrs	r3, r2
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <HAL_TIM_Encoder_Start_IT+0x16>
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d010      	beq.n	800531c <HAL_TIM_Encoder_Start_IT+0x36>
 80052fa:	e01f      	b.n	800533c <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2201      	movs	r2, #1
 8005302:	2100      	movs	r1, #0
 8005304:	4618      	mov	r0, r3
 8005306:	f001 f803 	bl	8006310 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0202 	orr.w	r2, r2, #2
 8005318:	60da      	str	r2, [r3, #12]
      break;
 800531a:	e02e      	b.n	800537a <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2201      	movs	r2, #1
 8005322:	2104      	movs	r1, #4
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fff3 	bl	8006310 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0204 	orr.w	r2, r2, #4
 8005338:	60da      	str	r2, [r3, #12]
      break;
 800533a:	e01e      	b.n	800537a <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2201      	movs	r2, #1
 8005342:	2100      	movs	r1, #0
 8005344:	4618      	mov	r0, r3
 8005346:	f000 ffe3 	bl	8006310 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2201      	movs	r2, #1
 8005350:	2104      	movs	r1, #4
 8005352:	4618      	mov	r0, r3
 8005354:	f000 ffdc 	bl	8006310 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0202 	orr.w	r2, r2, #2
 8005366:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0204 	orr.w	r2, r2, #4
 8005376:	60da      	str	r2, [r3, #12]
      break;
 8005378:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 0201 	orr.w	r2, r2, #1
 8005388:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d122      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d11b      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0202 	mvn.w	r2, #2
 80053c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f003 f98a 	bl	80086f0 <HAL_TIM_IC_CaptureCallback>
 80053dc:	e005      	b.n	80053ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fb63 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fb6a 	bl	8005abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d122      	bne.n	8005444 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b04      	cmp	r3, #4
 800540a:	d11b      	bne.n	8005444 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0204 	mvn.w	r2, #4
 8005414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2202      	movs	r2, #2
 800541a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f003 f960 	bl	80086f0 <HAL_TIM_IC_CaptureCallback>
 8005430:	e005      	b.n	800543e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fb39 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fb40 	bl	8005abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b08      	cmp	r3, #8
 8005450:	d122      	bne.n	8005498 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0308 	and.w	r3, r3, #8
 800545c:	2b08      	cmp	r3, #8
 800545e:	d11b      	bne.n	8005498 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0208 	mvn.w	r2, #8
 8005468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2204      	movs	r2, #4
 800546e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f003 f936 	bl	80086f0 <HAL_TIM_IC_CaptureCallback>
 8005484:	e005      	b.n	8005492 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fb0f 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fb16 	bl	8005abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 0310 	and.w	r3, r3, #16
 80054a2:	2b10      	cmp	r3, #16
 80054a4:	d122      	bne.n	80054ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0310 	and.w	r3, r3, #16
 80054b0:	2b10      	cmp	r3, #16
 80054b2:	d11b      	bne.n	80054ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f06f 0210 	mvn.w	r2, #16
 80054bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2208      	movs	r2, #8
 80054c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f003 f90c 	bl	80086f0 <HAL_TIM_IC_CaptureCallback>
 80054d8:	e005      	b.n	80054e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fae5 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 faec 	bl	8005abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d10e      	bne.n	8005518 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b01      	cmp	r3, #1
 8005506:	d107      	bne.n	8005518 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0201 	mvn.w	r2, #1
 8005510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fabf 	bl	8005a96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b80      	cmp	r3, #128	; 0x80
 8005524:	d10e      	bne.n	8005544 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005530:	2b80      	cmp	r3, #128	; 0x80
 8005532:	d107      	bne.n	8005544 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800553c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f001 f80e 	bl	8006560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554e:	2b40      	cmp	r3, #64	; 0x40
 8005550:	d10e      	bne.n	8005570 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	d107      	bne.n	8005570 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fab1 	bl	8005ad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b20      	cmp	r3, #32
 800557c:	d10e      	bne.n	800559c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b20      	cmp	r3, #32
 800558a:	d107      	bne.n	800559c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0220 	mvn.w	r2, #32
 8005594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 ffd8 	bl	800654c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800559c:	bf00      	nop
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_TIM_OC_ConfigChannel+0x1a>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e04e      	b.n	800565c <HAL_TIM_OC_ConfigChannel+0xb8>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2202      	movs	r2, #2
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b0c      	cmp	r3, #12
 80055d2:	d839      	bhi.n	8005648 <HAL_TIM_OC_ConfigChannel+0xa4>
 80055d4:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <HAL_TIM_OC_ConfigChannel+0x38>)
 80055d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055da:	bf00      	nop
 80055dc:	08005611 	.word	0x08005611
 80055e0:	08005649 	.word	0x08005649
 80055e4:	08005649 	.word	0x08005649
 80055e8:	08005649 	.word	0x08005649
 80055ec:	0800561f 	.word	0x0800561f
 80055f0:	08005649 	.word	0x08005649
 80055f4:	08005649 	.word	0x08005649
 80055f8:	08005649 	.word	0x08005649
 80055fc:	0800562d 	.word	0x0800562d
 8005600:	08005649 	.word	0x08005649
 8005604:	08005649 	.word	0x08005649
 8005608:	08005649 	.word	0x08005649
 800560c:	0800563b 	.word	0x0800563b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fb06 	bl	8005c28 <TIM_OC1_SetConfig>
      break;
 800561c:	e015      	b.n	800564a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fb6f 	bl	8005d08 <TIM_OC2_SetConfig>
      break;
 800562a:	e00e      	b.n	800564a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68b9      	ldr	r1, [r7, #8]
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fbde 	bl	8005df4 <TIM_OC3_SetConfig>
      break;
 8005638:	e007      	b.n	800564a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68b9      	ldr	r1, [r7, #8]
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fc4b 	bl	8005edc <TIM_OC4_SetConfig>
      break;
 8005646:	e000      	b.n	800564a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8005648:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_TIM_IC_ConfigChannel+0x1a>
 800567a:	2302      	movs	r3, #2
 800567c:	e08a      	b.n	8005794 <HAL_TIM_IC_ConfigChannel+0x130>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2202      	movs	r2, #2
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d11b      	bne.n	80056cc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	6819      	ldr	r1, [r3, #0]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f000 fc70 	bl	8005f88 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 020c 	bic.w	r2, r2, #12
 80056b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6999      	ldr	r1, [r3, #24]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	619a      	str	r2, [r3, #24]
 80056ca:	e05a      	b.n	8005782 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d11c      	bne.n	800570c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6819      	ldr	r1, [r3, #0]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f000 fcf4 	bl	80060ce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699a      	ldr	r2, [r3, #24]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6999      	ldr	r1, [r3, #24]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	021a      	lsls	r2, r3, #8
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	619a      	str	r2, [r3, #24]
 800570a:	e03a      	b.n	8005782 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b08      	cmp	r3, #8
 8005710:	d11b      	bne.n	800574a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6819      	ldr	r1, [r3, #0]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f000 fd41 	bl	80061a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 020c 	bic.w	r2, r2, #12
 8005734:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69d9      	ldr	r1, [r3, #28]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	61da      	str	r2, [r3, #28]
 8005748:	e01b      	b.n	8005782 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6818      	ldr	r0, [r3, #0]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	6819      	ldr	r1, [r3, #0]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f000 fd61 	bl	8006220 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800576c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69d9      	ldr	r1, [r3, #28]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	021a      	lsls	r2, r3, #8
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e0b4      	b.n	8005920 <HAL_TIM_PWM_ConfigChannel+0x184>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2202      	movs	r2, #2
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b0c      	cmp	r3, #12
 80057ca:	f200 809f 	bhi.w	800590c <HAL_TIM_PWM_ConfigChannel+0x170>
 80057ce:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d4:	08005809 	.word	0x08005809
 80057d8:	0800590d 	.word	0x0800590d
 80057dc:	0800590d 	.word	0x0800590d
 80057e0:	0800590d 	.word	0x0800590d
 80057e4:	08005849 	.word	0x08005849
 80057e8:	0800590d 	.word	0x0800590d
 80057ec:	0800590d 	.word	0x0800590d
 80057f0:	0800590d 	.word	0x0800590d
 80057f4:	0800588b 	.word	0x0800588b
 80057f8:	0800590d 	.word	0x0800590d
 80057fc:	0800590d 	.word	0x0800590d
 8005800:	0800590d 	.word	0x0800590d
 8005804:	080058cb 	.word	0x080058cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fa0a 	bl	8005c28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0208 	orr.w	r2, r2, #8
 8005822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0204 	bic.w	r2, r2, #4
 8005832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6999      	ldr	r1, [r3, #24]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	691a      	ldr	r2, [r3, #16]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	619a      	str	r2, [r3, #24]
      break;
 8005846:	e062      	b.n	800590e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fa5a 	bl	8005d08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6999      	ldr	r1, [r3, #24]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	021a      	lsls	r2, r3, #8
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	619a      	str	r2, [r3, #24]
      break;
 8005888:	e041      	b.n	800590e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68b9      	ldr	r1, [r7, #8]
 8005890:	4618      	mov	r0, r3
 8005892:	f000 faaf 	bl	8005df4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0208 	orr.w	r2, r2, #8
 80058a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0204 	bic.w	r2, r2, #4
 80058b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69d9      	ldr	r1, [r3, #28]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	61da      	str	r2, [r3, #28]
      break;
 80058c8:	e021      	b.n	800590e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fb03 	bl	8005edc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69da      	ldr	r2, [r3, #28]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69da      	ldr	r2, [r3, #28]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69d9      	ldr	r1, [r3, #28]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	021a      	lsls	r2, r3, #8
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	61da      	str	r2, [r3, #28]
      break;
 800590a:	e000      	b.n	800590e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800590c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_TIM_ConfigClockSource+0x18>
 800593c:	2302      	movs	r3, #2
 800593e:	e0a6      	b.n	8005a8e <HAL_TIM_ConfigClockSource+0x166>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800595e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005966:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b40      	cmp	r3, #64	; 0x40
 8005976:	d067      	beq.n	8005a48 <HAL_TIM_ConfigClockSource+0x120>
 8005978:	2b40      	cmp	r3, #64	; 0x40
 800597a:	d80b      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x6c>
 800597c:	2b10      	cmp	r3, #16
 800597e:	d073      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x140>
 8005980:	2b10      	cmp	r3, #16
 8005982:	d802      	bhi.n	800598a <HAL_TIM_ConfigClockSource+0x62>
 8005984:	2b00      	cmp	r3, #0
 8005986:	d06f      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005988:	e078      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800598a:	2b20      	cmp	r3, #32
 800598c:	d06c      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x140>
 800598e:	2b30      	cmp	r3, #48	; 0x30
 8005990:	d06a      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005992:	e073      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005994:	2b70      	cmp	r3, #112	; 0x70
 8005996:	d00d      	beq.n	80059b4 <HAL_TIM_ConfigClockSource+0x8c>
 8005998:	2b70      	cmp	r3, #112	; 0x70
 800599a:	d804      	bhi.n	80059a6 <HAL_TIM_ConfigClockSource+0x7e>
 800599c:	2b50      	cmp	r3, #80	; 0x50
 800599e:	d033      	beq.n	8005a08 <HAL_TIM_ConfigClockSource+0xe0>
 80059a0:	2b60      	cmp	r3, #96	; 0x60
 80059a2:	d041      	beq.n	8005a28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80059a4:	e06a      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80059a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059aa:	d066      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x152>
 80059ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b0:	d017      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80059b2:	e063      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	6899      	ldr	r1, [r3, #8]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f000 fc84 	bl	80062d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	609a      	str	r2, [r3, #8]
      break;
 80059e0:	e04c      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6899      	ldr	r1, [r3, #8]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f000 fc6d 	bl	80062d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a04:	609a      	str	r2, [r3, #8]
      break;
 8005a06:	e039      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	6859      	ldr	r1, [r3, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	461a      	mov	r2, r3
 8005a16:	f000 fb2b 	bl	8006070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2150      	movs	r1, #80	; 0x50
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fc3a 	bl	800629a <TIM_ITRx_SetConfig>
      break;
 8005a26:	e029      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	6859      	ldr	r1, [r3, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	461a      	mov	r2, r3
 8005a36:	f000 fb87 	bl	8006148 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2160      	movs	r1, #96	; 0x60
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fc2a 	bl	800629a <TIM_ITRx_SetConfig>
      break;
 8005a46:	e019      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	6859      	ldr	r1, [r3, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	461a      	mov	r2, r3
 8005a56:	f000 fb0b 	bl	8006070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2140      	movs	r1, #64	; 0x40
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fc1a 	bl	800629a <TIM_ITRx_SetConfig>
      break;
 8005a66:	e009      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4619      	mov	r1, r3
 8005a72:	4610      	mov	r0, r2
 8005a74:	f000 fc11 	bl	800629a <TIM_ITRx_SetConfig>
      break;
 8005a78:	e000      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a40      	ldr	r2, [pc, #256]	; (8005bfc <TIM_Base_SetConfig+0x114>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d013      	beq.n	8005b28 <TIM_Base_SetConfig+0x40>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b06:	d00f      	beq.n	8005b28 <TIM_Base_SetConfig+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a3d      	ldr	r2, [pc, #244]	; (8005c00 <TIM_Base_SetConfig+0x118>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00b      	beq.n	8005b28 <TIM_Base_SetConfig+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a3c      	ldr	r2, [pc, #240]	; (8005c04 <TIM_Base_SetConfig+0x11c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d007      	beq.n	8005b28 <TIM_Base_SetConfig+0x40>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a3b      	ldr	r2, [pc, #236]	; (8005c08 <TIM_Base_SetConfig+0x120>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a3a      	ldr	r2, [pc, #232]	; (8005c0c <TIM_Base_SetConfig+0x124>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d108      	bne.n	8005b3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a2f      	ldr	r2, [pc, #188]	; (8005bfc <TIM_Base_SetConfig+0x114>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d02b      	beq.n	8005b9a <TIM_Base_SetConfig+0xb2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b48:	d027      	beq.n	8005b9a <TIM_Base_SetConfig+0xb2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a2c      	ldr	r2, [pc, #176]	; (8005c00 <TIM_Base_SetConfig+0x118>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d023      	beq.n	8005b9a <TIM_Base_SetConfig+0xb2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a2b      	ldr	r2, [pc, #172]	; (8005c04 <TIM_Base_SetConfig+0x11c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d01f      	beq.n	8005b9a <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a2a      	ldr	r2, [pc, #168]	; (8005c08 <TIM_Base_SetConfig+0x120>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d01b      	beq.n	8005b9a <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a29      	ldr	r2, [pc, #164]	; (8005c0c <TIM_Base_SetConfig+0x124>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d017      	beq.n	8005b9a <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a28      	ldr	r2, [pc, #160]	; (8005c10 <TIM_Base_SetConfig+0x128>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d013      	beq.n	8005b9a <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a27      	ldr	r2, [pc, #156]	; (8005c14 <TIM_Base_SetConfig+0x12c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00f      	beq.n	8005b9a <TIM_Base_SetConfig+0xb2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a26      	ldr	r2, [pc, #152]	; (8005c18 <TIM_Base_SetConfig+0x130>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00b      	beq.n	8005b9a <TIM_Base_SetConfig+0xb2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a25      	ldr	r2, [pc, #148]	; (8005c1c <TIM_Base_SetConfig+0x134>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d007      	beq.n	8005b9a <TIM_Base_SetConfig+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a24      	ldr	r2, [pc, #144]	; (8005c20 <TIM_Base_SetConfig+0x138>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d003      	beq.n	8005b9a <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a23      	ldr	r2, [pc, #140]	; (8005c24 <TIM_Base_SetConfig+0x13c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d108      	bne.n	8005bac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a0a      	ldr	r2, [pc, #40]	; (8005bfc <TIM_Base_SetConfig+0x114>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_Base_SetConfig+0xf8>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a0c      	ldr	r2, [pc, #48]	; (8005c0c <TIM_Base_SetConfig+0x124>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d103      	bne.n	8005be8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	615a      	str	r2, [r3, #20]
}
 8005bee:	bf00      	nop
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	40000400 	.word	0x40000400
 8005c04:	40000800 	.word	0x40000800
 8005c08:	40000c00 	.word	0x40000c00
 8005c0c:	40010400 	.word	0x40010400
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40014400 	.word	0x40014400
 8005c18:	40014800 	.word	0x40014800
 8005c1c:	40001800 	.word	0x40001800
 8005c20:	40001c00 	.word	0x40001c00
 8005c24:	40002000 	.word	0x40002000

08005c28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f023 0201 	bic.w	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0303 	bic.w	r3, r3, #3
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f023 0302 	bic.w	r3, r3, #2
 8005c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a20      	ldr	r2, [pc, #128]	; (8005d00 <TIM_OC1_SetConfig+0xd8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_OC1_SetConfig+0x64>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a1f      	ldr	r2, [pc, #124]	; (8005d04 <TIM_OC1_SetConfig+0xdc>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d10c      	bne.n	8005ca6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f023 0308 	bic.w	r3, r3, #8
 8005c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f023 0304 	bic.w	r3, r3, #4
 8005ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a15      	ldr	r2, [pc, #84]	; (8005d00 <TIM_OC1_SetConfig+0xd8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d003      	beq.n	8005cb6 <TIM_OC1_SetConfig+0x8e>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a14      	ldr	r2, [pc, #80]	; (8005d04 <TIM_OC1_SetConfig+0xdc>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d111      	bne.n	8005cda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	621a      	str	r2, [r3, #32]
}
 8005cf4:	bf00      	nop
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40010400 	.word	0x40010400

08005d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f023 0210 	bic.w	r2, r3, #16
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f023 0320 	bic.w	r3, r3, #32
 8005d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a22      	ldr	r2, [pc, #136]	; (8005dec <TIM_OC2_SetConfig+0xe4>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_OC2_SetConfig+0x68>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a21      	ldr	r2, [pc, #132]	; (8005df0 <TIM_OC2_SetConfig+0xe8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d10d      	bne.n	8005d8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a17      	ldr	r2, [pc, #92]	; (8005dec <TIM_OC2_SetConfig+0xe4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d003      	beq.n	8005d9c <TIM_OC2_SetConfig+0x94>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a16      	ldr	r2, [pc, #88]	; (8005df0 <TIM_OC2_SetConfig+0xe8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d113      	bne.n	8005dc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	621a      	str	r2, [r3, #32]
}
 8005dde:	bf00      	nop
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40010000 	.word	0x40010000
 8005df0:	40010400 	.word	0x40010400

08005df4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0303 	bic.w	r3, r3, #3
 8005e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a21      	ldr	r2, [pc, #132]	; (8005ed4 <TIM_OC3_SetConfig+0xe0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d003      	beq.n	8005e5a <TIM_OC3_SetConfig+0x66>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a20      	ldr	r2, [pc, #128]	; (8005ed8 <TIM_OC3_SetConfig+0xe4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d10d      	bne.n	8005e76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	021b      	lsls	r3, r3, #8
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a16      	ldr	r2, [pc, #88]	; (8005ed4 <TIM_OC3_SetConfig+0xe0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d003      	beq.n	8005e86 <TIM_OC3_SetConfig+0x92>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a15      	ldr	r2, [pc, #84]	; (8005ed8 <TIM_OC3_SetConfig+0xe4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d113      	bne.n	8005eae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	621a      	str	r2, [r3, #32]
}
 8005ec8:	bf00      	nop
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	40010400 	.word	0x40010400

08005edc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	021b      	lsls	r3, r3, #8
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	031b      	lsls	r3, r3, #12
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a12      	ldr	r2, [pc, #72]	; (8005f80 <TIM_OC4_SetConfig+0xa4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d003      	beq.n	8005f44 <TIM_OC4_SetConfig+0x68>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a11      	ldr	r2, [pc, #68]	; (8005f84 <TIM_OC4_SetConfig+0xa8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d109      	bne.n	8005f58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	019b      	lsls	r3, r3, #6
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	621a      	str	r2, [r3, #32]
}
 8005f72:	bf00      	nop
 8005f74:	371c      	adds	r7, #28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40010000 	.word	0x40010000
 8005f84:	40010400 	.word	0x40010400

08005f88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	f023 0201 	bic.w	r2, r3, #1
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4a28      	ldr	r2, [pc, #160]	; (8006054 <TIM_TI1_SetConfig+0xcc>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d01b      	beq.n	8005fee <TIM_TI1_SetConfig+0x66>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbc:	d017      	beq.n	8005fee <TIM_TI1_SetConfig+0x66>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4a25      	ldr	r2, [pc, #148]	; (8006058 <TIM_TI1_SetConfig+0xd0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <TIM_TI1_SetConfig+0x66>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4a24      	ldr	r2, [pc, #144]	; (800605c <TIM_TI1_SetConfig+0xd4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00f      	beq.n	8005fee <TIM_TI1_SetConfig+0x66>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4a23      	ldr	r2, [pc, #140]	; (8006060 <TIM_TI1_SetConfig+0xd8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00b      	beq.n	8005fee <TIM_TI1_SetConfig+0x66>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4a22      	ldr	r2, [pc, #136]	; (8006064 <TIM_TI1_SetConfig+0xdc>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d007      	beq.n	8005fee <TIM_TI1_SetConfig+0x66>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4a21      	ldr	r2, [pc, #132]	; (8006068 <TIM_TI1_SetConfig+0xe0>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d003      	beq.n	8005fee <TIM_TI1_SetConfig+0x66>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4a20      	ldr	r2, [pc, #128]	; (800606c <TIM_TI1_SetConfig+0xe4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d101      	bne.n	8005ff2 <TIM_TI1_SetConfig+0x6a>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <TIM_TI1_SetConfig+0x6c>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d008      	beq.n	800600a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f023 0303 	bic.w	r3, r3, #3
 8005ffe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	e003      	b.n	8006012 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006018:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	b2db      	uxtb	r3, r3
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f023 030a 	bic.w	r3, r3, #10
 800602c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f003 030a 	and.w	r3, r3, #10
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	621a      	str	r2, [r3, #32]
}
 8006046:	bf00      	nop
 8006048:	371c      	adds	r7, #28
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40010000 	.word	0x40010000
 8006058:	40000400 	.word	0x40000400
 800605c:	40000800 	.word	0x40000800
 8006060:	40000c00 	.word	0x40000c00
 8006064:	40010400 	.word	0x40010400
 8006068:	40014000 	.word	0x40014000
 800606c:	40001800 	.word	0x40001800

08006070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	f023 0201 	bic.w	r2, r3, #1
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800609a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f023 030a 	bic.w	r3, r3, #10
 80060ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	621a      	str	r2, [r3, #32]
}
 80060c2:	bf00      	nop
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b087      	sub	sp, #28
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
 80060da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	f023 0210 	bic.w	r2, r3, #16
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	021b      	lsls	r3, r3, #8
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800610c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	031b      	lsls	r3, r3, #12
 8006112:	b29b      	uxth	r3, r3
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	4313      	orrs	r3, r2
 8006118:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006120:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	4313      	orrs	r3, r2
 800612e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	621a      	str	r2, [r3, #32]
}
 800613c:	bf00      	nop
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	f023 0210 	bic.w	r2, r3, #16
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006172:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	031b      	lsls	r3, r3, #12
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006184:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	621a      	str	r2, [r3, #32]
}
 800619c:	bf00      	nop
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f023 0303 	bic.w	r3, r3, #3
 80061d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4313      	orrs	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	011b      	lsls	r3, r3, #4
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80061f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	621a      	str	r2, [r3, #32]
}
 8006214:	bf00      	nop
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	021b      	lsls	r3, r3, #8
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800625e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	031b      	lsls	r3, r3, #12
 8006264:	b29b      	uxth	r3, r3
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006272:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	031b      	lsls	r3, r3, #12
 8006278:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800629a:	b480      	push	{r7}
 800629c:	b085      	sub	sp, #20
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f043 0307 	orr.w	r3, r3, #7
 80062bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	609a      	str	r2, [r3, #8]
}
 80062c4:	bf00      	nop
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	021a      	lsls	r2, r3, #8
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	431a      	orrs	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	609a      	str	r2, [r3, #8]
}
 8006304:	bf00      	nop
 8006306:	371c      	adds	r7, #28
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	2201      	movs	r2, #1
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6a1a      	ldr	r2, [r3, #32]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	43db      	mvns	r3, r3
 8006332:	401a      	ands	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a1a      	ldr	r2, [r3, #32]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f003 031f 	and.w	r3, r3, #31
 8006342:	6879      	ldr	r1, [r7, #4]
 8006344:	fa01 f303 	lsl.w	r3, r1, r3
 8006348:	431a      	orrs	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	621a      	str	r2, [r3, #32]
}
 800634e:	bf00      	nop
 8006350:	371c      	adds	r7, #28
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2204      	movs	r2, #4
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	4618      	mov	r0, r3
 800636e:	f000 f901 	bl	8006574 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006380:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 0307 	and.w	r3, r3, #7
 800638c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b06      	cmp	r3, #6
 8006392:	d007      	beq.n	80063a4 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0201 	orr.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
	...

080063b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e05a      	b.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a21      	ldr	r2, [pc, #132]	; (800648c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d022      	beq.n	8006452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006414:	d01d      	beq.n	8006452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a1d      	ldr	r2, [pc, #116]	; (8006490 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d018      	beq.n	8006452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1b      	ldr	r2, [pc, #108]	; (8006494 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d013      	beq.n	8006452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1a      	ldr	r2, [pc, #104]	; (8006498 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00e      	beq.n	8006452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a18      	ldr	r2, [pc, #96]	; (800649c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d009      	beq.n	8006452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a17      	ldr	r2, [pc, #92]	; (80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d004      	beq.n	8006452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a15      	ldr	r2, [pc, #84]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d10c      	bne.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	4313      	orrs	r3, r2
 8006462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40010000 	.word	0x40010000
 8006490:	40000400 	.word	0x40000400
 8006494:	40000800 	.word	0x40000800
 8006498:	40000c00 	.word	0x40000c00
 800649c:	40010400 	.word	0x40010400
 80064a0:	40014000 	.word	0x40014000
 80064a4:	40001800 	.word	0x40001800

080064a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e03d      	b.n	8006540 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4313      	orrs	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2204      	movs	r2, #4
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a1a      	ldr	r2, [r3, #32]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	43db      	mvns	r3, r3
 8006596:	401a      	ands	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a1a      	ldr	r2, [r3, #32]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	fa01 f303 	lsl.w	r3, r1, r3
 80065ac:	431a      	orrs	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	621a      	str	r2, [r3, #32]
}
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e03f      	b.n	8006650 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d106      	bne.n	80065ea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f002 fecb 	bl	8009380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2224      	movs	r2, #36	; 0x24
 80065ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006600:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fabe 	bl	8006b84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691a      	ldr	r2, [r3, #16]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006616:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	695a      	ldr	r2, [r3, #20]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006626:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006636:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2220      	movs	r2, #32
 800664a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	4613      	mov	r3, r2
 8006664:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b20      	cmp	r3, #32
 8006670:	d140      	bne.n	80066f4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <HAL_UART_Receive_IT+0x26>
 8006678:	88fb      	ldrh	r3, [r7, #6]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e039      	b.n	80066f6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <HAL_UART_Receive_IT+0x38>
 800668c:	2302      	movs	r3, #2
 800668e:	e032      	b.n	80066f6 <HAL_UART_Receive_IT+0x9e>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	88fa      	ldrh	r2, [r7, #6]
 80066a2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	88fa      	ldrh	r2, [r7, #6]
 80066a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2222      	movs	r2, #34	; 0x22
 80066b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ce:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695a      	ldr	r2, [r3, #20]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0220 	orr.w	r2, r2, #32
 80066ee:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	e000      	b.n	80066f6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80066f4:	2302      	movs	r3, #2
  }
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
	...

08006704 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006724:	2300      	movs	r3, #0
 8006726:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10d      	bne.n	8006756 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d008      	beq.n	8006756 <HAL_UART_IRQHandler+0x52>
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f996 	bl	8006a80 <UART_Receive_IT>
      return;
 8006754:	e0d1      	b.n	80068fa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 80b0 	beq.w	80068be <HAL_UART_IRQHandler+0x1ba>
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d105      	bne.n	8006774 <HAL_UART_IRQHandler+0x70>
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 80a5 	beq.w	80068be <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <HAL_UART_IRQHandler+0x90>
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678c:	f043 0201 	orr.w	r2, r3, #1
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <HAL_UART_IRQHandler+0xb0>
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ac:	f043 0202 	orr.w	r2, r3, #2
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <HAL_UART_IRQHandler+0xd0>
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067cc:	f043 0204 	orr.w	r2, r3, #4
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00f      	beq.n	80067fe <HAL_UART_IRQHandler+0xfa>
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	f003 0320 	and.w	r3, r3, #32
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d104      	bne.n	80067f2 <HAL_UART_IRQHandler+0xee>
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d005      	beq.n	80067fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f6:	f043 0208 	orr.w	r2, r3, #8
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d078      	beq.n	80068f8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	2b00      	cmp	r3, #0
 800680e:	d007      	beq.n	8006820 <HAL_UART_IRQHandler+0x11c>
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f930 	bl	8006a80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682a:	2b40      	cmp	r3, #64	; 0x40
 800682c:	bf0c      	ite	eq
 800682e:	2301      	moveq	r3, #1
 8006830:	2300      	movne	r3, #0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d102      	bne.n	8006848 <HAL_UART_IRQHandler+0x144>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d031      	beq.n	80068ac <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f879 	bl	8006940 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006858:	2b40      	cmp	r3, #64	; 0x40
 800685a:	d123      	bne.n	80068a4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	695a      	ldr	r2, [r3, #20]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800686a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006870:	2b00      	cmp	r3, #0
 8006872:	d013      	beq.n	800689c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006878:	4a21      	ldr	r2, [pc, #132]	; (8006900 <HAL_UART_IRQHandler+0x1fc>)
 800687a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006880:	4618      	mov	r0, r3
 8006882:	f7fb fc35 	bl	80020f0 <HAL_DMA_Abort_IT>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d016      	beq.n	80068ba <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006896:	4610      	mov	r0, r2
 8006898:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800689a:	e00e      	b.n	80068ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f845 	bl	800692c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a2:	e00a      	b.n	80068ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f841 	bl	800692c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068aa:	e006      	b.n	80068ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f83d 	bl	800692c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80068b8:	e01e      	b.n	80068f8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ba:	bf00      	nop
    return;
 80068bc:	e01c      	b.n	80068f8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d008      	beq.n	80068da <HAL_UART_IRQHandler+0x1d6>
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f866 	bl	80069a4 <UART_Transmit_IT>
    return;
 80068d8:	e00f      	b.n	80068fa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00a      	beq.n	80068fa <HAL_UART_IRQHandler+0x1f6>
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d005      	beq.n	80068fa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f8ae 	bl	8006a50 <UART_EndTransmit_IT>
    return;
 80068f4:	bf00      	nop
 80068f6:	e000      	b.n	80068fa <HAL_UART_IRQHandler+0x1f6>
    return;
 80068f8:	bf00      	nop
  }
}
 80068fa:	3720      	adds	r7, #32
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	0800697d 	.word	0x0800697d

08006904 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006956:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695a      	ldr	r2, [r3, #20]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0201 	bic.w	r2, r2, #1
 8006966:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2220      	movs	r2, #32
 800696c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f7ff ffc8 	bl	800692c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800699c:	bf00      	nop
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b21      	cmp	r3, #33	; 0x21
 80069b6:	d144      	bne.n	8006a42 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c0:	d11a      	bne.n	80069f8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069d6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d105      	bne.n	80069ec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	1c9a      	adds	r2, r3, #2
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	621a      	str	r2, [r3, #32]
 80069ea:	e00e      	b.n	8006a0a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	621a      	str	r2, [r3, #32]
 80069f6:	e008      	b.n	8006a0a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	1c59      	adds	r1, r3, #1
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6211      	str	r1, [r2, #32]
 8006a02:	781a      	ldrb	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	4619      	mov	r1, r3
 8006a18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10f      	bne.n	8006a3e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68da      	ldr	r2, [r3, #12]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e000      	b.n	8006a44 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006a42:	2302      	movs	r3, #2
  }
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff ff47 	bl	8006904 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b22      	cmp	r3, #34	; 0x22
 8006a92:	d171      	bne.n	8006b78 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9c:	d123      	bne.n	8006ae6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10e      	bne.n	8006aca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac2:	1c9a      	adds	r2, r3, #2
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ac8:	e029      	b.n	8006b1e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ae4:	e01b      	b.n	8006b1e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10a      	bne.n	8006b04 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6858      	ldr	r0, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af8:	1c59      	adds	r1, r3, #1
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6291      	str	r1, [r2, #40]	; 0x28
 8006afe:	b2c2      	uxtb	r2, r0
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	e00c      	b.n	8006b1e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	1c58      	adds	r0, r3, #1
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	6288      	str	r0, [r1, #40]	; 0x28
 8006b16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	3b01      	subs	r3, #1
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d120      	bne.n	8006b74 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0220 	bic.w	r2, r2, #32
 8006b40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695a      	ldr	r2, [r3, #20]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0201 	bic.w	r2, r2, #1
 8006b60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff fed4 	bl	8006918 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	e002      	b.n	8006b7a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	e000      	b.n	8006b7a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006b78:	2302      	movs	r3, #2
  }
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
	...

08006b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b88:	b085      	sub	sp, #20
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68da      	ldr	r2, [r3, #12]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006bc6:	f023 030c 	bic.w	r3, r3, #12
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	6812      	ldr	r2, [r2, #0]
 8006bce:	68f9      	ldr	r1, [r7, #12]
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf2:	f040 818b 	bne.w	8006f0c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4ac1      	ldr	r2, [pc, #772]	; (8006f00 <UART_SetConfig+0x37c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d005      	beq.n	8006c0c <UART_SetConfig+0x88>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4abf      	ldr	r2, [pc, #764]	; (8006f04 <UART_SetConfig+0x380>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	f040 80bd 	bne.w	8006d86 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c0c:	f7fd fb0a 	bl	8004224 <HAL_RCC_GetPCLK2Freq>
 8006c10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	461d      	mov	r5, r3
 8006c16:	f04f 0600 	mov.w	r6, #0
 8006c1a:	46a8      	mov	r8, r5
 8006c1c:	46b1      	mov	r9, r6
 8006c1e:	eb18 0308 	adds.w	r3, r8, r8
 8006c22:	eb49 0409 	adc.w	r4, r9, r9
 8006c26:	4698      	mov	r8, r3
 8006c28:	46a1      	mov	r9, r4
 8006c2a:	eb18 0805 	adds.w	r8, r8, r5
 8006c2e:	eb49 0906 	adc.w	r9, r9, r6
 8006c32:	f04f 0100 	mov.w	r1, #0
 8006c36:	f04f 0200 	mov.w	r2, #0
 8006c3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c46:	4688      	mov	r8, r1
 8006c48:	4691      	mov	r9, r2
 8006c4a:	eb18 0005 	adds.w	r0, r8, r5
 8006c4e:	eb49 0106 	adc.w	r1, r9, r6
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	461d      	mov	r5, r3
 8006c58:	f04f 0600 	mov.w	r6, #0
 8006c5c:	196b      	adds	r3, r5, r5
 8006c5e:	eb46 0406 	adc.w	r4, r6, r6
 8006c62:	461a      	mov	r2, r3
 8006c64:	4623      	mov	r3, r4
 8006c66:	f7f9 fff9 	bl	8000c5c <__aeabi_uldivmod>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	461a      	mov	r2, r3
 8006c70:	4ba5      	ldr	r3, [pc, #660]	; (8006f08 <UART_SetConfig+0x384>)
 8006c72:	fba3 2302 	umull	r2, r3, r3, r2
 8006c76:	095b      	lsrs	r3, r3, #5
 8006c78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	461d      	mov	r5, r3
 8006c80:	f04f 0600 	mov.w	r6, #0
 8006c84:	46a9      	mov	r9, r5
 8006c86:	46b2      	mov	sl, r6
 8006c88:	eb19 0309 	adds.w	r3, r9, r9
 8006c8c:	eb4a 040a 	adc.w	r4, sl, sl
 8006c90:	4699      	mov	r9, r3
 8006c92:	46a2      	mov	sl, r4
 8006c94:	eb19 0905 	adds.w	r9, r9, r5
 8006c98:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c9c:	f04f 0100 	mov.w	r1, #0
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ca8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cb0:	4689      	mov	r9, r1
 8006cb2:	4692      	mov	sl, r2
 8006cb4:	eb19 0005 	adds.w	r0, r9, r5
 8006cb8:	eb4a 0106 	adc.w	r1, sl, r6
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	461d      	mov	r5, r3
 8006cc2:	f04f 0600 	mov.w	r6, #0
 8006cc6:	196b      	adds	r3, r5, r5
 8006cc8:	eb46 0406 	adc.w	r4, r6, r6
 8006ccc:	461a      	mov	r2, r3
 8006cce:	4623      	mov	r3, r4
 8006cd0:	f7f9 ffc4 	bl	8000c5c <__aeabi_uldivmod>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4b8b      	ldr	r3, [pc, #556]	; (8006f08 <UART_SetConfig+0x384>)
 8006cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ce0:	095b      	lsrs	r3, r3, #5
 8006ce2:	2164      	movs	r1, #100	; 0x64
 8006ce4:	fb01 f303 	mul.w	r3, r1, r3
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	3332      	adds	r3, #50	; 0x32
 8006cee:	4a86      	ldr	r2, [pc, #536]	; (8006f08 <UART_SetConfig+0x384>)
 8006cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf4:	095b      	lsrs	r3, r3, #5
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cfc:	4498      	add	r8, r3
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	461d      	mov	r5, r3
 8006d02:	f04f 0600 	mov.w	r6, #0
 8006d06:	46a9      	mov	r9, r5
 8006d08:	46b2      	mov	sl, r6
 8006d0a:	eb19 0309 	adds.w	r3, r9, r9
 8006d0e:	eb4a 040a 	adc.w	r4, sl, sl
 8006d12:	4699      	mov	r9, r3
 8006d14:	46a2      	mov	sl, r4
 8006d16:	eb19 0905 	adds.w	r9, r9, r5
 8006d1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d1e:	f04f 0100 	mov.w	r1, #0
 8006d22:	f04f 0200 	mov.w	r2, #0
 8006d26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d32:	4689      	mov	r9, r1
 8006d34:	4692      	mov	sl, r2
 8006d36:	eb19 0005 	adds.w	r0, r9, r5
 8006d3a:	eb4a 0106 	adc.w	r1, sl, r6
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	461d      	mov	r5, r3
 8006d44:	f04f 0600 	mov.w	r6, #0
 8006d48:	196b      	adds	r3, r5, r5
 8006d4a:	eb46 0406 	adc.w	r4, r6, r6
 8006d4e:	461a      	mov	r2, r3
 8006d50:	4623      	mov	r3, r4
 8006d52:	f7f9 ff83 	bl	8000c5c <__aeabi_uldivmod>
 8006d56:	4603      	mov	r3, r0
 8006d58:	460c      	mov	r4, r1
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	4b6a      	ldr	r3, [pc, #424]	; (8006f08 <UART_SetConfig+0x384>)
 8006d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	2164      	movs	r1, #100	; 0x64
 8006d66:	fb01 f303 	mul.w	r3, r1, r3
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	3332      	adds	r3, #50	; 0x32
 8006d70:	4a65      	ldr	r2, [pc, #404]	; (8006f08 <UART_SetConfig+0x384>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	f003 0207 	and.w	r2, r3, #7
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4442      	add	r2, r8
 8006d82:	609a      	str	r2, [r3, #8]
 8006d84:	e26f      	b.n	8007266 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d86:	f7fd fa39 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8006d8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	461d      	mov	r5, r3
 8006d90:	f04f 0600 	mov.w	r6, #0
 8006d94:	46a8      	mov	r8, r5
 8006d96:	46b1      	mov	r9, r6
 8006d98:	eb18 0308 	adds.w	r3, r8, r8
 8006d9c:	eb49 0409 	adc.w	r4, r9, r9
 8006da0:	4698      	mov	r8, r3
 8006da2:	46a1      	mov	r9, r4
 8006da4:	eb18 0805 	adds.w	r8, r8, r5
 8006da8:	eb49 0906 	adc.w	r9, r9, r6
 8006dac:	f04f 0100 	mov.w	r1, #0
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006db8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006dbc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006dc0:	4688      	mov	r8, r1
 8006dc2:	4691      	mov	r9, r2
 8006dc4:	eb18 0005 	adds.w	r0, r8, r5
 8006dc8:	eb49 0106 	adc.w	r1, r9, r6
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	461d      	mov	r5, r3
 8006dd2:	f04f 0600 	mov.w	r6, #0
 8006dd6:	196b      	adds	r3, r5, r5
 8006dd8:	eb46 0406 	adc.w	r4, r6, r6
 8006ddc:	461a      	mov	r2, r3
 8006dde:	4623      	mov	r3, r4
 8006de0:	f7f9 ff3c 	bl	8000c5c <__aeabi_uldivmod>
 8006de4:	4603      	mov	r3, r0
 8006de6:	460c      	mov	r4, r1
 8006de8:	461a      	mov	r2, r3
 8006dea:	4b47      	ldr	r3, [pc, #284]	; (8006f08 <UART_SetConfig+0x384>)
 8006dec:	fba3 2302 	umull	r2, r3, r3, r2
 8006df0:	095b      	lsrs	r3, r3, #5
 8006df2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	461d      	mov	r5, r3
 8006dfa:	f04f 0600 	mov.w	r6, #0
 8006dfe:	46a9      	mov	r9, r5
 8006e00:	46b2      	mov	sl, r6
 8006e02:	eb19 0309 	adds.w	r3, r9, r9
 8006e06:	eb4a 040a 	adc.w	r4, sl, sl
 8006e0a:	4699      	mov	r9, r3
 8006e0c:	46a2      	mov	sl, r4
 8006e0e:	eb19 0905 	adds.w	r9, r9, r5
 8006e12:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e16:	f04f 0100 	mov.w	r1, #0
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e2a:	4689      	mov	r9, r1
 8006e2c:	4692      	mov	sl, r2
 8006e2e:	eb19 0005 	adds.w	r0, r9, r5
 8006e32:	eb4a 0106 	adc.w	r1, sl, r6
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	461d      	mov	r5, r3
 8006e3c:	f04f 0600 	mov.w	r6, #0
 8006e40:	196b      	adds	r3, r5, r5
 8006e42:	eb46 0406 	adc.w	r4, r6, r6
 8006e46:	461a      	mov	r2, r3
 8006e48:	4623      	mov	r3, r4
 8006e4a:	f7f9 ff07 	bl	8000c5c <__aeabi_uldivmod>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	460c      	mov	r4, r1
 8006e52:	461a      	mov	r2, r3
 8006e54:	4b2c      	ldr	r3, [pc, #176]	; (8006f08 <UART_SetConfig+0x384>)
 8006e56:	fba3 1302 	umull	r1, r3, r3, r2
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	2164      	movs	r1, #100	; 0x64
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	3332      	adds	r3, #50	; 0x32
 8006e68:	4a27      	ldr	r2, [pc, #156]	; (8006f08 <UART_SetConfig+0x384>)
 8006e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e76:	4498      	add	r8, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	461d      	mov	r5, r3
 8006e7c:	f04f 0600 	mov.w	r6, #0
 8006e80:	46a9      	mov	r9, r5
 8006e82:	46b2      	mov	sl, r6
 8006e84:	eb19 0309 	adds.w	r3, r9, r9
 8006e88:	eb4a 040a 	adc.w	r4, sl, sl
 8006e8c:	4699      	mov	r9, r3
 8006e8e:	46a2      	mov	sl, r4
 8006e90:	eb19 0905 	adds.w	r9, r9, r5
 8006e94:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e98:	f04f 0100 	mov.w	r1, #0
 8006e9c:	f04f 0200 	mov.w	r2, #0
 8006ea0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ea4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ea8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006eac:	4689      	mov	r9, r1
 8006eae:	4692      	mov	sl, r2
 8006eb0:	eb19 0005 	adds.w	r0, r9, r5
 8006eb4:	eb4a 0106 	adc.w	r1, sl, r6
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	461d      	mov	r5, r3
 8006ebe:	f04f 0600 	mov.w	r6, #0
 8006ec2:	196b      	adds	r3, r5, r5
 8006ec4:	eb46 0406 	adc.w	r4, r6, r6
 8006ec8:	461a      	mov	r2, r3
 8006eca:	4623      	mov	r3, r4
 8006ecc:	f7f9 fec6 	bl	8000c5c <__aeabi_uldivmod>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4b0c      	ldr	r3, [pc, #48]	; (8006f08 <UART_SetConfig+0x384>)
 8006ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8006edc:	095b      	lsrs	r3, r3, #5
 8006ede:	2164      	movs	r1, #100	; 0x64
 8006ee0:	fb01 f303 	mul.w	r3, r1, r3
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	3332      	adds	r3, #50	; 0x32
 8006eea:	4a07      	ldr	r2, [pc, #28]	; (8006f08 <UART_SetConfig+0x384>)
 8006eec:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef0:	095b      	lsrs	r3, r3, #5
 8006ef2:	f003 0207 	and.w	r2, r3, #7
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4442      	add	r2, r8
 8006efc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006efe:	e1b2      	b.n	8007266 <UART_SetConfig+0x6e2>
 8006f00:	40011000 	.word	0x40011000
 8006f04:	40011400 	.word	0x40011400
 8006f08:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4ad7      	ldr	r2, [pc, #860]	; (8007270 <UART_SetConfig+0x6ec>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d005      	beq.n	8006f22 <UART_SetConfig+0x39e>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4ad6      	ldr	r2, [pc, #856]	; (8007274 <UART_SetConfig+0x6f0>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	f040 80d1 	bne.w	80070c4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f22:	f7fd f97f 	bl	8004224 <HAL_RCC_GetPCLK2Freq>
 8006f26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	469a      	mov	sl, r3
 8006f2c:	f04f 0b00 	mov.w	fp, #0
 8006f30:	46d0      	mov	r8, sl
 8006f32:	46d9      	mov	r9, fp
 8006f34:	eb18 0308 	adds.w	r3, r8, r8
 8006f38:	eb49 0409 	adc.w	r4, r9, r9
 8006f3c:	4698      	mov	r8, r3
 8006f3e:	46a1      	mov	r9, r4
 8006f40:	eb18 080a 	adds.w	r8, r8, sl
 8006f44:	eb49 090b 	adc.w	r9, r9, fp
 8006f48:	f04f 0100 	mov.w	r1, #0
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006f54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006f58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006f5c:	4688      	mov	r8, r1
 8006f5e:	4691      	mov	r9, r2
 8006f60:	eb1a 0508 	adds.w	r5, sl, r8
 8006f64:	eb4b 0609 	adc.w	r6, fp, r9
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	f04f 0200 	mov.w	r2, #0
 8006f72:	f04f 0300 	mov.w	r3, #0
 8006f76:	f04f 0400 	mov.w	r4, #0
 8006f7a:	0094      	lsls	r4, r2, #2
 8006f7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f80:	008b      	lsls	r3, r1, #2
 8006f82:	461a      	mov	r2, r3
 8006f84:	4623      	mov	r3, r4
 8006f86:	4628      	mov	r0, r5
 8006f88:	4631      	mov	r1, r6
 8006f8a:	f7f9 fe67 	bl	8000c5c <__aeabi_uldivmod>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	460c      	mov	r4, r1
 8006f92:	461a      	mov	r2, r3
 8006f94:	4bb8      	ldr	r3, [pc, #736]	; (8007278 <UART_SetConfig+0x6f4>)
 8006f96:	fba3 2302 	umull	r2, r3, r3, r2
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	469b      	mov	fp, r3
 8006fa4:	f04f 0c00 	mov.w	ip, #0
 8006fa8:	46d9      	mov	r9, fp
 8006faa:	46e2      	mov	sl, ip
 8006fac:	eb19 0309 	adds.w	r3, r9, r9
 8006fb0:	eb4a 040a 	adc.w	r4, sl, sl
 8006fb4:	4699      	mov	r9, r3
 8006fb6:	46a2      	mov	sl, r4
 8006fb8:	eb19 090b 	adds.w	r9, r9, fp
 8006fbc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006fc0:	f04f 0100 	mov.w	r1, #0
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fcc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fd4:	4689      	mov	r9, r1
 8006fd6:	4692      	mov	sl, r2
 8006fd8:	eb1b 0509 	adds.w	r5, fp, r9
 8006fdc:	eb4c 060a 	adc.w	r6, ip, sl
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	f04f 0200 	mov.w	r2, #0
 8006fea:	f04f 0300 	mov.w	r3, #0
 8006fee:	f04f 0400 	mov.w	r4, #0
 8006ff2:	0094      	lsls	r4, r2, #2
 8006ff4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ff8:	008b      	lsls	r3, r1, #2
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	4623      	mov	r3, r4
 8006ffe:	4628      	mov	r0, r5
 8007000:	4631      	mov	r1, r6
 8007002:	f7f9 fe2b 	bl	8000c5c <__aeabi_uldivmod>
 8007006:	4603      	mov	r3, r0
 8007008:	460c      	mov	r4, r1
 800700a:	461a      	mov	r2, r3
 800700c:	4b9a      	ldr	r3, [pc, #616]	; (8007278 <UART_SetConfig+0x6f4>)
 800700e:	fba3 1302 	umull	r1, r3, r3, r2
 8007012:	095b      	lsrs	r3, r3, #5
 8007014:	2164      	movs	r1, #100	; 0x64
 8007016:	fb01 f303 	mul.w	r3, r1, r3
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	011b      	lsls	r3, r3, #4
 800701e:	3332      	adds	r3, #50	; 0x32
 8007020:	4a95      	ldr	r2, [pc, #596]	; (8007278 <UART_SetConfig+0x6f4>)
 8007022:	fba2 2303 	umull	r2, r3, r2, r3
 8007026:	095b      	lsrs	r3, r3, #5
 8007028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800702c:	4498      	add	r8, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	469b      	mov	fp, r3
 8007032:	f04f 0c00 	mov.w	ip, #0
 8007036:	46d9      	mov	r9, fp
 8007038:	46e2      	mov	sl, ip
 800703a:	eb19 0309 	adds.w	r3, r9, r9
 800703e:	eb4a 040a 	adc.w	r4, sl, sl
 8007042:	4699      	mov	r9, r3
 8007044:	46a2      	mov	sl, r4
 8007046:	eb19 090b 	adds.w	r9, r9, fp
 800704a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800704e:	f04f 0100 	mov.w	r1, #0
 8007052:	f04f 0200 	mov.w	r2, #0
 8007056:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800705a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800705e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007062:	4689      	mov	r9, r1
 8007064:	4692      	mov	sl, r2
 8007066:	eb1b 0509 	adds.w	r5, fp, r9
 800706a:	eb4c 060a 	adc.w	r6, ip, sl
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	4619      	mov	r1, r3
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	f04f 0300 	mov.w	r3, #0
 800707c:	f04f 0400 	mov.w	r4, #0
 8007080:	0094      	lsls	r4, r2, #2
 8007082:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007086:	008b      	lsls	r3, r1, #2
 8007088:	461a      	mov	r2, r3
 800708a:	4623      	mov	r3, r4
 800708c:	4628      	mov	r0, r5
 800708e:	4631      	mov	r1, r6
 8007090:	f7f9 fde4 	bl	8000c5c <__aeabi_uldivmod>
 8007094:	4603      	mov	r3, r0
 8007096:	460c      	mov	r4, r1
 8007098:	461a      	mov	r2, r3
 800709a:	4b77      	ldr	r3, [pc, #476]	; (8007278 <UART_SetConfig+0x6f4>)
 800709c:	fba3 1302 	umull	r1, r3, r3, r2
 80070a0:	095b      	lsrs	r3, r3, #5
 80070a2:	2164      	movs	r1, #100	; 0x64
 80070a4:	fb01 f303 	mul.w	r3, r1, r3
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	3332      	adds	r3, #50	; 0x32
 80070ae:	4a72      	ldr	r2, [pc, #456]	; (8007278 <UART_SetConfig+0x6f4>)
 80070b0:	fba2 2303 	umull	r2, r3, r2, r3
 80070b4:	095b      	lsrs	r3, r3, #5
 80070b6:	f003 020f 	and.w	r2, r3, #15
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4442      	add	r2, r8
 80070c0:	609a      	str	r2, [r3, #8]
 80070c2:	e0d0      	b.n	8007266 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80070c4:	f7fd f89a 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 80070c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	469a      	mov	sl, r3
 80070ce:	f04f 0b00 	mov.w	fp, #0
 80070d2:	46d0      	mov	r8, sl
 80070d4:	46d9      	mov	r9, fp
 80070d6:	eb18 0308 	adds.w	r3, r8, r8
 80070da:	eb49 0409 	adc.w	r4, r9, r9
 80070de:	4698      	mov	r8, r3
 80070e0:	46a1      	mov	r9, r4
 80070e2:	eb18 080a 	adds.w	r8, r8, sl
 80070e6:	eb49 090b 	adc.w	r9, r9, fp
 80070ea:	f04f 0100 	mov.w	r1, #0
 80070ee:	f04f 0200 	mov.w	r2, #0
 80070f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80070f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80070fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80070fe:	4688      	mov	r8, r1
 8007100:	4691      	mov	r9, r2
 8007102:	eb1a 0508 	adds.w	r5, sl, r8
 8007106:	eb4b 0609 	adc.w	r6, fp, r9
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	4619      	mov	r1, r3
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	f04f 0400 	mov.w	r4, #0
 800711c:	0094      	lsls	r4, r2, #2
 800711e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007122:	008b      	lsls	r3, r1, #2
 8007124:	461a      	mov	r2, r3
 8007126:	4623      	mov	r3, r4
 8007128:	4628      	mov	r0, r5
 800712a:	4631      	mov	r1, r6
 800712c:	f7f9 fd96 	bl	8000c5c <__aeabi_uldivmod>
 8007130:	4603      	mov	r3, r0
 8007132:	460c      	mov	r4, r1
 8007134:	461a      	mov	r2, r3
 8007136:	4b50      	ldr	r3, [pc, #320]	; (8007278 <UART_SetConfig+0x6f4>)
 8007138:	fba3 2302 	umull	r2, r3, r3, r2
 800713c:	095b      	lsrs	r3, r3, #5
 800713e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	469b      	mov	fp, r3
 8007146:	f04f 0c00 	mov.w	ip, #0
 800714a:	46d9      	mov	r9, fp
 800714c:	46e2      	mov	sl, ip
 800714e:	eb19 0309 	adds.w	r3, r9, r9
 8007152:	eb4a 040a 	adc.w	r4, sl, sl
 8007156:	4699      	mov	r9, r3
 8007158:	46a2      	mov	sl, r4
 800715a:	eb19 090b 	adds.w	r9, r9, fp
 800715e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007162:	f04f 0100 	mov.w	r1, #0
 8007166:	f04f 0200 	mov.w	r2, #0
 800716a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800716e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007172:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007176:	4689      	mov	r9, r1
 8007178:	4692      	mov	sl, r2
 800717a:	eb1b 0509 	adds.w	r5, fp, r9
 800717e:	eb4c 060a 	adc.w	r6, ip, sl
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	4619      	mov	r1, r3
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	f04f 0400 	mov.w	r4, #0
 8007194:	0094      	lsls	r4, r2, #2
 8007196:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800719a:	008b      	lsls	r3, r1, #2
 800719c:	461a      	mov	r2, r3
 800719e:	4623      	mov	r3, r4
 80071a0:	4628      	mov	r0, r5
 80071a2:	4631      	mov	r1, r6
 80071a4:	f7f9 fd5a 	bl	8000c5c <__aeabi_uldivmod>
 80071a8:	4603      	mov	r3, r0
 80071aa:	460c      	mov	r4, r1
 80071ac:	461a      	mov	r2, r3
 80071ae:	4b32      	ldr	r3, [pc, #200]	; (8007278 <UART_SetConfig+0x6f4>)
 80071b0:	fba3 1302 	umull	r1, r3, r3, r2
 80071b4:	095b      	lsrs	r3, r3, #5
 80071b6:	2164      	movs	r1, #100	; 0x64
 80071b8:	fb01 f303 	mul.w	r3, r1, r3
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	3332      	adds	r3, #50	; 0x32
 80071c2:	4a2d      	ldr	r2, [pc, #180]	; (8007278 <UART_SetConfig+0x6f4>)
 80071c4:	fba2 2303 	umull	r2, r3, r2, r3
 80071c8:	095b      	lsrs	r3, r3, #5
 80071ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071ce:	4498      	add	r8, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	469b      	mov	fp, r3
 80071d4:	f04f 0c00 	mov.w	ip, #0
 80071d8:	46d9      	mov	r9, fp
 80071da:	46e2      	mov	sl, ip
 80071dc:	eb19 0309 	adds.w	r3, r9, r9
 80071e0:	eb4a 040a 	adc.w	r4, sl, sl
 80071e4:	4699      	mov	r9, r3
 80071e6:	46a2      	mov	sl, r4
 80071e8:	eb19 090b 	adds.w	r9, r9, fp
 80071ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80071f0:	f04f 0100 	mov.w	r1, #0
 80071f4:	f04f 0200 	mov.w	r2, #0
 80071f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007200:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007204:	4689      	mov	r9, r1
 8007206:	4692      	mov	sl, r2
 8007208:	eb1b 0509 	adds.w	r5, fp, r9
 800720c:	eb4c 060a 	adc.w	r6, ip, sl
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	4619      	mov	r1, r3
 8007216:	f04f 0200 	mov.w	r2, #0
 800721a:	f04f 0300 	mov.w	r3, #0
 800721e:	f04f 0400 	mov.w	r4, #0
 8007222:	0094      	lsls	r4, r2, #2
 8007224:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007228:	008b      	lsls	r3, r1, #2
 800722a:	461a      	mov	r2, r3
 800722c:	4623      	mov	r3, r4
 800722e:	4628      	mov	r0, r5
 8007230:	4631      	mov	r1, r6
 8007232:	f7f9 fd13 	bl	8000c5c <__aeabi_uldivmod>
 8007236:	4603      	mov	r3, r0
 8007238:	460c      	mov	r4, r1
 800723a:	461a      	mov	r2, r3
 800723c:	4b0e      	ldr	r3, [pc, #56]	; (8007278 <UART_SetConfig+0x6f4>)
 800723e:	fba3 1302 	umull	r1, r3, r3, r2
 8007242:	095b      	lsrs	r3, r3, #5
 8007244:	2164      	movs	r1, #100	; 0x64
 8007246:	fb01 f303 	mul.w	r3, r1, r3
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	3332      	adds	r3, #50	; 0x32
 8007250:	4a09      	ldr	r2, [pc, #36]	; (8007278 <UART_SetConfig+0x6f4>)
 8007252:	fba2 2303 	umull	r2, r3, r2, r3
 8007256:	095b      	lsrs	r3, r3, #5
 8007258:	f003 020f 	and.w	r2, r3, #15
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4442      	add	r2, r8
 8007262:	609a      	str	r2, [r3, #8]
}
 8007264:	e7ff      	b.n	8007266 <UART_SetConfig+0x6e2>
 8007266:	bf00      	nop
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007270:	40011000 	.word	0x40011000
 8007274:	40011400 	.word	0x40011400
 8007278:	51eb851f 	.word	0x51eb851f
 800727c:	00000000 	.word	0x00000000

08007280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007280:	b5b0      	push	{r4, r5, r7, lr}
 8007282:	f5ad 7d3a 	sub.w	sp, sp, #744	; 0x2e8
 8007286:	af06      	add	r7, sp, #24
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007288:	f7f9 fe68 	bl	8000f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800728c:	f000 fc6a 	bl	8007b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007290:	f001 f920 	bl	80084d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8007294:	f001 f8fe 	bl	8008494 <MX_DMA_Init>
  MX_TIM9_Init();
 8007298:	f000 ffba 	bl	8008210 <MX_TIM9_Init>
  MX_SPI2_Init();
 800729c:	f000 fdfe 	bl	8007e9c <MX_SPI2_Init>
  MX_ADC1_Init();
 80072a0:	f000 fcc8 	bl	8007c34 <MX_ADC1_Init>
  MX_ADC2_Init();
 80072a4:	f000 fd18 	bl	8007cd8 <MX_ADC2_Init>
  MX_CAN1_Init();
 80072a8:	f000 fd68 	bl	8007d7c <MX_CAN1_Init>
  MX_I2C1_Init();
 80072ac:	f000 fd9a 	bl	8007de4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80072b0:	f000 fdc6 	bl	8007e40 <MX_I2C2_Init>
  MX_TIM1_Init();
 80072b4:	f000 fe2a 	bl	8007f0c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80072b8:	f001 f8c2 	bl	8008440 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 80072bc:	f000 ff50 	bl	8008160 <MX_TIM8_Init>
  MX_TIM13_Init();
 80072c0:	f001 f878 	bl	80083b4 <MX_TIM13_Init>
  MX_TIM12_Init();
 80072c4:	f001 f816 	bl	80082f4 <MX_TIM12_Init>
  MX_TIM2_Init();
 80072c8:	f000 fed8 	bl	800807c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  calc_lookup(lookup);
 80072cc:	4862      	ldr	r0, [pc, #392]	; (8007458 <main+0x1d8>)
 80072ce:	f001 fc3f 	bl	8008b50 <calc_lookup>

	uint8_t buf[300];
	uint8_t plot[300];

	char ch='q';
 80072d2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80072d6:	2271      	movs	r2, #113	; 0x71
 80072d8:	701a      	strb	r2, [r3, #0]
	int16_t accel16;
	uint8_t accel8l;
	uint8_t accel8h;

  // --- SET STATUS LEDS
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80072da:	2100      	movs	r1, #0
 80072dc:	485f      	ldr	r0, [pc, #380]	; (800745c <main+0x1dc>)
 80072de:	f7fd fefd 	bl	80050dc <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2);
 80072e2:	2104      	movs	r1, #4
 80072e4:	485d      	ldr	r0, [pc, #372]	; (800745c <main+0x1dc>)
 80072e6:	f7fd fe85 	bl	8004ff4 <HAL_TIM_OC_Start>

  HAL_TIM_OC_Start(&htim12, TIM_CHANNEL_1);
 80072ea:	2100      	movs	r1, #0
 80072ec:	485c      	ldr	r0, [pc, #368]	; (8007460 <main+0x1e0>)
 80072ee:	f7fd fe81 	bl	8004ff4 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 80072f2:	2100      	movs	r1, #0
 80072f4:	485b      	ldr	r0, [pc, #364]	; (8007464 <main+0x1e4>)
 80072f6:	f7fd fe7d 	bl	8004ff4 <HAL_TIM_OC_Start>

  // --- ENABLE DRV
  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 80072fa:	2201      	movs	r2, #1
 80072fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007300:	4859      	ldr	r0, [pc, #356]	; (8007468 <main+0x1e8>)
 8007302:	f7fb fb6d 	bl	80029e0 <HAL_GPIO_WritePin>


  SCB->CPACR |= 0xf00000;
 8007306:	4b59      	ldr	r3, [pc, #356]	; (800746c <main+0x1ec>)
 8007308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800730c:	4a57      	ldr	r2, [pc, #348]	; (800746c <main+0x1ec>)
 800730e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007312:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  int i=0;
 8007316:	2300      	movs	r3, #0
 8007318:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
	uint32_t i_fast = 0;
 800731c:	2300      	movs	r3, #0
 800731e:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
	uint32_t i_slow = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
	uint32_t fast2slow = 2000;
 8007328:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800732c:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4

	int blink_duration = 100;
 8007330:	2364      	movs	r3, #100	; 0x64
 8007332:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
  //  HAL_Delay(2);


	// --- MOTOR DRIVER ----------------------------------------------------
	//EN_GATE
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8007336:	2100      	movs	r1, #0
 8007338:	484d      	ldr	r0, [pc, #308]	; (8007470 <main+0x1f0>)
 800733a:	f7fd fecf 	bl	80050dc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 800733e:	2100      	movs	r1, #0
 8007340:	484b      	ldr	r0, [pc, #300]	; (8007470 <main+0x1f0>)
 8007342:	f7ff f80a 	bl	800635a <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8007346:	2104      	movs	r1, #4
 8007348:	4849      	ldr	r0, [pc, #292]	; (8007470 <main+0x1f0>)
 800734a:	f7fd fec7 	bl	80050dc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 800734e:	2104      	movs	r1, #4
 8007350:	4847      	ldr	r0, [pc, #284]	; (8007470 <main+0x1f0>)
 8007352:	f7ff f802 	bl	800635a <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8007356:	2108      	movs	r1, #8
 8007358:	4845      	ldr	r0, [pc, #276]	; (8007470 <main+0x1f0>)
 800735a:	f7fd febf 	bl	80050dc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 800735e:	2108      	movs	r1, #8
 8007360:	4843      	ldr	r0, [pc, #268]	; (8007470 <main+0x1f0>)
 8007362:	f7fe fffa 	bl	800635a <HAL_TIMEx_PWMN_Start>

	playSound( 3, 100, 20);
 8007366:	2214      	movs	r2, #20
 8007368:	2164      	movs	r1, #100	; 0x64
 800736a:	2003      	movs	r0, #3
 800736c:	f001 f978 	bl	8008660 <playSound>

	HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
 8007370:	2201      	movs	r2, #1
 8007372:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007376:	483c      	ldr	r0, [pc, #240]	; (8007468 <main+0x1e8>)
 8007378:	f7fb fb32 	bl	80029e0 <HAL_GPIO_WritePin>

	// --- ADC --------------------------------------
	ADC_ChannelConfTypeDef adcChannel;

	//adcChannel.Channel = ADC_CHANNEL_8;
	adcChannel.Rank = 1;
 800737c:	f107 031c 	add.w	r3, r7, #28
 8007380:	2201      	movs	r2, #1
 8007382:	605a      	str	r2, [r3, #4]
	adcChannel.SamplingTime = ADC_SAMPLETIME_15CYCLES;//5mus //ADC_SAMPLETIME_480CYCLES;// 20mus
 8007384:	f107 031c 	add.w	r3, r7, #28
 8007388:	2201      	movs	r2, #1
 800738a:	609a      	str	r2, [r3, #8]
	adcChannel.Offset = 0;
 800738c:	f107 031c 	add.w	r3, r7, #28
 8007390:	2200      	movs	r2, #0
 8007392:	60da      	str	r2, [r3, #12]
	// --- I2C2 IMU ------------------------------------------------
	//see: https://www.youtube.com/watch?v=isOekyygpR8
	//b1101000
	char accel_char[20];

	buf[0] = 0x6B; //power register
 8007394:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8007398:	226b      	movs	r2, #107	; 0x6b
 800739a:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x00; //switch on
 800739c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80073a0:	2200      	movs	r2, #0
 80073a2:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 2, HAL_MAX_DELAY);
 80073a4:	23d0      	movs	r3, #208	; 0xd0
 80073a6:	b299      	uxth	r1, r3
 80073a8:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80073ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	2302      	movs	r3, #2
 80073b4:	482f      	ldr	r0, [pc, #188]	; (8007474 <main+0x1f4>)
 80073b6:	f7fb fc97 	bl	8002ce8 <HAL_I2C_Master_Transmit>
 80073ba:	4603      	mov	r3, r0
 80073bc:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
	if (ret != HAL_OK){
 80073c0:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d008      	beq.n	80073da <main+0x15a>
		strcpy((char*)buf, "Error IMU T\r\n");
 80073c8:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80073cc:	4a2a      	ldr	r2, [pc, #168]	; (8007478 <main+0x1f8>)
 80073ce:	461c      	mov	r4, r3
 80073d0:	4613      	mov	r3, r2
 80073d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073d4:	c407      	stmia	r4!, {r0, r1, r2}
 80073d6:	8023      	strh	r3, [r4, #0]
 80073d8:	e003      	b.n	80073e2 <main+0x162>
	} else {
		buf[0] = 0x00;
 80073da:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80073de:	2200      	movs	r2, #0
 80073e0:	701a      	strb	r2, [r3, #0]
	}

	buf[0] = 0x3B;
 80073e2:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80073e6:	223b      	movs	r2, #59	; 0x3b
 80073e8:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 80073ea:	23d0      	movs	r3, #208	; 0xd0
 80073ec:	b299      	uxth	r1, r3
 80073ee:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80073f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	2301      	movs	r3, #1
 80073fa:	481e      	ldr	r0, [pc, #120]	; (8007474 <main+0x1f4>)
 80073fc:	f7fb fc74 	bl	8002ce8 <HAL_I2C_Master_Transmit>
 8007400:	4603      	mov	r3, r0
 8007402:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
	if (ret != HAL_OK){
 8007406:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 800740a:	2b00      	cmp	r3, #0
 800740c:	d008      	beq.n	8007420 <main+0x1a0>
		strcpy((char*)buf, "Error IMU T\r\n");
 800740e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8007412:	4a19      	ldr	r2, [pc, #100]	; (8007478 <main+0x1f8>)
 8007414:	461c      	mov	r4, r3
 8007416:	4613      	mov	r3, r2
 8007418:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800741a:	c407      	stmia	r4!, {r0, r1, r2}
 800741c:	8023      	strh	r3, [r4, #0]
 800741e:	e03c      	b.n	800749a <main+0x21a>
	} else {
		ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8007420:	23d0      	movs	r3, #208	; 0xd0
 8007422:	b299      	uxth	r1, r3
 8007424:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8007428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	2301      	movs	r3, #1
 8007430:	4810      	ldr	r0, [pc, #64]	; (8007474 <main+0x1f4>)
 8007432:	f7fb fd57 	bl	8002ee4 <HAL_I2C_Master_Receive>
 8007436:	4603      	mov	r3, r0
 8007438:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
		if (ret != HAL_OK){
 800743c:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 8007440:	2b00      	cmp	r3, #0
 8007442:	d01d      	beq.n	8007480 <main+0x200>
			strcpy((char*)buf, "Error IMU R\r\n");
 8007444:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8007448:	4a0c      	ldr	r2, [pc, #48]	; (800747c <main+0x1fc>)
 800744a:	461c      	mov	r4, r3
 800744c:	4613      	mov	r3, r2
 800744e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007450:	c407      	stmia	r4!, {r0, r1, r2}
 8007452:	8023      	strh	r3, [r4, #0]
 8007454:	e021      	b.n	800749a <main+0x21a>
 8007456:	bf00      	nop
 8007458:	20000138 	.word	0x20000138
 800745c:	20000720 	.word	0x20000720
 8007460:	200007c8 	.word	0x200007c8
 8007464:	20000760 	.word	0x20000760
 8007468:	40021000 	.word	0x40021000
 800746c:	e000ed00 	.word	0xe000ed00
 8007470:	200006e0 	.word	0x200006e0
 8007474:	2000059c 	.word	0x2000059c
 8007478:	0800af80 	.word	0x0800af80
 800747c:	0800af90 	.word	0x0800af90
		} else {
			accel8l = (int8_t)buf[0];
 8007480:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	f887 32ae 	strb.w	r3, [r7, #686]	; 0x2ae
			sprintf((char*)accel_char, "%u m\r\n", (int)accel8l);
 800748a:	f897 22ae 	ldrb.w	r2, [r7, #686]	; 0x2ae
 800748e:	f107 0308 	add.w	r3, r7, #8
 8007492:	49cc      	ldr	r1, [pc, #816]	; (80077c4 <main+0x544>)
 8007494:	4618      	mov	r0, r3
 8007496:	f002 f951 	bl	800973c <siprintf>
  //					}
  //
  //				}

	// --- TIMERS ----------------------------------------------------
	TIM9->CCR1 = blink_duration;
 800749a:	4acb      	ldr	r2, [pc, #812]	; (80077c8 <main+0x548>)
 800749c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80074a0:	6353      	str	r3, [r2, #52]	; 0x34
	TIM9->CCR2 = blink_duration;
 80074a2:	4ac9      	ldr	r2, [pc, #804]	; (80077c8 <main+0x548>)
 80074a4:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80074a8:	6393      	str	r3, [r2, #56]	; 0x38

	// --- GPIO ----------------------------------------------------

	GPIOE->BSRR = GPIO_PIN_4; //switches LD2
 80074aa:	4bc8      	ldr	r3, [pc, #800]	; (80077cc <main+0x54c>)
 80074ac:	2210      	movs	r2, #16
 80074ae:	619a      	str	r2, [r3, #24]




	playSound( 2, 100, 40);
 80074b0:	2228      	movs	r2, #40	; 0x28
 80074b2:	2164      	movs	r1, #100	; 0x64
 80074b4:	2002      	movs	r0, #2
 80074b6:	f001 f8d3 	bl	8008660 <playSound>
	playSound( 1, 100, 80);
 80074ba:	2250      	movs	r2, #80	; 0x50
 80074bc:	2164      	movs	r1, #100	; 0x64
 80074be:	2001      	movs	r0, #1
 80074c0:	f001 f8ce 	bl	8008660 <playSound>
	HAL_Delay(100); // So the system stops vibrating
 80074c4:	2064      	movs	r0, #100	; 0x64
 80074c6:	f7f9 fdbb 	bl	8001040 <HAL_Delay>




	// --- ROTATION SENSOR INIT ----------------------------------------------------
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL );
 80074ca:	213c      	movs	r1, #60	; 0x3c
 80074cc:	48c0      	ldr	r0, [pc, #768]	; (80077d0 <main+0x550>)
 80074ce:	f7fd ff0a 	bl	80052e6 <HAL_TIM_Encoder_Start_IT>

	// --- ROTATION SENSOR SETTINGS ----------------------------------------------------

	//ROT0_nCS_GPIO_Port->BSRR = (uint32_t)ROT0_nCS_Pin << 16U;

	uint16_t address = 0x0000;
 80074d2:	1dbb      	adds	r3, r7, #6
 80074d4:	2200      	movs	r2, #0
 80074d6:	801a      	strh	r2, [r3, #0]
	uint16_t value = 0x0000;
 80074d8:	1d3b      	adds	r3, r7, #4
 80074da:	2200      	movs	r2, #0
 80074dc:	801a      	strh	r2, [r3, #0]

	// --- set ABI and enable PWM
	//TODO: Error handling
	address = AS_ADDR_SETTINGS1 | AS_WRITE ;
 80074de:	1dbb      	adds	r3, r7, #6
 80074e0:	2218      	movs	r2, #24
 80074e2:	801a      	strh	r2, [r3, #0]
	value = 0x0080 | AS_ODD;
 80074e4:	1d3b      	adds	r3, r7, #4
 80074e6:	f248 0280 	movw	r2, #32896	; 0x8080
 80074ea:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80074ec:	2200      	movs	r2, #0
 80074ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074f2:	48b8      	ldr	r0, [pc, #736]	; (80077d4 <main+0x554>)
 80074f4:	f7fb fa74 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);
 80074f8:	1db9      	adds	r1, r7, #6
 80074fa:	2301      	movs	r3, #1
 80074fc:	2201      	movs	r2, #1
 80074fe:	48b6      	ldr	r0, [pc, #728]	; (80077d8 <main+0x558>)
 8007500:	f7fc ff08 	bl	8004314 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8007504:	2201      	movs	r2, #1
 8007506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800750a:	48b2      	ldr	r0, [pc, #712]	; (80077d4 <main+0x554>)
 800750c:	f7fb fa68 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8007510:	2200      	movs	r2, #0
 8007512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007516:	48af      	ldr	r0, [pc, #700]	; (80077d4 <main+0x554>)
 8007518:	f7fb fa62 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&value, 1, 1);
 800751c:	1d39      	adds	r1, r7, #4
 800751e:	2301      	movs	r3, #1
 8007520:	2201      	movs	r2, #1
 8007522:	48ad      	ldr	r0, [pc, #692]	; (80077d8 <main+0x558>)
 8007524:	f7fc fef6 	bl	8004314 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8007528:	2201      	movs	r2, #1
 800752a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800752e:	48a9      	ldr	r0, [pc, #676]	; (80077d4 <main+0x554>)
 8007530:	f7fb fa56 	bl	80029e0 <HAL_GPIO_WritePin>

	// --- set steps 2000steps 500 pulses
	address = AS_ADDR_SETTINGS2 | AS_WRITE ;
 8007534:	1dbb      	adds	r3, r7, #6
 8007536:	f248 0219 	movw	r2, #32793	; 0x8019
 800753a:	801a      	strh	r2, [r3, #0]
	value = 0x0020 | AS_ODD;
 800753c:	1d3b      	adds	r3, r7, #4
 800753e:	f248 0220 	movw	r2, #32800	; 0x8020
 8007542:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8007544:	2200      	movs	r2, #0
 8007546:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800754a:	48a2      	ldr	r0, [pc, #648]	; (80077d4 <main+0x554>)
 800754c:	f7fb fa48 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);
 8007550:	1db9      	adds	r1, r7, #6
 8007552:	2301      	movs	r3, #1
 8007554:	2201      	movs	r2, #1
 8007556:	48a0      	ldr	r0, [pc, #640]	; (80077d8 <main+0x558>)
 8007558:	f7fc fedc 	bl	8004314 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 800755c:	2201      	movs	r2, #1
 800755e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007562:	489c      	ldr	r0, [pc, #624]	; (80077d4 <main+0x554>)
 8007564:	f7fb fa3c 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8007568:	2200      	movs	r2, #0
 800756a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800756e:	4899      	ldr	r0, [pc, #612]	; (80077d4 <main+0x554>)
 8007570:	f7fb fa36 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&value, 1, 1);
 8007574:	1d39      	adds	r1, r7, #4
 8007576:	2301      	movs	r3, #1
 8007578:	2201      	movs	r2, #1
 800757a:	4897      	ldr	r0, [pc, #604]	; (80077d8 <main+0x558>)
 800757c:	f7fc feca 	bl	8004314 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8007580:	2201      	movs	r2, #1
 8007582:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007586:	4893      	ldr	r0, [pc, #588]	; (80077d4 <main+0x554>)
 8007588:	f7fb fa2a 	bl	80029e0 <HAL_GPIO_WritePin>

	// --- read angle
	address = 0x3FFE | AS_READ ;
 800758c:	1dbb      	adds	r3, r7, #6
 800758e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007592:	801a      	strh	r2, [r3, #0]
	uint16_t angle = 0x0000;
 8007594:	1cbb      	adds	r3, r7, #2
 8007596:	2200      	movs	r2, #0
 8007598:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 800759a:	2200      	movs	r2, #0
 800759c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075a0:	488c      	ldr	r0, [pc, #560]	; (80077d4 <main+0x554>)
 80075a2:	f7fb fa1d 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);//this is the value
 80075a6:	1db9      	adds	r1, r7, #6
 80075a8:	2301      	movs	r3, #1
 80075aa:	2201      	movs	r2, #1
 80075ac:	488a      	ldr	r0, [pc, #552]	; (80077d8 <main+0x558>)
 80075ae:	f7fc feb1 	bl	8004314 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80075b2:	2201      	movs	r2, #1
 80075b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075b8:	4886      	ldr	r0, [pc, #536]	; (80077d4 <main+0x554>)
 80075ba:	f7fb fa11 	bl	80029e0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80075be:	2200      	movs	r2, #0
 80075c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075c4:	4883      	ldr	r0, [pc, #524]	; (80077d4 <main+0x554>)
 80075c6:	f7fb fa0b 	bl	80029e0 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, (uint16_t *)&angle, 1, 1);
 80075ca:	1cb9      	adds	r1, r7, #2
 80075cc:	2301      	movs	r3, #1
 80075ce:	2201      	movs	r2, #1
 80075d0:	4881      	ldr	r0, [pc, #516]	; (80077d8 <main+0x558>)
 80075d2:	f7fc ffd3 	bl	800457c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80075d6:	2201      	movs	r2, #1
 80075d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075dc:	487d      	ldr	r0, [pc, #500]	; (80077d4 <main+0x554>)
 80075de:	f7fb f9ff 	bl	80029e0 <HAL_GPIO_WritePin>


	// --- ROTATION SENSOR 0 POINT SETTING ----------------------------------------------------
	angle &= AS_DATA_MASK;
 80075e2:	1cbb      	adds	r3, r7, #2
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	1cbb      	adds	r3, r7, #2
 80075ee:	801a      	strh	r2, [r3, #0]
	EncVal = (uint16_t) ((float)angle /16384.0 * 2000.0);
 80075f0:	1cbb      	adds	r3, r7, #2
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	ee07 3a90 	vmov	s15, r3
 80075f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fc:	ee17 0a90 	vmov	r0, s15
 8007600:	f7f8 ffa2 	bl	8000548 <__aeabi_f2d>
 8007604:	f04f 0200 	mov.w	r2, #0
 8007608:	4b74      	ldr	r3, [pc, #464]	; (80077dc <main+0x55c>)
 800760a:	f7f9 f91f 	bl	800084c <__aeabi_ddiv>
 800760e:	4603      	mov	r3, r0
 8007610:	460c      	mov	r4, r1
 8007612:	4618      	mov	r0, r3
 8007614:	4621      	mov	r1, r4
 8007616:	f04f 0200 	mov.w	r2, #0
 800761a:	4b71      	ldr	r3, [pc, #452]	; (80077e0 <main+0x560>)
 800761c:	f7f8 ffec 	bl	80005f8 <__aeabi_dmul>
 8007620:	4603      	mov	r3, r0
 8007622:	460c      	mov	r4, r1
 8007624:	4618      	mov	r0, r3
 8007626:	4621      	mov	r1, r4
 8007628:	f7f9 faa8 	bl	8000b7c <__aeabi_d2uiz>
 800762c:	4603      	mov	r3, r0
 800762e:	b29b      	uxth	r3, r3
 8007630:	b21a      	sxth	r2, r3
 8007632:	4b6c      	ldr	r3, [pc, #432]	; (80077e4 <main+0x564>)
 8007634:	801a      	strh	r2, [r3, #0]
	last_EncVal = EncVal;
 8007636:	4b6b      	ldr	r3, [pc, #428]	; (80077e4 <main+0x564>)
 8007638:	f9b3 2000 	ldrsh.w	r2, [r3]
 800763c:	4b6a      	ldr	r3, [pc, #424]	; (80077e8 <main+0x568>)
 800763e:	801a      	strh	r2, [r3, #0]
	TIM8->CNT = EncVal;
 8007640:	4b68      	ldr	r3, [pc, #416]	; (80077e4 <main+0x564>)
 8007642:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007646:	4b69      	ldr	r3, [pc, #420]	; (80077ec <main+0x56c>)
 8007648:	625a      	str	r2, [r3, #36]	; 0x24
//	HAL_Delay(500);
//	EncVal = TIM8->CNT;//takes 200ns
//	TIM1->CCR1 = 0;
//	phase = (float) EncVal * 0.02199 ;

	HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMAUSARTTransferComplete);
 800764a:	4a69      	ldr	r2, [pc, #420]	; (80077f0 <main+0x570>)
 800764c:	2100      	movs	r1, #0
 800764e:	4869      	ldr	r0, [pc, #420]	; (80077f4 <main+0x574>)
 8007650:	f7fa fefa 	bl	8002448 <HAL_DMA_RegisterCallback>
		// -------------------------------------------------------------
  	//HAL_Delay(1);
  	//debug2_out_GPIO_Port->BSRR = debug2_out_Pin; //takes 60ns == 5 clock cycles
  	//debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin << 16U;

  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8007654:	4b5f      	ldr	r3, [pc, #380]	; (80077d4 <main+0x554>)
 8007656:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800765a:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 800765c:	4b5d      	ldr	r3, [pc, #372]	; (80077d4 <main+0x554>)
 800765e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007662:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8007664:	4b5b      	ldr	r3, [pc, #364]	; (80077d4 <main+0x554>)
 8007666:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800766a:	619a      	str	r2, [r3, #24]
		debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 800766c:	4b59      	ldr	r3, [pc, #356]	; (80077d4 <main+0x554>)
 800766e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007672:	619a      	str	r2, [r3, #24]


		// 3measurements take 25mus --- one just 5mus --- 7 take 50mus

		// --- ADC MEASUREMENTS
		uint32_t g_ADCValue1_4=5;
 8007674:	2305      	movs	r3, #5
 8007676:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
		uint32_t g_ADCValue1_5=5;
 800767a:	2305      	movs	r3, #5
 800767c:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc

		// --- VBUS
		adcChannel.Channel = ADC_CHANNEL_8;
 8007680:	f107 031c 	add.w	r3, r7, #28
 8007684:	2208      	movs	r2, #8
 8007686:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc2, &adcChannel);
 8007688:	f107 031c 	add.w	r3, r7, #28
 800768c:	4619      	mov	r1, r3
 800768e:	485a      	ldr	r0, [pc, #360]	; (80077f8 <main+0x578>)
 8007690:	f7f9 fff2 	bl	8001678 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc2);
 8007694:	4858      	ldr	r0, [pc, #352]	; (80077f8 <main+0x578>)
 8007696:	f7f9 fd39 	bl	800110c <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc2, 1) == HAL_OK)
 800769a:	2101      	movs	r1, #1
 800769c:	4856      	ldr	r0, [pc, #344]	; (80077f8 <main+0x578>)
 800769e:	f7f9 fdfb 	bl	8001298 <HAL_ADC_PollForConversion>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d109      	bne.n	80076bc <main+0x43c>
		{
				g_ADCValue8 = HAL_ADC_GetValue(&hadc2);
 80076a8:	4853      	ldr	r0, [pc, #332]	; (80077f8 <main+0x578>)
 80076aa:	f7f9 ffba 	bl	8001622 <HAL_ADC_GetValue>
 80076ae:	f8c7 02a8 	str.w	r0, [r7, #680]	; 0x2a8
				g_MeasurementNumber++;
 80076b2:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 80076b6:	3301      	adds	r3, #1
 80076b8:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
		}//takes several microseconds

	  // --- STRAIN
	  adcChannel.Channel = ADC_CHANNEL_14;
 80076bc:	f107 031c 	add.w	r3, r7, #28
 80076c0:	220e      	movs	r2, #14
 80076c2:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc2, &adcChannel);
 80076c4:	f107 031c 	add.w	r3, r7, #28
 80076c8:	4619      	mov	r1, r3
 80076ca:	484b      	ldr	r0, [pc, #300]	; (80077f8 <main+0x578>)
 80076cc:	f7f9 ffd4 	bl	8001678 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc2);
 80076d0:	4849      	ldr	r0, [pc, #292]	; (80077f8 <main+0x578>)
 80076d2:	f7f9 fd1b 	bl	800110c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc2, 1) == HAL_OK)
 80076d6:	2101      	movs	r1, #1
 80076d8:	4847      	ldr	r0, [pc, #284]	; (80077f8 <main+0x578>)
 80076da:	f7f9 fddd 	bl	8001298 <HAL_ADC_PollForConversion>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d109      	bne.n	80076f8 <main+0x478>
		{
				g_ADCValue14 = HAL_ADC_GetValue(&hadc2);
 80076e4:	4844      	ldr	r0, [pc, #272]	; (80077f8 <main+0x578>)
 80076e6:	f7f9 ff9c 	bl	8001622 <HAL_ADC_GetValue>
 80076ea:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
				g_MeasurementNumber++;
 80076ee:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 80076f2:	3301      	adds	r3, #1
 80076f4:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
		}//takes several microseconds

		// --- STRAIN
		adcChannel.Channel = ADC_CHANNEL_15;
 80076f8:	f107 031c 	add.w	r3, r7, #28
 80076fc:	220f      	movs	r2, #15
 80076fe:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc2, &adcChannel);
 8007700:	f107 031c 	add.w	r3, r7, #28
 8007704:	4619      	mov	r1, r3
 8007706:	483c      	ldr	r0, [pc, #240]	; (80077f8 <main+0x578>)
 8007708:	f7f9 ffb6 	bl	8001678 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc2);
 800770c:	483a      	ldr	r0, [pc, #232]	; (80077f8 <main+0x578>)
 800770e:	f7f9 fcfd 	bl	800110c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc2, 1) == HAL_OK){
 8007712:	2101      	movs	r1, #1
 8007714:	4838      	ldr	r0, [pc, #224]	; (80077f8 <main+0x578>)
 8007716:	f7f9 fdbf 	bl	8001298 <HAL_ADC_PollForConversion>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d104      	bne.n	800772a <main+0x4aa>
				g_ADCValue15 = HAL_ADC_GetValue(&hadc2);
 8007720:	4835      	ldr	r0, [pc, #212]	; (80077f8 <main+0x578>)
 8007722:	f7f9 ff7e 	bl	8001622 <HAL_ADC_GetValue>
 8007726:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
		}

		uint32_t g_ADCValue1_1=5;
 800772a:	2305      	movs	r3, #5
 800772c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
		adcChannel.Channel = ADC_CHANNEL_1;
 8007730:	f107 031c 	add.w	r3, r7, #28
 8007734:	2201      	movs	r2, #1
 8007736:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &adcChannel);
 8007738:	f107 031c 	add.w	r3, r7, #28
 800773c:	4619      	mov	r1, r3
 800773e:	482f      	ldr	r0, [pc, #188]	; (80077fc <main+0x57c>)
 8007740:	f7f9 ff9a 	bl	8001678 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 8007744:	482d      	ldr	r0, [pc, #180]	; (80077fc <main+0x57c>)
 8007746:	f7f9 fce1 	bl	800110c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK){
 800774a:	2101      	movs	r1, #1
 800774c:	482b      	ldr	r0, [pc, #172]	; (80077fc <main+0x57c>)
 800774e:	f7f9 fda3 	bl	8001298 <HAL_ADC_PollForConversion>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d104      	bne.n	8007762 <main+0x4e2>
				g_ADCValue1_1 = HAL_ADC_GetValue(&hadc1);
 8007758:	4828      	ldr	r0, [pc, #160]	; (80077fc <main+0x57c>)
 800775a:	f7f9 ff62 	bl	8001622 <HAL_ADC_GetValue>
 800775e:	f8c7 029c 	str.w	r0, [r7, #668]	; 0x29c
		}

		uint32_t g_ADCValue1_2=5;
 8007762:	2305      	movs	r3, #5
 8007764:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
		adcChannel.Channel = ADC_CHANNEL_2;
 8007768:	f107 031c 	add.w	r3, r7, #28
 800776c:	2202      	movs	r2, #2
 800776e:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &adcChannel);
 8007770:	f107 031c 	add.w	r3, r7, #28
 8007774:	4619      	mov	r1, r3
 8007776:	4821      	ldr	r0, [pc, #132]	; (80077fc <main+0x57c>)
 8007778:	f7f9 ff7e 	bl	8001678 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 800777c:	481f      	ldr	r0, [pc, #124]	; (80077fc <main+0x57c>)
 800777e:	f7f9 fcc5 	bl	800110c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK){
 8007782:	2101      	movs	r1, #1
 8007784:	481d      	ldr	r0, [pc, #116]	; (80077fc <main+0x57c>)
 8007786:	f7f9 fd87 	bl	8001298 <HAL_ADC_PollForConversion>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d104      	bne.n	800779a <main+0x51a>
				g_ADCValue1_2 = HAL_ADC_GetValue(&hadc1);
 8007790:	481a      	ldr	r0, [pc, #104]	; (80077fc <main+0x57c>)
 8007792:	f7f9 ff46 	bl	8001622 <HAL_ADC_GetValue>
 8007796:	f8c7 0298 	str.w	r0, [r7, #664]	; 0x298
		}

		// --- MOTOR TEMP 105 is room temp rising

		adcChannel.Channel = ADC_CHANNEL_4;
 800779a:	f107 031c 	add.w	r3, r7, #28
 800779e:	2204      	movs	r2, #4
 80077a0:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &adcChannel);
 80077a2:	f107 031c 	add.w	r3, r7, #28
 80077a6:	4619      	mov	r1, r3
 80077a8:	4814      	ldr	r0, [pc, #80]	; (80077fc <main+0x57c>)
 80077aa:	f7f9 ff65 	bl	8001678 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 80077ae:	4813      	ldr	r0, [pc, #76]	; (80077fc <main+0x57c>)
 80077b0:	f7f9 fcac 	bl	800110c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK){
 80077b4:	2101      	movs	r1, #1
 80077b6:	4811      	ldr	r0, [pc, #68]	; (80077fc <main+0x57c>)
 80077b8:	f7f9 fd6e 	bl	8001298 <HAL_ADC_PollForConversion>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d123      	bne.n	800780a <main+0x58a>
 80077c2:	e01d      	b.n	8007800 <main+0x580>
 80077c4:	0800afa0 	.word	0x0800afa0
 80077c8:	40014000 	.word	0x40014000
 80077cc:	40021000 	.word	0x40021000
 80077d0:	20000480 	.word	0x20000480
 80077d4:	40020c00 	.word	0x40020c00
 80077d8:	200000e0 	.word	0x200000e0
 80077dc:	40d00000 	.word	0x40d00000
 80077e0:	409f4000 	.word	0x409f4000
 80077e4:	200006dc 	.word	0x200006dc
 80077e8:	200005f0 	.word	0x200005f0
 80077ec:	40010400 	.word	0x40010400
 80077f0:	08008c1d 	.word	0x08008c1d
 80077f4:	200005f4 	.word	0x200005f4
 80077f8:	20000500 	.word	0x20000500
 80077fc:	20000654 	.word	0x20000654
				g_ADCValue1_4 = HAL_ADC_GetValue(&hadc1);
 8007800:	48cb      	ldr	r0, [pc, #812]	; (8007b30 <main+0x8b0>)
 8007802:	f7f9 ff0e 	bl	8001622 <HAL_ADC_GetValue>
 8007806:	f8c7 02c0 	str.w	r0, [r7, #704]	; 0x2c0
		}

		// --- BOARD TEMP 1280 is room temp rising
		adcChannel.Channel = ADC_CHANNEL_5;
 800780a:	f107 031c 	add.w	r3, r7, #28
 800780e:	2205      	movs	r2, #5
 8007810:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &adcChannel);
 8007812:	f107 031c 	add.w	r3, r7, #28
 8007816:	4619      	mov	r1, r3
 8007818:	48c5      	ldr	r0, [pc, #788]	; (8007b30 <main+0x8b0>)
 800781a:	f7f9 ff2d 	bl	8001678 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 800781e:	48c4      	ldr	r0, [pc, #784]	; (8007b30 <main+0x8b0>)
 8007820:	f7f9 fc74 	bl	800110c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK){
 8007824:	2101      	movs	r1, #1
 8007826:	48c2      	ldr	r0, [pc, #776]	; (8007b30 <main+0x8b0>)
 8007828:	f7f9 fd36 	bl	8001298 <HAL_ADC_PollForConversion>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d104      	bne.n	800783c <main+0x5bc>
				g_ADCValue1_5 = HAL_ADC_GetValue(&hadc1);
 8007832:	48bf      	ldr	r0, [pc, #764]	; (8007b30 <main+0x8b0>)
 8007834:	f7f9 fef5 	bl	8001622 <HAL_ADC_GetValue>
 8007838:	f8c7 02bc 	str.w	r0, [r7, #700]	; 0x2bc

	  // -------------------------------------------------------------
	  // --- SLOW PROCESS ----------------------------------------------------
	  // -------------------------------------------------------------

	  if (i_fast%fast2slow == 0){
 800783c:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8007840:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8007844:	fbb3 f2f2 	udiv	r2, r3, r2
 8007848:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 800784c:	fb01 f202 	mul.w	r2, r1, r2
 8007850:	1a9b      	subs	r3, r3, r2
 8007852:	2b00      	cmp	r3, #0
 8007854:	f040 815e 	bne.w	8007b14 <main+0x894>

	  	// --- GPIO ----------------------------------------------------
	  	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8007858:	2110      	movs	r1, #16
 800785a:	48b6      	ldr	r0, [pc, #728]	; (8007b34 <main+0x8b4>)
 800785c:	f7fb f8d9 	bl	8002a12 <HAL_GPIO_TogglePin>

			// --- UART ----------------------------------------------------


			HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 8007860:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8007864:	2201      	movs	r2, #1
 8007866:	4619      	mov	r1, r3
 8007868:	48b3      	ldr	r0, [pc, #716]	; (8007b38 <main+0x8b8>)
 800786a:	f7fe fef5 	bl	8006658 <HAL_UART_Receive_IT>


			switch(ch){
 800786e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	3b61      	subs	r3, #97	; 0x61
 8007876:	2b16      	cmp	r3, #22
 8007878:	f200 80b3 	bhi.w	80079e2 <main+0x762>
 800787c:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <main+0x604>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	08007909 	.word	0x08007909
 8007888:	080079e3 	.word	0x080079e3
 800788c:	080079e3 	.word	0x080079e3
 8007890:	08007931 	.word	0x08007931
 8007894:	080079e3 	.word	0x080079e3
 8007898:	08007971 	.word	0x08007971
 800789c:	08007961 	.word	0x08007961
 80078a0:	08007969 	.word	0x08007969
 80078a4:	080079e3 	.word	0x080079e3
 80078a8:	080079bb 	.word	0x080079bb
 80078ac:	080079e3 	.word	0x080079e3
 80078b0:	080079e3 	.word	0x080079e3
 80078b4:	080079e3 	.word	0x080079e3
 80078b8:	080079e3 	.word	0x080079e3
 80078bc:	080079e3 	.word	0x080079e3
 80078c0:	08007987 	.word	0x08007987
 80078c4:	080079e3 	.word	0x080079e3
 80078c8:	0800797b 	.word	0x0800797b
 80078cc:	080078f3 	.word	0x080078f3
 80078d0:	08007959 	.word	0x08007959
 80078d4:	08007993 	.word	0x08007993
 80078d8:	080079e3 	.word	0x080079e3
 80078dc:	080078e1 	.word	0x080078e1
				case 'w':
					amp *= 2;
 80078e0:	4b96      	ldr	r3, [pc, #600]	; (8007b3c <main+0x8bc>)
 80078e2:	edd3 7a00 	vldr	s15, [r3]
 80078e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80078ea:	4b94      	ldr	r3, [pc, #592]	; (8007b3c <main+0x8bc>)
 80078ec:	edc3 7a00 	vstr	s15, [r3]
					break;
 80078f0:	e07b      	b.n	80079ea <main+0x76a>
				case 's':
					amp /= 2;
 80078f2:	4b92      	ldr	r3, [pc, #584]	; (8007b3c <main+0x8bc>)
 80078f4:	ed93 7a00 	vldr	s14, [r3]
 80078f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80078fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007900:	4b8e      	ldr	r3, [pc, #568]	; (8007b3c <main+0x8bc>)
 8007902:	edc3 7a00 	vstr	s15, [r3]
					break;
 8007906:	e070      	b.n	80079ea <main+0x76a>
				case 'a':
					phase_shift += 0.05;
 8007908:	4b8d      	ldr	r3, [pc, #564]	; (8007b40 <main+0x8c0>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4618      	mov	r0, r3
 800790e:	f7f8 fe1b 	bl	8000548 <__aeabi_f2d>
 8007912:	a383      	add	r3, pc, #524	; (adr r3, 8007b20 <main+0x8a0>)
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	f7f8 fcb8 	bl	800028c <__adddf3>
 800791c:	4603      	mov	r3, r0
 800791e:	460c      	mov	r4, r1
 8007920:	4618      	mov	r0, r3
 8007922:	4621      	mov	r1, r4
 8007924:	f7f9 f94a 	bl	8000bbc <__aeabi_d2f>
 8007928:	4602      	mov	r2, r0
 800792a:	4b85      	ldr	r3, [pc, #532]	; (8007b40 <main+0x8c0>)
 800792c:	601a      	str	r2, [r3, #0]
					break;
 800792e:	e05c      	b.n	80079ea <main+0x76a>
				case 'd':
					phase_shift -= 0.05;
 8007930:	4b83      	ldr	r3, [pc, #524]	; (8007b40 <main+0x8c0>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4618      	mov	r0, r3
 8007936:	f7f8 fe07 	bl	8000548 <__aeabi_f2d>
 800793a:	a379      	add	r3, pc, #484	; (adr r3, 8007b20 <main+0x8a0>)
 800793c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007940:	f7f8 fca2 	bl	8000288 <__aeabi_dsub>
 8007944:	4603      	mov	r3, r0
 8007946:	460c      	mov	r4, r1
 8007948:	4618      	mov	r0, r3
 800794a:	4621      	mov	r1, r4
 800794c:	f7f9 f936 	bl	8000bbc <__aeabi_d2f>
 8007950:	4602      	mov	r2, r0
 8007952:	4b7b      	ldr	r3, [pc, #492]	; (8007b40 <main+0x8c0>)
 8007954:	601a      	str	r2, [r3, #0]
					break;
 8007956:	e048      	b.n	80079ea <main+0x76a>
				case 't':
					run_motor = 1;
 8007958:	4b7a      	ldr	r3, [pc, #488]	; (8007b44 <main+0x8c4>)
 800795a:	2201      	movs	r2, #1
 800795c:	601a      	str	r2, [r3, #0]
					break;
 800795e:	e044      	b.n	80079ea <main+0x76a>
				case 'g':
					run_motor = 0;
 8007960:	4b78      	ldr	r3, [pc, #480]	; (8007b44 <main+0x8c4>)
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]
					break;
 8007966:	e040      	b.n	80079ea <main+0x76a>
				case 'h':
					direction = 1;
 8007968:	4b77      	ldr	r3, [pc, #476]	; (8007b48 <main+0x8c8>)
 800796a:	2201      	movs	r2, #1
 800796c:	601a      	str	r2, [r3, #0]
					break;
 800796e:	e03c      	b.n	80079ea <main+0x76a>
				case 'f':
					direction = -1;
 8007970:	4b75      	ldr	r3, [pc, #468]	; (8007b48 <main+0x8c8>)
 8007972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007976:	601a      	str	r2, [r3, #0]
					break;
 8007978:	e037      	b.n	80079ea <main+0x76a>
				case 'r':
					direction *= -1;
 800797a:	4b73      	ldr	r3, [pc, #460]	; (8007b48 <main+0x8c8>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	425b      	negs	r3, r3
 8007980:	4a71      	ldr	r2, [pc, #452]	; (8007b48 <main+0x8c8>)
 8007982:	6013      	str	r3, [r2, #0]
					break;
 8007984:	e031      	b.n	80079ea <main+0x76a>
				case 'p':
					playSound( 1, 20, 100);
 8007986:	2264      	movs	r2, #100	; 0x64
 8007988:	2114      	movs	r1, #20
 800798a:	2001      	movs	r0, #1
 800798c:	f000 fe68 	bl	8008660 <playSound>
					break;
 8007990:	e02b      	b.n	80079ea <main+0x76a>
				case 'u':
					stiffness += 0.001;
 8007992:	4b6e      	ldr	r3, [pc, #440]	; (8007b4c <main+0x8cc>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4618      	mov	r0, r3
 8007998:	f7f8 fdd6 	bl	8000548 <__aeabi_f2d>
 800799c:	a362      	add	r3, pc, #392	; (adr r3, 8007b28 <main+0x8a8>)
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	f7f8 fc73 	bl	800028c <__adddf3>
 80079a6:	4603      	mov	r3, r0
 80079a8:	460c      	mov	r4, r1
 80079aa:	4618      	mov	r0, r3
 80079ac:	4621      	mov	r1, r4
 80079ae:	f7f9 f905 	bl	8000bbc <__aeabi_d2f>
 80079b2:	4602      	mov	r2, r0
 80079b4:	4b65      	ldr	r3, [pc, #404]	; (8007b4c <main+0x8cc>)
 80079b6:	601a      	str	r2, [r3, #0]
					break;
 80079b8:	e017      	b.n	80079ea <main+0x76a>
				case 'j':
					stiffness -= 0.001;
 80079ba:	4b64      	ldr	r3, [pc, #400]	; (8007b4c <main+0x8cc>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7f8 fdc2 	bl	8000548 <__aeabi_f2d>
 80079c4:	a358      	add	r3, pc, #352	; (adr r3, 8007b28 <main+0x8a8>)
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	f7f8 fc5d 	bl	8000288 <__aeabi_dsub>
 80079ce:	4603      	mov	r3, r0
 80079d0:	460c      	mov	r4, r1
 80079d2:	4618      	mov	r0, r3
 80079d4:	4621      	mov	r1, r4
 80079d6:	f7f9 f8f1 	bl	8000bbc <__aeabi_d2f>
 80079da:	4602      	mov	r2, r0
 80079dc:	4b5b      	ldr	r3, [pc, #364]	; (8007b4c <main+0x8cc>)
 80079de:	601a      	str	r2, [r3, #0]
					break;
 80079e0:	e003      	b.n	80079ea <main+0x76a>
				default:
					ch='q';
 80079e2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80079e6:	2271      	movs	r2, #113	; 0x71
 80079e8:	701a      	strb	r2, [r3, #0]
			}

			//                   0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5
			sprintf((char*)buf, "%c#%d %d A %d %d T %d %d                                                                                                                               \r\n",
 80079ea:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	461c      	mov	r4, r3
					ch, (int)(amp*100), (int)(phase_shift*100),
 80079f2:	4b52      	ldr	r3, [pc, #328]	; (8007b3c <main+0x8bc>)
 80079f4:	edd3 7a00 	vldr	s15, [r3]
 80079f8:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8007b50 <main+0x8d0>
 80079fc:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf, "%c#%d %d A %d %d T %d %d                                                                                                                               \r\n",
 8007a00:	eefd 6ae7 	vcvt.s32.f32	s13, s15
					ch, (int)(amp*100), (int)(phase_shift*100),
 8007a04:	4b4e      	ldr	r3, [pc, #312]	; (8007b40 <main+0x8c0>)
 8007a06:	edd3 7a00 	vldr	s15, [r3]
 8007a0a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8007b50 <main+0x8d0>
 8007a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf, "%c#%d %d A %d %d T %d %d                                                                                                                               \r\n",
 8007a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a16:	ee17 2a90 	vmov	r2, s15
					g_ADCValue1_4, g_ADCValue1_5,
					(int)(stiffness*1000), (int)(1000*av_velocity));
 8007a1a:	4b4c      	ldr	r3, [pc, #304]	; (8007b4c <main+0x8cc>)
 8007a1c:	edd3 7a00 	vldr	s15, [r3]
 8007a20:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007b54 <main+0x8d4>
 8007a24:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf, "%c#%d %d A %d %d T %d %d                                                                                                                               \r\n",
 8007a28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a2c:	ee17 1a90 	vmov	r1, s15
					(int)(stiffness*1000), (int)(1000*av_velocity));
 8007a30:	4b49      	ldr	r3, [pc, #292]	; (8007b58 <main+0x8d8>)
 8007a32:	edd3 7a00 	vldr	s15, [r3]
 8007a36:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8007b54 <main+0x8d4>
 8007a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf, "%c#%d %d A %d %d T %d %d                                                                                                                               \r\n",
 8007a3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a42:	ee17 3a90 	vmov	r3, s15
 8007a46:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
 8007a4a:	9304      	str	r3, [sp, #16]
 8007a4c:	9103      	str	r1, [sp, #12]
 8007a4e:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8007a52:	9302      	str	r3, [sp, #8]
 8007a54:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8007a58:	9301      	str	r3, [sp, #4]
 8007a5a:	9200      	str	r2, [sp, #0]
 8007a5c:	ee16 3a90 	vmov	r3, s13
 8007a60:	4622      	mov	r2, r4
 8007a62:	493e      	ldr	r1, [pc, #248]	; (8007b5c <main+0x8dc>)
 8007a64:	f001 fe6a 	bl	800973c <siprintf>

			buf[150] = '|';
 8007a68:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8007a6c:	227c      	movs	r2, #124	; 0x7c
 8007a6e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			buf[100] = '.';
 8007a72:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8007a76:	222e      	movs	r2, #46	; 0x2e
 8007a78:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			buf[50] = '|';
 8007a7c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8007a80:	227c      	movs	r2, #124	; 0x7c
 8007a82:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			buf[100 + max(-50, min(50, (int)av_velocity))] = 'v';
 8007a86:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8007a8a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8007a8e:	2332      	movs	r3, #50	; 0x32
 8007a90:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8007a94:	4b30      	ldr	r3, [pc, #192]	; (8007b58 <main+0x8d8>)
 8007a96:	edd3 7a00 	vldr	s15, [r3]
 8007a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a9e:	ee17 3a90 	vmov	r3, s15
 8007aa2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007aa6:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8007aaa:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	bfa8      	it	ge
 8007ab2:	4613      	movge	r3, r2
 8007ab4:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8007ab8:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8007abc:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	bfb8      	it	lt
 8007ac4:	4613      	movlt	r3, r2
 8007ac6:	3364      	adds	r3, #100	; 0x64
 8007ac8:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8007acc:	2176      	movs	r1, #118	; 0x76
 8007ace:	54d1      	strb	r1, [r2, r3]

			//HAL_UART_Transmit_IT(&huart3, buf, strlen((char*)buf)); //WORKS but replaced by DMA below
			huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 8007ad0:	4b19      	ldr	r3, [pc, #100]	; (8007b38 <main+0x8b8>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	695a      	ldr	r2, [r3, #20]
 8007ad6:	4b18      	ldr	r3, [pc, #96]	; (8007b38 <main+0x8b8>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ade:	615a      	str	r2, [r3, #20]
			HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 8007ae0:	f507 74ae 	add.w	r4, r7, #348	; 0x15c
 8007ae4:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <main+0x8b8>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	461d      	mov	r5, r3
 8007aec:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7f8 fb6d 	bl	80001d0 <strlen>
 8007af6:	4603      	mov	r3, r0
 8007af8:	462a      	mov	r2, r5
 8007afa:	4621      	mov	r1, r4
 8007afc:	4818      	ldr	r0, [pc, #96]	; (8007b60 <main+0x8e0>)
 8007afe:	f7fa fa9f 	bl	8002040 <HAL_DMA_Start_IT>

			ch='q';
 8007b02:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8007b06:	2271      	movs	r2, #113	; 0x71
 8007b08:	701a      	strb	r2, [r3, #0]

			i_slow++;
 8007b0a:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8007b0e:	3301      	adds	r3, #1
 8007b10:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
	  }

	  i_fast++;
 8007b14:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8007b18:	3301      	adds	r3, #1
 8007b1a:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
  {
 8007b1e:	e599      	b.n	8007654 <main+0x3d4>
 8007b20:	9999999a 	.word	0x9999999a
 8007b24:	3fa99999 	.word	0x3fa99999
 8007b28:	d2f1a9fc 	.word	0xd2f1a9fc
 8007b2c:	3f50624d 	.word	0x3f50624d
 8007b30:	20000654 	.word	0x20000654
 8007b34:	40021000 	.word	0x40021000
 8007b38:	200004c0 	.word	0x200004c0
 8007b3c:	20000010 	.word	0x20000010
 8007b40:	2000001c 	.word	0x2000001c
 8007b44:	20000014 	.word	0x20000014
 8007b48:	20000018 	.word	0x20000018
 8007b4c:	200000a8 	.word	0x200000a8
 8007b50:	42c80000 	.word	0x42c80000
 8007b54:	447a0000 	.word	0x447a0000
 8007b58:	200000b8 	.word	0x200000b8
 8007b5c:	0800afa8 	.word	0x0800afa8
 8007b60:	200005f4 	.word	0x200005f4

08007b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b094      	sub	sp, #80	; 0x50
 8007b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007b6a:	f107 0320 	add.w	r3, r7, #32
 8007b6e:	2230      	movs	r2, #48	; 0x30
 8007b70:	2100      	movs	r1, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f001 fdda 	bl	800972c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007b78:	f107 030c 	add.w	r3, r7, #12
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	605a      	str	r2, [r3, #4]
 8007b82:	609a      	str	r2, [r3, #8]
 8007b84:	60da      	str	r2, [r3, #12]
 8007b86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b88:	2300      	movs	r3, #0
 8007b8a:	60bb      	str	r3, [r7, #8]
 8007b8c:	4b27      	ldr	r3, [pc, #156]	; (8007c2c <SystemClock_Config+0xc8>)
 8007b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b90:	4a26      	ldr	r2, [pc, #152]	; (8007c2c <SystemClock_Config+0xc8>)
 8007b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b96:	6413      	str	r3, [r2, #64]	; 0x40
 8007b98:	4b24      	ldr	r3, [pc, #144]	; (8007c2c <SystemClock_Config+0xc8>)
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ba0:	60bb      	str	r3, [r7, #8]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	607b      	str	r3, [r7, #4]
 8007ba8:	4b21      	ldr	r3, [pc, #132]	; (8007c30 <SystemClock_Config+0xcc>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a20      	ldr	r2, [pc, #128]	; (8007c30 <SystemClock_Config+0xcc>)
 8007bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	4b1e      	ldr	r3, [pc, #120]	; (8007c30 <SystemClock_Config+0xcc>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bbc:	607b      	str	r3, [r7, #4]
 8007bbe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007bc8:	2310      	movs	r3, #16
 8007bca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007bcc:	2302      	movs	r3, #2
 8007bce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007bd4:	2308      	movs	r3, #8
 8007bd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8007bd8:	2354      	movs	r3, #84	; 0x54
 8007bda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007bdc:	2302      	movs	r3, #2
 8007bde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8007be0:	2303      	movs	r3, #3
 8007be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007be4:	f107 0320 	add.w	r3, r7, #32
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fb fecd 	bl	8003988 <HAL_RCC_OscConfig>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007bf4:	f001 f826 	bl	8008c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007bf8:	230f      	movs	r3, #15
 8007bfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007c00:	2300      	movs	r3, #0
 8007c02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007c0e:	f107 030c 	add.w	r3, r7, #12
 8007c12:	2102      	movs	r1, #2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fc f927 	bl	8003e68 <HAL_RCC_ClockConfig>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8007c20:	f001 f810 	bl	8008c44 <Error_Handler>
  }
}
 8007c24:	bf00      	nop
 8007c26:	3750      	adds	r7, #80	; 0x50
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	40023800 	.word	0x40023800
 8007c30:	40007000 	.word	0x40007000

08007c34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007c3a:	463b      	mov	r3, r7
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	605a      	str	r2, [r3, #4]
 8007c42:	609a      	str	r2, [r3, #8]
 8007c44:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8007c46:	4b21      	ldr	r3, [pc, #132]	; (8007ccc <MX_ADC1_Init+0x98>)
 8007c48:	4a21      	ldr	r2, [pc, #132]	; (8007cd0 <MX_ADC1_Init+0x9c>)
 8007c4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007c4c:	4b1f      	ldr	r3, [pc, #124]	; (8007ccc <MX_ADC1_Init+0x98>)
 8007c4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007c52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007c54:	4b1d      	ldr	r3, [pc, #116]	; (8007ccc <MX_ADC1_Init+0x98>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007c5a:	4b1c      	ldr	r3, [pc, #112]	; (8007ccc <MX_ADC1_Init+0x98>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007c60:	4b1a      	ldr	r3, [pc, #104]	; (8007ccc <MX_ADC1_Init+0x98>)
 8007c62:	2201      	movs	r2, #1
 8007c64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007c66:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <MX_ADC1_Init+0x98>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007c6e:	4b17      	ldr	r3, [pc, #92]	; (8007ccc <MX_ADC1_Init+0x98>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007c74:	4b15      	ldr	r3, [pc, #84]	; (8007ccc <MX_ADC1_Init+0x98>)
 8007c76:	4a17      	ldr	r2, [pc, #92]	; (8007cd4 <MX_ADC1_Init+0xa0>)
 8007c78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007c7a:	4b14      	ldr	r3, [pc, #80]	; (8007ccc <MX_ADC1_Init+0x98>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007c80:	4b12      	ldr	r3, [pc, #72]	; (8007ccc <MX_ADC1_Init+0x98>)
 8007c82:	2201      	movs	r2, #1
 8007c84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007c86:	4b11      	ldr	r3, [pc, #68]	; (8007ccc <MX_ADC1_Init+0x98>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007c8e:	4b0f      	ldr	r3, [pc, #60]	; (8007ccc <MX_ADC1_Init+0x98>)
 8007c90:	2201      	movs	r2, #1
 8007c92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007c94:	480d      	ldr	r0, [pc, #52]	; (8007ccc <MX_ADC1_Init+0x98>)
 8007c96:	f7f9 f9f5 	bl	8001084 <HAL_ADC_Init>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007ca0:	f000 ffd0 	bl	8008c44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007cb0:	463b      	mov	r3, r7
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4805      	ldr	r0, [pc, #20]	; (8007ccc <MX_ADC1_Init+0x98>)
 8007cb6:	f7f9 fcdf 	bl	8001678 <HAL_ADC_ConfigChannel>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8007cc0:	f000 ffc0 	bl	8008c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007cc4:	bf00      	nop
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	20000654 	.word	0x20000654
 8007cd0:	40012000 	.word	0x40012000
 8007cd4:	0f000001 	.word	0x0f000001

08007cd8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007cde:	463b      	mov	r3, r7
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	605a      	str	r2, [r3, #4]
 8007ce6:	609a      	str	r2, [r3, #8]
 8007ce8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8007cea:	4b21      	ldr	r3, [pc, #132]	; (8007d70 <MX_ADC2_Init+0x98>)
 8007cec:	4a21      	ldr	r2, [pc, #132]	; (8007d74 <MX_ADC2_Init+0x9c>)
 8007cee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007cf0:	4b1f      	ldr	r3, [pc, #124]	; (8007d70 <MX_ADC2_Init+0x98>)
 8007cf2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007cf6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8007cf8:	4b1d      	ldr	r3, [pc, #116]	; (8007d70 <MX_ADC2_Init+0x98>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8007cfe:	4b1c      	ldr	r3, [pc, #112]	; (8007d70 <MX_ADC2_Init+0x98>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8007d04:	4b1a      	ldr	r3, [pc, #104]	; (8007d70 <MX_ADC2_Init+0x98>)
 8007d06:	2201      	movs	r2, #1
 8007d08:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8007d0a:	4b19      	ldr	r3, [pc, #100]	; (8007d70 <MX_ADC2_Init+0x98>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007d12:	4b17      	ldr	r3, [pc, #92]	; (8007d70 <MX_ADC2_Init+0x98>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007d18:	4b15      	ldr	r3, [pc, #84]	; (8007d70 <MX_ADC2_Init+0x98>)
 8007d1a:	4a17      	ldr	r2, [pc, #92]	; (8007d78 <MX_ADC2_Init+0xa0>)
 8007d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007d1e:	4b14      	ldr	r3, [pc, #80]	; (8007d70 <MX_ADC2_Init+0x98>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8007d24:	4b12      	ldr	r3, [pc, #72]	; (8007d70 <MX_ADC2_Init+0x98>)
 8007d26:	2201      	movs	r2, #1
 8007d28:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8007d2a:	4b11      	ldr	r3, [pc, #68]	; (8007d70 <MX_ADC2_Init+0x98>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007d32:	4b0f      	ldr	r3, [pc, #60]	; (8007d70 <MX_ADC2_Init+0x98>)
 8007d34:	2201      	movs	r2, #1
 8007d36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8007d38:	480d      	ldr	r0, [pc, #52]	; (8007d70 <MX_ADC2_Init+0x98>)
 8007d3a:	f7f9 f9a3 	bl	8001084 <HAL_ADC_Init>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8007d44:	f000 ff7e 	bl	8008c44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8007d48:	2308      	movs	r3, #8
 8007d4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007d50:	2300      	movs	r3, #0
 8007d52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007d54:	463b      	mov	r3, r7
 8007d56:	4619      	mov	r1, r3
 8007d58:	4805      	ldr	r0, [pc, #20]	; (8007d70 <MX_ADC2_Init+0x98>)
 8007d5a:	f7f9 fc8d 	bl	8001678 <HAL_ADC_ConfigChannel>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8007d64:	f000 ff6e 	bl	8008c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8007d68:	bf00      	nop
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20000500 	.word	0x20000500
 8007d74:	40012100 	.word	0x40012100
 8007d78:	0f000001 	.word	0x0f000001

08007d7c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8007d80:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <MX_CAN1_Init+0x60>)
 8007d82:	4a17      	ldr	r2, [pc, #92]	; (8007de0 <MX_CAN1_Init+0x64>)
 8007d84:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8007d86:	4b15      	ldr	r3, [pc, #84]	; (8007ddc <MX_CAN1_Init+0x60>)
 8007d88:	2210      	movs	r2, #16
 8007d8a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8007d8c:	4b13      	ldr	r3, [pc, #76]	; (8007ddc <MX_CAN1_Init+0x60>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007d92:	4b12      	ldr	r3, [pc, #72]	; (8007ddc <MX_CAN1_Init+0x60>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007d98:	4b10      	ldr	r3, [pc, #64]	; (8007ddc <MX_CAN1_Init+0x60>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007d9e:	4b0f      	ldr	r3, [pc, #60]	; (8007ddc <MX_CAN1_Init+0x60>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007da4:	4b0d      	ldr	r3, [pc, #52]	; (8007ddc <MX_CAN1_Init+0x60>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8007daa:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <MX_CAN1_Init+0x60>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8007db0:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <MX_CAN1_Init+0x60>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8007db6:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <MX_CAN1_Init+0x60>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8007dbc:	4b07      	ldr	r3, [pc, #28]	; (8007ddc <MX_CAN1_Init+0x60>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8007dc2:	4b06      	ldr	r3, [pc, #24]	; (8007ddc <MX_CAN1_Init+0x60>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007dc8:	4804      	ldr	r0, [pc, #16]	; (8007ddc <MX_CAN1_Init+0x60>)
 8007dca:	f7f9 fe7d 	bl	8001ac8 <HAL_CAN_Init>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8007dd4:	f000 ff36 	bl	8008c44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8007dd8:	bf00      	nop
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	200007a0 	.word	0x200007a0
 8007de0:	40006400 	.word	0x40006400

08007de4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007de8:	4b12      	ldr	r3, [pc, #72]	; (8007e34 <MX_I2C1_Init+0x50>)
 8007dea:	4a13      	ldr	r2, [pc, #76]	; (8007e38 <MX_I2C1_Init+0x54>)
 8007dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007dee:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <MX_I2C1_Init+0x50>)
 8007df0:	4a12      	ldr	r2, [pc, #72]	; (8007e3c <MX_I2C1_Init+0x58>)
 8007df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007df4:	4b0f      	ldr	r3, [pc, #60]	; (8007e34 <MX_I2C1_Init+0x50>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007dfa:	4b0e      	ldr	r3, [pc, #56]	; (8007e34 <MX_I2C1_Init+0x50>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007e00:	4b0c      	ldr	r3, [pc, #48]	; (8007e34 <MX_I2C1_Init+0x50>)
 8007e02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007e08:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <MX_I2C1_Init+0x50>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007e0e:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <MX_I2C1_Init+0x50>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007e14:	4b07      	ldr	r3, [pc, #28]	; (8007e34 <MX_I2C1_Init+0x50>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007e1a:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <MX_I2C1_Init+0x50>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007e20:	4804      	ldr	r0, [pc, #16]	; (8007e34 <MX_I2C1_Init+0x50>)
 8007e22:	f7fa fe29 	bl	8002a78 <HAL_I2C_Init>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007e2c:	f000 ff0a 	bl	8008c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007e30:	bf00      	nop
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	20000548 	.word	0x20000548
 8007e38:	40005400 	.word	0x40005400
 8007e3c:	000186a0 	.word	0x000186a0

08007e40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007e44:	4b12      	ldr	r3, [pc, #72]	; (8007e90 <MX_I2C2_Init+0x50>)
 8007e46:	4a13      	ldr	r2, [pc, #76]	; (8007e94 <MX_I2C2_Init+0x54>)
 8007e48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8007e4a:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <MX_I2C2_Init+0x50>)
 8007e4c:	4a12      	ldr	r2, [pc, #72]	; (8007e98 <MX_I2C2_Init+0x58>)
 8007e4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007e50:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <MX_I2C2_Init+0x50>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8007e56:	4b0e      	ldr	r3, [pc, #56]	; (8007e90 <MX_I2C2_Init+0x50>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007e5c:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <MX_I2C2_Init+0x50>)
 8007e5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e62:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007e64:	4b0a      	ldr	r3, [pc, #40]	; (8007e90 <MX_I2C2_Init+0x50>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8007e6a:	4b09      	ldr	r3, [pc, #36]	; (8007e90 <MX_I2C2_Init+0x50>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007e70:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <MX_I2C2_Init+0x50>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007e76:	4b06      	ldr	r3, [pc, #24]	; (8007e90 <MX_I2C2_Init+0x50>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007e7c:	4804      	ldr	r0, [pc, #16]	; (8007e90 <MX_I2C2_Init+0x50>)
 8007e7e:	f7fa fdfb 	bl	8002a78 <HAL_I2C_Init>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8007e88:	f000 fedc 	bl	8008c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007e8c:	bf00      	nop
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	2000059c 	.word	0x2000059c
 8007e94:	40005800 	.word	0x40005800
 8007e98:	000186a0 	.word	0x000186a0

08007e9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007ea0:	4b18      	ldr	r3, [pc, #96]	; (8007f04 <MX_SPI2_Init+0x68>)
 8007ea2:	4a19      	ldr	r2, [pc, #100]	; (8007f08 <MX_SPI2_Init+0x6c>)
 8007ea4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007ea6:	4b17      	ldr	r3, [pc, #92]	; (8007f04 <MX_SPI2_Init+0x68>)
 8007ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007eac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007eae:	4b15      	ldr	r3, [pc, #84]	; (8007f04 <MX_SPI2_Init+0x68>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8007eb4:	4b13      	ldr	r3, [pc, #76]	; (8007f04 <MX_SPI2_Init+0x68>)
 8007eb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007eba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ebc:	4b11      	ldr	r3, [pc, #68]	; (8007f04 <MX_SPI2_Init+0x68>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007ec2:	4b10      	ldr	r3, [pc, #64]	; (8007f04 <MX_SPI2_Init+0x68>)
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8007ec8:	4b0e      	ldr	r3, [pc, #56]	; (8007f04 <MX_SPI2_Init+0x68>)
 8007eca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007ece:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007ed0:	4b0c      	ldr	r3, [pc, #48]	; (8007f04 <MX_SPI2_Init+0x68>)
 8007ed2:	2218      	movs	r2, #24
 8007ed4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007ed6:	4b0b      	ldr	r3, [pc, #44]	; (8007f04 <MX_SPI2_Init+0x68>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007edc:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <MX_SPI2_Init+0x68>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ee2:	4b08      	ldr	r3, [pc, #32]	; (8007f04 <MX_SPI2_Init+0x68>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007ee8:	4b06      	ldr	r3, [pc, #24]	; (8007f04 <MX_SPI2_Init+0x68>)
 8007eea:	220a      	movs	r2, #10
 8007eec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007eee:	4805      	ldr	r0, [pc, #20]	; (8007f04 <MX_SPI2_Init+0x68>)
 8007ef0:	f7fc f9ac 	bl	800424c <HAL_SPI_Init>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8007efa:	f000 fea3 	bl	8008c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007efe:	bf00      	nop
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	200000e0 	.word	0x200000e0
 8007f08:	40003800 	.word	0x40003800

08007f0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b096      	sub	sp, #88	; 0x58
 8007f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	605a      	str	r2, [r3, #4]
 8007f1c:	609a      	str	r2, [r3, #8]
 8007f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007f24:	2200      	movs	r2, #0
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f2e:	2200      	movs	r2, #0
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	605a      	str	r2, [r3, #4]
 8007f34:	609a      	str	r2, [r3, #8]
 8007f36:	60da      	str	r2, [r3, #12]
 8007f38:	611a      	str	r2, [r3, #16]
 8007f3a:	615a      	str	r2, [r3, #20]
 8007f3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007f3e:	1d3b      	adds	r3, r7, #4
 8007f40:	2220      	movs	r2, #32
 8007f42:	2100      	movs	r1, #0
 8007f44:	4618      	mov	r0, r3
 8007f46:	f001 fbf1 	bl	800972c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007f4a:	4b4a      	ldr	r3, [pc, #296]	; (8008074 <MX_TIM1_Init+0x168>)
 8007f4c:	4a4a      	ldr	r2, [pc, #296]	; (8008078 <MX_TIM1_Init+0x16c>)
 8007f4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8007f50:	4b48      	ldr	r3, [pc, #288]	; (8008074 <MX_TIM1_Init+0x168>)
 8007f52:	2201      	movs	r2, #1
 8007f54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f56:	4b47      	ldr	r3, [pc, #284]	; (8008074 <MX_TIM1_Init+0x168>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2048;
 8007f5c:	4b45      	ldr	r3, [pc, #276]	; (8008074 <MX_TIM1_Init+0x168>)
 8007f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f64:	4b43      	ldr	r3, [pc, #268]	; (8008074 <MX_TIM1_Init+0x168>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007f6a:	4b42      	ldr	r3, [pc, #264]	; (8008074 <MX_TIM1_Init+0x168>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007f70:	4b40      	ldr	r3, [pc, #256]	; (8008074 <MX_TIM1_Init+0x168>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007f76:	483f      	ldr	r0, [pc, #252]	; (8008074 <MX_TIM1_Init+0x168>)
 8007f78:	f7fc ffdc 	bl	8004f34 <HAL_TIM_Base_Init>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8007f82:	f000 fe5f 	bl	8008c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f8a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007f8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007f90:	4619      	mov	r1, r3
 8007f92:	4838      	ldr	r0, [pc, #224]	; (8008074 <MX_TIM1_Init+0x168>)
 8007f94:	f7fd fcc8 	bl	8005928 <HAL_TIM_ConfigClockSource>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8007f9e:	f000 fe51 	bl	8008c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007fa2:	4834      	ldr	r0, [pc, #208]	; (8008074 <MX_TIM1_Init+0x168>)
 8007fa4:	f7fd f864 	bl	8005070 <HAL_TIM_PWM_Init>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8007fae:	f000 fe49 	bl	8008c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007fba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	482c      	ldr	r0, [pc, #176]	; (8008074 <MX_TIM1_Init+0x168>)
 8007fc2:	f7fe f9f5 	bl	80063b0 <HAL_TIMEx_MasterConfigSynchronization>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8007fcc:	f000 fe3a 	bl	8008c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007fd0:	2360      	movs	r3, #96	; 0x60
 8007fd2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	481f      	ldr	r0, [pc, #124]	; (8008074 <MX_TIM1_Init+0x168>)
 8007ff6:	f7fd fbd1 	bl	800579c <HAL_TIM_PWM_ConfigChannel>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8008000:	f000 fe20 	bl	8008c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008008:	2204      	movs	r2, #4
 800800a:	4619      	mov	r1, r3
 800800c:	4819      	ldr	r0, [pc, #100]	; (8008074 <MX_TIM1_Init+0x168>)
 800800e:	f7fd fbc5 	bl	800579c <HAL_TIM_PWM_ConfigChannel>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8008018:	f000 fe14 	bl	8008c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800801c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008020:	2208      	movs	r2, #8
 8008022:	4619      	mov	r1, r3
 8008024:	4813      	ldr	r0, [pc, #76]	; (8008074 <MX_TIM1_Init+0x168>)
 8008026:	f7fd fbb9 	bl	800579c <HAL_TIM_PWM_ConfigChannel>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8008030:	f000 fe08 	bl	8008c44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008034:	2300      	movs	r3, #0
 8008036:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008038:	2300      	movs	r3, #0
 800803a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800803c:	2300      	movs	r3, #0
 800803e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008040:	2300      	movs	r3, #0
 8008042:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008044:	2300      	movs	r3, #0
 8008046:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800804c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800804e:	2300      	movs	r3, #0
 8008050:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008052:	1d3b      	adds	r3, r7, #4
 8008054:	4619      	mov	r1, r3
 8008056:	4807      	ldr	r0, [pc, #28]	; (8008074 <MX_TIM1_Init+0x168>)
 8008058:	f7fe fa26 	bl	80064a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8008062:	f000 fdef 	bl	8008c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008066:	4803      	ldr	r0, [pc, #12]	; (8008074 <MX_TIM1_Init+0x168>)
 8008068:	f001 f92a 	bl	80092c0 <HAL_TIM_MspPostInit>

}
 800806c:	bf00      	nop
 800806e:	3758      	adds	r7, #88	; 0x58
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	200006e0 	.word	0x200006e0
 8008078:	40010000 	.word	0x40010000

0800807c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08e      	sub	sp, #56	; 0x38
 8008080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008086:	2200      	movs	r2, #0
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	605a      	str	r2, [r3, #4]
 800808c:	609a      	str	r2, [r3, #8]
 800808e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008090:	f107 0320 	add.w	r3, r7, #32
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800809a:	1d3b      	adds	r3, r7, #4
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	605a      	str	r2, [r3, #4]
 80080a2:	609a      	str	r2, [r3, #8]
 80080a4:	60da      	str	r2, [r3, #12]
 80080a6:	611a      	str	r2, [r3, #16]
 80080a8:	615a      	str	r2, [r3, #20]
 80080aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80080ac:	4b2b      	ldr	r3, [pc, #172]	; (800815c <MX_TIM2_Init+0xe0>)
 80080ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80080b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80080b4:	4b29      	ldr	r3, [pc, #164]	; (800815c <MX_TIM2_Init+0xe0>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080ba:	4b28      	ldr	r3, [pc, #160]	; (800815c <MX_TIM2_Init+0xe0>)
 80080bc:	2200      	movs	r2, #0
 80080be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80080c0:	4b26      	ldr	r3, [pc, #152]	; (800815c <MX_TIM2_Init+0xe0>)
 80080c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080c8:	4b24      	ldr	r3, [pc, #144]	; (800815c <MX_TIM2_Init+0xe0>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080ce:	4b23      	ldr	r3, [pc, #140]	; (800815c <MX_TIM2_Init+0xe0>)
 80080d0:	2200      	movs	r2, #0
 80080d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80080d4:	4821      	ldr	r0, [pc, #132]	; (800815c <MX_TIM2_Init+0xe0>)
 80080d6:	f7fc ff2d 	bl	8004f34 <HAL_TIM_Base_Init>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80080e0:	f000 fdb0 	bl	8008c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80080ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080ee:	4619      	mov	r1, r3
 80080f0:	481a      	ldr	r0, [pc, #104]	; (800815c <MX_TIM2_Init+0xe0>)
 80080f2:	f7fd fc19 	bl	8005928 <HAL_TIM_ConfigClockSource>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80080fc:	f000 fda2 	bl	8008c44 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8008100:	4816      	ldr	r0, [pc, #88]	; (800815c <MX_TIM2_Init+0xe0>)
 8008102:	f7fc ff42 	bl	8004f8a <HAL_TIM_OC_Init>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800810c:	f000 fd9a 	bl	8008c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008110:	2300      	movs	r3, #0
 8008112:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008114:	2300      	movs	r3, #0
 8008116:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008118:	f107 0320 	add.w	r3, r7, #32
 800811c:	4619      	mov	r1, r3
 800811e:	480f      	ldr	r0, [pc, #60]	; (800815c <MX_TIM2_Init+0xe0>)
 8008120:	f7fe f946 	bl	80063b0 <HAL_TIMEx_MasterConfigSynchronization>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800812a:	f000 fd8b 	bl	8008c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800812e:	2300      	movs	r3, #0
 8008130:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008136:	2300      	movs	r3, #0
 8008138:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800813a:	2300      	movs	r3, #0
 800813c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800813e:	1d3b      	adds	r3, r7, #4
 8008140:	2200      	movs	r2, #0
 8008142:	4619      	mov	r1, r3
 8008144:	4805      	ldr	r0, [pc, #20]	; (800815c <MX_TIM2_Init+0xe0>)
 8008146:	f7fd fa2d 	bl	80055a4 <HAL_TIM_OC_ConfigChannel>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8008150:	f000 fd78 	bl	8008c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008154:	bf00      	nop
 8008156:	3738      	adds	r7, #56	; 0x38
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	20000760 	.word	0x20000760

08008160 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b08c      	sub	sp, #48	; 0x30
 8008164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8008166:	f107 030c 	add.w	r3, r7, #12
 800816a:	2224      	movs	r2, #36	; 0x24
 800816c:	2100      	movs	r1, #0
 800816e:	4618      	mov	r0, r3
 8008170:	f001 fadc 	bl	800972c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008174:	1d3b      	adds	r3, r7, #4
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800817c:	4b22      	ldr	r3, [pc, #136]	; (8008208 <MX_TIM8_Init+0xa8>)
 800817e:	4a23      	ldr	r2, [pc, #140]	; (800820c <MX_TIM8_Init+0xac>)
 8008180:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8008182:	4b21      	ldr	r3, [pc, #132]	; (8008208 <MX_TIM8_Init+0xa8>)
 8008184:	2200      	movs	r2, #0
 8008186:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008188:	4b1f      	ldr	r3, [pc, #124]	; (8008208 <MX_TIM8_Init+0xa8>)
 800818a:	2200      	movs	r2, #0
 800818c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800818e:	4b1e      	ldr	r3, [pc, #120]	; (8008208 <MX_TIM8_Init+0xa8>)
 8008190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008194:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008196:	4b1c      	ldr	r3, [pc, #112]	; (8008208 <MX_TIM8_Init+0xa8>)
 8008198:	2200      	movs	r2, #0
 800819a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800819c:	4b1a      	ldr	r3, [pc, #104]	; (8008208 <MX_TIM8_Init+0xa8>)
 800819e:	2200      	movs	r2, #0
 80081a0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80081a2:	4b19      	ldr	r3, [pc, #100]	; (8008208 <MX_TIM8_Init+0xa8>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80081a8:	2303      	movs	r3, #3
 80081aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80081ac:	2300      	movs	r3, #0
 80081ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80081b0:	2301      	movs	r3, #1
 80081b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80081b4:	2300      	movs	r3, #0
 80081b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80081bc:	2300      	movs	r3, #0
 80081be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80081c0:	2301      	movs	r3, #1
 80081c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80081c4:	2300      	movs	r3, #0
 80081c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80081cc:	f107 030c 	add.w	r3, r7, #12
 80081d0:	4619      	mov	r1, r3
 80081d2:	480d      	ldr	r0, [pc, #52]	; (8008208 <MX_TIM8_Init+0xa8>)
 80081d4:	f7fc fff5 	bl	80051c2 <HAL_TIM_Encoder_Init>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80081de:	f000 fd31 	bl	8008c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80081e2:	2320      	movs	r3, #32
 80081e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081e6:	2300      	movs	r3, #0
 80081e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80081ea:	1d3b      	adds	r3, r7, #4
 80081ec:	4619      	mov	r1, r3
 80081ee:	4806      	ldr	r0, [pc, #24]	; (8008208 <MX_TIM8_Init+0xa8>)
 80081f0:	f7fe f8de 	bl	80063b0 <HAL_TIMEx_MasterConfigSynchronization>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80081fa:	f000 fd23 	bl	8008c44 <Error_Handler>
  //HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); // this didn't seem to be necessary


  /* USER CODE END TIM8_Init 2 */

}
 80081fe:	bf00      	nop
 8008200:	3730      	adds	r7, #48	; 0x30
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	20000480 	.word	0x20000480
 800820c:	40010400 	.word	0x40010400

08008210 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b08c      	sub	sp, #48	; 0x30
 8008214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008216:	f107 0320 	add.w	r3, r7, #32
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	605a      	str	r2, [r3, #4]
 8008220:	609a      	str	r2, [r3, #8]
 8008222:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008224:	1d3b      	adds	r3, r7, #4
 8008226:	2200      	movs	r2, #0
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	605a      	str	r2, [r3, #4]
 800822c:	609a      	str	r2, [r3, #8]
 800822e:	60da      	str	r2, [r3, #12]
 8008230:	611a      	str	r2, [r3, #16]
 8008232:	615a      	str	r2, [r3, #20]
 8008234:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8008236:	4b2d      	ldr	r3, [pc, #180]	; (80082ec <MX_TIM9_Init+0xdc>)
 8008238:	4a2d      	ldr	r2, [pc, #180]	; (80082f0 <MX_TIM9_Init+0xe0>)
 800823a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2;
 800823c:	4b2b      	ldr	r3, [pc, #172]	; (80082ec <MX_TIM9_Init+0xdc>)
 800823e:	2202      	movs	r2, #2
 8008240:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008242:	4b2a      	ldr	r3, [pc, #168]	; (80082ec <MX_TIM9_Init+0xdc>)
 8008244:	2200      	movs	r2, #0
 8008246:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096;
 8008248:	4b28      	ldr	r3, [pc, #160]	; (80082ec <MX_TIM9_Init+0xdc>)
 800824a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800824e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008250:	4b26      	ldr	r3, [pc, #152]	; (80082ec <MX_TIM9_Init+0xdc>)
 8008252:	2200      	movs	r2, #0
 8008254:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008256:	4b25      	ldr	r3, [pc, #148]	; (80082ec <MX_TIM9_Init+0xdc>)
 8008258:	2200      	movs	r2, #0
 800825a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800825c:	4823      	ldr	r0, [pc, #140]	; (80082ec <MX_TIM9_Init+0xdc>)
 800825e:	f7fc fe69 	bl	8004f34 <HAL_TIM_Base_Init>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d001      	beq.n	800826c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8008268:	f000 fcec 	bl	8008c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800826c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008270:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8008272:	f107 0320 	add.w	r3, r7, #32
 8008276:	4619      	mov	r1, r3
 8008278:	481c      	ldr	r0, [pc, #112]	; (80082ec <MX_TIM9_Init+0xdc>)
 800827a:	f7fd fb55 	bl	8005928 <HAL_TIM_ConfigClockSource>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8008284:	f000 fcde 	bl	8008c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8008288:	4818      	ldr	r0, [pc, #96]	; (80082ec <MX_TIM9_Init+0xdc>)
 800828a:	f7fc fef1 	bl	8005070 <HAL_TIM_PWM_Init>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8008294:	f000 fcd6 	bl	8008c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008298:	2360      	movs	r3, #96	; 0x60
 800829a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800829c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80082a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80082a2:	2300      	movs	r3, #0
 80082a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80082aa:	1d3b      	adds	r3, r7, #4
 80082ac:	2200      	movs	r2, #0
 80082ae:	4619      	mov	r1, r3
 80082b0:	480e      	ldr	r0, [pc, #56]	; (80082ec <MX_TIM9_Init+0xdc>)
 80082b2:	f7fd fa73 	bl	800579c <HAL_TIM_PWM_ConfigChannel>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 80082bc:	f000 fcc2 	bl	8008c44 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 80082c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80082c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80082c6:	1d3b      	adds	r3, r7, #4
 80082c8:	2204      	movs	r2, #4
 80082ca:	4619      	mov	r1, r3
 80082cc:	4807      	ldr	r0, [pc, #28]	; (80082ec <MX_TIM9_Init+0xdc>)
 80082ce:	f7fd fa65 	bl	800579c <HAL_TIM_PWM_ConfigChannel>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <MX_TIM9_Init+0xcc>
  {
    Error_Handler();
 80082d8:	f000 fcb4 	bl	8008c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80082dc:	4803      	ldr	r0, [pc, #12]	; (80082ec <MX_TIM9_Init+0xdc>)
 80082de:	f000 ffef 	bl	80092c0 <HAL_TIM_MspPostInit>

}
 80082e2:	bf00      	nop
 80082e4:	3730      	adds	r7, #48	; 0x30
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	20000720 	.word	0x20000720
 80082f0:	40014000 	.word	0x40014000

080082f4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08c      	sub	sp, #48	; 0x30
 80082f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80082fa:	f107 0320 	add.w	r3, r7, #32
 80082fe:	2200      	movs	r2, #0
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	605a      	str	r2, [r3, #4]
 8008304:	609a      	str	r2, [r3, #8]
 8008306:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008308:	1d3b      	adds	r3, r7, #4
 800830a:	2200      	movs	r2, #0
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	605a      	str	r2, [r3, #4]
 8008310:	609a      	str	r2, [r3, #8]
 8008312:	60da      	str	r2, [r3, #12]
 8008314:	611a      	str	r2, [r3, #16]
 8008316:	615a      	str	r2, [r3, #20]
 8008318:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800831a:	4b24      	ldr	r3, [pc, #144]	; (80083ac <MX_TIM12_Init+0xb8>)
 800831c:	4a24      	ldr	r2, [pc, #144]	; (80083b0 <MX_TIM12_Init+0xbc>)
 800831e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 4;
 8008320:	4b22      	ldr	r3, [pc, #136]	; (80083ac <MX_TIM12_Init+0xb8>)
 8008322:	2204      	movs	r2, #4
 8008324:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008326:	4b21      	ldr	r3, [pc, #132]	; (80083ac <MX_TIM12_Init+0xb8>)
 8008328:	2200      	movs	r2, #0
 800832a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800832c:	4b1f      	ldr	r3, [pc, #124]	; (80083ac <MX_TIM12_Init+0xb8>)
 800832e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008332:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008334:	4b1d      	ldr	r3, [pc, #116]	; (80083ac <MX_TIM12_Init+0xb8>)
 8008336:	2200      	movs	r2, #0
 8008338:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800833a:	4b1c      	ldr	r3, [pc, #112]	; (80083ac <MX_TIM12_Init+0xb8>)
 800833c:	2200      	movs	r2, #0
 800833e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8008340:	481a      	ldr	r0, [pc, #104]	; (80083ac <MX_TIM12_Init+0xb8>)
 8008342:	f7fc fdf7 	bl	8004f34 <HAL_TIM_Base_Init>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800834c:	f000 fc7a 	bl	8008c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008354:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8008356:	f107 0320 	add.w	r3, r7, #32
 800835a:	4619      	mov	r1, r3
 800835c:	4813      	ldr	r0, [pc, #76]	; (80083ac <MX_TIM12_Init+0xb8>)
 800835e:	f7fd fae3 	bl	8005928 <HAL_TIM_ConfigClockSource>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8008368:	f000 fc6c 	bl	8008c44 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 800836c:	480f      	ldr	r0, [pc, #60]	; (80083ac <MX_TIM12_Init+0xb8>)
 800836e:	f7fc fe0c 	bl	8004f8a <HAL_TIM_OC_Init>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8008378:	f000 fc64 	bl	8008c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800837c:	2300      	movs	r3, #0
 800837e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008384:	2300      	movs	r3, #0
 8008386:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008388:	2300      	movs	r3, #0
 800838a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800838c:	1d3b      	adds	r3, r7, #4
 800838e:	2200      	movs	r2, #0
 8008390:	4619      	mov	r1, r3
 8008392:	4806      	ldr	r0, [pc, #24]	; (80083ac <MX_TIM12_Init+0xb8>)
 8008394:	f7fd f906 	bl	80055a4 <HAL_TIM_OC_ConfigChannel>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800839e:	f000 fc51 	bl	8008c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80083a2:	bf00      	nop
 80083a4:	3730      	adds	r7, #48	; 0x30
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	200007c8 	.word	0x200007c8
 80083b0:	40001800 	.word	0x40001800

080083b4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80083ba:	463b      	mov	r3, r7
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	605a      	str	r2, [r3, #4]
 80083c2:	609a      	str	r2, [r3, #8]
 80083c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80083c6:	4b1c      	ldr	r3, [pc, #112]	; (8008438 <MX_TIM13_Init+0x84>)
 80083c8:	4a1c      	ldr	r2, [pc, #112]	; (800843c <MX_TIM13_Init+0x88>)
 80083ca:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80083cc:	4b1a      	ldr	r3, [pc, #104]	; (8008438 <MX_TIM13_Init+0x84>)
 80083ce:	2200      	movs	r2, #0
 80083d0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083d2:	4b19      	ldr	r3, [pc, #100]	; (8008438 <MX_TIM13_Init+0x84>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 80083d8:	4b17      	ldr	r3, [pc, #92]	; (8008438 <MX_TIM13_Init+0x84>)
 80083da:	2200      	movs	r2, #0
 80083dc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083de:	4b16      	ldr	r3, [pc, #88]	; (8008438 <MX_TIM13_Init+0x84>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083e4:	4b14      	ldr	r3, [pc, #80]	; (8008438 <MX_TIM13_Init+0x84>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80083ea:	4813      	ldr	r0, [pc, #76]	; (8008438 <MX_TIM13_Init+0x84>)
 80083ec:	f7fc fda2 	bl	8004f34 <HAL_TIM_Base_Init>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <MX_TIM13_Init+0x46>
  {
    Error_Handler();
 80083f6:	f000 fc25 	bl	8008c44 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 80083fa:	480f      	ldr	r0, [pc, #60]	; (8008438 <MX_TIM13_Init+0x84>)
 80083fc:	f7fc feac 	bl	8005158 <HAL_TIM_IC_Init>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <MX_TIM13_Init+0x56>
  {
    Error_Handler();
 8008406:	f000 fc1d 	bl	8008c44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800840a:	2300      	movs	r3, #0
 800840c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800840e:	2301      	movs	r3, #1
 8008410:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008412:	2300      	movs	r3, #0
 8008414:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800841a:	463b      	mov	r3, r7
 800841c:	2200      	movs	r2, #0
 800841e:	4619      	mov	r1, r3
 8008420:	4805      	ldr	r0, [pc, #20]	; (8008438 <MX_TIM13_Init+0x84>)
 8008422:	f7fd f91f 	bl	8005664 <HAL_TIM_IC_ConfigChannel>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <MX_TIM13_Init+0x7c>
  {
    Error_Handler();
 800842c:	f000 fc0a 	bl	8008c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8008430:	bf00      	nop
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	2000069c 	.word	0x2000069c
 800843c:	40001c00 	.word	0x40001c00

08008440 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008444:	4b11      	ldr	r3, [pc, #68]	; (800848c <MX_USART3_UART_Init+0x4c>)
 8008446:	4a12      	ldr	r2, [pc, #72]	; (8008490 <MX_USART3_UART_Init+0x50>)
 8008448:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800844a:	4b10      	ldr	r3, [pc, #64]	; (800848c <MX_USART3_UART_Init+0x4c>)
 800844c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008450:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008452:	4b0e      	ldr	r3, [pc, #56]	; (800848c <MX_USART3_UART_Init+0x4c>)
 8008454:	2200      	movs	r2, #0
 8008456:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008458:	4b0c      	ldr	r3, [pc, #48]	; (800848c <MX_USART3_UART_Init+0x4c>)
 800845a:	2200      	movs	r2, #0
 800845c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800845e:	4b0b      	ldr	r3, [pc, #44]	; (800848c <MX_USART3_UART_Init+0x4c>)
 8008460:	2200      	movs	r2, #0
 8008462:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008464:	4b09      	ldr	r3, [pc, #36]	; (800848c <MX_USART3_UART_Init+0x4c>)
 8008466:	220c      	movs	r2, #12
 8008468:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800846a:	4b08      	ldr	r3, [pc, #32]	; (800848c <MX_USART3_UART_Init+0x4c>)
 800846c:	2200      	movs	r2, #0
 800846e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008470:	4b06      	ldr	r3, [pc, #24]	; (800848c <MX_USART3_UART_Init+0x4c>)
 8008472:	2200      	movs	r2, #0
 8008474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008476:	4805      	ldr	r0, [pc, #20]	; (800848c <MX_USART3_UART_Init+0x4c>)
 8008478:	f7fe f8a1 	bl	80065be <HAL_UART_Init>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008482:	f000 fbdf 	bl	8008c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008486:	bf00      	nop
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	200004c0 	.word	0x200004c0
 8008490:	40004800 	.word	0x40004800

08008494 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800849a:	2300      	movs	r3, #0
 800849c:	607b      	str	r3, [r7, #4]
 800849e:	4b0c      	ldr	r3, [pc, #48]	; (80084d0 <MX_DMA_Init+0x3c>)
 80084a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a2:	4a0b      	ldr	r2, [pc, #44]	; (80084d0 <MX_DMA_Init+0x3c>)
 80084a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084a8:	6313      	str	r3, [r2, #48]	; 0x30
 80084aa:	4b09      	ldr	r3, [pc, #36]	; (80084d0 <MX_DMA_Init+0x3c>)
 80084ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084b2:	607b      	str	r3, [r7, #4]
 80084b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80084b6:	2200      	movs	r2, #0
 80084b8:	2100      	movs	r1, #0
 80084ba:	200e      	movs	r0, #14
 80084bc:	f7f9 fcdb 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80084c0:	200e      	movs	r0, #14
 80084c2:	f7f9 fcf4 	bl	8001eae <HAL_NVIC_EnableIRQ>

}
 80084c6:	bf00      	nop
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	40023800 	.word	0x40023800

080084d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08c      	sub	sp, #48	; 0x30
 80084d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084da:	f107 031c 	add.w	r3, r7, #28
 80084de:	2200      	movs	r2, #0
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	605a      	str	r2, [r3, #4]
 80084e4:	609a      	str	r2, [r3, #8]
 80084e6:	60da      	str	r2, [r3, #12]
 80084e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80084ea:	2300      	movs	r3, #0
 80084ec:	61bb      	str	r3, [r7, #24]
 80084ee:	4b57      	ldr	r3, [pc, #348]	; (800864c <MX_GPIO_Init+0x178>)
 80084f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f2:	4a56      	ldr	r2, [pc, #344]	; (800864c <MX_GPIO_Init+0x178>)
 80084f4:	f043 0310 	orr.w	r3, r3, #16
 80084f8:	6313      	str	r3, [r2, #48]	; 0x30
 80084fa:	4b54      	ldr	r3, [pc, #336]	; (800864c <MX_GPIO_Init+0x178>)
 80084fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fe:	f003 0310 	and.w	r3, r3, #16
 8008502:	61bb      	str	r3, [r7, #24]
 8008504:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008506:	2300      	movs	r3, #0
 8008508:	617b      	str	r3, [r7, #20]
 800850a:	4b50      	ldr	r3, [pc, #320]	; (800864c <MX_GPIO_Init+0x178>)
 800850c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850e:	4a4f      	ldr	r2, [pc, #316]	; (800864c <MX_GPIO_Init+0x178>)
 8008510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008514:	6313      	str	r3, [r2, #48]	; 0x30
 8008516:	4b4d      	ldr	r3, [pc, #308]	; (800864c <MX_GPIO_Init+0x178>)
 8008518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800851e:	617b      	str	r3, [r7, #20]
 8008520:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008522:	2300      	movs	r3, #0
 8008524:	613b      	str	r3, [r7, #16]
 8008526:	4b49      	ldr	r3, [pc, #292]	; (800864c <MX_GPIO_Init+0x178>)
 8008528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852a:	4a48      	ldr	r2, [pc, #288]	; (800864c <MX_GPIO_Init+0x178>)
 800852c:	f043 0304 	orr.w	r3, r3, #4
 8008530:	6313      	str	r3, [r2, #48]	; 0x30
 8008532:	4b46      	ldr	r3, [pc, #280]	; (800864c <MX_GPIO_Init+0x178>)
 8008534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008536:	f003 0304 	and.w	r3, r3, #4
 800853a:	613b      	str	r3, [r7, #16]
 800853c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800853e:	2300      	movs	r3, #0
 8008540:	60fb      	str	r3, [r7, #12]
 8008542:	4b42      	ldr	r3, [pc, #264]	; (800864c <MX_GPIO_Init+0x178>)
 8008544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008546:	4a41      	ldr	r2, [pc, #260]	; (800864c <MX_GPIO_Init+0x178>)
 8008548:	f043 0301 	orr.w	r3, r3, #1
 800854c:	6313      	str	r3, [r2, #48]	; 0x30
 800854e:	4b3f      	ldr	r3, [pc, #252]	; (800864c <MX_GPIO_Init+0x178>)
 8008550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800855a:	2300      	movs	r3, #0
 800855c:	60bb      	str	r3, [r7, #8]
 800855e:	4b3b      	ldr	r3, [pc, #236]	; (800864c <MX_GPIO_Init+0x178>)
 8008560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008562:	4a3a      	ldr	r2, [pc, #232]	; (800864c <MX_GPIO_Init+0x178>)
 8008564:	f043 0302 	orr.w	r3, r3, #2
 8008568:	6313      	str	r3, [r2, #48]	; 0x30
 800856a:	4b38      	ldr	r3, [pc, #224]	; (800864c <MX_GPIO_Init+0x178>)
 800856c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856e:	f003 0302 	and.w	r3, r3, #2
 8008572:	60bb      	str	r3, [r7, #8]
 8008574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008576:	2300      	movs	r3, #0
 8008578:	607b      	str	r3, [r7, #4]
 800857a:	4b34      	ldr	r3, [pc, #208]	; (800864c <MX_GPIO_Init+0x178>)
 800857c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800857e:	4a33      	ldr	r2, [pc, #204]	; (800864c <MX_GPIO_Init+0x178>)
 8008580:	f043 0308 	orr.w	r3, r3, #8
 8008584:	6313      	str	r3, [r2, #48]	; 0x30
 8008586:	4b31      	ldr	r3, [pc, #196]	; (800864c <MX_GPIO_Init+0x178>)
 8008588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858a:	f003 0308 	and.w	r3, r3, #8
 800858e:	607b      	str	r3, [r7, #4]
 8008590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin, GPIO_PIN_RESET);
 8008592:	2200      	movs	r2, #0
 8008594:	f24c 0118 	movw	r1, #49176	; 0xc018
 8008598:	482d      	ldr	r0, [pc, #180]	; (8008650 <MX_GPIO_Init+0x17c>)
 800859a:	f7fa fa21 	bl	80029e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 800859e:	2200      	movs	r2, #0
 80085a0:	f64b 0180 	movw	r1, #47232	; 0xb880
 80085a4:	482b      	ldr	r0, [pc, #172]	; (8008654 <MX_GPIO_Init+0x180>)
 80085a6:	f7fa fa1b 	bl	80029e0 <HAL_GPIO_WritePin>
                          |nSCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin EN_GATE_Pin M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin;
 80085aa:	f24c 0318 	movw	r3, #49176	; 0xc018
 80085ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085b0:	2301      	movs	r3, #1
 80085b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085b4:	2300      	movs	r3, #0
 80085b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085b8:	2300      	movs	r3, #0
 80085ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80085bc:	f107 031c 	add.w	r3, r7, #28
 80085c0:	4619      	mov	r1, r3
 80085c2:	4823      	ldr	r0, [pc, #140]	; (8008650 <MX_GPIO_Init+0x17c>)
 80085c4:	f7fa f872 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 debug1_out_Pin debug2_out_Pin ROT0_nCS_Pin 
                           nSCS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 80085c8:	f64b 0380 	movw	r3, #47232	; 0xb880
 80085cc:	61fb      	str	r3, [r7, #28]
                          |nSCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085ce:	2301      	movs	r3, #1
 80085d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085d2:	2300      	movs	r3, #0
 80085d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085d6:	2300      	movs	r3, #0
 80085d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80085da:	f107 031c 	add.w	r3, r7, #28
 80085de:	4619      	mov	r1, r3
 80085e0:	481c      	ldr	r0, [pc, #112]	; (8008654 <MX_GPIO_Init+0x180>)
 80085e2:	f7fa f863 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : debug1_in_Pin */
  GPIO_InitStruct.Pin = debug1_in_Pin;
 80085e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085ec:	2300      	movs	r3, #0
 80085ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f0:	2300      	movs	r3, #0
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(debug1_in_GPIO_Port, &GPIO_InitStruct);
 80085f4:	f107 031c 	add.w	r3, r7, #28
 80085f8:	4619      	mov	r1, r3
 80085fa:	4816      	ldr	r0, [pc, #88]	; (8008654 <MX_GPIO_Init+0x180>)
 80085fc:	f7fa f856 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT0_I_W_Pin */
  GPIO_InitStruct.Pin = ROT0_I_W_Pin;
 8008600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008606:	4b14      	ldr	r3, [pc, #80]	; (8008658 <MX_GPIO_Init+0x184>)
 8008608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800860a:	2300      	movs	r3, #0
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ROT0_I_W_GPIO_Port, &GPIO_InitStruct);
 800860e:	f107 031c 	add.w	r3, r7, #28
 8008612:	4619      	mov	r1, r3
 8008614:	4811      	ldr	r0, [pc, #68]	; (800865c <MX_GPIO_Init+0x188>)
 8008616:	f7fa f849 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 800861a:	2370      	movs	r3, #112	; 0x70
 800861c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800861e:	2300      	movs	r3, #0
 8008620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008622:	2301      	movs	r3, #1
 8008624:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008626:	f107 031c 	add.w	r3, r7, #28
 800862a:	4619      	mov	r1, r3
 800862c:	4809      	ldr	r0, [pc, #36]	; (8008654 <MX_GPIO_Init+0x180>)
 800862e:	f7fa f83d 	bl	80026ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8008632:	2200      	movs	r2, #0
 8008634:	2100      	movs	r1, #0
 8008636:	2017      	movs	r0, #23
 8008638:	f7f9 fc1d 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800863c:	2017      	movs	r0, #23
 800863e:	f7f9 fc36 	bl	8001eae <HAL_NVIC_EnableIRQ>

}
 8008642:	bf00      	nop
 8008644:	3730      	adds	r7, #48	; 0x30
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	40023800 	.word	0x40023800
 8008650:	40021000 	.word	0x40021000
 8008654:	40020c00 	.word	0x40020c00
 8008658:	10110000 	.word	0x10110000
 800865c:	40020800 	.word	0x40020800

08008660 <playSound>:
void myDelay(void){
	HAL_Delay(1);

}

void playSound(uint16_t periode, uint16_t volume, uint16_t cycles){
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	4603      	mov	r3, r0
 8008668:	80fb      	strh	r3, [r7, #6]
 800866a:	460b      	mov	r3, r1
 800866c:	80bb      	strh	r3, [r7, #4]
 800866e:	4613      	mov	r3, r2
 8008670:	807b      	strh	r3, [r7, #2]
	// TODO disable interrupt for the duration of sound
	//HAL_NVIC_DisableIRQ(TIM8_UP_TIM13_IRQn);
	//HAL_Delay(1000);

	for (uint16_t i=0; i<cycles; i++){
 8008672:	2300      	movs	r3, #0
 8008674:	81fb      	strh	r3, [r7, #14]
 8008676:	e016      	b.n	80086a6 <playSound+0x46>
		TIM1->CCR1 = 0; //takes<150ns
 8008678:	4b0f      	ldr	r3, [pc, #60]	; (80086b8 <playSound+0x58>)
 800867a:	2200      	movs	r2, #0
 800867c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = volume; //takes<150ns
 800867e:	4a0e      	ldr	r2, [pc, #56]	; (80086b8 <playSound+0x58>)
 8008680:	88bb      	ldrh	r3, [r7, #4]
 8008682:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_Delay(periode);
 8008684:	88fb      	ldrh	r3, [r7, #6]
 8008686:	4618      	mov	r0, r3
 8008688:	f7f8 fcda 	bl	8001040 <HAL_Delay>
		TIM1->CCR1 = volume; //takes<150ns
 800868c:	4a0a      	ldr	r2, [pc, #40]	; (80086b8 <playSound+0x58>)
 800868e:	88bb      	ldrh	r3, [r7, #4]
 8008690:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = 0; //takes<150ns
 8008692:	4b09      	ldr	r3, [pc, #36]	; (80086b8 <playSound+0x58>)
 8008694:	2200      	movs	r2, #0
 8008696:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(periode);
 8008698:	88fb      	ldrh	r3, [r7, #6]
 800869a:	4618      	mov	r0, r3
 800869c:	f7f8 fcd0 	bl	8001040 <HAL_Delay>
	for (uint16_t i=0; i<cycles; i++){
 80086a0:	89fb      	ldrh	r3, [r7, #14]
 80086a2:	3301      	adds	r3, #1
 80086a4:	81fb      	strh	r3, [r7, #14]
 80086a6:	89fa      	ldrh	r2, [r7, #14]
 80086a8:	887b      	ldrh	r3, [r7, #2]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d3e4      	bcc.n	8008678 <playSound+0x18>
	}

	//HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
}
 80086ae:	bf00      	nop
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	40010000 	.word	0x40010000

080086bc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT0_I_W_Pin){
 80086c6:	88fb      	ldrh	r3, [r7, #6]
 80086c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086cc:	d107      	bne.n	80086de <HAL_GPIO_EXTI_Callback+0x22>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 80086ce:	2108      	movs	r1, #8
 80086d0:	4805      	ldr	r0, [pc, #20]	; (80086e8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80086d2:	f7fa f99e 	bl	8002a12 <HAL_GPIO_TogglePin>
		TIM8->CNT = 0;     //TODO: there is acually some stepping happening under the I pulse so we have to distinguish between step from right and step from left
 80086d6:	4b05      	ldr	r3, [pc, #20]	; (80086ec <HAL_GPIO_EXTI_Callback+0x30>)
 80086d8:	2200      	movs	r2, #0
 80086da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	else{
		__NOP();
	}
}
 80086dc:	e000      	b.n	80086e0 <HAL_GPIO_EXTI_Callback+0x24>
		__NOP();
 80086de:	bf00      	nop
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	40021000 	.word	0x40021000
 80086ec:	40010400 	.word	0x40010400

080086f0 <HAL_TIM_IC_CaptureCallback>:



//this is it
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80086f0:	b5b0      	push	{r4, r5, r7, lr}
 80086f2:	b088      	sub	sp, #32
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
	// see https://community.st.com/s/question/0D50X00009XkWUpSAN/encoder-mode-and-rotary-encoder

	//debug2_out_GPIO_Port->BSRR = debug2_out_Pin; //takes 60ns == 5 clock cycles
	//debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin << 16U;
	//HAL_GPIO_TogglePin(debug2_out_GPIO_Port, debug2_out_Pin);
	if(htim->Instance == TIM8){
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4ab2      	ldr	r2, [pc, #712]	; (80089c8 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	f040 8211 	bne.w	8008b26 <HAL_TIM_IC_CaptureCallback+0x436>

		if (skip_update){ //TODO somehow the Callback is triggered at this strange 25% duty cycle so we just look at every second update to get a constant frequency
 8008704:	4bb1      	ldr	r3, [pc, #708]	; (80089cc <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <HAL_TIM_IC_CaptureCallback+0x24>
			skip_update = 0;
 800870c:	4baf      	ldr	r3, [pc, #700]	; (80089cc <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]
	}


	//counterISR++;

}
 8008712:	e208      	b.n	8008b26 <HAL_TIM_IC_CaptureCallback+0x436>
			skip_update = 1;
 8008714:	4bad      	ldr	r3, [pc, #692]	; (80089cc <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8008716:	2201      	movs	r2, #1
 8008718:	601a      	str	r2, [r3, #0]
			if (abs(av_velocity) > 5 &&  skip_update_high_v == 1){
 800871a:	4bad      	ldr	r3, [pc, #692]	; (80089d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800871c:	edd3 7a00 	vldr	s15, [r3]
 8008720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008724:	ee17 3a90 	vmov	r3, s15
 8008728:	2b00      	cmp	r3, #0
 800872a:	bfb8      	it	lt
 800872c:	425b      	neglt	r3, r3
 800872e:	2b05      	cmp	r3, #5
 8008730:	dd07      	ble.n	8008742 <HAL_TIM_IC_CaptureCallback+0x52>
 8008732:	4ba8      	ldr	r3, [pc, #672]	; (80089d4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d103      	bne.n	8008742 <HAL_TIM_IC_CaptureCallback+0x52>
				skip_update_high_v = 0;
 800873a:	4ba6      	ldr	r3, [pc, #664]	; (80089d4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]
}
 8008740:	e1f1      	b.n	8008b26 <HAL_TIM_IC_CaptureCallback+0x436>
				debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8008742:	4ba5      	ldr	r3, [pc, #660]	; (80089d8 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8008744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008748:	619a      	str	r2, [r3, #24]
				skip_update_high_v = 1;
 800874a:	4ba2      	ldr	r3, [pc, #648]	; (80089d4 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800874c:	2201      	movs	r2, #1
 800874e:	601a      	str	r2, [r3, #0]
				EncVal = TIM8->CNT;//takes 200ns
 8008750:	4b9d      	ldr	r3, [pc, #628]	; (80089c8 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	b21a      	sxth	r2, r3
 8008756:	4ba1      	ldr	r3, [pc, #644]	; (80089dc <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8008758:	801a      	strh	r2, [r3, #0]
				tim12_counter = TIM2->CNT;
 800875a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800875e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008760:	4a9f      	ldr	r2, [pc, #636]	; (80089e0 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8008762:	6013      	str	r3, [r2, #0]
				if (tim12_counter > 10000){ // TODO fix the issue that this gets almost never called when velocity is super low.
 8008764:	4b9e      	ldr	r3, [pc, #632]	; (80089e0 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f242 7210 	movw	r2, #10000	; 0x2710
 800876c:	4293      	cmp	r3, r2
 800876e:	d963      	bls.n	8008838 <HAL_TIM_IC_CaptureCallback+0x148>
					TIM2->CNT = 0;
 8008770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008774:	2200      	movs	r2, #0
 8008776:	625a      	str	r2, [r3, #36]	; 0x24
					int EncDiff = EncVal-last_EncVal;
 8008778:	4b98      	ldr	r3, [pc, #608]	; (80089dc <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800877a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800877e:	461a      	mov	r2, r3
 8008780:	4b98      	ldr	r3, [pc, #608]	; (80089e4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8008782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	61fb      	str	r3, [r7, #28]
					if (EncDiff > 1000){ // if jump is more than a half rotation it's most likely the 0 crossing
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008790:	dd04      	ble.n	800879c <HAL_TIM_IC_CaptureCallback+0xac>
						EncDiff -= 2000;
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8008798:	61fb      	str	r3, [r7, #28]
 800879a:	e007      	b.n	80087ac <HAL_TIM_IC_CaptureCallback+0xbc>
					else if (EncDiff < -1000){
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80087a2:	da03      	bge.n	80087ac <HAL_TIM_IC_CaptureCallback+0xbc>
						EncDiff += 2000;
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80087aa:	61fb      	str	r3, [r7, #28]
					velocity = (float)(EncDiff) / (float)tim12_counter;
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	ee07 3a90 	vmov	s15, r3
 80087b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80087b6:	4b8a      	ldr	r3, [pc, #552]	; (80089e0 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	ee07 3a90 	vmov	s15, r3
 80087be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80087c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087c6:	4b88      	ldr	r3, [pc, #544]	; (80089e8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80087c8:	edc3 7a00 	vstr	s15, [r3]
					velocity *= 10500; // /2000 steps/rotation / 21000000 counts/sec  //TODO velocity seems too high by factor of 2 or 3 maybe same clock frequency issue that we actually run at 42 MHz. !!! TODO check clock frequency  // TODO divided by 10 as well
 80087cc:	4b86      	ldr	r3, [pc, #536]	; (80089e8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80087ce:	edd3 7a00 	vldr	s15, [r3]
 80087d2:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80089ec <HAL_TIM_IC_CaptureCallback+0x2fc>
 80087d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087da:	4b83      	ldr	r3, [pc, #524]	; (80089e8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80087dc:	edc3 7a00 	vstr	s15, [r3]
					av_velocity = 0.95 * av_velocity + 0.05 * velocity;
 80087e0:	4b7b      	ldr	r3, [pc, #492]	; (80089d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7f7 feaf 	bl	8000548 <__aeabi_f2d>
 80087ea:	a371      	add	r3, pc, #452	; (adr r3, 80089b0 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	f7f7 ff02 	bl	80005f8 <__aeabi_dmul>
 80087f4:	4603      	mov	r3, r0
 80087f6:	460c      	mov	r4, r1
 80087f8:	4625      	mov	r5, r4
 80087fa:	461c      	mov	r4, r3
 80087fc:	4b7a      	ldr	r3, [pc, #488]	; (80089e8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4618      	mov	r0, r3
 8008802:	f7f7 fea1 	bl	8000548 <__aeabi_f2d>
 8008806:	a36c      	add	r3, pc, #432	; (adr r3, 80089b8 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8008808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880c:	f7f7 fef4 	bl	80005f8 <__aeabi_dmul>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4620      	mov	r0, r4
 8008816:	4629      	mov	r1, r5
 8008818:	f7f7 fd38 	bl	800028c <__adddf3>
 800881c:	4603      	mov	r3, r0
 800881e:	460c      	mov	r4, r1
 8008820:	4618      	mov	r0, r3
 8008822:	4621      	mov	r1, r4
 8008824:	f7f8 f9ca 	bl	8000bbc <__aeabi_d2f>
 8008828:	4602      	mov	r2, r0
 800882a:	4b69      	ldr	r3, [pc, #420]	; (80089d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800882c:	601a      	str	r2, [r3, #0]
					last_EncVal = EncVal;
 800882e:	4b6b      	ldr	r3, [pc, #428]	; (80089dc <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8008830:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008834:	4b6b      	ldr	r3, [pc, #428]	; (80089e4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8008836:	801a      	strh	r2, [r3, #0]
				phase = (float) EncVal * 0.02199 ; //(float) EncVal / 2000.0 * 2*PI * 7 ; //takes 1500ns
 8008838:	4b68      	ldr	r3, [pc, #416]	; (80089dc <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800883a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008846:	ee17 0a90 	vmov	r0, s15
 800884a:	f7f7 fe7d 	bl	8000548 <__aeabi_f2d>
 800884e:	a35c      	add	r3, pc, #368	; (adr r3, 80089c0 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	f7f7 fed0 	bl	80005f8 <__aeabi_dmul>
 8008858:	4603      	mov	r3, r0
 800885a:	460c      	mov	r4, r1
 800885c:	4618      	mov	r0, r3
 800885e:	4621      	mov	r1, r4
 8008860:	f7f8 f9ac 	bl	8000bbc <__aeabi_d2f>
 8008864:	4602      	mov	r2, r0
 8008866:	4b62      	ldr	r3, [pc, #392]	; (80089f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 8008868:	601a      	str	r2, [r3, #0]
				phase -= phase0;
 800886a:	4b61      	ldr	r3, [pc, #388]	; (80089f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 800886c:	ed93 7a00 	vldr	s14, [r3]
 8008870:	4b60      	ldr	r3, [pc, #384]	; (80089f4 <HAL_TIM_IC_CaptureCallback+0x304>)
 8008872:	edd3 7a00 	vldr	s15, [r3]
 8008876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800887a:	4b5d      	ldr	r3, [pc, #372]	; (80089f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 800887c:	edc3 7a00 	vstr	s15, [r3]
				float u0 = 0.5773; //0.5 * 2.0 / 1.73205;// maximal possible U on one coil thanks to wankel //takes<200ns
 8008880:	4b5d      	ldr	r3, [pc, #372]	; (80089f8 <HAL_TIM_IC_CaptureCallback+0x308>)
 8008882:	60fb      	str	r3, [r7, #12]
				float modified_amp = amp + stiffness * av_velocity * direction; // TODO the abs allows same stiffness to make it softer for both directions - without a signchange is needed BUT turnaround is super aggressive now :( SAME issue with direction - super forceful reverse but sign identical --- looks like v needs to direct also the phase !!!!
 8008884:	4b5d      	ldr	r3, [pc, #372]	; (80089fc <HAL_TIM_IC_CaptureCallback+0x30c>)
 8008886:	ed93 7a00 	vldr	s14, [r3]
 800888a:	4b51      	ldr	r3, [pc, #324]	; (80089d0 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800888c:	edd3 7a00 	vldr	s15, [r3]
 8008890:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008894:	4b5a      	ldr	r3, [pc, #360]	; (8008a00 <HAL_TIM_IC_CaptureCallback+0x310>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	ee07 3a90 	vmov	s15, r3
 800889c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088a4:	4b57      	ldr	r3, [pc, #348]	; (8008a04 <HAL_TIM_IC_CaptureCallback+0x314>)
 80088a6:	edd3 7a00 	vldr	s15, [r3]
 80088aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088ae:	edc7 7a02 	vstr	s15, [r7, #8]
				u0 *= modified_amp;  //takes<200ns
 80088b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80088b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80088ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088be:	edc7 7a03 	vstr	s15, [r7, #12]
				u0 *= run_motor;  //takes<200ns
 80088c2:	4b51      	ldr	r3, [pc, #324]	; (8008a08 <HAL_TIM_IC_CaptureCallback+0x318>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	ee07 3a90 	vmov	s15, r3
 80088ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80088d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d6:	edc7 7a03 	vstr	s15, [r7, #12]
				if (direction == 1){
 80088da:	4b49      	ldr	r3, [pc, #292]	; (8008a00 <HAL_TIM_IC_CaptureCallback+0x310>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d10b      	bne.n	80088fa <HAL_TIM_IC_CaptureCallback+0x20a>
					phase -= phase_shift;  //takes<200ns
 80088e2:	4b43      	ldr	r3, [pc, #268]	; (80089f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 80088e4:	ed93 7a00 	vldr	s14, [r3]
 80088e8:	4b48      	ldr	r3, [pc, #288]	; (8008a0c <HAL_TIM_IC_CaptureCallback+0x31c>)
 80088ea:	edd3 7a00 	vldr	s15, [r3]
 80088ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088f2:	4b3f      	ldr	r3, [pc, #252]	; (80089f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 80088f4:	edc3 7a00 	vstr	s15, [r3]
 80088f8:	e00a      	b.n	8008910 <HAL_TIM_IC_CaptureCallback+0x220>
					phase += phase_shift;
 80088fa:	4b3d      	ldr	r3, [pc, #244]	; (80089f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 80088fc:	ed93 7a00 	vldr	s14, [r3]
 8008900:	4b42      	ldr	r3, [pc, #264]	; (8008a0c <HAL_TIM_IC_CaptureCallback+0x31c>)
 8008902:	edd3 7a00 	vldr	s15, [r3]
 8008906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800890a:	4b39      	ldr	r3, [pc, #228]	; (80089f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 800890c:	edc3 7a00 	vstr	s15, [r3]
				phase *= 100;
 8008910:	4b37      	ldr	r3, [pc, #220]	; (80089f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 8008912:	edd3 7a00 	vldr	s15, [r3]
 8008916:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8008a10 <HAL_TIM_IC_CaptureCallback+0x320>
 800891a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800891e:	4b34      	ldr	r3, [pc, #208]	; (80089f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 8008920:	edc3 7a00 	vstr	s15, [r3]
				int_phase = (int) phase;
 8008924:	4b32      	ldr	r3, [pc, #200]	; (80089f0 <HAL_TIM_IC_CaptureCallback+0x300>)
 8008926:	edd3 7a00 	vldr	s15, [r3]
 800892a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800892e:	ee17 2a90 	vmov	r2, s15
 8008932:	4b38      	ldr	r3, [pc, #224]	; (8008a14 <HAL_TIM_IC_CaptureCallback+0x324>)
 8008934:	601a      	str	r2, [r3, #0]
				int_phase = int_phase % 628;
 8008936:	4b37      	ldr	r3, [pc, #220]	; (8008a14 <HAL_TIM_IC_CaptureCallback+0x324>)
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	4b37      	ldr	r3, [pc, #220]	; (8008a18 <HAL_TIM_IC_CaptureCallback+0x328>)
 800893c:	fb83 1302 	smull	r1, r3, r3, r2
 8008940:	11d9      	asrs	r1, r3, #7
 8008942:	17d3      	asrs	r3, r2, #31
 8008944:	1acb      	subs	r3, r1, r3
 8008946:	f44f 711d 	mov.w	r1, #628	; 0x274
 800894a:	fb01 f303 	mul.w	r3, r1, r3
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	4a30      	ldr	r2, [pc, #192]	; (8008a14 <HAL_TIM_IC_CaptureCallback+0x324>)
 8008952:	6013      	str	r3, [r2, #0]
				if (int_phase < 0) {
 8008954:	4b2f      	ldr	r3, [pc, #188]	; (8008a14 <HAL_TIM_IC_CaptureCallback+0x324>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	da05      	bge.n	8008968 <HAL_TIM_IC_CaptureCallback+0x278>
					int_phase += 628;
 800895c:	4b2d      	ldr	r3, [pc, #180]	; (8008a14 <HAL_TIM_IC_CaptureCallback+0x324>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8008964:	4a2b      	ldr	r2, [pc, #172]	; (8008a14 <HAL_TIM_IC_CaptureCallback+0x324>)
 8008966:	6013      	str	r3, [r2, #0]
				float uA = 0;
 8008968:	f04f 0300 	mov.w	r3, #0
 800896c:	61bb      	str	r3, [r7, #24]
				float uB = 0;
 800896e:	f04f 0300 	mov.w	r3, #0
 8008972:	617b      	str	r3, [r7, #20]
				float uC = 0;
 8008974:	f04f 0300 	mov.w	r3, #0
 8008978:	613b      	str	r3, [r7, #16]
				if  (int_phase < 210)	{ //0...209
 800897a:	4b26      	ldr	r3, [pc, #152]	; (8008a14 <HAL_TIM_IC_CaptureCallback+0x324>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2bd1      	cmp	r3, #209	; 0xd1
 8008980:	dc4e      	bgt.n	8008a20 <HAL_TIM_IC_CaptureCallback+0x330>
					uA = lookup[int_phase]; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 8008982:	4b24      	ldr	r3, [pc, #144]	; (8008a14 <HAL_TIM_IC_CaptureCallback+0x324>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a25      	ldr	r2, [pc, #148]	; (8008a1c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	61bb      	str	r3, [r7, #24]
					uB = lookup[210 - 1 - int_phase]; // takes 3mus
 8008990:	4b20      	ldr	r3, [pc, #128]	; (8008a14 <HAL_TIM_IC_CaptureCallback+0x324>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f1c3 03d1 	rsb	r3, r3, #209	; 0xd1
 8008998:	4a20      	ldr	r2, [pc, #128]	; (8008a1c <HAL_TIM_IC_CaptureCallback+0x32c>)
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	617b      	str	r3, [r7, #20]
					uC = 0;
 80089a2:	f04f 0300 	mov.w	r3, #0
 80089a6:	613b      	str	r3, [r7, #16]
 80089a8:	e06b      	b.n	8008a82 <HAL_TIM_IC_CaptureCallback+0x392>
 80089aa:	bf00      	nop
 80089ac:	f3af 8000 	nop.w
 80089b0:	66666666 	.word	0x66666666
 80089b4:	3fee6666 	.word	0x3fee6666
 80089b8:	9999999a 	.word	0x9999999a
 80089bc:	3fa99999 	.word	0x3fa99999
 80089c0:	eb5b2d4d 	.word	0xeb5b2d4d
 80089c4:	3f96848b 	.word	0x3f96848b
 80089c8:	40010400 	.word	0x40010400
 80089cc:	200000c8 	.word	0x200000c8
 80089d0:	200000b8 	.word	0x200000b8
 80089d4:	200000cc 	.word	0x200000cc
 80089d8:	40020c00 	.word	0x40020c00
 80089dc:	200006dc 	.word	0x200006dc
 80089e0:	20000020 	.word	0x20000020
 80089e4:	200005f0 	.word	0x200005f0
 80089e8:	200000b4 	.word	0x200000b4
 80089ec:	46241000 	.word	0x46241000
 80089f0:	200000ac 	.word	0x200000ac
 80089f4:	20000008 	.word	0x20000008
 80089f8:	3f13c9ef 	.word	0x3f13c9ef
 80089fc:	200000a8 	.word	0x200000a8
 8008a00:	20000018 	.word	0x20000018
 8008a04:	20000010 	.word	0x20000010
 8008a08:	20000014 	.word	0x20000014
 8008a0c:	2000001c 	.word	0x2000001c
 8008a10:	42c80000 	.word	0x42c80000
 8008a14:	200000b0 	.word	0x200000b0
 8008a18:	342da7f3 	.word	0x342da7f3
 8008a1c:	20000138 	.word	0x20000138
			 else if  (int_phase < 420){	 //210...419
 8008a20:	4b43      	ldr	r3, [pc, #268]	; (8008b30 <HAL_TIM_IC_CaptureCallback+0x440>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8008a28:	da15      	bge.n	8008a56 <HAL_TIM_IC_CaptureCallback+0x366>
					uA = 0; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 8008a2a:	f04f 0300 	mov.w	r3, #0
 8008a2e:	61bb      	str	r3, [r7, #24]
					uB = lookup[int_phase - 210]; // takes 3mus
 8008a30:	4b3f      	ldr	r3, [pc, #252]	; (8008b30 <HAL_TIM_IC_CaptureCallback+0x440>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	3bd2      	subs	r3, #210	; 0xd2
 8008a36:	4a3f      	ldr	r2, [pc, #252]	; (8008b34 <HAL_TIM_IC_CaptureCallback+0x444>)
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	617b      	str	r3, [r7, #20]
					uC = lookup[420 - 1 - int_phase];
 8008a40:	4b3b      	ldr	r3, [pc, #236]	; (8008b30 <HAL_TIM_IC_CaptureCallback+0x440>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f5c3 73d1 	rsb	r3, r3, #418	; 0x1a2
 8008a48:	3301      	adds	r3, #1
 8008a4a:	4a3a      	ldr	r2, [pc, #232]	; (8008b34 <HAL_TIM_IC_CaptureCallback+0x444>)
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	613b      	str	r3, [r7, #16]
 8008a54:	e015      	b.n	8008a82 <HAL_TIM_IC_CaptureCallback+0x392>
					uA = lookup[630 - 1 - int_phase]; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 8008a56:	4b36      	ldr	r3, [pc, #216]	; (8008b30 <HAL_TIM_IC_CaptureCallback+0x440>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f5c3 731d 	rsb	r3, r3, #628	; 0x274
 8008a5e:	3301      	adds	r3, #1
 8008a60:	4a34      	ldr	r2, [pc, #208]	; (8008b34 <HAL_TIM_IC_CaptureCallback+0x444>)
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4413      	add	r3, r2
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	61bb      	str	r3, [r7, #24]
					uB = 0; // takes 3mus
 8008a6a:	f04f 0300 	mov.w	r3, #0
 8008a6e:	617b      	str	r3, [r7, #20]
					uC = lookup[int_phase - 420];
 8008a70:	4b2f      	ldr	r3, [pc, #188]	; (8008b30 <HAL_TIM_IC_CaptureCallback+0x440>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8008a78:	4a2e      	ldr	r2, [pc, #184]	; (8008b34 <HAL_TIM_IC_CaptureCallback+0x444>)
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	4413      	add	r3, r2
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	613b      	str	r3, [r7, #16]
				pwmA = (uint16_t) (pwm * u0 * uA); //takes<2s00ns
 8008a82:	4b2d      	ldr	r3, [pc, #180]	; (8008b38 <HAL_TIM_IC_CaptureCallback+0x448>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008a8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a96:	edd7 7a06 	vldr	s15, [r7, #24]
 8008a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aa2:	ee17 3a90 	vmov	r3, s15
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	4b24      	ldr	r3, [pc, #144]	; (8008b3c <HAL_TIM_IC_CaptureCallback+0x44c>)
 8008aac:	601a      	str	r2, [r3, #0]
				pwmB = (uint16_t) (pwm * u0 * uB); //takes<200ns
 8008aae:	4b22      	ldr	r3, [pc, #136]	; (8008b38 <HAL_TIM_IC_CaptureCallback+0x448>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	ee07 3a90 	vmov	s15, r3
 8008ab6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008aba:	edd7 7a03 	vldr	s15, [r7, #12]
 8008abe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ac2:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ace:	ee17 3a90 	vmov	r3, s15
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	4b1a      	ldr	r3, [pc, #104]	; (8008b40 <HAL_TIM_IC_CaptureCallback+0x450>)
 8008ad8:	601a      	str	r2, [r3, #0]
				pwmC = (uint16_t) (pwm * u0 * uC); //takes<200ns
 8008ada:	4b17      	ldr	r3, [pc, #92]	; (8008b38 <HAL_TIM_IC_CaptureCallback+0x448>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ae6:	edd7 7a03 	vldr	s15, [r7, #12]
 8008aea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008aee:	edd7 7a04 	vldr	s15, [r7, #16]
 8008af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008afa:	ee17 3a90 	vmov	r3, s15
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	461a      	mov	r2, r3
 8008b02:	4b10      	ldr	r3, [pc, #64]	; (8008b44 <HAL_TIM_IC_CaptureCallback+0x454>)
 8008b04:	601a      	str	r2, [r3, #0]
				debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8008b06:	4b10      	ldr	r3, [pc, #64]	; (8008b48 <HAL_TIM_IC_CaptureCallback+0x458>)
 8008b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b0c:	619a      	str	r2, [r3, #24]
				TIM1->CCR1 = pwmA; //takes<150ns
 8008b0e:	4b0b      	ldr	r3, [pc, #44]	; (8008b3c <HAL_TIM_IC_CaptureCallback+0x44c>)
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	4b0e      	ldr	r3, [pc, #56]	; (8008b4c <HAL_TIM_IC_CaptureCallback+0x45c>)
 8008b14:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = pwmB; //takes<150ns
 8008b16:	4b0a      	ldr	r3, [pc, #40]	; (8008b40 <HAL_TIM_IC_CaptureCallback+0x450>)
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	4b0c      	ldr	r3, [pc, #48]	; (8008b4c <HAL_TIM_IC_CaptureCallback+0x45c>)
 8008b1c:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = pwmC; //takes<150ns
 8008b1e:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <HAL_TIM_IC_CaptureCallback+0x454>)
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	4b0a      	ldr	r3, [pc, #40]	; (8008b4c <HAL_TIM_IC_CaptureCallback+0x45c>)
 8008b24:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008b26:	bf00      	nop
 8008b28:	3720      	adds	r7, #32
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	200000b0 	.word	0x200000b0
 8008b34:	20000138 	.word	0x20000138
 8008b38:	2000000c 	.word	0x2000000c
 8008b3c:	200000bc 	.word	0x200000bc
 8008b40:	200000c0 	.word	0x200000c0
 8008b44:	200000c4 	.word	0x200000c4
 8008b48:	40020c00 	.word	0x40020c00
 8008b4c:	40010000 	.word	0x40010000

08008b50 <calc_lookup>:

void calc_lookup(float *lookup){
 8008b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
	// TODO plug in a higher order harmonic and see if system gets more energy efficient or more silent
	for (int i=0; i<210; i++){
 8008b58:	2300      	movs	r3, #0
 8008b5a:	60fb      	str	r3, [r7, #12]
 8008b5c:	e051      	b.n	8008c02 <calc_lookup+0xb2>
	    lookup[i] = cos((float)i/100.0) + cos((float)i/100.0-1.047);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	ee07 3a90 	vmov	s15, r3
 8008b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b68:	ee17 0a90 	vmov	r0, s15
 8008b6c:	f7f7 fcec 	bl	8000548 <__aeabi_f2d>
 8008b70:	f04f 0200 	mov.w	r2, #0
 8008b74:	4b28      	ldr	r3, [pc, #160]	; (8008c18 <calc_lookup+0xc8>)
 8008b76:	f7f7 fe69 	bl	800084c <__aeabi_ddiv>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	ec44 3b17 	vmov	d7, r3, r4
 8008b82:	eeb0 0a47 	vmov.f32	s0, s14
 8008b86:	eef0 0a67 	vmov.f32	s1, s15
 8008b8a:	f001 f9dd 	bl	8009f48 <cos>
 8008b8e:	ec56 5b10 	vmov	r5, r6, d0
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	ee07 3a90 	vmov	s15, r3
 8008b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b9c:	ee17 0a90 	vmov	r0, s15
 8008ba0:	f7f7 fcd2 	bl	8000548 <__aeabi_f2d>
 8008ba4:	f04f 0200 	mov.w	r2, #0
 8008ba8:	4b1b      	ldr	r3, [pc, #108]	; (8008c18 <calc_lookup+0xc8>)
 8008baa:	f7f7 fe4f 	bl	800084c <__aeabi_ddiv>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	a316      	add	r3, pc, #88	; (adr r3, 8008c10 <calc_lookup+0xc0>)
 8008bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbc:	f7f7 fb64 	bl	8000288 <__aeabi_dsub>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	ec44 3b17 	vmov	d7, r3, r4
 8008bc8:	eeb0 0a47 	vmov.f32	s0, s14
 8008bcc:	eef0 0a67 	vmov.f32	s1, s15
 8008bd0:	f001 f9ba 	bl	8009f48 <cos>
 8008bd4:	ec54 3b10 	vmov	r3, r4, d0
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4623      	mov	r3, r4
 8008bdc:	4628      	mov	r0, r5
 8008bde:	4631      	mov	r1, r6
 8008be0:	f7f7 fb54 	bl	800028c <__adddf3>
 8008be4:	4603      	mov	r3, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	4618      	mov	r0, r3
 8008bea:	4621      	mov	r1, r4
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	18d4      	adds	r4, r2, r3
 8008bf4:	f7f7 ffe2 	bl	8000bbc <__aeabi_d2f>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	6023      	str	r3, [r4, #0]
	for (int i=0; i<210; i++){
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	60fb      	str	r3, [r7, #12]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2bd1      	cmp	r3, #209	; 0xd1
 8008c06:	ddaa      	ble.n	8008b5e <calc_lookup+0xe>
	}
}
 8008c08:	bf00      	nop
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c10:	126e978d 	.word	0x126e978d
 8008c14:	3ff0c083 	.word	0x3ff0c083
 8008c18:	40590000 	.word	0x40590000

08008c1c <DMAUSARTTransferComplete>:

void DMAUSARTTransferComplete(DMA_HandleTypeDef *hdma){
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
	huart3.Instance->CR3 &= ~USART_CR3_DMAT;
 8008c24:	4b06      	ldr	r3, [pc, #24]	; (8008c40 <DMAUSARTTransferComplete+0x24>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	695a      	ldr	r2, [r3, #20]
 8008c2a:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <DMAUSARTTransferComplete+0x24>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c32:	615a      	str	r2, [r3, #20]
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	200004c0 	.word	0x200004c0

08008c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008c44:	b480      	push	{r7}
 8008c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008c48:	bf00      	nop
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
	...

08008c54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	607b      	str	r3, [r7, #4]
 8008c5e:	4b10      	ldr	r3, [pc, #64]	; (8008ca0 <HAL_MspInit+0x4c>)
 8008c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c62:	4a0f      	ldr	r2, [pc, #60]	; (8008ca0 <HAL_MspInit+0x4c>)
 8008c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c68:	6453      	str	r3, [r2, #68]	; 0x44
 8008c6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ca0 <HAL_MspInit+0x4c>)
 8008c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c72:	607b      	str	r3, [r7, #4]
 8008c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c76:	2300      	movs	r3, #0
 8008c78:	603b      	str	r3, [r7, #0]
 8008c7a:	4b09      	ldr	r3, [pc, #36]	; (8008ca0 <HAL_MspInit+0x4c>)
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	4a08      	ldr	r2, [pc, #32]	; (8008ca0 <HAL_MspInit+0x4c>)
 8008c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c84:	6413      	str	r3, [r2, #64]	; 0x40
 8008c86:	4b06      	ldr	r3, [pc, #24]	; (8008ca0 <HAL_MspInit+0x4c>)
 8008c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c8e:	603b      	str	r3, [r7, #0]
 8008c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c92:	bf00      	nop
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	40023800 	.word	0x40023800

08008ca4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08e      	sub	sp, #56	; 0x38
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	605a      	str	r2, [r3, #4]
 8008cb6:	609a      	str	r2, [r3, #8]
 8008cb8:	60da      	str	r2, [r3, #12]
 8008cba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a50      	ldr	r2, [pc, #320]	; (8008e04 <HAL_ADC_MspInit+0x160>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d14a      	bne.n	8008d5c <HAL_ADC_MspInit+0xb8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	623b      	str	r3, [r7, #32]
 8008cca:	4b4f      	ldr	r3, [pc, #316]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cce:	4a4e      	ldr	r2, [pc, #312]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8008cd6:	4b4c      	ldr	r3, [pc, #304]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cde:	623b      	str	r3, [r7, #32]
 8008ce0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61fb      	str	r3, [r7, #28]
 8008ce6:	4b48      	ldr	r3, [pc, #288]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cea:	4a47      	ldr	r2, [pc, #284]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008cec:	f043 0304 	orr.w	r3, r3, #4
 8008cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8008cf2:	4b45      	ldr	r3, [pc, #276]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf6:	f003 0304 	and.w	r3, r3, #4
 8008cfa:	61fb      	str	r3, [r7, #28]
 8008cfc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cfe:	2300      	movs	r3, #0
 8008d00:	61bb      	str	r3, [r7, #24]
 8008d02:	4b41      	ldr	r3, [pc, #260]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d06:	4a40      	ldr	r2, [pc, #256]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008d08:	f043 0301 	orr.w	r3, r3, #1
 8008d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d0e:	4b3e      	ldr	r3, [pc, #248]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	61bb      	str	r3, [r7, #24]
 8008d18:	69bb      	ldr	r3, [r7, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = ASENSE_Pin|BSENSE_Pin|CSENSE_Pin;
 8008d1a:	230e      	movs	r3, #14
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d22:	2300      	movs	r3, #0
 8008d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	4837      	ldr	r0, [pc, #220]	; (8008e0c <HAL_ADC_MspInit+0x168>)
 8008d2e:	f7f9 fcbd 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_Pin|M0_SO1_Pin|M0_SO2_Pin|TEMP_Pin 
 8008d32:	233e      	movs	r3, #62	; 0x3e
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008d36:	2303      	movs	r3, #3
 8008d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d42:	4619      	mov	r1, r3
 8008d44:	4832      	ldr	r0, [pc, #200]	; (8008e10 <HAL_ADC_MspInit+0x16c>)
 8008d46:	f7f9 fcb1 	bl	80026ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	2012      	movs	r0, #18
 8008d50:	f7f9 f891 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8008d54:	2012      	movs	r0, #18
 8008d56:	f7f9 f8aa 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8008d5a:	e04e      	b.n	8008dfa <HAL_ADC_MspInit+0x156>
  else if(hadc->Instance==ADC2)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a2c      	ldr	r2, [pc, #176]	; (8008e14 <HAL_ADC_MspInit+0x170>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d149      	bne.n	8008dfa <HAL_ADC_MspInit+0x156>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8008d66:	2300      	movs	r3, #0
 8008d68:	617b      	str	r3, [r7, #20]
 8008d6a:	4b27      	ldr	r3, [pc, #156]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d6e:	4a26      	ldr	r2, [pc, #152]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d74:	6453      	str	r3, [r2, #68]	; 0x44
 8008d76:	4b24      	ldr	r3, [pc, #144]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d7e:	617b      	str	r3, [r7, #20]
 8008d80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d82:	2300      	movs	r3, #0
 8008d84:	613b      	str	r3, [r7, #16]
 8008d86:	4b20      	ldr	r3, [pc, #128]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8a:	4a1f      	ldr	r2, [pc, #124]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008d8c:	f043 0304 	orr.w	r3, r3, #4
 8008d90:	6313      	str	r3, [r2, #48]	; 0x30
 8008d92:	4b1d      	ldr	r3, [pc, #116]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d96:	f003 0304 	and.w	r3, r3, #4
 8008d9a:	613b      	str	r3, [r7, #16]
 8008d9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60fb      	str	r3, [r7, #12]
 8008da2:	4b19      	ldr	r3, [pc, #100]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da6:	4a18      	ldr	r2, [pc, #96]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008da8:	f043 0302 	orr.w	r3, r3, #2
 8008dac:	6313      	str	r3, [r2, #48]	; 0x30
 8008dae:	4b16      	ldr	r3, [pc, #88]	; (8008e08 <HAL_ADC_MspInit+0x164>)
 8008db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STRAIN0_Pin|STRAIN1_Pin;
 8008dba:	2330      	movs	r3, #48	; 0x30
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dca:	4619      	mov	r1, r3
 8008dcc:	480f      	ldr	r0, [pc, #60]	; (8008e0c <HAL_ADC_MspInit+0x168>)
 8008dce:	f7f9 fc6d 	bl	80026ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBUS_S_Pin;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VBUS_S_GPIO_Port, &GPIO_InitStruct);
 8008dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008de2:	4619      	mov	r1, r3
 8008de4:	480c      	ldr	r0, [pc, #48]	; (8008e18 <HAL_ADC_MspInit+0x174>)
 8008de6:	f7f9 fc61 	bl	80026ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8008dea:	2200      	movs	r2, #0
 8008dec:	2100      	movs	r1, #0
 8008dee:	2012      	movs	r0, #18
 8008df0:	f7f9 f841 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8008df4:	2012      	movs	r0, #18
 8008df6:	f7f9 f85a 	bl	8001eae <HAL_NVIC_EnableIRQ>
}
 8008dfa:	bf00      	nop
 8008dfc:	3738      	adds	r7, #56	; 0x38
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	40012000 	.word	0x40012000
 8008e08:	40023800 	.word	0x40023800
 8008e0c:	40020800 	.word	0x40020800
 8008e10:	40020000 	.word	0x40020000
 8008e14:	40012100 	.word	0x40012100
 8008e18:	40020400 	.word	0x40020400

08008e1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b08a      	sub	sp, #40	; 0x28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e24:	f107 0314 	add.w	r3, r7, #20
 8008e28:	2200      	movs	r2, #0
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	605a      	str	r2, [r3, #4]
 8008e2e:	609a      	str	r2, [r3, #8]
 8008e30:	60da      	str	r2, [r3, #12]
 8008e32:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a19      	ldr	r2, [pc, #100]	; (8008ea0 <HAL_CAN_MspInit+0x84>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d12b      	bne.n	8008e96 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008e3e:	2300      	movs	r3, #0
 8008e40:	613b      	str	r3, [r7, #16]
 8008e42:	4b18      	ldr	r3, [pc, #96]	; (8008ea4 <HAL_CAN_MspInit+0x88>)
 8008e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e46:	4a17      	ldr	r2, [pc, #92]	; (8008ea4 <HAL_CAN_MspInit+0x88>)
 8008e48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8008e4e:	4b15      	ldr	r3, [pc, #84]	; (8008ea4 <HAL_CAN_MspInit+0x88>)
 8008e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e56:	613b      	str	r3, [r7, #16]
 8008e58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60fb      	str	r3, [r7, #12]
 8008e5e:	4b11      	ldr	r3, [pc, #68]	; (8008ea4 <HAL_CAN_MspInit+0x88>)
 8008e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e62:	4a10      	ldr	r2, [pc, #64]	; (8008ea4 <HAL_CAN_MspInit+0x88>)
 8008e64:	f043 0308 	orr.w	r3, r3, #8
 8008e68:	6313      	str	r3, [r2, #48]	; 0x30
 8008e6a:	4b0e      	ldr	r3, [pc, #56]	; (8008ea4 <HAL_CAN_MspInit+0x88>)
 8008e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6e:	f003 0308 	and.w	r3, r3, #8
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008e76:	2303      	movs	r3, #3
 8008e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e82:	2303      	movs	r3, #3
 8008e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8008e86:	2309      	movs	r3, #9
 8008e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008e8a:	f107 0314 	add.w	r3, r7, #20
 8008e8e:	4619      	mov	r1, r3
 8008e90:	4805      	ldr	r0, [pc, #20]	; (8008ea8 <HAL_CAN_MspInit+0x8c>)
 8008e92:	f7f9 fc0b 	bl	80026ac <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008e96:	bf00      	nop
 8008e98:	3728      	adds	r7, #40	; 0x28
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40006400 	.word	0x40006400
 8008ea4:	40023800 	.word	0x40023800
 8008ea8:	40020c00 	.word	0x40020c00

08008eac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08c      	sub	sp, #48	; 0x30
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008eb4:	f107 031c 	add.w	r3, r7, #28
 8008eb8:	2200      	movs	r2, #0
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	605a      	str	r2, [r3, #4]
 8008ebe:	609a      	str	r2, [r3, #8]
 8008ec0:	60da      	str	r2, [r3, #12]
 8008ec2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a32      	ldr	r2, [pc, #200]	; (8008f94 <HAL_I2C_MspInit+0xe8>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d12c      	bne.n	8008f28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ece:	2300      	movs	r3, #0
 8008ed0:	61bb      	str	r3, [r7, #24]
 8008ed2:	4b31      	ldr	r3, [pc, #196]	; (8008f98 <HAL_I2C_MspInit+0xec>)
 8008ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed6:	4a30      	ldr	r2, [pc, #192]	; (8008f98 <HAL_I2C_MspInit+0xec>)
 8008ed8:	f043 0302 	orr.w	r3, r3, #2
 8008edc:	6313      	str	r3, [r2, #48]	; 0x30
 8008ede:	4b2e      	ldr	r3, [pc, #184]	; (8008f98 <HAL_I2C_MspInit+0xec>)
 8008ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee2:	f003 0302 	and.w	r3, r3, #2
 8008ee6:	61bb      	str	r3, [r7, #24]
 8008ee8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008eea:	23c0      	movs	r3, #192	; 0xc0
 8008eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008eee:	2312      	movs	r3, #18
 8008ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008efa:	2304      	movs	r3, #4
 8008efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008efe:	f107 031c 	add.w	r3, r7, #28
 8008f02:	4619      	mov	r1, r3
 8008f04:	4825      	ldr	r0, [pc, #148]	; (8008f9c <HAL_I2C_MspInit+0xf0>)
 8008f06:	f7f9 fbd1 	bl	80026ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	617b      	str	r3, [r7, #20]
 8008f0e:	4b22      	ldr	r3, [pc, #136]	; (8008f98 <HAL_I2C_MspInit+0xec>)
 8008f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f12:	4a21      	ldr	r2, [pc, #132]	; (8008f98 <HAL_I2C_MspInit+0xec>)
 8008f14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f18:	6413      	str	r3, [r2, #64]	; 0x40
 8008f1a:	4b1f      	ldr	r3, [pc, #124]	; (8008f98 <HAL_I2C_MspInit+0xec>)
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f22:	617b      	str	r3, [r7, #20]
 8008f24:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8008f26:	e031      	b.n	8008f8c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a1c      	ldr	r2, [pc, #112]	; (8008fa0 <HAL_I2C_MspInit+0xf4>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d12c      	bne.n	8008f8c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f32:	2300      	movs	r3, #0
 8008f34:	613b      	str	r3, [r7, #16]
 8008f36:	4b18      	ldr	r3, [pc, #96]	; (8008f98 <HAL_I2C_MspInit+0xec>)
 8008f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3a:	4a17      	ldr	r2, [pc, #92]	; (8008f98 <HAL_I2C_MspInit+0xec>)
 8008f3c:	f043 0302 	orr.w	r3, r3, #2
 8008f40:	6313      	str	r3, [r2, #48]	; 0x30
 8008f42:	4b15      	ldr	r3, [pc, #84]	; (8008f98 <HAL_I2C_MspInit+0xec>)
 8008f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f46:	f003 0302 	and.w	r3, r3, #2
 8008f4a:	613b      	str	r3, [r7, #16]
 8008f4c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008f4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008f54:	2312      	movs	r3, #18
 8008f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008f60:	2304      	movs	r3, #4
 8008f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f64:	f107 031c 	add.w	r3, r7, #28
 8008f68:	4619      	mov	r1, r3
 8008f6a:	480c      	ldr	r0, [pc, #48]	; (8008f9c <HAL_I2C_MspInit+0xf0>)
 8008f6c:	f7f9 fb9e 	bl	80026ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008f70:	2300      	movs	r3, #0
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	4b08      	ldr	r3, [pc, #32]	; (8008f98 <HAL_I2C_MspInit+0xec>)
 8008f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f78:	4a07      	ldr	r2, [pc, #28]	; (8008f98 <HAL_I2C_MspInit+0xec>)
 8008f7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8008f80:	4b05      	ldr	r3, [pc, #20]	; (8008f98 <HAL_I2C_MspInit+0xec>)
 8008f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f88:	60fb      	str	r3, [r7, #12]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
}
 8008f8c:	bf00      	nop
 8008f8e:	3730      	adds	r7, #48	; 0x30
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	40005400 	.word	0x40005400
 8008f98:	40023800 	.word	0x40023800
 8008f9c:	40020400 	.word	0x40020400
 8008fa0:	40005800 	.word	0x40005800

08008fa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b08a      	sub	sp, #40	; 0x28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fac:	f107 0314 	add.w	r3, r7, #20
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	605a      	str	r2, [r3, #4]
 8008fb6:	609a      	str	r2, [r3, #8]
 8008fb8:	60da      	str	r2, [r3, #12]
 8008fba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a1d      	ldr	r2, [pc, #116]	; (8009038 <HAL_SPI_MspInit+0x94>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d134      	bne.n	8009030 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	613b      	str	r3, [r7, #16]
 8008fca:	4b1c      	ldr	r3, [pc, #112]	; (800903c <HAL_SPI_MspInit+0x98>)
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fce:	4a1b      	ldr	r2, [pc, #108]	; (800903c <HAL_SPI_MspInit+0x98>)
 8008fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8008fd6:	4b19      	ldr	r3, [pc, #100]	; (800903c <HAL_SPI_MspInit+0x98>)
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fde:	613b      	str	r3, [r7, #16]
 8008fe0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	4b15      	ldr	r3, [pc, #84]	; (800903c <HAL_SPI_MspInit+0x98>)
 8008fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fea:	4a14      	ldr	r2, [pc, #80]	; (800903c <HAL_SPI_MspInit+0x98>)
 8008fec:	f043 0302 	orr.w	r3, r3, #2
 8008ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ff2:	4b12      	ldr	r3, [pc, #72]	; (800903c <HAL_SPI_MspInit+0x98>)
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	f003 0302 	and.w	r3, r3, #2
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8008ffe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009004:	2302      	movs	r3, #2
 8009006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009008:	2300      	movs	r3, #0
 800900a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800900c:	2303      	movs	r3, #3
 800900e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009010:	2305      	movs	r3, #5
 8009012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009014:	f107 0314 	add.w	r3, r7, #20
 8009018:	4619      	mov	r1, r3
 800901a:	4809      	ldr	r0, [pc, #36]	; (8009040 <HAL_SPI_MspInit+0x9c>)
 800901c:	f7f9 fb46 	bl	80026ac <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8009020:	2200      	movs	r2, #0
 8009022:	2100      	movs	r1, #0
 8009024:	2024      	movs	r0, #36	; 0x24
 8009026:	f7f8 ff26 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800902a:	2024      	movs	r0, #36	; 0x24
 800902c:	f7f8 ff3f 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8009030:	bf00      	nop
 8009032:	3728      	adds	r7, #40	; 0x28
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	40003800 	.word	0x40003800
 800903c:	40023800 	.word	0x40023800
 8009040:	40020400 	.word	0x40020400

08009044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b08e      	sub	sp, #56	; 0x38
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800904c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009050:	2200      	movs	r2, #0
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	605a      	str	r2, [r3, #4]
 8009056:	609a      	str	r2, [r3, #8]
 8009058:	60da      	str	r2, [r3, #12]
 800905a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a5d      	ldr	r2, [pc, #372]	; (80091d8 <HAL_TIM_Base_MspInit+0x194>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d12e      	bne.n	80090c4 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009066:	2300      	movs	r3, #0
 8009068:	623b      	str	r3, [r7, #32]
 800906a:	4b5c      	ldr	r3, [pc, #368]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 800906c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800906e:	4a5b      	ldr	r2, [pc, #364]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 8009070:	f043 0301 	orr.w	r3, r3, #1
 8009074:	6453      	str	r3, [r2, #68]	; 0x44
 8009076:	4b59      	ldr	r3, [pc, #356]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 8009078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	623b      	str	r3, [r7, #32]
 8009080:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8009082:	2200      	movs	r2, #0
 8009084:	2100      	movs	r1, #0
 8009086:	2018      	movs	r0, #24
 8009088:	f7f8 fef5 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800908c:	2018      	movs	r0, #24
 800908e:	f7f8 ff0e 	bl	8001eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8009092:	2200      	movs	r2, #0
 8009094:	2100      	movs	r1, #0
 8009096:	2019      	movs	r0, #25
 8009098:	f7f8 feed 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800909c:	2019      	movs	r0, #25
 800909e:	f7f8 ff06 	bl	8001eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80090a2:	2200      	movs	r2, #0
 80090a4:	2100      	movs	r1, #0
 80090a6:	201a      	movs	r0, #26
 80090a8:	f7f8 fee5 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80090ac:	201a      	movs	r0, #26
 80090ae:	f7f8 fefe 	bl	8001eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80090b2:	2200      	movs	r2, #0
 80090b4:	2100      	movs	r1, #0
 80090b6:	201b      	movs	r0, #27
 80090b8:	f7f8 fedd 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80090bc:	201b      	movs	r0, #27
 80090be:	f7f8 fef6 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80090c2:	e084      	b.n	80091ce <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM2)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090cc:	d10e      	bne.n	80090ec <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80090ce:	2300      	movs	r3, #0
 80090d0:	61fb      	str	r3, [r7, #28]
 80090d2:	4b42      	ldr	r3, [pc, #264]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 80090d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d6:	4a41      	ldr	r2, [pc, #260]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 80090d8:	f043 0301 	orr.w	r3, r3, #1
 80090dc:	6413      	str	r3, [r2, #64]	; 0x40
 80090de:	4b3f      	ldr	r3, [pc, #252]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 80090e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	61fb      	str	r3, [r7, #28]
 80090e8:	69fb      	ldr	r3, [r7, #28]
}
 80090ea:	e070      	b.n	80091ce <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM9)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a3b      	ldr	r2, [pc, #236]	; (80091e0 <HAL_TIM_Base_MspInit+0x19c>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d116      	bne.n	8009124 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80090f6:	2300      	movs	r3, #0
 80090f8:	61bb      	str	r3, [r7, #24]
 80090fa:	4b38      	ldr	r3, [pc, #224]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 80090fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090fe:	4a37      	ldr	r2, [pc, #220]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 8009100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009104:	6453      	str	r3, [r2, #68]	; 0x44
 8009106:	4b35      	ldr	r3, [pc, #212]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 8009108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800910a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800910e:	61bb      	str	r3, [r7, #24]
 8009110:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8009112:	2200      	movs	r2, #0
 8009114:	2100      	movs	r1, #0
 8009116:	2018      	movs	r0, #24
 8009118:	f7f8 fead 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800911c:	2018      	movs	r0, #24
 800911e:	f7f8 fec6 	bl	8001eae <HAL_NVIC_EnableIRQ>
}
 8009122:	e054      	b.n	80091ce <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM12)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a2e      	ldr	r2, [pc, #184]	; (80091e4 <HAL_TIM_Base_MspInit+0x1a0>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d116      	bne.n	800915c <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800912e:	2300      	movs	r3, #0
 8009130:	617b      	str	r3, [r7, #20]
 8009132:	4b2a      	ldr	r3, [pc, #168]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 8009134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009136:	4a29      	ldr	r2, [pc, #164]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 8009138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800913c:	6413      	str	r3, [r2, #64]	; 0x40
 800913e:	4b27      	ldr	r3, [pc, #156]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 8009140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009146:	617b      	str	r3, [r7, #20]
 8009148:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800914a:	2200      	movs	r2, #0
 800914c:	2100      	movs	r1, #0
 800914e:	202b      	movs	r0, #43	; 0x2b
 8009150:	f7f8 fe91 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8009154:	202b      	movs	r0, #43	; 0x2b
 8009156:	f7f8 feaa 	bl	8001eae <HAL_NVIC_EnableIRQ>
}
 800915a:	e038      	b.n	80091ce <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM13)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a21      	ldr	r2, [pc, #132]	; (80091e8 <HAL_TIM_Base_MspInit+0x1a4>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d133      	bne.n	80091ce <HAL_TIM_Base_MspInit+0x18a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8009166:	2300      	movs	r3, #0
 8009168:	613b      	str	r3, [r7, #16]
 800916a:	4b1c      	ldr	r3, [pc, #112]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 800916c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916e:	4a1b      	ldr	r2, [pc, #108]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 8009170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009174:	6413      	str	r3, [r2, #64]	; 0x40
 8009176:	4b19      	ldr	r3, [pc, #100]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 8009178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800917e:	613b      	str	r3, [r7, #16]
 8009180:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009182:	2300      	movs	r3, #0
 8009184:	60fb      	str	r3, [r7, #12]
 8009186:	4b15      	ldr	r3, [pc, #84]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 8009188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918a:	4a14      	ldr	r2, [pc, #80]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 800918c:	f043 0301 	orr.w	r3, r3, #1
 8009190:	6313      	str	r3, [r2, #48]	; 0x30
 8009192:	4b12      	ldr	r3, [pc, #72]	; (80091dc <HAL_TIM_Base_MspInit+0x198>)
 8009194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800919e:	2340      	movs	r3, #64	; 0x40
 80091a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091a2:	2302      	movs	r3, #2
 80091a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091a6:	2300      	movs	r3, #0
 80091a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091aa:	2300      	movs	r3, #0
 80091ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80091ae:	2309      	movs	r3, #9
 80091b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091b6:	4619      	mov	r1, r3
 80091b8:	480c      	ldr	r0, [pc, #48]	; (80091ec <HAL_TIM_Base_MspInit+0x1a8>)
 80091ba:	f7f9 fa77 	bl	80026ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80091be:	2200      	movs	r2, #0
 80091c0:	2100      	movs	r1, #0
 80091c2:	202c      	movs	r0, #44	; 0x2c
 80091c4:	f7f8 fe57 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80091c8:	202c      	movs	r0, #44	; 0x2c
 80091ca:	f7f8 fe70 	bl	8001eae <HAL_NVIC_EnableIRQ>
}
 80091ce:	bf00      	nop
 80091d0:	3738      	adds	r7, #56	; 0x38
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	40010000 	.word	0x40010000
 80091dc:	40023800 	.word	0x40023800
 80091e0:	40014000 	.word	0x40014000
 80091e4:	40001800 	.word	0x40001800
 80091e8:	40001c00 	.word	0x40001c00
 80091ec:	40020000 	.word	0x40020000

080091f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b08a      	sub	sp, #40	; 0x28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091f8:	f107 0314 	add.w	r3, r7, #20
 80091fc:	2200      	movs	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]
 8009200:	605a      	str	r2, [r3, #4]
 8009202:	609a      	str	r2, [r3, #8]
 8009204:	60da      	str	r2, [r3, #12]
 8009206:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a29      	ldr	r2, [pc, #164]	; (80092b4 <HAL_TIM_Encoder_MspInit+0xc4>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d14b      	bne.n	80092aa <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009212:	2300      	movs	r3, #0
 8009214:	613b      	str	r3, [r7, #16]
 8009216:	4b28      	ldr	r3, [pc, #160]	; (80092b8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8009218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800921a:	4a27      	ldr	r2, [pc, #156]	; (80092b8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800921c:	f043 0302 	orr.w	r3, r3, #2
 8009220:	6453      	str	r3, [r2, #68]	; 0x44
 8009222:	4b25      	ldr	r3, [pc, #148]	; (80092b8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8009224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009226:	f003 0302 	and.w	r3, r3, #2
 800922a:	613b      	str	r3, [r7, #16]
 800922c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800922e:	2300      	movs	r3, #0
 8009230:	60fb      	str	r3, [r7, #12]
 8009232:	4b21      	ldr	r3, [pc, #132]	; (80092b8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8009234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009236:	4a20      	ldr	r2, [pc, #128]	; (80092b8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8009238:	f043 0304 	orr.w	r3, r3, #4
 800923c:	6313      	str	r3, [r2, #48]	; 0x30
 800923e:	4b1e      	ldr	r3, [pc, #120]	; (80092b8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8009240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009242:	f003 0304 	and.w	r3, r3, #4
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800924a:	23c0      	movs	r3, #192	; 0xc0
 800924c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800924e:	2302      	movs	r3, #2
 8009250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009252:	2300      	movs	r3, #0
 8009254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009256:	2300      	movs	r3, #0
 8009258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800925a:	2303      	movs	r3, #3
 800925c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800925e:	f107 0314 	add.w	r3, r7, #20
 8009262:	4619      	mov	r1, r3
 8009264:	4815      	ldr	r0, [pc, #84]	; (80092bc <HAL_TIM_Encoder_MspInit+0xcc>)
 8009266:	f7f9 fa21 	bl	80026ac <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800926a:	2200      	movs	r2, #0
 800926c:	2100      	movs	r1, #0
 800926e:	202b      	movs	r0, #43	; 0x2b
 8009270:	f7f8 fe01 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8009274:	202b      	movs	r0, #43	; 0x2b
 8009276:	f7f8 fe1a 	bl	8001eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800927a:	2200      	movs	r2, #0
 800927c:	2100      	movs	r1, #0
 800927e:	202c      	movs	r0, #44	; 0x2c
 8009280:	f7f8 fdf9 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8009284:	202c      	movs	r0, #44	; 0x2c
 8009286:	f7f8 fe12 	bl	8001eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800928a:	2200      	movs	r2, #0
 800928c:	2100      	movs	r1, #0
 800928e:	202d      	movs	r0, #45	; 0x2d
 8009290:	f7f8 fdf1 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8009294:	202d      	movs	r0, #45	; 0x2d
 8009296:	f7f8 fe0a 	bl	8001eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800929a:	2200      	movs	r2, #0
 800929c:	2100      	movs	r1, #0
 800929e:	202e      	movs	r0, #46	; 0x2e
 80092a0:	f7f8 fde9 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80092a4:	202e      	movs	r0, #46	; 0x2e
 80092a6:	f7f8 fe02 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80092aa:	bf00      	nop
 80092ac:	3728      	adds	r7, #40	; 0x28
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	40010400 	.word	0x40010400
 80092b8:	40023800 	.word	0x40023800
 80092bc:	40020800 	.word	0x40020800

080092c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b08a      	sub	sp, #40	; 0x28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092c8:	f107 0314 	add.w	r3, r7, #20
 80092cc:	2200      	movs	r2, #0
 80092ce:	601a      	str	r2, [r3, #0]
 80092d0:	605a      	str	r2, [r3, #4]
 80092d2:	609a      	str	r2, [r3, #8]
 80092d4:	60da      	str	r2, [r3, #12]
 80092d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a24      	ldr	r2, [pc, #144]	; (8009370 <HAL_TIM_MspPostInit+0xb0>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d11f      	bne.n	8009322 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80092e2:	2300      	movs	r3, #0
 80092e4:	613b      	str	r3, [r7, #16]
 80092e6:	4b23      	ldr	r3, [pc, #140]	; (8009374 <HAL_TIM_MspPostInit+0xb4>)
 80092e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ea:	4a22      	ldr	r2, [pc, #136]	; (8009374 <HAL_TIM_MspPostInit+0xb4>)
 80092ec:	f043 0310 	orr.w	r3, r3, #16
 80092f0:	6313      	str	r3, [r2, #48]	; 0x30
 80092f2:	4b20      	ldr	r3, [pc, #128]	; (8009374 <HAL_TIM_MspPostInit+0xb4>)
 80092f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f6:	f003 0310 	and.w	r3, r3, #16
 80092fa:	613b      	str	r3, [r7, #16]
 80092fc:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80092fe:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8009302:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009304:	2302      	movs	r3, #2
 8009306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009308:	2300      	movs	r3, #0
 800930a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800930c:	2300      	movs	r3, #0
 800930e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009310:	2301      	movs	r3, #1
 8009312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009314:	f107 0314 	add.w	r3, r7, #20
 8009318:	4619      	mov	r1, r3
 800931a:	4817      	ldr	r0, [pc, #92]	; (8009378 <HAL_TIM_MspPostInit+0xb8>)
 800931c:	f7f9 f9c6 	bl	80026ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8009320:	e022      	b.n	8009368 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a15      	ldr	r2, [pc, #84]	; (800937c <HAL_TIM_MspPostInit+0xbc>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d11d      	bne.n	8009368 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800932c:	2300      	movs	r3, #0
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	4b10      	ldr	r3, [pc, #64]	; (8009374 <HAL_TIM_MspPostInit+0xb4>)
 8009332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009334:	4a0f      	ldr	r2, [pc, #60]	; (8009374 <HAL_TIM_MspPostInit+0xb4>)
 8009336:	f043 0310 	orr.w	r3, r3, #16
 800933a:	6313      	str	r3, [r2, #48]	; 0x30
 800933c:	4b0d      	ldr	r3, [pc, #52]	; (8009374 <HAL_TIM_MspPostInit+0xb4>)
 800933e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009340:	f003 0310 	and.w	r3, r3, #16
 8009344:	60fb      	str	r3, [r7, #12]
 8009346:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009348:	2360      	movs	r3, #96	; 0x60
 800934a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800934c:	2302      	movs	r3, #2
 800934e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009350:	2300      	movs	r3, #0
 8009352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009354:	2300      	movs	r3, #0
 8009356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8009358:	2303      	movs	r3, #3
 800935a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800935c:	f107 0314 	add.w	r3, r7, #20
 8009360:	4619      	mov	r1, r3
 8009362:	4805      	ldr	r0, [pc, #20]	; (8009378 <HAL_TIM_MspPostInit+0xb8>)
 8009364:	f7f9 f9a2 	bl	80026ac <HAL_GPIO_Init>
}
 8009368:	bf00      	nop
 800936a:	3728      	adds	r7, #40	; 0x28
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	40010000 	.word	0x40010000
 8009374:	40023800 	.word	0x40023800
 8009378:	40021000 	.word	0x40021000
 800937c:	40014000 	.word	0x40014000

08009380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08a      	sub	sp, #40	; 0x28
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009388:	f107 0314 	add.w	r3, r7, #20
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]
 8009390:	605a      	str	r2, [r3, #4]
 8009392:	609a      	str	r2, [r3, #8]
 8009394:	60da      	str	r2, [r3, #12]
 8009396:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a34      	ldr	r2, [pc, #208]	; (8009470 <HAL_UART_MspInit+0xf0>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d162      	bne.n	8009468 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80093a2:	2300      	movs	r3, #0
 80093a4:	613b      	str	r3, [r7, #16]
 80093a6:	4b33      	ldr	r3, [pc, #204]	; (8009474 <HAL_UART_MspInit+0xf4>)
 80093a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093aa:	4a32      	ldr	r2, [pc, #200]	; (8009474 <HAL_UART_MspInit+0xf4>)
 80093ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093b0:	6413      	str	r3, [r2, #64]	; 0x40
 80093b2:	4b30      	ldr	r3, [pc, #192]	; (8009474 <HAL_UART_MspInit+0xf4>)
 80093b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093ba:	613b      	str	r3, [r7, #16]
 80093bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80093be:	2300      	movs	r3, #0
 80093c0:	60fb      	str	r3, [r7, #12]
 80093c2:	4b2c      	ldr	r3, [pc, #176]	; (8009474 <HAL_UART_MspInit+0xf4>)
 80093c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c6:	4a2b      	ldr	r2, [pc, #172]	; (8009474 <HAL_UART_MspInit+0xf4>)
 80093c8:	f043 0308 	orr.w	r3, r3, #8
 80093cc:	6313      	str	r3, [r2, #48]	; 0x30
 80093ce:	4b29      	ldr	r3, [pc, #164]	; (8009474 <HAL_UART_MspInit+0xf4>)
 80093d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d2:	f003 0308 	and.w	r3, r3, #8
 80093d6:	60fb      	str	r3, [r7, #12]
 80093d8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80093da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80093de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093e0:	2302      	movs	r3, #2
 80093e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80093e4:	2301      	movs	r3, #1
 80093e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093e8:	2303      	movs	r3, #3
 80093ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80093ec:	2307      	movs	r3, #7
 80093ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80093f0:	f107 0314 	add.w	r3, r7, #20
 80093f4:	4619      	mov	r1, r3
 80093f6:	4820      	ldr	r0, [pc, #128]	; (8009478 <HAL_UART_MspInit+0xf8>)
 80093f8:	f7f9 f958 	bl	80026ac <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80093fc:	4b1f      	ldr	r3, [pc, #124]	; (800947c <HAL_UART_MspInit+0xfc>)
 80093fe:	4a20      	ldr	r2, [pc, #128]	; (8009480 <HAL_UART_MspInit+0x100>)
 8009400:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8009402:	4b1e      	ldr	r3, [pc, #120]	; (800947c <HAL_UART_MspInit+0xfc>)
 8009404:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009408:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800940a:	4b1c      	ldr	r3, [pc, #112]	; (800947c <HAL_UART_MspInit+0xfc>)
 800940c:	2240      	movs	r2, #64	; 0x40
 800940e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009410:	4b1a      	ldr	r3, [pc, #104]	; (800947c <HAL_UART_MspInit+0xfc>)
 8009412:	2200      	movs	r2, #0
 8009414:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009416:	4b19      	ldr	r3, [pc, #100]	; (800947c <HAL_UART_MspInit+0xfc>)
 8009418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800941c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800941e:	4b17      	ldr	r3, [pc, #92]	; (800947c <HAL_UART_MspInit+0xfc>)
 8009420:	2200      	movs	r2, #0
 8009422:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009424:	4b15      	ldr	r3, [pc, #84]	; (800947c <HAL_UART_MspInit+0xfc>)
 8009426:	2200      	movs	r2, #0
 8009428:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800942a:	4b14      	ldr	r3, [pc, #80]	; (800947c <HAL_UART_MspInit+0xfc>)
 800942c:	2200      	movs	r2, #0
 800942e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009430:	4b12      	ldr	r3, [pc, #72]	; (800947c <HAL_UART_MspInit+0xfc>)
 8009432:	2200      	movs	r2, #0
 8009434:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009436:	4b11      	ldr	r3, [pc, #68]	; (800947c <HAL_UART_MspInit+0xfc>)
 8009438:	2200      	movs	r2, #0
 800943a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800943c:	480f      	ldr	r0, [pc, #60]	; (800947c <HAL_UART_MspInit+0xfc>)
 800943e:	f7f8 fd51 	bl	8001ee4 <HAL_DMA_Init>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8009448:	f7ff fbfc 	bl	8008c44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a0b      	ldr	r2, [pc, #44]	; (800947c <HAL_UART_MspInit+0xfc>)
 8009450:	631a      	str	r2, [r3, #48]	; 0x30
 8009452:	4a0a      	ldr	r2, [pc, #40]	; (800947c <HAL_UART_MspInit+0xfc>)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8009458:	2200      	movs	r2, #0
 800945a:	2100      	movs	r1, #0
 800945c:	2027      	movs	r0, #39	; 0x27
 800945e:	f7f8 fd0a 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8009462:	2027      	movs	r0, #39	; 0x27
 8009464:	f7f8 fd23 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8009468:	bf00      	nop
 800946a:	3728      	adds	r7, #40	; 0x28
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	40004800 	.word	0x40004800
 8009474:	40023800 	.word	0x40023800
 8009478:	40020c00 	.word	0x40020c00
 800947c:	200005f4 	.word	0x200005f4
 8009480:	40026058 	.word	0x40026058

08009484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009484:	b480      	push	{r7}
 8009486:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009488:	bf00      	nop
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009492:	b480      	push	{r7}
 8009494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009496:	e7fe      	b.n	8009496 <HardFault_Handler+0x4>

08009498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009498:	b480      	push	{r7}
 800949a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800949c:	e7fe      	b.n	800949c <MemManage_Handler+0x4>

0800949e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800949e:	b480      	push	{r7}
 80094a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80094a2:	e7fe      	b.n	80094a2 <BusFault_Handler+0x4>

080094a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80094a4:	b480      	push	{r7}
 80094a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80094a8:	e7fe      	b.n	80094a8 <UsageFault_Handler+0x4>

080094aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80094aa:	b480      	push	{r7}
 80094ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80094ae:	bf00      	nop
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80094b8:	b480      	push	{r7}
 80094ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80094bc:	bf00      	nop
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80094c6:	b480      	push	{r7}
 80094c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80094ca:	bf00      	nop
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80094d8:	f7f7 fd92 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80094dc:	bf00      	nop
 80094de:	bd80      	pop	{r7, pc}

080094e0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80094e4:	4802      	ldr	r0, [pc, #8]	; (80094f0 <DMA1_Stream3_IRQHandler+0x10>)
 80094e6:	f7f8 fe25 	bl	8002134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80094ea:	bf00      	nop
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	200005f4 	.word	0x200005f4

080094f4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80094f8:	4803      	ldr	r0, [pc, #12]	; (8009508 <ADC_IRQHandler+0x14>)
 80094fa:	f7f7 ff51 	bl	80013a0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80094fe:	4803      	ldr	r0, [pc, #12]	; (800950c <ADC_IRQHandler+0x18>)
 8009500:	f7f7 ff4e 	bl	80013a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8009504:	bf00      	nop
 8009506:	bd80      	pop	{r7, pc}
 8009508:	20000654 	.word	0x20000654
 800950c:	20000500 	.word	0x20000500

08009510 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8009514:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009518:	f7f9 fa96 	bl	8002a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800951c:	bf00      	nop
 800951e:	bd80      	pop	{r7, pc}

08009520 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009524:	4803      	ldr	r0, [pc, #12]	; (8009534 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8009526:	f7fb ff35 	bl	8005394 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800952a:	4803      	ldr	r0, [pc, #12]	; (8009538 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800952c:	f7fb ff32 	bl	8005394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8009530:	bf00      	nop
 8009532:	bd80      	pop	{r7, pc}
 8009534:	200006e0 	.word	0x200006e0
 8009538:	20000720 	.word	0x20000720

0800953c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009540:	4802      	ldr	r0, [pc, #8]	; (800954c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009542:	f7fb ff27 	bl	8005394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009546:	bf00      	nop
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	200006e0 	.word	0x200006e0

08009550 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009554:	4802      	ldr	r0, [pc, #8]	; (8009560 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8009556:	f7fb ff1d 	bl	8005394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800955a:	bf00      	nop
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	200006e0 	.word	0x200006e0

08009564 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009568:	4802      	ldr	r0, [pc, #8]	; (8009574 <TIM1_CC_IRQHandler+0x10>)
 800956a:	f7fb ff13 	bl	8005394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800956e:	bf00      	nop
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	200006e0 	.word	0x200006e0

08009578 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800957c:	4802      	ldr	r0, [pc, #8]	; (8009588 <SPI2_IRQHandler+0x10>)
 800957e:	f7fb faa9 	bl	8004ad4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8009582:	bf00      	nop
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	200000e0 	.word	0x200000e0

0800958c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8009590:	4802      	ldr	r0, [pc, #8]	; (800959c <USART3_IRQHandler+0x10>)
 8009592:	f7fd f8b7 	bl	8006704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8009596:	bf00      	nop
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	200004c0 	.word	0x200004c0

080095a0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80095a4:	4803      	ldr	r0, [pc, #12]	; (80095b4 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80095a6:	f7fb fef5 	bl	8005394 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80095aa:	4803      	ldr	r0, [pc, #12]	; (80095b8 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80095ac:	f7fb fef2 	bl	8005394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80095b0:	bf00      	nop
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20000480 	.word	0x20000480
 80095b8:	200007c8 	.word	0x200007c8

080095bc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80095c0:	4803      	ldr	r0, [pc, #12]	; (80095d0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80095c2:	f7fb fee7 	bl	8005394 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80095c6:	4803      	ldr	r0, [pc, #12]	; (80095d4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80095c8:	f7fb fee4 	bl	8005394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80095cc:	bf00      	nop
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	20000480 	.word	0x20000480
 80095d4:	2000069c 	.word	0x2000069c

080095d8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80095dc:	4802      	ldr	r0, [pc, #8]	; (80095e8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80095de:	f7fb fed9 	bl	8005394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80095e2:	bf00      	nop
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20000480 	.word	0x20000480

080095ec <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80095f0:	4802      	ldr	r0, [pc, #8]	; (80095fc <TIM8_CC_IRQHandler+0x10>)
 80095f2:	f7fb fecf 	bl	8005394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80095f6:	bf00      	nop
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20000480 	.word	0x20000480

08009600 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009608:	4b11      	ldr	r3, [pc, #68]	; (8009650 <_sbrk+0x50>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d102      	bne.n	8009616 <_sbrk+0x16>
		heap_end = &end;
 8009610:	4b0f      	ldr	r3, [pc, #60]	; (8009650 <_sbrk+0x50>)
 8009612:	4a10      	ldr	r2, [pc, #64]	; (8009654 <_sbrk+0x54>)
 8009614:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009616:	4b0e      	ldr	r3, [pc, #56]	; (8009650 <_sbrk+0x50>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800961c:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <_sbrk+0x50>)
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4413      	add	r3, r2
 8009624:	466a      	mov	r2, sp
 8009626:	4293      	cmp	r3, r2
 8009628:	d907      	bls.n	800963a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800962a:	f000 f855 	bl	80096d8 <__errno>
 800962e:	4602      	mov	r2, r0
 8009630:	230c      	movs	r3, #12
 8009632:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009638:	e006      	b.n	8009648 <_sbrk+0x48>
	}

	heap_end += incr;
 800963a:	4b05      	ldr	r3, [pc, #20]	; (8009650 <_sbrk+0x50>)
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4413      	add	r3, r2
 8009642:	4a03      	ldr	r2, [pc, #12]	; (8009650 <_sbrk+0x50>)
 8009644:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009646:	68fb      	ldr	r3, [r7, #12]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	200000d0 	.word	0x200000d0
 8009654:	20000810 	.word	0x20000810

08009658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009658:	b480      	push	{r7}
 800965a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800965c:	4b08      	ldr	r3, [pc, #32]	; (8009680 <SystemInit+0x28>)
 800965e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009662:	4a07      	ldr	r2, [pc, #28]	; (8009680 <SystemInit+0x28>)
 8009664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800966c:	4b04      	ldr	r3, [pc, #16]	; (8009680 <SystemInit+0x28>)
 800966e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009672:	609a      	str	r2, [r3, #8]
#endif
}
 8009674:	bf00      	nop
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	e000ed00 	.word	0xe000ed00

08009684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80096bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009688:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800968a:	e003      	b.n	8009694 <LoopCopyDataInit>

0800968c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800968c:	4b0c      	ldr	r3, [pc, #48]	; (80096c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800968e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009690:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009692:	3104      	adds	r1, #4

08009694 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009694:	480b      	ldr	r0, [pc, #44]	; (80096c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009696:	4b0c      	ldr	r3, [pc, #48]	; (80096c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009698:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800969a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800969c:	d3f6      	bcc.n	800968c <CopyDataInit>
  ldr  r2, =_sbss
 800969e:	4a0b      	ldr	r2, [pc, #44]	; (80096cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80096a0:	e002      	b.n	80096a8 <LoopFillZerobss>

080096a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80096a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80096a4:	f842 3b04 	str.w	r3, [r2], #4

080096a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80096a8:	4b09      	ldr	r3, [pc, #36]	; (80096d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80096aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80096ac:	d3f9      	bcc.n	80096a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80096ae:	f7ff ffd3 	bl	8009658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80096b2:	f000 f817 	bl	80096e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80096b6:	f7fd fde3 	bl	8007280 <main>
  bx  lr    
 80096ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80096bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80096c0:	0800b280 	.word	0x0800b280
  ldr  r0, =_sdata
 80096c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80096c8:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 80096cc:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 80096d0:	2000080c 	.word	0x2000080c

080096d4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80096d4:	e7fe      	b.n	80096d4 <CAN1_RX0_IRQHandler>
	...

080096d8 <__errno>:
 80096d8:	4b01      	ldr	r3, [pc, #4]	; (80096e0 <__errno+0x8>)
 80096da:	6818      	ldr	r0, [r3, #0]
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	20000028 	.word	0x20000028

080096e4 <__libc_init_array>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	4e0d      	ldr	r6, [pc, #52]	; (800971c <__libc_init_array+0x38>)
 80096e8:	4c0d      	ldr	r4, [pc, #52]	; (8009720 <__libc_init_array+0x3c>)
 80096ea:	1ba4      	subs	r4, r4, r6
 80096ec:	10a4      	asrs	r4, r4, #2
 80096ee:	2500      	movs	r5, #0
 80096f0:	42a5      	cmp	r5, r4
 80096f2:	d109      	bne.n	8009708 <__libc_init_array+0x24>
 80096f4:	4e0b      	ldr	r6, [pc, #44]	; (8009724 <__libc_init_array+0x40>)
 80096f6:	4c0c      	ldr	r4, [pc, #48]	; (8009728 <__libc_init_array+0x44>)
 80096f8:	f001 fc34 	bl	800af64 <_init>
 80096fc:	1ba4      	subs	r4, r4, r6
 80096fe:	10a4      	asrs	r4, r4, #2
 8009700:	2500      	movs	r5, #0
 8009702:	42a5      	cmp	r5, r4
 8009704:	d105      	bne.n	8009712 <__libc_init_array+0x2e>
 8009706:	bd70      	pop	{r4, r5, r6, pc}
 8009708:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800970c:	4798      	blx	r3
 800970e:	3501      	adds	r5, #1
 8009710:	e7ee      	b.n	80096f0 <__libc_init_array+0xc>
 8009712:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009716:	4798      	blx	r3
 8009718:	3501      	adds	r5, #1
 800971a:	e7f2      	b.n	8009702 <__libc_init_array+0x1e>
 800971c:	0800b278 	.word	0x0800b278
 8009720:	0800b278 	.word	0x0800b278
 8009724:	0800b278 	.word	0x0800b278
 8009728:	0800b27c 	.word	0x0800b27c

0800972c <memset>:
 800972c:	4402      	add	r2, r0
 800972e:	4603      	mov	r3, r0
 8009730:	4293      	cmp	r3, r2
 8009732:	d100      	bne.n	8009736 <memset+0xa>
 8009734:	4770      	bx	lr
 8009736:	f803 1b01 	strb.w	r1, [r3], #1
 800973a:	e7f9      	b.n	8009730 <memset+0x4>

0800973c <siprintf>:
 800973c:	b40e      	push	{r1, r2, r3}
 800973e:	b500      	push	{lr}
 8009740:	b09c      	sub	sp, #112	; 0x70
 8009742:	ab1d      	add	r3, sp, #116	; 0x74
 8009744:	9002      	str	r0, [sp, #8]
 8009746:	9006      	str	r0, [sp, #24]
 8009748:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800974c:	4809      	ldr	r0, [pc, #36]	; (8009774 <siprintf+0x38>)
 800974e:	9107      	str	r1, [sp, #28]
 8009750:	9104      	str	r1, [sp, #16]
 8009752:	4909      	ldr	r1, [pc, #36]	; (8009778 <siprintf+0x3c>)
 8009754:	f853 2b04 	ldr.w	r2, [r3], #4
 8009758:	9105      	str	r1, [sp, #20]
 800975a:	6800      	ldr	r0, [r0, #0]
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	a902      	add	r1, sp, #8
 8009760:	f000 f866 	bl	8009830 <_svfiprintf_r>
 8009764:	9b02      	ldr	r3, [sp, #8]
 8009766:	2200      	movs	r2, #0
 8009768:	701a      	strb	r2, [r3, #0]
 800976a:	b01c      	add	sp, #112	; 0x70
 800976c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009770:	b003      	add	sp, #12
 8009772:	4770      	bx	lr
 8009774:	20000028 	.word	0x20000028
 8009778:	ffff0208 	.word	0xffff0208

0800977c <__ssputs_r>:
 800977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009780:	688e      	ldr	r6, [r1, #8]
 8009782:	429e      	cmp	r6, r3
 8009784:	4682      	mov	sl, r0
 8009786:	460c      	mov	r4, r1
 8009788:	4690      	mov	r8, r2
 800978a:	4699      	mov	r9, r3
 800978c:	d837      	bhi.n	80097fe <__ssputs_r+0x82>
 800978e:	898a      	ldrh	r2, [r1, #12]
 8009790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009794:	d031      	beq.n	80097fa <__ssputs_r+0x7e>
 8009796:	6825      	ldr	r5, [r4, #0]
 8009798:	6909      	ldr	r1, [r1, #16]
 800979a:	1a6f      	subs	r7, r5, r1
 800979c:	6965      	ldr	r5, [r4, #20]
 800979e:	2302      	movs	r3, #2
 80097a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80097a8:	f109 0301 	add.w	r3, r9, #1
 80097ac:	443b      	add	r3, r7
 80097ae:	429d      	cmp	r5, r3
 80097b0:	bf38      	it	cc
 80097b2:	461d      	movcc	r5, r3
 80097b4:	0553      	lsls	r3, r2, #21
 80097b6:	d530      	bpl.n	800981a <__ssputs_r+0x9e>
 80097b8:	4629      	mov	r1, r5
 80097ba:	f000 fb2b 	bl	8009e14 <_malloc_r>
 80097be:	4606      	mov	r6, r0
 80097c0:	b950      	cbnz	r0, 80097d8 <__ssputs_r+0x5c>
 80097c2:	230c      	movs	r3, #12
 80097c4:	f8ca 3000 	str.w	r3, [sl]
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ce:	81a3      	strh	r3, [r4, #12]
 80097d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d8:	463a      	mov	r2, r7
 80097da:	6921      	ldr	r1, [r4, #16]
 80097dc:	f000 faa8 	bl	8009d30 <memcpy>
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ea:	81a3      	strh	r3, [r4, #12]
 80097ec:	6126      	str	r6, [r4, #16]
 80097ee:	6165      	str	r5, [r4, #20]
 80097f0:	443e      	add	r6, r7
 80097f2:	1bed      	subs	r5, r5, r7
 80097f4:	6026      	str	r6, [r4, #0]
 80097f6:	60a5      	str	r5, [r4, #8]
 80097f8:	464e      	mov	r6, r9
 80097fa:	454e      	cmp	r6, r9
 80097fc:	d900      	bls.n	8009800 <__ssputs_r+0x84>
 80097fe:	464e      	mov	r6, r9
 8009800:	4632      	mov	r2, r6
 8009802:	4641      	mov	r1, r8
 8009804:	6820      	ldr	r0, [r4, #0]
 8009806:	f000 fa9e 	bl	8009d46 <memmove>
 800980a:	68a3      	ldr	r3, [r4, #8]
 800980c:	1b9b      	subs	r3, r3, r6
 800980e:	60a3      	str	r3, [r4, #8]
 8009810:	6823      	ldr	r3, [r4, #0]
 8009812:	441e      	add	r6, r3
 8009814:	6026      	str	r6, [r4, #0]
 8009816:	2000      	movs	r0, #0
 8009818:	e7dc      	b.n	80097d4 <__ssputs_r+0x58>
 800981a:	462a      	mov	r2, r5
 800981c:	f000 fb54 	bl	8009ec8 <_realloc_r>
 8009820:	4606      	mov	r6, r0
 8009822:	2800      	cmp	r0, #0
 8009824:	d1e2      	bne.n	80097ec <__ssputs_r+0x70>
 8009826:	6921      	ldr	r1, [r4, #16]
 8009828:	4650      	mov	r0, sl
 800982a:	f000 faa5 	bl	8009d78 <_free_r>
 800982e:	e7c8      	b.n	80097c2 <__ssputs_r+0x46>

08009830 <_svfiprintf_r>:
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	461d      	mov	r5, r3
 8009836:	898b      	ldrh	r3, [r1, #12]
 8009838:	061f      	lsls	r7, r3, #24
 800983a:	b09d      	sub	sp, #116	; 0x74
 800983c:	4680      	mov	r8, r0
 800983e:	460c      	mov	r4, r1
 8009840:	4616      	mov	r6, r2
 8009842:	d50f      	bpl.n	8009864 <_svfiprintf_r+0x34>
 8009844:	690b      	ldr	r3, [r1, #16]
 8009846:	b96b      	cbnz	r3, 8009864 <_svfiprintf_r+0x34>
 8009848:	2140      	movs	r1, #64	; 0x40
 800984a:	f000 fae3 	bl	8009e14 <_malloc_r>
 800984e:	6020      	str	r0, [r4, #0]
 8009850:	6120      	str	r0, [r4, #16]
 8009852:	b928      	cbnz	r0, 8009860 <_svfiprintf_r+0x30>
 8009854:	230c      	movs	r3, #12
 8009856:	f8c8 3000 	str.w	r3, [r8]
 800985a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800985e:	e0c8      	b.n	80099f2 <_svfiprintf_r+0x1c2>
 8009860:	2340      	movs	r3, #64	; 0x40
 8009862:	6163      	str	r3, [r4, #20]
 8009864:	2300      	movs	r3, #0
 8009866:	9309      	str	r3, [sp, #36]	; 0x24
 8009868:	2320      	movs	r3, #32
 800986a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800986e:	2330      	movs	r3, #48	; 0x30
 8009870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009874:	9503      	str	r5, [sp, #12]
 8009876:	f04f 0b01 	mov.w	fp, #1
 800987a:	4637      	mov	r7, r6
 800987c:	463d      	mov	r5, r7
 800987e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009882:	b10b      	cbz	r3, 8009888 <_svfiprintf_r+0x58>
 8009884:	2b25      	cmp	r3, #37	; 0x25
 8009886:	d13e      	bne.n	8009906 <_svfiprintf_r+0xd6>
 8009888:	ebb7 0a06 	subs.w	sl, r7, r6
 800988c:	d00b      	beq.n	80098a6 <_svfiprintf_r+0x76>
 800988e:	4653      	mov	r3, sl
 8009890:	4632      	mov	r2, r6
 8009892:	4621      	mov	r1, r4
 8009894:	4640      	mov	r0, r8
 8009896:	f7ff ff71 	bl	800977c <__ssputs_r>
 800989a:	3001      	adds	r0, #1
 800989c:	f000 80a4 	beq.w	80099e8 <_svfiprintf_r+0x1b8>
 80098a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a2:	4453      	add	r3, sl
 80098a4:	9309      	str	r3, [sp, #36]	; 0x24
 80098a6:	783b      	ldrb	r3, [r7, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 809d 	beq.w	80099e8 <_svfiprintf_r+0x1b8>
 80098ae:	2300      	movs	r3, #0
 80098b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098b8:	9304      	str	r3, [sp, #16]
 80098ba:	9307      	str	r3, [sp, #28]
 80098bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098c0:	931a      	str	r3, [sp, #104]	; 0x68
 80098c2:	462f      	mov	r7, r5
 80098c4:	2205      	movs	r2, #5
 80098c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80098ca:	4850      	ldr	r0, [pc, #320]	; (8009a0c <_svfiprintf_r+0x1dc>)
 80098cc:	f7f6 fc88 	bl	80001e0 <memchr>
 80098d0:	9b04      	ldr	r3, [sp, #16]
 80098d2:	b9d0      	cbnz	r0, 800990a <_svfiprintf_r+0xda>
 80098d4:	06d9      	lsls	r1, r3, #27
 80098d6:	bf44      	itt	mi
 80098d8:	2220      	movmi	r2, #32
 80098da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80098de:	071a      	lsls	r2, r3, #28
 80098e0:	bf44      	itt	mi
 80098e2:	222b      	movmi	r2, #43	; 0x2b
 80098e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80098e8:	782a      	ldrb	r2, [r5, #0]
 80098ea:	2a2a      	cmp	r2, #42	; 0x2a
 80098ec:	d015      	beq.n	800991a <_svfiprintf_r+0xea>
 80098ee:	9a07      	ldr	r2, [sp, #28]
 80098f0:	462f      	mov	r7, r5
 80098f2:	2000      	movs	r0, #0
 80098f4:	250a      	movs	r5, #10
 80098f6:	4639      	mov	r1, r7
 80098f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098fc:	3b30      	subs	r3, #48	; 0x30
 80098fe:	2b09      	cmp	r3, #9
 8009900:	d94d      	bls.n	800999e <_svfiprintf_r+0x16e>
 8009902:	b1b8      	cbz	r0, 8009934 <_svfiprintf_r+0x104>
 8009904:	e00f      	b.n	8009926 <_svfiprintf_r+0xf6>
 8009906:	462f      	mov	r7, r5
 8009908:	e7b8      	b.n	800987c <_svfiprintf_r+0x4c>
 800990a:	4a40      	ldr	r2, [pc, #256]	; (8009a0c <_svfiprintf_r+0x1dc>)
 800990c:	1a80      	subs	r0, r0, r2
 800990e:	fa0b f000 	lsl.w	r0, fp, r0
 8009912:	4318      	orrs	r0, r3
 8009914:	9004      	str	r0, [sp, #16]
 8009916:	463d      	mov	r5, r7
 8009918:	e7d3      	b.n	80098c2 <_svfiprintf_r+0x92>
 800991a:	9a03      	ldr	r2, [sp, #12]
 800991c:	1d11      	adds	r1, r2, #4
 800991e:	6812      	ldr	r2, [r2, #0]
 8009920:	9103      	str	r1, [sp, #12]
 8009922:	2a00      	cmp	r2, #0
 8009924:	db01      	blt.n	800992a <_svfiprintf_r+0xfa>
 8009926:	9207      	str	r2, [sp, #28]
 8009928:	e004      	b.n	8009934 <_svfiprintf_r+0x104>
 800992a:	4252      	negs	r2, r2
 800992c:	f043 0302 	orr.w	r3, r3, #2
 8009930:	9207      	str	r2, [sp, #28]
 8009932:	9304      	str	r3, [sp, #16]
 8009934:	783b      	ldrb	r3, [r7, #0]
 8009936:	2b2e      	cmp	r3, #46	; 0x2e
 8009938:	d10c      	bne.n	8009954 <_svfiprintf_r+0x124>
 800993a:	787b      	ldrb	r3, [r7, #1]
 800993c:	2b2a      	cmp	r3, #42	; 0x2a
 800993e:	d133      	bne.n	80099a8 <_svfiprintf_r+0x178>
 8009940:	9b03      	ldr	r3, [sp, #12]
 8009942:	1d1a      	adds	r2, r3, #4
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	9203      	str	r2, [sp, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	bfb8      	it	lt
 800994c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009950:	3702      	adds	r7, #2
 8009952:	9305      	str	r3, [sp, #20]
 8009954:	4d2e      	ldr	r5, [pc, #184]	; (8009a10 <_svfiprintf_r+0x1e0>)
 8009956:	7839      	ldrb	r1, [r7, #0]
 8009958:	2203      	movs	r2, #3
 800995a:	4628      	mov	r0, r5
 800995c:	f7f6 fc40 	bl	80001e0 <memchr>
 8009960:	b138      	cbz	r0, 8009972 <_svfiprintf_r+0x142>
 8009962:	2340      	movs	r3, #64	; 0x40
 8009964:	1b40      	subs	r0, r0, r5
 8009966:	fa03 f000 	lsl.w	r0, r3, r0
 800996a:	9b04      	ldr	r3, [sp, #16]
 800996c:	4303      	orrs	r3, r0
 800996e:	3701      	adds	r7, #1
 8009970:	9304      	str	r3, [sp, #16]
 8009972:	7839      	ldrb	r1, [r7, #0]
 8009974:	4827      	ldr	r0, [pc, #156]	; (8009a14 <_svfiprintf_r+0x1e4>)
 8009976:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800997a:	2206      	movs	r2, #6
 800997c:	1c7e      	adds	r6, r7, #1
 800997e:	f7f6 fc2f 	bl	80001e0 <memchr>
 8009982:	2800      	cmp	r0, #0
 8009984:	d038      	beq.n	80099f8 <_svfiprintf_r+0x1c8>
 8009986:	4b24      	ldr	r3, [pc, #144]	; (8009a18 <_svfiprintf_r+0x1e8>)
 8009988:	bb13      	cbnz	r3, 80099d0 <_svfiprintf_r+0x1a0>
 800998a:	9b03      	ldr	r3, [sp, #12]
 800998c:	3307      	adds	r3, #7
 800998e:	f023 0307 	bic.w	r3, r3, #7
 8009992:	3308      	adds	r3, #8
 8009994:	9303      	str	r3, [sp, #12]
 8009996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009998:	444b      	add	r3, r9
 800999a:	9309      	str	r3, [sp, #36]	; 0x24
 800999c:	e76d      	b.n	800987a <_svfiprintf_r+0x4a>
 800999e:	fb05 3202 	mla	r2, r5, r2, r3
 80099a2:	2001      	movs	r0, #1
 80099a4:	460f      	mov	r7, r1
 80099a6:	e7a6      	b.n	80098f6 <_svfiprintf_r+0xc6>
 80099a8:	2300      	movs	r3, #0
 80099aa:	3701      	adds	r7, #1
 80099ac:	9305      	str	r3, [sp, #20]
 80099ae:	4619      	mov	r1, r3
 80099b0:	250a      	movs	r5, #10
 80099b2:	4638      	mov	r0, r7
 80099b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099b8:	3a30      	subs	r2, #48	; 0x30
 80099ba:	2a09      	cmp	r2, #9
 80099bc:	d903      	bls.n	80099c6 <_svfiprintf_r+0x196>
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d0c8      	beq.n	8009954 <_svfiprintf_r+0x124>
 80099c2:	9105      	str	r1, [sp, #20]
 80099c4:	e7c6      	b.n	8009954 <_svfiprintf_r+0x124>
 80099c6:	fb05 2101 	mla	r1, r5, r1, r2
 80099ca:	2301      	movs	r3, #1
 80099cc:	4607      	mov	r7, r0
 80099ce:	e7f0      	b.n	80099b2 <_svfiprintf_r+0x182>
 80099d0:	ab03      	add	r3, sp, #12
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	4622      	mov	r2, r4
 80099d6:	4b11      	ldr	r3, [pc, #68]	; (8009a1c <_svfiprintf_r+0x1ec>)
 80099d8:	a904      	add	r1, sp, #16
 80099da:	4640      	mov	r0, r8
 80099dc:	f3af 8000 	nop.w
 80099e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80099e4:	4681      	mov	r9, r0
 80099e6:	d1d6      	bne.n	8009996 <_svfiprintf_r+0x166>
 80099e8:	89a3      	ldrh	r3, [r4, #12]
 80099ea:	065b      	lsls	r3, r3, #25
 80099ec:	f53f af35 	bmi.w	800985a <_svfiprintf_r+0x2a>
 80099f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099f2:	b01d      	add	sp, #116	; 0x74
 80099f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f8:	ab03      	add	r3, sp, #12
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	4622      	mov	r2, r4
 80099fe:	4b07      	ldr	r3, [pc, #28]	; (8009a1c <_svfiprintf_r+0x1ec>)
 8009a00:	a904      	add	r1, sp, #16
 8009a02:	4640      	mov	r0, r8
 8009a04:	f000 f882 	bl	8009b0c <_printf_i>
 8009a08:	e7ea      	b.n	80099e0 <_svfiprintf_r+0x1b0>
 8009a0a:	bf00      	nop
 8009a0c:	0800b064 	.word	0x0800b064
 8009a10:	0800b06a 	.word	0x0800b06a
 8009a14:	0800b06e 	.word	0x0800b06e
 8009a18:	00000000 	.word	0x00000000
 8009a1c:	0800977d 	.word	0x0800977d

08009a20 <_printf_common>:
 8009a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a24:	4691      	mov	r9, r2
 8009a26:	461f      	mov	r7, r3
 8009a28:	688a      	ldr	r2, [r1, #8]
 8009a2a:	690b      	ldr	r3, [r1, #16]
 8009a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a30:	4293      	cmp	r3, r2
 8009a32:	bfb8      	it	lt
 8009a34:	4613      	movlt	r3, r2
 8009a36:	f8c9 3000 	str.w	r3, [r9]
 8009a3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a3e:	4606      	mov	r6, r0
 8009a40:	460c      	mov	r4, r1
 8009a42:	b112      	cbz	r2, 8009a4a <_printf_common+0x2a>
 8009a44:	3301      	adds	r3, #1
 8009a46:	f8c9 3000 	str.w	r3, [r9]
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	0699      	lsls	r1, r3, #26
 8009a4e:	bf42      	ittt	mi
 8009a50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009a54:	3302      	addmi	r3, #2
 8009a56:	f8c9 3000 	strmi.w	r3, [r9]
 8009a5a:	6825      	ldr	r5, [r4, #0]
 8009a5c:	f015 0506 	ands.w	r5, r5, #6
 8009a60:	d107      	bne.n	8009a72 <_printf_common+0x52>
 8009a62:	f104 0a19 	add.w	sl, r4, #25
 8009a66:	68e3      	ldr	r3, [r4, #12]
 8009a68:	f8d9 2000 	ldr.w	r2, [r9]
 8009a6c:	1a9b      	subs	r3, r3, r2
 8009a6e:	42ab      	cmp	r3, r5
 8009a70:	dc28      	bgt.n	8009ac4 <_printf_common+0xa4>
 8009a72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009a76:	6822      	ldr	r2, [r4, #0]
 8009a78:	3300      	adds	r3, #0
 8009a7a:	bf18      	it	ne
 8009a7c:	2301      	movne	r3, #1
 8009a7e:	0692      	lsls	r2, r2, #26
 8009a80:	d42d      	bmi.n	8009ade <_printf_common+0xbe>
 8009a82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a86:	4639      	mov	r1, r7
 8009a88:	4630      	mov	r0, r6
 8009a8a:	47c0      	blx	r8
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d020      	beq.n	8009ad2 <_printf_common+0xb2>
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	68e5      	ldr	r5, [r4, #12]
 8009a94:	f8d9 2000 	ldr.w	r2, [r9]
 8009a98:	f003 0306 	and.w	r3, r3, #6
 8009a9c:	2b04      	cmp	r3, #4
 8009a9e:	bf08      	it	eq
 8009aa0:	1aad      	subeq	r5, r5, r2
 8009aa2:	68a3      	ldr	r3, [r4, #8]
 8009aa4:	6922      	ldr	r2, [r4, #16]
 8009aa6:	bf0c      	ite	eq
 8009aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009aac:	2500      	movne	r5, #0
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	bfc4      	itt	gt
 8009ab2:	1a9b      	subgt	r3, r3, r2
 8009ab4:	18ed      	addgt	r5, r5, r3
 8009ab6:	f04f 0900 	mov.w	r9, #0
 8009aba:	341a      	adds	r4, #26
 8009abc:	454d      	cmp	r5, r9
 8009abe:	d11a      	bne.n	8009af6 <_printf_common+0xd6>
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	e008      	b.n	8009ad6 <_printf_common+0xb6>
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	4652      	mov	r2, sl
 8009ac8:	4639      	mov	r1, r7
 8009aca:	4630      	mov	r0, r6
 8009acc:	47c0      	blx	r8
 8009ace:	3001      	adds	r0, #1
 8009ad0:	d103      	bne.n	8009ada <_printf_common+0xba>
 8009ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ada:	3501      	adds	r5, #1
 8009adc:	e7c3      	b.n	8009a66 <_printf_common+0x46>
 8009ade:	18e1      	adds	r1, r4, r3
 8009ae0:	1c5a      	adds	r2, r3, #1
 8009ae2:	2030      	movs	r0, #48	; 0x30
 8009ae4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ae8:	4422      	add	r2, r4
 8009aea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009aee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009af2:	3302      	adds	r3, #2
 8009af4:	e7c5      	b.n	8009a82 <_printf_common+0x62>
 8009af6:	2301      	movs	r3, #1
 8009af8:	4622      	mov	r2, r4
 8009afa:	4639      	mov	r1, r7
 8009afc:	4630      	mov	r0, r6
 8009afe:	47c0      	blx	r8
 8009b00:	3001      	adds	r0, #1
 8009b02:	d0e6      	beq.n	8009ad2 <_printf_common+0xb2>
 8009b04:	f109 0901 	add.w	r9, r9, #1
 8009b08:	e7d8      	b.n	8009abc <_printf_common+0x9c>
	...

08009b0c <_printf_i>:
 8009b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009b14:	460c      	mov	r4, r1
 8009b16:	7e09      	ldrb	r1, [r1, #24]
 8009b18:	b085      	sub	sp, #20
 8009b1a:	296e      	cmp	r1, #110	; 0x6e
 8009b1c:	4617      	mov	r7, r2
 8009b1e:	4606      	mov	r6, r0
 8009b20:	4698      	mov	r8, r3
 8009b22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b24:	f000 80b3 	beq.w	8009c8e <_printf_i+0x182>
 8009b28:	d822      	bhi.n	8009b70 <_printf_i+0x64>
 8009b2a:	2963      	cmp	r1, #99	; 0x63
 8009b2c:	d036      	beq.n	8009b9c <_printf_i+0x90>
 8009b2e:	d80a      	bhi.n	8009b46 <_printf_i+0x3a>
 8009b30:	2900      	cmp	r1, #0
 8009b32:	f000 80b9 	beq.w	8009ca8 <_printf_i+0x19c>
 8009b36:	2958      	cmp	r1, #88	; 0x58
 8009b38:	f000 8083 	beq.w	8009c42 <_printf_i+0x136>
 8009b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009b44:	e032      	b.n	8009bac <_printf_i+0xa0>
 8009b46:	2964      	cmp	r1, #100	; 0x64
 8009b48:	d001      	beq.n	8009b4e <_printf_i+0x42>
 8009b4a:	2969      	cmp	r1, #105	; 0x69
 8009b4c:	d1f6      	bne.n	8009b3c <_printf_i+0x30>
 8009b4e:	6820      	ldr	r0, [r4, #0]
 8009b50:	6813      	ldr	r3, [r2, #0]
 8009b52:	0605      	lsls	r5, r0, #24
 8009b54:	f103 0104 	add.w	r1, r3, #4
 8009b58:	d52a      	bpl.n	8009bb0 <_printf_i+0xa4>
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	6011      	str	r1, [r2, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	da03      	bge.n	8009b6a <_printf_i+0x5e>
 8009b62:	222d      	movs	r2, #45	; 0x2d
 8009b64:	425b      	negs	r3, r3
 8009b66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009b6a:	486f      	ldr	r0, [pc, #444]	; (8009d28 <_printf_i+0x21c>)
 8009b6c:	220a      	movs	r2, #10
 8009b6e:	e039      	b.n	8009be4 <_printf_i+0xd8>
 8009b70:	2973      	cmp	r1, #115	; 0x73
 8009b72:	f000 809d 	beq.w	8009cb0 <_printf_i+0x1a4>
 8009b76:	d808      	bhi.n	8009b8a <_printf_i+0x7e>
 8009b78:	296f      	cmp	r1, #111	; 0x6f
 8009b7a:	d020      	beq.n	8009bbe <_printf_i+0xb2>
 8009b7c:	2970      	cmp	r1, #112	; 0x70
 8009b7e:	d1dd      	bne.n	8009b3c <_printf_i+0x30>
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	f043 0320 	orr.w	r3, r3, #32
 8009b86:	6023      	str	r3, [r4, #0]
 8009b88:	e003      	b.n	8009b92 <_printf_i+0x86>
 8009b8a:	2975      	cmp	r1, #117	; 0x75
 8009b8c:	d017      	beq.n	8009bbe <_printf_i+0xb2>
 8009b8e:	2978      	cmp	r1, #120	; 0x78
 8009b90:	d1d4      	bne.n	8009b3c <_printf_i+0x30>
 8009b92:	2378      	movs	r3, #120	; 0x78
 8009b94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b98:	4864      	ldr	r0, [pc, #400]	; (8009d2c <_printf_i+0x220>)
 8009b9a:	e055      	b.n	8009c48 <_printf_i+0x13c>
 8009b9c:	6813      	ldr	r3, [r2, #0]
 8009b9e:	1d19      	adds	r1, r3, #4
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	6011      	str	r1, [r2, #0]
 8009ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bac:	2301      	movs	r3, #1
 8009bae:	e08c      	b.n	8009cca <_printf_i+0x1be>
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6011      	str	r1, [r2, #0]
 8009bb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009bb8:	bf18      	it	ne
 8009bba:	b21b      	sxthne	r3, r3
 8009bbc:	e7cf      	b.n	8009b5e <_printf_i+0x52>
 8009bbe:	6813      	ldr	r3, [r2, #0]
 8009bc0:	6825      	ldr	r5, [r4, #0]
 8009bc2:	1d18      	adds	r0, r3, #4
 8009bc4:	6010      	str	r0, [r2, #0]
 8009bc6:	0628      	lsls	r0, r5, #24
 8009bc8:	d501      	bpl.n	8009bce <_printf_i+0xc2>
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	e002      	b.n	8009bd4 <_printf_i+0xc8>
 8009bce:	0668      	lsls	r0, r5, #25
 8009bd0:	d5fb      	bpl.n	8009bca <_printf_i+0xbe>
 8009bd2:	881b      	ldrh	r3, [r3, #0]
 8009bd4:	4854      	ldr	r0, [pc, #336]	; (8009d28 <_printf_i+0x21c>)
 8009bd6:	296f      	cmp	r1, #111	; 0x6f
 8009bd8:	bf14      	ite	ne
 8009bda:	220a      	movne	r2, #10
 8009bdc:	2208      	moveq	r2, #8
 8009bde:	2100      	movs	r1, #0
 8009be0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009be4:	6865      	ldr	r5, [r4, #4]
 8009be6:	60a5      	str	r5, [r4, #8]
 8009be8:	2d00      	cmp	r5, #0
 8009bea:	f2c0 8095 	blt.w	8009d18 <_printf_i+0x20c>
 8009bee:	6821      	ldr	r1, [r4, #0]
 8009bf0:	f021 0104 	bic.w	r1, r1, #4
 8009bf4:	6021      	str	r1, [r4, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d13d      	bne.n	8009c76 <_printf_i+0x16a>
 8009bfa:	2d00      	cmp	r5, #0
 8009bfc:	f040 808e 	bne.w	8009d1c <_printf_i+0x210>
 8009c00:	4665      	mov	r5, ip
 8009c02:	2a08      	cmp	r2, #8
 8009c04:	d10b      	bne.n	8009c1e <_printf_i+0x112>
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	07db      	lsls	r3, r3, #31
 8009c0a:	d508      	bpl.n	8009c1e <_printf_i+0x112>
 8009c0c:	6923      	ldr	r3, [r4, #16]
 8009c0e:	6862      	ldr	r2, [r4, #4]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	bfde      	ittt	le
 8009c14:	2330      	movle	r3, #48	; 0x30
 8009c16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c1a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009c1e:	ebac 0305 	sub.w	r3, ip, r5
 8009c22:	6123      	str	r3, [r4, #16]
 8009c24:	f8cd 8000 	str.w	r8, [sp]
 8009c28:	463b      	mov	r3, r7
 8009c2a:	aa03      	add	r2, sp, #12
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f7ff fef6 	bl	8009a20 <_printf_common>
 8009c34:	3001      	adds	r0, #1
 8009c36:	d14d      	bne.n	8009cd4 <_printf_i+0x1c8>
 8009c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c3c:	b005      	add	sp, #20
 8009c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c42:	4839      	ldr	r0, [pc, #228]	; (8009d28 <_printf_i+0x21c>)
 8009c44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009c48:	6813      	ldr	r3, [r2, #0]
 8009c4a:	6821      	ldr	r1, [r4, #0]
 8009c4c:	1d1d      	adds	r5, r3, #4
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6015      	str	r5, [r2, #0]
 8009c52:	060a      	lsls	r2, r1, #24
 8009c54:	d50b      	bpl.n	8009c6e <_printf_i+0x162>
 8009c56:	07ca      	lsls	r2, r1, #31
 8009c58:	bf44      	itt	mi
 8009c5a:	f041 0120 	orrmi.w	r1, r1, #32
 8009c5e:	6021      	strmi	r1, [r4, #0]
 8009c60:	b91b      	cbnz	r3, 8009c6a <_printf_i+0x15e>
 8009c62:	6822      	ldr	r2, [r4, #0]
 8009c64:	f022 0220 	bic.w	r2, r2, #32
 8009c68:	6022      	str	r2, [r4, #0]
 8009c6a:	2210      	movs	r2, #16
 8009c6c:	e7b7      	b.n	8009bde <_printf_i+0xd2>
 8009c6e:	064d      	lsls	r5, r1, #25
 8009c70:	bf48      	it	mi
 8009c72:	b29b      	uxthmi	r3, r3
 8009c74:	e7ef      	b.n	8009c56 <_printf_i+0x14a>
 8009c76:	4665      	mov	r5, ip
 8009c78:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c7c:	fb02 3311 	mls	r3, r2, r1, r3
 8009c80:	5cc3      	ldrb	r3, [r0, r3]
 8009c82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009c86:	460b      	mov	r3, r1
 8009c88:	2900      	cmp	r1, #0
 8009c8a:	d1f5      	bne.n	8009c78 <_printf_i+0x16c>
 8009c8c:	e7b9      	b.n	8009c02 <_printf_i+0xf6>
 8009c8e:	6813      	ldr	r3, [r2, #0]
 8009c90:	6825      	ldr	r5, [r4, #0]
 8009c92:	6961      	ldr	r1, [r4, #20]
 8009c94:	1d18      	adds	r0, r3, #4
 8009c96:	6010      	str	r0, [r2, #0]
 8009c98:	0628      	lsls	r0, r5, #24
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	d501      	bpl.n	8009ca2 <_printf_i+0x196>
 8009c9e:	6019      	str	r1, [r3, #0]
 8009ca0:	e002      	b.n	8009ca8 <_printf_i+0x19c>
 8009ca2:	066a      	lsls	r2, r5, #25
 8009ca4:	d5fb      	bpl.n	8009c9e <_printf_i+0x192>
 8009ca6:	8019      	strh	r1, [r3, #0]
 8009ca8:	2300      	movs	r3, #0
 8009caa:	6123      	str	r3, [r4, #16]
 8009cac:	4665      	mov	r5, ip
 8009cae:	e7b9      	b.n	8009c24 <_printf_i+0x118>
 8009cb0:	6813      	ldr	r3, [r2, #0]
 8009cb2:	1d19      	adds	r1, r3, #4
 8009cb4:	6011      	str	r1, [r2, #0]
 8009cb6:	681d      	ldr	r5, [r3, #0]
 8009cb8:	6862      	ldr	r2, [r4, #4]
 8009cba:	2100      	movs	r1, #0
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	f7f6 fa8f 	bl	80001e0 <memchr>
 8009cc2:	b108      	cbz	r0, 8009cc8 <_printf_i+0x1bc>
 8009cc4:	1b40      	subs	r0, r0, r5
 8009cc6:	6060      	str	r0, [r4, #4]
 8009cc8:	6863      	ldr	r3, [r4, #4]
 8009cca:	6123      	str	r3, [r4, #16]
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cd2:	e7a7      	b.n	8009c24 <_printf_i+0x118>
 8009cd4:	6923      	ldr	r3, [r4, #16]
 8009cd6:	462a      	mov	r2, r5
 8009cd8:	4639      	mov	r1, r7
 8009cda:	4630      	mov	r0, r6
 8009cdc:	47c0      	blx	r8
 8009cde:	3001      	adds	r0, #1
 8009ce0:	d0aa      	beq.n	8009c38 <_printf_i+0x12c>
 8009ce2:	6823      	ldr	r3, [r4, #0]
 8009ce4:	079b      	lsls	r3, r3, #30
 8009ce6:	d413      	bmi.n	8009d10 <_printf_i+0x204>
 8009ce8:	68e0      	ldr	r0, [r4, #12]
 8009cea:	9b03      	ldr	r3, [sp, #12]
 8009cec:	4298      	cmp	r0, r3
 8009cee:	bfb8      	it	lt
 8009cf0:	4618      	movlt	r0, r3
 8009cf2:	e7a3      	b.n	8009c3c <_printf_i+0x130>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	464a      	mov	r2, r9
 8009cf8:	4639      	mov	r1, r7
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	47c0      	blx	r8
 8009cfe:	3001      	adds	r0, #1
 8009d00:	d09a      	beq.n	8009c38 <_printf_i+0x12c>
 8009d02:	3501      	adds	r5, #1
 8009d04:	68e3      	ldr	r3, [r4, #12]
 8009d06:	9a03      	ldr	r2, [sp, #12]
 8009d08:	1a9b      	subs	r3, r3, r2
 8009d0a:	42ab      	cmp	r3, r5
 8009d0c:	dcf2      	bgt.n	8009cf4 <_printf_i+0x1e8>
 8009d0e:	e7eb      	b.n	8009ce8 <_printf_i+0x1dc>
 8009d10:	2500      	movs	r5, #0
 8009d12:	f104 0919 	add.w	r9, r4, #25
 8009d16:	e7f5      	b.n	8009d04 <_printf_i+0x1f8>
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1ac      	bne.n	8009c76 <_printf_i+0x16a>
 8009d1c:	7803      	ldrb	r3, [r0, #0]
 8009d1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d26:	e76c      	b.n	8009c02 <_printf_i+0xf6>
 8009d28:	0800b075 	.word	0x0800b075
 8009d2c:	0800b086 	.word	0x0800b086

08009d30 <memcpy>:
 8009d30:	b510      	push	{r4, lr}
 8009d32:	1e43      	subs	r3, r0, #1
 8009d34:	440a      	add	r2, r1
 8009d36:	4291      	cmp	r1, r2
 8009d38:	d100      	bne.n	8009d3c <memcpy+0xc>
 8009d3a:	bd10      	pop	{r4, pc}
 8009d3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d44:	e7f7      	b.n	8009d36 <memcpy+0x6>

08009d46 <memmove>:
 8009d46:	4288      	cmp	r0, r1
 8009d48:	b510      	push	{r4, lr}
 8009d4a:	eb01 0302 	add.w	r3, r1, r2
 8009d4e:	d807      	bhi.n	8009d60 <memmove+0x1a>
 8009d50:	1e42      	subs	r2, r0, #1
 8009d52:	4299      	cmp	r1, r3
 8009d54:	d00a      	beq.n	8009d6c <memmove+0x26>
 8009d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d5a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009d5e:	e7f8      	b.n	8009d52 <memmove+0xc>
 8009d60:	4283      	cmp	r3, r0
 8009d62:	d9f5      	bls.n	8009d50 <memmove+0xa>
 8009d64:	1881      	adds	r1, r0, r2
 8009d66:	1ad2      	subs	r2, r2, r3
 8009d68:	42d3      	cmn	r3, r2
 8009d6a:	d100      	bne.n	8009d6e <memmove+0x28>
 8009d6c:	bd10      	pop	{r4, pc}
 8009d6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d72:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009d76:	e7f7      	b.n	8009d68 <memmove+0x22>

08009d78 <_free_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	4605      	mov	r5, r0
 8009d7c:	2900      	cmp	r1, #0
 8009d7e:	d045      	beq.n	8009e0c <_free_r+0x94>
 8009d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d84:	1f0c      	subs	r4, r1, #4
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	bfb8      	it	lt
 8009d8a:	18e4      	addlt	r4, r4, r3
 8009d8c:	f000 f8d2 	bl	8009f34 <__malloc_lock>
 8009d90:	4a1f      	ldr	r2, [pc, #124]	; (8009e10 <_free_r+0x98>)
 8009d92:	6813      	ldr	r3, [r2, #0]
 8009d94:	4610      	mov	r0, r2
 8009d96:	b933      	cbnz	r3, 8009da6 <_free_r+0x2e>
 8009d98:	6063      	str	r3, [r4, #4]
 8009d9a:	6014      	str	r4, [r2, #0]
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009da2:	f000 b8c8 	b.w	8009f36 <__malloc_unlock>
 8009da6:	42a3      	cmp	r3, r4
 8009da8:	d90c      	bls.n	8009dc4 <_free_r+0x4c>
 8009daa:	6821      	ldr	r1, [r4, #0]
 8009dac:	1862      	adds	r2, r4, r1
 8009dae:	4293      	cmp	r3, r2
 8009db0:	bf04      	itt	eq
 8009db2:	681a      	ldreq	r2, [r3, #0]
 8009db4:	685b      	ldreq	r3, [r3, #4]
 8009db6:	6063      	str	r3, [r4, #4]
 8009db8:	bf04      	itt	eq
 8009dba:	1852      	addeq	r2, r2, r1
 8009dbc:	6022      	streq	r2, [r4, #0]
 8009dbe:	6004      	str	r4, [r0, #0]
 8009dc0:	e7ec      	b.n	8009d9c <_free_r+0x24>
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	685a      	ldr	r2, [r3, #4]
 8009dc6:	b10a      	cbz	r2, 8009dcc <_free_r+0x54>
 8009dc8:	42a2      	cmp	r2, r4
 8009dca:	d9fa      	bls.n	8009dc2 <_free_r+0x4a>
 8009dcc:	6819      	ldr	r1, [r3, #0]
 8009dce:	1858      	adds	r0, r3, r1
 8009dd0:	42a0      	cmp	r0, r4
 8009dd2:	d10b      	bne.n	8009dec <_free_r+0x74>
 8009dd4:	6820      	ldr	r0, [r4, #0]
 8009dd6:	4401      	add	r1, r0
 8009dd8:	1858      	adds	r0, r3, r1
 8009dda:	4282      	cmp	r2, r0
 8009ddc:	6019      	str	r1, [r3, #0]
 8009dde:	d1dd      	bne.n	8009d9c <_free_r+0x24>
 8009de0:	6810      	ldr	r0, [r2, #0]
 8009de2:	6852      	ldr	r2, [r2, #4]
 8009de4:	605a      	str	r2, [r3, #4]
 8009de6:	4401      	add	r1, r0
 8009de8:	6019      	str	r1, [r3, #0]
 8009dea:	e7d7      	b.n	8009d9c <_free_r+0x24>
 8009dec:	d902      	bls.n	8009df4 <_free_r+0x7c>
 8009dee:	230c      	movs	r3, #12
 8009df0:	602b      	str	r3, [r5, #0]
 8009df2:	e7d3      	b.n	8009d9c <_free_r+0x24>
 8009df4:	6820      	ldr	r0, [r4, #0]
 8009df6:	1821      	adds	r1, r4, r0
 8009df8:	428a      	cmp	r2, r1
 8009dfa:	bf04      	itt	eq
 8009dfc:	6811      	ldreq	r1, [r2, #0]
 8009dfe:	6852      	ldreq	r2, [r2, #4]
 8009e00:	6062      	str	r2, [r4, #4]
 8009e02:	bf04      	itt	eq
 8009e04:	1809      	addeq	r1, r1, r0
 8009e06:	6021      	streq	r1, [r4, #0]
 8009e08:	605c      	str	r4, [r3, #4]
 8009e0a:	e7c7      	b.n	8009d9c <_free_r+0x24>
 8009e0c:	bd38      	pop	{r3, r4, r5, pc}
 8009e0e:	bf00      	nop
 8009e10:	200000d4 	.word	0x200000d4

08009e14 <_malloc_r>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	1ccd      	adds	r5, r1, #3
 8009e18:	f025 0503 	bic.w	r5, r5, #3
 8009e1c:	3508      	adds	r5, #8
 8009e1e:	2d0c      	cmp	r5, #12
 8009e20:	bf38      	it	cc
 8009e22:	250c      	movcc	r5, #12
 8009e24:	2d00      	cmp	r5, #0
 8009e26:	4606      	mov	r6, r0
 8009e28:	db01      	blt.n	8009e2e <_malloc_r+0x1a>
 8009e2a:	42a9      	cmp	r1, r5
 8009e2c:	d903      	bls.n	8009e36 <_malloc_r+0x22>
 8009e2e:	230c      	movs	r3, #12
 8009e30:	6033      	str	r3, [r6, #0]
 8009e32:	2000      	movs	r0, #0
 8009e34:	bd70      	pop	{r4, r5, r6, pc}
 8009e36:	f000 f87d 	bl	8009f34 <__malloc_lock>
 8009e3a:	4a21      	ldr	r2, [pc, #132]	; (8009ec0 <_malloc_r+0xac>)
 8009e3c:	6814      	ldr	r4, [r2, #0]
 8009e3e:	4621      	mov	r1, r4
 8009e40:	b991      	cbnz	r1, 8009e68 <_malloc_r+0x54>
 8009e42:	4c20      	ldr	r4, [pc, #128]	; (8009ec4 <_malloc_r+0xb0>)
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	b91b      	cbnz	r3, 8009e50 <_malloc_r+0x3c>
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f000 f863 	bl	8009f14 <_sbrk_r>
 8009e4e:	6020      	str	r0, [r4, #0]
 8009e50:	4629      	mov	r1, r5
 8009e52:	4630      	mov	r0, r6
 8009e54:	f000 f85e 	bl	8009f14 <_sbrk_r>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d124      	bne.n	8009ea6 <_malloc_r+0x92>
 8009e5c:	230c      	movs	r3, #12
 8009e5e:	6033      	str	r3, [r6, #0]
 8009e60:	4630      	mov	r0, r6
 8009e62:	f000 f868 	bl	8009f36 <__malloc_unlock>
 8009e66:	e7e4      	b.n	8009e32 <_malloc_r+0x1e>
 8009e68:	680b      	ldr	r3, [r1, #0]
 8009e6a:	1b5b      	subs	r3, r3, r5
 8009e6c:	d418      	bmi.n	8009ea0 <_malloc_r+0x8c>
 8009e6e:	2b0b      	cmp	r3, #11
 8009e70:	d90f      	bls.n	8009e92 <_malloc_r+0x7e>
 8009e72:	600b      	str	r3, [r1, #0]
 8009e74:	50cd      	str	r5, [r1, r3]
 8009e76:	18cc      	adds	r4, r1, r3
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f000 f85c 	bl	8009f36 <__malloc_unlock>
 8009e7e:	f104 000b 	add.w	r0, r4, #11
 8009e82:	1d23      	adds	r3, r4, #4
 8009e84:	f020 0007 	bic.w	r0, r0, #7
 8009e88:	1ac3      	subs	r3, r0, r3
 8009e8a:	d0d3      	beq.n	8009e34 <_malloc_r+0x20>
 8009e8c:	425a      	negs	r2, r3
 8009e8e:	50e2      	str	r2, [r4, r3]
 8009e90:	e7d0      	b.n	8009e34 <_malloc_r+0x20>
 8009e92:	428c      	cmp	r4, r1
 8009e94:	684b      	ldr	r3, [r1, #4]
 8009e96:	bf16      	itet	ne
 8009e98:	6063      	strne	r3, [r4, #4]
 8009e9a:	6013      	streq	r3, [r2, #0]
 8009e9c:	460c      	movne	r4, r1
 8009e9e:	e7eb      	b.n	8009e78 <_malloc_r+0x64>
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	6849      	ldr	r1, [r1, #4]
 8009ea4:	e7cc      	b.n	8009e40 <_malloc_r+0x2c>
 8009ea6:	1cc4      	adds	r4, r0, #3
 8009ea8:	f024 0403 	bic.w	r4, r4, #3
 8009eac:	42a0      	cmp	r0, r4
 8009eae:	d005      	beq.n	8009ebc <_malloc_r+0xa8>
 8009eb0:	1a21      	subs	r1, r4, r0
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f000 f82e 	bl	8009f14 <_sbrk_r>
 8009eb8:	3001      	adds	r0, #1
 8009eba:	d0cf      	beq.n	8009e5c <_malloc_r+0x48>
 8009ebc:	6025      	str	r5, [r4, #0]
 8009ebe:	e7db      	b.n	8009e78 <_malloc_r+0x64>
 8009ec0:	200000d4 	.word	0x200000d4
 8009ec4:	200000d8 	.word	0x200000d8

08009ec8 <_realloc_r>:
 8009ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eca:	4607      	mov	r7, r0
 8009ecc:	4614      	mov	r4, r2
 8009ece:	460e      	mov	r6, r1
 8009ed0:	b921      	cbnz	r1, 8009edc <_realloc_r+0x14>
 8009ed2:	4611      	mov	r1, r2
 8009ed4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009ed8:	f7ff bf9c 	b.w	8009e14 <_malloc_r>
 8009edc:	b922      	cbnz	r2, 8009ee8 <_realloc_r+0x20>
 8009ede:	f7ff ff4b 	bl	8009d78 <_free_r>
 8009ee2:	4625      	mov	r5, r4
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ee8:	f000 f826 	bl	8009f38 <_malloc_usable_size_r>
 8009eec:	42a0      	cmp	r0, r4
 8009eee:	d20f      	bcs.n	8009f10 <_realloc_r+0x48>
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	f7ff ff8e 	bl	8009e14 <_malloc_r>
 8009ef8:	4605      	mov	r5, r0
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d0f2      	beq.n	8009ee4 <_realloc_r+0x1c>
 8009efe:	4631      	mov	r1, r6
 8009f00:	4622      	mov	r2, r4
 8009f02:	f7ff ff15 	bl	8009d30 <memcpy>
 8009f06:	4631      	mov	r1, r6
 8009f08:	4638      	mov	r0, r7
 8009f0a:	f7ff ff35 	bl	8009d78 <_free_r>
 8009f0e:	e7e9      	b.n	8009ee4 <_realloc_r+0x1c>
 8009f10:	4635      	mov	r5, r6
 8009f12:	e7e7      	b.n	8009ee4 <_realloc_r+0x1c>

08009f14 <_sbrk_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4c06      	ldr	r4, [pc, #24]	; (8009f30 <_sbrk_r+0x1c>)
 8009f18:	2300      	movs	r3, #0
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	6023      	str	r3, [r4, #0]
 8009f20:	f7ff fb6e 	bl	8009600 <_sbrk>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d102      	bne.n	8009f2e <_sbrk_r+0x1a>
 8009f28:	6823      	ldr	r3, [r4, #0]
 8009f2a:	b103      	cbz	r3, 8009f2e <_sbrk_r+0x1a>
 8009f2c:	602b      	str	r3, [r5, #0]
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	20000808 	.word	0x20000808

08009f34 <__malloc_lock>:
 8009f34:	4770      	bx	lr

08009f36 <__malloc_unlock>:
 8009f36:	4770      	bx	lr

08009f38 <_malloc_usable_size_r>:
 8009f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f3c:	1f18      	subs	r0, r3, #4
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	bfbc      	itt	lt
 8009f42:	580b      	ldrlt	r3, [r1, r0]
 8009f44:	18c0      	addlt	r0, r0, r3
 8009f46:	4770      	bx	lr

08009f48 <cos>:
 8009f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f4a:	ec51 0b10 	vmov	r0, r1, d0
 8009f4e:	4a1e      	ldr	r2, [pc, #120]	; (8009fc8 <cos+0x80>)
 8009f50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f54:	4293      	cmp	r3, r2
 8009f56:	dc06      	bgt.n	8009f66 <cos+0x1e>
 8009f58:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8009fc0 <cos+0x78>
 8009f5c:	f000 fa2c 	bl	800a3b8 <__kernel_cos>
 8009f60:	ec51 0b10 	vmov	r0, r1, d0
 8009f64:	e007      	b.n	8009f76 <cos+0x2e>
 8009f66:	4a19      	ldr	r2, [pc, #100]	; (8009fcc <cos+0x84>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	dd09      	ble.n	8009f80 <cos+0x38>
 8009f6c:	ee10 2a10 	vmov	r2, s0
 8009f70:	460b      	mov	r3, r1
 8009f72:	f7f6 f989 	bl	8000288 <__aeabi_dsub>
 8009f76:	ec41 0b10 	vmov	d0, r0, r1
 8009f7a:	b005      	add	sp, #20
 8009f7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f80:	4668      	mov	r0, sp
 8009f82:	f000 f825 	bl	8009fd0 <__ieee754_rem_pio2>
 8009f86:	f000 0003 	and.w	r0, r0, #3
 8009f8a:	2801      	cmp	r0, #1
 8009f8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f90:	ed9d 0b00 	vldr	d0, [sp]
 8009f94:	d007      	beq.n	8009fa6 <cos+0x5e>
 8009f96:	2802      	cmp	r0, #2
 8009f98:	d00e      	beq.n	8009fb8 <cos+0x70>
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	d0de      	beq.n	8009f5c <cos+0x14>
 8009f9e:	2001      	movs	r0, #1
 8009fa0:	f000 fe12 	bl	800abc8 <__kernel_sin>
 8009fa4:	e7dc      	b.n	8009f60 <cos+0x18>
 8009fa6:	f000 fe0f 	bl	800abc8 <__kernel_sin>
 8009faa:	ec53 2b10 	vmov	r2, r3, d0
 8009fae:	ee10 0a10 	vmov	r0, s0
 8009fb2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009fb6:	e7de      	b.n	8009f76 <cos+0x2e>
 8009fb8:	f000 f9fe 	bl	800a3b8 <__kernel_cos>
 8009fbc:	e7f5      	b.n	8009faa <cos+0x62>
 8009fbe:	bf00      	nop
	...
 8009fc8:	3fe921fb 	.word	0x3fe921fb
 8009fcc:	7fefffff 	.word	0x7fefffff

08009fd0 <__ieee754_rem_pio2>:
 8009fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd4:	ec57 6b10 	vmov	r6, r7, d0
 8009fd8:	4bc3      	ldr	r3, [pc, #780]	; (800a2e8 <__ieee754_rem_pio2+0x318>)
 8009fda:	b08d      	sub	sp, #52	; 0x34
 8009fdc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009fe0:	4598      	cmp	r8, r3
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	9704      	str	r7, [sp, #16]
 8009fe6:	dc07      	bgt.n	8009ff8 <__ieee754_rem_pio2+0x28>
 8009fe8:	2200      	movs	r2, #0
 8009fea:	2300      	movs	r3, #0
 8009fec:	ed84 0b00 	vstr	d0, [r4]
 8009ff0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009ff4:	2500      	movs	r5, #0
 8009ff6:	e027      	b.n	800a048 <__ieee754_rem_pio2+0x78>
 8009ff8:	4bbc      	ldr	r3, [pc, #752]	; (800a2ec <__ieee754_rem_pio2+0x31c>)
 8009ffa:	4598      	cmp	r8, r3
 8009ffc:	dc75      	bgt.n	800a0ea <__ieee754_rem_pio2+0x11a>
 8009ffe:	9b04      	ldr	r3, [sp, #16]
 800a000:	4dbb      	ldr	r5, [pc, #748]	; (800a2f0 <__ieee754_rem_pio2+0x320>)
 800a002:	2b00      	cmp	r3, #0
 800a004:	ee10 0a10 	vmov	r0, s0
 800a008:	a3a9      	add	r3, pc, #676	; (adr r3, 800a2b0 <__ieee754_rem_pio2+0x2e0>)
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	4639      	mov	r1, r7
 800a010:	dd36      	ble.n	800a080 <__ieee754_rem_pio2+0xb0>
 800a012:	f7f6 f939 	bl	8000288 <__aeabi_dsub>
 800a016:	45a8      	cmp	r8, r5
 800a018:	4606      	mov	r6, r0
 800a01a:	460f      	mov	r7, r1
 800a01c:	d018      	beq.n	800a050 <__ieee754_rem_pio2+0x80>
 800a01e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a2b8 <__ieee754_rem_pio2+0x2e8>)
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	f7f6 f930 	bl	8000288 <__aeabi_dsub>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	e9c4 2300 	strd	r2, r3, [r4]
 800a030:	4630      	mov	r0, r6
 800a032:	4639      	mov	r1, r7
 800a034:	f7f6 f928 	bl	8000288 <__aeabi_dsub>
 800a038:	a39f      	add	r3, pc, #636	; (adr r3, 800a2b8 <__ieee754_rem_pio2+0x2e8>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	f7f6 f923 	bl	8000288 <__aeabi_dsub>
 800a042:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a046:	2501      	movs	r5, #1
 800a048:	4628      	mov	r0, r5
 800a04a:	b00d      	add	sp, #52	; 0x34
 800a04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a050:	a39b      	add	r3, pc, #620	; (adr r3, 800a2c0 <__ieee754_rem_pio2+0x2f0>)
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	f7f6 f917 	bl	8000288 <__aeabi_dsub>
 800a05a:	a39b      	add	r3, pc, #620	; (adr r3, 800a2c8 <__ieee754_rem_pio2+0x2f8>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	4606      	mov	r6, r0
 800a062:	460f      	mov	r7, r1
 800a064:	f7f6 f910 	bl	8000288 <__aeabi_dsub>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	e9c4 2300 	strd	r2, r3, [r4]
 800a070:	4630      	mov	r0, r6
 800a072:	4639      	mov	r1, r7
 800a074:	f7f6 f908 	bl	8000288 <__aeabi_dsub>
 800a078:	a393      	add	r3, pc, #588	; (adr r3, 800a2c8 <__ieee754_rem_pio2+0x2f8>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	e7de      	b.n	800a03e <__ieee754_rem_pio2+0x6e>
 800a080:	f7f6 f904 	bl	800028c <__adddf3>
 800a084:	45a8      	cmp	r8, r5
 800a086:	4606      	mov	r6, r0
 800a088:	460f      	mov	r7, r1
 800a08a:	d016      	beq.n	800a0ba <__ieee754_rem_pio2+0xea>
 800a08c:	a38a      	add	r3, pc, #552	; (adr r3, 800a2b8 <__ieee754_rem_pio2+0x2e8>)
 800a08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a092:	f7f6 f8fb 	bl	800028c <__adddf3>
 800a096:	4602      	mov	r2, r0
 800a098:	460b      	mov	r3, r1
 800a09a:	e9c4 2300 	strd	r2, r3, [r4]
 800a09e:	4630      	mov	r0, r6
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	f7f6 f8f1 	bl	8000288 <__aeabi_dsub>
 800a0a6:	a384      	add	r3, pc, #528	; (adr r3, 800a2b8 <__ieee754_rem_pio2+0x2e8>)
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	f7f6 f8ee 	bl	800028c <__adddf3>
 800a0b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a0b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a0b8:	e7c6      	b.n	800a048 <__ieee754_rem_pio2+0x78>
 800a0ba:	a381      	add	r3, pc, #516	; (adr r3, 800a2c0 <__ieee754_rem_pio2+0x2f0>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	f7f6 f8e4 	bl	800028c <__adddf3>
 800a0c4:	a380      	add	r3, pc, #512	; (adr r3, 800a2c8 <__ieee754_rem_pio2+0x2f8>)
 800a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	460f      	mov	r7, r1
 800a0ce:	f7f6 f8dd 	bl	800028c <__adddf3>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	e9c4 2300 	strd	r2, r3, [r4]
 800a0da:	4630      	mov	r0, r6
 800a0dc:	4639      	mov	r1, r7
 800a0de:	f7f6 f8d3 	bl	8000288 <__aeabi_dsub>
 800a0e2:	a379      	add	r3, pc, #484	; (adr r3, 800a2c8 <__ieee754_rem_pio2+0x2f8>)
 800a0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e8:	e7e0      	b.n	800a0ac <__ieee754_rem_pio2+0xdc>
 800a0ea:	4b82      	ldr	r3, [pc, #520]	; (800a2f4 <__ieee754_rem_pio2+0x324>)
 800a0ec:	4598      	cmp	r8, r3
 800a0ee:	f300 80d0 	bgt.w	800a292 <__ieee754_rem_pio2+0x2c2>
 800a0f2:	f000 fe23 	bl	800ad3c <fabs>
 800a0f6:	ec57 6b10 	vmov	r6, r7, d0
 800a0fa:	ee10 0a10 	vmov	r0, s0
 800a0fe:	a374      	add	r3, pc, #464	; (adr r3, 800a2d0 <__ieee754_rem_pio2+0x300>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	4639      	mov	r1, r7
 800a106:	f7f6 fa77 	bl	80005f8 <__aeabi_dmul>
 800a10a:	2200      	movs	r2, #0
 800a10c:	4b7a      	ldr	r3, [pc, #488]	; (800a2f8 <__ieee754_rem_pio2+0x328>)
 800a10e:	f7f6 f8bd 	bl	800028c <__adddf3>
 800a112:	f7f6 fd0b 	bl	8000b2c <__aeabi_d2iz>
 800a116:	4605      	mov	r5, r0
 800a118:	f7f6 fa04 	bl	8000524 <__aeabi_i2d>
 800a11c:	a364      	add	r3, pc, #400	; (adr r3, 800a2b0 <__ieee754_rem_pio2+0x2e0>)
 800a11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a126:	f7f6 fa67 	bl	80005f8 <__aeabi_dmul>
 800a12a:	4602      	mov	r2, r0
 800a12c:	460b      	mov	r3, r1
 800a12e:	4630      	mov	r0, r6
 800a130:	4639      	mov	r1, r7
 800a132:	f7f6 f8a9 	bl	8000288 <__aeabi_dsub>
 800a136:	a360      	add	r3, pc, #384	; (adr r3, 800a2b8 <__ieee754_rem_pio2+0x2e8>)
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	4682      	mov	sl, r0
 800a13e:	468b      	mov	fp, r1
 800a140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a144:	f7f6 fa58 	bl	80005f8 <__aeabi_dmul>
 800a148:	2d1f      	cmp	r5, #31
 800a14a:	4606      	mov	r6, r0
 800a14c:	460f      	mov	r7, r1
 800a14e:	dc0c      	bgt.n	800a16a <__ieee754_rem_pio2+0x19a>
 800a150:	1e6a      	subs	r2, r5, #1
 800a152:	4b6a      	ldr	r3, [pc, #424]	; (800a2fc <__ieee754_rem_pio2+0x32c>)
 800a154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a158:	4543      	cmp	r3, r8
 800a15a:	d006      	beq.n	800a16a <__ieee754_rem_pio2+0x19a>
 800a15c:	4632      	mov	r2, r6
 800a15e:	463b      	mov	r3, r7
 800a160:	4650      	mov	r0, sl
 800a162:	4659      	mov	r1, fp
 800a164:	f7f6 f890 	bl	8000288 <__aeabi_dsub>
 800a168:	e00e      	b.n	800a188 <__ieee754_rem_pio2+0x1b8>
 800a16a:	4632      	mov	r2, r6
 800a16c:	463b      	mov	r3, r7
 800a16e:	4650      	mov	r0, sl
 800a170:	4659      	mov	r1, fp
 800a172:	f7f6 f889 	bl	8000288 <__aeabi_dsub>
 800a176:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a17a:	9305      	str	r3, [sp, #20]
 800a17c:	9a05      	ldr	r2, [sp, #20]
 800a17e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	2b10      	cmp	r3, #16
 800a186:	dc02      	bgt.n	800a18e <__ieee754_rem_pio2+0x1be>
 800a188:	e9c4 0100 	strd	r0, r1, [r4]
 800a18c:	e039      	b.n	800a202 <__ieee754_rem_pio2+0x232>
 800a18e:	a34c      	add	r3, pc, #304	; (adr r3, 800a2c0 <__ieee754_rem_pio2+0x2f0>)
 800a190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a198:	f7f6 fa2e 	bl	80005f8 <__aeabi_dmul>
 800a19c:	4606      	mov	r6, r0
 800a19e:	460f      	mov	r7, r1
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	4650      	mov	r0, sl
 800a1a6:	4659      	mov	r1, fp
 800a1a8:	f7f6 f86e 	bl	8000288 <__aeabi_dsub>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	4680      	mov	r8, r0
 800a1b2:	4689      	mov	r9, r1
 800a1b4:	4650      	mov	r0, sl
 800a1b6:	4659      	mov	r1, fp
 800a1b8:	f7f6 f866 	bl	8000288 <__aeabi_dsub>
 800a1bc:	4632      	mov	r2, r6
 800a1be:	463b      	mov	r3, r7
 800a1c0:	f7f6 f862 	bl	8000288 <__aeabi_dsub>
 800a1c4:	a340      	add	r3, pc, #256	; (adr r3, 800a2c8 <__ieee754_rem_pio2+0x2f8>)
 800a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	460f      	mov	r7, r1
 800a1ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1d2:	f7f6 fa11 	bl	80005f8 <__aeabi_dmul>
 800a1d6:	4632      	mov	r2, r6
 800a1d8:	463b      	mov	r3, r7
 800a1da:	f7f6 f855 	bl	8000288 <__aeabi_dsub>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	4606      	mov	r6, r0
 800a1e4:	460f      	mov	r7, r1
 800a1e6:	4640      	mov	r0, r8
 800a1e8:	4649      	mov	r1, r9
 800a1ea:	f7f6 f84d 	bl	8000288 <__aeabi_dsub>
 800a1ee:	9a05      	ldr	r2, [sp, #20]
 800a1f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a1f4:	1ad3      	subs	r3, r2, r3
 800a1f6:	2b31      	cmp	r3, #49	; 0x31
 800a1f8:	dc20      	bgt.n	800a23c <__ieee754_rem_pio2+0x26c>
 800a1fa:	e9c4 0100 	strd	r0, r1, [r4]
 800a1fe:	46c2      	mov	sl, r8
 800a200:	46cb      	mov	fp, r9
 800a202:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a206:	4650      	mov	r0, sl
 800a208:	4642      	mov	r2, r8
 800a20a:	464b      	mov	r3, r9
 800a20c:	4659      	mov	r1, fp
 800a20e:	f7f6 f83b 	bl	8000288 <__aeabi_dsub>
 800a212:	463b      	mov	r3, r7
 800a214:	4632      	mov	r2, r6
 800a216:	f7f6 f837 	bl	8000288 <__aeabi_dsub>
 800a21a:	9b04      	ldr	r3, [sp, #16]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a222:	f6bf af11 	bge.w	800a048 <__ieee754_rem_pio2+0x78>
 800a226:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a22a:	6063      	str	r3, [r4, #4]
 800a22c:	f8c4 8000 	str.w	r8, [r4]
 800a230:	60a0      	str	r0, [r4, #8]
 800a232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a236:	60e3      	str	r3, [r4, #12]
 800a238:	426d      	negs	r5, r5
 800a23a:	e705      	b.n	800a048 <__ieee754_rem_pio2+0x78>
 800a23c:	a326      	add	r3, pc, #152	; (adr r3, 800a2d8 <__ieee754_rem_pio2+0x308>)
 800a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a242:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a246:	f7f6 f9d7 	bl	80005f8 <__aeabi_dmul>
 800a24a:	4606      	mov	r6, r0
 800a24c:	460f      	mov	r7, r1
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	4640      	mov	r0, r8
 800a254:	4649      	mov	r1, r9
 800a256:	f7f6 f817 	bl	8000288 <__aeabi_dsub>
 800a25a:	4602      	mov	r2, r0
 800a25c:	460b      	mov	r3, r1
 800a25e:	4682      	mov	sl, r0
 800a260:	468b      	mov	fp, r1
 800a262:	4640      	mov	r0, r8
 800a264:	4649      	mov	r1, r9
 800a266:	f7f6 f80f 	bl	8000288 <__aeabi_dsub>
 800a26a:	4632      	mov	r2, r6
 800a26c:	463b      	mov	r3, r7
 800a26e:	f7f6 f80b 	bl	8000288 <__aeabi_dsub>
 800a272:	a31b      	add	r3, pc, #108	; (adr r3, 800a2e0 <__ieee754_rem_pio2+0x310>)
 800a274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a278:	4606      	mov	r6, r0
 800a27a:	460f      	mov	r7, r1
 800a27c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a280:	f7f6 f9ba 	bl	80005f8 <__aeabi_dmul>
 800a284:	4632      	mov	r2, r6
 800a286:	463b      	mov	r3, r7
 800a288:	f7f5 fffe 	bl	8000288 <__aeabi_dsub>
 800a28c:	4606      	mov	r6, r0
 800a28e:	460f      	mov	r7, r1
 800a290:	e764      	b.n	800a15c <__ieee754_rem_pio2+0x18c>
 800a292:	4b1b      	ldr	r3, [pc, #108]	; (800a300 <__ieee754_rem_pio2+0x330>)
 800a294:	4598      	cmp	r8, r3
 800a296:	dd35      	ble.n	800a304 <__ieee754_rem_pio2+0x334>
 800a298:	ee10 2a10 	vmov	r2, s0
 800a29c:	463b      	mov	r3, r7
 800a29e:	4630      	mov	r0, r6
 800a2a0:	4639      	mov	r1, r7
 800a2a2:	f7f5 fff1 	bl	8000288 <__aeabi_dsub>
 800a2a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a2aa:	e9c4 0100 	strd	r0, r1, [r4]
 800a2ae:	e6a1      	b.n	8009ff4 <__ieee754_rem_pio2+0x24>
 800a2b0:	54400000 	.word	0x54400000
 800a2b4:	3ff921fb 	.word	0x3ff921fb
 800a2b8:	1a626331 	.word	0x1a626331
 800a2bc:	3dd0b461 	.word	0x3dd0b461
 800a2c0:	1a600000 	.word	0x1a600000
 800a2c4:	3dd0b461 	.word	0x3dd0b461
 800a2c8:	2e037073 	.word	0x2e037073
 800a2cc:	3ba3198a 	.word	0x3ba3198a
 800a2d0:	6dc9c883 	.word	0x6dc9c883
 800a2d4:	3fe45f30 	.word	0x3fe45f30
 800a2d8:	2e000000 	.word	0x2e000000
 800a2dc:	3ba3198a 	.word	0x3ba3198a
 800a2e0:	252049c1 	.word	0x252049c1
 800a2e4:	397b839a 	.word	0x397b839a
 800a2e8:	3fe921fb 	.word	0x3fe921fb
 800a2ec:	4002d97b 	.word	0x4002d97b
 800a2f0:	3ff921fb 	.word	0x3ff921fb
 800a2f4:	413921fb 	.word	0x413921fb
 800a2f8:	3fe00000 	.word	0x3fe00000
 800a2fc:	0800b098 	.word	0x0800b098
 800a300:	7fefffff 	.word	0x7fefffff
 800a304:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a308:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a30c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a310:	4630      	mov	r0, r6
 800a312:	460f      	mov	r7, r1
 800a314:	f7f6 fc0a 	bl	8000b2c <__aeabi_d2iz>
 800a318:	f7f6 f904 	bl	8000524 <__aeabi_i2d>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	4630      	mov	r0, r6
 800a322:	4639      	mov	r1, r7
 800a324:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a328:	f7f5 ffae 	bl	8000288 <__aeabi_dsub>
 800a32c:	2200      	movs	r2, #0
 800a32e:	4b1f      	ldr	r3, [pc, #124]	; (800a3ac <__ieee754_rem_pio2+0x3dc>)
 800a330:	f7f6 f962 	bl	80005f8 <__aeabi_dmul>
 800a334:	460f      	mov	r7, r1
 800a336:	4606      	mov	r6, r0
 800a338:	f7f6 fbf8 	bl	8000b2c <__aeabi_d2iz>
 800a33c:	f7f6 f8f2 	bl	8000524 <__aeabi_i2d>
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	4630      	mov	r0, r6
 800a346:	4639      	mov	r1, r7
 800a348:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a34c:	f7f5 ff9c 	bl	8000288 <__aeabi_dsub>
 800a350:	2200      	movs	r2, #0
 800a352:	4b16      	ldr	r3, [pc, #88]	; (800a3ac <__ieee754_rem_pio2+0x3dc>)
 800a354:	f7f6 f950 	bl	80005f8 <__aeabi_dmul>
 800a358:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a35c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a360:	f04f 0803 	mov.w	r8, #3
 800a364:	2600      	movs	r6, #0
 800a366:	2700      	movs	r7, #0
 800a368:	4632      	mov	r2, r6
 800a36a:	463b      	mov	r3, r7
 800a36c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a370:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800a374:	f7f6 fba8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a378:	b9b0      	cbnz	r0, 800a3a8 <__ieee754_rem_pio2+0x3d8>
 800a37a:	4b0d      	ldr	r3, [pc, #52]	; (800a3b0 <__ieee754_rem_pio2+0x3e0>)
 800a37c:	9301      	str	r3, [sp, #4]
 800a37e:	2302      	movs	r3, #2
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	462a      	mov	r2, r5
 800a384:	4643      	mov	r3, r8
 800a386:	4621      	mov	r1, r4
 800a388:	a806      	add	r0, sp, #24
 800a38a:	f000 f8dd 	bl	800a548 <__kernel_rem_pio2>
 800a38e:	9b04      	ldr	r3, [sp, #16]
 800a390:	2b00      	cmp	r3, #0
 800a392:	4605      	mov	r5, r0
 800a394:	f6bf ae58 	bge.w	800a048 <__ieee754_rem_pio2+0x78>
 800a398:	6863      	ldr	r3, [r4, #4]
 800a39a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a39e:	6063      	str	r3, [r4, #4]
 800a3a0:	68e3      	ldr	r3, [r4, #12]
 800a3a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a3a6:	e746      	b.n	800a236 <__ieee754_rem_pio2+0x266>
 800a3a8:	46d0      	mov	r8, sl
 800a3aa:	e7dd      	b.n	800a368 <__ieee754_rem_pio2+0x398>
 800a3ac:	41700000 	.word	0x41700000
 800a3b0:	0800b118 	.word	0x0800b118
 800a3b4:	00000000 	.word	0x00000000

0800a3b8 <__kernel_cos>:
 800a3b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3bc:	ec59 8b10 	vmov	r8, r9, d0
 800a3c0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800a3c4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a3c8:	ed2d 8b02 	vpush	{d8}
 800a3cc:	eeb0 8a41 	vmov.f32	s16, s2
 800a3d0:	eef0 8a61 	vmov.f32	s17, s3
 800a3d4:	da07      	bge.n	800a3e6 <__kernel_cos+0x2e>
 800a3d6:	ee10 0a10 	vmov	r0, s0
 800a3da:	4649      	mov	r1, r9
 800a3dc:	f7f6 fba6 	bl	8000b2c <__aeabi_d2iz>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	f000 8089 	beq.w	800a4f8 <__kernel_cos+0x140>
 800a3e6:	4642      	mov	r2, r8
 800a3e8:	464b      	mov	r3, r9
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	f7f6 f903 	bl	80005f8 <__aeabi_dmul>
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	4b4e      	ldr	r3, [pc, #312]	; (800a530 <__kernel_cos+0x178>)
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	460d      	mov	r5, r1
 800a3fa:	f7f6 f8fd 	bl	80005f8 <__aeabi_dmul>
 800a3fe:	a340      	add	r3, pc, #256	; (adr r3, 800a500 <__kernel_cos+0x148>)
 800a400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a404:	4682      	mov	sl, r0
 800a406:	468b      	mov	fp, r1
 800a408:	4620      	mov	r0, r4
 800a40a:	4629      	mov	r1, r5
 800a40c:	f7f6 f8f4 	bl	80005f8 <__aeabi_dmul>
 800a410:	a33d      	add	r3, pc, #244	; (adr r3, 800a508 <__kernel_cos+0x150>)
 800a412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a416:	f7f5 ff39 	bl	800028c <__adddf3>
 800a41a:	4622      	mov	r2, r4
 800a41c:	462b      	mov	r3, r5
 800a41e:	f7f6 f8eb 	bl	80005f8 <__aeabi_dmul>
 800a422:	a33b      	add	r3, pc, #236	; (adr r3, 800a510 <__kernel_cos+0x158>)
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	f7f5 ff2e 	bl	8000288 <__aeabi_dsub>
 800a42c:	4622      	mov	r2, r4
 800a42e:	462b      	mov	r3, r5
 800a430:	f7f6 f8e2 	bl	80005f8 <__aeabi_dmul>
 800a434:	a338      	add	r3, pc, #224	; (adr r3, 800a518 <__kernel_cos+0x160>)
 800a436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43a:	f7f5 ff27 	bl	800028c <__adddf3>
 800a43e:	4622      	mov	r2, r4
 800a440:	462b      	mov	r3, r5
 800a442:	f7f6 f8d9 	bl	80005f8 <__aeabi_dmul>
 800a446:	a336      	add	r3, pc, #216	; (adr r3, 800a520 <__kernel_cos+0x168>)
 800a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44c:	f7f5 ff1c 	bl	8000288 <__aeabi_dsub>
 800a450:	4622      	mov	r2, r4
 800a452:	462b      	mov	r3, r5
 800a454:	f7f6 f8d0 	bl	80005f8 <__aeabi_dmul>
 800a458:	a333      	add	r3, pc, #204	; (adr r3, 800a528 <__kernel_cos+0x170>)
 800a45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45e:	f7f5 ff15 	bl	800028c <__adddf3>
 800a462:	4622      	mov	r2, r4
 800a464:	462b      	mov	r3, r5
 800a466:	f7f6 f8c7 	bl	80005f8 <__aeabi_dmul>
 800a46a:	4622      	mov	r2, r4
 800a46c:	462b      	mov	r3, r5
 800a46e:	f7f6 f8c3 	bl	80005f8 <__aeabi_dmul>
 800a472:	ec53 2b18 	vmov	r2, r3, d8
 800a476:	4604      	mov	r4, r0
 800a478:	460d      	mov	r5, r1
 800a47a:	4640      	mov	r0, r8
 800a47c:	4649      	mov	r1, r9
 800a47e:	f7f6 f8bb 	bl	80005f8 <__aeabi_dmul>
 800a482:	460b      	mov	r3, r1
 800a484:	4602      	mov	r2, r0
 800a486:	4629      	mov	r1, r5
 800a488:	4620      	mov	r0, r4
 800a48a:	f7f5 fefd 	bl	8000288 <__aeabi_dsub>
 800a48e:	4b29      	ldr	r3, [pc, #164]	; (800a534 <__kernel_cos+0x17c>)
 800a490:	429e      	cmp	r6, r3
 800a492:	4680      	mov	r8, r0
 800a494:	4689      	mov	r9, r1
 800a496:	dc11      	bgt.n	800a4bc <__kernel_cos+0x104>
 800a498:	4602      	mov	r2, r0
 800a49a:	460b      	mov	r3, r1
 800a49c:	4650      	mov	r0, sl
 800a49e:	4659      	mov	r1, fp
 800a4a0:	f7f5 fef2 	bl	8000288 <__aeabi_dsub>
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	4924      	ldr	r1, [pc, #144]	; (800a538 <__kernel_cos+0x180>)
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	f7f5 feec 	bl	8000288 <__aeabi_dsub>
 800a4b0:	ecbd 8b02 	vpop	{d8}
 800a4b4:	ec41 0b10 	vmov	d0, r0, r1
 800a4b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4bc:	4b1f      	ldr	r3, [pc, #124]	; (800a53c <__kernel_cos+0x184>)
 800a4be:	491e      	ldr	r1, [pc, #120]	; (800a538 <__kernel_cos+0x180>)
 800a4c0:	429e      	cmp	r6, r3
 800a4c2:	bfcc      	ite	gt
 800a4c4:	4d1e      	ldrgt	r5, [pc, #120]	; (800a540 <__kernel_cos+0x188>)
 800a4c6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a4ca:	2400      	movs	r4, #0
 800a4cc:	4622      	mov	r2, r4
 800a4ce:	462b      	mov	r3, r5
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	f7f5 fed9 	bl	8000288 <__aeabi_dsub>
 800a4d6:	4622      	mov	r2, r4
 800a4d8:	4606      	mov	r6, r0
 800a4da:	460f      	mov	r7, r1
 800a4dc:	462b      	mov	r3, r5
 800a4de:	4650      	mov	r0, sl
 800a4e0:	4659      	mov	r1, fp
 800a4e2:	f7f5 fed1 	bl	8000288 <__aeabi_dsub>
 800a4e6:	4642      	mov	r2, r8
 800a4e8:	464b      	mov	r3, r9
 800a4ea:	f7f5 fecd 	bl	8000288 <__aeabi_dsub>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	4639      	mov	r1, r7
 800a4f6:	e7d9      	b.n	800a4ac <__kernel_cos+0xf4>
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	490f      	ldr	r1, [pc, #60]	; (800a538 <__kernel_cos+0x180>)
 800a4fc:	e7d8      	b.n	800a4b0 <__kernel_cos+0xf8>
 800a4fe:	bf00      	nop
 800a500:	be8838d4 	.word	0xbe8838d4
 800a504:	bda8fae9 	.word	0xbda8fae9
 800a508:	bdb4b1c4 	.word	0xbdb4b1c4
 800a50c:	3e21ee9e 	.word	0x3e21ee9e
 800a510:	809c52ad 	.word	0x809c52ad
 800a514:	3e927e4f 	.word	0x3e927e4f
 800a518:	19cb1590 	.word	0x19cb1590
 800a51c:	3efa01a0 	.word	0x3efa01a0
 800a520:	16c15177 	.word	0x16c15177
 800a524:	3f56c16c 	.word	0x3f56c16c
 800a528:	5555554c 	.word	0x5555554c
 800a52c:	3fa55555 	.word	0x3fa55555
 800a530:	3fe00000 	.word	0x3fe00000
 800a534:	3fd33332 	.word	0x3fd33332
 800a538:	3ff00000 	.word	0x3ff00000
 800a53c:	3fe90000 	.word	0x3fe90000
 800a540:	3fd20000 	.word	0x3fd20000
 800a544:	00000000 	.word	0x00000000

0800a548 <__kernel_rem_pio2>:
 800a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	ed2d 8b02 	vpush	{d8}
 800a550:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a554:	1ed4      	subs	r4, r2, #3
 800a556:	9308      	str	r3, [sp, #32]
 800a558:	9101      	str	r1, [sp, #4]
 800a55a:	4bc5      	ldr	r3, [pc, #788]	; (800a870 <__kernel_rem_pio2+0x328>)
 800a55c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a55e:	9009      	str	r0, [sp, #36]	; 0x24
 800a560:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a564:	9304      	str	r3, [sp, #16]
 800a566:	9b08      	ldr	r3, [sp, #32]
 800a568:	3b01      	subs	r3, #1
 800a56a:	9307      	str	r3, [sp, #28]
 800a56c:	2318      	movs	r3, #24
 800a56e:	fb94 f4f3 	sdiv	r4, r4, r3
 800a572:	f06f 0317 	mvn.w	r3, #23
 800a576:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a57a:	fb04 3303 	mla	r3, r4, r3, r3
 800a57e:	eb03 0a02 	add.w	sl, r3, r2
 800a582:	9b04      	ldr	r3, [sp, #16]
 800a584:	9a07      	ldr	r2, [sp, #28]
 800a586:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a860 <__kernel_rem_pio2+0x318>
 800a58a:	eb03 0802 	add.w	r8, r3, r2
 800a58e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a590:	1aa7      	subs	r7, r4, r2
 800a592:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a596:	ae22      	add	r6, sp, #136	; 0x88
 800a598:	2500      	movs	r5, #0
 800a59a:	4545      	cmp	r5, r8
 800a59c:	dd13      	ble.n	800a5c6 <__kernel_rem_pio2+0x7e>
 800a59e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800a860 <__kernel_rem_pio2+0x318>
 800a5a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a5a6:	2600      	movs	r6, #0
 800a5a8:	9b04      	ldr	r3, [sp, #16]
 800a5aa:	429e      	cmp	r6, r3
 800a5ac:	dc32      	bgt.n	800a614 <__kernel_rem_pio2+0xcc>
 800a5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b0:	9302      	str	r3, [sp, #8]
 800a5b2:	9b08      	ldr	r3, [sp, #32]
 800a5b4:	199d      	adds	r5, r3, r6
 800a5b6:	ab22      	add	r3, sp, #136	; 0x88
 800a5b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a5bc:	9306      	str	r3, [sp, #24]
 800a5be:	ec59 8b18 	vmov	r8, r9, d8
 800a5c2:	2700      	movs	r7, #0
 800a5c4:	e01f      	b.n	800a606 <__kernel_rem_pio2+0xbe>
 800a5c6:	42ef      	cmn	r7, r5
 800a5c8:	d407      	bmi.n	800a5da <__kernel_rem_pio2+0x92>
 800a5ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a5ce:	f7f5 ffa9 	bl	8000524 <__aeabi_i2d>
 800a5d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a5d6:	3501      	adds	r5, #1
 800a5d8:	e7df      	b.n	800a59a <__kernel_rem_pio2+0x52>
 800a5da:	ec51 0b18 	vmov	r0, r1, d8
 800a5de:	e7f8      	b.n	800a5d2 <__kernel_rem_pio2+0x8a>
 800a5e0:	9906      	ldr	r1, [sp, #24]
 800a5e2:	9d02      	ldr	r5, [sp, #8]
 800a5e4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a5e8:	9106      	str	r1, [sp, #24]
 800a5ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a5ee:	9502      	str	r5, [sp, #8]
 800a5f0:	f7f6 f802 	bl	80005f8 <__aeabi_dmul>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	4640      	mov	r0, r8
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	f7f5 fe46 	bl	800028c <__adddf3>
 800a600:	3701      	adds	r7, #1
 800a602:	4680      	mov	r8, r0
 800a604:	4689      	mov	r9, r1
 800a606:	9b07      	ldr	r3, [sp, #28]
 800a608:	429f      	cmp	r7, r3
 800a60a:	dde9      	ble.n	800a5e0 <__kernel_rem_pio2+0x98>
 800a60c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800a610:	3601      	adds	r6, #1
 800a612:	e7c9      	b.n	800a5a8 <__kernel_rem_pio2+0x60>
 800a614:	9b04      	ldr	r3, [sp, #16]
 800a616:	aa0e      	add	r2, sp, #56	; 0x38
 800a618:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a61c:	930c      	str	r3, [sp, #48]	; 0x30
 800a61e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a620:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a624:	9c04      	ldr	r4, [sp, #16]
 800a626:	930b      	str	r3, [sp, #44]	; 0x2c
 800a628:	ab9a      	add	r3, sp, #616	; 0x268
 800a62a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800a62e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a632:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a636:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a63a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a63e:	ab9a      	add	r3, sp, #616	; 0x268
 800a640:	445b      	add	r3, fp
 800a642:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800a646:	2500      	movs	r5, #0
 800a648:	1b63      	subs	r3, r4, r5
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	dc78      	bgt.n	800a740 <__kernel_rem_pio2+0x1f8>
 800a64e:	4650      	mov	r0, sl
 800a650:	ec49 8b10 	vmov	d0, r8, r9
 800a654:	f000 fc00 	bl	800ae58 <scalbn>
 800a658:	ec57 6b10 	vmov	r6, r7, d0
 800a65c:	2200      	movs	r2, #0
 800a65e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a662:	ee10 0a10 	vmov	r0, s0
 800a666:	4639      	mov	r1, r7
 800a668:	f7f5 ffc6 	bl	80005f8 <__aeabi_dmul>
 800a66c:	ec41 0b10 	vmov	d0, r0, r1
 800a670:	f000 fb6e 	bl	800ad50 <floor>
 800a674:	2200      	movs	r2, #0
 800a676:	ec51 0b10 	vmov	r0, r1, d0
 800a67a:	4b7e      	ldr	r3, [pc, #504]	; (800a874 <__kernel_rem_pio2+0x32c>)
 800a67c:	f7f5 ffbc 	bl	80005f8 <__aeabi_dmul>
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	4630      	mov	r0, r6
 800a686:	4639      	mov	r1, r7
 800a688:	f7f5 fdfe 	bl	8000288 <__aeabi_dsub>
 800a68c:	460f      	mov	r7, r1
 800a68e:	4606      	mov	r6, r0
 800a690:	f7f6 fa4c 	bl	8000b2c <__aeabi_d2iz>
 800a694:	9006      	str	r0, [sp, #24]
 800a696:	f7f5 ff45 	bl	8000524 <__aeabi_i2d>
 800a69a:	4602      	mov	r2, r0
 800a69c:	460b      	mov	r3, r1
 800a69e:	4630      	mov	r0, r6
 800a6a0:	4639      	mov	r1, r7
 800a6a2:	f7f5 fdf1 	bl	8000288 <__aeabi_dsub>
 800a6a6:	f1ba 0f00 	cmp.w	sl, #0
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	460f      	mov	r7, r1
 800a6ae:	dd6c      	ble.n	800a78a <__kernel_rem_pio2+0x242>
 800a6b0:	1e62      	subs	r2, r4, #1
 800a6b2:	ab0e      	add	r3, sp, #56	; 0x38
 800a6b4:	f1ca 0118 	rsb	r1, sl, #24
 800a6b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a6bc:	9d06      	ldr	r5, [sp, #24]
 800a6be:	fa40 f301 	asr.w	r3, r0, r1
 800a6c2:	441d      	add	r5, r3
 800a6c4:	408b      	lsls	r3, r1
 800a6c6:	1ac0      	subs	r0, r0, r3
 800a6c8:	ab0e      	add	r3, sp, #56	; 0x38
 800a6ca:	9506      	str	r5, [sp, #24]
 800a6cc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a6d0:	f1ca 0317 	rsb	r3, sl, #23
 800a6d4:	fa40 f303 	asr.w	r3, r0, r3
 800a6d8:	9302      	str	r3, [sp, #8]
 800a6da:	9b02      	ldr	r3, [sp, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	dd62      	ble.n	800a7a6 <__kernel_rem_pio2+0x25e>
 800a6e0:	9b06      	ldr	r3, [sp, #24]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	9306      	str	r3, [sp, #24]
 800a6e8:	4615      	mov	r5, r2
 800a6ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a6ee:	4294      	cmp	r4, r2
 800a6f0:	f300 8095 	bgt.w	800a81e <__kernel_rem_pio2+0x2d6>
 800a6f4:	f1ba 0f00 	cmp.w	sl, #0
 800a6f8:	dd07      	ble.n	800a70a <__kernel_rem_pio2+0x1c2>
 800a6fa:	f1ba 0f01 	cmp.w	sl, #1
 800a6fe:	f000 80a2 	beq.w	800a846 <__kernel_rem_pio2+0x2fe>
 800a702:	f1ba 0f02 	cmp.w	sl, #2
 800a706:	f000 80c1 	beq.w	800a88c <__kernel_rem_pio2+0x344>
 800a70a:	9b02      	ldr	r3, [sp, #8]
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d14a      	bne.n	800a7a6 <__kernel_rem_pio2+0x25e>
 800a710:	4632      	mov	r2, r6
 800a712:	463b      	mov	r3, r7
 800a714:	2000      	movs	r0, #0
 800a716:	4958      	ldr	r1, [pc, #352]	; (800a878 <__kernel_rem_pio2+0x330>)
 800a718:	f7f5 fdb6 	bl	8000288 <__aeabi_dsub>
 800a71c:	4606      	mov	r6, r0
 800a71e:	460f      	mov	r7, r1
 800a720:	2d00      	cmp	r5, #0
 800a722:	d040      	beq.n	800a7a6 <__kernel_rem_pio2+0x25e>
 800a724:	4650      	mov	r0, sl
 800a726:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a868 <__kernel_rem_pio2+0x320>
 800a72a:	f000 fb95 	bl	800ae58 <scalbn>
 800a72e:	4630      	mov	r0, r6
 800a730:	4639      	mov	r1, r7
 800a732:	ec53 2b10 	vmov	r2, r3, d0
 800a736:	f7f5 fda7 	bl	8000288 <__aeabi_dsub>
 800a73a:	4606      	mov	r6, r0
 800a73c:	460f      	mov	r7, r1
 800a73e:	e032      	b.n	800a7a6 <__kernel_rem_pio2+0x25e>
 800a740:	2200      	movs	r2, #0
 800a742:	4b4e      	ldr	r3, [pc, #312]	; (800a87c <__kernel_rem_pio2+0x334>)
 800a744:	4640      	mov	r0, r8
 800a746:	4649      	mov	r1, r9
 800a748:	f7f5 ff56 	bl	80005f8 <__aeabi_dmul>
 800a74c:	f7f6 f9ee 	bl	8000b2c <__aeabi_d2iz>
 800a750:	f7f5 fee8 	bl	8000524 <__aeabi_i2d>
 800a754:	2200      	movs	r2, #0
 800a756:	4b4a      	ldr	r3, [pc, #296]	; (800a880 <__kernel_rem_pio2+0x338>)
 800a758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a75c:	f7f5 ff4c 	bl	80005f8 <__aeabi_dmul>
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	4640      	mov	r0, r8
 800a766:	4649      	mov	r1, r9
 800a768:	f7f5 fd8e 	bl	8000288 <__aeabi_dsub>
 800a76c:	f7f6 f9de 	bl	8000b2c <__aeabi_d2iz>
 800a770:	ab0e      	add	r3, sp, #56	; 0x38
 800a772:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800a776:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a77a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a77e:	f7f5 fd85 	bl	800028c <__adddf3>
 800a782:	3501      	adds	r5, #1
 800a784:	4680      	mov	r8, r0
 800a786:	4689      	mov	r9, r1
 800a788:	e75e      	b.n	800a648 <__kernel_rem_pio2+0x100>
 800a78a:	d105      	bne.n	800a798 <__kernel_rem_pio2+0x250>
 800a78c:	1e63      	subs	r3, r4, #1
 800a78e:	aa0e      	add	r2, sp, #56	; 0x38
 800a790:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a794:	15c3      	asrs	r3, r0, #23
 800a796:	e79f      	b.n	800a6d8 <__kernel_rem_pio2+0x190>
 800a798:	2200      	movs	r2, #0
 800a79a:	4b3a      	ldr	r3, [pc, #232]	; (800a884 <__kernel_rem_pio2+0x33c>)
 800a79c:	f7f6 f9b2 	bl	8000b04 <__aeabi_dcmpge>
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	d139      	bne.n	800a818 <__kernel_rem_pio2+0x2d0>
 800a7a4:	9002      	str	r0, [sp, #8]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	4639      	mov	r1, r7
 800a7ae:	f7f6 f98b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	f000 80c7 	beq.w	800a946 <__kernel_rem_pio2+0x3fe>
 800a7b8:	1e65      	subs	r5, r4, #1
 800a7ba:	462b      	mov	r3, r5
 800a7bc:	2200      	movs	r2, #0
 800a7be:	9904      	ldr	r1, [sp, #16]
 800a7c0:	428b      	cmp	r3, r1
 800a7c2:	da6a      	bge.n	800a89a <__kernel_rem_pio2+0x352>
 800a7c4:	2a00      	cmp	r2, #0
 800a7c6:	f000 8088 	beq.w	800a8da <__kernel_rem_pio2+0x392>
 800a7ca:	ab0e      	add	r3, sp, #56	; 0x38
 800a7cc:	f1aa 0a18 	sub.w	sl, sl, #24
 800a7d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 80b4 	beq.w	800a942 <__kernel_rem_pio2+0x3fa>
 800a7da:	4650      	mov	r0, sl
 800a7dc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800a868 <__kernel_rem_pio2+0x320>
 800a7e0:	f000 fb3a 	bl	800ae58 <scalbn>
 800a7e4:	00ec      	lsls	r4, r5, #3
 800a7e6:	ab72      	add	r3, sp, #456	; 0x1c8
 800a7e8:	191e      	adds	r6, r3, r4
 800a7ea:	ec59 8b10 	vmov	r8, r9, d0
 800a7ee:	f106 0a08 	add.w	sl, r6, #8
 800a7f2:	462f      	mov	r7, r5
 800a7f4:	2f00      	cmp	r7, #0
 800a7f6:	f280 80df 	bge.w	800a9b8 <__kernel_rem_pio2+0x470>
 800a7fa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800a860 <__kernel_rem_pio2+0x318>
 800a7fe:	f04f 0a00 	mov.w	sl, #0
 800a802:	eba5 030a 	sub.w	r3, r5, sl
 800a806:	2b00      	cmp	r3, #0
 800a808:	f2c0 810a 	blt.w	800aa20 <__kernel_rem_pio2+0x4d8>
 800a80c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800a888 <__kernel_rem_pio2+0x340>
 800a810:	ec59 8b18 	vmov	r8, r9, d8
 800a814:	2700      	movs	r7, #0
 800a816:	e0f5      	b.n	800aa04 <__kernel_rem_pio2+0x4bc>
 800a818:	2302      	movs	r3, #2
 800a81a:	9302      	str	r3, [sp, #8]
 800a81c:	e760      	b.n	800a6e0 <__kernel_rem_pio2+0x198>
 800a81e:	ab0e      	add	r3, sp, #56	; 0x38
 800a820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a824:	b94d      	cbnz	r5, 800a83a <__kernel_rem_pio2+0x2f2>
 800a826:	b12b      	cbz	r3, 800a834 <__kernel_rem_pio2+0x2ec>
 800a828:	a80e      	add	r0, sp, #56	; 0x38
 800a82a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a82e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a832:	2301      	movs	r3, #1
 800a834:	3201      	adds	r2, #1
 800a836:	461d      	mov	r5, r3
 800a838:	e759      	b.n	800a6ee <__kernel_rem_pio2+0x1a6>
 800a83a:	a80e      	add	r0, sp, #56	; 0x38
 800a83c:	1acb      	subs	r3, r1, r3
 800a83e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a842:	462b      	mov	r3, r5
 800a844:	e7f6      	b.n	800a834 <__kernel_rem_pio2+0x2ec>
 800a846:	1e62      	subs	r2, r4, #1
 800a848:	ab0e      	add	r3, sp, #56	; 0x38
 800a84a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a84e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a852:	a90e      	add	r1, sp, #56	; 0x38
 800a854:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a858:	e757      	b.n	800a70a <__kernel_rem_pio2+0x1c2>
 800a85a:	bf00      	nop
 800a85c:	f3af 8000 	nop.w
	...
 800a86c:	3ff00000 	.word	0x3ff00000
 800a870:	0800b260 	.word	0x0800b260
 800a874:	40200000 	.word	0x40200000
 800a878:	3ff00000 	.word	0x3ff00000
 800a87c:	3e700000 	.word	0x3e700000
 800a880:	41700000 	.word	0x41700000
 800a884:	3fe00000 	.word	0x3fe00000
 800a888:	0800b220 	.word	0x0800b220
 800a88c:	1e62      	subs	r2, r4, #1
 800a88e:	ab0e      	add	r3, sp, #56	; 0x38
 800a890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a894:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a898:	e7db      	b.n	800a852 <__kernel_rem_pio2+0x30a>
 800a89a:	a90e      	add	r1, sp, #56	; 0x38
 800a89c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	430a      	orrs	r2, r1
 800a8a4:	e78b      	b.n	800a7be <__kernel_rem_pio2+0x276>
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a8ac:	2900      	cmp	r1, #0
 800a8ae:	d0fa      	beq.n	800a8a6 <__kernel_rem_pio2+0x35e>
 800a8b0:	9a08      	ldr	r2, [sp, #32]
 800a8b2:	4422      	add	r2, r4
 800a8b4:	00d2      	lsls	r2, r2, #3
 800a8b6:	a922      	add	r1, sp, #136	; 0x88
 800a8b8:	18e3      	adds	r3, r4, r3
 800a8ba:	9206      	str	r2, [sp, #24]
 800a8bc:	440a      	add	r2, r1
 800a8be:	9302      	str	r3, [sp, #8]
 800a8c0:	f10b 0108 	add.w	r1, fp, #8
 800a8c4:	f102 0308 	add.w	r3, r2, #8
 800a8c8:	1c66      	adds	r6, r4, #1
 800a8ca:	910a      	str	r1, [sp, #40]	; 0x28
 800a8cc:	2500      	movs	r5, #0
 800a8ce:	930d      	str	r3, [sp, #52]	; 0x34
 800a8d0:	9b02      	ldr	r3, [sp, #8]
 800a8d2:	42b3      	cmp	r3, r6
 800a8d4:	da04      	bge.n	800a8e0 <__kernel_rem_pio2+0x398>
 800a8d6:	461c      	mov	r4, r3
 800a8d8:	e6a6      	b.n	800a628 <__kernel_rem_pio2+0xe0>
 800a8da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e7e3      	b.n	800a8a8 <__kernel_rem_pio2+0x360>
 800a8e0:	9b06      	ldr	r3, [sp, #24]
 800a8e2:	18ef      	adds	r7, r5, r3
 800a8e4:	ab22      	add	r3, sp, #136	; 0x88
 800a8e6:	441f      	add	r7, r3
 800a8e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a8ee:	f7f5 fe19 	bl	8000524 <__aeabi_i2d>
 800a8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f4:	461c      	mov	r4, r3
 800a8f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8f8:	e9c7 0100 	strd	r0, r1, [r7]
 800a8fc:	eb03 0b05 	add.w	fp, r3, r5
 800a900:	2700      	movs	r7, #0
 800a902:	f04f 0800 	mov.w	r8, #0
 800a906:	f04f 0900 	mov.w	r9, #0
 800a90a:	9b07      	ldr	r3, [sp, #28]
 800a90c:	429f      	cmp	r7, r3
 800a90e:	dd08      	ble.n	800a922 <__kernel_rem_pio2+0x3da>
 800a910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a912:	aa72      	add	r2, sp, #456	; 0x1c8
 800a914:	18eb      	adds	r3, r5, r3
 800a916:	4413      	add	r3, r2
 800a918:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800a91c:	3601      	adds	r6, #1
 800a91e:	3508      	adds	r5, #8
 800a920:	e7d6      	b.n	800a8d0 <__kernel_rem_pio2+0x388>
 800a922:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a926:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a92a:	f7f5 fe65 	bl	80005f8 <__aeabi_dmul>
 800a92e:	4602      	mov	r2, r0
 800a930:	460b      	mov	r3, r1
 800a932:	4640      	mov	r0, r8
 800a934:	4649      	mov	r1, r9
 800a936:	f7f5 fca9 	bl	800028c <__adddf3>
 800a93a:	3701      	adds	r7, #1
 800a93c:	4680      	mov	r8, r0
 800a93e:	4689      	mov	r9, r1
 800a940:	e7e3      	b.n	800a90a <__kernel_rem_pio2+0x3c2>
 800a942:	3d01      	subs	r5, #1
 800a944:	e741      	b.n	800a7ca <__kernel_rem_pio2+0x282>
 800a946:	f1ca 0000 	rsb	r0, sl, #0
 800a94a:	ec47 6b10 	vmov	d0, r6, r7
 800a94e:	f000 fa83 	bl	800ae58 <scalbn>
 800a952:	ec57 6b10 	vmov	r6, r7, d0
 800a956:	2200      	movs	r2, #0
 800a958:	4b99      	ldr	r3, [pc, #612]	; (800abc0 <__kernel_rem_pio2+0x678>)
 800a95a:	ee10 0a10 	vmov	r0, s0
 800a95e:	4639      	mov	r1, r7
 800a960:	f7f6 f8d0 	bl	8000b04 <__aeabi_dcmpge>
 800a964:	b1f8      	cbz	r0, 800a9a6 <__kernel_rem_pio2+0x45e>
 800a966:	2200      	movs	r2, #0
 800a968:	4b96      	ldr	r3, [pc, #600]	; (800abc4 <__kernel_rem_pio2+0x67c>)
 800a96a:	4630      	mov	r0, r6
 800a96c:	4639      	mov	r1, r7
 800a96e:	f7f5 fe43 	bl	80005f8 <__aeabi_dmul>
 800a972:	f7f6 f8db 	bl	8000b2c <__aeabi_d2iz>
 800a976:	4680      	mov	r8, r0
 800a978:	f7f5 fdd4 	bl	8000524 <__aeabi_i2d>
 800a97c:	2200      	movs	r2, #0
 800a97e:	4b90      	ldr	r3, [pc, #576]	; (800abc0 <__kernel_rem_pio2+0x678>)
 800a980:	f7f5 fe3a 	bl	80005f8 <__aeabi_dmul>
 800a984:	460b      	mov	r3, r1
 800a986:	4602      	mov	r2, r0
 800a988:	4639      	mov	r1, r7
 800a98a:	4630      	mov	r0, r6
 800a98c:	f7f5 fc7c 	bl	8000288 <__aeabi_dsub>
 800a990:	f7f6 f8cc 	bl	8000b2c <__aeabi_d2iz>
 800a994:	1c65      	adds	r5, r4, #1
 800a996:	ab0e      	add	r3, sp, #56	; 0x38
 800a998:	f10a 0a18 	add.w	sl, sl, #24
 800a99c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a9a0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a9a4:	e719      	b.n	800a7da <__kernel_rem_pio2+0x292>
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	4639      	mov	r1, r7
 800a9aa:	f7f6 f8bf 	bl	8000b2c <__aeabi_d2iz>
 800a9ae:	ab0e      	add	r3, sp, #56	; 0x38
 800a9b0:	4625      	mov	r5, r4
 800a9b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a9b6:	e710      	b.n	800a7da <__kernel_rem_pio2+0x292>
 800a9b8:	ab0e      	add	r3, sp, #56	; 0x38
 800a9ba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a9be:	f7f5 fdb1 	bl	8000524 <__aeabi_i2d>
 800a9c2:	4642      	mov	r2, r8
 800a9c4:	464b      	mov	r3, r9
 800a9c6:	f7f5 fe17 	bl	80005f8 <__aeabi_dmul>
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a9d0:	4b7c      	ldr	r3, [pc, #496]	; (800abc4 <__kernel_rem_pio2+0x67c>)
 800a9d2:	4640      	mov	r0, r8
 800a9d4:	4649      	mov	r1, r9
 800a9d6:	f7f5 fe0f 	bl	80005f8 <__aeabi_dmul>
 800a9da:	3f01      	subs	r7, #1
 800a9dc:	4680      	mov	r8, r0
 800a9de:	4689      	mov	r9, r1
 800a9e0:	e708      	b.n	800a7f4 <__kernel_rem_pio2+0x2ac>
 800a9e2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800a9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800a9ee:	f7f5 fe03 	bl	80005f8 <__aeabi_dmul>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4640      	mov	r0, r8
 800a9f8:	4649      	mov	r1, r9
 800a9fa:	f7f5 fc47 	bl	800028c <__adddf3>
 800a9fe:	3701      	adds	r7, #1
 800aa00:	4680      	mov	r8, r0
 800aa02:	4689      	mov	r9, r1
 800aa04:	9b04      	ldr	r3, [sp, #16]
 800aa06:	429f      	cmp	r7, r3
 800aa08:	dc01      	bgt.n	800aa0e <__kernel_rem_pio2+0x4c6>
 800aa0a:	45ba      	cmp	sl, r7
 800aa0c:	dae9      	bge.n	800a9e2 <__kernel_rem_pio2+0x49a>
 800aa0e:	ab4a      	add	r3, sp, #296	; 0x128
 800aa10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aa14:	e9c3 8900 	strd	r8, r9, [r3]
 800aa18:	f10a 0a01 	add.w	sl, sl, #1
 800aa1c:	3e08      	subs	r6, #8
 800aa1e:	e6f0      	b.n	800a802 <__kernel_rem_pio2+0x2ba>
 800aa20:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	d85b      	bhi.n	800aade <__kernel_rem_pio2+0x596>
 800aa26:	e8df f003 	tbb	[pc, r3]
 800aa2a:	264a      	.short	0x264a
 800aa2c:	0226      	.short	0x0226
 800aa2e:	ab9a      	add	r3, sp, #616	; 0x268
 800aa30:	441c      	add	r4, r3
 800aa32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800aa36:	46a2      	mov	sl, r4
 800aa38:	46ab      	mov	fp, r5
 800aa3a:	f1bb 0f00 	cmp.w	fp, #0
 800aa3e:	dc6c      	bgt.n	800ab1a <__kernel_rem_pio2+0x5d2>
 800aa40:	46a2      	mov	sl, r4
 800aa42:	46ab      	mov	fp, r5
 800aa44:	f1bb 0f01 	cmp.w	fp, #1
 800aa48:	f300 8086 	bgt.w	800ab58 <__kernel_rem_pio2+0x610>
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	2100      	movs	r1, #0
 800aa50:	2d01      	cmp	r5, #1
 800aa52:	f300 80a0 	bgt.w	800ab96 <__kernel_rem_pio2+0x64e>
 800aa56:	9b02      	ldr	r3, [sp, #8]
 800aa58:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800aa5c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f040 809e 	bne.w	800aba2 <__kernel_rem_pio2+0x65a>
 800aa66:	9b01      	ldr	r3, [sp, #4]
 800aa68:	e9c3 7800 	strd	r7, r8, [r3]
 800aa6c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800aa70:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800aa74:	e033      	b.n	800aade <__kernel_rem_pio2+0x596>
 800aa76:	3408      	adds	r4, #8
 800aa78:	ab4a      	add	r3, sp, #296	; 0x128
 800aa7a:	441c      	add	r4, r3
 800aa7c:	462e      	mov	r6, r5
 800aa7e:	2000      	movs	r0, #0
 800aa80:	2100      	movs	r1, #0
 800aa82:	2e00      	cmp	r6, #0
 800aa84:	da3a      	bge.n	800aafc <__kernel_rem_pio2+0x5b4>
 800aa86:	9b02      	ldr	r3, [sp, #8]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d03d      	beq.n	800ab08 <__kernel_rem_pio2+0x5c0>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa92:	9c01      	ldr	r4, [sp, #4]
 800aa94:	e9c4 2300 	strd	r2, r3, [r4]
 800aa98:	4602      	mov	r2, r0
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800aaa0:	f7f5 fbf2 	bl	8000288 <__aeabi_dsub>
 800aaa4:	ae4c      	add	r6, sp, #304	; 0x130
 800aaa6:	2401      	movs	r4, #1
 800aaa8:	42a5      	cmp	r5, r4
 800aaaa:	da30      	bge.n	800ab0e <__kernel_rem_pio2+0x5c6>
 800aaac:	9b02      	ldr	r3, [sp, #8]
 800aaae:	b113      	cbz	r3, 800aab6 <__kernel_rem_pio2+0x56e>
 800aab0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aab4:	4619      	mov	r1, r3
 800aab6:	9b01      	ldr	r3, [sp, #4]
 800aab8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800aabc:	e00f      	b.n	800aade <__kernel_rem_pio2+0x596>
 800aabe:	ab9a      	add	r3, sp, #616	; 0x268
 800aac0:	441c      	add	r4, r3
 800aac2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800aac6:	2000      	movs	r0, #0
 800aac8:	2100      	movs	r1, #0
 800aaca:	2d00      	cmp	r5, #0
 800aacc:	da10      	bge.n	800aaf0 <__kernel_rem_pio2+0x5a8>
 800aace:	9b02      	ldr	r3, [sp, #8]
 800aad0:	b113      	cbz	r3, 800aad8 <__kernel_rem_pio2+0x590>
 800aad2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aad6:	4619      	mov	r1, r3
 800aad8:	9b01      	ldr	r3, [sp, #4]
 800aada:	e9c3 0100 	strd	r0, r1, [r3]
 800aade:	9b06      	ldr	r3, [sp, #24]
 800aae0:	f003 0007 	and.w	r0, r3, #7
 800aae4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800aae8:	ecbd 8b02 	vpop	{d8}
 800aaec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aaf4:	f7f5 fbca 	bl	800028c <__adddf3>
 800aaf8:	3d01      	subs	r5, #1
 800aafa:	e7e6      	b.n	800aaca <__kernel_rem_pio2+0x582>
 800aafc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ab00:	f7f5 fbc4 	bl	800028c <__adddf3>
 800ab04:	3e01      	subs	r6, #1
 800ab06:	e7bc      	b.n	800aa82 <__kernel_rem_pio2+0x53a>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	e7c1      	b.n	800aa92 <__kernel_rem_pio2+0x54a>
 800ab0e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ab12:	f7f5 fbbb 	bl	800028c <__adddf3>
 800ab16:	3401      	adds	r4, #1
 800ab18:	e7c6      	b.n	800aaa8 <__kernel_rem_pio2+0x560>
 800ab1a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800ab1e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800ab22:	4640      	mov	r0, r8
 800ab24:	ec53 2b17 	vmov	r2, r3, d7
 800ab28:	4649      	mov	r1, r9
 800ab2a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ab2e:	f7f5 fbad 	bl	800028c <__adddf3>
 800ab32:	4602      	mov	r2, r0
 800ab34:	460b      	mov	r3, r1
 800ab36:	4606      	mov	r6, r0
 800ab38:	460f      	mov	r7, r1
 800ab3a:	4640      	mov	r0, r8
 800ab3c:	4649      	mov	r1, r9
 800ab3e:	f7f5 fba3 	bl	8000288 <__aeabi_dsub>
 800ab42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab46:	f7f5 fba1 	bl	800028c <__adddf3>
 800ab4a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ab4e:	e9ca 0100 	strd	r0, r1, [sl]
 800ab52:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800ab56:	e770      	b.n	800aa3a <__kernel_rem_pio2+0x4f2>
 800ab58:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800ab5c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800ab60:	4630      	mov	r0, r6
 800ab62:	ec53 2b17 	vmov	r2, r3, d7
 800ab66:	4639      	mov	r1, r7
 800ab68:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ab6c:	f7f5 fb8e 	bl	800028c <__adddf3>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4680      	mov	r8, r0
 800ab76:	4689      	mov	r9, r1
 800ab78:	4630      	mov	r0, r6
 800ab7a:	4639      	mov	r1, r7
 800ab7c:	f7f5 fb84 	bl	8000288 <__aeabi_dsub>
 800ab80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab84:	f7f5 fb82 	bl	800028c <__adddf3>
 800ab88:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ab8c:	e9ca 0100 	strd	r0, r1, [sl]
 800ab90:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800ab94:	e756      	b.n	800aa44 <__kernel_rem_pio2+0x4fc>
 800ab96:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ab9a:	f7f5 fb77 	bl	800028c <__adddf3>
 800ab9e:	3d01      	subs	r5, #1
 800aba0:	e756      	b.n	800aa50 <__kernel_rem_pio2+0x508>
 800aba2:	9b01      	ldr	r3, [sp, #4]
 800aba4:	9a01      	ldr	r2, [sp, #4]
 800aba6:	601f      	str	r7, [r3, #0]
 800aba8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800abac:	605c      	str	r4, [r3, #4]
 800abae:	609d      	str	r5, [r3, #8]
 800abb0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800abb4:	60d3      	str	r3, [r2, #12]
 800abb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abba:	6110      	str	r0, [r2, #16]
 800abbc:	6153      	str	r3, [r2, #20]
 800abbe:	e78e      	b.n	800aade <__kernel_rem_pio2+0x596>
 800abc0:	41700000 	.word	0x41700000
 800abc4:	3e700000 	.word	0x3e700000

0800abc8 <__kernel_sin>:
 800abc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abcc:	ec55 4b10 	vmov	r4, r5, d0
 800abd0:	b085      	sub	sp, #20
 800abd2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800abd6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800abda:	ed8d 1b00 	vstr	d1, [sp]
 800abde:	9002      	str	r0, [sp, #8]
 800abe0:	da06      	bge.n	800abf0 <__kernel_sin+0x28>
 800abe2:	ee10 0a10 	vmov	r0, s0
 800abe6:	4629      	mov	r1, r5
 800abe8:	f7f5 ffa0 	bl	8000b2c <__aeabi_d2iz>
 800abec:	2800      	cmp	r0, #0
 800abee:	d051      	beq.n	800ac94 <__kernel_sin+0xcc>
 800abf0:	4622      	mov	r2, r4
 800abf2:	462b      	mov	r3, r5
 800abf4:	4620      	mov	r0, r4
 800abf6:	4629      	mov	r1, r5
 800abf8:	f7f5 fcfe 	bl	80005f8 <__aeabi_dmul>
 800abfc:	4682      	mov	sl, r0
 800abfe:	468b      	mov	fp, r1
 800ac00:	4602      	mov	r2, r0
 800ac02:	460b      	mov	r3, r1
 800ac04:	4620      	mov	r0, r4
 800ac06:	4629      	mov	r1, r5
 800ac08:	f7f5 fcf6 	bl	80005f8 <__aeabi_dmul>
 800ac0c:	a341      	add	r3, pc, #260	; (adr r3, 800ad14 <__kernel_sin+0x14c>)
 800ac0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac12:	4680      	mov	r8, r0
 800ac14:	4689      	mov	r9, r1
 800ac16:	4650      	mov	r0, sl
 800ac18:	4659      	mov	r1, fp
 800ac1a:	f7f5 fced 	bl	80005f8 <__aeabi_dmul>
 800ac1e:	a33f      	add	r3, pc, #252	; (adr r3, 800ad1c <__kernel_sin+0x154>)
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	f7f5 fb30 	bl	8000288 <__aeabi_dsub>
 800ac28:	4652      	mov	r2, sl
 800ac2a:	465b      	mov	r3, fp
 800ac2c:	f7f5 fce4 	bl	80005f8 <__aeabi_dmul>
 800ac30:	a33c      	add	r3, pc, #240	; (adr r3, 800ad24 <__kernel_sin+0x15c>)
 800ac32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac36:	f7f5 fb29 	bl	800028c <__adddf3>
 800ac3a:	4652      	mov	r2, sl
 800ac3c:	465b      	mov	r3, fp
 800ac3e:	f7f5 fcdb 	bl	80005f8 <__aeabi_dmul>
 800ac42:	a33a      	add	r3, pc, #232	; (adr r3, 800ad2c <__kernel_sin+0x164>)
 800ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac48:	f7f5 fb1e 	bl	8000288 <__aeabi_dsub>
 800ac4c:	4652      	mov	r2, sl
 800ac4e:	465b      	mov	r3, fp
 800ac50:	f7f5 fcd2 	bl	80005f8 <__aeabi_dmul>
 800ac54:	a337      	add	r3, pc, #220	; (adr r3, 800ad34 <__kernel_sin+0x16c>)
 800ac56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5a:	f7f5 fb17 	bl	800028c <__adddf3>
 800ac5e:	9b02      	ldr	r3, [sp, #8]
 800ac60:	4606      	mov	r6, r0
 800ac62:	460f      	mov	r7, r1
 800ac64:	b9db      	cbnz	r3, 800ac9e <__kernel_sin+0xd6>
 800ac66:	4602      	mov	r2, r0
 800ac68:	460b      	mov	r3, r1
 800ac6a:	4650      	mov	r0, sl
 800ac6c:	4659      	mov	r1, fp
 800ac6e:	f7f5 fcc3 	bl	80005f8 <__aeabi_dmul>
 800ac72:	a325      	add	r3, pc, #148	; (adr r3, 800ad08 <__kernel_sin+0x140>)
 800ac74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac78:	f7f5 fb06 	bl	8000288 <__aeabi_dsub>
 800ac7c:	4642      	mov	r2, r8
 800ac7e:	464b      	mov	r3, r9
 800ac80:	f7f5 fcba 	bl	80005f8 <__aeabi_dmul>
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	4620      	mov	r0, r4
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	f7f5 fafe 	bl	800028c <__adddf3>
 800ac90:	4604      	mov	r4, r0
 800ac92:	460d      	mov	r5, r1
 800ac94:	ec45 4b10 	vmov	d0, r4, r5
 800ac98:	b005      	add	sp, #20
 800ac9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9e:	2200      	movs	r2, #0
 800aca0:	4b1b      	ldr	r3, [pc, #108]	; (800ad10 <__kernel_sin+0x148>)
 800aca2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aca6:	f7f5 fca7 	bl	80005f8 <__aeabi_dmul>
 800acaa:	4632      	mov	r2, r6
 800acac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acb0:	463b      	mov	r3, r7
 800acb2:	4640      	mov	r0, r8
 800acb4:	4649      	mov	r1, r9
 800acb6:	f7f5 fc9f 	bl	80005f8 <__aeabi_dmul>
 800acba:	4602      	mov	r2, r0
 800acbc:	460b      	mov	r3, r1
 800acbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acc2:	f7f5 fae1 	bl	8000288 <__aeabi_dsub>
 800acc6:	4652      	mov	r2, sl
 800acc8:	465b      	mov	r3, fp
 800acca:	f7f5 fc95 	bl	80005f8 <__aeabi_dmul>
 800acce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acd2:	f7f5 fad9 	bl	8000288 <__aeabi_dsub>
 800acd6:	a30c      	add	r3, pc, #48	; (adr r3, 800ad08 <__kernel_sin+0x140>)
 800acd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acdc:	4606      	mov	r6, r0
 800acde:	460f      	mov	r7, r1
 800ace0:	4640      	mov	r0, r8
 800ace2:	4649      	mov	r1, r9
 800ace4:	f7f5 fc88 	bl	80005f8 <__aeabi_dmul>
 800ace8:	4602      	mov	r2, r0
 800acea:	460b      	mov	r3, r1
 800acec:	4630      	mov	r0, r6
 800acee:	4639      	mov	r1, r7
 800acf0:	f7f5 facc 	bl	800028c <__adddf3>
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	4620      	mov	r0, r4
 800acfa:	4629      	mov	r1, r5
 800acfc:	f7f5 fac4 	bl	8000288 <__aeabi_dsub>
 800ad00:	e7c6      	b.n	800ac90 <__kernel_sin+0xc8>
 800ad02:	bf00      	nop
 800ad04:	f3af 8000 	nop.w
 800ad08:	55555549 	.word	0x55555549
 800ad0c:	3fc55555 	.word	0x3fc55555
 800ad10:	3fe00000 	.word	0x3fe00000
 800ad14:	5acfd57c 	.word	0x5acfd57c
 800ad18:	3de5d93a 	.word	0x3de5d93a
 800ad1c:	8a2b9ceb 	.word	0x8a2b9ceb
 800ad20:	3e5ae5e6 	.word	0x3e5ae5e6
 800ad24:	57b1fe7d 	.word	0x57b1fe7d
 800ad28:	3ec71de3 	.word	0x3ec71de3
 800ad2c:	19c161d5 	.word	0x19c161d5
 800ad30:	3f2a01a0 	.word	0x3f2a01a0
 800ad34:	1110f8a6 	.word	0x1110f8a6
 800ad38:	3f811111 	.word	0x3f811111

0800ad3c <fabs>:
 800ad3c:	ec51 0b10 	vmov	r0, r1, d0
 800ad40:	ee10 2a10 	vmov	r2, s0
 800ad44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad48:	ec43 2b10 	vmov	d0, r2, r3
 800ad4c:	4770      	bx	lr
	...

0800ad50 <floor>:
 800ad50:	ec51 0b10 	vmov	r0, r1, d0
 800ad54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad58:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ad5c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ad60:	2e13      	cmp	r6, #19
 800ad62:	460c      	mov	r4, r1
 800ad64:	ee10 5a10 	vmov	r5, s0
 800ad68:	4680      	mov	r8, r0
 800ad6a:	dc34      	bgt.n	800add6 <floor+0x86>
 800ad6c:	2e00      	cmp	r6, #0
 800ad6e:	da16      	bge.n	800ad9e <floor+0x4e>
 800ad70:	a335      	add	r3, pc, #212	; (adr r3, 800ae48 <floor+0xf8>)
 800ad72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad76:	f7f5 fa89 	bl	800028c <__adddf3>
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	f7f5 fecb 	bl	8000b18 <__aeabi_dcmpgt>
 800ad82:	b148      	cbz	r0, 800ad98 <floor+0x48>
 800ad84:	2c00      	cmp	r4, #0
 800ad86:	da59      	bge.n	800ae3c <floor+0xec>
 800ad88:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ad8c:	4a30      	ldr	r2, [pc, #192]	; (800ae50 <floor+0x100>)
 800ad8e:	432b      	orrs	r3, r5
 800ad90:	2500      	movs	r5, #0
 800ad92:	42ab      	cmp	r3, r5
 800ad94:	bf18      	it	ne
 800ad96:	4614      	movne	r4, r2
 800ad98:	4621      	mov	r1, r4
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	e025      	b.n	800adea <floor+0x9a>
 800ad9e:	4f2d      	ldr	r7, [pc, #180]	; (800ae54 <floor+0x104>)
 800ada0:	4137      	asrs	r7, r6
 800ada2:	ea01 0307 	and.w	r3, r1, r7
 800ada6:	4303      	orrs	r3, r0
 800ada8:	d01f      	beq.n	800adea <floor+0x9a>
 800adaa:	a327      	add	r3, pc, #156	; (adr r3, 800ae48 <floor+0xf8>)
 800adac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb0:	f7f5 fa6c 	bl	800028c <__adddf3>
 800adb4:	2200      	movs	r2, #0
 800adb6:	2300      	movs	r3, #0
 800adb8:	f7f5 feae 	bl	8000b18 <__aeabi_dcmpgt>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d0eb      	beq.n	800ad98 <floor+0x48>
 800adc0:	2c00      	cmp	r4, #0
 800adc2:	bfbe      	ittt	lt
 800adc4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800adc8:	fa43 f606 	asrlt.w	r6, r3, r6
 800adcc:	19a4      	addlt	r4, r4, r6
 800adce:	ea24 0407 	bic.w	r4, r4, r7
 800add2:	2500      	movs	r5, #0
 800add4:	e7e0      	b.n	800ad98 <floor+0x48>
 800add6:	2e33      	cmp	r6, #51	; 0x33
 800add8:	dd0b      	ble.n	800adf2 <floor+0xa2>
 800adda:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800adde:	d104      	bne.n	800adea <floor+0x9a>
 800ade0:	ee10 2a10 	vmov	r2, s0
 800ade4:	460b      	mov	r3, r1
 800ade6:	f7f5 fa51 	bl	800028c <__adddf3>
 800adea:	ec41 0b10 	vmov	d0, r0, r1
 800adee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800adf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adfa:	fa23 f707 	lsr.w	r7, r3, r7
 800adfe:	4207      	tst	r7, r0
 800ae00:	d0f3      	beq.n	800adea <floor+0x9a>
 800ae02:	a311      	add	r3, pc, #68	; (adr r3, 800ae48 <floor+0xf8>)
 800ae04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae08:	f7f5 fa40 	bl	800028c <__adddf3>
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f7f5 fe82 	bl	8000b18 <__aeabi_dcmpgt>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d0bf      	beq.n	800ad98 <floor+0x48>
 800ae18:	2c00      	cmp	r4, #0
 800ae1a:	da02      	bge.n	800ae22 <floor+0xd2>
 800ae1c:	2e14      	cmp	r6, #20
 800ae1e:	d103      	bne.n	800ae28 <floor+0xd8>
 800ae20:	3401      	adds	r4, #1
 800ae22:	ea25 0507 	bic.w	r5, r5, r7
 800ae26:	e7b7      	b.n	800ad98 <floor+0x48>
 800ae28:	2301      	movs	r3, #1
 800ae2a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ae2e:	fa03 f606 	lsl.w	r6, r3, r6
 800ae32:	4435      	add	r5, r6
 800ae34:	4545      	cmp	r5, r8
 800ae36:	bf38      	it	cc
 800ae38:	18e4      	addcc	r4, r4, r3
 800ae3a:	e7f2      	b.n	800ae22 <floor+0xd2>
 800ae3c:	2500      	movs	r5, #0
 800ae3e:	462c      	mov	r4, r5
 800ae40:	e7aa      	b.n	800ad98 <floor+0x48>
 800ae42:	bf00      	nop
 800ae44:	f3af 8000 	nop.w
 800ae48:	8800759c 	.word	0x8800759c
 800ae4c:	7e37e43c 	.word	0x7e37e43c
 800ae50:	bff00000 	.word	0xbff00000
 800ae54:	000fffff 	.word	0x000fffff

0800ae58 <scalbn>:
 800ae58:	b570      	push	{r4, r5, r6, lr}
 800ae5a:	ec55 4b10 	vmov	r4, r5, d0
 800ae5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ae62:	4606      	mov	r6, r0
 800ae64:	462b      	mov	r3, r5
 800ae66:	b9aa      	cbnz	r2, 800ae94 <scalbn+0x3c>
 800ae68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ae6c:	4323      	orrs	r3, r4
 800ae6e:	d03b      	beq.n	800aee8 <scalbn+0x90>
 800ae70:	4b31      	ldr	r3, [pc, #196]	; (800af38 <scalbn+0xe0>)
 800ae72:	4629      	mov	r1, r5
 800ae74:	2200      	movs	r2, #0
 800ae76:	ee10 0a10 	vmov	r0, s0
 800ae7a:	f7f5 fbbd 	bl	80005f8 <__aeabi_dmul>
 800ae7e:	4b2f      	ldr	r3, [pc, #188]	; (800af3c <scalbn+0xe4>)
 800ae80:	429e      	cmp	r6, r3
 800ae82:	4604      	mov	r4, r0
 800ae84:	460d      	mov	r5, r1
 800ae86:	da12      	bge.n	800aeae <scalbn+0x56>
 800ae88:	a327      	add	r3, pc, #156	; (adr r3, 800af28 <scalbn+0xd0>)
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	f7f5 fbb3 	bl	80005f8 <__aeabi_dmul>
 800ae92:	e009      	b.n	800aea8 <scalbn+0x50>
 800ae94:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ae98:	428a      	cmp	r2, r1
 800ae9a:	d10c      	bne.n	800aeb6 <scalbn+0x5e>
 800ae9c:	ee10 2a10 	vmov	r2, s0
 800aea0:	4620      	mov	r0, r4
 800aea2:	4629      	mov	r1, r5
 800aea4:	f7f5 f9f2 	bl	800028c <__adddf3>
 800aea8:	4604      	mov	r4, r0
 800aeaa:	460d      	mov	r5, r1
 800aeac:	e01c      	b.n	800aee8 <scalbn+0x90>
 800aeae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	3a36      	subs	r2, #54	; 0x36
 800aeb6:	4432      	add	r2, r6
 800aeb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aebc:	428a      	cmp	r2, r1
 800aebe:	dd0b      	ble.n	800aed8 <scalbn+0x80>
 800aec0:	ec45 4b11 	vmov	d1, r4, r5
 800aec4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800af30 <scalbn+0xd8>
 800aec8:	f000 f83c 	bl	800af44 <copysign>
 800aecc:	a318      	add	r3, pc, #96	; (adr r3, 800af30 <scalbn+0xd8>)
 800aece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed2:	ec51 0b10 	vmov	r0, r1, d0
 800aed6:	e7da      	b.n	800ae8e <scalbn+0x36>
 800aed8:	2a00      	cmp	r2, #0
 800aeda:	dd08      	ble.n	800aeee <scalbn+0x96>
 800aedc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aee0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aee4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aee8:	ec45 4b10 	vmov	d0, r4, r5
 800aeec:	bd70      	pop	{r4, r5, r6, pc}
 800aeee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aef2:	da0d      	bge.n	800af10 <scalbn+0xb8>
 800aef4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aef8:	429e      	cmp	r6, r3
 800aefa:	ec45 4b11 	vmov	d1, r4, r5
 800aefe:	dce1      	bgt.n	800aec4 <scalbn+0x6c>
 800af00:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800af28 <scalbn+0xd0>
 800af04:	f000 f81e 	bl	800af44 <copysign>
 800af08:	a307      	add	r3, pc, #28	; (adr r3, 800af28 <scalbn+0xd0>)
 800af0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0e:	e7e0      	b.n	800aed2 <scalbn+0x7a>
 800af10:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af14:	3236      	adds	r2, #54	; 0x36
 800af16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800af1e:	4620      	mov	r0, r4
 800af20:	4629      	mov	r1, r5
 800af22:	2200      	movs	r2, #0
 800af24:	4b06      	ldr	r3, [pc, #24]	; (800af40 <scalbn+0xe8>)
 800af26:	e7b2      	b.n	800ae8e <scalbn+0x36>
 800af28:	c2f8f359 	.word	0xc2f8f359
 800af2c:	01a56e1f 	.word	0x01a56e1f
 800af30:	8800759c 	.word	0x8800759c
 800af34:	7e37e43c 	.word	0x7e37e43c
 800af38:	43500000 	.word	0x43500000
 800af3c:	ffff3cb0 	.word	0xffff3cb0
 800af40:	3c900000 	.word	0x3c900000

0800af44 <copysign>:
 800af44:	ec51 0b10 	vmov	r0, r1, d0
 800af48:	ee11 0a90 	vmov	r0, s3
 800af4c:	ee10 2a10 	vmov	r2, s0
 800af50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800af54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800af58:	ea41 0300 	orr.w	r3, r1, r0
 800af5c:	ec43 2b10 	vmov	d0, r2, r3
 800af60:	4770      	bx	lr
	...

0800af64 <_init>:
 800af64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af66:	bf00      	nop
 800af68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af6a:	bc08      	pop	{r3}
 800af6c:	469e      	mov	lr, r3
 800af6e:	4770      	bx	lr

0800af70 <_fini>:
 800af70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af72:	bf00      	nop
 800af74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af76:	bc08      	pop	{r3}
 800af78:	469e      	mov	lr, r3
 800af7a:	4770      	bx	lr
